<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Knihovna Polars: výkonnější alternativa ke knihovně Pandas (datové rámce)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Knihovna Polars: výkonnější alternativa ke knihovně Pandas (datové rámce)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části seriálu o knihovně Polars, jejímž cílem je být výkonnější alternativou ke známé knihovně Pandas, se budeme převážně zabývat operacemi, které je možné provádět s datovými rámci (data frames).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Knihovna Polars: výkonnější alternativa ke knihovně Pandas (datové rámce)</a></p>
<p><a href="#k02">2. Zobrazení úvodních záznamů uložených v&nbsp;datovém rámci metodou <strong>head</strong></a></p>
<p><a href="#k03">3. Specifikace maximálního počtu zobrazených řádků s&nbsp;obsahem datového rámce</a></p>
<p><a href="#k04">4. Volba naformátování datového rámce</a></p>
<p><a href="#k05">5. Zobrazení naformátovaného datového rámce bez specifikace jeho tvaru</a></p>
<p><a href="#k06">6. Seřazení záznamů v&nbsp;datovém rámci metodou <strong>sort</strong></a></p>
<p><a href="#k07">7. Odstranění duplicitních záznamů na základě hodnot ve specifikovaném sloupci</a></p>
<p><a href="#k08">8. Zpracování jednotlivých sloupců v&nbsp;datových rámcích &ndash; <strong>map</strong></a></p>
<p><a href="#k09">9. Použití alternativní metody <strong>apply</strong></a></p>
<p><a href="#k10">10. Rozdělení a následná agregace údajů s&nbsp;využitím metody <strong>groupby</strong></a></p>
<p><a href="#k11">11. Praktická ukázka použití <strong>groupby</strong></a></p>
<p><a href="#k12">12. Seřazení hodnot v&nbsp;průběhu jejich agregace</a></p>
<p><a href="#k13">13. Seřazení záznamů v&nbsp;datovém rámci před provedením operace <strong>groupby</strong> s&nbsp;následnou agregací</a></p>
<p><a href="#k14">14. Výpočet celkového pořadí vítězných programovacích jazyků</a></p>
<p><a href="#k15">15. Seřazení jazyků na základě jejich celkového pořadí</a></p>
<p><a href="#k16">16. Dva způsoby korektního seřazení výsledků</a></p>
<p><a href="#k17">17. Příklad na závěr &ndash; složitější &bdquo;pipeline&ldquo;, změna názvu sloupce</a></p>
<p><a href="#k18">18. Obsah třetí části seriálu o knihovně Polars</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Knihovna Polars: výkonnější alternativa ke knihovně Pandas (datové rámce)</h2>

<p>Na <a
href="https://www.root.cz/clanky/knihovna-polars-vykonnejsi-alternativa-ke-knihovne-pandas/https://www.root.cz/clanky/knihovna-polars-vykonnejsi-alternativa-ke-knihovne-pandas/">úvodní
článek</a> o knihovně <i>Polars</i>, jejímž cílem je být výkonnější
alternativou ke známé knihovně <i>Pandas</i>, dnes navážeme. Ukážeme si některé
další operace určené pro zpracování dat uložených v&nbsp;datových rámcích
(<i>data frame</i>). V&nbsp;první řadě se jedná o seřazení dat, zobrazení
určité části datového rámce, naformátování výstupu s&nbsp;datovým rámcem,
získání prvků s&nbsp;unikátními hodnotami atd. Ovšem nesmíme zapomenout ani na
velmi důležitou sekvenci operací: rozdělení vstupních záznamů do skupin na
základě zadaného kritéria následovanému agregací dat (což může být například
zjištění, kolik záznamů se v&nbsp;každé skupině nachází atd.). Všechny zmíněné
operace je přitom možné různým způsobem kombinovat a zapsat tak do jediného
výrazu i poměrně složité transformace dat.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Zobrazení úvodních záznamů uložených v&nbsp;datovém rámci metodou <strong>head</strong></h2>

<p>Ve skriptech uvedených <a
href="https://www.root.cz/clanky/knihovna-polars-vykonnejsi-alternativa-ke-knihovne-pandas/">minule</a>
jsme se většinou snažili zobrazit celý obsah datového rámce. Existují ovšem
metody <strong>head</strong> a <strong>tail</strong>, které dokážou zobrazit
pouze několik úvodních záznamů v&nbsp;datovém rámci popř.&nbsp;naopak poslední
záznamy v&nbsp;rámci. Nejdříve se podívejme na metodu <strong>head</strong>
která, pokud se jí nepředají další parametry, zobrazí prvních pět úvodních
záznamů:</p>

<pre>
print(<strong>df.head()</strong>)
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
shape: (5, 2)
┌──────┬────────┐
│ Year ┆ Winner │
│ ---  ┆ ---    │
│ i64  ┆ str    │
╞══════╪════════╡
│ 2022 ┆ C++    │
│ 2021 ┆ Python │
│ 2020 ┆ Python │
│ 2019 ┆ C      │
│ 2018 ┆ Python │
└──────┴────────┘
</pre>

<p>Podobně lze použít metodu <strong>tail</strong>:</p>

<pre>
print(<strong>df.head()</strong>)
</pre>

<p>S&nbsp;odlišným výsledkem:</p>

<pre>
shape: (5, 2)
┌──────┬────────┐
│ Year ┆ Winner │
│ ---  ┆ ---    │
│ i64  ┆ str    │
╞══════╪════════╡
│ 2007 ┆ Python │
│ 2006 ┆ Ruby   │
│ 2005 ┆ Java   │
│ 2004 ┆ PHP    │
│ 2003 ┆ C++    │
└──────┴────────┘
</pre>

<p>Celý skript může vypadat následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># zobrazíme datový rámec, resp. jeho hlavičku</i>
print(<strong>df.head()</strong>)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_12_head_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_12_head_A.py</a>.</div></p>

<p>Pokud metodám <strong>head</strong> či <strong>tail</strong> předáme
celočíselnou hodnotu, bude se jednat o počet záznamů, které se mají zobrazit.
Ovšem je důležité dát si pozor na to, že existuje ještě <a href="#k03">dále
popsané</a> omezení maximálního počtu zobrazených řádků na terminálu.</p>

<p>Použití metody <strong>head</strong> s&nbsp;parametrem:</p>

<pre>
print(<strong>df.head(30)</strong>)
</pre>

<p>Výsledek:</p>

<pre>
shape: (20, 2)
┌──────┬────────┐
│ Year ┆ Winner │
│ ---  ┆ ---    │
│ i64  ┆ str    │
╞══════╪════════╡
│ 2022 ┆ C++    │
│ 2021 ┆ Python │
│ 2020 ┆ Python │
│ 2019 ┆ C      │
│ ...  ┆ ...    │
│ 2006 ┆ Ruby   │
│ 2005 ┆ Java   │
│ 2004 ┆ PHP    │
│ 2003 ┆ C++    │
└──────┴────────┘
</pre>

<p>Použití metody <strong>tail</strong> s&nbsp;parametrem:</p>

<pre>
print(<strong>df.tail(30)</strong>)
</pre>

<p>Výsledek:</p>

<pre>
shape: (20, 2)
┌──────┬────────┐
│ Year ┆ Winner │
│ ---  ┆ ---    │
│ i64  ┆ str    │
╞══════╪════════╡
│ 2022 ┆ C++    │
│ 2021 ┆ Python │
│ 2020 ┆ Python │
│ 2019 ┆ C      │
│ ...  ┆ ...    │
│ 2006 ┆ Ruby   │
│ 2005 ┆ Java   │
│ 2004 ┆ PHP    │
│ 2003 ┆ C++    │
└──────┴────────┘
</pre>

<p>Celý skript vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># zobrazíme datový rámec, resp. jeho hlavičku</i>
print(<strong>df.head(30)</strong>)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_13_head_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_13_head_B.py</a>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Specifikace maximálního počtu zobrazených řádků s&nbsp;obsahem datového rámce</h2>

<p>Funkcí <strong>polars.Config.set_tbl_rows()</strong> je možné zvětšit či
naopak zmenšit maximální počet řádků s&nbsp;obsahem datového rámce, které budou
vypsány na terminál (resp.&nbsp;obecně na standardní výstup). V&nbsp;případě,
že bude datový rámec obsahovat méně řádků, bude zobrazen celý, pokud bude
obsahovat více řádků, bude datový rámec v&nbsp;polovině zkrácen:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
<strong>polars.Config.set_tbl_rows(100)</strong>
&nbsp;
<i># zobrazíme datový rámec</i>
print(df.head(30))
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_14_head_C.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_14_head_C.py</a>.</div></p>

<p>Výsledek bude nyní vypadat následovně &ndash; zobrazí se všech dvacet
řádků:</p>

<pre>
shape: (20, 2)
┌──────┬──────────────┐
│ Year ┆ Winner       │
│ ---  ┆ ---          │
│ i64  ┆ str          │
╞══════╪══════════════╡
│ 2022 ┆ C++          │
│ 2021 ┆ Python       │
│ 2020 ┆ Python       │
│ 2019 ┆ C            │
│ 2018 ┆ Python       │
│ 2017 ┆ C            │
│ 2016 ┆ Go           │
│ 2015 ┆ Java         │
│ 2014 ┆ JavaScript   │
│ 2013 ┆ Transact-SQL │
│ 2012 ┆ Objective-C  │
│ 2011 ┆ Objective-C  │
│ 2010 ┆ Python       │
│ 2009 ┆ Go           │
│ 2008 ┆ C            │
│ 2007 ┆ Python       │
│ 2006 ┆ Ruby         │
│ 2005 ┆ Java         │
│ 2004 ┆ PHP          │
│ 2003 ┆ C++          │
└──────┴──────────────┘
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Volba naformátování datového rámce</h2>

<p>Datové rámce je možné zobrazit mnoha různými způsoby. Volba formátování se
provádí funkcí <strong>polars.Config.set_tbl_formatting</strong>, které se
předává řetězcová konstanta (literál) s&nbsp;popisem formátu. Všechny
v&nbsp;současnosti podporované formáty zobrazení naleznete v&nbsp;následujícím
skriptu, konkrétně v&nbsp;n-tici <i>formattings</i>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
formattings = (
        "ASCII_FULL",
        "ASCII_FULL_CONDENSED",
        "ASCII_NO_BORDERS",
        "ASCII_BORDERS_ONLY",
        "ASCII_BORDERS_ONLY_CONDENSED",
        "ASCII_HORIZONTAL_ONLY",
        "ASCII_MARKDOWN",
        "UTF8_FULL",
        "UTF8_FULL_CONDENSED",
        "UTF8_NO_BORDERS",
        "UTF8_BORDERS_ONLY",
        "UTF8_HORIZONTAL_ONLY",
        "NOTHING",
        )
&nbsp;
for formatting in formattings:
    print()
    print(formatting)
    print()
&nbsp;
    <strong>polars.Config.set_tbl_formatting(formatting)</strong>
&nbsp;
    <i># zobrazíme datový rámec</i>
    print(df)
</pre>

<p>Výsledné datové rámce zobrazené na terminálu jsou naformátovány takto: <a
href="https://raw.githubusercontent.com/tisnik/most-popular-python-libs/master/polars/formatted_data_frames_with_shapes.txt">https://raw.githubusercontent.com/tisnik/most-popular-python-libs/master/polars/formatted_data_frames_with_shapes.txt</a>.</p>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_15_formatting_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_15_formatting_A.py</a>.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Zobrazení naformátovaného datového rámce bez specifikace jeho tvaru</h2>

<p>Alternativně je možné příkazem:</p>

<pre>
<strong>polars.Config.set_tbl_hide_dataframe_shape(True)</strong>
</pre>

<p>zakázat zobrazení tvaru (<i>shape</i>) datového rámce. Výsledné formy
naformátování datových rámců naleznete na stránce <a
href="https://raw.githubusercontent.com/tisnik/most-popular-python-libs/master/polars/formatted_data_frames_without_shapes.txt">https://raw.githubusercontent.com/tisnik/most-popular-python-libs/master/polars/formatted_data_frames_without_shapes.txt</a>
a jsou výsledkem činnosti tohoto skriptu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># nezobrazovat tvar (shape) datových rámců</i>
<strong>polars.Config.set_tbl_hide_dataframe_shape(True)</strong>
&nbsp;
formattings = (
        "ASCII_FULL",
        "ASCII_FULL_CONDENSED",
        "ASCII_NO_BORDERS",
        "ASCII_BORDERS_ONLY",
        "ASCII_BORDERS_ONLY_CONDENSED",
        "ASCII_HORIZONTAL_ONLY",
        "ASCII_MARKDOWN",
        "UTF8_FULL",
        "UTF8_FULL_CONDENSED",
        "UTF8_NO_BORDERS",
        "UTF8_BORDERS_ONLY",
        "UTF8_HORIZONTAL_ONLY",
        "NOTHING",
        )
&nbsp;
for formatting in formattings:
    print()
    print(formatting)
    print()
&nbsp;
    <strong>polars.Config.set_tbl_formatting(formatting)</strong>
&nbsp;
    <i># zobrazíme datový rámec</i>
    print(df)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_16_formatting_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_16_formatting_B.py</a>.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Seřazení záznamů v&nbsp;datovém rámci metodou <strong>sort</strong></h2>

<p>Záznamy v&nbsp;datovém rámci je možné seřadit podle hodnot uložených ve
vybraném sloupci. K&nbsp;tomuto účelu slouží metoda nazvaná
<strong>sort</strong>, které se předá jméno sloupce. Důležité je, že původní
datový rámec zůstane nezměněn, ale vytvoří a vrátí se rámec nový (podobně jako
u standardní funkce <strong>sort</strong>). Takto například zajistíme seřazení
hodnot v&nbsp;datovém rámci podle jména programovacího jazyka:</p>

<pre>
<i># seřadit a vytvořit nový datový rámec</i>
df = <strong>df.sort("Winner")</strong>
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
shape: (20, 2)
┌──────┬──────────────┐
│ Year ┆ Winner       │
│ ---  ┆ ---          │
│ i64  ┆ str          │
╞══════╪══════════════╡
│ 2019 ┆ C            │
│ 2017 ┆ C            │
│ 2008 ┆ C            │
│ 2022 ┆ C++          │
│ 2003 ┆ C++          │
│ 2016 ┆ Go           │
│ 2009 ┆ Go           │
│ 2015 ┆ Java         │
│ 2005 ┆ Java         │
│ 2014 ┆ JavaScript   │
│ 2012 ┆ Objective-C  │
│ 2011 ┆ Objective-C  │
│ 2004 ┆ PHP          │
│ 2021 ┆ Python       │
│ 2020 ┆ Python       │
│ 2018 ┆ Python       │
│ 2010 ┆ Python       │
│ 2007 ┆ Python       │
│ 2006 ┆ Ruby         │
│ 2013 ┆ Transact-SQL │
└──────┴──────────────┘
</pre>

<p>Úplný skript, který načte, seřadí a zobrazí nový datový rámec, vypadá
takto:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># seřadit a vytvořit nový datový rámec</i>
df = <strong>df.sort("Winner")</strong>
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_17_sort.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_17_sort.py</a>.</div></p>

<p>Pokud budeme potřebovat seřadit záznamy v&nbsp;opačném pořadí, nabízí se
použití další metody nazvané <strong>reverse</strong>:</p>

<pre>
<i># seřadit a vytvořit nový datový rámec</i>
df = <strong>df.sort("Winner").reverse()</strong>
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
shape: (20, 2)
┌──────┬──────────────┐
│ Year ┆ Winner       │
│ ---  ┆ ---          │
│ i64  ┆ str          │
╞══════╪══════════════╡
│ 2013 ┆ Transact-SQL │
│ 2006 ┆ Ruby         │
│ 2007 ┆ Python       │
│ 2010 ┆ Python       │
│ 2018 ┆ Python       │
│ 2020 ┆ Python       │
│ 2021 ┆ Python       │
│ 2004 ┆ PHP          │
│ 2011 ┆ Objective-C  │
│ 2012 ┆ Objective-C  │
│ 2014 ┆ JavaScript   │
│ 2005 ┆ Java         │
│ 2015 ┆ Java         │
│ 2009 ┆ Go           │
│ 2016 ┆ Go           │
│ 2003 ┆ C++          │
│ 2022 ┆ C++          │
│ 2008 ┆ C            │
│ 2017 ┆ C            │
│ 2019 ┆ C            │
└──────┴──────────────┘
</pre>

<p>Opět si uveďme celý skript, který tuto operaci provede:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># seřadit a vytvořit nový datový rámec</i>
df = <strong>df.sort("Winner").reverse()</strong>
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_18_sort_reverse.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_18_sort_reverse.py</a>.</div></p>

<p>Rychlejší i paměťově méně náročné je ovšem předání nepovinného parametru
<strong>reverse</strong> metodě <strong>Sort</strong>. Ušetří se tím vytvoření
jednoho datového rámce navíc a současně i provedení operace
<strong>reverse</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># seřadit a vytvořit nový datový rámec</i>
df = <strong>df.sort("Winner", reverse=True)</strong>
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
</pre>

<p>Výsledek bude totožný s&nbsp;výsledkem získaným z&nbsp;předchozího
skriptu.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Odstranění duplicitních záznamů na základě hodnot ve specifikovaném sloupci</h2>

<p>Metodou <strong>unique</strong>, která opět vytvoří nový datový rámec, je
možné vybrat jen tolik záznamů z&nbsp;původního datového rámce, aby hodnoty ve
vybraném sloupci byly unikátní. Co to například znamená v&nbsp;našem konkrétním
případě?  Názvy programovacích jazyků v&nbsp;původním datovém sloupci nejsou
unikátní, protože se některé jazyky opakují:</p>

<pre>
shape: (20, 2)
┌──────┬──────────────┐
│ Year ┆ Winner       │
│ ---  ┆ ---          │
│ i64  ┆ str          │
╞══════╪══════════════╡
│ 2022 ┆ C++          │
│ 2021 ┆ Python       │
│ 2020 ┆ Python       │
│ 2019 ┆ C            │
│ 2018 ┆ Python       │
│ 2017 ┆ C            │
│ 2016 ┆ Go           │
│ 2015 ┆ Java         │
│ 2014 ┆ JavaScript   │
│ 2013 ┆ Transact-SQL │
│ 2012 ┆ Objective-C  │
│ 2011 ┆ Objective-C  │
│ 2010 ┆ Python       │
│ 2009 ┆ Go           │
│ 2008 ┆ C            │
│ 2007 ┆ Python       │
│ 2006 ┆ Ruby         │
│ 2005 ┆ Java         │
│ 2004 ┆ PHP          │
│ 2003 ┆ C++          │
└──────┴──────────────┘
</pre>

<p>Pokud ovšem vytvoříme nový datový rámec následující operací:</p>

<pre>
<i># vyfiltrovat a vytvořit nový datový rámec</i>
df = <strong>df.unique(subset="Winner")</strong>
</pre>

<p>Bude ve výsledku každý jazyk reprezentován jediným záznamem:</p>

<pre>
shape: (10, 2)
┌──────┬──────────────┐
│ Year ┆ Winner       │
│ ---  ┆ ---          │
│ i64  ┆ str          │
╞══════╪══════════════╡
│ 2022 ┆ C++          │
│ 2021 ┆ Python       │
│ 2019 ┆ C            │
│ 2016 ┆ Go           │
│ 2015 ┆ Java         │
│ 2014 ┆ JavaScript   │
│ 2013 ┆ Transact-SQL │
│ 2012 ┆ Objective-C  │
│ 2006 ┆ Ruby         │
│ 2004 ┆ PHP          │
└──────┴──────────────┘
</pre>

<p>Opět si pro úplnost ukažme celý skript, který tuto operaci provádí:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># seřadit a vytvořit nový datový rámec</i>
df = <strong>df.unique(subset="Winner")</strong>
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_19_unique.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_19_unique.py</a>.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Zpracování jednotlivých sloupců v&nbsp;datových rámcích &ndash; <strong>map</strong></h2>

<p>Vyzkoušejme si nyní vytvoření nového sloupce pojmenovaného &bdquo;Ratings as
ratio&ldquo; a založeného na hodnotách z&nbsp;existujícího sloupce
&bdquo;Ratings&ldquo;. Použijeme přitom metodu <strong>map</strong>, která
postupně aplikuje zadanou funkci (v&nbsp;našem případě anonymní funkci zapsanou
pomocí <strong>lambda</strong>) na hodnoty uložené ve vybraném sloupci.
Zpracování hodnot je jednoduché &ndash; hodnoty v&nbsp;procentech se převedou
na hodnoty ležící v&nbsp;rozsahu od 0,1 do 1,0, tedy na poměr popularity
jednotlivých programovacích jazyků:</p>

<pre>
<i># převod na skutečný poměr &lt;0, 1&gt;</i>
df2 = df.with_column(
    polars.col("Ratings")<strong>.map(lambda x: x / 100.0)</strong>.alias("Ratings as ratio")
)
</pre>

<p>Výsledkem by měl být nový datový rámec (df2) s&nbsp;novým sloupcem:</p>

<pre>
shape: (20, 7)
┌──────────┬──────────┬────────┬───────────────────┬─────────┬─────────┬──────────────────┐
│ Sep 2020 ┆ Sep 2019 ┆ Change ┆ Language          ┆ Ratings ┆ Changep ┆ Ratings as ratio │
│ ---      ┆ ---      ┆ ---    ┆ ---               ┆ ---     ┆ ---     ┆ ---              │
│ i64      ┆ i64      ┆ str    ┆ str               ┆ f64     ┆ f64     ┆ f64              │
╞══════════╪══════════╪════════╪═══════════════════╪═════════╪═════════╪══════════════════╡
│ 1        ┆ 2        ┆ change ┆ C                 ┆ 15.95   ┆ 0.74    ┆ 0.1595           │
│ 2        ┆ 1        ┆ change ┆ Java              ┆ 13.48   ┆ -3.18   ┆ 0.1348           │
│ 3        ┆ 3        ┆ null   ┆ Python            ┆ 10.47   ┆ 0.59    ┆ 0.1047           │
│ 4        ┆ 4        ┆ null   ┆ C++               ┆ 7.11    ┆ 1.48    ┆ 0.0711           │
│ 5        ┆ 5        ┆ null   ┆ C#                ┆ 4.58    ┆ 1.18    ┆ 0.0458           │
│ 6        ┆ 6        ┆ null   ┆ Visual Basic      ┆ 4.12    ┆ 0.83    ┆ 0.0412           │
│ 7        ┆ 7        ┆ null   ┆ JavaScript        ┆ 2.54    ┆ 0.41    ┆ 0.0254           │
│ 8        ┆ 9        ┆ change ┆ PHP               ┆ 2.49    ┆ 0.62    ┆ 0.0249           │
│ 9        ┆ 19       ┆ change ┆ R                 ┆ 2.37    ┆ 1.33    ┆ 0.0237           │
│ 10       ┆ 8        ┆ change ┆ SQL               ┆ 1.76    ┆ -0.19   ┆ 0.0176           │
│ 11       ┆ 14       ┆ change ┆ Go                ┆ 1.46    ┆ 0.24    ┆ 0.0146           │
│ 12       ┆ 16       ┆ change ┆ Swift             ┆ 1.38    ┆ 0.28    ┆ 0.0138           │
│ 13       ┆ 20       ┆ change ┆ Perl              ┆ 1.3     ┆ 0.26    ┆ 0.013            │
│ 14       ┆ 12       ┆ change ┆ Assembly language ┆ 1.3     ┆ -0.08   ┆ 0.013            │
│ 15       ┆ 15       ┆ null   ┆ Ruby              ┆ 1.24    ┆ 0.03    ┆ 0.0124           │
│ 16       ┆ 18       ┆ change ┆ MATLAB            ┆ 1.1     ┆ 0.04    ┆ 0.011            │
│ 17       ┆ 11       ┆ change ┆ Groovy            ┆ 0.99    ┆ -0.52   ┆ 0.0099           │
│ 18       ┆ 33       ┆ change ┆ Rust              ┆ 0.92    ┆ 0.55    ┆ 0.0092           │
│ 19       ┆ 10       ┆ change ┆ Objective-C       ┆ 0.85    ┆ -0.99   ┆ 0.0085           │
│ 20       ┆ 24       ┆ change ┆ Dart              ┆ 0.77    ┆ 0.13    ┆ 0.0077           │
└──────────┴──────────┴────────┴───────────────────┴─────────┴─────────┴──────────────────┘
</pre>

<p>Opět si pro úplnost ukažme celý skript:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("tiobe.tsv", sep="\t")
&nbsp;
<i># převod na skutečný poměr &lt;0, 1&gt;</i>
df2 = df.with_column(
    polars.col("Ratings")<strong>.map(lambda x: x / 100.0)</strong>.alias("Ratings as ratio")
)
&nbsp;
<i># datový rámec zobrazíme</i>
print(df)
print()
&nbsp;
<i># datový rámec zobrazíme</i>
print(df2)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_20_map_conversion.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_20_map_conversion.py</a>.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Použití alternativní metody <strong>apply</strong></h2>

<p>Namísto metody <strong>map</strong>, která interně operuje vždy s&nbsp;celým
sloupcem (tedy s&nbsp;datovou řadou) je možné použít metodu
<strong>apply</strong>. Ta v&nbsp;tomto případě provádí (z&nbsp;pohledu
uživatele) shodnou operaci (výsledek bude totožný), ovšem interně je výpočet
proveden zcela odlišným způsobem:</p>

<pre>
<i># převod na skutečný poměr &lt;0, 1&gt;</i>
df2 = df.with_column(
    polars.col("Ratings")<strong>.apply(lambda x: x / 100.0)</strong>.alias("Ratings as ratio")
)
</pre>

<p>Výsledkem bude v&nbsp;tomto konkrétním případě naprosto stejný datový rámec,
jaký byl získán skriptem <a href="#k08">z&nbsp;předchozí kapitoly</a>. Mohlo by
se tedy zdát, že <strong>map</strong> a <strong>apply</strong> mají stejný
význam, ale příště si ukážeme, že tomu tak vždy není:</p>

<pre>
shape: (20, 7)
┌──────────┬──────────┬────────┬───────────────────┬─────────┬─────────┬──────────────────┐
│ Sep 2020 ┆ Sep 2019 ┆ Change ┆ Language          ┆ Ratings ┆ Changep ┆ Ratings as ratio │
│ ---      ┆ ---      ┆ ---    ┆ ---               ┆ ---     ┆ ---     ┆ ---              │
│ i64      ┆ i64      ┆ str    ┆ str               ┆ f64     ┆ f64     ┆ f64              │
╞══════════╪══════════╪════════╪═══════════════════╪═════════╪═════════╪══════════════════╡
│ 1        ┆ 2        ┆ change ┆ C                 ┆ 15.95   ┆ 0.74    ┆ 0.1595           │
│ 2        ┆ 1        ┆ change ┆ Java              ┆ 13.48   ┆ -3.18   ┆ 0.1348           │
│ 3        ┆ 3        ┆ null   ┆ Python            ┆ 10.47   ┆ 0.59    ┆ 0.1047           │
│ 4        ┆ 4        ┆ null   ┆ C++               ┆ 7.11    ┆ 1.48    ┆ 0.0711           │
│ 5        ┆ 5        ┆ null   ┆ C#                ┆ 4.58    ┆ 1.18    ┆ 0.0458           │
│ 6        ┆ 6        ┆ null   ┆ Visual Basic      ┆ 4.12    ┆ 0.83    ┆ 0.0412           │
│ 7        ┆ 7        ┆ null   ┆ JavaScript        ┆ 2.54    ┆ 0.41    ┆ 0.0254           │
│ 8        ┆ 9        ┆ change ┆ PHP               ┆ 2.49    ┆ 0.62    ┆ 0.0249           │
│ 9        ┆ 19       ┆ change ┆ R                 ┆ 2.37    ┆ 1.33    ┆ 0.0237           │
│ 10       ┆ 8        ┆ change ┆ SQL               ┆ 1.76    ┆ -0.19   ┆ 0.0176           │
│ 11       ┆ 14       ┆ change ┆ Go                ┆ 1.46    ┆ 0.24    ┆ 0.0146           │
│ 12       ┆ 16       ┆ change ┆ Swift             ┆ 1.38    ┆ 0.28    ┆ 0.0138           │
│ 13       ┆ 20       ┆ change ┆ Perl              ┆ 1.3     ┆ 0.26    ┆ 0.013            │
│ 14       ┆ 12       ┆ change ┆ Assembly language ┆ 1.3     ┆ -0.08   ┆ 0.013            │
│ 15       ┆ 15       ┆ null   ┆ Ruby              ┆ 1.24    ┆ 0.03    ┆ 0.0124           │
│ 16       ┆ 18       ┆ change ┆ MATLAB            ┆ 1.1     ┆ 0.04    ┆ 0.011            │
│ 17       ┆ 11       ┆ change ┆ Groovy            ┆ 0.99    ┆ -0.52   ┆ 0.0099           │
│ 18       ┆ 33       ┆ change ┆ Rust              ┆ 0.92    ┆ 0.55    ┆ 0.0092           │
│ 19       ┆ 10       ┆ change ┆ Objective-C       ┆ 0.85    ┆ -0.99   ┆ 0.0085           │
│ 20       ┆ 24       ┆ change ┆ Dart              ┆ 0.77    ┆ 0.13    ┆ 0.0077           │
└──────────┴──────────┴────────┴───────────────────┴─────────┴─────────┴──────────────────┘
</pre>

<p>Opět se podívejme na úplný zdrojový kód skriptu, který vygeneroval předchozí
datový rámec:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("tiobe.tsv", sep="\t")
&nbsp;
<i># převod na skutečný poměr &lt;0, 1&gt;</i>
df2 = df.with_column(
    polars.col("Ratings")<strong>.apply(lambda x: x / 100.0)</strong>.alias("Ratings as ratio")
)
&nbsp;
<i># datový rámec zobrazíme</i>
print(df)
print()
&nbsp;
<i># datový rámec zobrazíme</i>
print(df2)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_21_apply_conversion.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_21_apply_conversion.py</a>.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Rozdělení a následná agregace údajů s&nbsp;využitím metody <strong>groupby</strong></h2>

<p>Ve druhé polovině dnešního článku si popíšeme způsob zpracování a agregace
údajů v&nbsp;datových rámcích s&nbsp;využitím metody pojmenované
<strong>groupby</strong>, což je velmi často využívaná operace (u níž by se
navíc měly projevit výkonnostní rozdíly mezi Pandas a Polars). V&nbsp;případě
<strong>groupby</strong> se jedná o metodu, která umožňuje údaje
z&nbsp;datových rámců nejprve rozdělit do skupin (tedy vlastně seskupit)
s&nbsp;tím, že se údaje z&nbsp;každé skupiny posléze nějakým způsobem agregují;
například se zjistí jejich počet, součet hodnot ve vybraném sloupci atd.</p>

<p>Zpracovávat přitom budeme následující datový soubor, který obsahuje jména
těch programovacích jazyků, které byly serverem <a
href="https://www.tiobe.com/tiobe-index/">Tiobe</a> každý rok vybrány na
základě aktivity jejich uživatelů (či naopak začátečníků) na webu. Tento datový
soubor můžete nalézt na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/hall_of_fame.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/hall_of_fame.csv</a>.
Jedná se o klasický CSV soubor s&nbsp;hlavičkami sloupců:</p>

<pre>
Year,Winner
2022,C++
2021,Python
2020,Python
2019,C
2018,Python
2017,C
2016,Go
2015,Java
2014,JavaScript
2013,Transact-SQL
2012,Objective-C
2011,Objective-C
2010,Python
2009,Go
2008,C
2007,Python
2006,Ruby
2005,Java
2004,PHP
2003,C++
</pre>

<p>Povšimněte si, že některé jazyky vyhrály vícekrát, což nám umožňuje analýzu
těchto dat právě s&nbsp;využitím operace <strong>groupby</strong>.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Praktická ukázka použití <strong>groupby</strong></h2>

<p>Metoda <strong>groupby</strong> nám umožňuje s&nbsp;datovým rámcem provést
následující operace:</p>

<ol>

<li><i>Rozdělení do skupin</i> údajů v&nbsp;datovém rámci na základě zadané
podmínky nebo jen podle uložených hodnot ve sloupci (rozdělení na základě
hodnot je přímočaré a použijeme ho v&nbsp;demonstračních příkladech).</li>

<li>Aplikace vybrané funkce na výsledný datový blok, resp.&nbsp;na jeh
sloupce.</li>

<li>Kombinace či <i>agregace</i> výsledků (součet všech sdružených záznamů,
jejich počet atd.)</li>

</ol>

<p><div class="rs-tip-major">Poznámka: pokud má být výsledkem
<strong>groupby</strong> nový datový rámec, musí se vždy použít dvojice
operací: rozdělení do skupin a agregace s&nbsp;případnou transformací dat,
kterou lze provést v&nbsp;mezikroku.</div></p>

<p>Příkladem může být vytvoření nového datového rámce, který bude pro každý
programovací jazyk obsahovat počet let, v&nbsp;nichž tento jazyk zvítězil
(resp.&nbsp;kdy byl vybrán). Jazyky tedy nejprve rozdělíme podle jejich jména
(což jsou údaje uložené ve sloupci &bdquo;Winner&ldquo;). Nepovinným parametrem
<strong>maintain_order</strong> se určuje, zda se má zachovat pořadí skupin při
provádění operací; což je ovšem časově náročná operace:</p>

<pre>
df.<strong>groupby</strong>("Winner", maintain_order=True)
</pre>

<p>Výsledkem bude nový datový blok (ale ne datový rámec!), nad nímž můžeme
provádět další operace, zejména již výše zmíněnou agregaci. Můžeme například
zjistit, pro jaký rok se každý jazyk ve své skupině vyskytuje. K&nbsp;tomuto
účelu se použije agregační metoda zavolaná na objekt, jenž je výsledkem volání
<strong>groupby</strong> (výsledkem totiž není plnohodnotný datový rámec, ale
instance třídy
<strong>polars.internals.dataframe.groupby.GroupBy</strong>):</p>

<pre>
df.groupby("Winner", maintain_order=True).<strong>agg([polars.col("Year")])</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: agregační funkci lze předat větší
množství sloupců, což ovšem v&nbsp;našem konkrétním případě nedává
smysl.</div></p>

<p>Výsledek agregace je reprezentován ve formě nového datového rámce, který lze
zobrazit či dále zpracovat libovolným způsobem:</p>

<pre>
df = df.groupby("Winner", maintain_order=True).agg([polars.col("Year")])
&nbsp;
print(df)
</pre>

<p>S&nbsp;tímto výsledkem:</p>

<pre>
shape: (10, 2)
┌──────────────┬────────────────────────┐
│ Winner       ┆ Year                   │
│ ---          ┆ ---                    │
│ str          ┆ list[i64]              │
╞══════════════╪════════════════════════╡
│ C++          ┆ [2022, 2003]           │
│ Python       ┆ [2021, 2020, ... 2007] │
│ C            ┆ [2019, 2017, 2008]     │
│ Go           ┆ [2016, 2009]           │
│ Java         ┆ [2015, 2005]           │
│ JavaScript   ┆ [2014]                 │
│ Transact-SQL ┆ [2013]                 │
│ Objective-C  ┆ [2012, 2011]           │
│ Ruby         ┆ [2006]                 │
│ PHP          ┆ [2004]                 │
└──────────────┴────────────────────────┘
</pre>

<p>Uveďme si úplný zdrojový kód skriptu, který rozdělení a agregaci dat
provádí:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># seskupení podle názvu jazyka</i>
df = df.groupby("Winner", maintain_order=True).agg([polars.col("Year")])
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_22_group_by.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_22_group_by.py</a>.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Seřazení hodnot v&nbsp;průběhu jejich agregace</h2>

<p>Ve chvíli, kdy máme k&nbsp;dispozici objekt vzniklý po rozdělení hodnot ze
vstupního datového rámce do skupin, můžeme v&nbsp;metodě <strong>agg</strong>
specifikovat nejenom nový sloupec (který bude v&nbsp;našem případě obsahovat
seznam let, kdy daný programovací jazyk vyhrál), ale navíc můžeme hodnoty
uložené v&nbsp;tomto sloupci seřadit:</p>

<pre>
df = df.groupby("Winner", maintain_order=True).agg(<strong>[polars.col("Year").sort()]</strong>)
</pre>

<p>Povšimněte si, že metodu <strong>sort</strong> voláme pro definici sloupce
&bdquo;Year&ldquo; obsahujícího agregovaná data, konkrétně seznam s&nbsp;roky.
To tedy znamená, že dojde k&nbsp;seřazení hodnot uložených v&nbsp;těchto
seznamech, nikoli k&nbsp;seřazení jednotlivých řádků (záznamů) ve výsledném
datovém rámci. Konkrétně bude výsledek vypadat takto:</p>

<pre>
shape: (10, 2)
┌──────────────┬────────────────────────┐
│ Winner       ┆ Year                   │
│ ---          ┆ ---                    │
│ str          ┆ list[i64]              │
╞══════════════╪════════════════════════╡
│ C++          ┆ [2003, 2022]           │
│ Python       ┆ [2007, 2010, ... 2021] │
│ C            ┆ [2008, 2017, 2019]     │
│ Go           ┆ [2009, 2016]           │
│ Java         ┆ [2005, 2015]           │
│ JavaScript   ┆ [2014]                 │
│ Transact-SQL ┆ [2013]                 │
│ Objective-C  ┆ [2011, 2012]           │
│ Ruby         ┆ [2006]                 │
│ PHP          ┆ [2004]                 │
└──────────────┴────────────────────────┘
</pre>

<p>Rozdíl mezi předchozím příkladem a tímto příkladem uvidíme na řádku
s&nbsp;Pythonem:</p>

<pre>
<i># seskupení podle názvu jazyka</i>
df1 = df.groupby("Winner", maintain_order=True).agg(<strong>[polars.col("Year")]</strong>)
df2 = df.groupby("Winner", maintain_order=True).agg(<strong>[polars.col("Year").sort()]</strong>)
&nbsp;
<i># výběr řádků s Pythonem, výběr dat ze sloupce Year a převod na seznam</i>
print(df1[1]["Year"].to_list()[0])
print(df2[1]["Year"].to_list()[0])
</pre>

<p>Ve druhém případě dojde k&nbsp;seřazení seznamu let:</p>

<pre>
[2021, 2020, 2018, 2010, 2007]
[2007, 2010, 2018, 2020, 2021]
</pre>

<p>Podívejme se na úplný zdrojový kód tohoto demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># seskupení podle názvu jazyka</i>
df = df.groupby("Winner", maintain_order=True).agg([polars.col("Year").sort()])
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_23_group_by_sort.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_23_group_by_sort.py</a>.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Seřazení záznamů v&nbsp;datovém rámci před provedením operace <strong>groupby</strong> s&nbsp;následnou agregací</h2>

<p>Podívejme se nyní na to, jak bude výsledný datový rámec vytvořený operací
<strong>groupby</strong> následovanou agregací vypadat v&nbsp;případě, že
zdrojový datový rámec nejprve seřadíme podle názvu programovacího jazyka,
tj.&nbsp;podle položek uložených ve sloupci &bdquo;Winner&ldquo;. Celá operace
se tedy skládá z&nbsp;několika podoperací:</p>

<ol>
<li>Seřazení zdrojového datového rámce podle vybraného sloupce; výsledkem bude nový datový rámec.</li>
<li>Rozdělení datového rámce na základě jména programovacího jazyka.</li>
<li>Agregace podle sloupce &bdquo;Year&ldquo;</li>
<li>Seřazení hodnot v&nbsp;agregovaném sloupci &bdquo;Year&ldquo;</li>
</ol>

<p>Všechny tři kroky výše popsané operace lze zapsat jediným (poměrně
přímočarým) výrazem:</p>

<pre>
df = <strong>df.sort("Winner").</strong> \
     <strong>groupby("Winner", maintain_order=True).agg([polars.col("Year").sort()])</strong>
</pre>

<p>Výsledný datový rámec bude v&nbsp;tomto případě vypadat následovně:</p>

<pre>
┌──────────────┬────────────────────────┐
│ Winner       ┆ Year                   │
│ ---          ┆ ---                    │
│ str          ┆ list[i64]              │
╞══════════════╪════════════════════════╡
│ C            ┆ [2008, 2017, 2019]     │
│ C++          ┆ [2003, 2022]           │
│ Go           ┆ [2009, 2016]           │
│ Java         ┆ [2005, 2015]           │
│ JavaScript   ┆ [2014]                 │
│ Objective-C  ┆ [2011, 2012]           │
│ PHP          ┆ [2004]                 │
│ Python       ┆ [2007, 2010, ... 2021] │
│ Ruby         ┆ [2006]                 │
│ Transact-SQL ┆ [2013]                 │
└──────────────┴────────────────────────┘
</pre>

<p>Opět si samozřejmě uvedeme úplný zdrojový kód upraveného skriptu, který
tento datový rámec vytvoří a vypíše:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># seskupení podle názvu jazyka</i>
df = <strong>df.sort("Winner").</strong> \
     <strong>groupby("Winner", maintain_order=True).agg([polars.col("Year").sort()])</strong>
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_24_sort_group_by_sort.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_24_sort_group_by_sort.py</a>.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Výpočet celkového pořadí vítězných programovacích jazyků</h2>

<p>Výsledkem agregace provedené <a href="#k13">v&nbsp;předchozím příkladu</a>
je seznam let, v&nbsp;nichž byl daný programovací jazyk vítězný. Vzhledem
k&nbsp;tomu, že se vždy jedná o seznam let reprezentovaných seznamem (hodnot
typu <strong>int64</strong>), můžeme velmi snadno příklad upravit takovým
způsobem, aby vracel nikoli tento seznam, ale počet let, v&nbsp;nichž
programovací jazyk vyhrál. V&nbsp;případě Pythonu by se tedy měla vypočítat
hodnota 5, u C hodnota 3 atd. Tohoto cíle dosáhneme snadno &ndash; použitím
metody <strong>len</strong> aplikované na agregované výsledky:</p>

<pre>
<i># seskupení podle názvu jazyka</i>
df = <strong>df.groupby("Winner", maintain_order=True).agg([polars.col("Year").len()])</strong>
</pre>

<p>Výsledkem by měl být datový rámec, který obsahuje ve sloupci
&bdquo;Year&ldquo; celkový počet let, v&nbsp;nichž daný programovací jazyk
vyhrál:</p>

<pre>
shape: (10, 2)
┌──────────────┬──────┐
│ Winner       ┆ Year │
│ ---          ┆ ---  │
│ str          ┆ u32  │
╞══════════════╪══════╡
│ C++          ┆ 2    │
│ Python       ┆ 5    │
│ C            ┆ 3    │
│ Go           ┆ 2    │
│ Java         ┆ 2    │
│ JavaScript   ┆ 1    │
│ Transact-SQL ┆ 1    │
│ Objective-C  ┆ 2    │
│ Ruby         ┆ 1    │
│ PHP          ┆ 1    │
└──────────────┴──────┘
</pre>

<p>Upravený skript, který vypočítal předchozí datový rámec, vypadá takto:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># seskupení podle názvu jazyka</i>
df = <strong>df.groupby("Winner", maintain_order=True).agg([polars.col("Year").len()])</strong>
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_25_group_by_len.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_25_group_by_len.py</a>.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Seřazení jazyků na základě jejich celkového pořadí</h2>

<p>Vzhledem k&nbsp;tomu, že jazyky (alespoň prozatím) nejsou seřazeny podle
jejich celkového pořadí, musíme toto seřazení provést explicitním zavoláním
metody <strong>sort</strong> na agregované výsledky reprezentované novým
datovým rámcem. Povšimněte si, že jsme poměrně snadným způsobem nadefinovali
&bdquo;pipelinu&ldquo; s&nbsp;několika operacemi a poměrně sofistikovaným
chováním:</p>

<pre>
<i># seskupení podle názvu jazyka</i>
df = <strong>df.groupby("Winner", maintain_order=True).agg([polars.col("Year").len()]).sort("Year")</strong>
</pre>

<p>S&nbsp;tímto výsledkem:</p>

<pre>
shape: (10, 2)
┌──────────────┬──────┐
│ Winner       ┆ Year │
│ ---          ┆ ---  │
│ str          ┆ u32  │
╞══════════════╪══════╡
│ JavaScript   ┆ 1    │
│ Transact-SQL ┆ 1    │
│ Ruby         ┆ 1    │
│ PHP          ┆ 1    │
│ C++          ┆ 2    │
│ Go           ┆ 2    │
│ Java         ┆ 2    │
│ Objective-C  ┆ 2    │
│ C            ┆ 3    │
│ Python       ┆ 5    │
└──────────────┴──────┘
</pre>

<p>Upravený skript:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># seskupení podle názvu jazyka</i>
df = <strong>df.groupby("Winner", maintain_order=True).agg([polars.col("Year").len()]).sort("Year")</strong>
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_26_group_by_len_sort.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_26_group_by_len_sort.py</a>.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Dva způsoby korektního seřazení výsledků</h2>

<p>Vzhledem k&nbsp;tomu, že nás v&nbsp;celkovém pořadí většinou zajímají
vítězové a nikoli nutně dolní část žebříčku, je vhodnější provést seřazení
jazyků na základě agregovaných počtů &bdquo;vítězných let&ldquo; od nejvyšší
hodnoty k&nbsp;hodnotě nejnižší. K&nbsp;tomuto účelu můžeme použít dvojici
operací <strong>sort+reverse</strong>, kdy se však v&nbsp;paměti zbytečně
vytvoří datový rámec, který je po provedení další operace zahozen:</p>

<pre>
<i># seskupení podle názvu jazyka</i>
df = <strong>df.groupby("Winner", maintain_order=True).agg([polars.col("Year").len()]).sort("Year").reverse()</strong>
</pre>

<p>Paměťově i z&nbsp;hlediska potřebného výpočetního výkonu lepší varianta
spočívá v&nbsp;použití metody <strong>sort</strong>, které se kromě názvu
sloupce předá i nepovinný parametr <strong>reverse=True</strong>:</p>

<pre>
<i># seskupení podle názvu jazyka</i>
df = <strong>df.groupby("Winner", maintain_order=True).agg([polars.col("Year").len()]).sort("Year", reverse=True)</strong>
</pre>

<p>V&nbsp;obou případech dostaneme naprosto stejný výsledek:</p>

<pre>
shape: (10, 2)
┌──────────────┬──────┐
│ Winner       ┆ Year │
│ ---          ┆ ---  │
│ str          ┆ u32  │
╞══════════════╪══════╡
│ Python       ┆ 5    │
│ C            ┆ 3    │
│ Objective-C  ┆ 2    │
│ Java         ┆ 2    │
│ Go           ┆ 2    │
│ C++          ┆ 2    │
│ PHP          ┆ 1    │
│ Ruby         ┆ 1    │
│ Transact-SQL ┆ 1    │
│ JavaScript   ┆ 1    │
└──────────────┴──────┘
</pre>

<p>Skript, který tento datový rámec vypočítá, vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># seskupení podle názvu jazyka</i>
df = <strong>df.groupby("Winner", maintain_order=True).agg([polars.col("Year").len()]).sort("Year").reverse()</strong>
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_27_group_by_len_sort_reverse.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_27_group_by_len_sort_reverse.py</a>.</div></p>

<p>Alternativní varianta skriptu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># seskupení podle názvu jazyka</i>
df = <strong>df.groupby("Winner", maintain_order=True).agg([polars.col("Year").len()]).sort("Year", reverse=True)</strong>
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Příklad na závěr &ndash; složitější &bdquo;pipeline&ldquo;, změna názvu sloupce</h2>

<p>V&nbsp;knihovně <i>Polars</i> (a prakticky stejně dobře v&nbsp;knihovně
<i>Pandas</i>) můžeme se znalostí již známých operací definovat i složitější
&bdquo;pipeline&ldquo;, například pipeline, která provede seskupení záznamů,
jejich agregaci, seřazení, otočení a výběr prvních pěti záznamů
z&nbsp;výsledného datového rámce. Navíc pro zajímavost ještě přejmenujeme
sloupec &bdquo;Year&ldquo; na &bdquo;Zvítězil&ldquo; (pochopitelně lze
v&nbsp;tomto případě použít celé Unicode, nejsme tedy omezeni jen na ASCII
znaky):</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># seskupení podle názvu jazyka</i>
df = df.groupby("Winner", maintain_order=True).agg([polars.col("Year").len()<strong>.alias("Zvítězil")</strong>]). \
        sort("Zvítězil"). \
        reverse(). \
        <strong>head(5)</strong>
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
</pre>

<p>S&nbsp;tímto výsledkem:</p>

<pre>
shape: (5, 2)
┌─────────────┬──────────┐
│ Winner      ┆ Zvítězil │
│ ---         ┆ ---      │
│ str         ┆ u32      │
╞═════════════╪══════════╡
│ Python      ┆ 5        │
│ C           ┆ 3        │
│ Objective-C ┆ 2        │
│ Java        ┆ 2        │
│ Go          ┆ 2        │
└─────────────┴──────────┘
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_28_group_by_len_sort_reverse_head.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_28_group_by_len_sort_reverse_head.py</a>.</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah třetí části seriálu o knihovně Polars</h2>

<p>Jak jsme si již několikrát připomenuli v&nbsp;předchozím textu, je knihovna
<i>Polars</i> navržena takovým způsobem, aby byly operace s&nbsp;daty uloženými
v&nbsp;datových řadách nebo v&nbsp;datových rámcích realizovány co nejrychleji,
ideálně s&nbsp;využitím souběžně běžících úloh, ale i s&nbsp;využitím moderních
SIMD operací. Vzhledem k&nbsp;tomu, že se jedná o velmi důležitou vlastnost (a
vlastně o jediný důvod, proč vlastně přejít od <i>Pandas</i>
k&nbsp;<i>Polars</i>), budeme se touto velmi zajímavou problematikou zabývat
v&nbsp;navazujícím článku.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 (nikoli ovšem pro starší verze Pythonu 2!) byly
uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>series_01_from_list.py</td><td>konstrukce datové řady ze seznamu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_01_from_list.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_01_from_list.py</a></td></tr>
<tr><td> 2</td><td>series_02_from_tuple.py</td><td>konstrukce datové řady z&nbsp;n-tice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_02_from_tuple.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_02_from_tuple.py</a></td></tr>
<tr><td> 3</td><td>series_03_from_range.py</td><td>konstrukce datové řady generátorem <strong>range</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_03_from_range.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_03_from_range.py</a></td></tr>
<tr><td> 4</td><td>series_04_from_other_type.py</td><td>použití odlišných datových typů prvků v&nbsp;datové řadě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_04_from_other_type.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_04_from_other_type.py</a></td></tr>
<tr><td> 5</td><td>series_05_strings.py</td><td>datová řada obsahující řetězce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_05_strings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_05_strings.py</a></td></tr>
<tr><td> 6</td><td>series_06_booleans.py</td><td>datová řada obsahující pravdivostní hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_06_booleans.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_06_booleans.py</a></td></tr>
<tr><td> 7</td><td>series_07_null_value.py</td><td>datová řada obsahující prvky s&nbsp;hodnotou <strong>null</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_07_null_value.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_07_null_value.py</a></td></tr>
<tr><td> 8</td><td>series_08_type_specification.py</td><td>explicitní specifikace datového typu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_08_type_specification.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_08_type_specification.py</a></td></tr>
<tr><td> 9</td><td>series_09_select.py</td><td>výběr prvků z&nbsp;datové řady pomocí indexu, indexů či řezu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_09_select.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_09_select.py</a></td></tr>
<tr><td>10</td><td>series_10_filter.py</td><td>výběr prvků z&nbsp;datové řady pomocí filtru (podmínky)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_10_filter.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_10_filter.py</a></td></tr>
<tr><td>11</td><td>series_11_from_arange.py</td><td>konstrukce datové řady s&nbsp;využitím <strong>numpy.arange</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_11_from_arange.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_11_from_arange.py</a></td></tr>
<tr><td>12</td><td>series_12_from_linspace.py</td><td>konstrukce datové řady s&nbsp;využitím <strong>numpy.linspace</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_12_from_linspace.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_12_from_linspace.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>data_frame_01_load_csv.py</td><td>načtení dat ze souboru typu CSV</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_01_load_csv.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_01_load_csv.py</a></td></tr>
<tr><td>14</td><td>data_frame_02_load_csv_no_header_A.py</td><td>práce se soubory typu CSV bez hlavičky (nekorektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_02_load_csv_no_header_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_02_load_csv_no_header_A.py</a></td></tr>
<tr><td>15</td><td>data_frame_03_load_csv_no_header_B.py</td><td>práce se soubory typu CSV bez hlavičky (korektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_03_load_csv_no_header_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_03_load_csv_no_header_B.py</a></td></tr>
<tr><td>16</td><td>data_frame_04_load_csv_no_header_C.py</td><td>práce se soubory typu CSV bez hlavičky (korektní varianta s&nbsp;explicitními jmény sloupců)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_04_load_csv_no_header_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_04_load_csv_no_header_B.py</a></td></tr>
<tr><td>17</td><td>data_frame_05_load_tsv_A.py</td><td>práce se soubory typu TSV (nekorektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_05_load_tsv_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_05_load_tsv_A.py</a></td></tr>
<tr><td>18</td><td>data_frame_06_load_tsv_B.py</td><td>práce se soubory typu TSV (korektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_06_load_tsv_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_06_load_tsv_B.py</a></td></tr>
<tr><td>19</td><td>data_frame_07_describe.py</td><td>získání metainformací o datovém rámci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_07_describe.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_07_describe.py</a></td></tr>
<tr><td>20</td><td>data_frame_08_timestamps_A.py</td><td>načtení dat obsahujících časová razítka</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_08_timestamps_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_08_timestamps_A.py</a></td></tr>
<tr><td>21</td><td>data_frame_09_timestamps_B.py</td><td>načtení dat obsahujících časová razítka</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_09_timestamps_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_09_timestamps_B.py</a></td></tr>
<tr><td>22</td><td>data_frame_10_load_sql_A.py</td><td>načtení dat z&nbsp;relační databáze s&nbsp;uložením výsledku ve formě datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_10_load_sql_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_10_load_sql_A.py</a></td></tr>
<tr><td>23</td><td>data_frame_11_load_sql_B.py</td><td>načtení dat z&nbsp;relační databáze s&nbsp;uložením výsledku ve formě datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_11_load_sql_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_11_load_sql_B.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>24</td><td>data_frame_12_head_A.py</td><td>zobrazení hlavičky datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_12_head_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_12_head_A.py</a></td></tr>
<tr><td>25</td><td>data_frame_13_head_B.py</td><td>zobrazení hlavičky datového rámce se specifikací počtu řádků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_13_head_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_13_head_B.py</a></td></tr>
<tr><td>26</td><td>data_frame_14_head_C.py</td><td>globální změna počtu zobrazených řádků u datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_14_head_C.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_14_head_C.py</a></td></tr>
<tr><td>27</td><td>data_frame_15_formatting_A.py</td><td>různé způsoby naformátování obsahu datových rámců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_15_formatting_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_15_formatting_A.py</a></td></tr>
<tr><td>28</td><td>data_frame_16_formatting_B.py</td><td>různé způsoby naformátování obsahu datových rámců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_16_formatting_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_16_formatting_B.py</a></td></tr>
<tr><td>29</td><td>data_frame_17_sort.py</td><td>seřazení údajů v&nbsp;datovém rámci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_17_sort.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_17_sort.py</a></td></tr>
<tr><td>30</td><td>data_frame_18_sort_reverse.py</td><td>zpětné seřazení údajů v&nbsp;datovém rámci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_18_sort_reverse.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_18_sort_reverse.py</a></td></tr>
<tr><td>31</td><td>data_frame_19_unique.py</td><td>zajištění unikátnosti záznamů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_19_unique.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_19_unique.py</a></td></tr>
<tr><td>32</td><td>data_frame_20_map_conversion.py</td><td>konverze dat ve sloupci s&nbsp;využitím metody <strong>map</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_20_map_conversion.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_20_map_conversion.py</a></td></tr>
<tr><td>33</td><td>data_frame_21_apply_conversion.py</td><td>konverze dat ve sloupci s&nbsp;využitím metody <strong>apply</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_21_apply_conversion.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_21_apply_conversion.py</a></td></tr>
<tr><td>34</td><td>data_frame_22_group_by.py</td><td>seskupení údajů na základě zvoleného sloupce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_22_group_by.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_22_group_by.py</a></td></tr>
<tr><td>35</td><td>data_frame_23_group_by_sort.py</td><td>seskupení a seřazení údajů při agregaci na základě hodnot ve zvoleném sloupci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_23_group_by_sort.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_23_group_by_sort.py</a></td></tr>
<tr><td>36</td><td>data_frame_23_group_by_sort_B.py</td><td>ukázka rozdílů mezi použitím a nepoužitím <strong>sort</strong> při agregaci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_23_group_by_sort_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_23_group_by_sort_B.py</a></td></tr>
<tr><td>37</td><td>data_frame_24_sort_group_by_sort.py</td><td>kombinace <strong>sort</strong> a <strong>groupby</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_24_sort_group_by_sort.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_24_sort_group_by_sort.py</a></td></tr>
<tr><td>38</td><td>data_frame_25_group_by_len.py</td><td>jednoduchá agregace údajů při seskupení</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_25_group_by_len.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_25_group_by_len.py</a></td></tr>
<tr><td>39</td><td>data_frame_26_group_by_len_sort.py</td><td>jednoduchá agregace údajů při seskupení, kombinace se seřazením</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_26_group_by_len_sort.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_26_group_by_len_sort.py</a></td></tr>
<tr><td>40</td><td>data_frame_27_group_by_len_sort_reverse.py</td><td>jednoduchá agregace údajů při seskupení, kombinace se seřazením</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_27_group_by_len_sort_reverse.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_27_group_by_len_sort_reverse.py</a></td></tr>
<tr><td>41</td><td>data_frame_28_group_by_len_sort_reverse_head.py</td><td>kombinace předchozího s&nbsp;<strong>head</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_28_group_by_len_sort_reverse_head.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_28_group_by_len_sort_reverse_head.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Projekt Polars na GitHubu<br />
<a href="https://github.com/pola-rs/polars">https://github.com/pola-rs/polars</a>
</li>

<li>Dokumentace k&nbsp;projektu Polars (popis API)<br />
<a href="https://pola-rs.github.io/polars/py-polars/html/reference/index.html">https://pola-rs.github.io/polars/py-polars/html/reference/index.html</a>
</li>

<li>Polars: The Next Big Python Data Science Library... written in RUST? <br />
<a href="https://www.youtube.com/watch?v=VHqn7ufiilE">https://www.youtube.com/watch?v=VHqn7ufiilE</a>
</li>

<li>Polars API: funkce pro načtení datového rámce z&nbsp;CSV<br />
<a href="https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.read_csv.html">https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.read_csv.html</a>
</li>

<li>Polars API: funkce pro načtení datového rámce z&nbsp;relační databáze<br />
<a href="https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.read_sql.html">https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.read_sql.html</a>
</li>

<li>Python’s Pandas vs Polars: Who Wins this Fight in Library <br />
<a href="https://analyticsindiamag.com/pythons-pandas-vs-polars-who-wins-this-fight-in-library/">https://analyticsindiamag.com/pythons-pandas-vs-polars-who-wins-this-fight-in-library/</a>
</li>

<li>Polars vs Pandas: what is more convenient?<br />
<a href="https://medium.com/@ilia.ozhmegov/polars-vs-pandas-what-is-more-convenient-331956742a69">https://medium.com/@ilia.ozhmegov/polars-vs-pandas-what-is-more-convenient-331956742a69</a>
</li>

<li>A Gentle Introduction to Pandas Data Analysis (on Kaggle)<br />
<a href="https://www.youtube.com/watch?v=_Eb0utIRdkw&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&index=4">https://www.youtube.com/watch?v=_Eb0utIRdkw&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&amp;index=4</a>
</li>

<li>Speed Up Your Pandas Dataframes<br />
<a href="https://www.youtube.com/watch?v=u4_c2LDi4b8&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&index=5">https://www.youtube.com/watch?v=u4_c2LDi4b8&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&amp;index=5</a>
</li>

<li>pandas.read_csv<br />
<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html</a>
</li>

<li>How to define format when using pandas to_datetime?<br />
<a href="https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime">https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime</a>
</li>

<li>Pandas : skip rows while reading csv file to a Dataframe using read_csv() in Python<br />
<a href="https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/">https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/</a>
</li>

<li>Skip rows during csv import pandas<br />
<a href="https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas">https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas</a>
</li>

<li>Denni kurz<br />
<a href="https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt">https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt</a>
</li>

<li>UUID objects according to RFC 4122 (knihovna pro Python)<br />
<a href="https://docs.python.org/3.5/library/uuid.html#uuid.uuid4">https://docs.python.org/3.5/library/uuid.html#uuid.uuid4</a>
</li>

<li>Object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Object_identifier">https://en.wikipedia.org/wiki/Object_identifier</a>
</li>

<li>Digital object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Digital_object_identifier">https://en.wikipedia.org/wiki/Digital_object_identifier</a>
</li>

<li>voluptuous na (na PyPi)<br />
<a href="https://pypi.python.org/pypi/voluptuous">https://pypi.python.org/pypi/voluptuous</a>
</li>

<li>Repositář knihovny voluptuous na GitHubu<br />
<a href="https://github.com/alecthomas/voluptuous">https://github.com/alecthomas/voluptuous</a>
</li>

<li>pytest-voluptuous 1.0.2 (na PyPi)<br />
<a href="https://pypi.org/project/pytest-voluptuous/">https://pypi.org/project/pytest-voluptuous/</a>
</li>

<li>pytest-voluptuous (na GitHubu)<br />
<a href="https://github.com/F-Secure/pytest-voluptuous">https://github.com/F-Secure/pytest-voluptuous</a>
</li>

<li>schemagic 0.9.1 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schemagic/0.9.1">https://pypi.python.org/pypi/schemagic/0.9.1</a>
</li>

<li>Schemagic / Schemagic.web (na GitHubu)<br />
<a href="https://github.com/Mechrophile/schemagic">https://github.com/Mechrophile/schemagic</a>
</li>

<li>schema 0.6.7 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schema">https://pypi.python.org/pypi/schema</a>
</li>

<li>schema (na GitHubu)<br />
<a href="https://github.com/keleshev/schema">https://github.com/keleshev/schema</a>
</li>

<li>KX v DBOps Benchmark Results by Ferenc Bodon<br />
<a href="https://community.kx.com/t5/Community-Blogs/KX-v-DBOps-Benchmark-Results-by-Ferenc-Bodon/ba-p/12182">https://community.kx.com/t5/Community-Blogs/KX-v-DBOps-Benchmark-Results-by-Ferenc-Bodon/ba-p/12182</a>
</li>

<li>TIOBE Index for January 2023<br />
<a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

