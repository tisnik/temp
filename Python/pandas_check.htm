<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Knihovna Pandas a základy práce s&nbsp;datovými rámci</a></p>
<p><a href="#k02">2. Načtení obsahu jednoduché tabulky ze souboru typu CSV</a></p>
<p><a href="#k03">3. Zpracování prázdných hodnot v&nbsp;tabulce</a></p>
<p><a href="#k04">4. Načtení tabulky obsahující časová razítka</a></p>
<p><a href="#k05">5. Korektní parsing časových razítek</a></p>
<p><a href="#k06">*** 6. Problematika vlastního či specifického formátu data a/nebo času</a></p>
<p><a href="#k07">*** 7. Vlastní parsovací funkce pro časová razítka</a></p>
<p><a href="#k08">*** 8. Čtení tabulky uložené ve formátu TSV</a></p>
<p><a href="#k09">*** 9. Specifikace oddělovače sloupců</a></p>
<p><a href="#k10">*** 10. Import dat z&nbsp;textových souborů</a></p>
<p><a href="#k11">*** 11. Explicitní specifikace šířky sloupců</a></p>
<p><a href="#k12">*** 12. Zpracování souborů s&nbsp;nestandardním formátem</a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady a datovými soubory</a></p>
<p><a href="#k19">19. Články s&nbsp;informacemi o různých způsobech validace datových struktur</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Knihovna Pandas a základy práce s&nbsp;datovými rámci</h2>

<p>V&nbsp;dnešním článku se &ndash; prozatím ve stručnosti &ndash; seznámíme
s&nbsp;takzvanými <i>datovými rámci</i> (<i>data frame</i>) používanými
v&nbsp;knihovně Pandas <a
href="https://www.root.cz/n/python/">v&nbsp;programovacím jazyku Python</a>.
Jedná se o velmi důležitý datový typ používaný zejména (ale nejenom) při
statistických výpočtech. Datové rámce se v&nbsp;určitém ohledu podobají
tabulkám používaným v&nbsp;relačních databázích: jednotlivé sloupce jsou
pojmenované a současně může být každý sloupec jiného datového typu (všechny
prvky ve sloupci toto kritérium musí splňovat, což ovšem vede k&nbsp;určitým
problémům, o nichž si řekneme v&nbsp;navazujících kapitolách). Tato vlastnost
odlišuje datové rámce od dvourozměrných polí masivně využívaných například
v&nbsp;knihovně <i>Numpy</i>; na druhou stranu je ovšem možné
s&nbsp;jednotlivými sloupci datového rámce pracovat jako s&nbsp;jednorozměrným
polem kompatibilním právě s&nbsp;knihovnou <i>Numpy</i> a jejími datovými
typy.</p>

<p>Dnes se zaměříme především na způsob načtení dat do datového rámce. Knihovna
Pandas podporuje využití různých datových zdrojů, především pak:</p>

<ol>

<li>Souborů CSV (<i>Comma-Separated Values</i>)</li>
<li>Souborů TSV (<i>Tab-Separated Values</i>)</li>
<li>Textových souborů s&nbsp;volitelným oddělovačem a formátem sloupců</li>
<li>Tabulek z&nbsp;tabulkových procesorů (xls, xlsx, xlsm, xlsb, odf, ods, odt)</li>
<li>Souborů JSON se strukturovanými daty</li>
<li>Načítání z&nbsp;relačních databází s&nbsp;využitím SQL driverů</li>
<li>Načítání <a href="https://www.root.cz/clanky/komunikace-se-sloupcovymi-databazemi-z-jazyka-go-parquet-soubory/">z&nbsp;Parquet souborů</a></li>
<li>atd.</li>
</ol>

<p>Zaměříme se na první čtyři formáty, které sice vypadají primitivně, ovšem
při načítání je mnohdy nutné řešit mnoho &bdquo;maličkostí&ldquo; typu různé
formáty dat, chybějící hodnoty ve sloupcích atd.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Načtení obsahu jednoduché tabulky ze souboru typu CSV</h2>

<p>Jeden z&nbsp;nejjednodušších příkladů používajících knihovnu Pandas bude
načítat soubor CSV (<i>Comma-Separated Values</i>), jehož obsah lze najít na
adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/integer_values.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/integer_values.csv</a>.
V&nbsp;tomto souboru je uložena tabulka se dvěma sloupci, přičemž soubor má i
řádek s&nbsp;hlavičkou (ta někdy může chybět):</p>

<pre>
Block size,Time to read
1,672512695
2,338152789
3,280886198
4,261732244
5,241726381
6,222869657
7,214296698
8,202491102
9,182263641
10,177141401
</pre>

<p>V&nbsp;příkladu provedeme načtení souboru s&nbsp;využitím funkce
<strong>pandas.read_csv</strong>, které prozatím předáme jediný parametr
obsahující název souboru. Vytvořený datový rámec zobrazíme funkcí
<strong>print</strong> a navíc si necháme vypsat i datové typy přiřazené
jednotlivým sloupcům:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading CSV file that contains column with integer values."""</i>
&nbsp;
import pandas
&nbsp;
df = pandas.read_csv("integer_values.csv")
&nbsp;
print("Data frame")
print("---------------------------")
print(df)
print()
&nbsp;
print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<p>Povšimněte si, že Pandas korektně vyhodnotila, že CSV obsahuje řádek
s&nbsp;hlavičkou. Dokonce byl i korektně odvozen typ dat ve sloupcích
(<strong>int64</strong>):</p>

<pre>
Data frame
---------------------------
   Block size  Time to read
0           1     672512695
1           2     338152789
2           3     280886198
3           4     261732244
4           5     241726381
5           6     222869657
6           7     214296698
7           8     202491102
8           9     182263641
9          10     177141401
&nbsp;
Column types
---------------------------
Block size      int64
Time to read    int64
dtype: object
</pre>

<p><div class="rs-tip-major">Poznámka: to, že má každý sloupec vlastní datový
typ, je možná v&nbsp;Pythonu poněkud neobvyklé (například n-tice nebo seznam
používá dynamické typy prvků), ovšem nutné pro zajištění rychlých výpočtů a
zmenšení spotřeby operační paměti. Ostatně naprosto stejný přístup nalezneme
v&nbsp;knihovně <i>Numpy</i>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zpracování prázdných hodnot v&nbsp;tabulce</h2>

<p>Nyní se pokusme o načtení prakticky stejné tabulky, která se ovšem od první
tabulky odlišuje v&nbsp;tom, že jedna hodnota chybí (viz též <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/missing_integer_values.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/missing_integer_values.csv</a>).
V&nbsp;praxi se s&nbsp;takovými tabulkami pochopitelně setkáme velmi často:</p>

<pre>
Block size,Time to read
1,672512695
2,338152789
3,280886198
4,261732244
5,
6,222869657
7,214296698
8,202491102
9,182263641
10,177141401
</pre>

<p>Pokusme se použít stejný kód, jako tomu bylo v&nbsp;předchozí kapitole,
pouze změníme jméno vstupního souboru:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading CSV file that contains column with integer values (some are missing)."""</i>
&nbsp;
import pandas
&nbsp;
df = pandas.read_csv("missing_integer_values.csv")
&nbsp;
print("Data frame")
print("---------------------------")
print(df)
print()
&nbsp;
print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<p>Výsledek bude překvapivý &ndash; celý druhý sloupec byl převeden na hodnoty
typu <strong>float64</strong>:</p>

<pre>
Data frame
---------------------------
   Block size  Time to read
0           1   672512695.0
1           2   338152789.0
2           3   280886198.0
3           4   261732244.0
4           5           NaN
5           6   222869657.0
6           7   214296698.0
7           8   202491102.0
8           9   182263641.0
9          10   177141401.0
&nbsp;
Column types
---------------------------
Block size        int64
Time to read    <strong>float64</strong>
dtype: object
</pre>

<p>Proč tomu tak je? Knihovna Pandas musí nějakým způsobem reprezentovat
chybějící hodnotu a pro tento účel lze (mj.) použít i datový typ
<strong>float64</strong> neboli <strong>double</strong>, který podporuje
reprezentaci hodnoty <i>NaN</i> neboli <i>Not a Number</i>, viz též <a
href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k03">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k03</a>.
Což vlastně znamená, že <i>Not a Number</i> je <i>number</i> :-)</p>

<p>Ovšem toto chování nám nemusí z&nbsp;mnoha důvodů vyhovovat, už jen
z&nbsp;toho důvodu, že u <strong>float64</strong> není splněna vlastnost
asociativity u aritmetických operací. Jednou z&nbsp;možností nápravy je použití
typu <strong>Int64</strong> (nikoli <strong>int64</strong>), která dokáže
uložit i informaci o neexistující hodnotě. Musíme tedy explicitně specifikovat
datový typ sloupce nazvaného &bdquo;Time to read&ldquo;:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading CSV file that contains column with integer values (some are missing)."""</i>
&nbsp;
import pandas
&nbsp;
df = pandas.read_csv("missing_integer_values.csv", <strong>dtype={"Time to read": "Int64"}</strong>)
&nbsp;
print("Data frame")
print("---------------------------")
print(df)
print()
&nbsp;
print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<p>Nyní již dosáhneme očekávaného chování:</p>

<pre>
Data frame
---------------------------
   Block size  Time to read
0           1     672512695
1           2     338152789
2           3     280886198
3           4     261732244
4           5          &lt;NA&gt;
5           6     222869657
6           7     214296698
7           8     202491102
8           9     182263641
9          10     177141401
&nbsp;
Column types
---------------------------
Block size      int64
Time to read    <strong>Int64</strong>
dtype: object
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Načtení tabulky obsahující časová razítka</h2>

<p>Pokusme se nyní načíst tabulku, která ve svém druhém sloupci obsahuje časová
razítka, tedy jak plné datum, tak i čas. Jedná se konkrétně o <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/timestamps.csv">tento
soubor</a>:</p>

<pre>
n,Timestamp
1,2020-01-15 03:59:47
2,2020-01-15 08:19:25
3,2020-01-15 11:42:07
4,2020-01-15 14:58:48
5,2020-01-15 18:21:56
6,2020-01-15 21:10:01
7,2020-01-15 23:13:58
8,2020-01-16 01:51:52
9,2020-01-16 05:55:55
10,2020-01-16 10:11:54
11,2020-01-16 14:02:32
12,2020-01-16 17:35:25
13,2020-01-16 19:35:43
14,2020-01-16 22:29:24
</pre>

<p>Prozatím při načtení nebudeme žádným způsobem specifikovat typy sloupců,
takže vlastně zopakujeme zdrojový kód prvního příkladu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading CSV with timestamps without parsing."""</i>
&nbsp;
import pandas
&nbsp;
df = pandas.read_csv("timestamps.csv")
&nbsp;
print("Data frame")
print("---------------------------")
print(df)
print()
&nbsp;
print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<p>Ovšem z&nbsp;výsledku je patrné, že knihovna Pandas hodnoty ve druhém
sloupci načetla a zjistila, že se jedná o typ &bdquo;objekt&ldquo; a nikoli
časové razítko:</p>

<pre>
Data frame
---------------------------
     n            Timestamp
0    1  2020-01-15 03:59:47
1    2  2020-01-15 08:19:25
2    3  2020-01-15 11:42:07
3    4  2020-01-15 14:58:48
4    5  2020-01-15 18:21:56
5    6  2020-01-15 21:10:01
6    7  2020-01-15 23:13:58
7    8  2020-01-16 01:51:52
8    9  2020-01-16 05:55:55
9   10  2020-01-16 10:11:54
10  11  2020-01-16 14:02:32
11  12  2020-01-16 17:35:25
12  13  2020-01-16 19:35:43
13  14  2020-01-16 22:29:24
&nbsp;
Column types
---------------------------
n             int64
Timestamp    <strong>object</strong>
dtype: object
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Korektní parsing časových razítek</h2>

<p>Výše uvedené chování nám samozřejmě nebude v&nbsp;mnoha případech vyhovovat,
protože budeme chtít s&nbsp;časovými údaji provádět různé operace. Jedno
z&nbsp;možných řešení tohoto problému spočívá v&nbsp;tom, že při načítání
tabulky funkcí <strong>pandas.read_csv</strong> použijeme parametr
<strong>parse_dates</strong>, kterému předáme buď hodnotu <strong>True</strong>
(nové verze Pandas) nebo explicitně názvy sloupců, u nichž se má datum
zpracovat:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading CSV with timestamps with parsing."""</i>
&nbsp;
import pandas
&nbsp;
df = pandas.read_csv("timestamps.csv", <strong>parse_dates=["Timestamp"]</strong>)
&nbsp;
print("Data frame")
print("---------------------------")
print(df)
print()
&nbsp;
print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<p>Ze zobrazeného výsledku je patrné, že se nyní hodnoty ve druhém sloupci
tabulky skutečně zpracovaly korektně a jsou reprezentovány typem
<strong>datetime64</strong> (viz též <a
href="https://numpy.org/doc/stable/reference/arrays.datetime.html">https://numpy.org/doc/stable/reference/arrays.datetime.html</a>):</p>

<pre>
Data frame
---------------------------
     n           Timestamp
0    1 2020-01-15 03:59:47
1    2 2020-01-15 08:19:25
2    3 2020-01-15 11:42:07
3    4 2020-01-15 14:58:48
4    5 2020-01-15 18:21:56
5    6 2020-01-15 21:10:01
6    7 2020-01-15 23:13:58
7    8 2020-01-16 01:51:52
8    9 2020-01-16 05:55:55
9   10 2020-01-16 10:11:54
10  11 2020-01-16 14:02:32
11  12 2020-01-16 17:35:25
12  13 2020-01-16 19:35:43
13  14 2020-01-16 22:29:24

Column types
---------------------------
n                     int64
Timestamp    <strong>datetime64[ns]</strong>
dtype: object
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Problematika vlastního či specifického formátu data a/nebo času</h2>

<pre>
n,Timestamp
1,2020/01/15 03-59-47
2,2020/01/15 08-19-25
3,2020/01/15 11-42-07
4,2020/01/15 14-58-48
5,2020/01/15 18-21-56
6,2020/01/15 21-10-01
7,2020/01/15 23-13-58
8,2020/01/16 01-51-52
9,2020/01/16 05-55-55
10,2020/01/16 10-11-54
11,2020/01/16 14-02-32
12,2020/01/16 17-35-25
13,2020/01/16 19-35-43
14,2020/01/16 22-29-24
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading CSV with custom timestamps format."""

import pandas

df = pandas.read_csv("custom_timestamps.csv", parse_dates=["Timestamp"])

pandas.to_datetime(df.Timestamp)

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Traceback (most recent call last):
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/core/arrays/datetimes.py", line 2054, in objects_to_datetime64ns
    values, tz_parsed = conversion.datetime_to_datetime64(data)
  File "pandas/_libs/tslibs/conversion.pyx", line 335, in pandas._libs.tslibs.conversion.datetime_to_datetime64
ValueError: Array must be all same time zone

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "read_custom_timestamps_1.py", line 10, in <module>
    pandas.to_datetime(df.Timestamp)
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/core/tools/datetimes.py", line 803, in to_datetime
    values = convert_listlike(arg._values, format)
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/core/tools/datetimes.py", line 466, in _convert_listlike_datetimes
    allow_object=True,
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/core/arrays/datetimes.py", line 2059, in objects_to_datetime64ns
    raise e
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/core/arrays/datetimes.py", line 2050, in objects_to_datetime64ns
    require_iso8601=require_iso8601,
  File "pandas/_libs/tslib.pyx", line 352, in pandas._libs.tslib.array_to_datetime
  File "pandas/_libs/tslib.pyx", line 435, in pandas._libs.tslib.array_to_datetime
ValueError: Tz-aware datetime.datetime cannot be converted to datetime64 unless utc=True
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vlastní parsovací funkce pro časová razítka</h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading CSV with custom timestamps format using custom parser."""

import pandas
import datetime


def datetime_parser(raw_data):
    return datetime.datetime.strptime(raw_data, "%Y/%m/%d %H-%M-%S")


df = pandas.read_csv("custom_timestamps.csv",
                     date_parser=datetime_parser,
                     parse_dates=["Timestamp"])


pandas.to_datetime(df.Timestamp)

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
     n           Timestamp
0    1 2020-01-15 03:59:47
1    2 2020-01-15 08:19:25
2    3 2020-01-15 11:42:07
3    4 2020-01-15 14:58:48
4    5 2020-01-15 18:21:56
5    6 2020-01-15 21:10:01
6    7 2020-01-15 23:13:58
7    8 2020-01-16 01:51:52
8    9 2020-01-16 05:55:55
9   10 2020-01-16 10:11:54
10  11 2020-01-16 14:02:32
11  12 2020-01-16 17:35:25
12  13 2020-01-16 19:35:43
13  14 2020-01-16 22:29:24

Column types
---------------------------
n                     int64
Timestamp    datetime64[ns]
dtype: object
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading CSV with custom timestamps format using custom parser."""

import pandas
import datetime


def datetime_parser(raw_data):
    return datetime.datetime.strptime(raw_data, "%Y/%m/%d %H-%M-%S")


df = pandas.read_csv("custom_timestamps.csv",
                     date_parser=lambda raw_data: datetime.datetime.strptime(raw_data, "%Y/%m/%d %H-%M-%S"),
                     parse_dates=["Timestamp"])


pandas.to_datetime(df.Timestamp)

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
     n           Timestamp
0    1 2020-01-15 03:59:47
1    2 2020-01-15 08:19:25
2    3 2020-01-15 11:42:07
3    4 2020-01-15 14:58:48
4    5 2020-01-15 18:21:56
5    6 2020-01-15 21:10:01
6    7 2020-01-15 23:13:58
7    8 2020-01-16 01:51:52
8    9 2020-01-16 05:55:55
9   10 2020-01-16 10:11:54
10  11 2020-01-16 14:02:32
11  12 2020-01-16 17:35:25
12  13 2020-01-16 19:35:43
13  14 2020-01-16 22:29:24

Column types
---------------------------
n                     int64
Timestamp    datetime64[ns]
dtype: object
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Čtení tabulky uložené ve formátu TSV</h2>

<pre>
Sep 2020        Sep 2019        Change  Language        Ratings Changep
1       2       change  C       15.95   +0.74
2       1       change  Java    13.48   -3.18
3       3               Python  10.47   +0.59
4       4               C++     7.11    +1.48
5       5               C#      4.58    +1.18
6       6               Visual Basic    4.12    +0.83
7       7               JavaScript      2.54    +0.41
8       9       change  PHP     2.49    +0.62
9       19      change  R       2.37    +1.33
10      8       change  SQL     1.76    -0.19
11      14      change  Go      1.46    +0.24
12      16      change  Swift   1.38    +0.28
13      20      change  Perl    1.30    +0.26
14      12      change  Assembly language       1.30    -0.08
15      15              Ruby    1.24    +0.03
16      18      change  MATLAB  1.10    +0.04
17      11      change  Groovy  0.99    -0.52
18      33      change  Rust    0.92    +0.55
19      10      change  Objective-C     0.85    -0.99
20      24      change  Dart    0.77    +0.13
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

<i>"""Reading TSV file that contains column with various values."""</i>

import pandas

df = pandas.read_csv("tiobe.tsv")

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
   Sep 2020\tSep 2019\tChange\tLanguage\tRatings\tChangep
0                       1\t2\tchange\tC\t15.95\t+0.74    
1                    2\t1\tchange\tJava\t13.48\t-3.18    
2                        3\t3\t\tPython\t10.47\t+0.59    
3                            4\t4\t\tC++\t7.11\t+1.48    
4                             5\t5\t\tC#\t4.58\t+1.18    
5                   6\t6\t\tVisual Basic\t4.12\t+0.83    
6                     7\t7\t\tJavaScript\t2.54\t+0.41    
7                      8\t9\tchange\tPHP\t2.49\t+0.62    
8                       9\t19\tchange\tR\t2.37\t+1.33    
9                     10\t8\tchange\tSQL\t1.76\t-0.19    
10                    11\t14\tchange\tGo\t1.46\t+0.24    
11                 12\t16\tchange\tSwift\t1.38\t+0.28    
12                  13\t20\tchange\tPerl\t1.30\t+0.26    
13     14\t12\tchange\tAssembly language\t1.30\t-0.08    
14                        15\t15\t\tRuby\t1.24\t+0.03    
15                16\t18\tchange\tMATLAB\t1.10\t+0.04    
16                17\t11\tchange\tGroovy\t0.99\t-0.52    
17                  18\t33\tchange\tRust\t0.92\t+0.55    
18           19\t10\tchange\tObjective-C\t0.85\t-0.99    
19                  20\t24\tchange\tDart\t0.77\t+0.13    

Column types
---------------------------
Sep 2020\tSep 2019\tChange\tLanguage\tRatings\tChangep    object
dtype: object
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Specifikace oddělovače sloupců</h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8
&nbsp;
<i>"""Reading TSV file that contains column with various values using custom separator."""</i>
&nbsp;
import pandas
&nbsp;
<i># separator/delimiter specification</i>
df = pandas.read_csv("tiobe.tsv", sep="\t")
&nbsp;
print("Data frame")
print("---------------------------")
print(df)
print()
&nbsp;
print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
    Sep 2020  Sep 2019  Change           Language  Ratings  Changep
0          1         2  change                  C    15.95     0.74
1          2         1  change               Java    13.48    -3.18
2          3         3     NaN             Python    10.47     0.59
3          4         4     NaN                C++     7.11     1.48
4          5         5     NaN                 C#     4.58     1.18
5          6         6     NaN       Visual Basic     4.12     0.83
6          7         7     NaN         JavaScript     2.54     0.41
7          8         9  change                PHP     2.49     0.62
8          9        19  change                  R     2.37     1.33
9         10         8  change                SQL     1.76    -0.19
10        11        14  change                 Go     1.46     0.24
11        12        16  change              Swift     1.38     0.28
12        13        20  change               Perl     1.30     0.26
13        14        12  change  Assembly language     1.30    -0.08
14        15        15     NaN               Ruby     1.24     0.03
15        16        18  change             MATLAB     1.10     0.04
16        17        11  change             Groovy     0.99    -0.52
17        18        33  change               Rust     0.92     0.55
18        19        10  change        Objective-C     0.85    -0.99
19        20        24  change               Dart     0.77     0.13

Column types
---------------------------
Sep 2020      int64
Sep 2019      int64
Change       object
Language     object
Ratings     float64
Changep     float64
dtype: object
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Import dat z&nbsp;textových souborů</h2>

<pre>
Sep 2020            Sep 2019            Change              Language            Ratings             Changep
1                   2                   change              C                   15.95               +0.74
2                   1                   change              Java                13.48               -3.18
3                   3                                       Python              10.47               +0.59
4                   4                                       C++                 7.11                +1.48
5                   5                                       C#                  4.58                +1.18
6                   6                                       Visual Basic        4.12                +0.83
7                   7                                       JavaScript          2.54                +0.41
8                   9                   change              PHP                 2.49                +0.62
9                   19                  change              R                   2.37                +1.33
10                  8                   change              SQL                 1.76                -0.19
11                  14                  change              Go                  1.46                +0.24
12                  16                  change              Swift               1.38                +0.28
13                  20                  change              Perl                1.30                +0.26
14                  12                  change              Assembly language   1.30                -0.08
15                  15                                      Ruby                1.24                +0.03
16                  18                  change              MATLAB              1.10                +0.04
17                  11                  change              Groovy              0.99                -0.52
18                  33                  change              Rust                0.92                +0.55
19                  10                  change              Objective-C         0.85                -0.99
20                  24                  change              Dart                0.77                +0.13
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading text file that contains columns with fixed width."""

import pandas

# separator/delimiter specification
df = pandas.read_fwf("tiobe.txt")

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
    Sep  2020  Sep.1  2019  Change           Language  Ratings  Changep
0     1   NaN      2   NaN  change                  C    15.95     0.74
1     2   NaN      1   NaN  change               Java    13.48    -3.18
2     3   NaN      3   NaN     NaN             Python    10.47     0.59
3     4   NaN      4   NaN     NaN                C++     7.11     1.48
4     5   NaN      5   NaN     NaN                 C#     4.58     1.18
5     6   NaN      6   NaN     NaN       Visual Basic     4.12     0.83
6     7   NaN      7   NaN     NaN         JavaScript     2.54     0.41
7     8   NaN      9   NaN  change                PHP     2.49     0.62
8     9   NaN     19   NaN  change                  R     2.37     1.33
9    10   NaN      8   NaN  change                SQL     1.76    -0.19
10   11   NaN     14   NaN  change                 Go     1.46     0.24
11   12   NaN     16   NaN  change              Swift     1.38     0.28
12   13   NaN     20   NaN  change               Perl     1.30     0.26
13   14   NaN     12   NaN  change  Assembly language     1.30    -0.08
14   15   NaN     15   NaN     NaN               Ruby     1.24     0.03
15   16   NaN     18   NaN  change             MATLAB     1.10     0.04
16   17   NaN     11   NaN  change             Groovy     0.99    -0.52
17   18   NaN     33   NaN  change               Rust     0.92     0.55
18   19   NaN     10   NaN  change        Objective-C     0.85    -0.99
19   20   NaN     24   NaN  change               Dart     0.77     0.13

Column types
---------------------------
Sep           int64
2020        float64
Sep.1         int64
2019        float64
Change       object
Language     object
Ratings     float64
Changep     float64
dtype: object
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Explicitní specifikace šířky sloupců</h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading text file that contains columns with fixed width."""

import pandas

# separator/delimiter specification
df = pandas.read_fwf("tiobe.txt", widths=(20, 20, 20, 20, 20, 20))

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
    Sep 2020  Sep 2019  Change           Language  Ratings  Changep
0          1         2  change                  C    15.95     0.74
1          2         1  change               Java    13.48    -3.18
2          3         3     NaN             Python    10.47     0.59
3          4         4     NaN                C++     7.11     1.48
4          5         5     NaN                 C#     4.58     1.18
5          6         6     NaN       Visual Basic     4.12     0.83
6          7         7     NaN         JavaScript     2.54     0.41
7          8         9  change                PHP     2.49     0.62
8          9        19  change                  R     2.37     1.33
9         10         8  change                SQL     1.76    -0.19
10        11        14  change                 Go     1.46     0.24
11        12        16  change              Swift     1.38     0.28
12        13        20  change               Perl     1.30     0.26
13        14        12  change  Assembly language     1.30    -0.08
14        15        15     NaN               Ruby     1.24     0.03
15        16        18  change             MATLAB     1.10     0.04
16        17        11  change             Groovy     0.99    -0.52
17        18        33  change               Rust     0.92     0.55
18        19        10  change        Objective-C     0.85    -0.99
19        20        24  change               Dart     0.77     0.13

Column types
---------------------------
Sep 2020      int64
Sep 2019      int64
Change       object
Language     object
Ratings     float64
Changep     float64
dtype: object
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zpracování souborů s&nbsp;nestandardním formátem</h2>

<pre>
20.11.2020 #224
země|měna|množství|kód|kurz
Austrálie|dolar|1|AUD|16,231
Brazílie|real|1|BRL|4,160
Bulharsko|lev|1|BGN|13,467
Čína|žen-min-pi|1|CNY|3,381
Dánsko|koruna|1|DKK|3,536
EMU|euro|1|EUR|26,340
Filipíny|peso|100|PHP|46,038
Hongkong|dolar|1|HKD|2,864
Chorvatsko|kuna|1|HRK|3,481
Indie|rupie|100|INR|29,950
Indonesie|rupie|1000|IDR|1,567
Island|koruna|100|ISK|16,330
Izrael|nový šekel|1|ILS|6,649
Japonsko|jen|100|JPY|21,383
Jižní Afrika|rand|1|ZAR|1,445
Kanada|dolar|1|CAD|17,011
Korejská republika|won|100|KRW|1,990
Maďarsko|forint|100|HUF|7,328
Malajsie|ringgit|1|MYR|5,425
Mexiko|peso|1|MXN|1,104
MMF|ZPČ|1|XDR|31,598
Norsko|koruna|1|NOK|2,471
Nový Zéland|dolar|1|NZD|15,416
Polsko|zlotý|1|PLN|5,900
Rumunsko|leu|1|RON|5,405
Rusko|rubl|100|RUB|29,180
Singapur|dolar|1|SGD|16,530
Švédsko|koruna|1|SEK|2,577
Švýcarsko|frank|1|CHF|24,363
Thajsko|baht|100|THB|73,313
Turecko|lira|1|TRY|2,911
USA|dolar|1|USD|22,201
Velká Británie|libra|1|GBP|29,464
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading data file with custom format."""

import pandas

df = pandas.read_csv("denni_kurz.txt")

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Traceback (most recent call last):
  File "read_custom_data_format_1.py", line 8, in <module>
    df = pandas.read_csv("denni_kurz.txt")
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/io/parsers.py", line 688, in read_csv
    return _read(filepath_or_buffer, kwds)
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/io/parsers.py", line 460, in _read
    data = parser.read(nrows)
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/io/parsers.py", line 1198, in read
    ret = self._engine.read(nrows)
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/io/parsers.py", line 2157, in read
    data = self._reader.read(nrows)
  File "pandas/_libs/parsers.pyx", line 847, in pandas._libs.parsers.TextReader.read
  File "pandas/_libs/parsers.pyx", line 862, in pandas._libs.parsers.TextReader._read_low_memory
  File "pandas/_libs/parsers.pyx", line 918, in pandas._libs.parsers.TextReader._read_rows
  File "pandas/_libs/parsers.pyx", line 905, in pandas._libs.parsers.TextReader._tokenize_rows
  File "pandas/_libs/parsers.pyx", line 2042, in pandas._libs.parsers.raise_parser_error
pandas.errors.ParserError: Error tokenizing data. C error: Expected 1 fields in line 3, saw 2
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading data file with custom format. separator specification."""

import pandas

df = pandas.read_csv("denni_kurz.txt", sep="|")

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
                                           20.11.2020 #224
země               měna       množství kód            kurz
Austrálie          dolar      1        AUD          16,231
Brazílie           real       1        BRL           4,160
Bulharsko          lev        1        BGN          13,467
Čína               žen-min-pi 1        CNY           3,381
Dánsko             koruna     1        DKK           3,536
EMU                euro       1        EUR          26,340
Filipíny           peso       100      PHP          46,038
Hongkong           dolar      1        HKD           2,864
Chorvatsko         kuna       1        HRK           3,481
Indie              rupie      100      INR          29,950
Indonesie          rupie      1000     IDR           1,567
Island             koruna     100      ISK          16,330
Izrael             nový šekel 1        ILS           6,649
Japonsko           jen        100      JPY          21,383
Jižní Afrika       rand       1        ZAR           1,445
Kanada             dolar      1        CAD          17,011
Korejská republika won        100      KRW           1,990
Maďarsko           forint     100      HUF           7,328
Malajsie           ringgit    1        MYR           5,425
Mexiko             peso       1        MXN           1,104
MMF                ZPČ        1        XDR          31,598
Norsko             koruna     1        NOK           2,471
Nový Zéland        dolar      1        NZD          15,416
Polsko             zlotý      1        PLN           5,900
Rumunsko           leu        1        RON           5,405
Rusko              rubl       100      RUB          29,180
Singapur           dolar      1        SGD          16,530
Švédsko            koruna     1        SEK           2,577
Švýcarsko          frank      1        CHF          24,363
Thajsko            baht       100      THB          73,313
Turecko            lira       1        TRY           2,911
USA                dolar      1        USD          22,201
Velká Británie     libra      1        GBP          29,464

Column types
---------------------------
20.11.2020 #224    object
dtype: object
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading data file with custom format. separator + skip rows specification."""

import pandas

df = pandas.read_csv("denni_kurz.txt", sep="|", skiprows=1)

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
                  země        měna  množství  kód    kurz
0            Austrálie       dolar         1  AUD  16,231
1             Brazílie        real         1  BRL   4,160
2            Bulharsko         lev         1  BGN  13,467
3                 Čína  žen-min-pi         1  CNY   3,381
4               Dánsko      koruna         1  DKK   3,536
5                  EMU        euro         1  EUR  26,340
6             Filipíny        peso       100  PHP  46,038
7             Hongkong       dolar         1  HKD   2,864
8           Chorvatsko        kuna         1  HRK   3,481
9                Indie       rupie       100  INR  29,950
10           Indonesie       rupie      1000  IDR   1,567
11              Island      koruna       100  ISK  16,330
12              Izrael  nový šekel         1  ILS   6,649
13            Japonsko         jen       100  JPY  21,383
14        Jižní Afrika        rand         1  ZAR   1,445
15              Kanada       dolar         1  CAD  17,011
16  Korejská republika         won       100  KRW   1,990
17            Maďarsko      forint       100  HUF   7,328
18            Malajsie     ringgit         1  MYR   5,425
19              Mexiko        peso         1  MXN   1,104
20                 MMF         ZPČ         1  XDR  31,598
21              Norsko      koruna         1  NOK   2,471
22         Nový Zéland       dolar         1  NZD  15,416
23              Polsko       zlotý         1  PLN   5,900
24            Rumunsko         leu         1  RON   5,405
25               Rusko        rubl       100  RUB  29,180
26            Singapur       dolar         1  SGD  16,530
27             Švédsko      koruna         1  SEK   2,577
28           Švýcarsko       frank         1  CHF  24,363
29             Thajsko        baht       100  THB  73,313
30             Turecko        lira         1  TRY   2,911
31                 USA       dolar         1  USD  22,201
32      Velká Británie       libra         1  GBP  29,464

Column types
---------------------------
země        object
měna        object
množství     int64
kód         object
kurz        object
dtype: object
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading data file with custom format. separator + skip rows specification."""

import pandas

df = pandas.read_csv("denni_kurz.txt", sep="|", skiprows=1)

df["kurz"] = pandas.to_numeric(df["kurz"].str.replace(',','.'), errors='coerce')

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
                  země        měna  množství  kód    kurz
0            Austrálie       dolar         1  AUD  16.231
1             Brazílie        real         1  BRL   4.160
2            Bulharsko         lev         1  BGN  13.467
3                 Čína  žen-min-pi         1  CNY   3.381
4               Dánsko      koruna         1  DKK   3.536
5                  EMU        euro         1  EUR  26.340
6             Filipíny        peso       100  PHP  46.038
7             Hongkong       dolar         1  HKD   2.864
8           Chorvatsko        kuna         1  HRK   3.481
9                Indie       rupie       100  INR  29.950
10           Indonesie       rupie      1000  IDR   1.567
11              Island      koruna       100  ISK  16.330
12              Izrael  nový šekel         1  ILS   6.649
13            Japonsko         jen       100  JPY  21.383
14        Jižní Afrika        rand         1  ZAR   1.445
15              Kanada       dolar         1  CAD  17.011
16  Korejská republika         won       100  KRW   1.990
17            Maďarsko      forint       100  HUF   7.328
18            Malajsie     ringgit         1  MYR   5.425
19              Mexiko        peso         1  MXN   1.104
20                 MMF         ZPČ         1  XDR  31.598
21              Norsko      koruna         1  NOK   2.471
22         Nový Zéland       dolar         1  NZD  15.416
23              Polsko       zlotý         1  PLN   5.900
24            Rumunsko         leu         1  RON   5.405
25               Rusko        rubl       100  RUB  29.180
26            Singapur       dolar         1  SGD  16.530
27             Švédsko      koruna         1  SEK   2.577
28           Švýcarsko       frank         1  CHF  24.363
29             Thajsko        baht       100  THB  73.313
30             Turecko        lira         1  TRY   2.911
31                 USA       dolar         1  USD  22.201
32      Velká Británie       libra         1  GBP  29.464

Column types
---------------------------
země         object
měna         object
množství      int64
kód          object
kurz        float64
dtype: object
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading data file from internets."""

import pandas

url = "https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt"
df = pandas.read_csv(url)

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Traceback (most recent call last):
  File "read_data_from_internets_improper.py", line 9, in <module>
    df = pandas.read_csv(url)
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/io/parsers.py", line 688, in read_csv
    return _read(filepath_or_buffer, kwds)
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/io/parsers.py", line 460, in _read
    data = parser.read(nrows)
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/io/parsers.py", line 1198, in read
    ret = self._engine.read(nrows)
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/io/parsers.py", line 2157, in read
    data = self._reader.read(nrows)
  File "pandas/_libs/parsers.pyx", line 847, in pandas._libs.parsers.TextReader.read
  File "pandas/_libs/parsers.pyx", line 862, in pandas._libs.parsers.TextReader._read_low_memory
  File "pandas/_libs/parsers.pyx", line 918, in pandas._libs.parsers.TextReader._read_rows
  File "pandas/_libs/parsers.pyx", line 905, in pandas._libs.parsers.TextReader._tokenize_rows
  File "pandas/_libs/parsers.pyx", line 2042, in pandas._libs.parsers.raise_parser_error
pandas.errors.ParserError: Error tokenizing data. C error: Expected 1 fields in line 3, saw 2
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading data file from internets."""

import pandas

url = "https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt"
df = pandas.read_csv(url, sep="|", skiprows=1)

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
                  země        měna  množství  kód    kurz
0            Austrálie       dolar         1  AUD  16,234
1             Brazílie        real         1  BRL   4,107
2            Bulharsko         lev         1  BGN  13,427
3                 Čína  žen-min-pi         1  CNY   3,360
4               Dánsko      koruna         1  DKK   3,528
5                  EMU        euro         1  EUR  26,260
6             Filipíny        peso       100  PHP  45,873
7             Hongkong       dolar         1  HKD   2,855
8           Chorvatsko        kuna         1  HRK   3,473
9                Indie       rupie       100  INR  29,861
10           Indonesie       rupie      1000  IDR   1,563
11              Island      koruna       100  ISK  16,321
12              Izrael  nový šekel         1  ILS   6,628
13            Japonsko         jen       100  JPY  21,164
14        Jižní Afrika        rand         1  ZAR   1,441
15              Kanada       dolar         1  CAD  16,934
16  Korejská republika         won       100  KRW   1,991
17            Maďarsko      forint       100  HUF   7,267
18            Malajsie     ringgit         1  MYR   5,413
19              Mexiko        peso         1  MXN   1,103
20                 MMF         ZPČ         1  XDR  31,591
21              Norsko      koruna         1  NOK   2,460
22         Nový Zéland       dolar         1  NZD  15,436
23              Polsko       zlotý         1  PLN   5,880
24            Rumunsko         leu         1  RON   5,389
25               Rusko        rubl       100  RUB  29,143
26            Singapur       dolar         1  SGD  16,471
27             Švédsko      koruna         1  SEK   2,573
28           Švýcarsko       frank         1  CHF  24,240
29             Thajsko        baht       100  THB  72,836
30             Turecko        lira         1  TRY   2,779
31                 USA       dolar         1  USD  22,128
32      Velká Británie       libra         1  GBP  29,498

Column types
---------------------------
země        object
měna        object
množství     int64
kód         object
kurz        object
dtype: object
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading data file from internets."""

import pandas

url = "https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt"
df = pandas.read_csv(url, sep="|", skiprows=1)

df["kurz"] = pandas.to_numeric(df["kurz"].str.replace(',','.'), errors='coerce')

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
                  země        měna  množství  kód    kurz
0            Austrálie       dolar         1  AUD  16.234
1             Brazílie        real         1  BRL   4.107
2            Bulharsko         lev         1  BGN  13.427
3                 Čína  žen-min-pi         1  CNY   3.360
4               Dánsko      koruna         1  DKK   3.528
5                  EMU        euro         1  EUR  26.260
6             Filipíny        peso       100  PHP  45.873
7             Hongkong       dolar         1  HKD   2.855
8           Chorvatsko        kuna         1  HRK   3.473
9                Indie       rupie       100  INR  29.861
10           Indonesie       rupie      1000  IDR   1.563
11              Island      koruna       100  ISK  16.321
12              Izrael  nový šekel         1  ILS   6.628
13            Japonsko         jen       100  JPY  21.164
14        Jižní Afrika        rand         1  ZAR   1.441
15              Kanada       dolar         1  CAD  16.934
16  Korejská republika         won       100  KRW   1.991
17            Maďarsko      forint       100  HUF   7.267
18            Malajsie     ringgit         1  MYR   5.413
19              Mexiko        peso         1  MXN   1.103
20                 MMF         ZPČ         1  XDR  31.591
21              Norsko      koruna         1  NOK   2.460
22         Nový Zéland       dolar         1  NZD  15.436
23              Polsko       zlotý         1  PLN   5.880
24            Rumunsko         leu         1  RON   5.389
25               Rusko        rubl       100  RUB  29.143
26            Singapur       dolar         1  SGD  16.471
27             Švédsko      koruna         1  SEK   2.573
28           Švýcarsko       frank         1  CHF  24.240
29             Thajsko        baht       100  THB  72.836
30             Turecko        lira         1  TRY   2.779
31                 USA       dolar         1  USD  22.128
32      Velká Británie       libra         1  GBP  29.498

Column types
---------------------------
země         object
měna         object
množství      int64
kód          object
kurz        float64
dtype: object
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady a datovými soubory</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
Python 3 a nejnovější stabilní verzi knihovny Pandas byly uloženy do Git
repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>read_integer_values.py</td><td>načtení obsahu jednoduché tabulky ze souboru typu CSV</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_integer_values.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_integer_values.py</a></td></tr>
<tr><td> 2</td><td>read_missing_integer_values.py</td><td>zpracování prázdných hodnot v&nbsp;tabulce jako NaN</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_missing_integer_values.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_missing_integer_values.py</a></td></tr>
<tr><td> 3</td><td>read_missing_integer_values_2.py</td><td>zpracování prázdných hodnot v&nbsp;tabulce pomocí typu Int64</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_missing_integer_values_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_missing_integer_values_2.py</a></td></tr>
<tr><td> 4</td><td>read_timestamps_wo_parsing.py</td><td>načtení tabulky obsahující časová razítka</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_timestamps_wo_parsing.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_timestamps_wo_parsing.py</a></td></tr>
<tr><td> 5</td><td>read_timestamps_with_parsing.py</td><td>korektní parsing časových razítek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_timestamps_with_parsing.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_timestamps_with_parsing.py</a></td></tr>
<tr><td> 6</td><td>read_custom_timestamps_1.py</td><td>pokus o načtení souboru s&nbsp;vlastním formátem časových razítek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_custom_timestamps_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_custom_timestamps_1.py</a></td></tr>
<tr><td> 7</td><td>read_custom_timestamps_2.py</td><td>parsing časových razítek s&nbsp;vlastním formátem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_custom_timestamps_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_custom_timestamps_2.py</a></td></tr>
<tr><td> 8</td><td>read_custom_timestamps_3.py</td><td>parsing časových razítek s&nbsp;vlastním formátem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_custom_timestamps_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_custom_timestamps_3.py</a></td></tr>
<tr><td> 9</td><td>read_tsv_default_behaviour.py</td><td>čtení tabulky uložené ve formátu TSV bez uvedení oddělovače</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_tsv_default_behaviour.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_tsv_default_behaviour.py</a></td></tr>
<tr><td>10</td><td>read_tsv_specify_separator.py</td><td>čtení tabulky uložené ve formátu TSV se specifikací oddělovače</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_tsv_specify_separator.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_tsv_specify_separator.py</a></td></tr>
<tr><td>11</td><td>read_txt_no_widths.py</td><td>import dat z&nbsp;textových souborů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_txt_no_widths.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_txt_no_widths.py</a></td></tr>
<tr><td>12</td><td>read_txt_specify_widths.py</td><td>explicitní specifikace šířky sloupců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_txt_specify_widths.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_txt_specify_widths.py</a></td></tr>
<tr><td>13</td><td>read_custom_data_format_1.py</td><td>zpracování souborů s&nbsp;nestandardním formátem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_custom_data_format_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_custom_data_format_1.py</a></td></tr>
<tr><td>14</td><td>read_custom_data_format_2.py</td><td>specifikace oddělovače sloupců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_custom_data_format_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_custom_data_format_2.py</a></td></tr>
<tr><td>15</td><td>read_custom_data_format_3.py</td><td>vynechání prvního řádku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_custom_data_format_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_custom_data_format_3.py</a></td></tr>
<tr><td>16</td><td>read_custom_data_format_4.py</td><td>konverze dat používajících desetinnou čárku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_custom_data_format_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_custom_data_format_4.py</a></td></tr>
<tr><td>17</td><td>read_data_from_internets_improper.py</td><td>stažení a pokus o zpracování souboru s&nbsp;vlastním formátem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_data_from_internets_improper.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_data_from_internets_improper.py</a></td></tr>
<tr><td>18</td><td>read_data_from_internets_proper.py</td><td>zpracování souboru s&nbsp;vlastním formátem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_data_from_internets_proper.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_data_from_internets_proper.py</a></td></tr>
<tr><td>19</td><td>read_data_from_internets_proper_2.py</td><td>vylepšení předchozího příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_data_from_internets_proper_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/read_data_from_internets_proper_2.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>20</td><td>check_types_1.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>Voluptuous</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_1.py</a></td></tr>
<tr><td>21</td><td>check_types_2.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>Voluptuous</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_2.py</a></td></tr>
<tr><td>22</td><td>check_types_3.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>Voluptuous</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_3.py</a></td></tr>
<tr><td>23</td><td>check_types_4.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>Voluptuous</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_4.py</a></td></tr>
<tr><td>24</td><td>check_types_5.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>Voluptuous</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_5.py</a></td></tr>
<tr><td>25</td><td>opulent_pandas_1.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>opulent-pandas</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_1.py</a></td></tr>
<tr><td>26</td><td>opulent_pandas_2.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>opulent-pandas</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_2.py</a></td></tr>
<tr><td>27</td><td>opulent_pandas_3.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>opulent-pandas</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_3.py</a></td></tr>
<tr><td>28</td><td>opulent_pandas_4.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>opulent-pandas</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_4.py</a></td></tr>
</table>

<p>Demonstrační příklady načítají následující soubory s&nbsp;daty:</p>

<table>
<tr><th>#</th><th>Datový soubor</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td>1</td><td>integer_values.csv</td><td>dvousloupcová tabulka s&nbsp;celými čísly</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/integer_values.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/integer_values.csv</a></td></tr>
<tr><td>2</td><td>missing_integer_values.csv</td><td>dvousloupcová tabulka s&nbsp;celými čísly, z&nbsp;nichž některé chybí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/missing_integer_values.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/missing_integer_values.csv</a></td></tr>
<tr><td>3</td><td>timestamps.csv</td><td>tabulka s&nbsp;časovými údaji</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/timestamps.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/timestamps.csv</a></td></tr>
<tr><td>4</td><td>custom_timestamps.csv</td><td>tabulka s&nbsp;časovými údaji používajícími nestandardní formát</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/custom_timestamps.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/custom_timestamps.csv</a></td></tr>
<tr><td>5</td><td>denni_kurz.txt</td><td>semistrukturovaný soubor s&nbsp;nestandardními oddělovači</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/denni_kurz.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/denni_kurz.txt</a></td></tr>
<tr><td>6</td><td>tiobe.tsv</td><td>data získaná ze stránek Tiobe indexu ve formátu TSV</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/tiobe.tsv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/tiobe.tsv</a></td></tr>
<tr><td>7</td><td>tiobe.txt</td><td>data získaná ze stránek Tiobe indexu v&nbsp;textovém formátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/tiobe.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/tiobe.txt</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Články s&nbsp;informacemi o různých způsobech validace datových struktur</h2>

<p>V&nbsp;této kapitole jsou uvedeny odkazy na články, v&nbsp;nichž jsme se
zabývali různými způsoby validace datových struktur. Pravděpodobně nejlepší
přístup nalezneme v&nbsp;knihovně <strong>clojure.spec</strong> určené pro
jazyk Clojure, ovšem i pro Python existuje několik velmi užitečných
knihoven:</p>

<ol>

<li>Validace dat s&nbsp;využitím knihovny spec v&nbsp; Clojure 1.9.0<br />
<a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/">https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/</a>
</li>

<li>Validace dat s&nbsp;využitím knihovny spec v&nbsp; Clojure 1.9.0 (dokončení)<br />
<a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0-dokonceni/">https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0-dokonceni/</a>
</li>

<li>Validace datových struktur v&nbsp;Pythonu pomocí knihoven Schemagic a Schema<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/</a>
</li>

<li>Validace datových struktur v&nbsp; Pythonu (2. část)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/</a>
</li>

<li>Validace datových struktur v&nbsp; Pythonu (dokončení)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Opulent-Pandas na PyPi<br />
<a href="https://pypi.org/project/opulent-pandas/">https://pypi.org/project/opulent-pandas/</a>
</li>

<li>pandas_validator na PyPi<br />
<a href="https://pypi.org/project/pandas_validator/">https://pypi.org/project/pandas_validator/</a>
</li>

<li>pandas-validator (dokumentace)<br />
<a href="https://pandas-validator.readthedocs.io/en/latest/">https://pandas-validator.readthedocs.io/en/latest/</a>
</li>

<li>7 Best Python Libraries for Validating Data<br />
<a href="https://www.yeahhub.com/7-best-python-libraries-validating-data/">https://www.yeahhub.com/7-best-python-libraries-validating-data/</a>
</li>

<li>Universally unique identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">https://en.wikipedia.org/wiki/Universally_unique_identifier</a>
</li>

<li>Nullable integer data type<br />
<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/integer_na.html">https://pandas.pydata.org/pandas-docs/stable/user_guide/integer_na.html</a>
</li>

<li>pandas.read_csv<br />
<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html</a>
</li>

<li>How to define format when using pandas to_datetime?<br />
<a href="https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime">https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime</a>
</li>

<li>Pandas : skip rows while reading csv file to a Dataframe using read_csv() in Python<br />
<a href="https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/">https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/</a>
</li>

<li>Skip rows during csv import pandas<br />
<a href="https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas">https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas</a>
</li>

<li>Denni kurz<br />
<a href="https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt">https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt</a>
</li>

<li>UUID objects according to RFC 4122 (knihovna pro Python)<br />
<a href="https://docs.python.org/3.5/library/uuid.html#uuid.uuid4">https://docs.python.org/3.5/library/uuid.html#uuid.uuid4</a>
</li>

<li>Object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Object_identifier">https://en.wikipedia.org/wiki/Object_identifier</a>
</li>

<li>Digital object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Digital_object_identifier">https://en.wikipedia.org/wiki/Digital_object_identifier</a>
</li>

<li>voluptuous na (na PyPi)<br />
<a href="https://pypi.python.org/pypi/voluptuous">https://pypi.python.org/pypi/voluptuous</a>
</li>

<li>Repositář knihovny voluptuous na GitHubu<br />
<a href="https://github.com/alecthomas/voluptuous">https://github.com/alecthomas/voluptuous</a>
</li>

<li>pytest-voluptuous 1.0.2 (na PyPi)<br />
<a href="https://pypi.org/project/pytest-voluptuous/">https://pypi.org/project/pytest-voluptuous/</a>
</li>

<li>pytest-voluptuous (na GitHubu)<br />
<a href="https://github.com/F-Secure/pytest-voluptuous">https://github.com/F-Secure/pytest-voluptuous</a>
</li>

<li>schemagic 0.9.1 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schemagic/0.9.1">https://pypi.python.org/pypi/schemagic/0.9.1</a>
</li>

<li>Schemagic / Schemagic.web (na GitHubu)<br />
<a href="https://github.com/Mechrophile/schemagic">https://github.com/Mechrophile/schemagic</a>
</li>

<li>schema 0.6.7 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schema">https://pypi.python.org/pypi/schema</a>
</li>

<li>schema (na GitHubu)<br />
<a href="https://github.com/keleshev/schema">https://github.com/keleshev/schema</a>
</li>

<li>XML Schema validator and data conversion library for Python<br />
<a href="https://github.com/brunato/xmlschema">https://github.com/brunato/xmlschema</a>
</li>

<li>xmlschema 0.9.7<br />
<a href="https://pypi.python.org/pypi/xmlschema/0.9.7">https://pypi.python.org/pypi/xmlschema/0.9.7</a>
</li>

<li>jsonschema 2.6.0<br />
<a href="https://pypi.python.org/pypi/jsonschema">https://pypi.python.org/pypi/jsonschema</a>
</li>

<li>warlock 1.3.0<br />
<a href="https://pypi.python.org/pypi/warlock">https://pypi.python.org/pypi/warlock</a>
</li>

<li>Python Virtual Environments – A Primer<br />
<a href="https://realpython.com/python-virtual-environments-a-primer/">https://realpython.com/python-virtual-environments-a-primer/</a>
</li>

<li>pip 1.1 documentation: Requirements files<br />
<a href="https://pip.readthedocs.io/en/1.1/requirements.html">https://pip.readthedocs.io/en/1.1/requirements.html</a>
</li>

<li>unittest.mock — mock object library<br />
<a href="https://docs.python.org/3.5/library/unittest.mock.html">https://docs.python.org/3.5/library/unittest.mock.html</a>
</li>

<li>mock 2.0.0<br />
<a href="https://pypi.python.org/pypi/mock">https://pypi.python.org/pypi/mock</a>
</li>

<li>An Introduction to Mocking in Python<br />
<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python</a>
</li>

<li>Unit testing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Unit_testing">https://en.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit testing<br />
<a href="https://cs.wikipedia.org/wiki/Unit_testing">https://cs.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>5 Differences between clojure.spec and Schema<br />
<a href="https://lispcast.com/clojure.spec-vs-schema/">https://lispcast.com/clojure.spec-vs-schema/</a>
</li>

<li>Schema: Clojure(Script) library for declarative data description and validation<br />
<a href="https://github.com/plumatic/schema">https://github.com/plumatic/schema</a>
</li>

<li>clojure.spec - Rationale and Overview<br />
<a href="https://clojure.org/about/spec">https://clojure.org/about/spec</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>
