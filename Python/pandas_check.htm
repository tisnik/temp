<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Načtení obsahu jednoduché tabulky ze souboru typu CSV</a></p>
<p><a href="#k03">*** 3. Zpracování prázdných hodnot v&nbsp;tabulce</a></p>
<p><a href="#k04">*** 4. Načtení tabulky obsahující časová razítka</a></p>
<p><a href="#k05">*** 5. Korektní parsing časových razítek</a></p>
<p><a href="#k06">*** 6. Problematika vlastního či specifického formátu data a/nebo času</a></p>
<p><a href="#k07">*** 7. Vlastní parsovací funkce</a></p>
<p><a href="#k08">*** 8. Čtení tabulky uložené ve formátu TSV</a></p>
<p><a href="#k09">*** 9. Specifikace oddělovače sloupců</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Načtení obsahu jednoduché tabulky ze souboru typu CSV</h2>

<pre>
Block size,Time to read
1,672512695
2,338152789
3,280886198
4,261732244
5,241726381
6,222869657
7,214296698
8,202491102
9,182263641
10,177141401
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading CSV file that contains column with integer values."""

import pandas

df = pandas.read_csv("integer_values.csv")

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
   Block size  Time to read
0           1     672512695
1           2     338152789
2           3     280886198
3           4     261732244
4           5     241726381
5           6     222869657
6           7     214296698
7           8     202491102
8           9     182263641
9          10     177141401

Column types
---------------------------
Block size      int64
Time to read    int64
dtype: object
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zpracování prázdných hodnot v&nbsp;tabulce</h2>

<pre>
Block size,Time to read
1,672512695
2,338152789
3,280886198
4,261732244
5,
6,222869657
7,214296698
8,202491102
9,182263641
10,177141401
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading CSV file that contains column with integer values (some are missing)."""

import pandas

df = pandas.read_csv("missing_integer_values.csv")

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
   Block size  Time to read
0           1   672512695.0
1           2   338152789.0
2           3   280886198.0
3           4   261732244.0
4           5           NaN
5           6   222869657.0
6           7   214296698.0
7           8   202491102.0
8           9   182263641.0
9          10   177141401.0

Column types
---------------------------
Block size        int64
Time to read    float64
dtype: object
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading CSV file that contains column with integer values (some are missing)."""

import pandas

df = pandas.read_csv("missing_integer_values.csv", dtype={"Time to read":"Int64"})

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
   Block size  Time to read
0           1     672512695
1           2     338152789
2           3     280886198
3           4     261732244
4           5          <NA>
5           6     222869657
6           7     214296698
7           8     202491102
8           9     182263641
9          10     177141401

Column types
---------------------------
Block size      int64
Time to read    Int64
dtype: object
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Načtení tabulky obsahující časová razítka</h2>

<pre>
n,Timestamp
1,2020-01-15 03:59:47
2,2020-01-15 08:19:25
3,2020-01-15 11:42:07
4,2020-01-15 14:58:48
5,2020-01-15 18:21:56
6,2020-01-15 21:10:01
7,2020-01-15 23:13:58
8,2020-01-16 01:51:52
9,2020-01-16 05:55:55
10,2020-01-16 10:11:54
11,2020-01-16 14:02:32
12,2020-01-16 17:35:25
13,2020-01-16 19:35:43
14,2020-01-16 22:29:24
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading CSV with timestamps without parsing."""

import pandas

df = pandas.read_csv("timestamps.csv")

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
     n            Timestamp
0    1  2020-01-15 03:59:47
1    2  2020-01-15 08:19:25
2    3  2020-01-15 11:42:07
3    4  2020-01-15 14:58:48
4    5  2020-01-15 18:21:56
5    6  2020-01-15 21:10:01
6    7  2020-01-15 23:13:58
7    8  2020-01-16 01:51:52
8    9  2020-01-16 05:55:55
9   10  2020-01-16 10:11:54
10  11  2020-01-16 14:02:32
11  12  2020-01-16 17:35:25
12  13  2020-01-16 19:35:43
13  14  2020-01-16 22:29:24

Column types
---------------------------
n             int64
Timestamp    object
dtype: object
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Korektní parsing časových razítek</h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading CSV with timestamps with parsing."""

import pandas

df = pandas.read_csv("timestamps.csv", parse_dates=["Timestamp"])

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
     n           Timestamp
0    1 2020-01-15 03:59:47
1    2 2020-01-15 08:19:25
2    3 2020-01-15 11:42:07
3    4 2020-01-15 14:58:48
4    5 2020-01-15 18:21:56
5    6 2020-01-15 21:10:01
6    7 2020-01-15 23:13:58
7    8 2020-01-16 01:51:52
8    9 2020-01-16 05:55:55
9   10 2020-01-16 10:11:54
10  11 2020-01-16 14:02:32
11  12 2020-01-16 17:35:25
12  13 2020-01-16 19:35:43
13  14 2020-01-16 22:29:24

Column types
---------------------------
n                     int64
Timestamp    datetime64[ns]
dtype: object
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Problematika vlastního či specifického formátu data a/nebo času</h2>

<pre>
n,Timestamp
1,2020/01/15 03-59-47
2,2020/01/15 08-19-25
3,2020/01/15 11-42-07
4,2020/01/15 14-58-48
5,2020/01/15 18-21-56
6,2020/01/15 21-10-01
7,2020/01/15 23-13-58
8,2020/01/16 01-51-52
9,2020/01/16 05-55-55
10,2020/01/16 10-11-54
11,2020/01/16 14-02-32
12,2020/01/16 17-35-25
13,2020/01/16 19-35-43
14,2020/01/16 22-29-24
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading CSV with custom timestamps format."""

import pandas

df = pandas.read_csv("custom_timestamps.csv", parse_dates=["Timestamp"])

pandas.to_datetime(df.Timestamp)

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Traceback (most recent call last):
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/core/arrays/datetimes.py", line 2054, in objects_to_datetime64ns
    values, tz_parsed = conversion.datetime_to_datetime64(data)
  File "pandas/_libs/tslibs/conversion.pyx", line 335, in pandas._libs.tslibs.conversion.datetime_to_datetime64
ValueError: Array must be all same time zone

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "read_custom_timestamps_1.py", line 10, in <module>
    pandas.to_datetime(df.Timestamp)
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/core/tools/datetimes.py", line 803, in to_datetime
    values = convert_listlike(arg._values, format)
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/core/tools/datetimes.py", line 466, in _convert_listlike_datetimes
    allow_object=True,
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/core/arrays/datetimes.py", line 2059, in objects_to_datetime64ns
    raise e
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/core/arrays/datetimes.py", line 2050, in objects_to_datetime64ns
    require_iso8601=require_iso8601,
  File "pandas/_libs/tslib.pyx", line 352, in pandas._libs.tslib.array_to_datetime
  File "pandas/_libs/tslib.pyx", line 435, in pandas._libs.tslib.array_to_datetime
ValueError: Tz-aware datetime.datetime cannot be converted to datetime64 unless utc=True
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vlastní parsovací funkce</h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading CSV with custom timestamps format using custom parser."""

import pandas
import datetime


def datetime_parser(raw_data):
    return datetime.datetime.strptime(raw_data, "%Y/%m/%d %H-%M-%S")


df = pandas.read_csv("custom_timestamps.csv",
                     date_parser=datetime_parser,
                     parse_dates=["Timestamp"])


pandas.to_datetime(df.Timestamp)

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
     n           Timestamp
0    1 2020-01-15 03:59:47
1    2 2020-01-15 08:19:25
2    3 2020-01-15 11:42:07
3    4 2020-01-15 14:58:48
4    5 2020-01-15 18:21:56
5    6 2020-01-15 21:10:01
6    7 2020-01-15 23:13:58
7    8 2020-01-16 01:51:52
8    9 2020-01-16 05:55:55
9   10 2020-01-16 10:11:54
10  11 2020-01-16 14:02:32
11  12 2020-01-16 17:35:25
12  13 2020-01-16 19:35:43
13  14 2020-01-16 22:29:24

Column types
---------------------------
n                     int64
Timestamp    datetime64[ns]
dtype: object
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

"""Reading CSV with custom timestamps format using custom parser."""

import pandas
import datetime


def datetime_parser(raw_data):
    return datetime.datetime.strptime(raw_data, "%Y/%m/%d %H-%M-%S")


df = pandas.read_csv("custom_timestamps.csv",
                     date_parser=lambda raw_data: datetime.datetime.strptime(raw_data, "%Y/%m/%d %H-%M-%S"),
                     parse_dates=["Timestamp"])


pandas.to_datetime(df.Timestamp)

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
     n           Timestamp
0    1 2020-01-15 03:59:47
1    2 2020-01-15 08:19:25
2    3 2020-01-15 11:42:07
3    4 2020-01-15 14:58:48
4    5 2020-01-15 18:21:56
5    6 2020-01-15 21:10:01
6    7 2020-01-15 23:13:58
7    8 2020-01-16 01:51:52
8    9 2020-01-16 05:55:55
9   10 2020-01-16 10:11:54
10  11 2020-01-16 14:02:32
11  12 2020-01-16 17:35:25
12  13 2020-01-16 19:35:43
13  14 2020-01-16 22:29:24

Column types
---------------------------
n                     int64
Timestamp    datetime64[ns]
dtype: object
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Čtení tabulky uložené ve formátu TSV</h2>

<pre>
Sep 2020        Sep 2019        Change  Language        Ratings Changep
1       2       change  C       15.95   +0.74
2       1       change  Java    13.48   -3.18
3       3               Python  10.47   +0.59
4       4               C++     7.11    +1.48
5       5               C#      4.58    +1.18
6       6               Visual Basic    4.12    +0.83
7       7               JavaScript      2.54    +0.41
8       9       change  PHP     2.49    +0.62
9       19      change  R       2.37    +1.33
10      8       change  SQL     1.76    -0.19
11      14      change  Go      1.46    +0.24
12      16      change  Swift   1.38    +0.28
13      20      change  Perl    1.30    +0.26
14      12      change  Assembly language       1.30    -0.08
15      15              Ruby    1.24    +0.03
16      18      change  MATLAB  1.10    +0.04
17      11      change  Groovy  0.99    -0.52
18      33      change  Rust    0.92    +0.55
19      10      change  Objective-C     0.85    -0.99
20      24      change  Dart    0.77    +0.13
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

<i>"""Reading TSV file that contains column with various values."""</i>

import pandas

df = pandas.read_csv("tiobe.tsv")

print("Data frame")
print("---------------------------")
print(df)
print()

print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
Data frame
---------------------------
    Sep  2020  Sep.1  2019  Change           Language  Ratings  Changep
0     1   NaN      2   NaN  change                  C    15.95     0.74
1     2   NaN      1   NaN  change               Java    13.48    -3.18
2     3   NaN      3   NaN     NaN             Python    10.47     0.59
3     4   NaN      4   NaN     NaN                C++     7.11     1.48
4     5   NaN      5   NaN     NaN                 C#     4.58     1.18
5     6   NaN      6   NaN     NaN       Visual Basic     4.12     0.83
6     7   NaN      7   NaN     NaN         JavaScript     2.54     0.41
7     8   NaN      9   NaN  change                PHP     2.49     0.62
8     9   NaN     19   NaN  change                  R     2.37     1.33
9    10   NaN      8   NaN  change                SQL     1.76    -0.19
10   11   NaN     14   NaN  change                 Go     1.46     0.24
11   12   NaN     16   NaN  change              Swift     1.38     0.28
12   13   NaN     20   NaN  change               Perl     1.30     0.26
13   14   NaN     12   NaN  change  Assembly language     1.30    -0.08
14   15   NaN     15   NaN     NaN               Ruby     1.24     0.03
15   16   NaN     18   NaN  change             MATLAB     1.10     0.04
16   17   NaN     11   NaN  change             Groovy     0.99    -0.52
17   18   NaN     33   NaN  change               Rust     0.92     0.55
18   19   NaN     10   NaN  change        Objective-C     0.85    -0.99
19   20   NaN     24   NaN  change               Dart     0.77     0.13

Column types
---------------------------
Sep           int64
2020        float64
Sep.1         int64
2019        float64
Change       object
Language     object
Ratings     float64
Changep     float64
dtype: object
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Specifikace oddělovače sloupců</h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8
&nbsp;
<i>"""Reading TSV file that contains column with various values using custom separator."""</i>
&nbsp;
import pandas
&nbsp;
<i># separator/delimiter specification</i>
df = pandas.read_csv("tiobe.tsv", sep="\t")
&nbsp;
print("Data frame")
print("---------------------------")
print(df)
print()
&nbsp;
print("Column types")
print("---------------------------")
print(df.dtypes)
</pre>

<pre>
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
</pre>

<pre>
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
</pre>

<pre>
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
</pre>

<pre>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
</pre>

<pre>
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
</pre>

<pre>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
</pre>

<pre>
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
Python 3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>17</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>18</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
</table>

read_custom_data_format_1.py
read_custom_data_format_2.py
read_custom_data_format_3.py
read_custom_timestamps_1.py
read_custom_timestamps_2.py
read_custom_timestamps_3.py
read_data_from_internets_improper.py
read_data_from_internets_proper.py
read_integer_values.py
read_missing_integer_values_2.py
read_missing_integer_values.py
read_timestamps_with_parsing.py
read_timestamps_wo_parsing.py
read_tsv_default_behaviour.py
read_tsv_specify_separator.py
read_txt_no_widths.py
read_txt_specify_widths.py



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>

<p></p>

<ol>

<li>Validace dat s&nbsp;využitím knihovny spec v&nbsp; Clojure 1.9.0<br />
<a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/">https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/</a>
</li>

<li>Validace dat s&nbsp;využitím knihovny spec v&nbsp; Clojure 1.9.0 (dokončení)<br />
<a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0-dokonceni/">https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0-dokonceni/</a>
</li>

<li>Validace datových struktur v&nbsp;Pythonu pomocí knihoven Schemagic a Schema<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/</a>
</li>

<li>Validace datových struktur v&nbsp; Pythonu (2. část)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/</a>
</li>

<li>Validace datových struktur v&nbsp; Pythonu (dokončení)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Opulent-Pandas na PyPi<br />
<a href="https://pypi.org/project/opulent-pandas/">https://pypi.org/project/opulent-pandas/</a>
</li>

<li>pandas_validator na PyPi<br />
<a href="https://pypi.org/project/pandas_validator/">https://pypi.org/project/pandas_validator/</a>
</li>

<li>pandas-validator (dokumentace)<br />
<a href="https://pandas-validator.readthedocs.io/en/latest/">https://pandas-validator.readthedocs.io/en/latest/</a>
</li>

<li>7 Best Python Libraries for Validating Data<br />
<a href="https://www.yeahhub.com/7-best-python-libraries-validating-data/">https://www.yeahhub.com/7-best-python-libraries-validating-data/</a>
</li>

<li>Universally unique identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">https://en.wikipedia.org/wiki/Universally_unique_identifier</a>
</li>

<li>Nullable integer data type<br />
<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/integer_na.html">https://pandas.pydata.org/pandas-docs/stable/user_guide/integer_na.html</a>
</li>

<li>pandas.read_csv<br />
<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html</a>
</li>

<li>How to define format when using pandas to_datetime?<br />
<a href="https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime">https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime</a>
</li>

<li>Pandas : skip rows while reading csv file to a Dataframe using read_csv() in Python<br />
<a href="https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/">https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/</a>
</li>

<li>Skip rows during csv import pandas<br />
<a href="https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas">https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas</a>
</li>

<li>Denni kurz<br />
<a href="https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt">https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt</a>
</li>

<li>UUID objects according to RFC 4122 (knihovna pro Python)<br />
<a href="https://docs.python.org/3.5/library/uuid.html#uuid.uuid4">https://docs.python.org/3.5/library/uuid.html#uuid.uuid4</a>
</li>

<li>Object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Object_identifier">https://en.wikipedia.org/wiki/Object_identifier</a>
</li>

<li>Digital object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Digital_object_identifier">https://en.wikipedia.org/wiki/Digital_object_identifier</a>
</li>

<li>voluptuous na (na PyPi)<br />
<a href="https://pypi.python.org/pypi/voluptuous">https://pypi.python.org/pypi/voluptuous</a>
</li>

<li>Repositář knihovny voluptuous na GitHubu<br />
<a href="https://github.com/alecthomas/voluptuous">https://github.com/alecthomas/voluptuous</a>
</li>

<li>pytest-voluptuous 1.0.2 (na PyPi)<br />
<a href="https://pypi.org/project/pytest-voluptuous/">https://pypi.org/project/pytest-voluptuous/</a>
</li>

<li>pytest-voluptuous (na GitHubu)<br />
<a href="https://github.com/F-Secure/pytest-voluptuous">https://github.com/F-Secure/pytest-voluptuous</a>
</li>

<li>schemagic 0.9.1 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schemagic/0.9.1">https://pypi.python.org/pypi/schemagic/0.9.1</a>
</li>

<li>Schemagic / Schemagic.web (na GitHubu)<br />
<a href="https://github.com/Mechrophile/schemagic">https://github.com/Mechrophile/schemagic</a>
</li>

<li>schema 0.6.7 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schema">https://pypi.python.org/pypi/schema</a>
</li>

<li>schema (na GitHubu)<br />
<a href="https://github.com/keleshev/schema">https://github.com/keleshev/schema</a>
</li>

<li>XML Schema validator and data conversion library for Python<br />
<a href="https://github.com/brunato/xmlschema">https://github.com/brunato/xmlschema</a>
</li>

<li>xmlschema 0.9.7<br />
<a href="https://pypi.python.org/pypi/xmlschema/0.9.7">https://pypi.python.org/pypi/xmlschema/0.9.7</a>
</li>

<li>jsonschema 2.6.0<br />
<a href="https://pypi.python.org/pypi/jsonschema">https://pypi.python.org/pypi/jsonschema</a>
</li>

<li>warlock 1.3.0<br />
<a href="https://pypi.python.org/pypi/warlock">https://pypi.python.org/pypi/warlock</a>
</li>

<li>Python Virtual Environments – A Primer<br />
<a href="https://realpython.com/python-virtual-environments-a-primer/">https://realpython.com/python-virtual-environments-a-primer/</a>
</li>

<li>pip 1.1 documentation: Requirements files<br />
<a href="https://pip.readthedocs.io/en/1.1/requirements.html">https://pip.readthedocs.io/en/1.1/requirements.html</a>
</li>

<li>unittest.mock — mock object library<br />
<a href="https://docs.python.org/3.5/library/unittest.mock.html">https://docs.python.org/3.5/library/unittest.mock.html</a>
</li>

<li>mock 2.0.0<br />
<a href="https://pypi.python.org/pypi/mock">https://pypi.python.org/pypi/mock</a>
</li>

<li>An Introduction to Mocking in Python<br />
<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python</a>
</li>

<li>Unit testing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Unit_testing">https://en.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit testing<br />
<a href="https://cs.wikipedia.org/wiki/Unit_testing">https://cs.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>5 Differences between clojure.spec and Schema<br />
<a href="https://lispcast.com/clojure.spec-vs-schema/">https://lispcast.com/clojure.spec-vs-schema/</a>
</li>

<li>Schema: Clojure(Script) library for declarative data description and validation<br />
<a href="https://github.com/plumatic/schema">https://github.com/plumatic/schema</a>
</li>

<li>clojure.spec - Rationale and Overview<br />
<a href="https://clojure.org/about/spec">https://clojure.org/about/spec</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>
