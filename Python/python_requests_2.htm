<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Užitečné knihovny a moduly pro Python: další možnosti nabízené knihovnou Requests</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Užitečné knihovny a moduly pro Python: další možnosti nabízené knihovnou Requests</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části seriálu o nejpopulárnějších a nejužitečnějších knihovnách určených pro vývojáře používající programovací jazyk Python dokončíme popis možností nabízených knihovnou <strong>Requests</strong>. Zaměříme se především na poněkud složitější techniky &ndash; autorizaci, využití session atd. Uvidíme, že tato knihovna většinu těchto operací přímo podporuje, a to takovým způsobem, aby bylo její použití pro vývojáře přímočaré a jednoduché (v&nbsp;porovnání s&nbsp;některými dalšími knihovnami s&nbsp;podobným zaměřením)</p><!--more-->



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Užitečné knihovny a moduly pro Python: další možnosti nabízené knihovnou Requests</a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Užitečné knihovny a moduly pro Python: další možnosti nabízené knihovnou Requests</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import requests

# adresa s testovaci REST API sluzbou
URL = "https://httpbin.org/bytes/100"

# poslani HTTP dotazu typu GET
response = requests.get(URL, stream=True)

# precteni hlavicek
headers = response.headers

# vypis typu internetoveho media
print("Typ dat:", headers.get("content-type"))

# vypis delky dat predanych v tele
print("Delka dat:", headers.get("content-length"))

length = int(headers.get("content-length"))

# precteni tela bajt po bajtu
for i in range(length):
    byte = response.raw.read(1)
    print(hex(byte[0]))
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import requests

# adresa s testovaci REST API sluzbou
URL = "https://httpbin.org/image/png"

# poslani HTTP dotazu typu GET
response = requests.get(URL)

# precteni hlavicek
headers = response.headers

# vypis typu internetoveho media
print("Typ dat:", headers.get("content-type"))

# vypis delky dat predanych v tele
print("Delka dat:", headers.get("content-length"))

print(response.raw)

with open("test1.png", 'wb') as fout:
    for block in response.iter_content(chunk_size=128):
        fout.write(block)
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import requests

# adresa s testovaci REST API sluzbou
URL = "https://httpbin.org/image/jpeg"

# poslani HTTP dotazu typu GET
response = requests.get(URL)

# precteni hlavicek
headers = response.headers

# vypis typu internetoveho media
print("Typ dat:", headers.get("content-type"))

# vypis delky dat predanych v tele
print("Delka dat:", headers.get("content-length"))

print(response.raw)

with open("test1.jpg", 'wb') as fout:
    for block in response.iter_content(chunk_size=128):
        fout.write(block)
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import requests

# adresa s testovaci REST API sluzbou
URL = "https://httpbin.org/image"

# hlavicka posilana v dotazu
headers = {'accept': 'image/png'}

# poslani HTTP dotazu typu GET
response = requests.get(URL, headers=headers)

# precteni hlavicek
headers = response.headers

# vypis typu internetoveho media
print("Typ dat:", headers.get("content-type"))

# vypis delky dat predanych v tele
print("Delka dat:", headers.get("content-length"))

print(response.raw)

with open("test2.png", 'wb') as fout:
    for block in response.iter_content(chunk_size=128):
        fout.write(block)
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import requests

# adresa s testovaci REST API sluzbou
URL = "https://httpbin.org/image"

# hlavicka posilana v dotazu
headers = {'accept': 'image/jpeg'}

# poslani HTTP dotazu typu GET
response = requests.get(URL, headers=headers)

# precteni hlavicek
headers = response.headers

# vypis typu internetoveho media
print("Typ dat:", headers.get("content-type"))

# vypis delky dat predanych v tele
print("Delka dat:", headers.get("content-length"))

print(response.raw)

with open("test2.jpg", 'wb') as fout:
    for block in response.iter_content(chunk_size=128):
        fout.write(block)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import requests
import json

# adresa s testovaci REST API sluzbou
URL = "https://httpbin.org/patch"

# hlavicka posilana v dotazu
headers = {'accept': 'application/json'}

# poslani HTTP dotazu typu PATCH
response = requests.patch(URL, headers=headers)

# precteni hlavicek
headers = response.headers

# vypis vsech hlavicek
print("Headers:")

for header_name, header_value in headers.items():
    print("{:40s} {}".format(header_name, header_value))

print("-" * 60)

print("Content:")

# zpracovani odpovedi, ktera prisla ve formatu JSON
data = response.json()

print(json.dumps(data, indent=4, sort_keys=True))
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import requests
import json

# adresa s testovaci REST API sluzbou
URL = "https://httpbin.org/put"

# hlavicka posilana v dotazu
headers = {'accept': 'application/json'}

# poslani HTTP dotazu typu PUT
response = requests.put(URL, headers=headers)

# precteni hlavicek
headers = response.headers

# vypis vsech hlavicek
print("Headers:")

for header_name, header_value in headers.items():
    print("{:40s} {}".format(header_name, header_value))

print("-" * 60)

print("Content:")

# zpracovani odpovedi, ktera prisla ve formatu JSON
data = response.json()

print(json.dumps(data, indent=4, sort_keys=True))
</pre>


<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import requests
import json

# adresa s testovaci REST API sluzbou
URL = "https://httpbin.org/cookies"

# hlavicka posilana v dotazu
headers = {'accept': 'application/json'}

# priprava cookies
cookies = {'key1': 'value1',
           'key2': 'value2',
           'key3': 'value3'}

# poslani HTTP dotazu typu GET
response = requests.get(URL, headers=headers, cookies=cookies)

# precteni hlavicek
headers = response.headers

print("-" * 60)

# vypis vsech hlavicek
print("Headers:")

for header_name, header_value in headers.items():
    print("{:40s} {}".format(header_name, header_value))

print("-" * 60)

print("Content:")

# zpracovani odpovedi, ktera prisla ve formatu JSON
data = response.json()

print(json.dumps(data, indent=4, sort_keys=True))

print("-" * 60)

print("Cookies:")
print(response.cookies.get_dict())
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import requests
import json


def set_cookie(session, name, value):
    # adresa s testovaci REST API sluzbou
    URL = "https://httpbin.org/cookies/set/{name}/{value}".format(name=name, value=value)

    # hlavicka posilana v dotazu
    headers = {'accept': 'application/json'}

    # poslani HTTP dotazu typu GET
    return session.get(URL, headers=headers)


def delete_cookie(session, name):
    # adresa s testovaci REST API sluzbou
    URL = "https://httpbin.org/cookies/delete?{name}=".format(name=name)

    # hlavicka posilana v dotazu
    headers = {'accept': 'application/json'}

    # poslani HTTP dotazu typu GET
    return session.get(URL, headers=headers)


def print_response(response):
    # precteni hlavicek
    headers = response.headers

    print("-" * 60)

    # vypis hlavicek
    print("Headers:")

    for header_name, header_value in headers.items():
        print("{:40s} {}".format(header_name, header_value))

    print("-" * 60)

    print("Content:")

    # zpracovani odpovedi, ktera prisla ve formatu JSON
    data = response.text

    # zpracovani odpovedi, ktera prisla ve formatu JSON
    data = response.json()

    print(json.dumps(data, indent=4, sort_keys=True))

    print("-" * 60)


def print_session_cookies(session):
    cookies = session.cookies
    print("Session cookies:")

    for cookie_name, cookie_value in cookies.items():
        print("{:40s} {}".format(cookie_name, cookie_value))

    print("-" * 60)


session = requests.Session()

print("*** set cookie 'foo'=6 ***")
response = set_cookie(session, "foo", "6")
print_response(response)
print_session_cookies(session)
print()

print("*** set cookie 'bar'=7 ***")
response = set_cookie(session, "bar", "7")
print_response(response)
print_session_cookies(session)
print()

print("*** set cookie 'foo'=42 ***")
response = set_cookie(session, "foo", "42")
print_response(response)
print_session_cookies(session)
print()

print("*** delete cookie 'foo' ***")
response = delete_cookie(session, "foo")
print_response(response)
print_session_cookies(session)
print()

print("*** delete cookie 'baz' ***")
response = delete_cookie(session, "baz")
print_response(response)
print_session_cookies(session)
print()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
#!/usr/bin/python3
# vim: set fileencoding=utf-8

# Original (slightly buggy) code:
# see https://gist.github.com/bradmontgomery/2219997


import socket
from http.server import BaseHTTPRequestHandler, HTTPServer

hostName = ""
hostPort = 8000


class SimpleServer(BaseHTTPRequestHandler):

    def print_uri(self):
        print("URI: {uri}".format(uri=self.path))

    def send_headers(self):
        # priprava hlavicky odpovedi
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()

    def print_request_content(self):
        # precteni tela HTTP pozadavku
        print(self.headers)
        if "Content-Length" in self.headers:
            content_length = int(self.headers['Content-Length'])
            print("content length: {len}".format(len=content_length))

            content = self.rfile.read(content_length)
            print("content value:  {content}".format(content=content))

    def do_GET(self):
        self.print_uri()
        self.print_request_content()

        # odpoved serveru klientovi
        self.send_headers()
        self.wfile.write("*** get ***".encode("utf-8"))

    def do_POST(self):
        self.print_uri()
        self.print_request_content()

        # odpoved serveru klientovi
        self.send_headers()
        self.wfile.write("*** post ***".encode("utf-8"))


simpleServer = HTTPServer((hostName, hostPort), SimpleServer)

try:
    simpleServer.serve_forever()
except KeyboardInterrupt:
    pass

simpleServer.server_close()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro Python 3 a knihovnu Requests byly uloženy do Git repositáře dostupného na adrese <a href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a> (stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále velmi malý, dnes má doslova několik kilobajtů), můžete namísto toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>11_get_binary_data.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/requests/11_get_binary_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/requests/11_get_binary_data.py</a></td></tr>
<tr><td> 2</td><td>12_binary_data_png_image.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/requests/12_binary_data_png_image.py">https://github.com/tisnik/most-popular-python-libs/blob/master/requests/12_binary_data_png_image.py</a></td></tr>
<tr><td> 3</td><td>13_binary_data_jpeg_image.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/requests/13_binary_data_jpeg_image.py">https://github.com/tisnik/most-popular-python-libs/blob/master/requests/13_binary_data_jpeg_image.py</a></td></tr>
<tr><td> 4</td><td>14_binary_data_by_header_png.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/requests/14_binary_data_by_header_png.py">https://github.com/tisnik/most-popular-python-libs/blob/master/requests/14_binary_data_by_header_png.py</a></td></tr>
<tr><td> 5</td><td>15_binary_data_by_header_jpeg.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/requests/15_binary_data_by_header_jpeg.py">https://github.com/tisnik/most-popular-python-libs/blob/master/requests/15_binary_data_by_header_jpeg.py</a></td></tr>
<tr><td> 6</td><td>16_patch_method.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/requests/16_patch_method.py">https://github.com/tisnik/most-popular-python-libs/blob/master/requests/16_patch_method.py</a></td></tr>
<tr><td> 7</td><td>17_put_method.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/requests/17_put_method.py">https://github.com/tisnik/most-popular-python-libs/blob/master/requests/17_put_method.py</a></td></tr>
<tr><td> 8</td><td>18_cookies.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/requests/18_cookies.py">https://github.com/tisnik/most-popular-python-libs/blob/master/requests/18_cookies.py</a></td></tr>
<tr><td> 9</td><td>19_session_cookie.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/requests/19_session_cookie.py">https://github.com/tisnik/most-popular-python-libs/blob/master/requests/19_session_cookie.py</a></td></tr>
<tr><td>10</td><td>20_cookies_test_against_local_server.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/requests/20_cookies_test_against_local_server.py">https://github.com/tisnik/most-popular-python-libs/blob/master/requests/20_cookies_test_against_local_server.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>simple_server_2.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/requests/simple_server_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/requests/simple_server_2.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Requests: HTTP for Humans (dokumentace)<br />
<a href="http://docs.python-requests.org/en/master/">http://docs.python-requests.org/en/master/</a>
</li>

<li>Requests: Introduction<br />
<a href="http://docs.python-requests.org/en/latest/user/intro/">http://docs.python-requests.org/en/latest/user/intro/</a>
</li>

<li>Requests na GitHubu<br />
<a href="https://github.com/requests/requests">https://github.com/requests/requests</a>
</li>

<li>Requests (software) na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/Requests_%28software%29">https://en.wikipedia.org/wiki/Requests_%28software%29</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>20 Python libraries you can’t live without<br />
<a href="https://pythontips.com/2013/07/30/20-python-libraries-you-cant-live-without/">https://pythontips.com/2013/07/30/20-python-libraries-you-cant-live-without/</a>
</li>

<li>What are the top 10 most useful and influential Python libraries and frameworks?<br />
<a href="https://www.quora.com/What-are-the-top-10-most-useful-and-influential-Python-libraries-and-frameworks">https://www.quora.com/What-are-the-top-10-most-useful-and-influential-Python-libraries-and-frameworks</a>
</li>

<li>Python: useful modules<br />
<a href="https://wiki.python.org/moin/UsefulModules">https://wiki.python.org/moin/UsefulModules</a>
</li>

<li>Top 15 most popular Python libraries<br />
<a href="https://keyua.org/blog/most-popular-python-libraries/">https://keyua.org/blog/most-popular-python-libraries/</a>
</li>

<li>Hypertext Transfer Protocol<br />
<a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol</a>
</li>

<li>List of HTTP header fields<br />
<a href="https://en.wikipedia.org/wiki/List_of_HTTP_header_fields">https://en.wikipedia.org/wiki/List_of_HTTP_header_fields</a>
</li>

<li>List of HTTP status codes<br />
<a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">https://en.wikipedia.org/wiki/List_of_HTTP_status_codes</a>
</li>

<li>Python requests deep dive<br />
<a href="https://medium.com/@anthonypjshaw/python-requests-deep-dive-a0a5c5c1e093">https://medium.com/@anthonypjshaw/python-requests-deep-dive-a0a5c5c1e093</a>
</li>

<li>The awesome requests module<br />
<a href="https://www.pythonforbeginners.com/requests/the-awesome-requests-module">https://www.pythonforbeginners.com/requests/the-awesome-requests-module</a>
</li>

<li>Send HTTP Requests in Python<br />
<a href="https://code-maven.com/http-requests-in-python">https://code-maven.com/http-requests-in-python</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

<!--
2018-08-06: 1 hod
2018-08-07: 1 hod
publikace:  0 hod
-----------------
            2 hod
-->
