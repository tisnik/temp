<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Podpora funkcionálního programování v Pythonu a knihovna functools (2. část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Podpora funkcionálního programování v Pythonu a knihovna functools (2. část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Podpora funkcionálního programování v&nbsp;Pythonu a knihovna functools (2. část)</a></p>
<p><a href="#k02">2. Funkce jakožto plnohodnotný datový typ</a></p>
<p><a href="#k03">*** 3. Uzávěry v&nbsp;Pythonu</a></p>
<p><a href="#k04">4. Nelokální funkce a uzávěry (umělý příklad)</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Podpora funkcionálního programování v&nbsp;Pythonu a knihovna functools (2. část)</h2>

<p>Na <a
href="https://www.root.cz/clanky/podpora-funkcionalniho-programovani-v-pythonu-a-knihovna-functools/">úvodní
článek</a> o podpoře funkcionálního programování v&nbsp;jazyku Python dnes
navážeme. Již minule jsme se zmínili o existenci standardní knihovny nazvané <a
href="https://docs.python.org/3/library/functools.html">functools</a>, která
vývojářům nabízí některé funkcionální techniky. Konkrétně jsme se seznámili
s&nbsp;funkcí vyššího řádu <strong>reduce</strong>, která je zde definována
(což je ostatně zajímavé, protože její &bdquo;sesterské&ldquo; funkce
<strong>map</strong> a <strong>filter</strong> jsou umístěny ve výchozím
jmenném prostoru Pythonu a není je tedy nutné importovat &ndash; jednoduše se
dají přímo zavolat).</p>

<p>Dnes se seznámíme s&nbsp;dalšími funkcemi, které v&nbsp;balíčku
<strong>functools</strong> nalezneme. Ostatně přímo z&nbsp;interaktivního
shellu jazyka Python (tedy z&nbsp;<i>REPLu</i>) lze snadno získat jména
veřejných symbolů, které v&nbsp;tomto balíčku existují. Je to snadné (a pro
zajímavost zde použijeme generátorovou notaci):</p>

<pre>
import functools
&nbsp;
print("\n".join(name for name in dir(functools) if name[0]!="_"))
</pre>

<p>Výsledek by mohl vypadat následovně:</p>

<pre>
RLock
WRAPPER_ASSIGNMENTS
WRAPPER_UPDATES
cached_property
cmp_to_key
get_cache_token
lru_cache
namedtuple
partial
partialmethod
recursive_repr
reduce
singledispatch
singledispatchmethod
total_ordering
update_wrapper
wraps
</pre>

<p><div class="rs-tip-major">Poznámka: balíček <strong>functools</strong> se ve
skutečnosti neustále rozšiřuje, takže vypsaný seznam nemusí být na vašem
počítači naprosto stejný. Příklad nově přidaných symbolů:</div></p>

<table>
<tr><th>Symbol</th><th>Verze Pythonu</th></tr>
<tr><td>wraps, update_wrapper, partial</td><td>2.5</td></tr>
<tr><td>reduce</td><td>3.0</td></tr>
<tr><td>total_ordering, cmp_to_key</td><td>3.2</td></tr>
<tr><td>partialmethod, singledispatch</td><td>3.4</td></tr>
<tr><td>cached_property, singledispatchmethod</td><td>3.8</td></tr>
<tr><td>cache</td><td>3.9</td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Funkce jakožto plnohodnotný datový typ</h2>

<p>Již několikrát jsme si v&nbsp;předchozím článku řekli, že ve funkcionálních
programovacích jazycích jsou funkce plnohodnotnými datovými typy. Stejně je
tomu tak i v&nbsp;případě Pythonu. Ovšem co toto tvrzení znamená v&nbsp;praxi?
V&nbsp;případě Pythonu poměrně velké množství vlastností, které z&nbsp;tohoto
tvrzení přímo či nepřímo vycházejí. Pokusme se vyjmenovat alespoň ty
nejdůležitější vlastnosti:</p>

<ol>

<li>Funkce je možné mít přístupné přes globální symbol (v&nbsp;daném jmenném
prostoru). To je zcela jistě nejznámější způsob definice (pojmenovaných) funkcí
a v&nbsp;Pythonu pro tento účel existuje vyhrazené slovo <strong>def</strong>
(některé funkcionální jazyky ovšem speciální klíčové slovo nepotřebují).</li>

<li>Funkce je ovšem možné deklarovat i lokálně, tj.&nbsp;v&nbsp;nějakém bloku.
Viditelnost takové funkce se řídí stejnými pravidly, jako viditelnost jakékoli
jiné hodnoty.</li>

<li>Navíc je ovšem možné přistupovat k&nbsp;nelokální funkci (v&nbsp;Pythonu
pro přístup resp.&nbsp;modifikaci nelokálních symbolů existuje klíčové slovo
<strong>nonlocal</strong>), což se pravděpodobně nepoužívá (alespoň jsme to
nikde v&nbsp;praxi neviděl), ale sémantika Pythonu to umožňuje.</li>

<li>Funkce může být předána jako parametr jiné funkci. To již dobře známe,
protože jsme si popsali například funkce vyššího řádu <strong>map</strong>,
<strong>filter</strong> a <strong>reduce</strong>, které skutečně akceptují
jako svůj parametr jinou funkci.</li>

<li>Funkce může být vrácena jako návratová hodnota jiné funkce. To již opět
známe, protože jsme na toto téma měli několik demonstračních příkladů (výpočet
výsledku na základě zvoleného operátoru atd.).</li>

<li>Funkce může být uložena do atributu třídy. V&nbsp;OOP potom mluvíme o
metodách.</li>

<li>Funkce může být uložena do atributu objektu.</li>

<li>Funkce může být uložena do libovolného kontejneru (n-tice, seznam, množina,
slovník).</li>

</ol>

<p>Některé funkcionální jazyky navíc umožňují další, řekněme pokročilejší,
manipulace s&nbsp;funkcemi. Jedná se o formy transformace funkcí (což umožňují
zejména jazyky postavené na LISPu), dále o vytváření nových funkcí
s&nbsp;využitím jejich <i>kompozice</i>, obalení funkce nějakou formou
<i>cache</i> a v&nbsp;neposlední řadě některé programovací jazyky podporují
takzvaný <i>currying</i>, s&nbsp;jehož variantou pro Python se seznámíme
v&nbsp;navazujícím textu.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Uzávěry v&nbsp;Pythonu</h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. Nelokální funkce a uzávěry (umělý příklad)</h2>

<p>V&nbsp;předchozích dvou kapitolách jsme si vypsali několik vlastností
programovacího jazyka Python, které souvisí s&nbsp;funkcemi. Mnohé
z&nbsp;těchto vlastností si můžeme ukázat na zcela umělém demonstračním
příkladu, který je založen na použití uzávěrů (<i>closure</i>), lokálně
definovaných funkcí i na možnosti vrácení funkce z&nbsp;jiné funkce
s&nbsp;využitím návratové hodnoty (tedy tak, jak bychom to udělali
s&nbsp;jakoukoli jinou návratovou hodnotou). Nejdříve se podívejme na zdrojový
kód tohoto příkladu (opět připomínám &ndash; jedná se o zcela umělou
konstrukci, kterou s&nbsp;velkou pravděpodobností v&nbsp;takové podobě nikdy
nepoužijete):</p>

<pre>
def <strong>foo</strong>():
&nbsp;
   def <strong>bar</strong>():
       print("original BAR")
&nbsp;
   def <strong>other_bar</strong>():
       print("modified BAR")
&nbsp;
   def <strong>baz</strong>(modify):
       nonlocal bar
       if modify:
           bar = other_bar
       return bar
   return baz
&nbsp;
x = foo()
&nbsp;
print(x)
x(False)()
x(True)()
</pre>

<p>Povšimněte si, že hodnoty uložené do symbolů <strong>bar</strong>,
<strong>other_bar</strong> a <strong>baz</strong> nejsou zapomenuty při odchodu
z&nbsp;funkce <strong>foo</strong>, protože celé prostředí (<i>environment</i>)
může být použito později. Jedná se tedy o uzávěr, tedy o konstrukci, s&nbsp;níž
jsme se seznámili v&nbsp;předchozí kapitole.</p>

<p>Pojďme si nyní otestovat, co se stane po spuštění tohoto skriptu
v&nbsp;interpretru Pythonu:</p>

<pre>
&lt;function foo.&lt;locals&gt;.baz at 0x7f56cecf7950&gt;
original BAR
modified BAR
</pre>

<p>Jak je z&nbsp;předchozích tří vypsaných řádků patrné, došlo ke třem operacím:</p>

<ol>

<li>Zavoláním funkce <strong>foo</strong> se lokálně vytvořily tři funkce
<strong>bar</strong>, <strong>other_bar</strong> a <strong>baz</strong>. Došlo
k&nbsp;vrácení funkce <strong>baz</strong>.</li>

<li>Zavoláním funkce <strong>x(False)</strong> se ve skutečnosti zavolala
funkce <strong>baz</strong> a její návratovou hodnotou je lokální funkce
<strong>bar</strong>, která byla zavolána a vypsala &bdquo;original
BAR&ldquo;.</li>

<li>Zavoláním funkce <strong>x(True)</strong> se ve skutečnosti zavolala funkce
<strong>baz</strong>, která změnila nelokální hodnotu uloženou do
<strong>bar</strong> a její návratovou hodnotou je lokální funkce
<strong>other_bar</strong>, která byla zavolána a vypsala &bdquo;modified
BAR&ldquo;.</li>

</ol>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>


<pre>
from functools import reduce
&nbsp;
&nbsp;
def <strong>multiply</strong>(x, y):
    return x * y
&nbsp;
&nbsp;
x = range(1, 11)
print(x)
&nbsp;
y = reduce(multiply, x)
print(y)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p>Funkce <strong>partial</strong> sice může zpočátku vypadat poněkud komplikovaně, ovšem práce s&nbsp;ní je relativně přímočará. Abychom pochopili všechny vlastnosti <strong>partial</strong>, ukážeme si několik demonstračních příkladů, které vlastnosti <strong>partial</strong> ukazují v&nbsp;různých podobách.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty, které jsme si ukázali <a
href="https://www.root.cz/clanky/podpora-funkcionalniho-programovani-v-pythonu-a-knihovna-functools/">minule</a>
i dnes, naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je nutné mít
nainstalovánu některou z&nbsp;podporovaných verzí Pythonu 3, žádné další
balíčky nejsou zapotřebí):</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>binary_operator.py</td><td>ukázka funkce vyššího řádu, která jako parametr akceptuje jinou funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator.py</a></td></tr>
<tr><td> 2</td><td>get_operator_1.py</td><td>ukázka funkce vyššího řádu, která vrací jinou funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_1.py</a></td></tr>
<tr><td> 3</td><td>get_operator_2.py</td><td>ukázka funkce vyššího řádu, která vrací jinou funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_2.py</a></td></tr>
<tr><td> 4</td><td>standard_operators.py</td><td>použití standardních operátorů přepsaných do formy funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/standard_operators.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/standard_operators.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>binary_operator_types.py</td><td>varianta příkladu <strong>binary_operator.py</strong> s&nbsp;plnými typovými deklaracemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator_types.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator_types.py</a></td></tr>
<tr><td> 6</td><td>get_operator_types.py</td><td>varianta příkladu <strong>get_operator_2.py</strong> s&nbsp;plnými typovými deklaracemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_types.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_types.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>map_1.py</td><td>příklad použití funkce <strong>map</strong>: výpočet délky všech slov v&nbsp;textu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_1.py</a></td></tr>
<tr><td> 8</td><td>map_2.py</td><td>příklad použití funkce <strong>map</strong>: výpočet absolutní hodnoty všech členů posloupnosti</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_2.py</a></td></tr>
<tr><td> 9</td><td>map_3.py</td><td>příklad použití funkce <strong>map</strong>: aplikace vlastní pojmenované funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_3.py</a></td></tr>
<tr><td>10</td><td>map_4.py</td><td>příklad použití funkce <strong>map</strong>: aplikace vlastního lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>map_list_comprehension_1.py</td><td>přepis skriptu <strong>map_1.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_1.py</a></td></tr>
<tr><td>12</td><td>map_list_comprehension_2.py</td><td>přepis skriptu <strong>map_2.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_2.py</a></td></tr>
<tr><td>13</td><td>map_list_comprehension_3.py</td><td>přepis skriptu <strong>map_3.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_3.py</a></td></tr>
<tr><td>14</td><td>map_list_comprehension_4.py</td><td>přepis skriptu <strong>map_4.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>filter_1.py</td><td>filtrace dat na základě délky řetězce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_1.py</a></td></tr>
<tr><td>16</td><td>filter_2.py</td><td>filtrace numerických dat podle toho, zda se jedná o sudá či lichá čísla</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_2.py</a></td></tr>
<tr><td>17</td><td>filter_3.py</td><td>přepis předchozího příkladu s&nbsp;využitím lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>filter_list_comprehension_1.py</td><td>přepis skriptu <strong>filter_list_comprehension_1.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_1.py</a></td></tr>
<tr><td>19</td><td>filter_list_comprehension_2.py</td><td>přepis skriptu <strong>filter_list_comprehension_2.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_2.py</a></td></tr>
<tr><td>20</td><td>filter_list_comprehension_3.py</td><td>přepis skriptu <strong>filter_list_comprehension_3.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>reduce_1.py</td><td>výpočet faktoriálu s&nbsp;využitím funkce vyššího řádu <strong>reduce</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_1.py</a></td></tr>
<tr><td>22</td><td>reduce_2.py</td><td>přepis předchozího příkladu s&nbsp;využitím lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_2.py</a></td></tr>
<tr><td>23</td><td>reduce_3.py</td><td>tisk tabulky faktoriálů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_3.py</a></td></tr>
<tr><td>24</td><td>reduce_4.py</td><td>přepis předchozího příkladu s&nbsp;využitím lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_4.py</a></td></tr>
<tr><td>25</td><td>reduce_5.py</td><td>přepis předchozího příkladu s&nbsp;využitím generátorové notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/</a></td></tr>
<tr><td>27</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/</a></td></tr>
<tr><td>28</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/</a></td></tr>
<tr><td>29</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/</a></td></tr>
<tr><td>30</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>functools — Higher-order functions and operations on callable objects<br />
<a href="https://docs.python.org/3/library/functools.html">https://docs.python.org/3/library/functools.html</a>
</li>

<li>Functional Programming HOWTO<br />
<a href="https://docs.python.org/3/howto/functional.html">https://docs.python.org/3/howto/functional.html</a>
</li>

<li>Functional Programming in Python: When and How to Use It<br />
<a href="https://realpython.com/python-functional-programming/">https://realpython.com/python-functional-programming/</a>
</li>

<li>Functional Programming With Python<br />
<a href="https://realpython.com/learning-paths/functional-programming/">https://realpython.com/learning-paths/functional-programming/</a>
</li>

<li>Awesome Functional Python<br />
<a href="https://github.com/sfermigier/awesome-functional-python">https://github.com/sfermigier/awesome-functional-python</a>
</li>

<li>Currying<br />
<a href="https://en.wikipedia.org/wiki/Currying">https://en.wikipedia.org/wiki/Currying</a>
</li>

<li>Currying in Python &ndash; A Beginner’s Introduction<br />
<a href="https://www.askpython.com/python/examples/currying-in-python">https://www.askpython.com/python/examples/currying-in-python</a>
</li>

<li>Fundamental Concepts in Programming Languages<br />
<a href="https://en.wikipedia.org/wiki/Fundamental_Concepts_in_Programming_Languages">https://en.wikipedia.org/wiki/Fundamental_Concepts_in_Programming_Languages</a>
</li>

<li>When should I use function currying?<br />
<a href="https://stackoverflow.com/questions/24881604/when-should-i-use-function-currying">https://stackoverflow.com/questions/24881604/when-should-i-use-function-currying</a>
</li>

<li>Toolz<br />
<a href="https://github.com/pytoolz/toolz/tree/master">https://github.com/pytoolz/toolz/tree/master</a>
</li>

<li>Coconut: funkcionální jazyk s pattern matchingem kompatibilní s&nbsp;Pythonem<br />
<a href="https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/">https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/</a>
</li>

<li>A HITCHHIKER'S GUIDE TO functools<br />
<a href="https://ep2021.europython.eu/media/conference/slides/a-hitchhikers-guide-to-functools.pdf">https://ep2021.europython.eu/media/conference/slides/a-hitchhikers-guide-to-functools.pdf</a>
</li>

<li>Coconut aneb funkcionální nadstavba nad Pythonem (2.část)<br />
<a href="https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/">https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/</a>
</li>

<li>Knihovny pro zpracování posloupností (sekvencí) v&nbsp;Pythonu<br />
<a href="https://www.root.cz/clanky/knihovny-pro-zpracovani-posloupnosti-sekvenci-v-pythonu/">https://www.root.cz/clanky/knihovny-pro-zpracovani-posloupnosti-sekvenci-v-pythonu/</a>
</li>

<li>clj - repositář s knihovnou<br />
<a href="https://github.com/bfontaine/clj">https://github.com/bfontaine/clj</a>
</li>

<li>clj 0.1.0 &ndash; stránka na PyPi<br />
<a href="https://pypi.python.org/pypi/clj/0.1.0">https://pypi.python.org/pypi/clj/0.1.0</a>
</li>

<li>Coconut: Simple, elegant, Pythonic functional programming<br />
<a href="http://coconut-lang.org/">http://coconut-lang.org/</a>
</li>

<li>coconut (Python package index)<br />
<a href="https://pypi.python.org/pypi/coconut/">https://pypi.python.org/pypi/coconut/</a>
</li>

<li>Coconut Tutorial<br />
<a href="http://coconut.readthedocs.io/en/master/HELP.html">http://coconut.readthedocs.io/en/master/HELP.html</a>
</li>

<li>Coconut FAQ<br />
<a href="http://coconut.readthedocs.io/en/master/FAQ.html">http://coconut.readthedocs.io/en/master/FAQ.html</a>
</li>

<li>Coconut Documentation<br />
<a href="http://coconut.readthedocs.io/en/master/DOCS.html">http://coconut.readthedocs.io/en/master/DOCS.html</a>
</li>

<li>Coconut na Redditu<br />
<a href="https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/">https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/</a>
</li>

<li>Repositář na GitHubu<br />
<a href="https://github.com/evhub/coconut">https://github.com/evhub/coconut</a>
</li>

<li>Object-Oriented Programming — The Trillion Dollar Disaster<br />
<a href="https://betterprogramming.pub/object-oriented-programming-the-trillion-dollar-disaster-92a4b666c7c7">https://betterprogramming.pub/object-oriented-programming-the-trillion-dollar-disaster-92a4b666c7c7</a>
</li>

<li>Goodbye, Object Oriented Programming<br />
<a href="https://cscalfani.medium.com/goodbye-object-oriented-programming-a59cda4c0e53">https://cscalfani.medium.com/goodbye-object-oriented-programming-a59cda4c0e53</a>
</li>

<li>So You Want to be a Functional Programmer (Part 1)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536</a>
</li>

<li>So You Want to be a Functional Programmer (Part 2)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a</a>
</li>

<li>So You Want to be a Functional Programmer (Part 3)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7</a>
</li>

<li>So You Want to be a Functional Programmer (Part 4)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49</a>
</li>

<li>So You Want to be a Functional Programmer (Part 5)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a</a>
</li>

<li>So You Want to be a Functional Programmer (Part 6)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-6-db502830403">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-6-db502830403</a>
</li>

<li>Why Programmers Need Limits<br />
<a href="https://cscalfani.medium.com/why-programmers-need-limits-3d96e1a0a6db">https://cscalfani.medium.com/why-programmers-need-limits-3d96e1a0a6db</a>
</li>

<li>Infographic showing code complexity vs developer experience<br />
<a href="https://twitter.com/rossipedia/status/1580639227313676288">https://twitter.com/rossipedia/status/1580639227313676288</a>
</li>

<li>Python's reduce(): From Functional to Pythonic Style<br />
<a href="https://realpython.com/python-reduce-function/">https://realpython.com/python-reduce-function/</a>
</li>

<li>What is the problem with reduce()?<br />
<a href="https://stackoverflow.com/questions/181543/what-is-the-problem-with-reduce">https://stackoverflow.com/questions/181543/what-is-the-problem-with-reduce</a>
</li>

<li>The fate of reduce() in Python 3000<br />
<a href="https://www.artima.com/weblogs/viewpost.jsp?thread=98196">https://www.artima.com/weblogs/viewpost.jsp?thread=98196</a>
</li>

<li>Reading 16: Map, Filter, Reduce<br />
<a href="http://web.mit.edu/6.031/www/sp22/classes/16-map-filter-reduce/">http://web.mit.edu/6.031/www/sp22/classes/16-map-filter-reduce/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

