<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Je <i>Polars</i> skutečně plnohodnotnou alternativou ke knihovně <i>Pandas</i>?</a></p>
<p><a href="#k03">3. Instalace knihovny <i>Polars</i></a></p>
<p><a href="#k04">4. Instalace dalších podpůrných balíčků</a></p>
<p><a href="#k05">5. Základy práce s&nbsp;datovými řadami (<i>serie</i>)</a></p>
<p><a href="#k06">6. Odlišné datové typy prvků datových řad</a></p>
<p><a href="#k07">*** 7. Speciální způsoby uložení pravdivostních hodnot, řetězců a chybějících hodnot</a></p>
<p><a href="#k08">*** 8. Explicitní specifikace typů prvků</a></p>
<p><a href="#k09">*** 9. Výběr prvků s&nbsp;využitím indexu, indexů a řezů</a></p>
<p><a href="#k10">*** 10. Výběr prvků s&nbsp;využitím filtru (podmínky)</a></p>
<p><a href="#k11">11. Datové rámce</a></p>
<p><a href="#k12">12. Načtení datových rámců ze souborů typu CSV</a></p>
<p><a href="#k13">13. Práce s&nbsp;CSV soubory bez hlavičky</a></p>
<p><a href="#k14">14. Načtení datových rámců ze souborů typu TSV</a></p>
<p><a href="#k15">15. Získání metainformací o datovém rámci</a></p>
<p><a href="#k16">16. Načtení dat obsahujících časová razítka</a></p>
<p><a href="#k17">17. Načtení datových rámců z&nbsp;relační databáze</a></p>
<p><a href="#k18">18. Složitější dotaz s&nbsp;klauzulí <strong>WHERE</strong> popř.&nbsp;<strong>ORDER BY</strong></a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Je <i>Polars</i> skutečně plnohodnotnou alternativou ke knihovně <i>Pandas</i>?</h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace knihovny <i>Polars</i></h2>

<p>Knihovna <i>Polars</i> se skládá z&nbsp;několika zdrojových kódů napsaných
v&nbsp;Pythonu (rozhraní) a z&nbsp;jedné nativní knihovny, jejíž původní
zdrojové kódy jsou napsány v&nbsp;Rustu. Pro instalaci <i>Polars</i> však není
zapotřebí mít překladač Rustu nainstalován. Instalaci provedeme standardně
&ndash; nástrojem <strong>pip</strong> resp.&nbsp;<strong>pip3</strong>:</p>

<pre>
$ <strong>pip3 install --user polars</strong>
&nbsp;
Collecting polars
  Downloading polars-0.15.11-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (14.6 MB)
     |████████████████████████████████| 14.6 MB 508 kB/s
Collecting typing_extensions&gt;=4.0.0; python_version &lt; "3.10"
  Using cached typing_extensions-4.4.0-py3-none-any.whl (26 kB)
Installing collected packages: typing-extensions, polars
Successfully installed polars-0.15.11 typing-extensions-4.4.0
</pre>

<p>Po instalaci si zkontrolujeme, zda je balíček dostupný:</p>

<pre>
$ <strong>pip3 freeze | grep polars</strong>
polars==0.15.11
</pre>

<p>Popř:</p>

<pre>
$ <strong>python3</strong>
&nbsp;
Python 3.8.10 (default, Nov 14 2022, 12:59:47) 
[GCC 9.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; <strong>import polars</strong>
</pre>

<p>Pro zajímavost: interní struktura nainstalovaného balíčku vypadá
následovně:</p>

<pre>
.
├── internals
│   ├── dataframe
│   │   └── __pycache__
│   ├── expr
│   │   └── __pycache__
│   ├── lazyframe
│   │   └── __pycache__
│   ├── __pycache__
│   ├── series
│   │   └── __pycache__
│   └── sql
│       └── __pycache__
├── __pycache__
└── testing
    └── __pycache__
</pre>

<p>Nejdůležitější je přitom nativní knihovna <strong>polars.abi3.so</strong> o
velikosti přibližně 40MB, v&nbsp;níž je realizována naprostá většina
funkcionality Polars:</p>

<pre>
$ <strong>ls -l polars.abi3.so</strong>
-rwxrwxr-x 1 ptisnovs ptisnovs 44313016 Jan  4 11:29 polars.abi3.so
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace dalších podpůrných balíčků</h2>

<p>Pro některé operace, například pro načítání datových rámců přímo
z&nbsp;databází, je nutné mít nainstalovány i další podpůrné balíčky. Jedním
z&nbsp;těchto balíčků je balíček nazvaný <a
href="https://pypi.org/project/connectorx/">connectorx</a>, jenž se nainstaluje
snadno:</p>

<pre>
$ <strong>pip3 install --user connectorx&gt;=0.3.1</strong>
&nbsp;
Collecting connectorx
  Downloading connectorx-0.3.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (46.6 MB)
Installing collected packages: connectorx
Successfully installed connectorx-0.3.1
</pre>

<p>Dále je mnohdy zapotřebí nainstalovat i balíček <a
href="https://pypi.org/project/pyarrow/">pyarrow</a> (o jehož významu se
zmíníme příště):</p>

<pre>
$ <strong>pip3 install --user pyarrow</strong>
&nbsp;
Collecting pyarrow
  Downloading pyarrow-10.0.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (36.0 MB)
     |████████████████████████████████| 36.0 MB 3.4 MB/s
Collecting numpy&gt;=1.16.6
  Downloading numpy-1.24.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.3 MB)
     |████████████████████████████████| 17.3 MB 11.2 MB/s
Installing collected packages: numpy, pyarrow
Successfully installed numpy-1.24.1 pyarrow-10.0.1
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se jako závislost
nainstaloval i slavný balíček <a
href="https://pypi.org/project/numpy/">NumPy</a>:</div></p>

<p>V&nbsp;případě, že nebudou tyto tři balíčky nainstalovány, nebude možné
spustit dnešní dva poslední příklady, které načítají data z&nbsp;relační
databáze. Uvidíte přitom zhruba následující chybové hlášení:</p>

<pre>
  File "data_frame_09_load_sql.py", line 11, in &lt;module&gt;
    df = polars.read_sql(query, connection_string)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/polars/io.py", line 1099, in read_sql
    raise ImportError(
ImportError: connectorx is not installed. Please run `pip install connectorx&gt;=0.3.1`.
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Základy práce s&nbsp;datovými řadami (<i>serie</i>)</h2>

<p>Základním stavebním kamenem knihovny <i>Polars</i> je datový typ
<strong>Series</strong> (datová řada), který zapouzdřuje jednodimenzionální
pole (nikoli seznam) s&nbsp;přidanými metainformacemi. Datová řada představuje
uspořádaný sloupec údajů, které mají shodný typ (například
<strong>polars.Int8</strong> nebo <strong>polars.Float64</strong> atd.),
přičemž každému prvku je přiřazen jednoznačný <i>index</i>. V&nbsp;konkurenční
knihovně <i>Pandas</i> se v&nbsp;případě indexu nemusí jednat o celé číslo,
protože indexem mohou být i řetězce atd.  &ndash; což je velmi užitečné, ovšem
ne příliš rychlé a paměťově efektivní řešení. Z&nbsp;tohoto důvodu se
v&nbsp;současné verzi knihovny <i>Polars</i> používají jako indexy pouze celá
čísla začínající nulou a tvořící ucelenou aritmetickou posloupnost.</p>

<p>Instance třídy <strong>Series</strong> mají několik užitečných atributů:</p>

<table>
<tr><th>#</th><th>Atribut</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>name</td><td>jméno řady (pokud je specifikováno)</td></tr>
<tr><td>2</td><td>dtype</td><td>typ prvků uložených v&nbsp;datové řadě</td></tr>
<tr><td>3</td><td>flags</td><td>informace, zda jsou prvky seřazeny či nikoli</td></tr>
<tr><td>4</td><td>shape</td><td>n-tice obsahující informaci o <i>tvaru</i> datové řady (obsahuje jedinou hodnotu s&nbsp;počtem prvků)</td></tr>
</table>

<p>Dále instance této třídy podporují několik desítek metod; s&nbsp;některými
z&nbsp;nich se podrobněji seznámíme v&nbsp;dalším textu.</p>

<p>Nejprve si ukážeme, jakým způsobem se datové řady vytváří. Nejjednodušší je
situace ve chvíli, kdy jsou hodnoty, které se mají převést na datovou řadu,
připraveny ve formě seznamů nebo n-tic (ve smyslu základních datových typů
programovacího jazyka Python). Z&nbsp;takto připravených hodnot se datová řada
připraví přímočaře, a to konstruktorem <strong>polars.Series</strong>. Začneme
využitím seznamu, který v&nbsp;našem konkrétním případě obsahuje sekvenci
celých čísel, tedy prvků shodného datového typu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import <strong>polars</strong>
&nbsp;
<i># vytvoření datové řady</i>
s = <strong>polars.Series("sloupec", [1, 2, 3, 4])</strong>
&nbsp;
<i># zobrazíme datovou řadu</i>
print(s)
print()
&nbsp;
<i># podrobnější informace o datové řadě</i>
print("Column type")
print(s.dtype)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_01_from_list.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_01_from_list.py</a>.</div></p>

<p>Výsledná datová řada i základní informace o ní se zobrazí v&nbsp;tomto
formátu:</p>

<pre>
shape: (4,)
Series: 'sloupec' [i64]
[
        1
        2
        3
        4
]
&nbsp;
Column type
Int64
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že Polars použil pro
uložení prvků datový typ <strong>polars.Int64</strong>. Tento typ (a tím pádem
i objem obsazené paměti atd. lze měnit jak při konstrukci datové řady, tak i
později její transformací.</div></p>

<p>Ve druhém demonstračním příkladu předáváme konstruktoru n-tici, proto se
používá dvojice kulatých závorek:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import <strong>polars</strong>
&nbsp;
<i># vytvoření datové řady</i>
s = <strong>polars.Series("sloupec", (1, 2, 3, 4))</strong>
&nbsp;
<i># zobrazíme datovou řadu</i>
print(s)
print()
&nbsp;
<i># podrobnější informace o datové řadě</i>
print("Column type")
print(s.dtype)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_02_from_tuple.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_02_from_tuple.py</a>.</div></p>

<p>Výsledek by měl být totožný s&nbsp;prvním demonstračním příkladem:</p>

<pre>
shape: (4,)
Series: 'sloupec' [i64]
[
        1
        2
        3
        4
]
&nbsp;
Column type
Int64
</pre>

<p>Pro konstrukci datové řady je však v&nbsp;případě potřeby možné použít i
standardní generátor <strong>range</strong> popř.&nbsp;podobné funkce
z&nbsp;knihovny Numpy:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import <strong>polars</strong>
&nbsp;
<i># vytvoření datové řady</i>
s = <strong>polars.Series("sloupec", range(10))</strong>
&nbsp;
<i># zobrazíme datovou řadu</i>
print(s)
print()
&nbsp;
<i># podrobnější informace o datové řadě</i>
print("Column type")
print(s.dtype)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_03_from_range.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_03_from_range.py</a>.</div></p>

<p>Opět se podívejme na výslednou datovou řadu, která by nyní měla obsahovat
deset prvků:</p>

<pre>
Series: 'sloupec' [i64]
[
        0
        1
        2
        3
        4
        5
        6
        7
        8
        9
]
&nbsp;
Column type
Int64
</pre>

<p>Nic nám ovšem nebrání ani ve využití &bdquo;generátorů řad&ldquo;
poskytovaných knihovnou Numpy:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
<strong>import numpy as np</strong>
&nbsp;
<i># vytvoření datové řady</i>
s = polars.Series("sloupec", <strong>np.arange(10, 11, 0.1)</strong>)
&nbsp;
<i># zobrazíme datovou řadu</i>
print(s)
print()
&nbsp;
<i># podrobnější informace o datové řadě</i>
print("Column type")
print(s.dtype)
print()
</pre>

<p>Výsledek:</p>

<pre>
shape: (10,)
Series: 'sloupec' [f64]
[
        10.0
        10.1
        10.2
        10.3
        10.4
        10.5
        10.6
        10.7
        10.8
        10.9
]
&nbsp;
Column type
Float64
</pre>

<p>Využití generátoru <strong>linspace</strong> je stejně snadné:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
<strong>import numpy as np</strong>
&nbsp;
<i># vytvoření datové řady</i>
s = polars.Series("sloupec", <strong>np.linspace(10, 11, 10)</strong>)
&nbsp;
<i># zobrazíme datovou řadu</i>
print(s)
print()
&nbsp;
<i># podrobnější informace o datové řadě</i>
print("Column type")
print(s.dtype)
print()
</pre>

<p>Výsledek:</p>

<pre>
shape: (10,)
Series: 'sloupec' [f64]
[
        10.0
        10.111111
        10.222222
        10.333333
        10.444444
        10.555556
        10.666667
        10.777778
        10.888889
        11.0
]
&nbsp;
Column type
Float64
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Odlišné datové typy prvků datových řad</h2>

<p>V&nbsp;dalším demonstračním příkladu se pokoušíme vytvořit datovou řadu na
základě obsahu seznamu, který obsahuje jak celá čísla, tak i hodnoty
s&nbsp;plovoucí řádovou čárkou. Knihovna <i>Polars</i> by měla správně odvodit,
že prvky datové řady budou typu <strong>polars.Float64</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># vytvoření datové řady</i>
s = polars.Series("sloupec", <strong>[1.2, 2, 3, 4.5]</strong>)
&nbsp;
<i># zobrazíme datovou řadu</i>
print(s)
print()
&nbsp;
<i># podrobnější informace o datové řadě</i>
print("Column type")
print(s.dtype)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_04_from_other_type.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_04_from_other_type.py</a>.</div></p>

<p>Z&nbsp;vypsaných výsledků je patrné, že se skutečně odvodil datový typ
<strong>polars.Float64</strong> (v&nbsp;hranaté závorce se přitom používá jméno
typu <strong>f64</strong> z&nbsp;Rustu, což na jednu stranu není příliš
konzistentní, ale ke zmatkům by nemělo v&nbsp;praxi dojít):</p>

<pre>
shape: (4,)
Series: 'sloupec' [f64]
[
        1.2
        2.0
        3.0
        4.5
]
&nbsp;
Column type
Float64
</pre>

<p>V&nbsp;následující tabulce jsou vypsány všechny datové typy, s&nbsp;nimiž je
možné v&nbsp;datových řadách i v&nbsp;datových rámcích pracovat. S&nbsp;těmito
typy se postupně seznámíme v&nbsp;dalším textu:</p>

<table>
<tr><th>Datový typ</th><th>Stručný popis</th></tr>
<tr><td>Int8</td><td>osmibitové celé číslo se znaménkem</td></tr>
<tr><td>Int16</td><td>šestnáctibitové celé číslo se znaménkem</td></tr>
<tr><td>Int32</td><td>32bitové celé číslo se znaménkem</td></tr>
<tr><td>Int64</td><td>64bitové celé číslo se znaménkem</td></tr>
<tr><td>UInt8</td><td>osmibitové celé číslo bez znaménka</td></tr>
<tr><td>UInt16</td><td>šestnáctibitové celé číslo bez znaménka</td></tr>
<tr><td>UInt32</td><td>32bitové celé číslo bez znaménka</td></tr>
<tr><td>UInt64</td><td>64bitové celé číslo bez znaménka</td></tr>
<tr><td>Float32</td><td>32bitové číslo s&nbsp;plovoucí řádovou čárkou (<i>single, float</i>)</td></tr>
<tr><td>Float64</td><td>64bitové číslo s&nbsp;plovoucí řádovou čárkou (<i>double</i>)</td></tr>
<tr><td>Boolean</td><td>pravdivostní hodnoty uložené v&nbsp;úsporném formátu</td></tr>
<tr><td>Utf8</td><td>úsporně uložené řetězce</td></tr>
<tr><td>Binary</td><td>sekvence bajtů</td></tr>
<tr><td>List</td><td>seznamy, opět uložené úsporným způsobem</td></tr>
<tr><td>Struct</td><td>datové struktury</td></tr>
<tr><td>Object</td><td>atributy objektů</td></tr>
<tr><td>Date</td><td>datum</td></tr>
<tr><td>Time</td><td>čas v&nbsp;rámci jednoho dne reprezentovaný v&nbsp;nanosekundách</td></tr>
<tr><td>Datetime</td><td>časové razítko</td></tr>
<tr><td>Duration</td><td>časový úsek reprezentovaný v&nbsp;mikrosekundách</td></tr>
</table>



<p><a name="k07"></a></p>
<h2 id="k07">7. Speciální způsoby uložení pravdivostních hodnot, řetězců a chybějících hodnot</h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># vytvoření datové řady</i>
s = polars.Series("sloupec", ("foo", "bar", "baz"))
&nbsp;
<i># zobrazíme datovou řadu</i>
print(s)
print()
&nbsp;
<i># podrobnější informace o datové řadě</i>
print("Column type")
print(s.dtype)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_05_strings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_05_strings.py</a>.</div></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># vytvoření datové řady</i>
s = polars.Series("sloupec", (True, False, True))
&nbsp;
<i># zobrazíme datovou řadu</i>
print(s)
print()
&nbsp;
<i># podrobnější informace o datové řadě</i>
print("Column type")
print(s.dtype)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního příkladu získáte na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_06_booleans.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_06_booleans.py</a>.</div></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># vytvoření datové řady</i>
s = polars.Series("sloupec", [1, 2, None, 3, 4])
&nbsp;
<i># zobrazíme datovou řadu</i>
print(s)
print()
&nbsp;
<i># podrobnější informace o datové řadě</i>
print("Column type")
print(s.dtype)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního příkladu získáte na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_07_null_value.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_07_null_value.py</a>.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Explicitní specifikace typů prvků</h2>

<p>Při načítání resp.&nbsp;konstrukci datové řady je možné explicitně
specifikovat, jakého typu mají být prvky v&nbsp;řadě uložené. Knihovna
<i>Polars</i> se v&nbsp;takovém případě pokusí o provedení datových konverzí
tak, aby požadavek splnila. Příkladem může být konverze všech celočíselných
hodnot na typ <strong>Int8</strong>, tedy na celá čísla uložená v&nbsp;jediném
bajtu (se znaménkem):</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># vytvoření datové řady</i>
s = polars.Series("sloupec", [1, 2, 3, 4], <strong>polars.Int8</strong>)
&nbsp;
<i># zobrazíme datovou řadu</i>
print(s)
print()
&nbsp;
<i># podrobnější informace o datové řadě</i>
print("Column type")
print(s.dtype)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_08_type_specification.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_08_type_specification.py</a>.</div></p>

<p>Výsledný datový rámec obsahuje i informace o typu prvků:</p>

<p><a name="k09"></a></p>
<h2 id="k09">9. Výběr prvků s&nbsp;využitím indexu, indexů a řezů</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

import polars

<i># vytvoření datové řady</i>
s = polars.Series("sloupec", range(1, 11))

<i># zobrazíme datovou řadu</i>
print(s)
print()

<i># podrobnější informace o datové řadě</i>
print("Column type")
print(s.dtype)
print()

<i># výběr prvků</i>
print(s[1])
print(s[2, 4, 6])
print(s[2:6])
print(s[1:8:2])
print(s[::2])
print(s[11:0:-1])
print(s[11::-1])
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního příkladu získáte na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_09_select.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_09_select.py</a>.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Výběr prvků s&nbsp;využitím filtru (podmínky)</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

import polars

<i># vytvoření datové řady</i>
s = polars.Series("sloupec", range(1, 11))

<i># zobrazíme datovou řadu</i>
print(s)
print()

<i># podrobnější informace o datové řadě</i>
print("Column type")
print(s.dtype)
print()

<i># výběr prvků na základě filtru</i>
print(s[s > 5])
print(s[s < 5])
print(s[s != 5])
print(s[s %2 == 1])
print(s[s %2 != 1])
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního příkladu získáte na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_10_filter.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_10_filter.py</a>.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Datové rámce</h2>

<p>Složením několika datových řad o stejném počtu prvků vznikne velmi důležitá
datová struktura nazvaná <i>datový rámec</i> (<i>data frame</i>). Datové rámce
se v&nbsp;určitém ohledu podobají tabulkám používaným v&nbsp;relačních
databázích: jednotlivé sloupce jsou pojmenované a současně může být každý
sloupec jiného datového typu (všechny prvky ve sloupci toto kritérium musí
splňovat, což ovšem vede k&nbsp;určitým problémům, o nichž si řekneme
v&nbsp;navazujících kapitolách a zejména pak v&nbsp;navazujícím článku). Tato
vlastnost odlišuje datové rámce od dvourozměrných polí masivně využívaných
například v&nbsp;knihovně <i>Numpy</i>; na druhou stranu je ovšem možné
s&nbsp;jednotlivými sloupci datového rámce pracovat jako s&nbsp;jednorozměrným
polem kompatibilním právě s&nbsp;knihovnou <i>Numpy</i> a jejími datovými
typy.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;knihovně <i>Polars</i> je každý
záznam (řádek) v&nbsp;datovém rámci jednoznačně identifikován svým
<i>indexem</i>, což je celé číslo (řada začíná od nuly). Tím se <i>Polars</i>
odlišuje od knihovny <i>Pandas</i>, ve které mohou být indexy tvořeny například
řetězci apod.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Načtení datových rámců ze souborů typu CSV</h2>

<p><i>CSV</i> neboli <i>Comma-Separated Values</i> [<a
href="https://en.wikipedia.org/wiki/Comma-separated_values">1</a>] je jedním
z&nbsp;nejčastěji používaných souborových formátů v&nbsp;této oblasti, a to
přesto, že je export a import CSV v&nbsp;některých případech problematický
(například některé české mutace Excelu namísto čárek používají středníky,
problémy nastávají s&nbsp;buňkami obsahujícími znaky pro konec řádku atd.).
Tyto soubory jsou mnohdy obrovské a i z&nbsp;tohoto důvodu se začínají
v&nbsp;některých oblastech nahrazovat například za Parquet soubory atd. I
přesto se ale s&nbsp;CSV setkáme, a to poměrně často. Příkladem může být export
dat z&nbsp;Promethea, z&nbsp;některých systémů pro strukturované logy atd.</p>

<p>Jeden z&nbsp;nejjednodušších příkladů používajících knihovnu <i>Polars</i>
bude načítat soubor CSV (<i>Comma-Separated Values</i>), jehož obsah lze najít
na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/hall_of_fame.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/hall_of_fame.csv</a>.
V&nbsp;tomto souboru je uložena tabulka se dvěma sloupci získaná z&nbsp;<a
href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a>,
přičemž soubor má i řádek s&nbsp;hlavičkou (ta ovšem někdy může chybět, jak
ostatně uvidíme dále):</p>

<pre>
Year,Winner
2022,C++
2021,Python
2020,Python
2019,C
2018,Python
2017,C
2016,Go
2015,Java
2014,JavaScript
2013,Transact-SQL
2012,Objective-C
2011,Objective-C
2010,Python
2009,Go
2008,C
2007,Python
2006,Ruby
2005,Java
2004,PHP
2003,C++
</pre>

<p>V&nbsp;demonstračním příkladu provedeme načtení souboru s&nbsp;využitím
funkce nazvané <strong>polars.read_csv</strong>, které prozatím předáme jediný
parametr obsahující název souboru. Vytvořený datový rámec zobrazíme funkcí
<strong>print</strong> a navíc si necháme vypsat i datové typy přiřazené
jednotlivým sloupcům:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import <strong>polars</strong>
&nbsp;
<i># přečtení zdrojových dat</i>
df = <strong>polars.read_csv</strong>("hall_of_fame.csv")
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
print()
&nbsp;
<i># podrobnější informace o datovém rámci</i>
print("Column types")
print(df.dtypes)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_01_load_csv.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_01_load_csv.py</a>.</div></p>

<p>Výsledek získaný po spuštění tohoto demonstračního příkladu by měl vypadat
následovně:</p>

<pre>
shape: (20, 2)
┌──────┬────────┐
│ Year ┆ Winner │
│ ---  ┆ ---    │
│ i64  ┆ str    │
╞══════╪════════╡
│ 2022 ┆ C++    │
│ 2021 ┆ Python │
│ 2020 ┆ Python │
│ 2019 ┆ C      │
│ ...  ┆ ...    │
│ 2006 ┆ Ruby   │
│ 2005 ┆ Java   │
│ 2004 ┆ PHP    │
│ 2003 ┆ C++    │
└──────┴────────┘
&nbsp;
Column types
[Int64, Utf8]
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že Polars správně odvodil
typy dat uložených v&nbsp;jednotlivých sloupcích. Jak uvidíme dále, je možné i
tyto typy specifikovat v&nbsp;průběhu inicializace datového rámce.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Práce s&nbsp;CSV soubory bez hlavičky</h2>

<p>Pokusme se nyní o načtení CSV souboru, který na prvním řádku neobsahuje
hlavičku, resp.&nbsp;přesněji řečeno názvy sloupců. I s&nbsp;takovými soubory
se můžeme v&nbsp;praxi setkat:</p>

<pre>
2022,C++
2021,Python
2020,Python
2019,C
2018,Python
2017,C
2016,Go
2015,Java
2014,JavaScript
2013,Transact-SQL
2012,Objective-C
2011,Objective-C
2010,Python
2009,Go
2008,C
2007,Python
2006,Ruby
2005,Java
2004,PHP
2003,C++
</pre>

<p>Načtení obsahu tohoto datového souboru provedeme skriptem, který se vlastně
nijak zásadně (pochopitelně až na odlišné jméno vstupního souboru) neliší od
skriptu popsaného v&nbsp;předchozí kapitole:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import <strong>polars</strong>
&nbsp;
<i># přečtení zdrojových dat</i>
df = <strong>polars.read_csv</strong>("hall_of_fame_no_header.csv")
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
print()
&nbsp;
<i># podrobnější informace o datovém rámci</i>
print("Column types")
print(df.dtypes)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_02_load_csv_no_header_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_02_load_csv_no_header_A.py</a>.</div></p>

<p>Výsledek ovšem v&nbsp;tomto případě nebude korektní, protože se data uložená
v&nbsp;prvním řádku použila pro získání jmen sloupců:</p>

<pre>
shape: (19, 2)
┌──────┬────────┐
│ 2022 ┆ C++    │
│ ---  ┆ ---    │
│ i64  ┆ str    │
╞══════╪════════╡
│ 2021 ┆ Python │
│ 2020 ┆ Python │
│ 2019 ┆ C      │
│ 2018 ┆ Python │
│ ...  ┆ ...    │
│ 2006 ┆ Ruby   │
│ 2005 ┆ Java   │
│ 2004 ┆ PHP    │
│ 2003 ┆ C++    │
└──────┴────────┘
&nbsp;
Column types
[Int64, Utf8]
</pre>

<p>Úprava nebo přesněji řečeno oprava tohoto skriptu je ve skutečnosti snadná
&ndash; postačuje funkci <strong>read_csv</strong> předat nepovinný parametr
<strong>has_header</strong> nastavený na hodnotu <strong>False</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame_no_header.csv", <strong>has_header=False</strong>)
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
print()
&nbsp;
<i># podrobnější informace o datovém rámci</i>
print("Column types")
print(df.dtypes)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_03_load_csv_no_header_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_03_load_csv_no_header_B.py</a>.</div></p>

<p>Výsledek je nyní korektní, i když jména sloupců musela být doplněna
automaticky:</p>

<pre>
shape: (20, 2)
┌──────────┬──────────┐
│ column_1 ┆ column_2 │
│ ---      ┆ ---      │
│ i64      ┆ str      │
╞══════════╪══════════╡
│ 2022     ┆ C++      │
│ 2021     ┆ Python   │
│ 2020     ┆ Python   │
│ 2019     ┆ C        │
│ ...      ┆ ...      │
│ 2006     ┆ Ruby     │
│ 2005     ┆ Java     │
│ 2004     ┆ PHP      │
│ 2003     ┆ C++      │
└──────────┴──────────┘
&nbsp;
Column types
[Int64, Utf8]
</pre>

<p>Chybějící jména sloupců můžeme doplnit nepovinným parametrem
<strong>new_columns</strong> (viz zvýrazněný kód):</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame_no_header.csv", has_header=False, <strong>new_columns=["Rok", "Vítěz"]</strong>)
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
print()
&nbsp;
<i># podrobnější informace o datovém rámci</i>
print("Column types")
print(df.dtypes)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_04_load_csv_no_header_C.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_04_load_csv_no_header_C.py</a>.</div></p>

<p>Výsledek bude nyní vypadat odlišně &ndash; samotná data v&nbsp;datovém rámci
jsou sice stejná, ovšem názvy sloupců se budou lišit:</p>

<pre>
shape: (20, 2)
┌──────┬────────┐
│ Rok  ┆ Vítěz  │
│ ---  ┆ ---    │
│ i64  ┆ str    │
╞══════╪════════╡
│ 2022 ┆ C++    │
│ 2021 ┆ Python │
│ 2020 ┆ Python │
│ 2019 ┆ C      │
│ ...  ┆ ...    │
│ 2006 ┆ Ruby   │
│ 2005 ┆ Java   │
│ 2004 ┆ PHP    │
│ 2003 ┆ C++    │
└──────┴────────┘
&nbsp;
Column types
[Int64, Utf8]
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Načtení datových rámců ze souborů typu TSV</h2>

<p>V&nbsp;dalším kroku se pokusíme načíst soubor <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/hall_of_fame.tsv">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/hall_of_fame.tsv</a>.
<i>TSV</i> neboli <i>Tab-Separated Values</i> [<a
href="https://en.wikipedia.org/wiki/Tab-separated_values">2</a>] [<a
href="http://jkorpela.fi/TSV.html">3</a>] je velmi podobným formátem jako CSV,
ovšem s&nbsp;tím rozdílem, že oddělovačem jednotlivých buněk je znak tabulátoru
(tím současně odpadají mnohé problémy CSV zmíněné výše). Podobně jako
v&nbsp;případě CSV i zde možnost ukládat na první řádek souboru hlavičku:</p>

<pre>
Year    Winner
2022    C++
2021    Python
2020    Python
2019    C
2018    Python
2017    C
2016    Go
2015    Java
2014    JavaScript
2013    Transact-SQL
2012    Objective-C
2011    Objective-C
2010    Python
2009    Go
2008    C
2007    Python
2006    Ruby
2005    Java
2004    PHP
2003    C++
</pre>

<p>Podobně jako v&nbsp;knihovně <i>Pandas</i> není ani v&nbsp;knihovně
<i>Polars</i> při běžném použití importní funkce
<strong>polars.read_csv</strong> tento formát správně rozpoznán, o čemž se
můžeme velmi snadno přesvědčit spuštěním následujícího skriptu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = <strong>polars.read_csv("hall_of_fame.tsv")</strong>
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
print()
&nbsp;
<i># podrobnější informace o datovém rámci</i>
print("Column types")
print(df.dtypes)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_05_load_tsv_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_05_load_tsv_A.py</a>.</div></p>

<p>Výsledkem činnosti tohoto skriptu bude datový rámec obsahující pouze jediný
sloupec. Navíc znaky \t, které nejsou dále zpracovány, &bdquo;rozhodí&ldquo;
interní formátování datových rámců na terminálu:</p>

<pre>
shape: (20, 1)
┌────────────┐
│ Year  Winner │
│ ---        │
│ str        │
╞════════════╡
│ 2022  C++    │
│ 2021  Python │
│ 2020  Python │
│ 2019  C      │
│ ...        │
│ 2006  Ruby   │
│ 2005  Java   │
│ 2004  PHP    │
│ 2003  C++    │
└────────────┘
&nbsp;
Column types
[Utf8]
</pre>

<p>Soubory založené na formátu <i>TSV</i> lze načíst tak, že nepovinným
(pojmenovaným) parametrem <strong>sep</strong> specifikujeme oddělovač mezi
záznamy (což je mimochodem zcela kompatibilní s&nbsp;knihovnou Pandas).
V&nbsp;tomto případě se jedná o znak &bdquo;\t&ldquo; (Python používá céčkovský
způsob zápisu řídicích znaků):</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = <strong>polars.read_csv("hall_of_fame.tsv", sep="\t")</strong>
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
print()
&nbsp;
<i># podrobnější informace o datovém rámci</i>
print("Column types")
print(df.dtypes)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_06_load_tsv_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_06_load_tsv_B.py</a>.</div></p>

<p>Výsledek nyní bude plně odpovídat očekávání:</p>

<pre>
shape: (20, 2)
┌──────┬────────┐
│ Year ┆ Winner │
│ ---  ┆ ---    │
│ i64  ┆ str    │
╞══════╪════════╡
│ 2022 ┆ C++    │
│ 2021 ┆ Python │
│ 2020 ┆ Python │
│ 2019 ┆ C      │
│ ...  ┆ ...    │
│ 2006 ┆ Ruby   │
│ 2005 ┆ Java   │
│ 2004 ┆ PHP    │
│ 2003 ┆ C++    │
└──────┴────────┘
&nbsp;
Column types
[Int64, Utf8]
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Získání metainformací o datovém rámci</h2>

<p>Podobně jako v&nbsp;případě systému <i>Pandas</i> je možné i
v&nbsp;<i>Polars</i> velmi snadno získat základní metainformace a taktéž
statistické informace o vybraném datovém rámci. K&nbsp;tomuto účelu se používá
metoda nazvaná <strong>describe</strong>, kterou zavoláme v&nbsp;následujícím
demonstračním příkladu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
print()
&nbsp;
<i># podrobnější informace o datovém rámci</i>
print("Column types")
print(df.dtypes)
print()
&nbsp;
<i># více podrobnějších informací o datovém rámci</i>
print(<strong>df.describe()</strong>)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_07_describe.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_07_describe.py</a>.</div></p>

<p>Po spuštění tohoto skriptu se nejprve zobrazí obsah datového rámce tak, jak
to již dobře známe z&nbsp;předchozích kapitol:</p>

<pre>
shape: (20, 2)
┌──────┬────────┐
│ Year ┆ Winner │
│ ---  ┆ ---    │
│ i64  ┆ str    │
╞══════╪════════╡
│ 2022 ┆ C++    │
│ 2021 ┆ Python │
│ 2020 ┆ Python │
│ 2019 ┆ C      │
│ ...  ┆ ...    │
│ 2006 ┆ Ruby   │
│ 2005 ┆ Java   │
│ 2004 ┆ PHP    │
│ 2003 ┆ C++    │
└──────┴────────┘
&nbsp;
Column types
[Int64, Utf8]
</pre>

<p>Následně se vypíšou statistické informace získané analýzou dat
v&nbsp;datovém rámci. U sloupců s&nbsp;numerickými hodnotami se spočítají
základní statistické veličiny, u sloupců s&nbsp;řetězci se alespoň nalezne
první a poslední prvek z&nbsp;(potenciálně) seřazeného sloupce:</p>

<pre>
shape: (7, 3)
┌────────────┬─────────┬──────────────┐
│ describe   ┆ Year    ┆ Winner       │
│ ---        ┆ ---     ┆ ---          │
│ str        ┆ f64     ┆ str          │
╞════════════╪═════════╪══════════════╡
│ count      ┆ 20.0    ┆ 20           │
│ null_count ┆ 0.0     ┆ 0            │
│ mean       ┆ 2012.5  ┆ null         │
│ std        ┆ 5.91608 ┆ null         │
│ min        ┆ 2003.0  ┆ C            │
│ max        ┆ 2022.0  ┆ Transact-SQL │
│ median     ┆ 2012.5  ┆ null         │
└────────────┴─────────┴──────────────┘
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Načtení dat obsahujících časová razítka</h2>

<p>Pokusme se nyní načíst tabulku, která ve svém druhém sloupci obsahuje časová
razítka, tedy jak plné datum, tak i čas (v&nbsp;tomto konkrétním případě
s&nbsp;přesností na sekundy). Jedná se konkrétně o tento soubor:</p>

<pre>
n,Timestamp
1,2020-01-15 03:59:47
2,2020-01-15 08:19:25
3,2020-01-15 11:42:07
4,2020-01-15 14:58:48
5,2020-01-15 18:21:56
6,2020-01-15 21:10:01
7,2020-01-15 23:13:58
8,2020-01-16 01:51:52
9,2020-01-16 05:55:55
10,2020-01-16 10:11:54
11,2020-01-16 14:02:32
12,2020-01-16 17:35:25
13,2020-01-16 19:35:43
14,2020-01-16 22:29:24
</pre>

<p>Prozatím při načtení nebudeme žádným způsobem specifikovat typy sloupců,
takže vlastně zopakujeme zdrojový kód prvního příkladu pro načtení datového
rámce z&nbsp;CSV:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = <strong>polars.read_csv</strong>("timestamps.csv")
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
print()
&nbsp;
<i># podrobnější informace o datovém rámci</i>
print("Column types")
print(df.dtypes)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_08_timestamps_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_08_timestamps_A.py</a>.</div></p>

<p>Z&nbsp;obsahu datového rámce vypsaného tímto skriptem je patrné, že se
hodnoty ve druhém sloupci načetly jako řetězce:</p>

<pre>
shape: (14, 2)
┌─────┬─────────────────────┐
│ n   ┆ Timestamp           │
│ --- ┆ ---                 │
│ i64 ┆ str                 │
╞═════╪═════════════════════╡
│ 1   ┆ 2020-01-15 03:59:47 │
│ 2   ┆ 2020-01-15 08:19:25 │
│ 3   ┆ 2020-01-15 11:42:07 │
│ 4   ┆ 2020-01-15 14:58:48 │
│ ... ┆ ...                 │
│ 11  ┆ 2020-01-16 14:02:32 │
│ 12  ┆ 2020-01-16 17:35:25 │
│ 13  ┆ 2020-01-16 19:35:43 │
│ 14  ┆ 2020-01-16 22:29:24 │
└─────┴─────────────────────┘
&nbsp;
Column types
[Int64, Utf8]
</pre>

<p>Výše uvedené chování nám samozřejmě nebude v&nbsp;mnoha případech vyhovovat,
protože budeme chtít s&nbsp;časovými údaji provádět různé operace. Jedno
z&nbsp;možných řešení tohoto problému spočívá v&nbsp;tom, že při načítání
tabulky funkcí <strong>pandas.read_csv</strong> použijeme parametr
<strong>parse_dates</strong>, kterému předáme buď hodnotu <strong>True</strong>
nebo explicitně názvy sloupců, u nichž se má datum zpracovat (mimochodem
&ndash; naprosto stejného chování dosáhneme se stejným parametrem u knihovny
Pandas):</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("timestamps.csv", <strong>parse_dates=True</strong>)
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
print()
&nbsp;
<i># podrobnější informace o datovém rámci</i>
print("Column types")
print(df.dtypes)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_09_timestamps_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_09_timestamps_B.py</a>.</div></p>

<p>Obsah a především metainformace o datovém rámci prozrazují, že skutečně
došlo ke konverzi časových údajů na hodnoty typu <strong>datetime</strong>
uložené s&nbsp;přesností na mikrosekundy:</p>

<pre>
shape: (14, 2)
┌─────┬─────────────────────┐
│ n   ┆ Timestamp           │
│ --- ┆ ---                 │
│ i64 ┆ datetime[μs]        │
╞═════╪═════════════════════╡
│ 1   ┆ 2020-01-15 03:59:47 │
│ 2   ┆ 2020-01-15 08:19:25 │
│ 3   ┆ 2020-01-15 11:42:07 │
│ 4   ┆ 2020-01-15 14:58:48 │
│ ... ┆ ...                 │
│ 11  ┆ 2020-01-16 14:02:32 │
│ 12  ┆ 2020-01-16 17:35:25 │
│ 13  ┆ 2020-01-16 19:35:43 │
│ 14  ┆ 2020-01-16 22:29:24 │
└─────┴─────────────────────┘
&nbsp;
Column types
[Int64, Datetime(tu='us', tz=None)]
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Načtení datových rámců z&nbsp;relační databáze</h2>

<p>V&nbsp;praxi se poměrně často setkáme s&nbsp;požadavkem na načtení dat
uložených v&nbsp;nějaké formě databáze. Může se jednat například o relační
databázi, z&nbsp;níž jsou data přečtena na základě uživatelem zapsaného dotazu
(<i>query</i>). Dobrým příkladem může být načtení dat uložených v&nbsp;databázi
PostgreSQL. Pro jednoduchost budeme načítat data z&nbsp;jediné tabulky,
tj.&nbsp;dotaz nebude obsahovat klauzuli <strong>JOIN</strong> (i tu je však
možné bez problémů v&nbsp;případě potřeby použít). Data budeme načítat
z&nbsp;tabulky <strong>rule_hit</strong>, jejíž schéma je následující:</p>

<pre>
            Table "public.rule_hit"
    Column     |       Type        | Modifiers 
---------------+-------------------+-----------
 org_id        | integer           | not null
 cluster_id    | character varying | not null
 rule_fqdn     | character varying | not null
 error_key     | character varying | not null
 template_data | character varying | not null
</pre>

<p>Povšimněte si, že pro načtení dat z&nbsp;databáze potřebujeme specifikovat
takzvaný <i>connection string</i>, v&nbsp;němž je uvedena jak použitá databáze,
tak i její umístění (jméno počítače+port) i přihlašovací údaje (uživatel
<strong>postgres</strong> s&nbsp;heslem <strong>postgres</strong>). Každá
databáze ovšem akceptuje odlišně strukturovaný <i>connection string</i>. A dále
samozřejmě potřebujeme specifikovat vlastní dotaz. Oba údaje jsou předány do
funkce <strong>read_sql</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># connection string a vlastní dotaz</i>
connection_string = <strong>"postgresql://postgres:postgres@localhost:5432/testdb"</strong>
&nbsp;
query = <strong>"select * from rule_hit"</strong>
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.<strong>read_sql(query, connection_string)</strong>
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
print()
&nbsp;
<i># podrobnější informace o datovém rámci</i>
print("Column types")
print(df.dtypes)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního příkladu získáte na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_10_load_sql_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_10_load_sql_A.py</a>.</div></p>

<p>Výsledkem činnosti tohoto skriptu je plnohodnotný datový rámec, což je
ostatně patrné i při pohledu na výsledek:</p>

<pre>
shape: (45, 5)
┌──────────┬───────────────────────┬───────────────────────┬───────────────────────┬───────────────┐
│ org_id   ┆ cluster_id            ┆ rule_fqdn             ┆ error_key             ┆ template_data │
│ ---      ┆ ---                   ┆ ---                   ┆ ---                   ┆ ---           │
│ i32      ┆ str                   ┆ str                   ┆ str                   ┆ str           │
╞══════════╪═══════════════════════╪═══════════════════════╪═══════════════════════╪═══════════════╡
│ 11789773 ┆ 6d5892d3-1f74-4ccf-91 ┆ ccx_rules_ocp.externa ┆ NODES_MINIMUM_REQUIRE ┆ {             │
│          ┆ af-548dfc97...        ┆ l.rules.nod...        ┆ MENTS_NOT_M...        ┆ "nodes": [... │
│ 11789773 ┆ 6d5892d3-1f74-4ccf-91 ┆ ccx_rules_ocp.externa ┆ BUGZILLA_BUG_1766907  ┆ {             │
│          ┆ af-548dfc97...        ┆ l.bug_rules...        ┆                       ┆ "type": "r... │
│ 11789773 ┆ 6d5892d3-1f74-4ccf-91 ┆ ccx_rules_ocp.externa ┆ NODE_KUBELET_VERSION  ┆ {             │
│          ┆ af-548dfc97...        ┆ l.rules.nod...        ┆                       ┆ "nodes_wit... │
│ 11789773 ┆ 6d5892d3-1f74-4ccf-91 ┆ ccx_rules_ocp.externa ┆ SAMPLES_FAILED_IMAGE_ ┆ {             │
│          ┆ af-548dfc97...        ┆ l.rules.sam...        ┆ IMPORT_ERR            ┆ "info": {     │
│          ┆                       ┆                       ┆                       ┆ ...           │
│ ...      ┆ ...                   ┆ ...                   ┆ ...                   ┆ ...           │
│ 1        ┆ 9d5892d3-1f74-4ccf-91 ┆ ccx_rules_ocp.externa ┆ BUGZILLA_BUG_1766907  ┆ {             │
│          ┆ af-548dfc97...        ┆ l.bug_rules...        ┆                       ┆ "type": "r... │
│ 1        ┆ 9d5892d3-1f74-4ccf-91 ┆ ccx_rules_ocp.externa ┆ NODE_KUBELET_VERSION  ┆ {             │
│          ┆ af-548dfc97...        ┆ l.rules.nod...        ┆                       ┆ "nodes_wit... │
│ 1        ┆ 9d5892d3-1f74-4ccf-91 ┆ ccx_rules_ocp.externa ┆ SAMPLES_FAILED_IMAGE_ ┆ {             │
│          ┆ af-548dfc97...        ┆ l.rules.sam...        ┆ IMPORT_ERR            ┆ "info": {     │
│          ┆                       ┆                       ┆                       ┆ ...           │
│ 1        ┆ 9d5892d3-1f74-4ccf-91 ┆ ccx_rules_ocp.externa ┆ AUTH_OPERATOR_PROXY_E ┆ {             │
│          ┆ af-548dfc97...        ┆ l.rules.clu...        ┆ RROR                  ┆ "op": {       │
│          ┆                       ┆                       ┆                       ┆   ...         │
└──────────┴───────────────────────┴───────────────────────┴───────────────────────┴───────────────┘
&nbsp;
Column types
[Int32, Utf8, Utf8, Utf8, Utf8]
</pre>

<p><div class="rs-tip-major">Poznámka: obsahy sloupců jsou zkráceny.</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Složitější dotaz s&nbsp;klauzulí <strong>WHERE</strong> popř.&nbsp;<strong>ORDER BY</strong></h2>

<p>Dotazy, které se posílají do vybrané (relační) databáze, mohou být
samozřejmě složitější, než tomu bylo <a href="#k17">v&nbsp;předchozím</a>
demonstračním příkladu. Můžeme například použít dotaz s&nbsp;podmínkou uvedenou
za <strong>WHERE</strong> (tedy filtraci), popř.&nbsp;specifikovat řazení
vrácených záznamů klauzulí <strong>ORDER BY</strong>. Opět se podívejme na
jednoduchý příklad, který stále využívá stejnou tabulku:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># connection string a vlastní dotaz</i>
connection_string = <strong>"postgresql://postgres:postgres@localhost:5432/testdb"</strong>
query = """
    <strong>SELECT org_id, cluster_id, rule_fqdn</strong>
      <strong>FROM rule_hit</strong>
     <strong>ORDER by org_id, cluster_id</strong>
"""
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_sql(query, connection_string)
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
print()
&nbsp;
<i># podrobnější informace o datovém rámci</i>
print("Column types")
print(df.dtypes)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_11_load_sql_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_11_load_sql_B.py</a>.</div></p>

<p>Nyní bude výsledný datový rámec vypadat odlišně, protože bude obsahovat
pouze tři vybrané sloupce. Navíc si povšimněte, že záznamy uložené
v&nbsp;datovém rámci jsou skutečně seřazeny, nejdříve podle čísla organizace a
posléze podle jména ve druhém resp.&nbsp;hodnoty ve třetím sloupci:</p>

<pre>
shape: (45, 3)
┌──────────┬─────────────────────────────────────┬─────────────────────────────────────┐
│ org_id   ┆ cluster_id                          ┆ rule_fqdn                           │
│ ---      ┆ ---                                 ┆ ---                                 │
│ i32      ┆ str                                 ┆ str                                 │
╞══════════╪═════════════════════════════════════╪═════════════════════════════════════╡
│ 1        ┆ 9d5892d3-1f74-4ccf-91af-548dfc97... ┆ ccx_rules_ocp.ocs.check_ocs_vers... │
│ 1        ┆ 9d5892d3-1f74-4ccf-91af-548dfc97... ┆ ccx_rules_ocp.ocs.check_pods_scc... │
│ 1        ┆ 9d5892d3-1f74-4ccf-91af-548dfc97... ┆ ccx_rules_ocp.ocs.ceph_check_mon... │
│ 1        ┆ 9d5892d3-1f74-4ccf-91af-548dfc97... ┆ ccx_rules_ocp.ocs.pvc_phase_chec... │
│ ...      ┆ ...                                 ┆ ...                                 │
│ 11789775 ┆ 8d5892d3-1f74-4ccf-91af-548dfc97... ┆ ccx_rules_ocp.external.rules.ima... │
│ 11789775 ┆ 8d5892d3-1f74-4ccf-91af-548dfc97... ┆ ccx_rules_ocp.external.rules.ima... │
│ 11789775 ┆ 8d5892d3-1f74-4ccf-91af-548dfc97... ┆ ccx_rules_ocp.external.bug_rules... │
│ 11789775 ┆ 8d5892d3-1f74-4ccf-91af-548dfc97... ┆ ccx_rules_ocp.external.bug_rules... │
└──────────┴─────────────────────────────────────┴─────────────────────────────────────┘
&nbsp;
Column types
[Int32, Utf8, Utf8]
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 (nikoli ovšem pro starší verze Pythonu 2!) byly
uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>series_01_from_list.py</td><td>konstrukce datové řady ze seznamu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_01_from_list.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_01_from_list.py</a></td></tr>
<tr><td> 2</td><td>series_02_from_tuple.py</td><td>konstrukce datové řady z&nbsp;n-tice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_02_from_tuple.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_02_from_tuple.py</a></td></tr>
<tr><td> 3</td><td>series_03_from_range.py</td><td>konstrukce datové řady generátorem <strong>range</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_03_from_range.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_03_from_range.py</a></td></tr>
<tr><td> 4</td><td>series_04_from_other_type.py</td><td>použití odlišných datových typů prvků v&nbsp;datové řadě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_04_from_other_type.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_04_from_other_type.py</a></td></tr>
<tr><td> 5</td><td>series_05_strings.py</td><td>datová řada obsahující řetězce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_05_strings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_05_strings.py</a></td></tr>
<tr><td> 6</td><td>series_06_booleans.py</td><td>datová řada obsahující pravdivostní hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_06_booleans.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_06_booleans.py</a></td></tr>
<tr><td> 7</td><td>series_07_null_value.py</td><td>datová řada obsahující prvky s&nbsp;hodnotou <strong>null</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_07_null_value.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_07_null_value.py</a></td></tr>
<tr><td> 8</td><td>series_08_type_specification.py</td><td>explicitní specifikace datového typu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_08_type_specification.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_08_type_specification.py</a></td></tr>
<tr><td> 9</td><td>series_09_select.py</td><td>výběr prvků z&nbsp;datové řady pomocí indexu, indexů či řezu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_09_select.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_09_select.py</a></td></tr>
<tr><td>10</td><td>series_10_filter.py</td><td>výběr prvků z&nbsp;datové řady pomocí filtru (podmínky)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_10_filter.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_10_filter.py</a></td></tr>
<tr><td>11</td><td>series_11_from_arange.py</td><td>konstrukce datové řady s&nbsp;využitím <strong>numpy.arange</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_11_from_arange.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_11_from_arange.py</a></td></tr>
<tr><td>12</td><td>series_12_from_linspace.py</td><td>konstrukce datové řady s&nbsp;využitím <strong>numpy.linspace</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_12_from_linspace.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_12_from_linspace.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>data_frame_01_load_csv.py</td><td>načtení dat ze souboru typu CSV</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_01_load_csv.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_01_load_csv.py</a></td></tr>
<tr><td>14</td><td>data_frame_02_load_csv_no_header_A.py</td><td>práce se soubory typu CSV bez hlavičky (nekorektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_02_load_csv_no_header_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_02_load_csv_no_header_A.py</a></td></tr>
<tr><td>15</td><td>data_frame_03_load_csv_no_header_B.py</td><td>práce se soubory typu CSV bez hlavičky (korektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_03_load_csv_no_header_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_03_load_csv_no_header_B.py</a></td></tr>
<tr><td>16</td><td>data_frame_04_load_csv_no_header_C.py</td><td>práce se soubory typu CSV bez hlavičky (korektní varianta s&nbsp;explicitními jmény sloupců)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_04_load_csv_no_header_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_04_load_csv_no_header_B.py</a></td></tr>
<tr><td>17</td><td>data_frame_05_load_tsv_A.py</td><td>práce se soubory typu TSV (nekorektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_05_load_tsv_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_05_load_tsv_A.py</a></td></tr>
<tr><td>18</td><td>data_frame_06_load_tsv_B.py</td><td>práce se soubory typu TSV (korektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_06_load_tsv_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_06_load_tsv_B.py</a></td></tr>
<tr><td>19</td><td>data_frame_07_describe.py</td><td>získání metainformací o datovém rámci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_07_describe.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_07_describe.py</a></td></tr>
<tr><td>20</td><td>data_frame_08_timestamps_A.py</td><td>načtení dat obsahujících časová razítka</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_08_timestamps_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_08_timestamps_A.py</a></td></tr>
<tr><td>21</td><td>data_frame_09_timestamps_B.py</td><td>načtení dat obsahujících časová razítka</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_09_timestamps_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_09_timestamps_B.py</a></td></tr>
<tr><td>22</td><td>data_frame_10_load_sql_A.py</td><td>načtení dat z&nbsp;relační databáze s&nbsp;uložením výsledku ve formě datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_10_load_sql_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_10_load_sql_A.py</a></td></tr>
<tr><td>23</td><td>data_frame_11_load_sql_B.py</td><td>načtení dat z&nbsp;relační databáze s&nbsp;uložením výsledku ve formě datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_11_load_sql_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_11_load_sql_B.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Projekt Polars na GitHubu<br />
<a href="https://github.com/pola-rs/polars">https://github.com/pola-rs/polars</a>
</li>

<li>Dokumentace k&nbsp;projektu Polars (popis API)<br />
<a href="https://pola-rs.github.io/polars/py-polars/html/reference/index.html">https://pola-rs.github.io/polars/py-polars/html/reference/index.html</a>
</li>

<li>Polars: The Next Big Python Data Science Library... written in RUST? <br />
<a href="https://www.youtube.com/watch?v=VHqn7ufiilE">https://www.youtube.com/watch?v=VHqn7ufiilE</a>
</li>

<li>Polars API: funkce pro načtení datového rámce z&nbsp;CSV<br />
<a href="https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.read_csv.html">https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.read_csv.html</a>
</li>

<li>Polars API: funkce pro načtení datového rámce z&nbsp;relační databáze<br />
<a href="https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.read_sql.html">https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.read_sql.html</a>
</li>

<li>Python’s Pandas vs Polars: Who Wins this Fight in Library <br />
<a href="https://analyticsindiamag.com/pythons-pandas-vs-polars-who-wins-this-fight-in-library/">https://analyticsindiamag.com/pythons-pandas-vs-polars-who-wins-this-fight-in-library/</a>
</li>

<li>Polars vs Pandas: what is more convenient?<br />
<a href="https://medium.com/@ilia.ozhmegov/polars-vs-pandas-what-is-more-convenient-331956742a69">https://medium.com/@ilia.ozhmegov/polars-vs-pandas-what-is-more-convenient-331956742a69</a>
</li>

<li>A Gentle Introduction to Pandas Data Analysis (on Kaggle)<br />
<a href="https://www.youtube.com/watch?v=_Eb0utIRdkw&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&index=4">https://www.youtube.com/watch?v=_Eb0utIRdkw&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&amp;index=4</a>
</li>

<li>Speed Up Your Pandas Dataframes<br />
<a href="https://www.youtube.com/watch?v=u4_c2LDi4b8&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&index=5">https://www.youtube.com/watch?v=u4_c2LDi4b8&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&amp;index=5</a>
</li>

<li>pandas.read_csv<br />
<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html</a>
</li>

<li>How to define format when using pandas to_datetime?<br />
<a href="https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime">https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime</a>
</li>

<li>Pandas : skip rows while reading csv file to a Dataframe using read_csv() in Python<br />
<a href="https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/">https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/</a>
</li>

<li>Skip rows during csv import pandas<br />
<a href="https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas">https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas</a>
</li>

<li>Denni kurz<br />
<a href="https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt">https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt</a>
</li>

<li>UUID objects according to RFC 4122 (knihovna pro Python)<br />
<a href="https://docs.python.org/3.5/library/uuid.html#uuid.uuid4">https://docs.python.org/3.5/library/uuid.html#uuid.uuid4</a>
</li>

<li>Object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Object_identifier">https://en.wikipedia.org/wiki/Object_identifier</a>
</li>

<li>Digital object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Digital_object_identifier">https://en.wikipedia.org/wiki/Digital_object_identifier</a>
</li>

<li>voluptuous na (na PyPi)<br />
<a href="https://pypi.python.org/pypi/voluptuous">https://pypi.python.org/pypi/voluptuous</a>
</li>

<li>Repositář knihovny voluptuous na GitHubu<br />
<a href="https://github.com/alecthomas/voluptuous">https://github.com/alecthomas/voluptuous</a>
</li>

<li>pytest-voluptuous 1.0.2 (na PyPi)<br />
<a href="https://pypi.org/project/pytest-voluptuous/">https://pypi.org/project/pytest-voluptuous/</a>
</li>

<li>pytest-voluptuous (na GitHubu)<br />
<a href="https://github.com/F-Secure/pytest-voluptuous">https://github.com/F-Secure/pytest-voluptuous</a>
</li>

<li>schemagic 0.9.1 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schemagic/0.9.1">https://pypi.python.org/pypi/schemagic/0.9.1</a>
</li>

<li>Schemagic / Schemagic.web (na GitHubu)<br />
<a href="https://github.com/Mechrophile/schemagic">https://github.com/Mechrophile/schemagic</a>
</li>

<li>schema 0.6.7 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schema">https://pypi.python.org/pypi/schema</a>
</li>

<li>schema (na GitHubu)<br />
<a href="https://github.com/keleshev/schema">https://github.com/keleshev/schema</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

