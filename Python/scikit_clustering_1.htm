<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Shluková analýza (clustering) a knihovna Scikit-learn</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Shluková analýza (clustering) a knihovna Scikit-learn</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Shluková analýza (<i>clustering</i>) a knihovna Scikit-learn</a></p>
<p><a href="#k02">2. Příklad reálných dat, u nichž lze využít shlukovou analýzu</a></p>
<p><a href="#k03">3. Příprava dat pro shlukovou analýzu</a></p>
<p><a href="#k04">*** 4. Vygenerování sady bodů v&nbsp;rovině funkcí <strong>sklearn.datasets.make_blobs</strong></a></p>
<p><a href="#k05">*** 5. Malá odbočka: prohození x-ových a y-ových souřadnic</a></p>
<p><a href="#k06">6. Korelační diagram (bodový graf)</a></p>
<p><a href="#k07">*** 7. Vykreslení bodů vygenerovaných funkcí <strong>sklearn.datasets.make_blobs</strong></a></p>
<p><a href="#k08">*** 8. Úprava skriptu pro vykreslení většího množství bodů v&nbsp;rovině</a></p>
<p><a href="#k09">*** 9. Obarvení bodů na základě toho, do jakého clusteru patří</a></p>
<p><a href="#k10">*** 10. Algoritmus K-means pro shlukovou analýzu</a></p>
<p><a href="#k11">*** 11. Nalezení centroidů algoritmem K-means</a></p>
<p><a href="#k12">*** 12. Zobrazení centroidů společně se všemi body v&nbsp;rovině</a></p>
<p><a href="#k13">*** 13. Výpočet clusterů</a></p>
<p><a href="#k14">*** 14. Vizualizace clusterů</a></p>
<p><a href="#k15">*** 15. Clustering pro větší počet bodů v&nbsp;případě, kdy se oblasti centroidů překrývají</a></p>
<p><a href="#k16">*** 16. Pokus o nalezení clusterů v&nbsp;náhodných datech</a></p>
<p><a href="#k17">*** 17. Limity standardního algoritmu K-means</a></p>
<p><a href="#k18">*** 18. Obsah navazujícího článku</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Shluková analýza (<i>clustering</i>) a knihovna Scikit-learn</h2>

<p>V&nbsp;článku <a
href="https://www.root.cz/clanky/rozpoznavani-obrazku-knihovnou-scikit-learn-prvni-kroky/">Rozpoznávání
obrázků knihovnou Scikit-learn: první kroky</a> jsme se ve stručnosti seznámili
s&nbsp;tím, jakým způsobem spolu dokážou kooperovat knihovny <i>NumPy</i>,
<i>Pandas</i> (či <i>Polars</i>), <i>Matplotlib</i> a <i>Scikit-Learn</i>. Tuto
kooperaci jsme si ukázali na příkladu rozpoznávání ručně napsaných číslic,
přičemž knihovna Scikit-Learn byla použita jako zdroj dat pro trénink i
validaci, ovšem navíc nám poskytla i model, který jsme mohli natrénovat.
Knihovna NumPy v&nbsp;tomto případě zajišťovala podporu základních datových
struktur (n-rozměrná pole, <i>nd-array</i>) i algoritmů a knihovna Matplotlib
sloužila pro vizualizaci vstupních dat, mezivýsledků i výsledků poskytovaných
natrénovaným modelem.</p>

<img src="https://i.iinfo.cz/images/542/scikit-learn-1-28.webp" class="image-1110870" width="640" height="480" alt="&#160;" title="Autor: Tisnik+MNiST authors, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 1: Prvních patnáct číslic, které jsme v&nbsp;předchozím článku
použili pro trénink modelu.</i></p>

<p>Ovšem knihovna Scikit-learn ve skutečnosti nemusí být použita pouze pro
trénink modelů; dokonce je možné říci, že je to pro mnoho uživatelů zcela
okrajové téma. Scikit-learn totiž poskytuje i mnoho dalších nástrojů. Jedním
z&nbsp;velmi užitečných nástrojů, které zde nalezneme, je podpora pro provádění
takzvané <i>shlukové analýzy</i> (<i>cluster analysis</i>, <i>clustering</i>).
Jedná se o proces, který se používá jako vstup pro <i>klasifikaci</i> objektů.
Zjednodušeně řečeno se používá k&nbsp;rozdělení vstupních dat (či již nějakým
způsobem upravených dat) do skupin, přičemž se očekává, že data, která budou
náležet do stejné skupiny, budou představovat objekty (i když možná by bylo
lepší říci informace) s&nbsp;podobnými vlastnostmi.</p>

<img src="https://i.iinfo.cz/images/542/scikit-learn-1-29.webp" class="image-1110871" width="640" height="480" alt="&#160;" title="Autor: Tisnik+MNiST authors, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 2: Výsledky modelu, který jsme natrénovali v&nbsp;rámci
předchozího článku.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Příklad reálných dat, u nichž lze využít shlukovou analýzu</h2>

<p>Poměrně dobrým příkladem toho, kde může být shluková analýza užitečná, mohou
být data zjištěná o nějaké hvězdě (například informace o teplotě a zářivém
výkonu nebo velikosti). Pokud vyneseme do jednoduchého dvourozměrného grafu
hodnoty pro tyto dvě veličiny pro všechny pozorované (a změřené) hvězdy,
získáme slavný <i>Hertzsprungův–Russellův diagram</i>, zkráceně též
<i>H&ndash;R diagram</i>, který vypadá následovně:</p>

*** image ***
<p><i>Obrázek 3: Ukázka H&ndash;R diagramu.<br />
Autor: Adam na projektu Wikipedie v jazyce čeština – Na Commons přeneseno z
cs.wikipedia., Volné dílo,
https://commons.wikimedia.org/w/index.php?curid=2157609</i></p>

<p>Na H-R diagramu jsou jasně patrné oblasti, do nichž jsou sdruženy hvězdy
s&nbsp;podobnými vlastnostmi (dokonce můžeme říci, že s&nbsp;podobným osudem).
A úkolem shlukové analýzy (<i>clusteringu</i>) je tyto oblasti nalézt
resp.&nbsp;vypočítat. V&nbsp;tomto konkrétním případě je to relativně
jednoduchá úloha, ovšem pochopitelně se v&nbsp;praxi ne vždy data shlukují
takto &bdquo;pěkným&ldquo; způsobem. Z&nbsp;tohoto důvodu existuje hned několik
algoritmů pro shlukovou analýzu &ndash; a nejtěžším úkolem je vybrat si ten
správný algoritmus a určit jeho parametry.</p>

<p><div class="rs-tip-major">Poznámka: pochopitelně se však nemusíme orientovat
pouze na astronomická data a astronomické objekty, protože shlukovou analýzu
lze provádět i na mnoha dalších datech, typicky ve chvíli, kdy sice tušíme, že
mezi jednotlivými veličinami (a požadovaným výsledkem) existuje nějaká
korelace, ale nevíme jaká. A shluková analýza navíc není omezena pouze na dvě
veličiny, tedy na dvourozměrný diagram. Počet shlukovaných veličin a tím pádem
i počet dimenzí diagramu ve skutečnosti není omezen, i když vizualizace (ta je
zde důležitá! &ndash; lidský mozek totiž dokáže výsledek velmi snadno
verifikovat) bude mít praktický význam především pro diagramy se dvěma či třemi
veličinami.  I proto se v&nbsp;praxi při zpracování dat setkáme s&nbsp;redukcí
počtu dimenzí (odstranění nějaké veličiny).</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Příprava dat pro shlukovou analýzu</h2>

<p>Dnes si otestujeme jeden konkrétní algoritmus určený pro provedení shlukové
analýzy, který se nazývá <i>K-means clustering</i>. Ovšem nejprve si musíme
připravit vhodná data, na kterých bude možné si vizuálně ověřit výsledky tohoto
algoritmu. Jak již víme z&nbsp;předchozího textu, může být shluková analýza
provedena v&nbsp;prakticky libovolném počtu dimenzí, ovšem pro jednoduchost
začneme dvoudimenzionálními daty. V&nbsp;praxi se tedy bude jednat o sadu
hodnot dvou veličin (nebo jedné veličiny) &ndash; například již zmíněné teploty
a zářivém výkonu hvězdy. Pro každý objekt vyneseme jednu hodnotu na x-ovou osu
a druhou hodnotu na y-ovou osu. Výsledkem bude bod v&nbsp;rovině.</p>

<p>Pro naše pokusy tedy potřebujeme získat sadu bodů v&nbsp;rovině, které však
nebudou rozmístěny zcela náhodně (tam poněkud postrádá shluková analýza smysl).
Existuje mnoho způsobů, jak body v&nbsp;rovině rozmístit. Pro velkou názornost
jsem pro dnešní článek vybral metodu realizovanou ve funkci
<strong>sklearn.datasets.make_blobs</strong>, která nejprve vybere <i>n</i>
centrálních bodů a poté rozmisťuje další body okolo těchto center tak, že
pravděpodobnost umístění bodu dále od centra klesá podle Gaussovy křivky
(teoreticky tedy může být bod umístěn na ploše kdekoli, ovšem s&nbsp;větší
vzdáleností od centrálních bodů pravděpodobnost jeho umístění do daného místa
klesá &ndash; což si ověříme vizuálně).</p>

<p><div class="rs-tip-major">Poznámka: poněkud podobný koncept, i když doplněný
o nalezení izoplochy, je použit i v&nbsp;modelovací technice založené na
<i>metaballs</i>, viz též poněkud starší článek <a
href="https://www.root.cz/clanky/implicitni-plochy-metaballs-v-pov-rayi/">Implicitní
plochy (metaballs) v&nbsp;POV-Rayi</a>.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vygenerování sady bodů v&nbsp;rovině funkcí <strong>sklearn.datasets.make_blobs</strong></h2>

<p>Podívejme se nyní na praktické použití funkce
<strong>sklearn.datasets.make_blobs</strong>. Této funkci musíme předat
především počet bodů, které se mají vygenerovat (<strong>n_samples</strong>),
počet centrálních bodů (<strong>centers</strong>) a další parametry ovlivňující
generování bodů (směrodatná odchylka atd.). Výsledkem bude dvojice hodnot
&ndash; pole se samotnými body a taktéž pole obsahující pro každý vygenerovaný
bod index centrálního body (<i>centroidu</i>), který je k&nbsp;němu nejblíže
(resp.&nbsp;přesněji index centrálního bodu, který byl použit v&nbsp;algoritmu
výpočtu pseudonáhodné pozice):</p>

<pre>
<i># import funkce, která dokáže vygenerovat množinu bodů v rovině sdružených do oblastí</i>
from sklearn.datasets import make_blobs
&nbsp;
<i># testovací data</i>
n_samples = 20
&nbsp;
<i># počet oblastí, kam se budou data sdružovat</i>
n_components = 6
&nbsp;
<i># vygenerovat množinu bodů v rovině sdružených do oblastí</i>
samples, labels = make_blobs(
    n_samples=n_samples, centers=n_components, cluster_std=0.60, random_state=0
)
&nbsp;
print("Points:")
print(samples)
print()
&nbsp;
print("Labels:")
print(labels)
</pre>

<p>Výsledky mohou pro daný počet dvaceti bodů vypadat následovně:</p>

<pre>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Malá odbočka: prohození x-ových a y-ových souřadnic</h2>

<pre>
<i># import funkce, která dokáže vygenerovat množinu bodů v rovině sdružených do oblastí</i>
from sklearn.datasets import make_blobs
&nbsp;
<i># testovací data</i>
n_samples = 20
&nbsp;
<i># počet oblastí, kam se budou data sdružovat</i>
n_components = 6
&nbsp;
<i># vygenerovat množinu bodů v rovině sdružených do oblastí</i>
samples, labels = make_blobs(
    n_samples=n_samples, centers=n_components, cluster_std=0.60, random_state=0
)
&nbsp;
print("Before swap:")
print(samples)
print()
&nbsp;
<strong>samples = samples[:, ::-1]</strong>
print("After swap:")
print(samples)
print()
&nbsp;
print("Labels:")
print(labels)
</pre>

<p>Po spuštění tohoto skriptu se opět vypíšou souřadnice dvaceti bodů.
Tentokrát však budou odlišné od příkladu <a href="#k04">z&nbsp;předchozí
kapitoly</a>, protože došlo k&nbsp;prohození x-ových a y-ových souřadnic:</p>

<pre>
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Korelační diagram (bodový graf)</h2>

<p>Body vytvořené předchozími dvěma skripty je možné vykreslit (vizualizovat)
několika způsoby, ovšem jediným typem grafu, se kterým se dnes seznámíme, je
takzvaný <i>korelační diagram</i>, který je ovšem někdy známý i pod jménem
<i>bodový graf</i> (<i>scatter plot</i>). Tento graf se v&nbsp;knihovně
Matplotlib vykresluje funkcí <strong>matplotlib.pyplot.scatter</strong>, které
se předají minimálně informace o x-ových a y-ových souřadnicích bodů, jež se
mají do grafu vykreslit.</p>

<p>Všechny x-ové a všechny y-ové souřadnice získáme z&nbsp;našeho 2D pole (matice) takto:</p>

<pre>
xs = samples[:, 0]
ys = samples[:, 1]
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vykreslení bodů vygenerovaných funkcí <strong>sklearn.datasets.make_blobs</strong></h2>

<p></p>

<pre>
<i># budeme provádět vykreslování de facto standardní knihovnou Matplotlib</i>
import matplotlib.pyplot as plt
&nbsp;
<i># import funkce, která dokáže vygenerovat množinu bodů v rovině sdružených do oblastí</i>
from sklearn.datasets import make_blobs
&nbsp;
<i># testovací data</i>
n_samples = 100
&nbsp;
<i># počet oblastí, kam se budou data sdružovat</i>
n_components = 6
&nbsp;
<i># vygenerovat množinu bodů v rovině sdružených do oblastí</i>
samples, labels = make_blobs(
    n_samples=n_samples, centers=n_components, cluster_std=0.60, random_state=0
)
&nbsp;
samples = samples[:, ::-1]
&nbsp;
<i># vykreslení bodů v rovině</i>
plt.scatter(samples[:, 0], samples[:, 1])
&nbsp;
<i># uložení grafu do souboru</i>
plt.savefig("scatter_1.png")
&nbsp;
<i># vykreslení na obrazovku</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 4: </i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Úprava skriptu pro vykreslení většího množství bodů v&nbsp;rovině</h2>

<pre>
<i># budeme provádět vykreslování de facto standardní knihovnou Matplotlib</i>
import matplotlib.pyplot as plt
&nbsp;
<i># import funkce, která dokáže vygenerovat množinu bodů v rovině sdružených do oblastí</i>
from sklearn.datasets import make_blobs
&nbsp;
<i># testovací data</i>
n_samples = 1000
&nbsp;
<i># počet oblastí, kam se budou data sdružovat</i>
n_components = 6
&nbsp;
<i># vygenerovat množinu bodů v rovině sdružených do oblastí</i>
samples, labels = make_blobs(
    n_samples=n_samples, centers=n_components, cluster_std=0.60, random_state=0
)
&nbsp;
samples = samples[:, ::-1]
&nbsp;
<i># vykreslení bodů v rovině</i>
<strong>plt.scatter(samples[:, 0], samples[:, 1], marker=".", s=10)</strong>
&nbsp;
<i># uložení grafu do souboru</i>
plt.savefig("scatter_2.png")
&nbsp;
<i># vykreslení na obrazovku</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 5: </i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Obarvení bodů na základě toho, do jakého clusteru patří</h2>

<pre>
<i># budeme provádět vykreslování de facto standardní knihovnou Matplotlib</i>
import matplotlib.pyplot as plt
&nbsp;
<i># import funkce, která dokáže vygenerovat množinu bodů v rovině sdružených do oblastí</i>
from sklearn.datasets import make_blobs
&nbsp;
<i># testovací data</i>
n_samples = 1000
&nbsp;
<i># počet oblastí, kam se budou data sdružovat</i>
n_components = 6
&nbsp;
<i># vygenerovat množinu bodů v rovině sdružených do oblastí</i>
samples, labels = make_blobs(
    n_samples=n_samples, centers=n_components, cluster_std=0.60, random_state=0
)
&nbsp;
samples = samples[:, ::-1]
&nbsp;
<i># vykreslení bodů v rovině s jejich obarvením na základě labelu</i>
plt.figure(1)
colors = ["#4444cc", "#44bb44", "#cc4444", "#cccc44", "#44cccc", "#cc44cc"]
&nbsp;
for i, color in enumerate(colors):
    selector = labels == i
    plt.scatter(samples[selector, 0], samples[selector, 1], c=color, marker=".", s=10)
&nbsp;
<i># uložení grafu do souboru</i>
plt.savefig("scatter_3.png")
&nbsp;
<i># vykreslení na obrazovku</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 6: </i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Algoritmus K-means pro shlukovou analýzu</h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. Nalezení centroidů algoritmem K-means</h2>

<pre>
<i># budeme provádět vykreslování de facto standardní knihovnou Matplotlib</i>
import matplotlib.pyplot as plt
&nbsp;
<i># funkce s implementací algoritmu pro clustering</i>
from sklearn.cluster import kmeans_plusplus
&nbsp;
<i># import funkce, která dokáže vygenerovat množinu bodů v rovině sdružených do oblastí</i>
from sklearn.datasets import make_blobs
&nbsp;
<i># testovací data</i>
n_samples = 1000
&nbsp;
<i># počet oblastí, kam se budou data sdružovat</i>
n_components = 6
&nbsp;
<i># vygenerovat množinu bodů v rovině sdružených do oblastí</i>
samples, labels = make_blobs(
    n_samples=n_samples, centers=n_components, cluster_std=0.60, random_state=0
)
&nbsp;
samples = samples[:, ::-1]
&nbsp;
<i># nalézt centra oblastí</i>
centers_init, indices = kmeans_plusplus(samples, n_clusters=6, random_state=0)
&nbsp;
plt.scatter(centers_init[:, 0], centers_init[:, 1], c="red", s=50)
plt.title("K-Means++")
&nbsp;
<i># uložení grafu do souboru</i>
plt.savefig("k_means_1.png")
&nbsp;
<i># vykreslení na obrazovku</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 7: </i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zobrazení centroidů společně se všemi body v&nbsp;rovině</h2>

<pre>
<i># budeme provádět vykreslování de facto standardní knihovnou Matplotlib</i>
import matplotlib.pyplot as plt
&nbsp;
<i># funkce s implementací algoritmu pro clustering</i>
from sklearn.cluster import kmeans_plusplus
&nbsp;
<i># import funkce, která dokáže vygenerovat množinu bodů v rovině sdružených do oblastí</i>
from sklearn.datasets import make_blobs
&nbsp;
<i># testovací data</i>
n_samples = 1000
&nbsp;
<i># počet oblastí, kam se budou data sdružovat</i>
n_components = 6
&nbsp;
<i># vygenerovat množinu bodů v rovině sdružených do oblastí</i>
samples, labels = make_blobs(
    n_samples=n_samples, centers=n_components, cluster_std=0.60, random_state=0
)
&nbsp;
samples = samples[:, ::-1]
&nbsp;
<i># vykreslení bodů v rovině s jejich obarvením na základě labelu</i>
plt.figure(1)
colors = ["#4444cc", "#44bb44", "#cc4444", "#cccc44", "#44cccc", "#cc44cc"]
&nbsp;
for i, color in enumerate(colors):
    selector = labels == i
    plt.scatter(samples[selector, 0], samples[selector, 1], c=color, marker=".", s=10)
&nbsp;
<i># nalézt centra oblastí</i>
centers_init, indices = kmeans_plusplus(samples, n_clusters=6, random_state=0)
&nbsp;
plt.scatter(centers_init[:, 0], centers_init[:, 1], c="red", s=50)
plt.title("K-Means++")
&nbsp;
<i># uložení grafu do souboru</i>
plt.savefig("k_means_2.png")
&nbsp;
<i># vykreslení na obrazovku</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 8: </i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Výpočet clusterů</h2>

<pre>
<i># clustering</i>
kmeans = KMeans(n_clusters=6, random_state=0, n_init="auto").fit(samples)
</pre>

k_means.labels_
k_means_centers



<p><a name="k14"></a></p>
<h2 id="k14">14. Vizualizace clusterů</h2>

<pre>
<i># budeme provádět vykreslování de facto standardní knihovnou Matplotlib</i>
import matplotlib.pyplot as plt
&nbsp;
<i># třída s implementací algoritmu pro clustering</i>
from sklearn.cluster import KMeans
&nbsp;
<i># import funkce, která dokáže vygenerovat množinu bodů v rovině sdružených do oblastí</i>
from sklearn.datasets import make_blobs
&nbsp;
<i># testovací data</i>
n_samples = 1000
&nbsp;
<i># počet oblastí, kam se budou data sdružovat</i>
n_components = 6
&nbsp;
<i># vygenerovat množinu bodů v rovině sdružených do oblastí</i>
samples, labels = make_blobs(
    n_samples=n_samples, centers=n_components, cluster_std=0.60, random_state=0
)
&nbsp;
samples = samples[:, ::-1]
&nbsp;
plt.figure(1)
colors = ["#4444cc", "#44bb44", "#cc4444", "#cccc44", "#44cccc", "#cc44cc"]
&nbsp;
<i># clustering</i>
kmeans = KMeans(n_clusters=6, random_state=0, n_init="auto").fit(samples)
&nbsp;
<i>#print(kmeans.labels_)</i>
<i>#print(kmeans.cluster_centers_)</i>
&nbsp;
<i># vykreslení bodů s jejich přiřazením ke clusteru</i>
for i, color in enumerate(colors):
    selector = kmeans.labels_ == i
    plt.scatter(samples[selector, 0], samples[selector, 1], c=color, marker=".", s=1)
&nbsp;
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c="red", s=50)
plt.title("K-Means++")
&nbsp;
<i># uložení grafu do souboru</i>
plt.savefig("k_means_3.png")
&nbsp;
<i># vykreslení na obrazovku</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 9: </i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Clustering pro větší počet bodů v&nbsp;případě, kdy se oblasti centroidů překrývají</h2>

<pre>
# budeme provádět vykreslování de facto standardní knihovnou Matplotlib
import matplotlib.pyplot as plt
&nbsp;
# třída s implementací algoritmu pro clustering
from sklearn.cluster import KMeans
&nbsp;
# import funkce, která dokáže vygenerovat množinu bodů v rovině sdružených do oblastí
from sklearn.datasets import make_blobs
&nbsp;
# testovací data
n_samples = 10000
&nbsp;
# počet oblastí, kam se budou data sdružovat
n_components = 6
&nbsp;
# vygenerovat množinu bodů v rovině sdružených do oblastí
samples, labels = make_blobs(
    n_samples=n_samples, centers=n_components, cluster_std=2.00, random_state=0
)
&nbsp;
samples = samples[:, ::-1]
&nbsp;
plt.figure(1)
colors = ["#4444cc", "#44bb44", "#cc4444", "#cccc44", "#44cccc", "#cc44cc"]
&nbsp;
# clustering
kmeans = KMeans(n_clusters=6, random_state=0, n_init="auto").fit(samples)
&nbsp;
#print(kmeans.labels_)
#print(kmeans.cluster_centers_)
&nbsp;
# vykreslení bodů s jejich přiřazením ke clusteru
for i, color in enumerate(colors):
    selector = kmeans.labels_ == i
    plt.scatter(samples[selector, 0], samples[selector, 1], c=color, marker=".", s=1)
&nbsp;
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c="red", s=50)
plt.title("K-Means++")
&nbsp;
# uložení grafu do souboru
plt.savefig("k_means_4.png")
&nbsp;
# vykreslení na obrazovku
plt.show()
</pre>

*** image ***
<p><i>Obrázek 10: </i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Pokus o nalezení clusterů v&nbsp;náhodných datech</h2>

*** image ***
<p><i>Obrázek 11: </i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Limity standardního algoritmu K-means</h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah navazujícího článku</h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady využívající knihovnu Scikit-learn, které jsme
si popsali <a
href="https://www.root.cz/clanky/rozpoznavani-obrazku-knihovnou-scikit-learn-prvni-kroky/">minule</a>
i dnes, lze nalézt v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady i na (Jupyter) diáře s&nbsp;postupem
výpočtů a analýz:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>01_show_matrix.py</td><td>kooperace mezi knihovnami Matplotlib a NumPy: vizualizace obsahu 2D matice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/01_show_matrix.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/01_show_matrix.py</a></td></tr>
<tr><td> 2</td><td>02_get_digits.py</td><td>datová množina obsahující naskenované ručně napsané číslice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/02_get_digits.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/02_get_digits.py</a></td></tr>
<tr><td> 3</td><td>03_get_features.py</td><td>další atributy datové množiny, které použijeme při trénování</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/03_get_features.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/03_get_features.py</a></td></tr>
<tr><td> 4</td><td>04_get_images.py</td><td>přečtení a následné vykreslení jednotlivých ručně nakreslených číslic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/04_get_images.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/04_get_images.py</a></td></tr>
<tr><td> 5</td><td>05_show_grayscale_matrix.py</td><td>odstranění umělé aplikované barvové palety (obrázky ve stupních šedi)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/05_show_grayscale_matrix.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/05_show_grayscale_matrix.py</a></td></tr>
<tr><td> 6</td><td>06_grayscale_images.py</td><td>vykreslení ručně nakreslených číslic ve formě obrázků ve stupních šedi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/06_grayscale_images.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/06_grayscale_images.py</a></td></tr>
<tr><td> 7</td><td>07_multiplot.py</td><td>rozdělení plochy grafu do oblastí; vykreslení více obrázků do jediného grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/07_multiplot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/07_multiplot.py</a></td></tr>
<tr><td> 8</td><td>08_model_preperation_1.py</td><td>obrázky s&nbsp;jejich ohodnocením</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/08_model_preperation_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/08_model_preperation_1.py</a></td></tr>
<tr><td> 9</td><td>09_training_set.py</td><td>příprava dat pro trénink</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/09_training_set.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/09_training_set.py</a></td></tr>
<tr><td>10</td><td>10_classification.py</td><td>klasifikace obrázků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/10_classification.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/10_classification.py</a></td></tr>
<tr><td>11</td><td>11_results.py</td><td>vykreslení obrázků společně s&nbsp;jejich klasifikací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/11_results.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/11_results.py</a></td></tr>
<tr><td>12</td><td>12_change_training_set.py</td><td>změna poměru rozdělení dat na tréninkovou a testovací množinu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/12_change_training_set.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/12_change_training_set.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>13_blobs.py</td><td>použití funkce <strong>make_blobs</strong> pro vygenerování sady bodů v&nbsp;rovině sdružených do oblastí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/13_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/13_blobs.py</a></td></tr>
<tr><td>14</td><td>14_swap_coords.py</td><td>úprava předchozího příkladu: prohození souřadnic na osách</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/14_swap_coords.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/14_swap_coords.py</a></td></tr>
<tr><td>15</td><td>15_blobs_scatter_plot.py</td><td>základní podoba bodového diagramu (<i>scatter plot</i>)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/15_blobs_scatter_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/15_blobs_scatter_plot.py</a></td></tr>
<tr><td>16</td><td>16_blobs_scatter_plot.py</td><td>úprava bodového diagramu při zobrazení většího množství bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/16_blobs_scatter_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/16_blobs_scatter_plot.py</a></td></tr>
<tr><td>17</td><td>17_colorized_blobs.py</td><td>obarvení bodů podle oblastí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/17_colorized_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/17_colorized_blobs.py</a></td></tr>
<tr><td>18</td><td>18_k-means.py</td><td>základní použití algoritmu K-means pro clustering</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/18_k-means.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/18_k-means.py</a></td></tr>
<tr><td>19</td><td>19_combination.py</td><td>zobrazení centroidů společně s&nbsp;původními body</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/19_combination.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/19_combination.py</a></td></tr>
<tr><td>20</td><td>20_combinations.py</td><td>vizualizace clusteringu původní množiny bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/20_combinations.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/20_combinations.py</a></td></tr>
<tr><td>21</td><td>21_other_settings.py</td><td>vizualizace clusteringu původní množiny bodů pro odlišnou množinu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/21_other_settings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/21_other_settings.py</a></td></tr>
<tr><td>22</td><td>22_random_points.py</td><td>clustering pro náhodná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/22_random_points.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/22_random_points.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>pyproject.toml</td><td>projektový soubor (pro PDM) se všemi závislostmi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pyproject.toml">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pyproject.toml</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>24</td><td>pdm.lock</td><td>lock soubor s&nbsp;konkrétními verzemi všech přímých i tranzitivních závislostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pdm.lock">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pdm.lock</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>25</td><td>Rozpoznání_obrazu_scikit-learn.ipynb</td><td>Jupyter notebook s&nbsp;celým postupem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/Rozpoznání_obrazu_scikit-learn.ipynb">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/Rozpoznání_obrazu_scikit-learn.ipynb</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>scikit-learn: Machine Learning in Python<br />
<a href="https://scikit-learn.org/stable/index.html">https://scikit-learn.org/stable/index.html</a>
</li>

<li>Sklearn-pandas<br />
<a href="https://github.com/scikit-learn-contrib/sklearn-pandas">https://github.com/scikit-learn-contrib/sklearn-pandas</a>
</li>

<li>sklearn-xarray<br />
<a href="https://github.com/phausamann/sklearn-xarray/">https://github.com/phausamann/sklearn-xarray/</a>
</li>

<li>Clustering<br />
<a href="https://scikit-learn.org/stable/modules/clustering.html">https://scikit-learn.org/stable/modules/clustering.html</a>
</li>

<li>Cluster analysis (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Cluster_analysis">https://en.wikipedia.org/wiki/Cluster_analysis</a>
</li>

<li>Shluková analýza (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Shlukov%C3%A1_anal%C3%BDza">https://cs.wikipedia.org/wiki/Shlukov%C3%A1_anal%C3%BDza</a>
</li>

<li>K-means<br />
<a href="https://cs.wikipedia.org/wiki/K-means">https://cs.wikipedia.org/wiki/K-means</a>
</li>

<li>k-means clustering<br />
<a href="https://en.wikipedia.org/wiki/K-means_clustering">https://en.wikipedia.org/wiki/K-means_clustering</a>
</li>

<li>Hertzsprungův–Russellův diagram<br />
<a href="https://cs.wikipedia.org/wiki/Hertzsprung%C5%AFv%E2%80%93Russell%C5%AFv_diagram">https://cs.wikipedia.org/wiki/Hertzsprung%C5%AFv%E2%80%93Russell%C5%AFv_diagram</a>
</li>

<li>Using Machine Learning in an HR Diagram<br />
<a href="https://cocalc.com/share/public_paths/08b6e03583cbdef3cdb9813a54ec68ff773c747f">https://cocalc.com/share/public_paths/08b6e03583cbdef3cdb9813a54ec68ff773c747f</a>
</li>

<li>Gaia H-R diagrams: Querying Gaia data for one million nearby stars<br />
<a href="https://vlas.dev/post/gaia-dr2-hrd/">https://vlas.dev/post/gaia-dr2-hrd/</a>
</li>

<li>The Hertzsprung–Russell diagram<br />
<a href="https://scipython.com/book2/chapter-9-data-analysis-with-pandas/problems/p92/the-hertzsprung-russell-diagram/">https://scipython.com/book2/chapter-9-data-analysis-with-pandas/problems/p92/the-hertzsprung-russell-diagram/</a>
</li>

<li>Animated Hertzsprung-Russell Diagram with 119,614 datapoints<br />
<a href="https://github.com/zonination/h-r-diagram">https://github.com/zonination/h-r-diagram</a>
</li>

<li>Neuraxle Pipelines<br />
<a href="https://github.com/Neuraxio/Neuraxle">https://github.com/Neuraxio/Neuraxle</a>
</li>

<li>scikit-learn: Getting Started<br />
<a href="https://scikit-learn.org/stable/getting_started.html">https://scikit-learn.org/stable/getting_started.html</a>
</li>

<li>Support Vector Machines<br />
<a href="https://scikit-learn.org/stable/modules/svm.html">https://scikit-learn.org/stable/modules/svm.html</a>
</li>

<li>Use Deep Learning to Detect Programming Languages<br />
<a href="http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/">http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/</a>
</li>

<li>Natural-language processing<br />
<a href="https://en.wikipedia.org/wiki/Natural-language_processing">https://en.wikipedia.org/wiki/Natural-language_processing</a>
</li>

<li>THE MNIST DATABASE of handwritten digits<br />
<a href="http://yann.lecun.com/exdb/mnist/">http://yann.lecun.com/exdb/mnist/</a>
</li>

<li>MNIST database (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MNIST_database">https://en.wikipedia.org/wiki/MNIST_database</a>
</li>

<li>MNIST For ML Beginners<br />
<a href="https://www.tensorflow.org/get_started/mnist/beginners">https://www.tensorflow.org/get_started/mnist/beginners</a>
</li>

<li>Stránka projektu Torch<br />
<a href="http://torch.ch/">http://torch.ch/</a>
</li>

<li>Torch: Serialization<br />
<a href="https://github.com/torch/torch7/blob/master/doc/serialization.md">https://github.com/torch/torch7/blob/master/doc/serialization.md</a>
</li>

<li>Torch: modul image<br />
<a href="https://github.com/torch/image/blob/master/README.md">https://github.com/torch/image/blob/master/README.md</a>
</li>

<li>Data pro neuronové sítě<br />
<a href="http://archive.ics.uci.edu/ml/index.php">http://archive.ics.uci.edu/ml/index.php</a>
</li>

<li>Torch na GitHubu (několik repositářů)<br />
<a href="https://github.com/torch">https://github.com/torch</a>
</li>

<li>Torch (machine learning), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Torch_%28machine_learning%29">https://en.wikipedia.org/wiki/Torch_%28machine_learning%29</a>
</li>

<li>Torch Package Reference Manual<br />
<a href="https://github.com/torch/torch7/blob/master/README.md">https://github.com/torch/torch7/blob/master/README.md</a>
</li>

<li>Torch Cheatsheet<br />
<a href="https://github.com/torch/torch7/wiki/Cheatsheet">https://github.com/torch/torch7/wiki/Cheatsheet</a>
</li>

<li>Neural network containres (Torch)<br />
<a href="https://github.com/torch/nn/blob/master/doc/containers.md">https://github.com/torch/nn/blob/master/doc/containers.md</a>
</li>

<li>Simple layers<br />
<a href="https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear">https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear</a>
</li>

<li>Transfer Function Layers<br />
<a href="https://github.com/torch/nn/blob/master/doc/transfer.md#nn.transfer.dok">https://github.com/torch/nn/blob/master/doc/transfer.md#nn.transfer.dok</a>
</li>

<li>Feedforward neural network<br />
<a href="https://en.wikipedia.org/wiki/Feedforward_neural_network">https://en.wikipedia.org/wiki/Feedforward_neural_network</a>
</li>

<li>Biologické algoritmy (4) - Neuronové sítě<br />
<a href="https://www.root.cz/clanky/biologicke-algoritmy-4-neuronove-site/">https://www.root.cz/clanky/biologicke-algoritmy-4-neuronove-site/</a>
</li>

<li>Biologické algoritmy (5) - Neuronové sítě<br />
<a href="https://www.root.cz/clanky/biologicke-algoritmy-5-neuronove-site/">https://www.root.cz/clanky/biologicke-algoritmy-5-neuronove-site/</a>
</li>

<li>Umělá neuronová síť (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Um%C4%9Bl%C3%A1_neuronov%C3%A1_s%C3%AD%C5%A5">https://cs.wikipedia.org/wiki/Um%C4%9Bl%C3%A1_neuronov%C3%A1_s%C3%AD%C5%A5</a>
</li>

<li>PyTorch<br />
<a href="http://pytorch.org/">http://pytorch.org/</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>Matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Galerie grafů vytvořených v&nbsp;Matplotlibu<br />
<a href="https://matplotlib.org/3.2.1/gallery/">https://matplotlib.org/3.2.1/gallery/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

