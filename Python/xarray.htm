<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Xarray: sémantické rozšíření n-rozměrných polí z knihovny NumPy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Xarray: sémantické rozšíření n-rozměrných polí z knihovny NumPy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku se seznámíme s knihovnou nazvanou Xarray. Tato knihovna rozšiřuje běžná n-rozměrná pole (ND-array) z knihovny NumPy, protože k polím přidává další sémantické informace: jména os, souřadnice (koordináty) na jednotlivých osách, metainformace přidané uživatelem atd.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Xarray: sémantické rozšíření n-rozměrných polí z&nbsp;knihovny NumPy</a></p>
<p><a href="#k02">2. Instalace balíčku <strong>xarray</strong> i jeho tranzitivních závislostí</a></p>
<p><a href="#k03">3. Instalace při použití správce balíčků <i>PDM</i></a></p>
<p><a href="#k04">4. Kontrola instalace</a></p>
<p><a href="#k05">5. Datový typ <strong>DataArray</strong></a></p>
<p><a href="#k06">6. Pojmenování os (dimenzí), specifikace souřadnic v&nbsp;jednotlivých dimenzích, pojmenování pole</a></p>
<p><a href="#k07">7. Přiřazení dalších uživatelských atributů</a></p>
<p><a href="#k08">8. Vícedimenzionální koordináty, 3D pole</a></p>
<p><a href="#k09">9. Přístup k&nbsp;atributům polí</a></p>
<p><a href="#k10">10. Uložení polí do formátu NetCDF</a></p>
<p><a href="#k11">11. Přečtení koordinát na zvolené ose ve formě nového pole</a></p>
<p><a href="#k12">12. Použití číselných indexů při přístupu k&nbsp;prvkům n-dimenzionálních polí</a></p>
<p><a href="#k13">13. Využití operací <strong>isel</strong> a <strong>sel</strong> při přístupu k&nbsp;prvkům n-dimenzionálních polí</a></p>
<p><a href="#k14">*** 14. Základní aritmetické a relační operace s&nbsp;polem (broadcasting)</a></p>
<p><a href="#k15">15. Konverze pole operací <strong>where</strong></a></p>
<p><a href="#k16">16. Množina polí: datový typ <strong>DataSet</strong></a></p>
<p><a href="#k17">*** 17. Dataset s&nbsp;dvojicí trojrozměrných polí</a></p>
<p><a href="#k18">*** 18. Operace nad poli s&nbsp;odlišnou souřadnou mřížkou</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Xarray: sémantické rozšíření n-rozměrných polí z&nbsp;knihovny NumPy</h2>

<p>V&nbsp;dnešním článku o <a
href="https://www.root.cz/n/python/">programovacím jazyku Python</a> se
seznámíme s&nbsp;potenciálně velmi užitečnou knihovnou nazvanou <i>Xarray</i>.
Tato knihovna rozšiřuje běžná n-rozměrná pole (<i>ND-array</i>) z&nbsp;knihovny
NumPy, protože k&nbsp;těmto polím přidává další sémantické informace. Zejména
jsou pole rozšířena o jména souřadných os (tzv.&nbsp;dimenze), o souřadnice
(koordináty) na jednotlivých osách, ale taktéž o metainformace přidané
uživatelem atd. Tyto informace mohou být uloženy společně s&nbsp;prvky polí do
souborů ve standardním (a standardizovaném) formátu <a
href="https://www.unidata.ucar.edu/software/netcdf/">NetCDF</a>, což umožňuje
jak import dat s&nbsp;metainformacemi, tak i jejich sdílení mezi různými
systémy. Navíc je možné s&nbsp;dimenzemi a koordináty dále pracovat, což si
ukážeme na několika demonstračních příkladech (nejedná se tedy o pouhá statická
data).</p>

<p><div class="rs-tip-major">Poznámka: původně se knihovna <i>Xarray</i>
jmenovala jen <i>xray</i>.</div></p>

*** image ***
<p><i>Obrázek 1: Logo knihovny xarray.</i></p>

<p>Jen pro zajímavost se podívejme, jak by bylo možné reprezentovat pozici
figurek na šachovnici s&nbsp;tím, že obě osy jsou pojmenovány (<i>files</i> a
<i>ranks</i> jsou oficiální jména používaná namísto sloupců a řádků) a navíc
jsou použity &bdquo;sémantické&ldquo; souřadnice, tedy označení sloupců písmeny
a řádků čísly 1-8 (namísto použití celočíselných indexů 0 až 7). K&nbsp;poli
reprezentujícím šachovnici jsou navíc přidány i další metainformace: jméno a
uživatské atributy:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
chessboard = np.array([" "]*64).reshape(8, 8)
chessboard[0, 0] = "♚"
chessboard[1, 5] = "♔"
chessboard[2, 5] = "♙"
chessboard[3, 4] = "♜"
&nbsp;
files = ["a", "b", "c", "d", "e", "f", "g", "h"]
ranks = np.linspace(1, 8, 8, dtype=np.int8)
&nbsp;
array = xr.DataArray(chessboard,
                     name="Saavedra position",
                     dims=("files", "ranks"),
                     coords={"files":files, "ranks":ranks})
&nbsp;
array.attrs["units"] = "chess pieces"
array.attrs["description"] ="White to move and win",
array.attrs["metadata"] = {"played by": "Fernando Saavedra",
                           "winner": "white",
                           "see also": "https://www.youtube.com/watch?v=Mg2OOsQPURs",}
&nbsp;
print(array)
print()
&nbsp;
<i># výběr sloupce</i>
print(array.sel(files="c"))
print()
&nbsp;
<i># výběr řádku</i>
print(array.sel(ranks=6))
print()
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace balíčku <strong>xarray</strong> i jeho tranzitivních závislostí</h2>

<p>Balíček <strong>xarray</strong> je dostupný na <a
href="https://pypi.org/project/xarray/">PyPi</a>, takže je jeho instalace
snadná. V&nbsp;případě, že již máte nainstalovány základní závislosti, což jsou
v&nbsp;tomto konkrétním případě knihovny Numpy a Pandas, proběhne instalace
prakticky okamžitě:</p>

<pre>
$ <strong>pip3 install --user xarray</strong>
&nbsp;
Collecting xarray
  Downloading xarray-0.16.2-py3-none-any.whl (736 kB)
     |████████████████████████████████| 736 kB 1.0 MB/s
Collecting setuptools&gt;=38.4
  Downloading setuptools-59.6.0-py3-none-any.whl (952 kB)
     |████████████████████████████████| 952 kB 2.1 MB/s
Requirement already satisfied: pandas&gt;=0.25 in ./.local/lib/python3.6/site-packages (from xarray) (1.1.4)
Requirement already satisfied: numpy&gt;=1.15 in ./.local/lib/python3.6/site-packages (from xarray) (1.19.4)
Requirement already satisfied: python-dateutil&gt;=2.7.3 in ./.local/lib/python3.6/site-packages (from pandas&gt;=0.25-&gt;xarray) (2.8.1)
Requirement already satisfied: pytz&gt;=2017.2 in /usr/lib/python3.6/site-packages (from pandas&gt;=0.25-&gt;xarray) (2017.2)
Requirement already satisfied: six&gt;=1.5 in ./.local/lib/python3.6/site-packages (from python-dateutil&gt;=2.7.3-&gt;pandas&gt;=0.25-&gt;xarray) (1.11.0)
Installing collected packages: setuptools, xarray
Successfully installed setuptools-59.6.0 xarray-0.16.2
</pre>

<p>Na počítači s&nbsp;&bdquo;čistou&ldquo; instalací Pythonu a nástroje
<strong>pip</strong> se navíc musí nainstalovat i všechny potřebné závislosti,
což jsou především již výše zmíněné knihovny Numpy a Pandas. Instalace tedy
potrvá déle, protože je nutné stáhnout několik megabajtů s&nbsp;tranzitivně
závislými (to je tedy slovní spojení!) balíčky:</p>

<pre>
$ <strong>pip3 install --user xarray</strong>
Collecting xarray
  Downloading xarray-2023.1.0-py3-none-any.whl (973 kB)
     |████████████████████████████████| 973 kB 1.5 MB/s 
Collecting numpy&gt;=1.20
  Downloading numpy-1.24.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.3 MB)
     |████████████████████████████████| 17.3 MB 3.1 MB/s 
Collecting packaging&gt;=21.3
  Downloading packaging-23.2-py3-none-any.whl (53 kB)
     |████████████████████████████████| 53 kB 963 kB/s 
Collecting pandas&gt;=1.3
  Downloading pandas-2.0.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.4 MB)
     |████████████████████████████████| 12.4 MB 4.3 MB/s 
Collecting python-dateutil&gt;=2.8.2
  Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)
     |████████████████████████████████| 247 kB 3.1 MB/s 
Collecting tzdata&gt;=2022.1
  Downloading tzdata-2023.3-py2.py3-none-any.whl (341 kB)
     |████████████████████████████████| 341 kB 3.1 MB/s 
Collecting pytz&gt;=2020.1
  Downloading pytz-2023.3.post1-py2.py3-none-any.whl (502 kB)
     |████████████████████████████████| 502 kB 3.2 MB/s 
Requirement already satisfied: six&gt;=1.5 in /usr/lib/python3/dist-packages (from python-dateutil&gt;=2.8.2-&gt;pandas&gt;=1.3-&gt;xarray) (1.14.0)
Installing collected packages: numpy, packaging, python-dateutil, tzdata, pytz, pandas, xarray
Successfully installed numpy-1.24.4 packaging-23.2 pandas-2.0.3 python-dateutil-2.8.2 pytz-2023.3.post1 tzdata-2023.3 xarray-2023.1.0
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace při použití správce balíčků <i>PDM</i></h2>

<p>Knihovnu <i>xarray</i> je pochopitelně možné nastavit i jako závislý balíček
(přímá závislost popř.&nbsp;vývojová závislost) při použití nástroje PDM, který
byl na Rootu <a
href="https://www.root.cz/clanky/pdm-moderni-spravce-balicku-a-virtualnich-prostredi-pythonu/">popsán
předminulý týden</a>. Ukažme si pro úplnost, jak by mohl vypadat projekt, který
je na knihovně <i>xarray</i> postaven.</p>

<p>Nejprve si necháme vytvořit kostru nového projektu (prozatím bez
závislostí):</p>

<pre>
$ <strong>pdm init</strong>
</pre>

<p>Poctivě odpovíme na položené otázky (většinou jen potvrzením klávesou Enter,
další odpovědi jsou označeny tučně):</p>

<pre>
Creating a pyproject.toml for PDM...
Please enter the Python interpreter to use
0. /usr/bin/python (3.11)
1. /usr/bin/python3.11 (3.11)
2. /usr/bin/python3 (3.11)
Please select (0): <strong>0</strong>
Would you like to create a virtualenv with /usr/bin/python? [y/n] (y): <strong>y</strong>
Virtualenv is created successfully at /home/ptisnovs/test2/.venv
Is the project a library that is installable?
If yes, we will need to ask a few more questions to include the project name and build backend [y/n] (n): <strong>n</strong>
License(SPDX name) (MIT): 
Author name (): <strong>Pavel Tisnovsky</strong>
Author email (): <strong>tisnik@nowhere.us</strong>
Python requires('*' to allow any) (&gt;=3.8): 
Project is initialized successfully
</pre>

<p>Do právě vzniklého projektu ve druhém kroku přidáme závislost na balíčku
<i>xarray</i>:</p>

<pre>
$ <strong>pdm add xarray</strong>
</pre>

<p>V&nbsp;tomto kroku by se měly nainstalovat stejné balíčky, jako při
instalaci přes <strong>pip</strong> (viz <a href="#k02">předchozí
kapitolu</a>):</p>

<pre>
Adding packages to default dependencies: xarray
🔒 Lock successful
Changes are written to pyproject.toml.
Synchronizing working set with resolved packages: 7 to add, 0 to update, 0 to 
remove
&nbsp;
  ✔ Install six 1.16.0 successful
  ✔ Install packaging 23.2 successful
  ✔ Install python-dateutil 2.8.2 successful
  ✔ Install xarray 2023.1.0 successful
  ✔ Install tzdata 2023.3 successful
  ✔ Install pytz 2023.3.post1 successful
  ✔ Install pandas 2.0.3 successful
&nbsp;
🎉 All complete!
</pre>

<p>A výsledný projektový soubor by měl vypadat následovně:</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "", email = ""},
]
dependencies = [
    "numpy&gt;=1.24.4",
    "xarray&gt;=2023.1.0",
]
requires-python = "&gt;=3.8"
readme = "README.md"
license = {text = "MIT"}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Kontrola instalace</h2>

<p>Kontrola, zda instalace proběhla v&nbsp;pořádku, bude prozatím velmi
jednoduchá. Naimportujeme knihovnu <strong>xarray</strong> a necháme si
k&nbsp;ní zobrazit nápovědu, což je triviální:</p>

<pre>
import xarray as xr
&nbsp;
help(xr)
</pre>

<p>Po spuštění tohoto skriptu popř.&nbsp;při zadání obou příkazů do
interaktivního prostředí Pythonu by se měla zobrazit nápověda k&nbsp;balíčku (a
pochopitelně i import by měl proběhnout bez vyhození výjimky):</p>

<pre>
Help on package xarray:
&nbsp;
NAME
    xarray
&nbsp;
PACKAGE CONTENTS
    backends (package)
    coding (package)
    conventions
    convert
    core (package)
    indexes (package)
    plot (package)
    static (package)
    testing
    tests (package)
    tutorial
    util (package)
&nbsp;
CLASSES
    ...
    ...
    ...
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Datový typ <strong>DataArray</strong></h2>

<p>Základním datovým typem, nad nímž je knihovna <i>xarray</i> postavena, je
typ nazvaný <strong>DataArray</strong>. Jedná se o obecné n-rozměrné homogenní
pole, které ovšem může mít pojmenované jednotlivé osy (dimenze), může mít
specifikovány souřadnice v&nbsp;n-rozměrné mřížce (například se může jednat o
časová razítka atd.) a dokonce můžeme poli přiřadit i další atributy. Důležité
je, že tyto atributy jsou zachovány i při provádění různých operací
s&nbsp;tímto datovým typem:</p>

<pre>
Help on class DataArray in module xarray.core.dataarray:
&nbsp;
class DataArray(xarray.core.common.AbstractArray, xarray.core.common.DataWithCoords, xarray.core.arithmetic.DataArrayArithmetic, xarray.core._aggregations.DataArrayAggregations)
 |  DataArray(data: 'Any' = &lt;NA&gt;, coords: 'Sequence[Sequence[Any] | pd.Index | DataArray] | Mapping[Any, Any] | None' = None, dims: 'Hashable | Sequence[Hashable] | None' = None, name: 'Hashable | None' = None, attrs: 'Mapping | None' = None, indexes: 'dict[Hashable, Index] | None' = None, fastpath: 'bool' = False) -&gt; 'None'
 |  
 |  N-dimensional array with labeled coordinates and dimensions.
 |  
 |  DataArray provides a wrapper around numpy ndarrays that uses
 |  labeled dimensions and coordinates to support metadata aware
 |  operations. The API is similar to that for the pandas Series or
 |  DataFrame, but DataArray objects can have any number of dimensions,
 |  and their contents have fixed data types.
 |  
 |  Additional features over raw numpy arrays:
 |  
 |  - Apply operations over dimensions by name: ``x.sum('time')``.
 |  - Select or assign values by integer location (like numpy):
 |    ``x[:10]`` or by label (like pandas): ``x.loc['2014-01-01']`` or
 |    ``x.sel(time='2014-01-01')``.
 |  - Mathematical operations (e.g., ``x - y``) vectorize across
 |    multiple dimensions (known in numpy as "broadcasting") based on
 |    dimension names, regardless of their original order.
 |  - Keep track of arbitrary metadata in the form of a Python
 |    dictionary: ``x.attrs``
 |  - Convert to a pandas Series: ``x.to_series()``.
 |  
 |  Getting items from or doing mathematical operations with a
 |  DataArray always returns another DataArray.
 ...
 ...
 ...
</pre>

<p><div class="rs-tip-major">Poznámka: interně se zde využívají n-rozměrná pole
z&nbsp;balíčku Numpy.</div></p>

<p>Podívejme se nyní, jak lze takové pole vytvořit. Do konstruktoru
<strong>DataArray</strong> můžeme v&nbsp;tom nejjednodušším případě předat
n-rozměrné pole z&nbsp;Numpy, například jednotkovou matici vytvořenou
konstruktorem <strong>numpy.identity(řád matice)</strong>:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
array = xr.DataArray(np.identity(10))
print(array)
</pre>

<p>Funkce <strong>print</strong> zobrazí obsah objektu
<strong>DataArray</strong> v&nbsp;čitelné podobě:</p>

<pre>
&lt;xarray.DataArray (dim_0: 10, dim_1: 10)&gt;
array([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])
Dimensions without coordinates: dim_0, dim_1
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si poznámky o osách
(dimenzích) bez explicitně specifikovaných souřadnic. K&nbsp;tomuto problému se
vrátíme v&nbsp;dalším textu.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Pojmenování os (dimenzí), specifikace souřadnic v&nbsp;jednotlivých dimenzích, pojmenování pole</h2>

<p>Osy (zde nazývané dimenze) mají výchozí jméno &bdquo;dim_0&ldquo;,
&bdquo;dim_1&ldquo; atd. (podle počtu dimenzí pole). Tyto nicneříkající názvy
můžeme přejmenovat při vytváření objektu typu <strong>DataArray</strong>
specifikací nepovinného parametru <strong>dims</strong>. Je to snadné &ndash;
konstruktoru postačí předat n-tici či seznam s&nbsp;názvy:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
array = xr.DataArray(np.identity(10),
                     <strong>dims=("x", "y")</strong>)
print(array)
</pre>

<p>Názvy os (dimenzí) se po spuštění tohoto skriptu zobrazí ve výsledku:</p>

<pre>
&lt;xarray.DataArray (x: 10, y: 10)&gt;
array([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])
Dimensions without coordinates: x, y
</pre>

<p>Stejně důležité je v&nbsp;praxi specifikace souřadnic v&nbsp;jednotlivých
souřadných osách. Prvky pole tedy budou mít kromě celočíselných indexů
přiřazeny i konkrétní souřadnice (například polohu, teplotu, čas, atd.).
Podívejme se, jak lze specifikovat souřadnice v&nbsp;ose, kterou jsme si
explicitně pojmenovali &bdquo;x&ldquo;. Souřadnice se předávají ve slovníku
<strong>coords</strong>:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
array = xr.DataArray(np.identity(10),
                     dims=("x", "y"),
                     <strong>coords={"x":[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}</strong>)
print(array)
</pre>

<p>Výsledné pole (povšimněte si sekce <i>Coordinates</i> i sekce
navazující):</p>

<pre>
&lt;xarray.DataArray (x: 10, y: 10)&gt;
array([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])
<strong>Coordinates</strong>:
  * x        (x) int64 10 20 30 40 50 60 70 80 90 100
<strong>Dimensions without coordinates</strong>: y
</pre>

<p>Samozřejmě nám nic nebrání ve specifikaci souřadnic pro obě osy našeho
dvourozměrného pole. Tentokrát budou souřadnice specifikovány vektorem:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
xcoords = np.linspace(10, 100, 10)
ycoords = np.linspace(-100, -10, 10)
&nbsp;
array = xr.DataArray(np.identity(10),
                     dims=("x", "y"),
                     <strong>coords={"x":xcoords, "y":ycoords}</strong>)
print(array)
</pre>

<p>Výsledek:</p>

<pre>
&lt;xarray.DataArray (x: 10, y: 10)&gt;
array([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])
Coordinates:
  * x        (x) float64 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0
  * y        (y) float64 -100.0 -90.0 -80.0 -70.0 ... -40.0 -30.0 -20.0 -10.0
</pre>

<p>A konečně ještě poli přiřadíme nějaké jméno, což je další standardní
atribut:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = -10 + 40*np.random.rand(10, 10)
&nbsp;
xcoords = np.linspace(10, 100, 10)
ycoords = np.linspace(-100, -10, 10)
&nbsp;
array = xr.DataArray(temperatures,
                     <strong>name="Temperature measurement"</strong>,
                     dims=("x", "y"),
                     coords={"x":xcoords, "y":ycoords})

print(array)
</pre>

<p>Nyní může výsledek vypadat následovně:</p>

<pre>
&lt;xarray.DataArray 'Temperature measurement' (x: 10, y: 10)&gt;
array([[ 2.32647600e+01,  2.80514346e+00,  1.55639979e+01,
        -8.66640844e+00,  1.02604000e+01,  1.43061846e+01,
        -1.50550198e+00,  1.15990642e+01,  2.33254049e+01,
         2.33481511e+01],
       [ 1.67234930e+01,  2.51284240e+01,  5.54117143e+00,
        -5.58609990e+00,  2.67385215e+01, -9.45194606e+00,
         2.69381374e+01, -2.64076192e+00,  1.76559359e+00,
         2.17843960e+01],
         ...
         ...
         ...
       [ 1.18639075e+01,  2.75731272e+01,  2.09509091e+01,
         1.56939796e+01,  2.43195638e+01,  1.36336352e+01,
         1.56647959e+01,  2.36473805e+01,  2.77993553e+01,
         1.35592233e+01],
       [-1.64663391e+00, -1.18151743e+00,  1.86746830e+01,
        -1.54580596e+00,  6.31361942e+00, -8.33521270e+00,
         9.62469380e+00,  1.19293630e+00, -8.01198193e+00,
         3.77753591e+00]])
Coordinates:
  * x        (x) float64 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0
  * y        (y) float64 -100.0 -90.0 -80.0 -70.0 ... -40.0 -30.0 -20.0 -10.0
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Přiřazení dalších uživatelských atributů</h2>

<p>K&nbsp;polím, resp.&nbsp;přesněji řečeno k&nbsp;objektům typu
<strong>DataArray</strong>, lze snadno přiřadit i další atributy, které mohou
být libovolného typu (jen je nutné si dát pozor na případné problémy při
ukládání polí do formátu netCDF, což si ukážeme dále). V&nbsp;dalším
demonstračním příkladu do vytvořeného pole přidáme několik dalších
pojmenovaných atributů zápisem do slovníku <strong>DataArray.attrs</strong>.
Povšimněte si, že hodnotami mohou být například i další slovníky, n-tice atd.
atd.:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = -10 + 40*np.random.rand(10, 10)
&nbsp;
xcoords = np.linspace(10, 100, 10)
ycoords = np.linspace(-100, -10, 10)
&nbsp;
array = xr.DataArray(temperatures,
                     name="Temperature measurement",
                     dims=("x", "y"),
                     coords={"x":xcoords, "y":ycoords})
&nbsp;
<strong>array.attrs["units"]</strong> = "centigrees"
<strong>array.attrs["description"]</strong> ="Local temperature values measured in grid",
<strong>array.attrs["measured by"]</strong> = {"name": "ThermometerBot",
                              "vendor": "BIY",
                              "version": (1, 0, 0)}
&nbsp;
print(array)
</pre>

<p>Atributy jsou vypsány společně se všemi dalšími informacemi o poli:</p>

<pre>
&lt;xarray.DataArray 'Temperature measurement' (x: 10, y: 10)&gt;
array([[10.5832851 , -2.32490932, -5.5881393 ,  0.418035  , 10.60766768,
        24.48854489, 14.06688637, -8.7774459 ,  5.05229998, -1.11231137],
       [17.7745931 , -6.78789311,  1.63416214, 10.47049785, -8.0736508 ,
         7.89837523, 19.39429883, -6.35163393, 18.23288826, -8.52934274],
       [17.01104059, -2.77683528,  6.76134728,  5.36721515,  9.62797089,
        11.25519146, 17.77977519, -2.85977703, -9.77967287,  5.53854267],
       [16.39795885, 15.3228364 , 24.77271425, 23.84860142, 12.59105118,
        26.71223278, 12.93472326, 12.87686291,  2.38745519, -9.89202765],
       [ 0.43474102,  3.90017104, 11.66830096, 17.85339982, -8.94414913,
        -0.95883465, -7.04423858, -0.99590894, -5.34842274,  0.05459278],
       [22.93909906,  6.71161717, 19.96209108, -8.56968358, -6.4280693 ,
        -4.74889956,  7.48179102, 14.95668487, 26.34024394, 20.73641704],
       [20.35649459,  4.91876629, -1.81175122, -7.98758547, -8.3296374 ,
        13.6681342 , -1.54770907, 19.54327137,  2.00960747, 19.51355718],
       [ 7.26390215,  5.07340915, -8.7700297 ,  2.30132815, 28.69651615,
         4.44835462,  1.50046012, 26.87604918, 18.78270925, -5.10117866],
       [14.30112364,  0.50389193,  6.99194032, -8.30147546, 21.33919   ,
        -6.77261547, -0.92636757,  4.08006382, 15.24589196, 12.08606029],
       [ 4.580669  , 10.00008772, 15.56234634, -6.53134212, 11.8121812 ,
        -6.37603482, 10.71300997, 25.90596186, 17.79681462,  9.47069227]])
Coordinates:
  * x        (x) float64 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0
  * y        (y) float64 -100.0 -90.0 -80.0 -70.0 ... -40.0 -30.0 -20.0 -10.0
Attributes:
    units:        centigrees
    description:  ('Local temperature values measured in grid',)
    measured by:  {'name': 'ThermometerBot', 'vendor': 'BIY', 'version': (1, ...
</pre>

<p>Alternativně je možné atributy nastavit přímo při konstrukci pole typu
<strong>DataArray</strong>, a to specifikací nepovinného atributu
<strong>attrs</strong>. Tento postup je ukázán na dalším příkladu:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = -10 + 40*np.random.rand(10, 10)
&nbsp;
xcoords = np.linspace(10, 100, 10)
ycoords = np.linspace(-100, -10, 10)
&nbsp;
array = xr.DataArray(temperatures,
                     name="Temperature measurement",
                     dims=("x", "y"),
                     coords={"x":xcoords, "y":ycoords},
                     attrs=dict(
                         units = "centigrees",
                         description ="Local temperature values measured in grid",
                         measured_by = {"name": "ThermometerBot",
                              "vendor": "BIY",
                              "version": (1, 0, 0)}
                         ))
&nbsp;
&nbsp;
print(array)
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto a dalších příkladech
explicitně používám konstruktor <strong>dict</strong> pro uživatelské atributy.
Samozřejmě je však možné použít přímo &bdquo;literál&ldquo; ve formě
{prvky_slovníku}. Výsledek bude totožný.</div></p>

<p>Výsledek bude vypadat takto:</p>

<pre>
&lt;xarray.DataArray 'Temperature measurement' (x: 10, y: 10)&gt;
array([[23.2576271 , -2.15779202, 17.5443984 , 21.07597796, 10.56049287,
        29.07426336, -3.65466472,  9.79700303, 11.76340949, 14.79519823],
       [24.63298382, 17.74715879,  0.60019018, -0.8598743 ,  5.07014205,
        11.37652831,  2.25657343, 21.52399783, -2.36153402, 11.16127697],
       [17.38473719,  4.88292401, 16.746297  ,  2.73729571, 20.98158579,
        19.05244522, -7.10327481, 19.02122539,  5.72791239, 23.42325136],
       [29.63847975, 22.97463667, -8.71680645, 23.17846176, -1.50461374,
        -2.5930478 , 14.94336694, 26.55283565,  1.77010509, 26.68586834],
       [ 6.26370305, 15.29240368, 24.82652106, 28.41207708, 25.02094536,
         1.58548248, -9.07739674, 24.42454772, 27.31781816, 18.87826056],
       [ 8.61993635, 19.14889656, 19.76866295, 17.83522801, -3.56479117,
        18.59088179, 29.7079522 , -7.79032716, 22.02287043, 28.06321914],
       [-5.07439459, -2.55489334, -6.80073133, -8.11352206, 14.07990422,
         4.10234674, 14.97487831, 21.35397355,  2.77982491,  6.14347479],
       [ 0.44349296, 29.28705309,  3.74470177,  3.58964699,  9.63450628,
        -3.01921671,  6.1531892 , 16.83808275, -1.46114794, 22.98582524],
       [-0.25700688, 16.88119187, -8.86471902, 21.76825227, -8.78371084,
        20.8501691 , 27.77968551, -7.85864626, -9.07993012, -8.70373661],
       [-4.28096512, 22.95255284,  8.17621111, 19.76970543, 11.0936614 ,
        -4.10484249, 26.17673632, -0.80783274, -1.92738157, -4.07289025]])
Coordinates:
  * x        (x) float64 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0
  * y        (y) float64 -100.0 -90.0 -80.0 -70.0 ... -40.0 -30.0 -20.0 -10.0
Attributes:
    units:        centigrees
    description:  Local temperature values measured in grid
    measured_by:  {'name': 'ThermometerBot', 'vendor': 'BIY', 'version': (1, ...
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vícedimenzionální koordináty, 3D pole</h2>

<p>Knihovna <i>xarray</i> umožňuje používat i takzvané vícedimenzionální
koordináty. Je to ukázáno na dalším příkladu, v&nbsp;němž se používají
<i>logické</i> koordináty <strong>longitues</strong> a
<strong>latitudes</strong>, které jsou odvozeny z&nbsp;<i>fyzických</i>
koordinát reprezentovaných hodnotami na osách <strong>x</strong> a
<strong>y</strong>. Takto zapsané koordináty se používají například při
vykreslování, což je téma navazujícího článku:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = -10 + 40*np.random.rand(2, 2)
&nbsp;
longitudes = [[-99.83, -99.32], [-99.79, -99.23]]
latitudes = [[42.25, 42.21], [42.63, 42.59]]
&nbsp;
array = xr.DataArray(temperatures,
                     name="Temperature measurement",
                     dims=("x", "y"),
                     coords=dict(
                        lon=(["x", "y"], longitudes),
                        lat=(["x", "y"], latitudes),
                     ),
                     attrs=dict(
                         units = "centigrees",
                         description ="Local temperature values measured in grid",
                         measured_by = {"name": "ThermometerBot",
                              "vendor": "BIY",
                              "version": (1, 0, 0)}
                         ))
&nbsp;
&nbsp;
print(array)
</pre>

<p>Z&nbsp;výpisu je patrné, že pole má stále velikost pouze 2&times;2
prvky:</p>

<pre>
array([[19.06037142, -7.87284455],
       [27.94244297, 10.81820761]])
Coordinates:
    lon      (x, y) float64 -99.83 -99.32 -99.79 -99.23
    lat      (x, y) float64 42.25 42.21 42.63 42.59
Dimensions without coordinates: x, y
Attributes:
    units:        centigrees
    description:  Local temperature values measured in grid
    measured_by:  {'name': 'ThermometerBot', 'vendor': 'BIY', 'version': (1, ...
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto konkrétním případě budeme
moci při přístupu k&nbsp;prvkům používat metodu &bdquo;nearest&ldquo;, která
nalezne i prvek v&nbsp;případě, že zadáme koordináty, které leží mimo přesné
hodnoty na osách. Opět se jedná o téma, kterému se budeme podrobněji věnovat
příště.</div></p>

<p>Nezávisle na volbě koordinát samozřejmě můžeme pracovat i
s&nbsp;vícerozměrnými poli. Příkladem může být pole se třemi osami (dimenzemi),
kde třetí dimenzí bude čas:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = -10 + 40*np.random.rand(2, 2, 3)
&nbsp;
longitudes = [[-99.83, -99.32], [-99.79, -99.23]]
latitudes = [[42.25, 42.21], [42.63, 42.59]]
times = ["2023-10-01", "2023-10-02", "2023-10-03"]
&nbsp;
array = xr.DataArray(temperatures,
                     name="Temperature measurement",
                     dims=("x", "y", "time"),
                     coords=dict(
                        lon=(["x", "y"], longitudes),
                        lat=(["x", "y"], latitudes),
                        time=times,
                     ),
                     attrs=dict(
                         units = "centigrees",
                         description ="Local temperature values measured in grid",
                         measured_by = {"name": "ThermometerBot",
                              "vendor": "BIY",
                              "version": (1, 0, 0)}
                         ))
&nbsp;
&nbsp;
print(array)
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti se nejedná o příliš dobrý
příklad, protože časové hodnoty by měly být reprezentovány typem
<strong>numpy.timedelta</strong>, protože jen tehdy budou dostupné i mnohé
složitější <i>selektory</i>.</div></p>

<p>Výsldek:</p>

<pre>
array([[[ 1.09668425,  2.00419139,  5.51502503],
        [20.53512088, -4.33673027, 18.02246637]],

       [[25.73788498, -2.226619  , 19.64667429],
        [ 0.55226708,  3.82939432, 11.70746199]]])
Coordinates:
    lon      (x, y) float64 -99.83 -99.32 -99.79 -99.23
    lat      (x, y) float64 42.25 42.21 42.63 42.59
  * time     (time) &lt;U10 '2023-10-01' '2023-10-02' '2023-10-03'
Dimensions without coordinates: x, y
Attributes:
    units:        centigrees
    description:  Local temperature values measured in grid
    measured_by:  {'name': 'ThermometerBot', 'vendor': 'BIY', 'version': (1, ...
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;bloku
<strong>Coordinates</strong> jsou hvězdičkou označeny jednodimenzionální
koordináty.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Přístup k&nbsp;atributům polí</h2>

<p>Velmi snadno je možné přistupovat k&nbsp;následujícím atributům objektu
<strong>DataArray</strong>: jeho jménu, uloženým hodnotám, koordinátům,
dimenzím a taktéž k&nbsp;uživatelským atributům. Je to velmi snadné &ndash;
použije se standardní tečková notace tak, jak je to ukázáno v&nbsp;následujícím
demonstračním příkladu:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = -10 + 40*np.random.rand(2, 2, 3)
&nbsp;
longitudes = [[-99.83, -99.32], [-99.79, -99.23]]
latitudes = [[42.25, 42.21], [42.63, 42.59]]
times = ["2023-10-01", "2023-10-02", "2023-10-03"]
&nbsp;
array = xr.DataArray(temperatures,
                     name="Temperature measurement",
                     dims=("x", "y", "time"),
                     coords=dict(
                        lon=(["x", "y"], longitudes),
                        lat=(["x", "y"], latitudes),
                        time=times,
                     ),
                     attrs=dict(
                         units = "centigrees",
                         description ="Local temperature values measured in grid",
                         measured_by = {"name": "ThermometerBot",
                              "vendor": "BIY",
                              "version": (1, 0, 0)}
                         ))
&nbsp;
&nbsp;
print(array)
print()
print()
&nbsp;
print("Name")
print(<strong>array.name</strong>)
print()
&nbsp;
print("Values")
print(<strong>array.values</strong>)
print()
&nbsp;
print("Coords")
print(<strong>array.coords</strong>)
print()
&nbsp;
print("Attributes")
print(<strong>array.attrs</strong>)
print()
</pre>

<p>Zobrazené výsledky ukazují, jaké informace jsou v&nbsp;jednotlivých
atributech uloženy (nadpisy jsem zvýraznil ručně):</p>

<pre>
&lt;xarray.DataArray 'Temperature measurement' (x: 2, y: 2, time: 3)&gt;
array([[[-2.25069401, -1.24318547, -8.79751399],
        [ 8.69104338, 29.770204  , -0.62751908]],

       [[ 7.60403569, 16.76061332, 10.71663607],
        [ 2.55393168, 20.98851206,  4.2413965 ]]])
Coordinates:
    lon      (x, y) float64 -99.83 -99.32 -99.79 -99.23
    lat      (x, y) float64 42.25 42.21 42.63 42.59
  * time     (time) &lt;U10 '2023-10-01' '2023-10-02' '2023-10-03'
Dimensions without coordinates: x, y
Attributes:
    units:        centigrees
    description:  Local temperature values measured in grid
    measured_by:  {'name': 'ThermometerBot', 'vendor': 'BIY', 'version': (1, ...
&nbsp;
&nbsp;
<strong>Name</strong>
Temperature measurement
&nbsp;
<strong>Values</strong>
[[[-2.25069401 -1.24318547 -8.79751399]
  [ 8.69104338 29.770204   -0.62751908]]
&nbsp;
 [[ 7.60403569 16.76061332 10.71663607]
  [ 2.55393168 20.98851206  4.2413965 ]]]
&nbsp;
<strong>Coords</strong>
Coordinates:
    lon      (x, y) float64 -99.83 -99.32 -99.79 -99.23
    lat      (x, y) float64 42.25 42.21 42.63 42.59
  * time     (time) &lt;U10 '2023-10-01' '2023-10-02' '2023-10-03'
&nbsp;
<strong>Attributes</strong>
{'units': 'centigrees', 'description': 'Local temperature values measured in grid', 'measured_by': {'name': 'ThermometerBot', 'vendor': 'BIY', 'version': (1, 0, 0)}}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Uložení polí do formátu NetCDF</h2>

<p>Knihovna <i>xarray</i> podporuje ukládání dat (tedy jak n-rozměrných polí
s&nbsp;metainformacemi, tak i sady těchto polí) do formátu <i>NetCDF</i> neboli
<i>Network Common Data Form</i>. Jedná se o poměrně starý formát, protože práce
na na něm začaly již v&nbsp;roce 1988. Tento původní formát se dnes nazývá
&bdquo;classic NetCDF format&ldquo; a zajímavé je, že se stále používá (ostatně
stále se používá například i <a
href="https://www.root.cz/serialy/graficky-format-gif/">grafický formát GIF</a>
z&nbsp;roku 1987 resp.&nbsp;jeho nová verze z&nbsp;roku 1989). Čtvrtá verze
formátu NetCDF z&nbsp;roku 2008 již přímo zmiňuje formát HDF. NetCDF obsahuje
hlavičku za níž následují jednotlivá pole a prakticky libovolné množství
záznamů s&nbsp;metadaty o těchto polích ve formě dvojic klíč-hodnota.
V&nbsp;současnosti je tento formát podporován v&nbsp;mnoha ekosystémech,
například v&nbsp;ekosystému programovacího jazyka Python, jazyka Julia,
v&nbsp;Mathematice, MATLABu atd. (již z&nbsp;tohoto výčtu je patrné, že tento
formát je primárně určen pro uložení vědeckých dat).</p>

<p>Uložení objektu typu <strong>DataArray</strong> do formátu <i>NetCDF</i> je
na první pohled snadné, protože postačuje použít metodu
<strong>DataArray.to_netcdf</strong>, které se předá jméno výsledného
souboru:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = -10 + 40*np.random.rand(10, 10)
&nbsp;
xcoords = np.linspace(10, 100, 10)
ycoords = np.linspace(-100, -10, 10)
&nbsp;
array = xr.DataArray(temperatures,
                     name="Temperature measurement",
                     dims=("x", "y"),
                     coords={"x":xcoords, "y":ycoords},
                     attrs=dict(
                         units = "centigrees",
                         description ="Local temperature values measured in grid",
                         measured_by = {"name": "ThermometerBot",
                              "vendor": "BIY",
                              "version": (1, 0, 0)}
                         ))
&nbsp;
&nbsp;
print(array)
array.to_netcdf("temperatures.nc")
</pre>

<p>Ve skutečnosti je však pro uložení v&nbsp;tomto formátu nezbytné
nainstalovat buď balíček <strong>netCDF4-Python</strong> nebo knihovnu
<strong>SciPy</strong>, která potřebnou funkcionalitu podporuje:</p>

<pre>
$ <strong>pdm add scipy</strong>
&nbsp;
Adding packages to default dependencies: scipy
🔒 Lock successful
Changes are written to pyproject.toml.
Synchronizing working set with resolved packages: 1 to add, 0 to update, 0 to
remove
&nbsp;
  ✔ Install scipy 1.9.3 successful
&nbsp;
🎉 All complete!
</pre>

<p>Výsledkem bude upravený projektový soubor a samozřejmě i všechny
nainstalované balíčky:</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "", email = ""},
]
dependencies = [
    "numpy&gt;=1.24.4",
    "xarray&gt;=2023.1.0",
    "scipy&gt;=1.9.3",
]
requires-python = "&gt;=3.8"
readme = "README.md"
license = {text = "MIT"}
</pre>

<p>Nyní se pokusíme o export. Ten se ovšem nepodaří, neboť atributy ve formátu
netCDF4 mohou být jen číselné či řetězcové. Proto si skript nepatrně upravíme
do podoby:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = -10 + 40*np.random.rand(10, 10)
&nbsp;
xcoords = np.linspace(10, 100, 10)
ycoords = np.linspace(-100, -10, 10)
&nbsp;
array = xr.DataArray(temperatures,
                     name="Temperature measurement",
                     dims=("x", "y"),
                     coords={"x":xcoords, "y":ycoords},
                     attrs=dict(
                         units = "centigrees",
                         description ="Local temperature values measured in grid"))
&nbsp;
&nbsp;
print(array)
array.to_netcdf("temperatures.nc")
</pre>

<p>Nyní již k&nbsp;exportu došlo a vznikl tento soubor:</p>

<pre>
$ <strong>ls -l temperatures.nc</strong>
-rw-r--r--. 1 ptisnovs ptisnovs 1356 Oct 28 08:55 temperatures.nc
&nbsp;
$ <strong>file temperatures.nc</strong>
temperatures.nc: NetCDF Data Format data (64-bit offset)
</pre>

<p>Ten je přenositelný i do všech dalších systémů, které formát netCDF
podporují.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Přečtení koordinát na zvolené ose ve formě nového pole</h2>

<p>Samotné koordináty jsou v&nbsp;knihovně <i>xarray</i> velmi důležitým
konceptem. Můžeme je kdykoli přečíst selektorem
<strong>pole.coords[název_dimenze]</strong>, přičemž výsledkem bude (jak
typické) další pole typu <strong>DataArray</strong>, jehož jméno bude odpovídat
jménu zvolené (čtené) osy (tedy dimenze). Ostatně si to můžeme velmi snadno
otestovat:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = -10 + 40*np.random.rand(10, 10, 3)
&nbsp;
xcoords = np.linspace(10, 100, 10)
ycoords = np.linspace(-100, -10, 10)
&nbsp;
times = ["2023-10-01", "2023-10-02", "2023-10-03"]
&nbsp;
array = xr.DataArray(temperatures,
                     name="Temperature measurement",
                     dims=("x", "y", "time"),
                     coords={"x":xcoords, "y":ycoords, "time":times},
                     attrs=dict(
                         units = "centigrees",
                         description ="Local temperature values measured in grid",
                         measured_by = {"name": "ThermometerBot",
                              "vendor": "BIY",
                              "version": (1, 0, 0)}
                         ))
&nbsp;
&nbsp;
print(array)
print()
&nbsp;
print(<strong>array.coords["x"]</strong>)
print()
&nbsp;
print(<strong>array.coords["y"]</strong>)
print()
&nbsp;
print(<strong>array.coords["time"]</strong>)
print()
</pre>

<p>Výsledky jsou poměrně dobře čitelné:</p>

<pre>
&lt;xarray.DataArray 'x' (x: 10)&gt;
array([ 10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.])
Coordinates:
  * x        (x) float64 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0
&nbsp;
&lt;xarray.DataArray 'y' (y: 10)&gt;
array([-100.,  -90.,  -80.,  -70.,  -60.,  -50.,  -40.,  -30.,  -20.,  -10.])
Coordinates:
  * y        (y) float64 -100.0 -90.0 -80.0 -70.0 ... -40.0 -30.0 -20.0 -10.0
&nbsp;
&lt;xarray.DataArray 'time' (time: 3)&gt;
array(['2023-10-01', '2023-10-02', '2023-10-03'], dtype='&lt;U10')
Coordinates:
  * time     (time) &lt;U10 '2023-10-01' '2023-10-02' '2023-10-03'
</pre>

<p>Dokonce je možné použít ještě kratší zápis
<strong>pole[název_dimenze]</strong> (což ovšem může být matoucí &ndash;
nejedná se o výběr prvku pole):</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = -10 + 40*np.random.rand(10, 10, 3)
&nbsp;
xcoords = np.linspace(10, 100, 10)
ycoords = np.linspace(-100, -10, 10)
&nbsp;
times = ["2023-10-01", "2023-10-02", "2023-10-03"]
&nbsp;
array = xr.DataArray(temperatures,
                     name="Temperature measurement",
                     dims=("x", "y", "time"),
                     coords={"x":xcoords, "y":ycoords, "time":times},
                     attrs=dict(
                         units = "centigrees",
                         description ="Local temperature values measured in grid",
                         measured_by = {"name": "ThermometerBot",
                              "vendor": "BIY",
                              "version": (1, 0, 0)}
                         ))
&nbsp;
&nbsp;
print(array)
print()
&nbsp;
print(<strong>array["x"]</strong>)
print()
&nbsp;
print(<strong>array["y"]</strong>)
print()
&nbsp;
print(<strong>array["time"]</strong>)
print()
</pre>

<p>Výsledky by měly být totožné s&nbsp;předchozím příkladem:</p>

<pre>
&lt;xarray.DataArray 'x' (x: 10)&gt;
array([ 10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.])
Coordinates:
  * x        (x) float64 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0
&nbsp;
&lt;xarray.DataArray 'y' (y: 10)&gt;
array([-100.,  -90.,  -80.,  -70.,  -60.,  -50.,  -40.,  -30.,  -20.,  -10.])
Coordinates:
  * y        (y) float64 -100.0 -90.0 -80.0 -70.0 ... -40.0 -30.0 -20.0 -10.0
&nbsp;
&lt;xarray.DataArray 'time' (time: 3)&gt;
array(['2023-10-01', '2023-10-02', '2023-10-03'], dtype='&lt;U10')
Coordinates:
  * time     (time) &lt;U10 '2023-10-01' '2023-10-02' '2023-10-03'
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Použití číselných indexů při přístupu k&nbsp;prvkům n-dimenzionálních polí</h2>

<p>Podobně jako v&nbsp;knihovně Numpy, i v&nbsp;případě použití <i>xarray</i>
lze k&nbsp;prvkům n-dimenzionálních polí přistupovat přes celočíselné indexy,
čímž se vlastně obchází koncept dimenzí a koordinát. Podívejme se na příklad
trojrozměrného pole o rozměrech 10&times;10&times;3 prvky. Použijeme tři typy
celočíselných indexů:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = np.arange(0, 300).reshape((10, 10, 3))
&nbsp;
xcoords = np.linspace(10, 100, 10)
ycoords = np.linspace(-100, -10, 10)
&nbsp;
times = ["2023-10-01", "2023-10-02", "2023-10-03"]
&nbsp;
array = xr.DataArray(temperatures,
                     name="Temperature measurement",
                     dims=("x", "y", "time"),
                     coords={"x":xcoords, "y":ycoords, "time":times},
                     attrs=dict(
                         units = "centigrees",
                         description ="Local temperature values measured in grid",
                         measured_by = {"name": "ThermometerBot",
                              "vendor": "BIY",
                              "version": (1, 0, 0)}
                         ))
&nbsp;
&nbsp;
print(array)
print()
&nbsp;
print(<strong>array[0]</strong>)
print()
&nbsp;
print(<strong>array[0][2]</strong>)
print()
&nbsp;
print(<strong>array[:,2]</strong>)
print()
</pre>

<p>Výsledná pole (protože výsledkem jsou buď skaláry nebo pole):</p>

<pre>
<strong>array[0]</strong> - získání 2D matice z 3D pole
&lt;xarray.DataArray 'Temperature measurement' (y: 10, time: 3)&gt;
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11],
       [12, 13, 14],
       [15, 16, 17],
       [18, 19, 20],
       [21, 22, 23],
       [24, 25, 26],
       [27, 28, 29]])
Coordinates:
    x        float64 10.0
  * y        (y) float64 -100.0 -90.0 -80.0 -70.0 ... -40.0 -30.0 -20.0 -10.0
  * time     (time) &lt;U10 '2023-10-01' '2023-10-02' '2023-10-03'
Attributes:
    units:        centigrees
    description:  Local temperature values measured in grid
    measured_by:  {'name': 'ThermometerBot', 'vendor': 'BIY', 'version': (1, ...
&nbsp;
&nbsp;
&nbsp;
<strong>array[0][2]</strong> - získání 1D vektoru z 3D pole (sloupec časů)
&lt;xarray.DataArray 'Temperature measurement' (time: 3)&gt;
array([6, 7, 8])
Coordinates:
    x        float64 10.0
    y        float64 -80.0
  * time     (time) &lt;U10 '2023-10-01' '2023-10-02' '2023-10-03'
Attributes:
    units:        centigrees
    description:  Local temperature values measured in grid
    measured_by:  {'name': 'ThermometerBot', 'vendor': 'BIY', 'version': (1, ...
&nbsp;
&nbsp;
&nbsp;
<strong>array[:,2]</strong> - získání 2D matice z 3D pole (jiný typ řezu)
&lt;xarray.DataArray 'Temperature measurement' (x: 10, time: 3)&gt;
array([[  6,   7,   8],
       [ 36,  37,  38],
       [ 66,  67,  68],
       [ 96,  97,  98],
       [126, 127, 128],
       [156, 157, 158],
       [186, 187, 188],
       [216, 217, 218],
       [246, 247, 248],
       [276, 277, 278]])
Coordinates:
  * x        (x) float64 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0
    y        float64 -80.0
  * time     (time) &lt;U10 '2023-10-01' '2023-10-02' '2023-10-03'
Attributes:
    units:        centigrees
    description:  Local temperature values measured in grid
    measured_by:  {'name': 'ThermometerBot', 'vendor': 'BIY', 'version': (1, ...
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Využití operací <strong>isel</strong> a <strong>sel</strong> při přístupu k&nbsp;prvkům n-dimenzionálních polí</h2>

<p>K&nbsp;prvkům n-dimenzionálních polí (což jsou buď přímo skalární prvky,
vektory, matice nebo další pole) lze ovšem přistupovat i dalšími způsoby.
Knihovna <i>Xarray</i> v&nbsp;tomto ohledu nabízí především operaci nazvanou
<strong>isel</strong>, která umožňuje specifikovat osu (její název) a současně
i index (nikoli souřadnici!) na této ose. To je mnohdy mnohem čitelnější, než
použití pozičních argumentů.  Ostatně si to můžeme velmi snadno otestovat:</p>

<pre>
print(<strong>array.isel(x=4)</strong>)
print()
&nbsp;
print(<strong>array.isel(y=4)</strong>)
print()
</pre>

<p>Ještě užitečnější je specifikace osy a souřadnice na této ose (tedy nikoli
indexu). Pro tento účel je určena operace nazvaná <strong>sel</strong>:</p>

<pre>
print(<strong>array.sel(time="2023-10-02")</strong>)
print()
</pre>

<p>Výsledkem výběru je opět datová struktura <strong>DataArray</strong>, což
nám umožňuje navázání většího množství výběrových operací:</p>

<pre>
print(<strong>array.sel(time="2023-10-02").isel(x=0</strong>))
print()
&nbsp;
print(<strong>array.sel(time="2023-10-02").isel(x=0).isel(y=0)</strong>)
print()
</pre>

<p>Vše si vyzkoušíme na následujícím příkladu s&nbsp;trojrozměrným polem:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = np.arange(0, 300).reshape((10, 10, 3))
&nbsp;
xcoords = np.linspace(10, 100, 10)
ycoords = np.linspace(-100, -10, 10)
&nbsp;
times = ["2023-10-01", "2023-10-02", "2023-10-03"]
&nbsp;
array = xr.DataArray(temperatures,
                     name="Temperature measurement",
                     dims=("x", "y", "time"),
                     coords={"x":xcoords, "y":ycoords, "time":times},
                     attrs=dict(
                         units = "centigrees",
                         description ="Local temperature values measured in grid",
                         measured_by = {"name": "ThermometerBot",
                              "vendor": "BIY",
                              "version": (1, 0, 0)}
                         ))
&nbsp;
&nbsp;
print(array)
print()
&nbsp;
print(<strong>array.isel(x=4)</strong>)
print()
&nbsp;
print(<strong>array.isel(y=4)</strong>)
print()
&nbsp;
print(<strong>array.sel(time="2023-10-02")</strong>)
print()
&nbsp;
print(<strong>array.sel(time="2023-10-02").isel(x=0)</strong>)
print()
&nbsp;
print(<strong>array.sel(time="2023-10-02").isel(x=0).isel(y=0)</strong>)
print()
</pre>

<p>Výsledky všech pěti výběrů z&nbsp;původního pole:</p>

<pre>
print(<strong>array.isel(x=4)</strong>)
&nbsp;
&nbsp;
&nbsp;
&lt;xarray.DataArray 'Temperature measurement' (y: 10, time: 3)&gt;
array([[120, 121, 122],
       [123, 124, 125],
       [126, 127, 128],
       [129, 130, 131],
       [132, 133, 134],
       [135, 136, 137],
       [138, 139, 140],
       [141, 142, 143],
       [144, 145, 146],
       [147, 148, 149]])
Coordinates:
    x        float64 50.0
  * y        (y) float64 -100.0 -90.0 -80.0 -70.0 ... -40.0 -30.0 -20.0 -10.0
  * time     (time) &lt;U10 '2023-10-01' '2023-10-02' '2023-10-03'
Attributes:
    units:        centigrees
    description:  Local temperature values measured in grid
    measured_by:  {'name': 'ThermometerBot', 'vendor': 'BIY', 'version': (1, ...
</pre>

<pre>
print(<strong>array.isel(y=4)</strong>)
&nbsp;
&nbsp;
&nbsp;
&lt;xarray.DataArray 'Temperature measurement' (x: 10, time: 3)&gt;
array([[ 12,  13,  14],
       [ 42,  43,  44],
       [ 72,  73,  74],
       [102, 103, 104],
       [132, 133, 134],
       [162, 163, 164],
       [192, 193, 194],
       [222, 223, 224],
       [252, 253, 254],
       [282, 283, 284]])
Coordinates:
  * x        (x) float64 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0
    y        float64 -60.0
  * time     (time) &lt;U10 '2023-10-01' '2023-10-02' '2023-10-03'
Attributes:
    units:        centigrees
    description:  Local temperature values measured in grid
    measured_by:  {'name': 'ThermometerBot', 'vendor': 'BIY', 'version': (1, ...
</pre>

<pre>
print(<strong>array.sel(time="2023-10-02")</strong>)
&nbsp;
&nbsp;
&nbsp;
&lt;xarray.DataArray 'Temperature measurement' (x: 10, y: 10)&gt;
array([[  1,   4,   7,  10,  13,  16,  19,  22,  25,  28],
       [ 31,  34,  37,  40,  43,  46,  49,  52,  55,  58],
       [ 61,  64,  67,  70,  73,  76,  79,  82,  85,  88],
       [ 91,  94,  97, 100, 103, 106, 109, 112, 115, 118],
       [121, 124, 127, 130, 133, 136, 139, 142, 145, 148],
       [151, 154, 157, 160, 163, 166, 169, 172, 175, 178],
       [181, 184, 187, 190, 193, 196, 199, 202, 205, 208],
       [211, 214, 217, 220, 223, 226, 229, 232, 235, 238],
       [241, 244, 247, 250, 253, 256, 259, 262, 265, 268],
       [271, 274, 277, 280, 283, 286, 289, 292, 295, 298]])
Coordinates:
  * x        (x) float64 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0
  * y        (y) float64 -100.0 -90.0 -80.0 -70.0 ... -40.0 -30.0 -20.0 -10.0
    time     &lt;U10 '2023-10-02'
Attributes:
    units:        centigrees
    description:  Local temperature values measured in grid
    measured_by:  {'name': 'ThermometerBot', 'vendor': 'BIY', 'version': (1, ...
</pre>

<pre>
print(<strong>array.sel(time="2023-10-02").isel(x=0)</strong>)
&nbsp;
&nbsp;
&nbsp;
&lt;xarray.DataArray 'Temperature measurement' (y: 10)&gt;
array([ 1,  4,  7, 10, 13, 16, 19, 22, 25, 28])
Coordinates:
    x        float64 10.0
  * y        (y) float64 -100.0 -90.0 -80.0 -70.0 ... -40.0 -30.0 -20.0 -10.0
    time     &lt;U10 '2023-10-02'
Attributes:
    units:        centigrees
    description:  Local temperature values measured in grid
    measured_by:  {'name': 'ThermometerBot', 'vendor': 'BIY', 'version': (1, ...
</pre>

<pre>
print(<strong>array.sel(time="2023-10-02").isel(x=0).isel(y=0)</strong>)
&nbsp;
&nbsp;
&nbsp;
&lt;xarray.DataArray 'Temperature measurement' ()&gt;
array(1)
Coordinates:
    x        float64 10.0
    y        float64 -100.0
    time     &lt;U10 '2023-10-02'
Attributes:
    units:        centigrees
    description:  Local temperature values measured in grid
    measured_by:  {'name': 'ThermometerBot', 'vendor': 'BIY', 'version': (1, ...
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se stále zachovávají
všechny relevantní metainformace získané z&nbsp;původního pole!</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Základní aritmetické a relační operace s&nbsp;polem (broadcasting)</h2>

<pre>
import numpy as np
import xarray as xr

temperatures = -10 + 40*np.random.rand(5, 5)

xcoords = np.linspace(10, 100, 5)
ycoords = np.linspace(-100, -10, 5)

array = xr.DataArray(temperatures,
                     name="Temperature measurement",
                     dims=("x", "y"),
                     coords={"x":xcoords, "y":ycoords},
                     attrs=dict(
                         units = "centigrees",
                         description ="Local temperature values measured in grid",
                         measured_by = {"name": "ThermometerBot",
                              "vendor": "BIY",
                              "version": (1, 0, 0)}
                         ))


print(array)
print()

print(-array)
print()

print(array * 2)
print()

print(array.round())
print()
</pre>

<pre>
import numpy as np
import xarray as xr

temperatures = -10 + 40*np.random.rand(5, 5)

xcoords = np.linspace(10, 100, 5)
ycoords = np.linspace(-100, -10, 5)

array = xr.DataArray(temperatures,
                     name="Temperature measurement",
                     dims=("x", "y"),
                     coords={"x":xcoords, "y":ycoords},
                     attrs=dict(
                         units = "centigrees",
                         description ="Local temperature values measured in grid",
                         measured_by = {"name": "ThermometerBot",
                              "vendor": "BIY",
                              "version": (1, 0, 0)}
                         ))


print(array)
print()

print(array &gt;= 0)
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Konverze pole operací <strong>where</strong></h2>

<p>Operace <strong>where</strong> umožňuje konvertovat jedno pole na pole jiné
na základě zapsané podmínky. Snadno například můžeme zkonvertovat 2D pole
s&nbsp;naměřenými teplotami na jiné pole, v&nbsp;němž budou zapsány pouze
informace o tom, zda je teplota pod bodem nebo nad bodem mrazu:</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = -10 + 40*np.random.rand(5, 5)
&nbsp;
xcoords = np.linspace(10, 100, 5)
ycoords = np.linspace(-100, -10, 5)
&nbsp;
array = xr.DataArray(temperatures,
                     name="Temperature measurement",
                     dims=("x", "y"),
                     coords={"x":xcoords, "y":ycoords},
                     attrs=dict(
                         units = "centigrees",
                         description ="Local temperature values measured in grid",
                         measured_by = {"name": "ThermometerBot",
                              "vendor": "BIY",
                              "version": (1, 0, 0)}
                         ))
&nbsp;
&nbsp;
print(array)
print()
&nbsp;
print(<strong>xr.where(array &lt;= 0, "freezing", "above 0°C")</strong>)
</pre>

<p>Po spuštění tohoto skriptu se nejdříve vypíše původní pole a posléze pole
obsahující pouze prvky se dvěma možnými hodnotami (mrzne, teplota nad bodem
mrazu):</p>

<pre>
&lt;xarray.DataArray 'Temperature measurement' (x: 5, y: 5)&gt;
array([[ 5.09135141, 14.87737191, 26.92786592, 19.53857612,  1.99129423],
       [-5.40843065, 20.34764162, 17.73095444, -4.79341295, 15.15640546],
       [ 5.01924974,  4.57123972, 24.84870027, 24.26450989, -2.46815504],
       [-6.95834721, -3.89831812, 22.64776767, 10.0516584 , 20.16149552],
       [12.52627837, 23.93366452, 25.61122643, -8.34828794, 20.23273152]])
Coordinates:
  * x        (x) float64 10.0 32.5 55.0 77.5 100.0
  * y        (y) float64 -100.0 -77.5 -55.0 -32.5 -10.0
Attributes:
    units:        centigrees
    description:  Local temperature values measured in grid
    measured_by:  {'name': 'ThermometerBot', 'vendor': 'BIY', 'version': (1, ...
&nbsp;
&lt;xarray.DataArray 'Temperature measurement' (x: 5, y: 5)&gt;
array([['above 0°C', 'above 0°C', 'above 0°C', 'above 0°C', 'above 0°C'],
       ['freezing', 'above 0°C', 'above 0°C', 'freezing', 'above 0°C'],
       ['above 0°C', 'above 0°C', 'above 0°C', 'above 0°C', 'freezing'],
       ['freezing', 'freezing', 'above 0°C', 'above 0°C', 'above 0°C'],
       ['above 0°C', 'above 0°C', 'above 0°C', 'freezing', 'above 0°C']],
      dtype='&lt;U9')
Coordinates:
  * x        (x) float64 10.0 32.5 55.0 77.5 100.0
  * y        (y) float64 -100.0 -77.5 -55.0 -32.5 -10.0
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že i ve druhém případě se
stále pracuje s&nbsp;typem <strong>DataArray</strong>.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Množina polí: datový typ <strong>DataSet</strong></h2>

<p>Datový typ <strong>DataSet</strong> umožňuje uložení většího množství polí
do jediné datové struktury s&nbsp;tím, že tato pole mohou sdílet stejné osy
(dimenze) a koordináty:</p>

*** image ***
<p><i>Obrázek 2: Vztah mezi poli, jejich počtem dimenzí a osami (dimenzemi)
v&nbsp;DataSetu.</i></p>

<p>Prozatím si ukažme velmi jednoduchý příklad, v&nbsp;němž bude množina polí
obsahovat dvě pole s&nbsp;teplotami a rychlostí větru (obě pole jsou, na rozdíl
od obrázku, jen dvoudimenzionální):</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = -10 + 40*np.random.rand(10, 10)
wind = 100*np.random.rand(10, 10)
&nbsp;
xcoords = np.linspace(10, 100, 10)
ycoords = np.linspace(-100, -10, 10)
&nbsp;
dataset = <strong>xr.Dataset({"temperatures": (["x", "y"], temperatures),</strong>
                      <strong>"wind": (["x", "y"], wind)},</strong>
                       <strong>coords={"x":xcoords, "y":ycoords})</strong>
&nbsp;
print(dataset)
</pre>

<p>DataSet se zobrazí takto:</p>

<pre>
Dimensions:       (x: 10, y: 10)
Coordinates:
  * x             (x) float64 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0
  * y             (y) float64 -100.0 -90.0 -80.0 -70.0 ... -30.0 -20.0 -10.0
Data variables:
    temperatures  (x, y) float64 -6.135 -4.41 5.464 14.3 ... 16.53 -4.616 -2.667
    wind          (x, y) float64 31.51 4.919 50.45 52.2 ... 23.57 62.56 89.88
</pre>

<p>Shodné rozměry polí se při konstrukci datasetu kontrolují (protože se sdílí
koordináty):</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = -10 + 40*np.random.rand(10, 10)
wind = 100*np.random.rand(20, 20)
&nbsp;
xcoords = np.linspace(10, 100, 10)
ycoords = np.linspace(-100, -10, 10)
&nbsp;
dataset = xr.Dataset({"temperatures": (["x", "y"], temperatures),
                      "wind": (["x", "y"], wind)},
                       coords={"x":xcoords, "y":ycoords})
&nbsp;
print(dataset)
</pre>

<p>V&nbsp;tomto případě je vyhozena výjimka informující o rozdílných rozměrech
polí:</p>

<pre>
ValueError: conflicting sizes for dimension 'x': length 20 on 'wind' and length 10 on {'x': 'temperatures', 'y': 'temperatures'}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Dataset s&nbsp;dvojicí trojrozměrných polí</h2>

<p>V&nbsp;dalším demonstračním příkladu je ukázána konstrukce <i>Datasetu</i>
s&nbsp;dvojicí trojrozměrných polí. První pole obsahuje teploty změřené
v&nbsp;mřížce v&nbsp;určitém časovém intervalu, druhé pole pak obsahuje sílu
větru. Obě pole sdílí osy (dimenze) i souřadnice na nich (koordináty):</p>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures = -10 + 40*np.random.rand(2, 2, 3)
wind = 100*np.random.rand(2, 2, 3)
&nbsp;
longitudes = [[-99.83, -99.32], [-99.79, -99.23]]
latitudes = [[42.25, 42.21], [42.63, 42.59]]
times = ["2023-10-01", "2023-10-02", "2023-10-03"]
&nbsp;
dataset = xr.Dataset({"temperatures": (["x", "y", "time"], temperatures),
                      "wind": (["x", "y", "time"], wind)},
                      coords={
                          "lon": (["x", "y"], longitudes),
                          "lat": (["x", "y"], latitudes),
                          "time": times})
&nbsp;
&nbsp;
print(dataset)
&nbsp;
print()
print("Temperatures:")
print(<strong>dataset["temperatures"]</strong>)
&nbsp;
print()
print("Wind:")
print(<strong>dataset["wind"]</strong>)
</pre>

<p>Po spuštění tohoto skriptu se zobrazí jak celý původní dataset, tak i
jednotlivá pole, která z&nbsp;něho byla přečtena:</p>

<pre>
<xarray.Dataset>
Dimensions:       (x: 2, y: 2, time: 3)
Coordinates:
    lon           (x, y) float64 -99.83 -99.32 -99.79 -99.23
    lat           (x, y) float64 42.25 42.21 42.63 42.59
  * time          (time) <U10 '2023-10-01' '2023-10-02' '2023-10-03'
Dimensions without coordinates: x, y
Data variables:
    temperatures  (x, y, time) float64 24.16 -1.54 0.6033 ... 26.13 23.31 -6.954
    wind          (x, y, time) float64 62.01 67.12 43.23 ... 49.47 20.94 62.97

Temperatures:
<xarray.DataArray 'temperatures' (x: 2, y: 2, time: 3)>
array([[[24.16258661, -1.53957247,  0.60330884],
        [18.93054758, 24.08112626, -2.11897159]],

       [[27.1337761 ,  1.59080802, -5.46317688],
        [26.13170764, 23.30735881, -6.95440354]]])
Coordinates:
    lon      (x, y) float64 -99.83 -99.32 -99.79 -99.23
    lat      (x, y) float64 42.25 42.21 42.63 42.59
  * time     (time) <U10 '2023-10-01' '2023-10-02' '2023-10-03'
Dimensions without coordinates: x, y

Wind:
<xarray.DataArray 'wind' (x: 2, y: 2, time: 3)>
array([[[62.01079346, 67.11864438, 43.22516902],
        [19.36766203, 48.18517828, 39.55293065]],

       [[88.02526604,  6.9555846 , 13.95148965],
        [49.46957983, 20.93642261, 62.97467643]]])
Coordinates:
    lon      (x, y) float64 -99.83 -99.32 -99.79 -99.23
    lat      (x, y) float64 42.25 42.21 42.63 42.59
  * time     (time) <U10 '2023-10-01' '2023-10-02' '2023-10-03'
Dimensions without coordinates: x, y
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Operace nad poli s&nbsp;odlišnou souřadnou mřížkou</h2>

<pre>
import numpy as np
import xarray as xr
&nbsp;
temperatures1 = np.arange(100).reshape(10, 10)
temperatures2 = np.array([100]*100).reshape(10, 10)
&nbsp;
xcoords1 = np.linspace(1, 10, 10)
ycoords1 = np.linspace(1, 10, 10)
&nbsp;
print("Coordinates for 1st DataArray")
print("x:", xcoords1)
print("y:", ycoords1)
print()
&nbsp;
xcoords2 = np.linspace(6, 15, 10)
ycoords2 = np.linspace(6, 15, 10)
&nbsp;
print("Coordinates for 2nd DataArray")
print("x:", xcoords2)
print("y:", ycoords2)
print()
&nbsp;
array1 = xr.DataArray(temperatures1,
                      name="Temperature measurement #1",
                      dims=("x", "y"),
                      coords={"x":xcoords1, "y":ycoords1},
                      attrs=dict(
                          units = "centigrees",
                          description ="Local temperature values measured in grid #1",
                          measured_by = {"name": "ThermometerBot",
                               "vendor": "BIY",
                               "version": (1, 0, 0)}
                          ))
&nbsp;
&nbsp;
array2 = xr.DataArray(temperatures2,
                      name="Temperature measurement #2",
                      dims=("x", "y"),
                      coords={"x":xcoords2, "y":ycoords2},
                      attrs=dict(
                          units = "centigrees",
                          description ="Local temperature values measured in grid #2",
                          measured_by = {"name": "ThermometerBot",
                               "vendor": "BIY",
                               "version": (1, 0, 0)}
                          ))
&nbsp;
&nbsp;
print(array1)
print()
print()
&nbsp;
print(array2)
print()
print()
&nbsp;
array3 = array1 + array2
print(array3)
print()
print()
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty, které jsme si ukázali v&nbsp;dnešním článku,
naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je nutné mít
nainstalovánu knihovnu <i>xarray</i> a její závislosti, zejména
<i>Numpy</i>):</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>01_help.py</td><td>vestavěná nápověda k&nbsp;balíčku <strong>xarray</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/01_help.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/01_help.py</a></td></tr>
<tr><td> 2</td><td>02_raw_xarray.py</td><td>konstrukce instance typu <strong>DataArray</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/02_raw_xarray.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/02_raw_xarray.py</a></td></tr>
<tr><td> 3</td><td>03_xarray_metadata.py</td><td>metadata přidaná k&nbsp;datové struktuře <strong>DataArray</strong>: specifikace dimenzí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/03_xarray_metadata.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/03_xarray_metadata.py</a></td></tr>
<tr><td> 4</td><td>04_xarray_metadata.py</td><td>metadata přidaná k&nbsp;datové struktuře <strong>DataArray</strong>: specifikace koordinát pro jednu dimenzi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/04_xarray_metadata.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/04_xarray_metadata.py</a></td></tr>
<tr><td> 5</td><td>05_xarray_metadata.py</td><td>metadata přidaná k&nbsp;datové struktuře <strong>DataArray</strong>: specifikace koordinát pro dvojici dimenzí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/05_xarray_metadata.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/05_xarray_metadata.py</a></td></tr>
<tr><td> 6</td><td>06_xarray_metadata.py</td><td>metadata přidaná k&nbsp;datové struktuře <strong>DataArray</strong>: specifikace jména n-dimenzionálního pole</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/06_xarray_metadata.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/06_xarray_metadata.py</a></td></tr>
<tr><td> 7</td><td>07_xarray_custom_attributes.py</td><td>přidání vlastních atributů k&nbsp;datové struktuře <strong>DataArray</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/07_xarray_custom_attributes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/07_xarray_custom_attributes.py</a></td></tr>
<tr><td> 8</td><td>08_xarray_custom_attributes.py</td><td>přidání vlastních atributů k&nbsp;datové struktuře <strong>DataArray</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/08_xarray_custom_attributes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/08_xarray_custom_attributes.py</a></td></tr>
<tr><td> 9</td><td>09_multiple_dimensions.py</td><td>vícedimenzionální pole a jeho atributy (různé koordináty)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/09_multiple_dimensions.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/09_multiple_dimensions.py</a></td></tr>
<tr><td>10</td><td>10_multiple_dimensions.py</td><td>vícedimenzionální pole a jeho atributy (tři rozměry)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/10_multiple_dimensions.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/10_multiple_dimensions.py</a></td></tr>
<tr><td>11</td><td>11_properties.py</td><td>přečtení vlastností vícedimenzionálních polí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/11_properties.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/11_properties.py</a></td></tr>
<tr><td>12</td><td>12_netcdf_write.py</td><td>uložení polí do formátu NetCDF</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/12_netcdf_write.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/12_netcdf_write.py</a></td></tr>
<tr><td>13</td><td>13_get_coordinate.py</td><td>získání zvolených koordinát</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/13_get_coordinate.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/13_get_coordinate.py</a></td></tr>
<tr><td>14</td><td>14_get_coordinate.py</td><td>získání zvolených koordinát</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/14_get_coordinate.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/14_get_coordinate.py</a></td></tr>
<tr><td>15</td><td>15_get_by_coordinate.py</td><td>přečtení části pole na základě zadaných koordinát</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/15_get_by_coordinate.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/15_get_by_coordinate.py</a></td></tr>
<tr><td>16</td><td>16_sel_isel.py</td><td>výběr prvků pole metodami <strong>set</strong> a <strong>isel</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/16_sel_isel.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/16_sel_isel.py</a></td></tr>
<tr><td>17</td><td>17_basic_math.py</td><td>matematické operace nad celými poli (jako v&nbsp;Numpy)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/17_basic_math.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/17_basic_math.py</a></td></tr>
<tr><td>18</td><td>18_condition.py</td><td>podmínka aplikovaná na všechny prvky pole</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/18_condition.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/18_condition.py</a></td></tr>
<tr><td>19</td><td>19_where.py</td><td>transformace pole s&nbsp;využitím podmínky <strong>where</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/19_where.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/19_where.py</a></td></tr>
<tr><td>20</td><td>21_dataset.py</td><td>základní použití datového typu <strong>Dataset</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/21_dataset.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/21_dataset.py</a></td></tr>
<tr><td>21</td><td>21_dataset.py</td><td>kontrola, zda mají pole totožnou velikost</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/21_dataset.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/21_dataset.py</a></td></tr>
<tr><td>22</td><td>22_dataset.py</td><td>komplikovanější definice instance datového typu <strong>Dataset</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/22_dataset.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/22_dataset.py</a></td></tr>
<tr><td>23</td><td>23_math_coords.py</td><td>operace nad poli s&nbsp;odlišnou souřadnou mřížkou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/23_math_coords.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/23_math_coords.py</a></td></tr>
<tr><td>24</td><td>24_chess.py</td><td>reprezentace šachovnice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/24_chess.py">https://github.com/tisnik/most-popular-python-libs/blob/master/xarray/24_chess.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Xarray documentation<br />
<a href="https://docs.xarray.dev/en/stable/index.html">https://docs.xarray.dev/en/stable/index.html</a>
</li>

<li>Xarray na stránkách PyPi<br />
<a href="https://pypi.org/project/xarray/">https://pypi.org/project/xarray/</a>
</li>

<li>Xarray tutorial<br />
<a href="https://tutorial.xarray.dev/intro.html">https://tutorial.xarray.dev/intro.html</a>
</a>

<li>Repositář knihovny xarray<br />
<a href="https://github.com/pydata/xarray">https://github.com/pydata/xarray</a>
</li>

<li>A Simple File Format for NumPy Arrays<br />
<a href="https://docs.scipy.org/doc/numpy-1.14.2/neps/npy-format.html">https://docs.scipy.org/doc/numpy-1.14.2/neps/npy-format.html</a>
</li>

<li>Stránky projektu Numpy<br />
<a href="https://numpy.org/">https://numpy.org/</a>
</li>

<li>Stránky projektu Pandas<br />
<a href="https://pandas.pydata.org/">https://pandas.pydata.org/</a>
</li>

<li>numpy.lib.format<br />
<a href="https://numpy.org/devdocs/reference/generated/numpy.lib.format.html">https://numpy.org/devdocs/reference/generated/numpy.lib.format.html</a>
</li>

<li>The NumPy array: a structure for efficient numerical computation<br />
<a href="https://arxiv.org/pdf/1102.1523.pdf">https://arxiv.org/pdf/1102.1523.pdf</a>
</li>

<li>A Gentle Introduction to Pandas Data Analysis (on Kaggle)<br />
<a href="https://www.youtube.com/watch?v=_Eb0utIRdkw&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&index=4">https://www.youtube.com/watch?v=_Eb0utIRdkw&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&amp;index=4</a>
</li>

<li>Speed Up Your Pandas Dataframes<br />
<a href="https://www.youtube.com/watch?v=u4_c2LDi4b8&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&index=5">https://www.youtube.com/watch?v=u4_c2LDi4b8&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&amp;index=5</a>
</li>

<li>numpy.ndarray.tofile<br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile">https://numpy.org/doc/stable/reference/generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile</a>
</li>

<li>numpy.fromfile<br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.fromfile.html">https://numpy.org/doc/stable/reference/generated/numpy.fromfile.html</a>
</li>

<li>How to read part of binary file with numpy?<br />
<a href="https://stackoverflow.com/questions/14245094/how-to-read-part-of-binary-file-with-numpy">https://stackoverflow.com/questions/14245094/how-to-read-part-of-binary-file-with-numpy</a>
</li>

<li>How to read binary files in Python using NumPy?<br />
<a href="https://stackoverflow.com/questions/39762019/how-to-read-binary-files-in-python-using-numpy">https://stackoverflow.com/questions/39762019/how-to-read-binary-files-in-python-using-numpy</a>
</li>

<li>numpy.save<br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.save.html#numpy.save">https://numpy.org/doc/stable/reference/generated/numpy.save.html#numpy.save</a>
</li>

<li>numpy.load<br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.load.html#numpy.load">https://numpy.org/doc/stable/reference/generated/numpy.load.html#numpy.load</a>
</li>

<li>SciPy<br />
<a href="https://scipy.org/">https://scipy.org/</a>
</a>

<li>Načítání a ukládání dat uložených v&nbsp;N-rozměrných polích v&nbsp;jazyku Go<br />
<a href="https://www.root.cz/clanky/nacitani-a-ukladani-dat-ulozenych-v-n-rozmernych-polich-v-jazyku-go/">https://www.root.cz/clanky/nacitani-a-ukladani-dat-ulozenych-v-n-rozmernych-polich-v-jazyku-go/</a>
</a>

<li>Network Common Data Form (NetCDF)<br />
<a href="https://www.unidata.ucar.edu/software/netcdf/">https://www.unidata.ucar.edu/software/netcdf/</a>
</a>

<li>xray: N D Labeled Arrays and Datasets | SciPy 2015 | Stephan Hoyer <br />
<a href="https://www.youtube.com/watch?v=X0pAhJgySxk">https://www.youtube.com/watch?v=X0pAhJgySxk</a>
</a>

<li>Xarray Tutorial | xarray fundamentals (Youtube, přetočte si prvních osm nebo devět minut přípravy)<br />
<a href="https://www.youtube.com/watch?v=a339Q5F48UQ">https://www.youtube.com/watch?v=a339Q5F48UQ</a>
</a>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

