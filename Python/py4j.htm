<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>


<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. Alternativní řešení propojení Pythonu s&nbsp;ekosystémem Javy</a></p>
<p><a href="#k16">*** 16. JPype</a></p>
<p><a href="#k17">*** 17. Python na GraalVM</a></p>
<p><a href="#k18">*** 18. Jython</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p><i>&bdquo;Interview Guido van Rossum: “I'd rather write code than papers.”&ldquo;</i></p>

<p>Jak jsme se již zmínili v&nbsp;předchozím odstavci, vznikl programovací jazyk Python na samotném začátku devadesátých let minulého století. Z&nbsp;mnoha pohledů se jednalo o důležitý mezník v&nbsp;rozvoji IT, protože právě tehdy se začala stále více rozšiřovat myšlenka, že programovací jazyky určené <i>pro vývoj plnohodnotných aplikací</i> lze zhruba rozdělit do dvou kategorií &ndash; překládané systémové jazyky a jazyky skriptovací.  Samozřejmě, že se skriptovací jazyky používaly i před tímto obdobím, ale většinou se jednalo o relativně primitivní formy předpisů pro dávkové úlohy (výjimkou je například již zmíněný jazyk Rexx, jehož vyjadřovací prostředky již byly na vysoké úrovni) a převažoval názor, že plnohodnotné aplikace musí být psány v&nbsp;překládaných jazycích, tedy typicky v&nbsp;jazycích ALGOLské větvě se statickým typováním (schválně nepíšu se silným typováním, to je sice související, ovšem odlišná vlastnost).</p>

<p>V&nbsp;průběhu devadesátých let se tedy zpočátku mírně opovrhované skriptovací jazyky staly mnohdy nedílnou součástí mnoha profesionálních aplikací. Celý vývoj a s&nbsp;ním související myšlenkový posun byl nakonec shrnut ve slavném článku <a href="https://web.stanford.edu/~ouster/cgi-bin/home.php">Johna Ousterhouta</a> &bdquo;Scripting: Higher Level Programming for the 21st Century&ldquo;, v&nbsp; němž se opakovala myšlenka na souběžné a koopertivní použití dvou jazyků &ndash; systémového a skriptovacího.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
$ <strong>pip3 install --user py4j</strong>
&nbsp;
Collecting py4j
  Using cached https://files.pythonhosted.org/packages/30/42/25ad191f311fcdb38b750d49de167abd535e37a144e730a80d7c439d1751/py4j-0.10.9.1-py2.py3-none-any.whl
    100% |████████████████████████████████| 204kB 1.3MB/s 
Installing collected packages: py4j
Successfully installed py4j-0.10.9.1
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Příprava brány na straně JVM</h2>

<pre>
$ <strong>javac -cp py4j0.10.9.1.jar Gateway1.java</strong>
</pre>

<pre>
$ <strong>javac -cp ~/.local/share/py4j/py4j0.10.9.1.jar Gateway1.java</strong>
</pre>

<pre>
$ <strong>export CLASSPATH=~/.local/share/py4j/py4j0.10.9.1.jar:$CLASSPATH</strong>
$ <strong>javac Gateway1.java</strong>
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
$ <strong>java Gateway1</strong>
&nbsp;
Starting gateway server
Exception in thread "main" java.lang.NoClassDefFoundError: py4j/GatewayServer
        at Gateway1.main(Gateway1.java:7)
Caused by: java.lang.ClassNotFoundException: py4j.GatewayServer
        at java.net.URLClassLoader.findClass(URLClassLoader.java:382)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
        ... 1 more
</pre>

<pre>
$ <strong>java -cp ~/.local/share/py4j/py4j0.10.9.1.jar:. Gateway1</strong>
</pre>

<pre>
$ <strong>export CLASSPATH=~/.local/share/py4j/py4j0.10.9.1.jar:$CLASSPATH</strong>
$ <strong>java Gateway1</strong>
</pre>

<pre>
Starting gateway server
gateway server started
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
$ <strong>netstat -lt</strong>
&nbsp;
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 localhost:ircu-3        0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:sunrpc          0.0.0.0:*               LISTEN     
tcp        0      0 localhost:domain        0.0.0.0:*               LISTEN     
tcp        0      0 localhost.locald:domain 0.0.0.0:*               LISTEN     
tcp        0      0 localhost.locald:domain 0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:ssh             0.0.0.0:*               LISTEN     
tcp6       0      0 [::]:sunrpc             [::]:*                  LISTEN     
tcp6       0      0 <strong>localhost:25333</strong>         [::]:*                  LISTEN     
tcp6       0      0 [::]:ssh                [::]:*                  LISTEN     
</pre>

<pre>
$ <strong>netstat -tlp</strong>
&nbsp;
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 localhost:ircu-3        0.0.0.0:*               LISTEN      -                   
tcp        0      0 0.0.0.0:sunrpc          0.0.0.0:*               LISTEN      -                   
tcp        0      0 localhost:domain        0.0.0.0:*               LISTEN      -                   
tcp        0      0 localhost.locald:domain 0.0.0.0:*               LISTEN      -                   
tcp        0      0 localhost.locald:domain 0.0.0.0:*               LISTEN      -                   
tcp        0      0 0.0.0.0:ssh             0.0.0.0:*               LISTEN      -                   
tcp6       0      0 [::]:sunrpc             [::]:*                  LISTEN      -                   
tcp6       0      0 <strong>localhost:25333</strong>         [::]:*                  LISTEN      21828/java          
tcp6       0      0 [::]:ssh                [::]:*                  LISTEN      -                   
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
import py4j.GatewayServer;
&nbsp;
public class <strong>Gateway2</strong> {
&nbsp;
    public String <strong>getMessage</strong>() {
        return "Hello from Java!";
    }
&nbsp;
    public static void <strong>main</strong>(String[] args) {
        System.out.println("Starting gateway server");
        GatewayServer gatewayServer = new GatewayServer(<strong>new Gateway2()</strong>);
        gatewayServer.start();
        System.out.println("gateway server started");
    }
&nbsp;
}
</pre>

<pre>
from py4j.java_gateway import JavaGateway
&nbsp;
gateway = <strong>JavaGateway()</strong>
&nbsp;
message = gateway.entry_point.<strong>getMessage()</strong>
print(message)
&nbsp;
input("Press Enter to continue...")
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
import py4j.GatewayServer;
&nbsp;
class <strong>EntryPoint1</strong> {
    public String getMessage() {
        return "Hello from entrypoint #1";
    }
}
&nbsp;
class <strong>EntryPoint2</strong> {
    public String getMessage() {
        return "Hello from entrypoint #2";
    }
}
&nbsp;
public class <strong>Gateway3</strong> {
&nbsp;
    public static void main(String[] args) {
        System.out.println("Starting two gateway servers");
&nbsp;
        GatewayServer gatewayServer1 = new GatewayServer(<strong>new EntryPoint1(), 20001</strong>);
        gatewayServer1.start();
&nbsp;
        GatewayServer gatewayServer2 = new GatewayServer(<strong>new EntryPoint2(), 20002</strong>);
        gatewayServer2.start();
&nbsp;
        System.out.println("gateway servers started");
    }
&nbsp;
}
</pre>

<pre>
$ <strong>netstat -ntl</strong>
&nbsp;
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 127.0.0.1:6667          0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN     
tcp        0      0 127.0.0.1:53            0.0.0.0:*               LISTEN     
tcp        0      0 192.168.122.1:53        0.0.0.0:*               LISTEN     
tcp        0      0 192.168.130.1:53        0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN     
tcp6       0      0 127.0.0.1:20001         :::*                    LISTEN     
tcp6       0      0 127.0.0.1:20002         :::*                    LISTEN     
tcp6       0      0 :::111                  :::*                    LISTEN     
tcp6       0      0 :::22                   :::*                    LISTEN     
</pre>


<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
from py4j.java_gateway import JavaGateway, GatewayParameters
&nbsp;
gateway1 = JavaGateway(gateway_parameters=GatewayParameters(port=20001))
gateway2 = JavaGateway(gateway_parameters=GatewayParameters(port=20002))
&nbsp;
message = gateway1.entry_point.getMessage()
print(message)
&nbsp;
message = gateway2.entry_point.getMessage()
print(message)
&nbsp;
input("Press Enter to continue...")
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Alternativní řešení propojení Pythonu s&nbsp;ekosystémem Javy</h2>

<p>Kromě projektu <i>py4j</i> vzniklo i několik dalších projektů, jejichž cílem je umožnění využití ekosystému programovacího jazyka Java z&nbsp;Pythonu. Tyto projekty je možné rozdělit do dvou kategorií. První kategorii již známe &ndash; je to propojení běžného Pythonu (typicky CPythonu popř.&nbsp;PyPi) s&nbsp;virtuálním strojem Javy s&nbsp;využitím vhodného komunikačního mechanismu. Do této kategorie spadá jak již popsaný <i>py4j</i>, tak i <a href="#k16">dále zmíněný</a> projekt nazvaný <i>JPype</i> (ovšem vlastní komunikace je řešena odlišnými prostředky). A do druhé kategorie lze zařadit implementaci Pythonu buď přímo pro klasický virtuální stroj Javy (<i>Jython</i>) nebo jeho úprava pro běh nad <i>GraalVM</i>, což je podle mého názoru technologie, která by se v&nbsp;budoucnu měla prosadit do větší míry, než je tomu v&nbsp;současnosti.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. JPype</h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. Python na GraalVM</h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Jython</h2>

<p>Jython je jméno implementace programovacího jazyka Python určená pro běh ve virtuálním stroji jazyka Java (<i>JVM &ndash; Java Virtual Machine</i>). A nejenom to &ndash; aplikace psané v&nbsp;Jythonu mohou <i>kooperovat</i> s&nbsp;třídami a rozhraními vytvořenými v&nbsp;Javě, což je pro mnoho aplikací velmi výhodné, protože s&nbsp;rostoucí složitostí moderních aplikací je většinou zapotřebí mít k&nbsp;dispozici vhodný skriptovací jazyk sloužící jako &bdquo;lepidlo&ldquo; (<i>glue</i>) mezi jednotlivými bloky, z&nbsp;nichž se aplikace skládá (viz slavný a ve své době dosti provokující <a href="https://users.ece.utexas.edu/~adnan/top/ousterhout-scripting.pdf">Ousterhoutův článek o skriptovacích jazycích</a>). Jython ovšem samozřejmě není dokonalý. Jednou z&nbsp;jeho nevýhod je fakt, že je stále postaven na dnes již obstarožním Pythonu 2, druhou nevýhodou pak ta skutečnost, že se jedná o dosti pomalý jazyk. Tato pomalost se negativně projeví zejména při výpočtech a někdy i při manipulaci s&nbsp;rozsáhlými datovými strukturami, ovšem u aplikací, v&nbsp;nichž převládají I/O operace se nemusí jednat o kritický nedostatek.</p>

*** image ***
<p><i>Obrázek 7: Logo programovacího jazyka Jython.</i></p>

<p><div class="rs-tip-major">Poznámka: na druhou stranu je nutné poznamenat, že v&nbsp;době, kdy Jython vznikl (pod jménem JPython již v&nbsp;roce 1999, pod novým jménem vydán před dvaceti lety, tedy v&nbsp;roce 2001), se kromě samotné Javy jednalo o nejpropracovanější programovací jazyk určený pro běh na JVM. I z&nbsp;toho důvodu byl relativně často využíván pro skriptování v&nbsp;různých enterprise systémech, například i ve <a href="https://www.informit.com/store/websphere-application-server-administration-using-jython-9780137009527">WebSphere</a>, <a href="https://docs.oracle.com/cd/E12839_01/web.1111/e13715/using_wlst.htm#WLSTG118">Oracle WebLogicu</a> atd. O to problematičtější se zdá být praktické zastavení vývoje Jythonu.</div></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
Python 3 a Javu od verze 1.8 byly uloženy do Git repositáře dostupného na
adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th>#</th><th>Jméno souboru</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td>1</td><td>Gateway1.java</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py4j/Gateway1.java">https://github.com/tisnik/most-popular-python-libs/blob/master/py4j/Gateway1.java</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>2</td><td>Gateway2.java</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py4j/Gateway2.java">https://github.com/tisnik/most-popular-python-libs/blob/master/py4j/Gateway2.java</a></td></tr>
<tr><td>3</td><td>UseGateway2.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py4j/UseGateway2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py4j/UseGateway2.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>Gateway3.java</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py4j/Gateway3.java">https://github.com/tisnik/most-popular-python-libs/blob/master/py4j/Gateway3.java</a></td></tr>
<tr><td>5</td><td>UseGateway3.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py4j/UseGateway3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py4j/UseGateway3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Welcome to Py4J<br />
<a href="https://www.py4j.org/index.html">https://www.py4j.org/index.html</a>
</li>

<li>Getting Started with Py4J<br />
<a href="https://www.py4j.org/getting_started.html">https://www.py4j.org/getting_started.html</a>
</li>

<li>py4j 0.10.9.2 na PyPi<br />
<a href="https://pypi.org/project/py4j/">https://pypi.org/project/py4j/</a>
</li>

<li>PATH and CLASSPATH<br />
<a href="https://docs.oracle.com/javase/tutorial/essential/environment/paths.html">https://docs.oracle.com/javase/tutorial/essential/environment/paths.html</a>
</li>

<li>Modern High-Performance Python<br />
<a href="https://www.graalvm.org/python/">https://www.graalvm.org/python/</a>
</li>

<li>Moving from Jython to GraalVM<br />
<a href="https://medium.com/graalvm/moving-from-jython-to-graalvm-cf52c4af6106">https://medium.com/graalvm/moving-from-jython-to-graalvm-cf52c4af6106</a>
</li>

<li>Scripting: Higher Level Programmingfor the 21st Century<br />
<a href="https://users.ece.utexas.edu/~adnan/top/ousterhout-scripting.pdf">https://users.ece.utexas.edu/~adnan/top/ousterhout-scripting.pdf</a>
</li>

<li>Rediscovering  Ousterhout’s  Dichotomy  in  the  21st Century while Developing and Deploying Software for Set-Theoretic Empirical Analysis:From R to Python/Qt to OCaml and Tcl/Tk<br />
<a href="https://www.tcl.tk/community/tcl2019/assets/talk167/Slides.pdf">https://www.tcl.tk/community/tcl2019/assets/talk167/Slides.pdf</a>
</li>

<li>WebSphere Application Server Administration Using Jython<br />
<a href="https://www.informit.com/store/websphere-application-server-administration-using-jython-9780137009527">https://www.informit.com/store/websphere-application-server-administration-using-jython-9780137009527</a>
</li>

<li>Introduction to the Python implementation for GraalVM<br />
<a href="https://medium.com/graalvm/how-to-contribute-to-graalpython-7fd304fe8bb9">https://medium.com/graalvm/how-to-contribute-to-graalpython-7fd304fe8bb9</a>
</li>

<li>GraalVM: Python Quick Start<br />
<a href="https://www.graalvm.org/python/quickstart/">https://www.graalvm.org/python/quickstart/</a>
</li>

<li>GraalVM Python: Interoperability<br />
<a href="https://github.com/oracle/graalpython/blob/master/docs/user/Interoperability.md">https://github.com/oracle/graalpython/blob/master/docs/user/Interoperability.md</a>
</li>

<li>Py4j na Stack Overflow<br />
<a href="https://stackoverflow.com/tags/py4j/info">https://stackoverflow.com/tags/py4j/info</a>
</li>

<li>Py4J 0.8.2.1 Released<br />
<a href="https://py4j.wordpress.com/">https://py4j.wordpress.com/</a>
</li>

<li>PySpark<br />
<a href="https://databricks.com/glossary/pyspark">https://databricks.com/glossary/pyspark</a>
</li>

<li>PySpark Internals (Outdated)<br />
<a href="https://cwiki.apache.org/confluence/display/SPARK/PySpark+Internals">https://cwiki.apache.org/confluence/display/SPARK/PySpark+Internals</a>
</li>

<li>JPype<br />
<a href="http://jpype.sourceforge.net/index.html">http://jpype.sourceforge.net/index.html</a>
</li>

<li>JPype1 1.2.1 na PyPi<br />
<a href="https://pypi.org/project/JPype1/">https://pypi.org/project/JPype1/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

