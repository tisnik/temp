<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Použití MoviePy společně Matplotlibem pro tvorbu animovaných grafů</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Použití MoviePy společně Matplotlibem pro tvorbu animovaných grafů</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části článku o knihovně MoviePy si ukážeme, jak je možné s využitím kombinace knihoven MoviePy + Matplotlib vytvořit animované grafy. Nejedná se jen o pouhé efekty, protože animované grafy lze využít například pro zobrazení složitějších funkcí.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Použití MoviePy společně Matplotlibem pro tvorbu animovaných grafů</a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Použití MoviePy společně Matplotlibem pro tvorbu animovaných grafů</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vykreslení průběhu funkce sinus s&nbsp;využitím knihovny Matplotlib</h2>

<p>Na úvod si popíšeme velmi jednoduchý demonstrační příklad (naprogramovaný
v&nbsp;Pythonu 3), který po svém spuštění vykreslí graf s&nbsp;průběhem funkce
sinus. V&nbsp;příkladu nalezneme pouze osm programových řádků. Nejprve je nutné
naimportovat hlavní modul knihovny <i>Numpy</i> nazvaný <strong>numpy</strong>
a následně i submodul <strong>plt</strong> z&nbsp;knihovny <i>matplotlib</i>.
Většina aplikací, ale i demonstračních příkladů, s&nbsp;nimiž se setkáte,
používá pro importované moduly zkratky <strong>np</strong> a
<strong>plt</strong>, čehož se z&nbsp;důvodu zachování konzistence budeme držet
i my. Následně je pomocí funkce <strong>numpy.linspace()</strong> (tu již dobře
známe z&nbsp;předchozího článku) vytvořeno pole sta prvků s&nbsp;hodnotami od 0
do 2&pi;. Na toto pole je aplikována funkce <strong>numpy.sin()</strong>,
jejímž výsledkem je nové stoprvkové pole (hodnoty prvků leží v&nbsp;rozsahu od
-1 do 1).</p>

<p>Funkcí <strong>matplotlib.pyplot.plot()</strong> je vykreslen průběh funkce,
ovšem graf ještě není zobrazen, takže do něj můžeme přidat popis obou os a graf
následně zobrazit příkazem <strong>matplotlib.pyplot.show()</strong>. Způsob
zobrazení závisí na nastavení Pythonu; implicitně se použije speciální
prohlížeč naprogramovaný s&nbsp;použitím knihovny Tk (resp.&nbsp;Tkinter):</p>

<pre>
<i># Knihovny Numpy a matplotlib</i>
<i>#</i>
<i># První demonstrační příklad:</i>
<i># - vykreslení průběhu funkce sin</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
x = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># hodnoty na y-ové ose</i>
y = np.sin(x)
&nbsp;
<i># vykreslit průběh funkce</i>
plt.plot(x, y)
&nbsp;
<i># popis os</i>
plt.xlabel("x")
plt.ylabel("sin(x)")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 1: Průběh funkce sin(x) vykreslený prvním demonstračním
příkladem.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Volba výstupního souboru</h2>

<p>Implicitní prohlížeč, o němž jsme se zmínili <a href="#k02">v&nbsp;předchozí
kapitole</a>, sice dokáže uložit nakreslený graf do výstupního souboru, ovšem
mnohdy je nutné, aby knihovna <i>matplotlib</i> graf vyexportovala automaticky
(programově). Můžeme si například představit generátor výsledků spouštěný ze
skriptu, pomocnou službu pro tvorbu grafů umisťovaných na webové stránky apod.
Při takovýchto požadavcích, které jsou poměrně časté, je možné využít funkce
<strong>matplotlib.pyplot.savefig()</strong>, které se v&nbsp;nejjednodušším
případě předá pouze jméno výstupního souboru. Tato funkce pak na základě
analýzy přípony souboru rozhodne o tom, který formát použije. K&nbsp;dispozici
jsou mj.&nbsp;tyto formáty:</p>

<table>
<tr><th>#</th><th>Koncovka</th><th>Formát</th></tr>
<tr><td>1</td><td>png</td><td>rastrový formát <a href="http://www.root.cz/clanky/png-is-not-gif/">PNG</a></td></tr>
<tr><td>2</td><td>pdf</td><td>dokument ve formátu PDF s&nbsp;vektorovým grafem</td></tr>
<tr><td>3</td><td>eps</td><td>vektorový formát Encapsulated PostScript (varianta PostScriptu určená pro vložení do dalších dokumentů, včetně (La)TeXu)</td></tr>
<tr><td>4</td><td>ps </td><td>vektorový formát <a href="http://www.root.cz/clanky/graficky-metaformat-postscript/">PostScript</a></td></tr>
<tr><td>5</td><td>svg</td><td>vektorový formát <a href="http://www.root.cz/clanky/vektorovy-graficky-format-svg/">SVG</a></td></tr>
</table>

<p>Použití funkce <strong>matplotlib.pyplot.savefig()</strong> je v&nbsp;praxi
velmi snadné, o čemž se ostatně můžete sami přesvědčit po porovnání zdrojového
kódu prvního demonstračního příkladu a příkladu druhého, do něhož jsme pouze
vložili vytvoření pěti souborů s&nbsp;exportovaným grafem:</p>

<pre>
<i># Knihovny Numpy a matplotlib</i>
<i>#</i>
<i># Druhý demonstrační příklad:</i>
<i># - vykreslení průběhu funkce sin</i>
<i># - uložení grafu do různých typů souboru</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
x = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># hodnoty na y-ové ose</i>
y = np.sin(x)
&nbsp;
<i># vykreslit průběh funkce</i>
plt.plot(x, y)
&nbsp;
<i># popis os</i>
plt.xlabel("x")
plt.ylabel("sin(x)")
&nbsp;
<i># vykreslení a uložení grafu do různých typů souborů</i>
plt.savefig("example02.png")
plt.savefig("example02.pdf")
plt.savefig("example02.eps")
plt.savefig("example02.ps")
plt.savefig("example02.svg")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 3: Průběh funkce sin(x) vykreslený druhým demonstračním
příkladem.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vykreslení průběhů dvou funkcí do jediného grafu</h2>

<p>Velmi často se můžeme setkat s&nbsp;požadavkem vložení průběhů několika
funkcí do jediného grafu. Zde knihovna <i>matplotlib</i> svým uživatelům nabízí
větší množství řešení. Je například možné do jednoho obrázku či dokumentu
vložit více grafů s&nbsp;totožnou x-ovou osou (a většinou odlišným měřítkem na
y-ových osách), popř.&nbsp;lze skutečně sloučit větší množství průběhů
v&nbsp;jediném grafu. Ukažme si nejdříve druhou zmiňovanou možnost,
tj.&nbsp;vytvoření grafu s&nbsp;dvěma funkcemi, ovšem s&nbsp;totožnými x-ovými
a y-ovými osami. I u takto vytvořeného grafu můžeme použít již zmíněnou funkci
<strong>matplotlib.pyplot.plot()</strong>, které se ovšem předají čtyři pole:
hodnoty na ose x, hodnoty první funkce, opět hodnoty na ose x (pro nás stejné
pole) a hodnoty druhé funkce. Žádné další operace nejsou zapotřebí, což je
ostatně patrné i při pohledu na zdrojový kód dnešního třetího demonstračního
příkladu:</p>

<pre>
<i># Knihovny Numpy a matplotlib</i>
<i>#</i>
<i># Třetí demonstrační příklad:</i>
<i># - vykreslení průběhů funkcí sin a cos</i>
<i>#   do jediného grafu</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
x = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># hodnoty na y-ové ose: první funkce</i>
y1 = np.sin(x)
&nbsp;
<i># hodnoty na y-ové ose: druhá funkce</i>
y2 = np.cos(x)
&nbsp;
<i># vykreslit průběh obou funkcí</i>
plt.plot(x, y1, x, y2)
&nbsp;
<i># popis os</i>
plt.xlabel("x")
plt.ylabel("sin(x) a cos(x)")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p><div class="rs-tip-major">Poznámka: toto řešení není příliš vhodné
v&nbsp;situaci, kdy jsou hodnoty obou funkcí značně rozdílné, neboť se používá
stejné měřítko.</div></p>

*** image ***
<p><i>Obrázek 3: Graf, na němž jsou nakresleny průběhy dvou funkcí.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Základní polární graf</h2>

<p>Pokud je zapotřebí vykreslit polární graf, je možné postupovat následujícím
způsobem. Nejprve se plocha obrázku či dokumentu určená pro vykreslení grafu
rozdělí do pomyslné mřížky o velikosti 1&times;1 buňka. Do této mřížky se
funkcí <strong>matplotlib.pyplot.subplot()</strong> vloží
&bdquo;podgraf&ldquo;, u něhož se pojmenovaným parametrem
<strong>projection</strong> specifikuje použitá projekce. Magická konstanta 111
při volání této funkce značí, že se skutečně má vytvořit mřížka 1&times;1 buňka
a podgraf se má vložit do této buňky (ta má index 1). Další vykreslování již
vlastně známe, ovšem s&nbsp;tím nepatrným rozdílem, že se nevolá funkce
<strong>matplotlib.pyplot.plot()</strong>, ale metoda objektu získaného výše
zmíněnou funkcí <strong>matplotlib.pyplot.subplot()</strong>. Dále si
povšimněte toho, že namísto polí pojmenovaných <strong>x</strong> a
<strong>y</strong> používáme pole hodnot se jmény <strong>theta</strong> a
<strong>radius</strong>, což se pro tento typ grafu hodí mnohem více:</p>

<pre>
<i># Knihovny Numpy a matplotlib</i>
<i>#</i>
<i># Devátý demonstrační příklad:</i>
<i># - základní polární graf</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># úhel v polárním grafu</i>
theta = np.linspace(0.01, 2*np.pi, 150)
&nbsp;
<i># vzdálenost od středu</i>
radius = np.log(theta)
&nbsp;
ax=plt.subplot(111, projection="polar")
&nbsp;
<i># vykreslit průběh funkce</i>
<i># v polárním grafu</i>
ax.plot(theta, radius)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 4: Polární graf se slavnou logaritmickou spirálou.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Použití funkce <strong>numpy.meshgrid()</strong></h2>

<p>Před popisem grafů zobrazujících drátové modely či kontury funkcí typu
z=f(x,y) se musíme seznámit s&nbsp;užitečnou funkcí nazvanou
<strong>numpy.meshgrid()</strong>. Tato funkce má sice poměrně univerzální
možnosti použití, my se však v&nbsp;dnešním článku spokojíme s&nbsp;tím, že
pokud se funkci <strong>numpy.meshgrid()</strong> předá dvojice jednorozměrných
polí (vektorů) představujících hodnoty nezávislých x-ových a y-ových souřadnic,
vytvoří se jako výsledek dvě dvourozměrné matice, které dohromady tvoří mřížku
souřadnic [x<sub>i</sub>, y<sub>i</sub>]. Počet řádků těchto 2D matic odpovídá
délce druhého pole, počet sloupců pak délce pole prvního. Podívejme se na
jednoduchý příklad:</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech XXX dnes popsaných demonstračních příkladů určených pro
Python 3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/moviepy-examples">https://github.com/tisnik/moviepy-examples</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem
prozatím velmi malý, doslova několik kilobajtů), můžete namísto toho použít
odkazy na jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Projekt</th><th>Cesta</th></tr>
<tr><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/">https://github.com/tisnik/moviepy-examples/blob/master/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/">https://github.com/tisnik/moviepy-examples/blob/master/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>MoviePy 0.2.3.3 na PyPi<br />
<a href="https://pypi.org/project/moviepy/">https://pypi.org/project/moviepy/</a>
</li>

<li>MoviePy na GitHubu<br />
<a href="https://github.com/Zulko/moviepy">https://github.com/Zulko/moviepy</a>
</li>

<li>MoviePy - dokumentace<br />
<a href="http://zulko.github.io/moviepy/">http://zulko.github.io/moviepy/</a>
</li>

<li>MoviePy - galerie<br />
<a href="http://zulko.github.io/moviepy/gallery.html">http://zulko.github.io/moviepy/gallery.html</a>
</li>

<li>Data Animations With Python and MoviePy<br />
<a href="https://zulko.github.io/blog/2014/11/29/data-animations-with-python-and-moviepy/">https://zulko.github.io/blog/2014/11/29/data-animations-with-python-and-moviepy/</a>
</li>

<li>Porovnání formátů Ogg Theora a H.264<br />
<a href="https://www.root.cz/zpravicky/porovnani-formatu-ogg-theora-a-h-264/">https://www.root.cz/zpravicky/porovnani-formatu-ogg-theora-a-h-264/</a>
</li>

<li>Případ GIF<br />
<a href="https://www.root.cz/clanky/pripad-gif/">https://www.root.cz/clanky/pripad-gif/</a>
</li>

<li>Pravda a mýty o GIFu<br />
<a href="https://www.root.cz/clanky/pravda-a-myty-o-gifu/">https://www.root.cz/clanky/pravda-a-myty-o-gifu/</a>
</li>

<li>Anatomie grafického formátu GIF<br />
<a href="https://www.root.cz/clanky/anatomie-grafickeho-formatu-gif/">https://www.root.cz/clanky/anatomie-grafickeho-formatu-gif/</a>
</li>

<li>GIF: animace a konkurence<br />
<a href="https://www.root.cz/clanky/gif-animace-a-konkurence/">https://www.root.cz/clanky/gif-animace-a-konkurence/</a>
</li>

<li>Two python modules : MoviePy and images2gif – part 001<br />
<a href="http://free-tutorials.org/two-python-modules-moviepy-and-images2gif-part-001/">http://free-tutorials.org/two-python-modules-moviepy-and-images2gif-part-001/</a>
</li>

<li>images2gif<br />
<a href="https://pypi.org/project/images2gif/">https://pypi.org/project/images2gif/</a>
</li>

<li>Making GIFs from video files with Python<br />
<a href="https://www.devbattles.com/en/sand/post-345-Making+GIFs+From+Video+Files+With+Python">https://www.devbattles.com/en/sand/post-345-Making+GIFs+From+Video+Files+With+Python</a>
</li>

<li>GIF89a specification<br />
<a href="https://www.w3.org/Graphics/GIF/spec-gif89a.txt">https://www.w3.org/Graphics/GIF/spec-gif89a.txt</a>
</li>

<li>MPEG-4 Part 14<br />
<a href="https://en.wikipedia.org/wiki/MPEG-4_Part_14">https://en.wikipedia.org/wiki/MPEG-4_Part_14</a>
</li>

<li>Theora video compression<br />
<a href="https://www.theora.org/">https://www.theora.org/</a>
</li>

<li>Theora<br />
<a href="https://en.wikipedia.org/wiki/Theora">https://en.wikipedia.org/wiki/Theora</a>
</li>

<li>NumPy<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>numpy 1.14.2 (on PyPi)<br />
<a href="https://pypi.org/project/numpy/">https://pypi.org/project/numpy/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy (2.část)<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy-2-cast/">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy-2-cast/</a>
</li>

<li>Non-linear editing system<br />
<a href="https://en.wikipedia.org/wiki/Non-linear_editing_system">https://en.wikipedia.org/wiki/Non-linear_editing_system</a>
</li>

<li>Lorenzův atraktor<br />
<a href="http://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03">http://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Lorenz system<br />
<a href="https://en.wikipedia.org/wiki/Lorenz_system">https://en.wikipedia.org/wiki/Lorenz_system</a>
</li>

<li>Customising contour plots in matplotlib<br />
<a href="https://philbull.wordpress.com/2012/12/27/customising-contour-plots-in-matplotlib/">https://philbull.wordpress.com/2012/12/27/customising-contour-plots-in-matplotlib/</a>
</li>

<li>Graphics with Matplotlib<br />
<a href="http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html">http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html</a>
</li>

<li>Systémy lineárních rovnic<br />
<a href="http://www.matematika.cz/systemy-linearnich-rovnic">http://www.matematika.cz/systemy-linearnich-rovnic</a>
</li>

<li>NumPy Home Page<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>NumPy v1.10 Manual<br />
<a href="http://docs.scipy.org/doc/numpy/index.html">http://docs.scipy.org/doc/numpy/index.html</a>
</li>

<li>NumPy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NumPy">https://en.wikipedia.org/wiki/NumPy</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>The cell magics in IPython<br />
<a href="http://nbviewer.jupyter.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb">http://nbviewer.jupyter.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

