<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba textového uživatelského rozhraní s knihovnou prompt_toolkit: ovládací prvky (widgety)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba textového uživatelského rozhraní s knihovnou prompt_toolkit: ovládací prvky (widgety)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Pátá část miniseriálu o tvorbě aplikací s&nbsp;textovým uživatelským rozhraním založeným na knihovně prompt_toolkit je věnována popisu všech zbývajících ovládacích prvků TUI, a to samozřejmě včetně menu a nástrojových pruhů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba textového uživatelského rozhraní s&nbsp;knihovnou prompt_toolkit: ovládací prvky (widgety)</a></p>
<p><a href="#k02">2. Ovládací prvek typu <strong>Checkbox</strong></a></p>
<p><a href="#k03">3. Reálné použití zaškrtávacích tlačítek <strong>Checkbox</strong></a></p>
<p><a href="#k04">4. Pomocný prvek <strong>HorizontalLine</strong></a></p>
<p><a href="#k05">5. Pomocný prvek <strong>VerticalLine</strong></a></p>
<p><a href="#k06">6. Skupina přepínacích tlačítek (<strong>RadioList</strong>)</a></p>
<p><a href="#k07">7. Systém menu</a></p>
<p><a href="#k08">8. Vytvoření hlavního menu pro aplikaci s&nbsp;TUI</a></p>
<p><a href="#k09">9. Rozbalovací menu navázaná na hlavní menu</a></p>
<p><a href="#k10">10. Horizontální oddělovač v&nbsp;menu</a></p>
<p><a href="#k11">11. Klávesové zkratky, využití podmenu</a></p>
<p><a href="#k12">12. Další vlastnosti prvku typu <strong>TextArea</strong></a></p>
<p><a href="#k13">13. Vyvolání menu klávesou F10</a></p>
<p><a href="#k14">14. Zalamování řádků na obrazovce</a></p>
<p><a href="#k15">15. Zvýraznění syntaxe v&nbsp;textovém poli</a></p>
<p><a href="#k16">16. Prvky <strong>SearchToolbar</strong> a <strong>SystemToolbar</strong></a></p>
<p><a href="#k17">17. Doplnění: konfigurace emulátoru terminálu <strong>Xterm</strong></a></p>
<p><a href="#k18">18. Otestování nového nastavení terminálu <strong>Xterm</strong></a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba textového uživatelského rozhraní s&nbsp;knihovnou prompt_toolkit: ovládací prvky (widgety)</h2>

<p>V&nbsp;dnešní části miniseriálu o tvorbě textového uživatelského rozhraní
(<i>TUI</i>) s&nbsp;využitím programovacího jazyka <a
href="https://www.root.cz/n/python/">Python</a> a knihovny
<strong>prompt_toolkit</strong> tematicky navážeme <a
href="https://www.root.cz/clanky/tvorba-tui-s-knihovnou-prompt-toolkit-aplikace-s-celoobrazovkovym-rozhranim/">na
část předchozí</a>, v&nbsp;níž jsme si ukázali způsob použití základních prvků
TUI. Připomeňme si, že kromě <i>kontejnerů</i> a prvků pro vstup/výstup se
jednalo o widgety <strong>Label</strong>, <strong>Button</strong> a
<strong>TextArea</strong>, které byly doplněny o pomocné prvky pojmenované
<strong>Frame</strong> a <strong>Bar</strong>. Umístění jednotlivých ovládacích
prvků na ploše terminálu/konzole bylo zajištěno s&nbsp;využitím správců
rozložení a taktéž tříd <strong>HSplit</strong> a <strong>VSplit</strong>,
které dokázaly jednotlivé prvky sdružit a umístit je buď vedle sebe nebo pod
sebe (s&nbsp;automaticky nastavenými rozměry).</p>

<img src="https://i.iinfo.cz/images/677/prompt-toolkit-4-14.png" class="image-335127" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 1: Textové uživatelské rozhraní se čtveřicí tlačítek a pasivní
textovou plochou.</i></p>

<p>Dnes si popíšeme další ovládací prvky, s&nbsp;jejichž využitím je možné
vytvořit téměř plnohodnotné textové uživatelské rozhraní. Jedná se zejména o <a
href="#k02">zaškrtávací tlačítka</a>, <a href="#k06">přepínací tlačítka</a>,
pomocné pasivní prvky (<a href="#k04">horizontální</a> a <a
href="#k05">vertikální oddělovač</a>), ale například i o <a href="#k08">hlavní
menu</a>, <a href="#k09">rozbalovací menu</a> atd. Dále si podrobněji popíšeme
i textové pole, s&nbsp;nímž jsme se sice již setkali, ovšem prozatím jen ve
stručnosti &ndash; zdaleka jsme si neukázali všechny možnosti, které nám tento
pokročilý ovládací prvek nabízí.</p>

<img src="https://i.iinfo.cz/images/677/prompt-toolkit-4-16.png" class="image-335129" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 2: Textové uživatelské rozhraní testovací aplikace
s&nbsp;vlastním nastaveným stylem.</i></p>

<p><div class="rs-tip-major">Poznámka: na rozdíl od předchozích čtyř dílů
seriálu, v&nbsp;nichž byly všechny screenshoty pořízeny s&nbsp;terminálem,
který měl nastavené černé pozadí, budou dnešní příklady používat pozadí světlé,
aby bylo patrné, jak si s&nbsp;tímto odlišným nastavením aplikace založené na
knihovně <strong>prompt_toolkit</strong> poradí.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Ovládací prvek typu <strong>Checkbox</strong></h2>

<p>První nový ovládací prvek (<i>widget</i>), se kterým se v&nbsp;dnešním
článku setkáme, se jmenuje <strong>Checkbox</strong> neboli zaškrtávací
tlačítko. Jedná se skutečně o variantu tlačítka, které si pamatuje svůj stav
(zaškrtnuto/nezaškrtnuto) a tento stav je na tlačítku vizuálně zvýrazněn.
Ukažme si nyní ten prakticky <a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui18_basic_checkbox.py">nejjednodušší
možný příklad</a>, v&nbsp;němž je zaškrtávací tlačítko použito. Bude se jednat
o jediný prvek textového uživatelského rozhraní, který je přímo předán správci
rozložení (<strong>Layout</strong>). Zaškrtávací tlačítko, jakožto jediný prvek
TUI, automaticky získá zaměření (<i>fokus</i>), což znamená, že jeho stav bude
možné měnit klávesami [Enter], [Space] atd. Aplikace se ukončí klávesou [Esc]
(je na ní navázána callback funkce pojmenovaná
<strong>exit_clicked</strong>):</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application
from prompt_toolkit.layout import Layout
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.application.current import get_app
from prompt_toolkit.widgets import Checkbox
&nbsp;
&nbsp;
def <strong>exit_clicked</strong>():
    get_app().exit()
&nbsp;
&nbsp;
checkbox = Checkbox('Checkbox')
&nbsp;
layout = Layout(checkbox)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-1.png" class="image-335554" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 3: Výchozí stav zaškrtávacího tlačítka ihned po spuštění
aplikace.</i></p>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-2.png" class="image-335555" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 4: Změněný stav zaškrtávacího tlačítka (akcí uživatele).</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Reálné použití zaškrtávacích tlačítek <strong>Checkbox</strong></h2>

<p>Ve druhém příkladu je ukázáno, jakým způsobem se mohou zaškrtávací tlačítka
použít v&nbsp;reálných aplikacích. Nejprve je v&nbsp;demonstračním skriptu
vytvořena sada tří na sobě nezávislých zaškrtávacích tlačítek, dále dvě běžná
tlačítka s&nbsp;příslušnou obsluhou události (<i>handler</i>) a následně jsou
všechny tyto prvky seskupeny pod sebe s&nbsp;využitím správce rozvržení
<strong>HSplit</strong>:</p>

<pre>
checkbox1 = Checkbox('Checkbox 1')
checkbox2 = Checkbox('Checkbox 2')
checkbox3 = Checkbox('Checkbox 3')
button1 = Button('Show status', handler=show_status)
button2 = Button('Exit', handler=exit_clicked)
&nbsp;
buttons = HSplit([checkbox1,
                  checkbox2,
                  checkbox3,
                  button1,
                  button2])
</pre>

<p>Dále v&nbsp;příkladu vytvoříme textové pole, které nebude uživatelem
měnitelné (tj.&nbsp;uživatel do něho nebude moci zapisovat), neboť nebude možné
získat zaměření (<i>fokus</i>). Sada již seskupených tlačítek a textové pole se
do TUI umístí vedle sebe, tentokrát s&nbsp;použitím správce rozvržení
<strong>VSplit</strong>:</p>

<pre>
text_area = TextArea(focusable=False)
&nbsp;
<i># správce rozvržení</i>
root = VSplit([Box(Frame(buttons, style="bg:#ansiblue #ansiwhite"), padding=2),
               Box(Frame(text_area, title="Events"), padding=2)])
&nbsp;
layout = Layout(root)
</pre>

<p>Po stisku běžného tlačítka [Show status] se zavolá callback funkce
<strong>show()</strong>, jejímž úkolem bude zobrazit stav všech tří
zaškrtávacích tlačítek:</p>

<pre>
def <strong>show</strong>_status():
    print_checkbox_status(checkbox1, 1)
    print_checkbox_status(checkbox2, 2)
    print_checkbox_status(checkbox3, 3)
</pre>

<p>Pro přečtení stavu zaškrtávacího tlačítka postačuje získat hodnotu atributu
<strong>checked</strong> a do textového pole se stav zapíše změnou jeho
atributu <strong>text</strong> (jedná se o běžný Unicode řetězec), takže výpis
stavu vybraného zaškrtávacího tlačítka obslouží tato pomocná funkce:</p>

<pre>
def <strong>print_checkbox_status</strong>(checkbox, n):
    checked = "checked" if checkbox.checked else "unchecked"
    msg = "Checkbox {n} {s}\n".format(n=n, s=checked)
    text_area.text += msg
</pre>

<p>Podívejme se nyní na chování takto upraveného příkladu, které je zobrazeno
na následujících dvou screenshotech terminálu:</p>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-3.png" class="image-335556" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 5: Demonstrační příklad ihned po svém spuštění.</i></p>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-4.png" class="image-335557" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 6: Změna stavu zaškrtávacích tlačítek s&nbsp;následným výpisem
aktuálního stavu.</i></p>

<p><a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui19_checkbox_real_usage.py">Zdrojový
kód dnešního druhého demonstračního příkladu</a> vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.key_binding.bindings.focus import focus_next, focus_previous
from prompt_toolkit.application.current import get_app
from prompt_toolkit.widgets import *
&nbsp;
&nbsp;
def <strong>exit</strong>_clicked():
    get_app().exit()
&nbsp;
&nbsp;
def <strong>print_checkbox_status</strong>(checkbox, n):
    checked = "checked" if checkbox.checked else "unchecked"
    msg = "Checkbox {n} {s}\n".format(n=n, s=checked)
    text_area.text += msg
&nbsp;
&nbsp;
def <strong>print_hr</strong>():
    text_area.text += "-" * 40
    text_area.text += "\n"
&nbsp;
&nbsp;
def <strong>show_status</strong>():
    print_checkbox_status(checkbox1, 1)
    print_checkbox_status(checkbox2, 2)
    print_checkbox_status(checkbox3, 3)
    print_hr()
&nbsp;
&nbsp;
checkbox1 = Checkbox('Checkbox 1')
checkbox2 = Checkbox('Checkbox 2')
checkbox3 = Checkbox('Checkbox 3')
button1 = Button('Show status', handler=show_status)
button2 = Button('Exit', handler=exit_clicked)
&nbsp;
buttons = HSplit([checkbox1,
                  checkbox2,
                  checkbox3,
                  button1,
                  button2])
&nbsp;
text_area = TextArea(focusable=False)
&nbsp;
<i># správce rozvržení</i>
root = VSplit([Box(Frame(buttons, style="bg:#ansiblue #ansiwhite"), padding=2),
               Box(Frame(text_area, title="Events"), padding=2)])
&nbsp;
layout = Layout(root)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
key_bindings.add('up')(focus_previous)
key_bindings.add('down')(focus_next)
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Pomocný prvek <strong>HorizontalLine</strong></h2>

<p>Již z&nbsp;předchozí části tohoto seriálu víme, že se prvky textového
uživatelského rozhraní dělí na aktivní a pasivní. Aktivní prvky dokážou nějakým
způsobem reagovat na akce prováděné uživatelem (výběr, kliknutí myší pokud je
myš povolena, stisk klávesy), zatímco prvky pasivní nikoli. Mezi nám již známé
pasivní prvky patří <strong>Box</strong> a <strong>Frame</strong>, ovšem při
tvorbě složitějších obrazovek nebo dialogů může přijít vhod i prvek nazvaný
<strong>HorizontalLine</strong>, jehož funkce je zřejmá již z&nbsp;jeho názvu.
Jedná se vlastně o zjednodušenou podobu prvku <strong>Frame</strong>, ovšem
<strong>HorizontalLine</strong> je tvořen vždy jediným řádkem a používá jediný
znak s&nbsp;kódem 0x2500. Šířka se upraví na základě velikosti ostatních prvků
ve skupině.</p>

<p>Horizontální oddělovač se vytvoří jednoduše:</p>

<pre>
hl = HorizontalLine()
</pre>

<p>Po vytvoření oddělovače ho můžeme vložit s&nbsp;ostatními prvky do jedné
skupiny:</p>

<pre>
buttons = HSplit([checkbox1,
                  checkbox2,
                  checkbox3,
                  hl,
                  button1,
                  hl,
                  button2])
</pre>

<p>Výsledek by měl vypadat takto:</p>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-5.png" class="image-335558" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 7: Aplikace s&nbsp;celoobrazovkovým TUI, v&nbsp;němž je
v&nbsp;levé části použit horizontální oddělovač.</i></p>

<p><a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui20_checkbox_and_hline.py">Zdrojový
kód dnešního třetího demonstračního příkladu</a>, v&nbsp;němž je mezi ostatní
prvky (tlačítka, výběrová tlačítka) vložen oddělovač, vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.key_binding.bindings.focus import focus_next, focus_previous
from prompt_toolkit.application.current import get_app
from prompt_toolkit.widgets import *
&nbsp;
&nbsp;
def <strong>exit_clicked</strong>():
    get_app().exit()
&nbsp;
&nbsp;
def <strong>print_checkbox_status</strong>(checkbox, n):
    checked = "checked" if checkbox.checked else "unchecked"
    msg = "Checkbox {n} {s}\n".format(n=n, s=checked)
    text_area.text += msg
&nbsp;
&nbsp;
def <strong>print_hr</strong>():
    text_area.text += "-" * 40
    text_area.text += "\n"
&nbsp;
&nbsp;
def <strong>show_status</strong>():
    print_checkbox_status(checkbox1, 1)
    print_checkbox_status(checkbox2, 2)
    print_checkbox_status(checkbox3, 3)
    print_hr()
&nbsp;
&nbsp;
checkbox1 = Checkbox('Checkbox 1')
checkbox2 = Checkbox('Checkbox 2')
checkbox3 = Checkbox('Checkbox 3')
hl = HorizontalLine()
button1 = Button('Show status', handler=show_status)
button2 = Button('Exit', handler=exit_clicked)
&nbsp;
buttons = HSplit([checkbox1,
                  checkbox2,
                  checkbox3,
                  hl,
                  button1,
                  hl,
                  button2])
&nbsp;
text_area = TextArea(focusable=False)
&nbsp;
<i># správce rozvržení</i>
root = VSplit([Box(Frame(buttons, style="bg:#ansiblue #ansiwhite"), padding=2),
               Box(Frame(text_area, title="Events"), padding=2)])
&nbsp;
layout = Layout(root)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
key_bindings.add('up')(focus_previous)
key_bindings.add('down')(focus_next)
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Pomocný prvek <strong>VerticalLine</strong></h2>

<p>Vážené čtenáře pravděpodobně již napadlo, že když v&nbsp;knihovně
<strong>prompt_toolkit</strong> existuje pasivní prvek nazvaný
<strong>HorizontalLine</strong>, bude pravděpodobně existovat i prvek
<strong>VerticalLine</strong> určený pro vizuální oddělení ovládacích prvků,
které leží vedle sebe. Skutečně tomu tak je a použití vertikálního oddělovače
je ve skutečnosti velmi snadné. V&nbsp;následujícím úryvku kódu je použit
vertikální oddělovač vložený mezi dva prvky <strong>Box</strong>, které
obsahují viditelný rámec <strong>Frame</strong>, přičemž v&nbsp;levém rámci je
skupina tlačítek a v&nbsp;rámci pravém pasivní textové pole (na které nelze
získat fokus):</p>

<pre>
root = VSplit([Box(Frame(buttons, style="bg:#ansiblue #ansiwhite"), padding=2),
               VerticalLine(),
               Box(Frame(text_area, title="Events"), padding=2)])
</pre>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-6.png" class="image-335559" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 8: Aplikace s&nbsp;celoobrazovkovým TUI, v&nbsp;němž je mezi
oběma částmi použit vertikální oddělovač.</i></p>

<p>Opět následuje výpis <a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui21_checkbox_and_hline_and_vline.py">zdrojového
kódu dnešního v&nbsp;pořadí již čtvrtého demonstračního příkladu</a>,
v&nbsp;němž je použit jak horizontální, tak i vertikální oddělovač:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.key_binding.bindings.focus import focus_next, focus_previous
from prompt_toolkit.application.current import get_app
from prompt_toolkit.widgets import *
&nbsp;
&nbsp;
def <strong>exit_clicked</strong>():
    get_app().exit()
&nbsp;
&nbsp;
def <strong>print_checkbox_status</strong>(checkbox, n):
    checked = "checked" if checkbox.checked else "unchecked"
    msg = "Checkbox {n} {s}\n".format(n=n, s=checked)
    text_area.text += msg
&nbsp;
&nbsp;
def <strong>print_hr</strong>():
    text_area.text += "-" * 40
    text_area.text += "\n"
&nbsp;
&nbsp;
def <strong>show_status</strong>():
    print_checkbox_status(checkbox1, 1)
    print_checkbox_status(checkbox2, 2)
    print_checkbox_status(checkbox3, 3)
    print_hr()
&nbsp;
&nbsp;
checkbox1 = Checkbox('Checkbox 1')
checkbox2 = Checkbox('Checkbox 2')
checkbox3 = Checkbox('Checkbox 3')
hl = HorizontalLine()
button1 = Button('Show status', handler=show_status)
button2 = Button('Exit', handler=exit_clicked)
&nbsp;
buttons = HSplit([checkbox1,
                  checkbox2,
                  checkbox3,
                  hl,
                  button1,
                  hl,
                  button2])
&nbsp;
text_area = TextArea(focusable=False)
&nbsp;
<i># správce rozvržení</i>
root = VSplit([Box(Frame(buttons, style="bg:#ansiblue #ansiwhite"), padding=2),
               VerticalLine(),
               Box(Frame(text_area, title="Events"), padding=2)])
&nbsp;
layout = Layout(root)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
key_bindings.add('up')(focus_previous)
key_bindings.add('down')(focus_next)
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Skupina přepínacích tlačítek (<strong>RadioList</strong>)</h2>

<p>Dalšími ovládacími prvky, s&nbsp;nimiž se setkáme v&nbsp;mnoha aplikacích
vybavených GUI či TUI, jsou přepínací tlačítka. Existují dva způsoby, jak
přepínací tlačítka vytvořit &ndash; buď se jedná o samostatné prvky, které jsou
sdruženy do skupin na základě nějaké identifikace (číslo/jméno skupiny apod.),
nebo se celá skupina přepínacích tlačítek vytváří jako jediný prvek
uživatelského rozhraní. V&nbsp;knihovně <strong>prompt_toolkit</strong> je
použit druhý způsob, protože skupina přepínacích tlačítek je tvořena objektem
typu <strong>RadioList</strong>. Tomuto objektu se v&nbsp;konstruktoru předává
seznam dvojic hodnota+text, kde hodnota může být libovolná (ideálně
jednoznačná) a text bude odpovídat popisu přepínacího tlačítka na TUI:</p>

<pre>
radiolist = RadioList([('python_val', 'Python'),
                       ('java_val', 'Java'),
                       ('clojure_val', 'Clojure'),
                       ('perl_val', 'Perl')])
</pre>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-7.png" class="image-335560" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 9: Skupina přepínacích tlačítek.</i></p>

<p>Aktuálně vybrané tlačítko, resp.&nbsp;přesněji řečeno hodnota přiřazená
tlačítku, se získá jednoduše:</p>

<pre>
selected = radiolist.current_value
</pre>

<p>Opět se podívejme na rozsáhlejší demonstrační příklad, v&nbsp;němž je kromě
již výše popsaných zaškrtávacích tlačítek použita i skupina tlačítek
přepínacích společně s&nbsp;kódem určeným pro zjištění aktuální hodnoty
přepínače:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.key_binding.bindings.focus import focus_next, focus_previous
from prompt_toolkit.application.current import get_app
from prompt_toolkit.widgets import *
&nbsp;
&nbsp;
def <strong>exit_clicked</strong>():
    get_app().exit()
&nbsp;
&nbsp;
def <strong>print_checkbox_status</strong>(checkbox, n):
    checked = "checked" if checkbox.checked else "unchecked"
    msg = "Checkbox {n} {s}\n".format(n=n, s=checked)
    text_area.text += msg
&nbsp;
&nbsp;
def <strong>print_radiolist_status</strong>(radiolist):
    text_area.text += "Radiolist: {v}\n".format(v=radiolist.current_value)
&nbsp;
&nbsp;
def <strong>print_hr</strong>():
    text_area.text += "-" * 40
    text_area.text += "\n"
&nbsp;
&nbsp;
def <strong>show_status</strong>():
    print_checkbox_status(checkbox1, 1)
    print_checkbox_status(checkbox2, 2)
    print_checkbox_status(checkbox3, 3)
    print_radiolist_status(radiolist)
    print_hr()
&nbsp;
&nbsp;
radiolist = RadioList([('python_val', 'Python'),
                       ('java_val', 'Java'),
                       ('clojure_val', 'Clojure'),
                       ('perl_val', 'Perl')])
&nbsp;
checkbox1 = Checkbox('Checkbox 1')
checkbox2 = Checkbox('Checkbox 2')
checkbox3 = Checkbox('Checkbox 3')
hl = HorizontalLine()
button1 = Button('Show status', handler=show_status)
button2 = Button('Exit', handler=exit_clicked)
&nbsp;
buttons = HSplit([radiolist,
                  hl,
                  checkbox1,
                  checkbox2,
                  checkbox3,
                  hl,
                  button1,
                  hl,
                  button2])
&nbsp;
text_area = TextArea(focusable=False)
&nbsp;
<i># správce rozvržení</i>
root = VSplit([Box(Frame(buttons, style="bg:#ansiblue #ansiwhite"), padding=2),
               Box(Frame(text_area, title="Events"), padding=2)])
&nbsp;
layout = Layout(root)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
key_bindings.add('s-tab')(focus_previous)
key_bindings.add('tab')(focus_next)
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    """Callback funkce volaná při stisku klávesy Esc."""
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    # vytvoření aplikace s textovým uživatelským rozhraním
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    # spuštění aplikace
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Systém menu</h2>

<p>Nedílnou součástí poměrně velkého množství aplikací je systém menu. Menu se
používají především ze tří důvodů &ndash; kromě toho, že jsou na jejich použití
uživatelé zvyklí, jsou menu nenáročná na prostor plochy terminálu (hlavní menu
zabírá pouze jediný řádek) a položky menu mohou v&nbsp;případě potřeby
obsahovat další podmenu, opět bez dalších nároků na prostor terminálu (položky
jsou ve výchozím stavu skryté). Menu je samozřejmě podporováno i
v&nbsp;knihovně <strong>prompt_toolkit</strong>, ovšem již na tomto místě je
dobré upozornit na to, že tato podpora nedosahuje takových možností, jako je
tomu v&nbsp;mnoha knihovnách pro tvorbu grafického uživatelského rozhraní
(například je problematické zvýraznit aktivní znak nebo přiřadit položce menu
klávesovou zkratku). S&nbsp;některými dalšími omezeními menu se ostatně setkáme
i v&nbsp;navazujících kapitolách.</p>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-8.png" class="image-335561" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 10: Typická aplikace s&nbsp;plnohodnotným menu v&nbsp;TUI &ndash;
Midnight Commander.</i></p>

<p><div class="rs-tip-major">Poznámka: při tvorbě menu, ale i při použití
dalších prvků TUI, máte úplnou volnost v&nbsp;deklaraci jejich chování. Ovšem
pro zajištění větší konzistence (<i>look and feel</i>) je vhodné se snažit
dodržovat například <a
href="https://en.wikipedia.org/wiki/IBM_Common_User_Access">CUA</a>. Týká se to
zejména použití klávesové zkratky F10 pro vyvolání menu.</div></p>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-9.png" class="image-335562" alt="&#160;" width="804" height="504" />
<p><i>Obrázek 11: Další aplikací, v&nbsp;níž se používá plnohodnotné menu
v&nbsp;TUI, je například textový editor Jed.</i></p>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-10.png" class="image-335563" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 12: Menu do třetice, tentokrát ve webovém prohlížeči
Links.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vytvoření hlavního menu pro aplikaci s&nbsp;TUI</h2>

<p>Nejprve se seznámíme s&nbsp;tvorbou hlavního menu. Koncept, na kterém je
hlavní menu postaveno, je snadný &ndash; jedná se totiž o kontejner, který může
obsahovat další ovládací prvky textového uživatelského rozhraní a samozřejmě
taktéž obsahuje řádek s&nbsp;hlavním menu. Nejdříve je nutné vytvořit
jednotlivé položky hlavního menu, které jsou představovány objekty typu
<strong>MenuItem</strong>. V&nbsp;tom nejjednodušším případě se těmto objektům
do konstruktoru předávají pouze nápisy zobrazené uživateli:</p>

<pre>
file_menu = MenuItem("File")
edit_menu = MenuItem("Edit")
format_menu = MenuItem("Format")
view_menu = MenuItem("View")
help_menu = MenuItem("Help")
</pre>

<p>Všechny položky, které mají tvořit hlavní menu, vložíme do jednoho
seznamu:</p>

<pre>
main_menu = [file_menu,
             edit_menu,
             format_menu,
             view_menu,
             help_menu]
</pre>

<p>A následně již můžeme vytvořit kontejner, který bude obsahovat libovolný
další prvek TUI (zde konkrétně textovou plochu, ovšem může se jednat o jakýkoli
prvek nebo kontejner s&nbsp;větším množstvím prvků) a položky hlavního
menu:</p>

<pre>
menu = MenuContainer(text_area, menu_items=main_menu)
</pre>

<p>Tento kontejner se následně zobrazí přímo na ploše terminálu (nemusíme tedy
využívat kontejnery <strong>HSplit</strong> a <strong>VSplit</strong>):</p>

<pre>
layout = Layout(menu)
</pre>

<p>Následně již jen stačí nakonfigurovat klávesové zkratky a použít nového
správce rozložení při konstrukci instance třídy
<strong>Application</strong>:</p>

<pre>
application = Application(layout=layout,
                          key_bindings=key_bindings,
                          full_screen=True)
</pre>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-11.png" class="image-335564" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 13: Hlavní menu zobrazené v&nbsp;naší jednoduché testovací
aplikaci.</i></p>

<p>Úplný zdrojový kód bude vypadat následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.key_binding.bindings.focus import focus_next, focus_previous
from prompt_toolkit.application.current import get_app
from prompt_toolkit.widgets import *
&nbsp;
&nbsp;
text_area = TextArea(focusable=False)
&nbsp;
file_menu = MenuItem("File")
edit_menu = MenuItem("Edit")
format_menu = MenuItem("Format")
view_menu = MenuItem("View")
help_menu = MenuItem("Help")
&nbsp;
main_menu = [file_menu,
             edit_menu,
             format_menu,
             view_menu,
             help_menu]
&nbsp;
menu = MenuContainer(text_area, menu_items=main_menu)
&nbsp;
&nbsp;
layout = Layout(menu)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
key_bindings.add('s-tab')(focus_previous)
key_bindings.add('tab')(focus_next)
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Rozbalovací menu navázaná na hlavní menu</h2>

<p>Pouze jednořádkové (a tím pádem i jednoúrovňové) hlavní menu je sice možné
v&nbsp;některých případech skutečně využít (ostatně podobným způsobem bylo
koncipováno rozhraní slavné aplikace Lotus 1-2-3), ovšem u většiny aplikací je
menu přece jen složitější, protože každá položka hlavního menu může obsahovat
další rozbalitelné seznamy. I tato rozbalovací menu jsou samozřejmě knihovnou
<strong>prompt_toolkit</strong> podporována. U každé položky menu typu
<strong>MenuItem</strong> je totiž možné specifikovat i celé podmenu, a to
následujícím způsobem:</p>

<pre>
file_menu = MenuItem("File", children=[MenuItem("New"),
                                       MenuItem("Open"),
                                       MenuItem("Save"),
                                       MenuItem("Exit")])
</pre>

<p>Do menu lze přidávat prázdné řádky a vizuálně tak oddělit jednotlivé
položky. Jen je nutné s&nbsp;využitím nepovinného parametru
<strong>disabled</strong> zabezpečit, aby byl prázdný řádek přeskakován při
výběru položek pomocí klávesnice:</p>

<pre>
file_menu = MenuItem("File", children=[MenuItem("New"),
                                       MenuItem("Open"),
                                       MenuItem("Save"),
                                       <strong>MenuItem(disabled=True)</strong>,
                                       MenuItem("Exit")])
</pre>

<p>K&nbsp;jednotlivým položkám menu je možné nakonfigurovat callback funkce
volané při výběru dané položky (klasicky klávesou Enter, popř.&nbsp;myší, pokud
je použití myši nakonfigurováno):</p>

<pre>
file_menu = MenuItem("File", children=[MenuItem("New", <strong>handler=on_new_selected</strong>),
                                       MenuItem("Open", <strong>handler=on_open_selected</strong>),
                                       MenuItem("Save", <strong>handler=on_save_selected</strong>),
                                       MenuItem(disabled=True),
                                       MenuItem("Exit", <strong>handler=on_exit_selected</strong>)])
</pre>

<p>Jednotlivé callback funkce jsou při výběru položky menu zavolány bez
parametrů, takže by jejich hlavičky mohly vypadat následovně:</p>

<pre>
def <strong>on_new_selected</strong>():
    message("'New' menu item selected")
</pre>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-12.png" class="image-335565" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 14: Hlavní menu a rozbalovací menu.</i></p>

<p>V&nbsp;úplném <a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui24_basic_structured_menu.py">zdrojovém
kódu</a> demonstračního příkladu je vytvořeno hlavní menu s&nbsp;pěti
položkami, přičemž každá položka obsahuje vlastní rozbalovací menu. Celková
struktura menu by měla připomínat jeden pokročilý s&nbsp;mnoha zajímavými
vlastnostmi obdařený textový editor:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.key_binding.bindings.focus import focus_next, focus_previous
from prompt_toolkit.application.current import get_app
from prompt_toolkit.widgets import *
&nbsp;
&nbsp;
def <strong>message</strong>(msg):
    text_area.text += msg + "\n"
&nbsp;
&nbsp;
def <strong>on_new_selected</strong>():
    message("'New' menu item selected")
&nbsp;
&nbsp;
def <strong>on_open_selected</strong>():
    message("'Open' menu item selected")
&nbsp;
&nbsp;
def <strong>on_save_selected</strong>():
    message("'Save' menu item selected")
&nbsp;
&nbsp;
def <strong>on_exit_selected</strong>():
    get_app().exit()
&nbsp;
&nbsp;
text_area = TextArea(focusable=False)
&nbsp;
file_menu = MenuItem("File", children=[MenuItem("New", handler=on_new_selected),
                                       MenuItem("Open", handler=on_open_selected),
                                       MenuItem("Save", handler=on_save_selected),
                                       MenuItem(disabled=True),
                                       MenuItem("Exit", handler=on_exit_selected)])
&nbsp;
edit_menu = MenuItem("Edit", children=[MenuItem("Cut"),
                                       MenuItem("Copy"),
                                       MenuItem("Paste"),
                                       MenuItem(disabled=True),
                                       MenuItem("Select all")])
&nbsp;
format_menu = MenuItem("Format", children=[MenuItem("Word wrap")])
&nbsp;
view_menu = MenuItem("View", children=[MenuItem("Status bar"),
                                       MenuItem("Line numbers")])
&nbsp;
help_menu = MenuItem("Help", children=[MenuItem("Content"),
                                       MenuItem(disabled=True),
                                       MenuItem("About")])
&nbsp;
main_menu = [file_menu,
             edit_menu,
             format_menu,
             view_menu,
             help_menu]
&nbsp;
menu = MenuContainer(text_area, menu_items=main_menu)
&nbsp;
&nbsp;
layout = Layout(menu)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
key_bindings.add('s-tab')(focus_previous)
key_bindings.add('tab')(focus_next)
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    # spuštění aplikace
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Horizontální oddělovač v&nbsp;menu</h2>

<p>V&nbsp;předchozím demonstračním příkladu byly do jednotlivých rozbalovacích
menu přidány volné řádky pro vizuální oddělení jednotlivých skupin
souvisejících příkazů:</p>

<pre>
file_menu = MenuItem("File", children=[MenuItem("New", handler=on_new_selected),
                                       MenuItem("Open", handler=on_open_selected),
                                       MenuItem("Save", handler=on_save_selected),
                                       <strong>MenuItem(disabled=True)</strong>,
                                       MenuItem("Exit", handler=on_exit_selected)])
</pre>

<p>Ve skutečnosti je však možné použít ještě jeden zajímavý trik &ndash; vložit
do menu oddělovač ve formě horizontální úsečky. Tuto možnost sice nenaleznete
v&nbsp;oficiální dokumentaci, ale je implementována a dnes se jedná o stabilní
součást API. Oddělovač se přidává jako nová položka menu s&nbsp;textem
&bdquo;-&ldquo; a opět je vhodné tuto položku zakázat, aby si ji uživatel
nemohl vybrat:</p>

<pre>
file_menu = MenuItem("File", children=[MenuItem("New", handler=on_new_selected),
                                       MenuItem("Open", handler=on_open_selected),
                                       MenuItem("Save", handler=on_save_selected),
                                       <strong>MenuItem("-", disabled=True)</strong>,
                                       MenuItem("Exit", handler=on_exit_selected)])
</pre>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-13.png" class="image-335566" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 15: Horizontální oddělovače v&nbsp;rozbalovacím menu.</i></p>

<p>Takto upravený demonstrační příklad naleznete na adrese <a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui25_hline_in_menu.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui25_hline_in_menu.py</a>.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Klávesové zkratky, využití podmenu</h2>

<p>V&nbsp;dobře navržených aplikacích je možné jednotlivé příkazy buď přímo
vyvolat z&nbsp;menu jejich výběrem, nebo je alternativně možné použít klávesové
zkratky. Tato druhá možnost sice není přímo třídou <strong>MenuItem</strong>
podporována, to nám však nemusí vadit, protože můžeme klávesovou zkratku
přiřadit přímo callback funkci, která se bude volat jak při stisku příslušné
klávesové zkratky, tak i při výběru položky z&nbsp;menu. Musíme pouze zařídit
jednu maličkost &ndash; při volání callback funkce z&nbsp;menu se funkci
nepředává žádný parametr, kdežto při stisku klávesové zkratky se předá objekt
typu <strong>event</strong>. V&nbsp;Pythonu můžeme problematiku nepovinného
parametru řešit například následujícím způsobem:</p>

<pre>
@key_bindings.add('c-n')
def <strong>on_new_selected</strong>(event=None):
    message("'New' menu item selected")
&nbsp;
&nbsp;
@key_bindings.add('c-o')
def <strong>on_open_selected</strong>(event=None):
    message("'Open' menu item selected")
&nbsp;
&nbsp;
@key_bindings.add('c-s')
def <strong>on_save_selected</strong>(event=None):
    message("'Save' menu item selected")
&nbsp;
&nbsp;
@key_bindings.add('c-x')
def <strong>on_exit_selected</strong>(event=None):
    get_app().exit()
</pre>

<p><div class="rs-tip-major">Poznámka: klávesové zkratky zapisované stylem
&bdquo;c-n&ldquo; ve skutečnosti znamenají stisk kombinace kláves [Ctrl+N].
Podobným způsobem se zapisují i kombinace s&nbsp;klávesou Shift
(&bdquo;s-x&ldquo;) atd.</div></p>

<p>Pro úplnost je vhodné do vlastních položek přidat informaci o klávesových
zkratkách. Díky použití TUI není problém se zarovnáváním ani
s&nbsp;proporcionálními znaky, takže lze vše vyřešit značně jednoduše
(nepoužívejte \t atd.; sami si vyzkoušejte, že se nejedná o funkční řešení).
V&nbsp;úryvku kódu, který je zobrazen pod tímto odstavcem, je navíc celé menu
vytvořeno jako jediná datová struktura (seznam objektů typu
<strong>MenuItem</strong> s&nbsp;případnými podmenu), tj.&nbsp;nemusíme zde
používat žádné pomocné proměnné tak, jako tomu bylo v&nbsp;předchozích
příkladech:</p>

<pre>
main_menu = [MenuItem("File", children=[MenuItem("New   &lt;Ctrl-N&gt;", handler=on_new_selected),
                                        MenuItem("Open  &lt;Ctrl-O&gt;", handler=on_open_selected),
                                        MenuItem("Save  &lt;Ctrl-S&gt;", handler=on_save_selected),
                                        MenuItem("-", disabled=True),
                                        MenuItem("Exit  &lt;Ctrl-X&gt;", handler=on_exit_selected)]),
             ...
             ...
             ...
             MenuItem("Help", children=[MenuItem("Content"),
                                        MenuItem("-", disabled=True),
                                        MenuItem("About")])]
</pre>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-14.png" class="image-335567" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 16: Menu s&nbsp;klávesovými zkratkami.</i></p>

<p>Opět si ukažme úplný zdrojový kód tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.key_binding.bindings.focus import focus_next, focus_previous
from prompt_toolkit.application.current import get_app
from prompt_toolkit.widgets import *
&nbsp;
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
key_bindings.add('s-tab')(focus_previous)
key_bindings.add('tab')(focus_next)
&nbsp;
&nbsp;
def <strong>message</strong>(msg):
    text_area.text += msg + "\n"
&nbsp;
&nbsp;
@key_bindings.add('c-n')
def <strong>on_new_selected</strong>(event=None):
    message("'New' menu item selected")
&nbsp;
&nbsp;
@key_bindings.add('c-o')
def <strong>on_open_selected</strong>(event=None):
    message("'Open' menu item selected")
&nbsp;
&nbsp;
@key_bindings.add('c-s')
def <strong>on_save_selected</strong>(event=None):
    message("'Save' menu item selected")
&nbsp;
&nbsp;
@key_bindings.add('c-x')
def <strong>on_exit_selected</strong>(event=None):
    get_app().exit()
&nbsp;
&nbsp;
text_area = TextArea(focusable=False)
&nbsp;
main_menu = [MenuItem("File", children=[MenuItem("New   <Ctrl-N>", handler=on_new_selected),
                                        MenuItem("Open  <Ctrl-O>", handler=on_open_selected),
                                        MenuItem("Save  <Ctrl-S>", handler=on_save_selected),
                                        MenuItem("-", disabled=True),
                                        MenuItem("Exit  <Ctrl-X>", handler=on_exit_selected)]),
             MenuItem("Edit", children=[MenuItem("Cut"),
                                        MenuItem("Copy"),
                                        MenuItem("Paste"),
                                        MenuItem("-", disabled=True),
                                        MenuItem("Select all")]),
             MenuItem("Format", children=[MenuItem("Word wrap")]),
             MenuItem("View", children=[MenuItem("Status bar", children=[MenuItem("Enabled"),
                                                                         MenuItem("Disabled")]),
                                        MenuItem("Line numbers", children=[MenuItem("Yes"),
                                                                           MenuItem("No")])]),
             MenuItem("Help", children=[MenuItem("Content"),
                                        MenuItem("-", disabled=True),
                                        MenuItem("About")])]
&nbsp;
menu = MenuContainer(text_area, menu_items=main_menu)
&nbsp;
layout = Layout(menu)
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    """Callback funkce volaná při stisku klávesy Esc."""
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    # vytvoření aplikace s textovým uživatelským rozhraním
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    # spuštění aplikace
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. Vyvolání menu klávesou F10</h2>

<p>Pro vyvolání menu klávesou F10 (nebo samozřejmě jinou vhodnou klávesou)
postačuje do aplikace přidat následující callback funkci, která po stisku
vybrané klávesy změní zaměření (<i>fokus</i>) na objekt
<strong>menu.window</strong> (pozor, zde nestačí zapsat jen
<strong>menu</strong> &ndash; opět se jedná o informaci, která v&nbsp;oficiální
dokumentaci prozatím chybí):</p>

<pre>
@key_bindings.add('f10')
def <strong>on_f10_pressed</strong>(event=None):
    <i>"""Callback funkce volaná při stisku klávesy F10."""</i>
    get_app().layout.focus(menu.window)
</pre>

<p>Zdrojový kód takto upraveného příkladu naleznete na adrese <a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui28_f10_for_menu.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui28_f10_for_menu.py</a>.</p>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-17.png" class="image-335570" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 19: Textové pole v&nbsp;aplikaci s&nbsp;menu se zakázaným
zalamováním řádků.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Zalamování řádků na obrazovce</h2>

<p>Pokud se má textové pole použít pro vstup běžného textu s&nbsp;automatickým
zalamováním řádků, je vhodné ponechat nastavení parametrů
<strong>multiline</strong> a <strong>wrap_lines</strong>, popř.&nbsp;i parametr
<strong>scrollbar</strong>. Implicitně je zalamování řádků zapnuté, ale
samozřejmě ho můžeme vypnout &ndash; potom se budou tvořit
&bdquo;nekonečné&ldquo; řádky, což může být vhodné při psaní programátorských
editorů:</p>

<pre>
text_area = TextArea(focusable=True, multiline=True, wrap_lines=False)
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Zvýraznění syntaxe v&nbsp;textovém poli</h2>

<p>Již několikrát jsme se setkali s&nbsp;použitím Lexeru z&nbsp;knihovny
Pygments (které se věnujeme v&nbsp;samostatném miniseriálu). Lexer lze
samozřejmě nastavit i pro vstupní textové pole, a to poměrně jednoduše. Zkusme
si například vytvořit jednoduchý editor pro editaci zdrojového kódu
naprogramovaného v&nbsp;Pythonu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from pygments import lex
from pygments.token import Token
from pygments.lexers import PythonLexer
&nbsp;
from prompt_toolkit import Application
from prompt_toolkit.layout.containers import Window
from prompt_toolkit.layout.controls import FormattedTextControl
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.key_binding.bindings.focus import focus_next, focus_previous
from prompt_toolkit.application.current import get_app
from prompt_toolkit.widgets import *
from prompt_toolkit.lexers import PygmentsLexer
&nbsp;
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
key_bindings.add('s-tab')(focus_previous)
key_bindings.add('tab')(focus_next)
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_exit_selected</strong>(event=None):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    get_app().exit()
&nbsp;
&nbsp;
@key_bindings.add('f10')
def <strong>on_f10_pressed</strong>(event=None):
    <i>"""Callback funkce volaná při stisku klávesy F10."""</i>
    get_app().layout.focus(menu.window)
&nbsp;
&nbsp;
lexer = PygmentsLexer(PythonLexer)
text_area = TextArea(focusable=True, multiline=True, wrap_lines=False, lexer=lexer)
&nbsp;
file_menu = MenuItem("File", children=[MenuItem("Exit", handler=on_exit_selected)])
menu = MenuContainer(text_area, menu_items=[file_menu])
&nbsp;
layout = Layout(menu, focused_element=text_area)
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-18.png" class="image-335571" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 20: Editor se zvýrazněním syntaxe naprogramovaný na třech
řádcích.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Prvky <strong>SearchToolbar</strong> a <strong>SystemToolbar</strong></h2>

<p>Kromě výše popsaných ovládacích prvků, hlavního menu a vstupně/výstupního
textového pole nabízí knihovna <strong>prompt_toolkit</strong> uživatelům i
programátorům i další užitečné prvky. Jedná se například o
<strong>SearchToolbar</strong> či o <strong>SystemToolbar</strong>. Jejich
použití si popíšeme příště.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Doplnění: konfigurace emulátoru terminálu <strong>Xterm</strong></h2>

<p>Na závěr dnešního článku si jako malé doplnění ukažme konfiguraci terminálu
<strong>Xterm</strong> takovým způsobem, aby se v&nbsp;něm používalo světlé
pozadí a aby byl tento terminál připravený pro práci s&nbsp;Unicode. Vzhledem
k&nbsp;tomu, že Xterm podporuje zobrazení 256 barev z&nbsp;plné barvové palety,
je možné barvy popředí, pozadí i kurzoru zadávat buď jménem (standardní jména
známá X) nebo zápisem <strong>rgb:rr/gg/bb</strong>. Taktéž je možné
přenastavit barvy s&nbsp;indexy 0 až 15 a upravit si tak chování aplikací (ty
se typicky o konkrétní barvy nestarají, ale používají standardní paletu, kterou
si tak můžeme přemapovat). Poslední volba slouží k&nbsp;zákazu zpracování
klávesové zkratky [Alt+Enter], protože se tato zkratka používá v&nbsp;dalších
aplikacích, například v&nbsp;Midnight Commanderu, takže není vhodné, aby ji
emulátor terminálu sám zpracovával:</p>

<pre>
xterm*eightBitControl: false
xterm*eightBitInput:   false
xterm*eightBitOutput:  true
xterm*utf8:            1
xterm*background:  White
xterm*foreground:  Black
xterm*cursorColor: rgb:ff/00/00
xterm*saveLines: 1000
xterm*color0: black
xterm*color1: red3
xterm*color2: green3
xterm*color3: yellow3
xterm*color4: DodgerBlue1
xterm*color5: magenta3
xterm*color6: cyan3
xterm*color7: gray90
xterm*color8: gray50
xterm*color9: red
xterm*color10: green
xterm*color11: yellow
xterm*color12: blue
xterm*color13: magenta
xterm*color14: cyan
xterm*color15: white
xterm*colorUL: yellow
xterm*colorBD: white
xterm*rightScrollBar: true
xterm*font:     -*-terminus-bold-r-*-*-*-200-*-*-*-*-iso10646-1
xterm*boldFont:     -*-terminus-bold-r-*-*-*-200-*-*-*-*-iso10646-1
xterm*geometry: 80x25
XTerm*fullscreen: never
XTerm.omitTranslation: fullscreen
</pre>

<p>Alternativní barevné nastavení, které se více přibližuje standardní
paletě:</p>

<pre>
xterm*background:  gray90
xterm*foreground:  Black
xterm*color0: black
xterm*color1: red3
xterm*color2: green3
xterm*color3: brown
xterm*color4: blue3
xterm*color5: magenta3
xterm*color6: cyan4
xterm*color7: gray50
xterm*color8: gray40
xterm*color9: red
xterm*color10: green3
xterm*color11: Goldenrod
xterm*color12: DodgerBlue1
xterm*color13: magenta2
xterm*color14: cyan3
xterm*color15: white
</pre>

<p>Nastavení jsou uložena v&nbsp;souboru <strong>~/.Xresources</strong> a po
každé úpravě je nutné je přidat do databáze systému X příkazem:</p>

<pre>
$ <strong>xrdb ~/.Xresources</strong>
</pre>

<p>Pokud navíc budete chtít namísto primárního výběrového bufferu (PRIMARY)
použít klasickou schránku (CLIPBOARD), lze to samozřejmě zařídit:</p>

<pre>
XTerm*selectToClipboard: true
</pre>

<p><div class="rs-tip-major">Poznámka: <strong>prompt_toolkit</strong>
samozřejmě není žádným způsobem navázaný právě na Xterm, ovšem tento emulátor
mi osobně nejlépe zapadá do minimalisticky nakonfigurovaného desktopu
s&nbsp;Fluxboxem, feh atd..</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Otestování nového nastavení terminálu <strong>Xterm</strong></h2>

<p>Pro usnadnění testování nových barvových schémat (což je vlastně nová
barvová paleta pro indexy 0..15) je možné využít pomocný skript <a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/xterm_settings/xterm_colors">xterm_colors</a>,
který automaticky upraví databázi používanou systémem X, spustí nový emulátor
terminálu a v&nbsp;tomto terminálu spustí druhý skript pro výpis všech
šestnácti standardních barev:</p>

<pre>
xrdb .Xresources
xterm -e ./colortest
</pre>

<p>Samotný pomocný skript <a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/xterm_settings/colortest">colortest</a>
vypadá následovně:</p>

<pre>
echo -e "\033[0mNC (No color)"
echo -e "\033[1;37mWHITE\t\033[0;30mBLACK"
echo -e "\033[0;34mBLUE\t\033[1;34mLIGHT_BLUE"
echo -e "\033[0;32mGREEN\t\033[1;32mLIGHT_GREEN"
echo -e "\033[0;36mCYAN\t\033[1;36mLIGHT_CYAN"
echo -e "\033[0;31mRED\t\033[1;31mLIGHT_RED"
echo -e "\033[0;35mPURPLE\t\033[1;35mLIGHT_PURPLE"
echo -e "\033[0;33mYELLOW\t\033[1;33mLIGHT_YELLOW"
echo -e "\033[1;30mGRAY\t\033[0;37mLIGHT_GRAY"
# reset colors
echo -e "\033[0m----------------------------------------"
read
</pre>

<p>Volání <strong>read</strong> na konci zajistí, že nově spuštěný emulátor
terminálu nebude ihned uzavřen:</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Popis</th><th>Odkaz</th></tr>
<tr><td> 1</td><td>tui18_basic_checkbox.py</td><td>minimální příklad na použití zaškrtávacího tlačítka</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui18_basic_checkbox.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui18_basic_checkbox.py</a></td></tr>
<tr><td> 2</td><td>tui19_checkbox_real_usage.py</td><td>použití zaškrtávacích tlačítek v&nbsp;reálných aplikacích</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui19_checkbox_real_usage.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui19_checkbox_real_usage.py</a></td></tr>
<tr><td> 3</td><td>tui20_checkbox_and_hline.py</td><td>horizontální oddělovací čára</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui20_checkbox_and_hline.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui20_checkbox_and_hline.py</a></td></tr>
<tr><td> 4</td><td>tui21_checkbox_and_hline_and_vline.py</td><td>horizontální i vertikální oddělovací čáry</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui21_checkbox_and_hline_and_vline.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui21_checkbox_and_hline_and_vline.py</a></td></tr>
<tr><td> 5</td><td>tui22_radiolist.py</td><td>sada přepínacích tlačítek</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui22_radiolist.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui22_radiolist.py</a></td></tr>
<tr><td> 6</td><td>tui23_toplevel_menu.py</td><td>hlavní menu</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui23_toplevel_menu.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui23_toplevel_menu.py</a></td></tr>
<tr><td> 7</td><td>tui24_basic_structured_menu.py</td><td>rozbalovací menu</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui24_basic_structured_menu.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui24_basic_structured_menu.py</a></td></tr>
<tr><td> 8</td><td>tui25_hline_in_menu.py</td><td>horizontální oddělovač v&nbsp;menu</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui25_hline_in_menu.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui25_hline_in_menu.py</a></td></tr>
<tr><td> 9</td><td>tui26_keyboard_binding_submenu.py</td><td>klávesové zkratky pro menu</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui26_keyboard_binding_submenu.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui26_keyboard_binding_submenu.py</a></td></tr>
<tr><td>10</td><td>tui27_text_area.py</td><td>použití textového pole</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui27_text_area.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui27_text_area.py</a></td></tr>
<tr><td>11</td><td>tui28_f10_for_menu.py</td><td>klávesa F10 vyvolá menu</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui28_f10_for_menu.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui28_f10_for_menu.py</a></td></tr>
<tr><td>12</td><td>tui29_nowrap_lines.py</td><td>zákaz zalamování řádků</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui29_nowrap_lines.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui29_nowrap_lines.py</a></td></tr>
<tr><td>13</td><td>tui30_python_lexer.py</td><td>obarvení syntaxe v&nbsp;textovém poli</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui30_python_lexer.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui30_python_lexer.py</a></td></tr>
<tr><td>14</td><td>tui31_basic_lexer.py</td><td>obarvení syntaxe v&nbsp;textovém poli</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui31_basic_lexer.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui31_basic_lexer.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Správce rozvržení (Layout)<br />
<a href="https://python-prompt-toolkit.readthedocs.io/en/master/pages/reference.html#layout">https://python-prompt-toolkit.readthedocs.io/en/master/pages/reference.html#layout</a>
</li>

<li>Popis všech ovládacích prvků (Widgetů)<br />
<a href="https://python-prompt-toolkit.readthedocs.io/en/master/pages/reference.html#module-prompt_toolkit.widgets">https://python-prompt-toolkit.readthedocs.io/en/master/pages/reference.html#module-prompt_toolkit.widgets</a>
</li>

<li>Prvek TUI MenuContainer<br />
<a href="https://python-prompt-toolkit.readthedocs.io/en/master/pages/reference.html#prompt_toolkit.widgets.MenuContainer">https://python-prompt-toolkit.readthedocs.io/en/master/pages/reference.html#prompt_toolkit.widgets.MenuContainer</a>
</li>

<li>Prvek TUI RadioList<br />
<a href="https://python-prompt-toolkit.readthedocs.io/en/master/pages/reference.html#prompt_toolkit.widgets.RadioList">https://python-prompt-toolkit.readthedocs.io/en/master/pages/reference.html#prompt_toolkit.widgets.RadioList</a>
</li>

<li>Třída Application<br />
<a href="https://python-prompt-toolkit.readthedocs.io/en/master/pages/reference.html#module-prompt_toolkit.application">https://python-prompt-toolkit.readthedocs.io/en/master/pages/reference.html#module-prompt_toolkit.application</a>
</li>

<li>Třída KeyBindings<br />
<a href="https://python-prompt-toolkit.readthedocs.io/en/master/pages/reference.html#prompt_toolkit.key_binding.KeyBindings">https://python-prompt-toolkit.readthedocs.io/en/master/pages/reference.html#prompt_toolkit.key_binding.KeyBindings</a>
</li>

<li>UTF-8 encoded sample plain-text file<br />
<a href="http://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-demo.txt">http://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-demo.txt</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>vi(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/vi">https://linux.die.net/man/1/vi</a>
</li>

<li>emacs(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/emacs">https://linux.die.net/man/1/emacs</a>
</li>

<li>Pygments - Python syntax highlighter<br />
<a href="http://pygments.org/">http://pygments.org/</a>
</li>

<li>Write your own lexer<br />
<a href="http://pygments.org/docs/lexerdevelopment/">http://pygments.org/docs/lexerdevelopment/</a>
</li>

<li>Jazyky podporované knihovnou Pygments<br />
<a href="http://pygments.org/languages/">http://pygments.org/languages/</a>
</li>

<li>Pygments FAQ<br />
<a href="http://pygments.org/faq/">http://pygments.org/faq/</a>
</li>

<li>TUI &ndash; Text User Interface<br />
<a href="https://en.wikipedia.org/wiki/Text-based_user_interface">https://en.wikipedia.org/wiki/Text-based_user_interface</a>
</li>

<li>PuDB: výkonný debugger pro Python s retro uživatelským rozhraním (nástroj s&nbsp;plnohodnotným TUI)<br />
<a href="https://www.root.cz/clanky/pudb-vykonny-debugger-pro-python-s-retro-uzivatelskym-rozhranim/">https://www.root.cz/clanky/pudb-vykonny-debugger-pro-python-s-retro-uzivatelskym-rozhranim/</a>
</li>

<li>Historie vývoje textových editorů: krkolomná cesta k moderním textovým procesorům<br />
<a href="https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-krkolomna-cesta-k-modernim-textovym-procesorum/">https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-krkolomna-cesta-k-modernim-textovym-procesorum/</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Rosetta_Code">http://rosettacode.org/wiki/Rosetta_Code</a>
</li>

<li>Mandelbrot set: Sinclair ZX81 BASIC<br />
<a href="http://rosettacode.org/wiki/Mandelbrot_set#Sinclair_ZX81_BASIC">http://rosettacode.org/wiki/Mandelbrot_set#Sinclair_ZX81_BASIC</a>
</li>

<li>Nástroj Dialog<br />
<a href="http://invisible-island.net/dialog/">http://invisible-island.net/dialog/</a>
</li>

<li>Projekt Zenity<br />
<a href="https://wiki.gnome.org/Projects/Zenity">https://wiki.gnome.org/Projects/Zenity</a>
</li>

<li>Xterm256 color names for console Vim<br />
<a href="http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim">http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim</a>
</li>

<li>Hidden gems of xterm<br />
<a href="https://lukas.zapletalovi.com/2013/07/hidden-gems-of-xterm.html">https://lukas.zapletalovi.com/2013/07/hidden-gems-of-xterm.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

