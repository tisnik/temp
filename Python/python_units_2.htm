<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhém článku o manipulacích s hodnotami, ke kterým jsou přiřazeny jednotky (nějaké veličiny) si nejdříve ukážeme, do jaké míry může kooperovat knihovna Pint s knihovnou SymPy určenou pro symbolické výpočty. Ve druhé části článku si řekneme, že i samotná knihovna SymPy práci s jednotkami a veličinami do určité míry podporuje.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Kooperace mezi knihovnami Pint a SymPy při manipulaci s&nbsp;veličinami a jednotkami</a></p>
<p><a href="#k02">2. Instalace knihovny <i>Sympy</i></a></p>
<p><a href="#k03">3. Manipulace se symboly a výrazy</a></p>
<p><a href="#k04">4. Symboly, veličiny a jednotky</a></p>
<p><a href="#k05">5. Základní výpočty se symboly, k&nbsp;nimž jsou připojeny jednotky</a></p>
<p><a href="#k06">6. Výpis hodnoty odděleně od jednotek</a></p>
<p><a href="#k07">7. Automatická konverze jednotek</a></p>
<p><a href="#k08">8. Kontrola, zda jsou jednotky kompatibilní</a></p>
<p><a href="#k09">*** 9. Omezení kooperace mezi knihovnami Pint a SymPy</a></p>
<p><a href="#k10">*** 10. Jednotky, které jsou přímo součástí knihovny <i>SymPy</i></a></p>
<p><a href="#k11">*** 11. Derivace výrazu s&nbsp;jednotkami</a></p>
<p><a href="#k12">*** 12. Výpočet kořenů kvadratické rovnice s&nbsp;jednotkami</a></p>
<p><a href="#k13">*** 13. Kombinace různých jednotek při výpočtu kořenů kvadratické rovnice</a></p>
<p><a href="#k14">*** 14. Řešení nerovnice v&nbsp;případě, že jsou použity jednotky</a></p>
<p><a href="#k15">*** 15. Řešení soustavy nerovnic s&nbsp;jednotkami</a></p>
<p><a href="#k16">*** 16. Příloha: parsing řetězců s&nbsp;hodnotami a jednotkami</a></p>
<p><a href="#k17">*** 17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Kooperace mezi knihovnami Pint a SymPy při manipulaci s&nbsp;veličinami a jednotkami</h2>

<p>V&nbsp;<a
href="https://www.root.cz/clanky/manipulace-s-jednotkami-a-velicinami-aby-se-nescitaly-hrusky-s-jablky/">úvodním
článku</a> o knihovnách umožňujících manipulaci s&nbsp;jednotkami a veličinami
jsme se seznámili se základními vlastnostmi knihovny <i>Pint</i>. Tato knihovna
umožňuje provádět běžné výpočty (aritmetické operace a některé další operace
typu druhé odmocniny), přičemž vstupem a výstupem není prostá numerická hodnota
(tedy číslo 0.5 atd.), ale hodnota, ke které je přiřazena nějaká (fyzikální
aj.) jednotka a nepřímo tedy i veličina (0.5 sekundy, 0.5 metru, 0.5 otočky
atd.).</p>

<p>V&nbsp;některých případech je ovšem vyžadována i manipulace s&nbsp;celými
matematickými výrazy, například se zápisem polynomu atd. Jedná se typicky o
symbolické výpočty, kde výsledkem není konkrétní numerická hodnota (či vektor
resp.&nbsp;matice hodnot), ale jiný výraz. Příkladem takových problémů je
zjednodušování výrazů, hledání kořenů kvadratických rovnic, faktorizace
polynomů, symbolická derivace, symbolická integrace, výpočet limit atd. Jedním
z&nbsp;nástrojů, které tyto manipulace se symboly podporují, je knihovna
nazvaná <i>SymPy</i>, jež je založená (jak již ostatně její název napovídá) na
Pythonu. SymPy jde dokonce tak daleko, že jednotlivé výrazy jsou přímo zapsány
jako výrazy programovacího jazyka Python, se všemi výhodami, které toto řešení
přináší. Výsledkem činnosti SymPy jsou většinou výrazy, které mohou být
vytištěny na terminál či ve formě kvalitního &bdquo;2D&ldquo; výstupu
provedeného TeXem.</p>

<p>V&nbsp;mnoha ohledech by tedy bylo zajímavé a užitečné propojit možnosti
minule popsané knihovny <i>Pint</i> s&nbsp;knihovnou <i>SymPy</i>. Jak uvidíme
v&nbsp;dalších kapitolách, je to skutečně do jisté míry možné, i když výsledky
nemusí být vždy dokonalé. Navíc má knihovna <i>SymPy</i> vlastní variantu práce
s&nbsp;veličinami a jednotkami, což je oblast, které se taktéž budeme věnovat
v&nbsp;navazujícím textu.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace knihovny <i>Sympy</i></h2>

<p>Knihovna <i>Sympy</i> je, ostatně stejně jako knihovna <i>Pint</i> a
(deseti)tisíce dalších balíčků, nabízena přes <a
href="https://pypi.org/project/sympy">PyPi</a>, takže její instalace by měla
být jednoduchá a přímočará. Knihovnu nainstalujeme pro aktuálně přihlášeného
uživatele následujícím způsobem:</p>

<pre>
$ <strong>pip3 install --user sympy</strong>
&nbsp;
Collecting sympy
  Downloading sympy-1.10.1-py3-none-any.whl (6.4 MB)
     |████████████████████████████████| 6.4 MB 2.0 MB/s 
Collecting mpmath&gt;=0.19
  Downloading mpmath-1.2.1-py3-none-any.whl (532 kB)
     |████████████████████████████████| 532 kB 36.8 MB/s 
Installing collected packages: mpmath, sympy
Successfully installed mpmath-1.2.1 sympy-1.10.1
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že jedinou závislostí je
knihovna <i>mpmath</i>, s&nbsp;níž se ještě na stránkách Roota setkáme (na
druhou stranu existuje mnoho balíčků, které naopak <i>závisí</i> na
SymPy).</div></p>

<p>Základní kontrolu instalace provedeme jednoduše &ndash; přímo
v&nbsp;interpretru programovacího jazyka Python:</p>

<pre>
$ <strong>python</strong>
&nbsp;
Python 3.11.8 (main, Feb  7 2024, 00:00:00) [GCC 13.2.1 20231011 (Red Hat 13.2.1-4)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</pre>

<p>Provedeme jednoduchý test, jestli je možné naimportovat balíček
<strong>sympy</strong> a zobrazit k&nbsp;němu nápovědu:</p>

<pre>
&gt;&gt;&gt; <strong>import sympy</strong>
&gt;&gt;&gt; <strong>help(sympy)</strong>
&nbsp;
Help on package sympy:
&nbsp;
NAME
    sympy
&nbsp;
DESCRIPTION
    SymPy is a Python library for symbolic mathematics. It aims to become a
    full-featured computer algebra system (CAS) while keeping the code as simple
    as possible in order to be comprehensible and easily extensible.  SymPy is
    written entirely in Python. It depends on mpmath, and other external libraries
    may be optionally for things like plotting support.
&nbsp;
    See the webpage for more information and documentation:
&nbsp;
        https://sympy.org
&nbsp;
PACKAGE CONTENTS
    abc
    algebras (package)
    assumptions (package)
    benchmarks (package)
    calculus (package)
    categories (package)
    ...
    ...
    ...
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Manipulace se symboly a výrazy</h2>

<p>Velká síla knihovny <i>Sympy</i> spočívá v&nbsp;její schopnosti manipulace
s&nbsp;výrazy, v&nbsp;nichž jsou použity pojmenované proměnné, pojmenované
konstanty a další symboly. Tyto výrazy se přitom mohou zapsat přímo
v&nbsp;Pythonu &ndash; není nutné je tedy zapisovat do řetězců či použít nějaký
specializovaný <i>DSL</i> (doménově specifický jazyk). Je zde pouze jediný (a
to zcela pochopitelný) háček: nejdříve je totiž nutné každou proměnnou
zkonstruovat jako objekt typu &bdquo;symbol&ldquo; (nejedná se tedy o proměnnou
chápanou kontextu interpretru Pythonu). Provádí se to následujícím
způsobem:</p>

<pre>
import sympy as sp
&nbsp;
x = sp.symbols("x")
expression = 2 * x
print(expression)
</pre>

<p>Výsledek by přitom měl vypadat následovně:</p>

<pre>
2*x
</pre>

<p>Povšimněte si, že v&nbsp;proměnné (v&nbsp;tomto případě v&nbsp;běžné
Pythonovské proměnné) je uložen objekt typu &bdquo;výraz&ldquo;, který obsahuje
celý zapsaný výraz, nikoli pouze jeho výsledek (ten ostatně není možné
vyhodnotit bez znalosti hodnoty <strong>x</strong>).</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Symboly, veličiny a jednotky</h2>

<p>Pokusme se nyní zkombinovat možnosti knihovny <i>Pint</i> (přiřazení
veličiny a jednotky k&nbsp;hodnotě) a knihovny <i>SymPy</i> (práce se symboly).
Vytvoříme symbol nazvaný <strong>x</strong>, kterému ovšem vynásobením
s&nbsp;jednotkou, zde konkrétně s&nbsp;metrem, tuto jednotku přiřadíme.
Výsledkem je hodnota nesoucí informace jak o symbolu, tak i o jeho jednotce,
takže je možné do určité míry pokračovat v&nbsp;symbolických výpočtech:</p>

<pre>
from pint import UnitRegistry
import sympy as sp
&nbsp;
ureg = UnitRegistry()
&nbsp;
x = sp.symbols("x") * ureg.meter
print(x)
&nbsp;
expression = 2 * x
print(expression)
</pre>

<p>Tento skript nejdříve vypíše symbol s&nbsp;jeho jednotkou a potom výsledek
výrazu <strong>2*x</strong>, což je výraz s&nbsp;přiřazenou délkovou
jednotkou:</p>

<pre>
x meter
2*x meter
</pre>

<p>Nyní zkusme nepatrně sofistikovanější příklad. Opět symbolu se jménem
<strong>x</strong> přiřadíme délkovou jednotku, nyní ovšem použijeme výraz
<strong>x*x</strong>. Výsledek tedy bude mít odlišnou jednotku, neboť se již
nebude jednat o délku, ale o plochu:</p>

<pre>
from pint import UnitRegistry
import sympy as sp
&nbsp;
ureg = UnitRegistry()
&nbsp;
x = sp.symbols("x") * ureg.meter
print(x)
&nbsp;
expression = x * x
print(expression)
</pre>

<p>Skript opět nejdříve vypíše symbol s&nbsp;jeho jednotkou a posléze výsledek
výrazu <strong>x*x</strong>:</p>

<pre>
x meter
x**2 meter ** 2
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Základní výpočty se symboly, k&nbsp;nimž jsou připojeny jednotky</h2>

<p>Se symboly je možné provádět (symbolické) výpočty a totéž do jisté míry
platí i pro symboly, ke kterým je přiřazena jednotka. Interně se ovšem jedná o
situaci, kterou musí zpracovat knihovna <i>Pint</i> a nikoli <i>SymPy</i>,
k&nbsp;čemuž se ostatně ještě vrátíme. Ovšem nyní se podívejme na chování obou
knihoven při některých výpočtech. Příkladem je výpočet rychlosti se symboly
<strong>s</strong> a <strong>t</strong>, ke kterým jsou přiřazeny jednotky
<strong>metr</strong> a <strong>sekunda</strong> (tedy nic překvapivého,
základní fyzika pana Newtona):</p>

<pre>
from pint import UnitRegistry
import sympy as sp
&nbsp;
ureg = UnitRegistry()
&nbsp;
s = sp.Symbol("s") * ureg.meter
t = sp.Symbol("t") * ureg.second
&nbsp;
print(s/t)
</pre>

<p>Výsledkem bude výraz <strong>s/t</strong>, jehož jednotkou bude
<strong>meter / second</strong>:</p>

<pre>
s/t meter / second
</pre>

<p>Podobně můžeme provést i nepatrně složitější výpočet, tentokrát výpočet síly
na základě hmotnosti a zrychlení; vše opět podle fyziky pana Newtona:</p>

<pre>
from pint import UnitRegistry
import sympy as sp
&nbsp;
ureg = UnitRegistry()
&nbsp;
m = sp.Symbol("m") * ureg.kilogram
t = sp.Symbol("t") * ureg.second
s = sp.Symbol("s") * ureg.meter
v = s/t
a = v/t
f = m*a
&nbsp;
print(m)
print(t)
print(v)
print(a)
print(f)
</pre>

<p>Výsledkem jsou výrazy se symboly, které mají korektní jednotky:</p>

<pre>
m kilogram
t second
s/t meter / second
s/t**2 meter / second ** 2
m*s/t**2 kilogram * meter / second ** 2
</pre>

<p><div class="rs-tip-major">Poznámka: naformátování výsledků není příliš
dobré, protože ve výchozím nastavení jsou jednotky od výrazu odděleny jen
jedinou mezerou, což není příliš čitelné.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Výpis hodnoty odděleně od jednotek</h2>

<p><a href="#k05">V&nbsp;předchozí kapitole</a> jsme si ukázali, že
naformátování výsledků (výrazu+jednotky) není příliš čitelné. Ovšem stále
můžeme využít triku, s&nbsp;nímž jsme se seznámili minule, tedy získání samotné
hodnoty (což je ovšem v&nbsp;tomto případě výraz a nikoli číslo) a jednotky
odděleně. Tyto dvě informace jsou přístupné přes atributy
<strong>magnitude</strong> a <strong>units</strong>, takže toho můžeme snadno
dosáhnout:</p>

<pre>
from pint import UnitRegistry
import sympy as sp
&nbsp;
ureg = UnitRegistry()
&nbsp;
m = sp.Symbol("m") * ureg.kilogram
t = sp.Symbol("t") * ureg.second
s = sp.Symbol("s") * ureg.meter
v = s/t
a = v/t
f = m*a
&nbsp;
print(f"{m.magnitude} \t [{m.units}]")
print(f"{t.magnitude} \t [{t.units}]")
print(f"{v.magnitude} \t [{v.units}]")
print(f"{a.magnitude} \t [{a.units}]")
print(f"{f.magnitude} \t [{f.units}]")
</pre>

<p>Po spuštění tohoto skriptu se v&nbsp;prvním sloupci zobrazí hodnota (výraz,
nikoli číslo) a ve druhém sloupci jednotka umístěná do hranatých závorek, jak
bývá zvykem:</p>

<pre>
m           [kilogram]
t           [second]
s/t         [meter / second]
s/t**2      [meter / second ** 2]
m*s/t**2    [kilogram * meter / second ** 2]
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Automatická konverze jednotek</h2>

<p>V&nbsp;dalším kroku si vyzkoušíme, jaká situace nastane v&nbsp;případě, že
nejdříve vypočteme sílu (z&nbsp;jiných jednotek) a sečteme ji s&nbsp;hodnotou
vyjádřenou přímo v&nbsp;Newtonech. Výsledkem bude podle očekávání výraz (se
symboly), ovšem nás bude zajímat především výsledná jednotka vypočtená
resp.&nbsp;odvozená knihovnou <i>Pint</i>:</p>

<pre>
from pint import UnitRegistry
import sympy as sp
&nbsp;
ureg = UnitRegistry()
&nbsp;
m = sp.Symbol("m") * ureg.kilogram
t = sp.Symbol("t") * ureg.second
s = sp.Symbol("s") * ureg.meter
v = s/t
a = v/t
f = m*a
&nbsp;
g = sp.Symbol("g") * ureg.newton
&nbsp;
fx = f + g
&nbsp;
print(fx.magnitude, "\t", fx.units)
</pre>

<p>Z&nbsp;výsledků, zejména ze druhého sloupce, je patrné, že se jednotky
odvodily správně a tudíž nedošlo k&nbsp;vyhození výjimky:</p>

<pre>
1.0*g + m*s/t**2         kilogram * meter / second ** 2
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Kontrola, zda jsou jednotky kompatibilní</h2>

<p>V&nbsp;případě, že ve výrazu použijeme jednotky, které nejsou kompatibilní,
dojde k&nbsp;běhové výjimce. To si můžeme snadno ukázat po modifikaci
předchozího příkladu tak, že budeme sčítat sílu s&nbsp;časem (jednotky u
symbolu <strong>g</strong> se změnily):</p>

<pre>
from pint import UnitRegistry
import sympy as sp
&nbsp;
ureg = UnitRegistry()
&nbsp;
m = sp.Symbol("m") * ureg.kilogram
t = sp.Symbol("t") * ureg.second
s = sp.Symbol("s") * ureg.meter
v = s/t
a = v/t
f = m*a
&nbsp;
g = sp.Symbol("g") * ureg.second
&nbsp;
fx = f + g
</pre>

<p>Povšimněte si zejména důvodu, proč výjimka vznikla (poslední řádek):</p>

<pre>
  File "/home/ptisnovs/src/most-popular-python-libs/sympy-pint/16_wrong_units.py", line 15, in &lt;module&gt;
    fx = f + g
         ~~^~~
  File "/home/ptisnovs/.local/lib/python3.11/site-packages/pint/facets/plain/quantity.py", line 841, in __add__
    return self._add_sub(other, operator.add)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ptisnovs/.local/lib/python3.11/site-packages/pint/facets/plain/quantity.py", line 103, in wrapped
    return f(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ptisnovs/.local/lib/python3.11/site-packages/pint/facets/plain/quantity.py", line 743, in _add_sub
    raise DimensionalityError(
pint.errors.DimensionalityError: Cannot convert from 'kilogram * meter / second ** 2' ([length] * [mass] / [time] ** 2) to 'second' ([time])
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Omezení kooperace mezi knihovnami Pint a SymPy</h2>

<p></p>

<pre>
from pint import UnitRegistry
import sympy as sp
&nbsp;
ureg = UnitRegistry()
&nbsp;
m = sp.Symbol("m") * ureg.kilogram
t = sp.Symbol("t") * ureg.second
s = sp.Symbol("s") * ureg.meter
v = s/t
a = v/t
f = m*a
&nbsp;
print(f.magnitude, "\t", f.units)
&nbsp;
df = sp.diff(f, "t")
print(df)
</pre>

<pre>
m*s/t**2         kilogram * meter / second ** 2
-2*m*s/t**3
</pre>

<pre>
from pint import UnitRegistry
from sympy import pprint, solve, Symbol
&nbsp;
ureg = UnitRegistry()
&nbsp;
a = Symbol("a") * ureg.meter
b = Symbol("b") * ureg.meter
c = Symbol("c") * ureg.meter
&nbsp;
x = Symbol("x")
&nbsp;
f = a * x ** 2 + b * x + c
&nbsp;
print(f)
print()
&nbsp;
solution = solve(f, x)
pprint(solution)
</pre>

<pre>
a*x**2 + b*x + c meter
&nbsp;
⎡        _____________          _____________⎤
⎢       ╱           2          ╱           2 ⎥
⎢-b - ╲╱  -4⋅a⋅c + b    -b + ╲╱  -4⋅a⋅c + b  ⎥
⎢─────────────────────, ─────────────────────⎥
⎣         2⋅a                    2⋅a         ⎦
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Jednotky, které jsou přímo součástí knihovny <i>SymPy</i></h2>

<p></p>

<pre>
from sympy.physics.units import meter, second
from sympy.physics.units import Quantity
import sympy as sp
&nbsp;
&nbsp;
def unit(expr):
    return expr.subs({x: 1 for x in expr.args if not x.has(Quantity)})
&nbsp;
&nbsp;
s = sp.Symbol("m") * meter
t = sp.Symbol("t") * second
v = s/t
a = v/t
a2 = 100*a
&nbsp;
print(v)
print(a)
print(a2)
&nbsp;
print()
&nbsp;
print(unit(v))
print(unit(a))
print(unit(a2))
</pre>

<pre>
meter*m/(second*t)
meter*m/(second**2*t**2)
100*meter*m/(second**2*t**2)
&nbsp;
meter/second
meter/second**2
meter/second**2
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Derivace výrazu s&nbsp;jednotkami</h2>

<p></p>

<pre>
from sympy.physics.units import meter, second
from sympy.physics.units import Quantity
import sympy as sp
&nbsp;
&nbsp;
def unit(expr):
    return expr.subs({x: 1 for x in expr.args if not x.has(Quantity)})
&nbsp;
&nbsp;
s = sp.Symbol("m") * meter
t = sp.Symbol("t") * second
v = s/t
a = sp.diff(v, "t")
&nbsp;
print(v)
print(a)
</pre>

<pre>
meter*m/(second*t)
-meter*m/(second*t**2)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Výpočet kořenů kvadratické rovnice s&nbsp;jednotkami</h2>

<p></p>

<pre>
from sympy import pprint, solve, Symbol
from sympy.physics.units import meter, second
&nbsp;
a = Symbol("a") * meter
b = Symbol("b") * meter
c = Symbol("c") * meter
&nbsp;
x = Symbol("x")
&nbsp;
f = a * x ** 2 + b * x + c
&nbsp;
pprint(f)
print()
&nbsp;
solution = solve(f, x)
pprint(solution)
</pre>

<pre>
   2                            
a⋅x ⋅meter + b⋅x⋅meter + c⋅meter
&nbsp;
⎡        _____________          _____________⎤
⎢       ╱           2          ╱           2 ⎥
⎢-b - ╲╱  -4⋅a⋅c + b    -b + ╲╱  -4⋅a⋅c + b  ⎥
⎢─────────────────────, ─────────────────────⎥
⎣         2⋅a                    2⋅a         ⎦
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Kombinace různých jednotek při výpočtu kořenů kvadratické rovnice</h2>

<p></p>

<pre>
from sympy import pprint, solve, Symbol
from sympy.physics.units import meter, second, kelvin
&nbsp;
a = Symbol("a") * meter
b = Symbol("b") * second
c = Symbol("c") * kelvin
&nbsp;
x = Symbol("x")
&nbsp;
f = a * x ** 2 + b * x + c
&nbsp;
pprint(f)
print()
&nbsp;
solution = solve(f, x)
pprint(solution)
</pre>

<pre>
              2                   
c⋅kelvin + a⋅x ⋅meter + b⋅x⋅second
&nbsp;
⎡               __________________________________                 __________________________________⎤
⎢              ╱                        2       2                 ╱                        2       2 ⎥
⎢-b⋅second - ╲╱  -4⋅a⋅c⋅kelvin⋅meter + b ⋅second    -b⋅second + ╲╱  -4⋅a⋅c⋅kelvin⋅meter + b ⋅second  ⎥
⎢─────────────────────────────────────────────────, ─────────────────────────────────────────────────⎥
⎣                    2⋅a⋅meter                                          2⋅a⋅meter                    ⎦
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Řešení nerovnice v&nbsp;případě, že jsou použity jednotky</h2>

<p></p>

<pre>
from sympy import init_printing, pprint, solve, solveset, symbols
from pint import UnitRegistry
from sympy.physics.units import meter
&nbsp;
ureg = UnitRegistry()
&nbsp;
&nbsp;
init_printing(use_unicode=True)
&nbsp;
x = symbols("x")
&nbsp;
f = x > 10 * meter
&nbsp;
pprint(f)
&nbsp;
print()
&nbsp;
solution = solve(f, x)
pprint(solution)
&nbsp;
print()
&nbsp;
solution = solveset(f, x)
pprint(solution)
</pre>

<pre>
x &gt; 10⋅meter
&nbsp;
x &gt; 10⋅meter
&nbsp;
{x │ x ∊ ℂ ∧ (x &gt; 10⋅meter)}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Řešení soustavy nerovnic s&nbsp;jednotkami</h2>

<p></p>

<pre>
from sympy import init_printing, pprint, solve, symbols
from sympy.physics.units import second
&nbsp;
init_printing(use_unicode=True)
&nbsp;
t = symbols("t")
&nbsp;
f1 = t &gt; 10 * second
f2 = t &lt; 20 * second
&nbsp;
pprint(f1)
pprint(f2)
&nbsp;
print()
&nbsp;
solution = solve((f1, f2), t)
pprint(solution)
</pre>

<pre>
t &gt; 10⋅second
t &lt; 20⋅second
&nbsp;
t &gt; 10⋅second ∧ t &lt; 20⋅second
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Příloha: parsing řetězců s&nbsp;hodnotami a jednotkami</h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 byly uloženy do Git repositáře dostupného na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Prvních 25 příkladů je založeno pouze na knihovně <i>Pint</i>, další příklady
pak vyžadují i knihovnu <i>Sympy</i>:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_time.py</td><td>základní použití časových jednotek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/01_time.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/01_time.py</a></td></tr>
<tr><td> 2</td><td>02_dimensionality.py</td><td>získání veličiny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/02_dimensionality.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/02_dimensionality.py</a></td></tr>
<tr><td> 3</td><td>03_time.py</td><td>operace s&nbsp;časovými jednotkami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/03_time.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/03_time.py</a></td></tr>
<tr><td> 4</td><td>04_time_dimensionality.py</td><td>získání veličiny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/04_time_dimensionality.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/04_time_dimensionality.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>05_velocity.py</td><td>rychlostní jednotky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/05_velocity.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/05_velocity.py</a></td></tr>
<tr><td> 6</td><td>06_velocity_dimensionality.py</td><td>získání veličiny (nebo jejího přiblížení)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/06_velocity_dimensionality.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/06_velocity_dimensionality.py</a></td></tr>
<tr><td> 7</td><td>07_wrong_op.py</td><td>detekce nekorektních operací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/07_wrong_op.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/07_wrong_op.py</a></td></tr>
<tr><td> 8</td><td>08_conversion.py</td><td>konverze jednotek, první příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/08_conversion.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/08_conversion.py</a></td></tr>
<tr><td> 9</td><td>09_conversion.py</td><td>konverze jednotek, druhý příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/09_conversion.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/09_conversion.py</a></td></tr>
<tr><td>10</td><td>10_area.py</td><td>výpočet plochy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/10_area.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/10_area.py</a></td></tr>
<tr><td>11</td><td>11_velocity.py</td><td>výpočet rychlosti</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/11_velocity.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/11_velocity.py</a></td></tr>
<tr><td>12</td><td>12_acceleration.py</td><td>výpočet zrychlení</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/12_acceleration.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/12_acceleration.py</a></td></tr>
<tr><td>13</td><td>13_force.py</td><td>výpočet síly</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/13_force.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/13_force.py</a></td></tr>
<tr><td>14</td><td>14_units_and_dimensionality.py</td><td>veličiny a jednotky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/14_units_and_dimensionality.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/14_units_and_dimensionality.py</a></td></tr>
<tr><td>15</td><td>15_prefixes.py</td><td>použití prefixů u jednotek, první příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/15_prefixes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/15_prefixes.py</a></td></tr>
<tr><td>16</td><td>16_prefixes.py</td><td>použití prefixů u jednotek, druhý příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/16_prefixes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/16_prefixes.py</a></td></tr>
<tr><td>17</td><td>17_prefixes.py</td><td>použití prefixů u jednotek, třetí příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/17_prefixes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/17_prefixes.py</a></td></tr>
<tr><td>18</td><td>18_binary_prefixes.py</td><td>binární prefixy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/18_binary_prefixes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/18_binary_prefixes.py</a></td></tr>
<tr><td>19</td><td>19_byte_to_bites.py</td><td>binární prefixy a převod bajtů na bity</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/19_byte_to_bites.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/19_byte_to_bites.py</a></td></tr>
<tr><td>20</td><td>20_angle.py</td><td>úhlové jednotky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/20_angle.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/20_angle.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>21_list_units.py</td><td>výpis všech dostupných jednotek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/21_list_units.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/21_list_units.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>22</td><td>22_reduced_units.py</td><td>redukce dimensionality</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/22_reduced_units.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/22_reduced_units.py</a></td></tr>
<tr><td>23</td><td>23_to_base_units.py</td><td>redukce na základní jednotky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/23_to_base_units.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/23_to_base_units.py</a></td></tr>
<tr><td>24</td><td>24_to_base_units.py</td><td>redukce na základní jednotky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/24_to_base_units.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/24_to_base_units.py</a></td></tr>
<tr><td>25</td><td>25_formatting.py</td><td>formátovaný výstup</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pint/25_formatting.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pint/25_formatting.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>01_symbol.py</td><td>použití symbolů v&nbsp;knihovně Sympy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/01_symbol.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/01_symbol.py</a></td></tr>
<tr><td>27</td><td>02_symbol_and_unit.py</td><td>kombinace symbolů a jednotek, první příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/02_symbol_and_unit.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/02_symbol_and_unit.py</a></td></tr>
<tr><td>28</td><td>03_symbol_and_unit.py</td><td>kombinace symbolů a jednotek, druhý příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/03_symbol_and_unit.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/03_symbol_and_unit.py</a></td></tr>
<tr><td>29</td><td>04_velocity.py</td><td>výpočet rychlosti s&nbsp;využitím jednotek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/04_velocity.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/04_velocity.py</a></td></tr>
<tr><td>30</td><td>05_force.py</td><td>výpočet síly s&nbsp;využitím jednotek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/05_force.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/05_force.py</a></td></tr>
<tr><td>31</td><td>06_better_output.py</td><td>tisk hodnoty i jednotek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/06_better_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/06_better_output.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>32</td><td>07_symbolic_computation.py</td><td>symbolické výpočty v&nbsp;knihovně Sympy, první příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/07_symbolic_computation.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/07_symbolic_computation.py</a></td></tr>
<tr><td>33</td><td>08_symbolic_computation.py</td><td>symbolické výpočty v&nbsp;knihovně Sympy, první příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/08_symbolic_computation.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/08_symbolic_computation.py</a></td></tr>
<tr><td>34</td><td>09_solve.py</td><td>symbolické řešení rovnice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/09_solve.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/09_solve.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>35</td><td>10_sympy_units.py</td><td>jednotky přímo z&nbsp;knihovny Sympy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/10_sympy_units.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/10_sympy_units.py</a></td></tr>
<tr><td>36</td><td>11_diff.py</td><td>symbolický výpočet derivace s&nbsp;využitím jednotek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/11_diff.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/11_diff.py</a></td></tr>
<tr><td>37</td><td>12_solve.py</td><td>symbolické řešení rovnice s&nbsp;využitím jednotek, první příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/12_solve.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/12_solve.py</a></td></tr>
<tr><td>38</td><td>13_solve.py</td><td>symbolické řešení rovnice s&nbsp;využitím jednotek, druhý příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/13_solve.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/13_solve.py</a></td></tr>
<tr><td>39</td><td>14_solve.py</td><td>symbolické řešení nerovnice s&nbsp;využitím jednotek, první příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/14_solve.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/14_solve.py</a></td></tr>
<tr><td>40</td><td>15_solve.py</td><td>symbolické řešení nerovnice s&nbsp;využitím jednotek, druhý příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/15_solve.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/15_solve.py</a></td></tr>
<tr><td>41</td><td>16_wrong_units.py</td><td>použití nekompatibilních jednotek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/16_wrong_units.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy-pint/16_wrong_units.py</a></td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>Units and Quantities<br />
<a href="https://uomresearchit.github.io/programming_with_python/06-units_and_quantities/index.html">https://uomresearchit.github.io/programming_with_python/06-units_and_quantities/index.html</a>
</li>

<li>Fyzikální veličina (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Fyzik%C3%A1ln%C3%AD_veli%C4%8Dina">https://cs.wikipedia.org/wiki/Fyzik%C3%A1ln%C3%AD_veli%C4%8Dina</a>
</li>

<li>Fyzikální jednotka (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Fyzik%C3%A1ln%C3%AD_jednotka">https://cs.wikipedia.org/wiki/Fyzik%C3%A1ln%C3%AD_jednotka</a>
</li>

<li>Soustava SI (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Soustava_SI">https://cs.wikipedia.org/wiki/Soustava_SI</a>
</li>

<li>Dokumentace ke knihovně Pint<br />
<a href="https://pint.readthedocs.io/en/stable/index.html">https://pint.readthedocs.io/en/stable/index.html</a>
</li>

<li>Knihovna astropy na PyPi<br />
<a href="https://pypi.org/project/astropy/">https://pypi.org/project/astropy/</a>
</li>

<li>Knihovna Pint na PyPi<br />
<a href="https://pypi.org/project/Pint/">https://pypi.org/project/Pint/</a>
</li>

<li>Repositář knihovny Pint<br />
<a href="https://github.com/hgrecco/pint">https://github.com/hgrecco/pint</a>
</li>

<li>Knihovna units na PyPi (nevyvíjený projekt)<br />
<a href="https://pypi.org/project/units/">https://pypi.org/project/units/</a>
</li>

<li>Knihovna quantity na PyPi<br />
<a href="https://pypi.org/project/quantity/">https://pypi.org/project/quantity/</a>
</li>

<li>Repositář s&nbsp;knihovnou quantity<br />
<a href="https://github.com/mamrhein/quantity">https://github.com/mamrhein/quantity</a>
</li>

<li>SymPy<br />
<a href="https://www.sympy.org/en/index.html">https://www.sympy.org/en/index.html</a>
</li>

<li>SymPy na PyPi<br />
<a href="https://pypi.org/project/sympy/">https://pypi.org/project/sympy/</a>
</li>

<li>mpmath<br />
<a href="https://mpmath.org/">https://mpmath.org/</a>
</li>

<li>mpmath na PyPi<br />
<a href="https://pypi.org/project/mpmath/">https://pypi.org/project/mpmath/</a>
</li>

<li>Symbolic Maths in Python<br />
<a href="https://alexandrugris.github.io/maths/2017/04/30/symbolic-maths-python.html">https://alexandrugris.github.io/maths/2017/04/30/symbolic-maths-python.html</a>
</li>

<li>SymPy shell<br />
<a href="https://live.sympy.org/">https://live.sympy.org/</a>
</li>

<li>Symbolic programming<br />
<a href="https://en.wikipedia.org/wiki/Symbolic_programming">https://en.wikipedia.org/wiki/Symbolic_programming</a>
</li>

<li>Symbolic language (programming)<br />
<a href="https://en.wikipedia.org/wiki/Symbolic_language_(programming)">https://en.wikipedia.org/wiki/Symbolic_language_(programming)</a>
</li>

<li>Computer algebra<br />
<a href="https://en.wikipedia.org/wiki/Computer_algebra">https://en.wikipedia.org/wiki/Computer_algebra</a>
</li>

<li>Knihovna xarray-units na PyPi<br />
<a href="https://pypi.org/project/xarray-units/">https://pypi.org/project/xarray-units/</a>
</li>

<li>Kawa: překvapivě silný a výkonný dialekt Scheme pro JVM<br />
<a href="https://www.root.cz/clanky/kawa-prekvapive-silny-a-vykonny-dialekt-scheme-pro-jvm/">https://www.root.cz/clanky/kawa-prekvapive-silny-a-vykonny-dialekt-scheme-pro-jvm/</a>
</li>

<li>Jazyk Kawa v&nbsp;ekosystému virtuálního stroje Javy<br />
<a href="https://www.root.cz/clanky/jazyk-kawa-v-ekosystemu-virtualniho-stroje-javy/">https://www.root.cz/clanky/jazyk-kawa-v-ekosystemu-virtualniho-stroje-javy/</a>
</li>

<li>Zpracování vektorů, matic a N-rozměrných polí v&nbsp;programovacím jazyku Kawa<br />
<a href="https://www.root.cz/clanky/zpracovani-vektoru-matic-a-n-rozmernych-poli-v-programovacim-jazyku-kawa/">https://www.root.cz/clanky/zpracovani-vektoru-matic-a-n-rozmernych-poli-v-programovacim-jazyku-kawa/</a>
</li>

<li>Kawa: Compiling Scheme to Java<br />
<a href="https://www.mit.edu/afs.new/sipb/project/kawa/doc/kawa-tour.html">https://www.mit.edu/afs.new/sipb/project/kawa/doc/kawa-tour.html</a>
</li>

<li>Kawa in Languages shootout<br />
<a href="http://per.bothner.com/blog/2010/Kawa-in-shootout/">http://per.bothner.com/blog/2010/Kawa-in-shootout/</a>
</li>

<li>Kawa 2.0 Supports Scheme R7RS<br />
<a href="https://developers.slashdot.org/story/14/12/13/2259225/kawa-20-supports-scheme-r7rs/">https://developers.slashdot.org/story/14/12/13/2259225/kawa-20-supports-scheme-r7rs/</a>
</li>

<li>Kawa — fast scripting on the Java platform<br />
<a href="https://lwn.net/Articles/623349/">https://lwn.net/Articles/623349/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

