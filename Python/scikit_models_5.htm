<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
import numpy as np
import matplotlib.pyplot as plt

from sklearn import linear_model

<i># počet vzorků ve vektorech x i y</i>
VALUES = 50

<i># x je vektor</i>
x = np.linspace(0, 10, VALUES)

<i># y je vektor</i>
y = np.linspace(-1, 1, VALUES) + 0.5*np.random.rand(VALUES)

<i># převod vektoru na 2D matici</i>
X = x.reshape(-1, 1)

<i># tvar matice X a vektoru y</i>
print("X shape:", X.shape)
print("y shape:", y.shape)

<i># konstrukce modelu</i>
lr = linear_model.LinearRegression()

<i># trénink modelu (X musí být maticí)</i>
lr.fit(X, y)

<i># predikce modelu</i>
y_pred = lr.predict(X)

<i># výpis vypočtených koeficientů modelu</i>
print("Coefficients: \n", lr.coef_)
print("Intercept: \n", lr.intercept_)

<i># vykreslení výsledku</i>
plt.scatter(x, y, color="black", s=2)
plt.plot(x, y_pred, color="blue", linewidth=2)

<i># titulek grafu</i>
plt.title("Linear regression")

<i># osy</i>
plt.xticks()
plt.yticks()

<i># ulozeni diagramu do souboru</i>
plt.savefig("112.png")

<i># zobrazeni diagramu</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 1: </i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
import numpy as np
import matplotlib.pyplot as plt

from sklearn import linear_model

<i># počet vzorků ve vektorech x i y</i>
VALUES = 50

<i># x je vektor</i>
x = np.linspace(0, 10, VALUES)

<i># y je vektor</i>
y = np.linspace(-1, 1, VALUES) + 0.5*np.random.rand(VALUES)

<i># převod vektoru na 2D matici</i>
X = x.reshape(-1, 1)

<i># tvar matice X a vektoru y</i>
print("X shape:", X.shape)
print("y shape:", y.shape)

<i># konstrukce modelu</i>
lr = linear_model.LinearRegression(fit_intercept=False)

<i># trénink modelu (X musí být maticí)</i>
lr.fit(X, y)

<i># predikce modelu</i>
y_pred = lr.predict(X)

<i># výpis vypočtených koeficientů modelu</i>
print("Coefficients: \n", lr.coef_)
print("Intercept: \n", lr.intercept_)

<i># vykreslení výsledku</i>
plt.scatter(x, y, color="black", s=2)
plt.plot(x, y_pred, color="blue", linewidth=2)

<i># titulek grafu</i>
plt.title("Linear regression")

<i># osy</i>
plt.xticks()
plt.yticks()

<i># ulozeni diagramu do souboru</i>
plt.savefig("113.png")

<i># zobrazeni diagramu</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 2:</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
import numpy as np
import matplotlib.pyplot as plt

from sklearn import linear_model

<i># počet vzorků ve vektorech x i y</i>
VALUES = 50

<i># x je vektor</i>
x = np.linspace(0, 10, VALUES)

<i># y je vektor</i>
y = np.linspace(0, 2, VALUES) + 0.5*np.random.rand(VALUES)

<i># převod vektoru na 2D matici</i>
X = x.reshape(-1, 1)

<i># tvar matice X a vektoru y</i>
print("X shape:", X.shape)
print("y shape:", y.shape)

<i># konstrukce modelu</i>
lr = linear_model.LinearRegression(fit_intercept=False)

<i># trénink modelu (X musí být maticí)</i>
lr.fit(X, y)

<i># predikce modelu</i>
y_pred = lr.predict(X)

<i># výpis vypočtených koeficientů modelu</i>
print("Coefficients: \n", lr.coef_)
print("Intercept: \n", lr.intercept_)

<i># vykreslení výsledku</i>
plt.scatter(x, y, color="black", s=2)
plt.plot(x, y_pred, color="blue", linewidth=2)

<i># titulek grafu</i>
plt.title("Linear regression")

<i># osy</i>
plt.xticks()
plt.yticks()

<i># ulozeni diagramu do souboru</i>
plt.savefig("114.png")

<i># zobrazeni diagramu</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 3:</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
import numpy as np
import matplotlib.pyplot as plt

from sklearn import linear_model

<i># počet vzorků ve vektorech x i y</i>
VALUES = 50

<i># x je vektor</i>
x = np.linspace(0, 10, VALUES)

<i># Y je matice vytvořená ze dvou vektorů</i>
y1 = np.linspace(-1, 1, VALUES) + 0.5*np.random.rand(VALUES)
y2 = np.linspace(1, -1, VALUES) + 0.5*np.random.rand(VALUES)

<i># konstrukce matice se dvěma sloupci</i>
Y= np.column_stack((y1, y2))

<i># převod vektoru na 2D matici</i>
X = x.reshape(-1, 1)

<i># tvar matic X a Y</i>
print("X shape:", X.shape)
print("Y shape:", Y.shape)

<i># konstrukce modelu</i>
lr = linear_model.LinearRegression()

<i># trénink modelu</i>
lr.fit(X, Y)

<i># predikce modelu</i>
y_pred = lr.predict(X)

<i># výpis vypočtených koeficientů modelu</i>
print("Coefficients: \n", lr.coef_)
print("Intercept: \n", lr.intercept_)

for dimension in range(0, 2):
    <i># vykreslení výsledku</i>
    plt.scatter(x, Y[:, dimension], color="black", s=2)
    plt.plot(x, y_pred[:, dimension], color="blue", linewidth=2)

    <i># titulek grafu</i>
    plt.title(f"Linear regression in dimension {dimension}")

    <i># osy</i>
    plt.xticks()
    plt.yticks()

    <i># ulozeni diagramu do souboru</i>
    plt.savefig(f"115_{dimension}.png")

    <i># zobrazeni diagramu</i>
    plt.show()

    <i># druhy diagram</i>
    plt.close()
</pre>

*** image ***
<p><i>Obrázek 4: </i></p>

*** image ***
<p><i>Obrázek 5: </i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
import numpy as np

<i># počet vzorků v mřížce</i>
VALUES = 5

<i># X je matice vytvořená z mřížky</i>
<i># dvojice vektorů pro konstrukci mřížky</i>
x1 = np.linspace(0, 100, VALUES)
x2 = np.linspace(0, 100, VALUES)

print("x1:", x1)
print("x2:", x2)
print()

<i># konstrukce mřížky</i>
grid = np.meshgrid(x1, x2)

print("grid #1:\n", grid[0])
print()
print("grid #2:\n", grid[1])
print()

<i># změna tvaru na matici se dvěma sloupci</i>
X = np.vstack([grid[0].flatten(), grid[1].flatten()]).T

print("X shape:", X.shape)
print(X)
print()

<i># y je vektor</i>
y = (grid[0] + grid[1]).flatten()

print("y shape:", y.shape)
print(y)
</pre>

<pre>
x1: [  0.  25.  50.  75. 100.]
x2: [  0.  25.  50.  75. 100.]

grid #1:
 [[  0.  25.  50.  75. 100.]
 [  0.  25.  50.  75. 100.]
 [  0.  25.  50.  75. 100.]
 [  0.  25.  50.  75. 100.]
 [  0.  25.  50.  75. 100.]]

grid #2:
 [[  0.   0.   0.   0.   0.]
 [ 25.  25.  25.  25.  25.]
 [ 50.  50.  50.  50.  50.]
 [ 75.  75.  75.  75.  75.]
 [100. 100. 100. 100. 100.]]

X shape: (25, 2)
[[  0.   0.]
 [ 25.   0.]
 [ 50.   0.]
 [ 75.   0.]
 [100.   0.]
 [  0.  25.]
 [ 25.  25.]
 [ 50.  25.]
 [ 75.  25.]
 [100.  25.]
 [  0.  50.]
 [ 25.  50.]
 [ 50.  50.]
 [ 75.  50.]
 [100.  50.]
 [  0.  75.]
 [ 25.  75.]
 [ 50.  75.]
 [ 75.  75.]
 [100.  75.]
 [  0. 100.]
 [ 25. 100.]
 [ 50. 100.]
 [ 75. 100.]
 [100. 100.]]

y shape: (25,)
[  0.  25.  50.  75. 100.  25.  50.  75. 100. 125.  50.  75. 100. 125.
 150.  75. 100. 125. 150. 175. 100. 125. 150. 175. 200.]
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
import numpy as np
import matplotlib.pyplot as plt

from sklearn import linear_model

<i># počet vzorků v mřížce</i>
VALUES = 20

<i># X je matice vytvořená z mřížky</i>
<i># dvojice vektorů pro konstrukci mřížky</i>
x1 = np.linspace(1, 100, VALUES)
x2 = np.linspace(1, 100, VALUES)

<i># konstrukce mřížky</i>
grid = np.meshgrid(x1, x2)

<i># změna tvaru na matici se dvěma sloupci</i>
X = np.vstack([grid[0].flatten(), grid[1].flatten()]).T

<i># y je vektor</i>
y = (grid[0] + grid[1]).flatten()

<i># tvar matice X a vektoru y</i>
print("X shape:", X.shape)
print("y shape:", y.shape)

<i># konstrukce modelu</i>
lr = linear_model.LinearRegression()

<i># trénink modelu</i>
lr.fit(X, y)

<i># predikce modelu</i>
y_pred = lr.predict(X).reshape((VALUES, VALUES))
print(y_pred)

<i># výpis vypočtených koeficientů modelu</i>
print("Coefficients: \n", lr.coef_)
print("Intercept: \n", lr.intercept_)

<i># vykreslení výsledku do 3D grafu</i>
fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(projection='3d')

<i># body ze vstupní datové sady</i>
ax.scatter(X[:, 0], X[:, 1], y, color="black", s=2)

<i># výsledkem modelu je rovina</i>
ax.plot_surface(grid[0], grid[1], y_pred, alpha = 0.5)

<i># ulozeni diagramu do souboru</i>
plt.savefig("117_.png")

<i># zobrazeni diagramu</i>
plt.show()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
import numpy as np
import matplotlib.pyplot as plt

from sklearn import linear_model

<i># počet vzorků v mřížce</i>
VALUES = 20

<i># X je matice vytvořená z mřížky</i>
<i># dvojice vektorů pro konstrukci mřížky</i>
x1 = np.linspace(1, 100, VALUES)
x2 = np.linspace(1, 100, VALUES)

<i># konstrukce mřížky</i>
grid = np.meshgrid(x1, x2)

<i># změna tvaru na matici se dvěma sloupci</i>
X = np.vstack([grid[0].flatten(), grid[1].flatten()]).T

<i># y je vektor</i>
y = (grid[0] + grid[1]).flatten() + 50*np.random.rand(VALUES**2)

<i># tvar matice X a vektoru y</i>
print("X shape:", X.shape)
print("y shape:", y.shape)

<i># konstrukce modelu</i>
lr = linear_model.LinearRegression()

<i># trénink modelu</i>
lr.fit(X, y)

<i># predikce modelu</i>
y_pred = lr.predict(X).reshape((VALUES, VALUES))
print(y_pred)

<i># výpis vypočtených koeficientů modelu</i>
print("Coefficients: \n", lr.coef_)
print("Intercept: \n", lr.intercept_)

<i># vykreslení výsledku do 3D grafu</i>
fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(projection='3d')

<i># body ze vstupní datové sady</i>
ax.scatter(X[:, 0], X[:, 1], y, color="black", s=2)

<i># výsledkem modelu je rovina</i>
ax.plot_surface(grid[0], grid[1], y_pred, alpha = 0.5)

<i># ulozeni diagramu do souboru</i>
plt.savefig("118_.png")

<i># zobrazeni diagramu</i>
plt.show()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
import numpy as np
import matplotlib.pyplot as plt

from sklearn import linear_model

<i># počet vzorků v mřížce</i>
VALUES = 20

<i># X je matice vytvořená z mřížky</i>
<i># dvojice vektorů pro konstrukci mřížky</i>
x1 = np.linspace(1, 100, VALUES)
x2 = np.linspace(1, 100, VALUES)

<i># konstrukce mřížky</i>
grid = np.meshgrid(x1, x2)

<i># změna tvaru na matici se dvěma sloupci</i>
X = np.vstack([grid[0].flatten(), grid[1].flatten()]).T

<i># Y je matice vytvořená ze dvou vektorů</i>
y1 = (grid[0] + grid[1]).flatten() + 0*np.random.rand(VALUES**2) 
y2 = (grid[0] - grid[1]).flatten() + 0*np.random.rand(VALUES**2)

<i># konstrukce matice se dvěma sloupci</i>
Y= np.column_stack((y1, y2))

<i># tvar matic X a Y</i>
print("X shape:", X.shape)
print("Y shape:", Y.shape)

<i># konstrukce modelu</i>
lr = linear_model.LinearRegression()

<i># trénink modelu</i>
lr.fit(X, Y)

<i># predikce modelu</i>
y_pred = lr.predict(X).reshape((VALUES, VALUES, 2))

<i># výpis vypočtených koeficientů modelu</i>
print("Coefficients: \n", lr.coef_)
print("Intercept: \n", lr.intercept_)

for dimension in range(0, 2):
    <i># vykreslení výsledku do 3D grafu</i>
    fig = plt.figure(figsize=(8, 8))
    ax = fig.add_subplot(projection='3d')

    <i># body ze vstupní datové sady</i>
    ax.scatter(X[:, 0], X[:, 1], Y[:, dimension], color="black", s=2)

    <i># výsledkem modelu je rovina</i>
    ax.plot_surface(grid[0], grid[1], y_pred[:, :, dimension], alpha = 0.5)

    <i># ulozeni diagramu do souboru</i>
    plt.savefig(f"119_{dimension}.png")

    <i># zobrazeni diagramu</i>
    plt.show()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
import numpy as np
import matplotlib.pyplot as plt

from sklearn import linear_model

<i># počet vzorků v mřížce</i>
VALUES = 20

<i># X je matice vytvořená z mřížky</i>
<i># dvojice vektorů pro konstrukci mřížky</i>
x1 = np.linspace(1, 100, VALUES)
x2 = np.linspace(1, 100, VALUES)

<i># konstrukce mřížky</i>
grid = np.meshgrid(x1, x2)

<i># změna tvaru na matici se dvěma sloupci</i>
X = np.vstack([grid[0].flatten(), grid[1].flatten()]).T

<i># Y je matice vytvořená ze dvou vektorů</i>
y1 = (grid[0] + grid[1]).flatten() + 50*np.random.rand(VALUES**2) 
y2 = (grid[0] - grid[1]).flatten() + 50*np.random.rand(VALUES**2)

<i># konstrukce matice se dvěma sloupci</i>
Y= np.column_stack((y1, y2))

<i># tvar matic X a Y</i>
print("X shape:", X.shape)
print("Y shape:", Y.shape)

<i># konstrukce modelu</i>
lr = linear_model.LinearRegression()

<i># trénink modelu</i>
lr.fit(X, Y)

<i># predikce modelu</i>
y_pred = lr.predict(X).reshape((VALUES, VALUES, 2))

<i># výpis vypočtených koeficientů modelu</i>
print("Coefficients: \n", lr.coef_)
print("Intercept: \n", lr.intercept_)

for dimension in range(0, 2):
    <i># vykreslení výsledku do 3D grafu</i>
    fig = plt.figure(figsize=(8, 8))
    ax = fig.add_subplot(projection='3d')

    <i># body ze vstupní datové sady</i>
    ax.scatter(X[:, 0], X[:, 1], Y[:, dimension], color="black", s=2)

    <i># výsledkem modelu je rovina</i>
    ax.plot_surface(grid[0], grid[1], y_pred[:, :, dimension], alpha = 0.5)

    <i># ulozeni diagramu do souboru</i>
    plt.savefig(f"120_{dimension}.png")

    <i># zobrazeni diagramu</i>
    plt.show()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
import numpy as np
import matplotlib.pyplot as plt

from sklearn import linear_model
from sklearn.preprocessing import PolynomialFeatures

<i># počet vzorků ve vektorech x i y (delitelne tremi)</i>
VALUES = 120

<i># x je vektor</i>
x = np.linspace(0, 10, VALUES)

<i># mensi vektory pro slozeni y</i>
y1 = 0.5*np.random.rand(VALUES//3)
y2 = 1 + 0.5*np.random.rand(VALUES//3)
y3 = 0.5*np.random.rand(VALUES//3)

<i># y je vektor</i>
y = np.concatenate((y1, y2, y3))

<i># převod vektoru na 2D matici</i>
X = x.reshape(-1, 1)

<i># tvar matice X a vektoru y</i>
print("X shape:", X.shape)
print("y shape:", y.shape)

degree = 2

<i># konstrukce modelu</i>
pr = linear_model.LinearRegression(fit_intercept=False)

poly = PolynomialFeatures(degree=degree)

poly_features = poly.fit_transform(X)

<i># trénink modelu (X musí být maticí)</i>
pr.fit(poly_features, y)

<i># predikce modelu</i>
y_pred = pr.predict(poly_features)

<i># výpis vypočtených koeficientů modelu</i>
print("Coefficients: \n", pr.coef_)
print("Intercept: \n", pr.intercept_)

<i># vykreslení výsledku</i>
plt.scatter(x, y, color="black", s=2)
plt.plot(x, y_pred, color="blue", linewidth=2)

<i># titulek grafu</i>
plt.title(f"Degree={degree}")

<i># osy</i>
plt.xticks(())
plt.yticks(())

<i># ulozeni diagramu do souboru</i>
plt.savefig("121.png")

<i># zobrazeni diagramu</i>
plt.show()
</pre>


<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
import numpy as np
import matplotlib.pyplot as plt

from sklearn import linear_model
from sklearn.preprocessing import PolynomialFeatures

<i># počet vzorků v mřížce</i>
VALUES = 20

<i># X je matice vytvořená z mřížky</i>
<i># dvojice vektorů pro konstrukci mřížky</i>
x1 = np.linspace(1, 100, VALUES)
x2 = np.linspace(1, 100, VALUES)

<i># konstrukce mřížky</i>
grid = np.meshgrid(x1, x2)

<i># změna tvaru na matici se dvěma sloupci</i>
X = np.vstack([grid[0].flatten(), grid[1].flatten()]).T

<i># y je vektor</i>
y = ((grid[0]-50) * (grid[1]-50)).flatten()

<i># tvar matice X a vektoru y</i>
print("X shape:", X.shape)
print("y shape:", y.shape)

degree = 1

<i># konstrukce modelu</i>
pr = linear_model.LinearRegression()

poly = PolynomialFeatures(degree=degree)

poly_features = poly.fit_transform(X)

<i># trénink modelu</i>
pr.fit(poly_features, y)

<i># predikce modelu</i>
y_pred = pr.predict(poly_features).reshape((VALUES, VALUES))
print(y_pred)

<i># výpis vypočtených koeficientů modelu</i>
print("Coefficients: \n", pr.coef_)
print("Intercept: \n", pr.intercept_)

<i># vykreslení výsledku do 3D grafu</i>
fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(projection='3d')

<i># body ze vstupní datové sady</i>
ax.scatter(X[:, 0], X[:, 1], y, color="black", s=2)

<i># výsledkem modelu je rovina</i>
ax.plot_surface(grid[0], grid[1], y_pred, alpha = 0.5)

<i># ulozeni diagramu do souboru</i>
plt.savefig("122.png")

<i># zobrazeni diagramu</i>
plt.show()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<pre>
import numpy as np
import matplotlib.pyplot as plt

from sklearn import linear_model
from sklearn.preprocessing import PolynomialFeatures

<i># počet vzorků v mřížce</i>
VALUES = 20

<i># X je matice vytvořená z mřížky</i>
<i># dvojice vektorů pro konstrukci mřížky</i>
x1 = np.linspace(1, 100, VALUES)
x2 = np.linspace(1, 100, VALUES)

<i># konstrukce mřížky</i>
grid = np.meshgrid(x1, x2)

<i># změna tvaru na matici se dvěma sloupci</i>
X = np.vstack([grid[0].flatten(), grid[1].flatten()]).T

<i># y je vektor</i>
y = ((grid[0]-50) * (grid[1]-50)).flatten()

<i># tvar matice X a vektoru y</i>
print("X shape:", X.shape)
print("y shape:", y.shape)

degree = 2

<i># konstrukce modelu</i>
pr = linear_model.LinearRegression()

poly = PolynomialFeatures(degree=degree)

poly_features = poly.fit_transform(X)

<i># trénink modelu</i>
pr.fit(poly_features, y)

<i># predikce modelu</i>
y_pred = pr.predict(poly_features).reshape((VALUES, VALUES))
print(y_pred)

<i># výpis vypočtených koeficientů modelu</i>
print("Coefficients: \n", pr.coef_)
print("Intercept: \n", pr.intercept_)

<i># vykreslení výsledku do 3D grafu</i>
fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(projection='3d')

<i># body ze vstupní datové sady</i>
ax.scatter(X[:, 0], X[:, 1], y, color="black", s=2)

<i># výsledkem modelu je rovina</i>
ax.plot_surface(grid[0], grid[1], y_pred, alpha = 0.5)

<i># ulozeni diagramu do souboru</i>
plt.savefig("123.png")

<i># zobrazeni diagramu</i>
plt.show()
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady využívající knihovnu Scikit-learn lze nalézt
v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady i na (Jupyter) diáře s&nbsp;postupem
výpočtů a analýz:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Shluková analýza (clustering) a knihovna Scikit-learn<br />
<a href="https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn/">https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn/</a>
</li>

<li>Shluková analýza (clustering) a knihovna Scikit-learn (2)<br />
<a href="https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-2/">https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-2/</a>
</li>

<li>Shluková analýza (clustering) a knihovna Scikit-learn (z plochy do 3D prostoru)<br />
<a href="https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-z-plochy-do-3d-prostoru/">https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-z-plochy-do-3d-prostoru/</a>
</li>

<li>Rozpoznávání obrázků knihovnou Scikit-learn: první kroky<br />
<a href="https://www.root.cz/clanky/rozpoznavani-obrazku-knihovnou-scikit-learn-prvni-kroky/">https://www.root.cz/clanky/rozpoznavani-obrazku-knihovnou-scikit-learn-prvni-kroky/</a>
</li>

<li>scikit-learn: Machine Learning in Python<br />
<a href="https://scikit-learn.org/stable/index.html">https://scikit-learn.org/stable/index.html</a>
</li>

<li>Sklearn-pandas<br />
<a href="https://github.com/scikit-learn-contrib/sklearn-pandas">https://github.com/scikit-learn-contrib/sklearn-pandas</a>
</li>

<li>sklearn-xarray<br />
<a href="https://github.com/phausamann/sklearn-xarray/">https://github.com/phausamann/sklearn-xarray/</a>
</li>

<li>Clustering<br />
<a href="https://scikit-learn.org/stable/modules/clustering.html">https://scikit-learn.org/stable/modules/clustering.html</a>
</li>

<li>Cluster analysis (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Cluster_analysis">https://en.wikipedia.org/wiki/Cluster_analysis</a>
</li>

<li>Shluková analýza (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Shlukov%C3%A1_anal%C3%BDza">https://cs.wikipedia.org/wiki/Shlukov%C3%A1_anal%C3%BDza</a>
</li>

<li>K-means<br />
<a href="https://cs.wikipedia.org/wiki/K-means">https://cs.wikipedia.org/wiki/K-means</a>
</li>

<li>k-means clustering<br />
<a href="https://en.wikipedia.org/wiki/K-means_clustering">https://en.wikipedia.org/wiki/K-means_clustering</a>
</li>

<li>Spectral clustering<br />
<a href="https://en.wikipedia.org/wiki/Spectral_clustering">https://en.wikipedia.org/wiki/Spectral_clustering</a>
</li>

<li>Emergence<br />
<a href="https://cs.wikipedia.org/wiki/Emergence">https://cs.wikipedia.org/wiki/Emergence</a>
</li>

<li>Particle Life: Vivid structures from rudimentary rules<br />
<a href="https://particle-life.com/">https://particle-life.com/</a>
</li>

<li>Hertzsprungův–Russellův diagram<br />
<a href="https://cs.wikipedia.org/wiki/Hertzsprung%C5%AFv%E2%80%93Russell%C5%AFv_diagram">https://cs.wikipedia.org/wiki/Hertzsprung%C5%AFv%E2%80%93Russell%C5%AFv_diagram</a>
</li>

<li>Using Machine Learning in an HR Diagram<br />
<a href="https://cocalc.com/share/public_paths/08b6e03583cbdef3cdb9813a54ec68ff773c747f">https://cocalc.com/share/public_paths/08b6e03583cbdef3cdb9813a54ec68ff773c747f</a>
</li>

<li>Gaia H-R diagrams: Querying Gaia data for one million nearby stars<br />
<a href="https://vlas.dev/post/gaia-dr2-hrd/">https://vlas.dev/post/gaia-dr2-hrd/</a>
</li>

<li>The Hertzsprung–Russell diagram<br />
<a href="https://scipython.com/book2/chapter-9-data-analysis-with-pandas/problems/p92/the-hertzsprung-russell-diagram/">https://scipython.com/book2/chapter-9-data-analysis-with-pandas/problems/p92/the-hertzsprung-russell-diagram/</a>
</li>

<li>Animated Hertzsprung-Russell Diagram with 119,614 datapoints<br />
<a href="https://github.com/zonination/h-r-diagram">https://github.com/zonination/h-r-diagram</a>
</li>

<li>Neuraxle Pipelines<br />
<a href="https://github.com/Neuraxio/Neuraxle">https://github.com/Neuraxio/Neuraxle</a>
</li>

<li>scikit-learn: Getting Started<br />
<a href="https://scikit-learn.org/stable/getting_started.html">https://scikit-learn.org/stable/getting_started.html</a>
</li>

<li>Support Vector Machines<br />
<a href="https://scikit-learn.org/stable/modules/svm.html">https://scikit-learn.org/stable/modules/svm.html</a>
</li>

<li>Use Deep Learning to Detect Programming Languages<br />
<a href="http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/">http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/</a>
</li>

<li>Natural-language processing<br />
<a href="https://en.wikipedia.org/wiki/Natural-language_processing">https://en.wikipedia.org/wiki/Natural-language_processing</a>
</li>

<li>THE MNIST DATABASE of handwritten digits<br />
<a href="http://yann.lecun.com/exdb/mnist/">http://yann.lecun.com/exdb/mnist/</a>
</li>

<li>MNIST database (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MNIST_database">https://en.wikipedia.org/wiki/MNIST_database</a>
</li>

<li>MNIST For ML Beginners<br />
<a href="https://www.tensorflow.org/get_started/mnist/beginners">https://www.tensorflow.org/get_started/mnist/beginners</a>
</li>

<li>Stránka projektu Torch<br />
<a href="http://torch.ch/">http://torch.ch/</a>
</li>

<li>Torch: Serialization<br />
<a href="https://github.com/torch/torch7/blob/master/doc/serialization.md">https://github.com/torch/torch7/blob/master/doc/serialization.md</a>
</li>

<li>Torch: modul image<br />
<a href="https://github.com/torch/image/blob/master/README.md">https://github.com/torch/image/blob/master/README.md</a>
</li>

<li>Data pro neuronové sítě<br />
<a href="http://archive.ics.uci.edu/ml/index.php">http://archive.ics.uci.edu/ml/index.php</a>
</li>

<li>Torch na GitHubu (několik repositářů)<br />
<a href="https://github.com/torch">https://github.com/torch</a>
</li>

<li>Torch (machine learning), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Torch_%28machine_learning%29">https://en.wikipedia.org/wiki/Torch_%28machine_learning%29</a>
</li>

<li>Torch Package Reference Manual<br />
<a href="https://github.com/torch/torch7/blob/master/README.md">https://github.com/torch/torch7/blob/master/README.md</a>
</li>

<li>Torch Cheatsheet<br />
<a href="https://github.com/torch/torch7/wiki/Cheatsheet">https://github.com/torch/torch7/wiki/Cheatsheet</a>
</li>

<li>Neural network containres (Torch)<br />
<a href="https://github.com/torch/nn/blob/master/doc/containers.md">https://github.com/torch/nn/blob/master/doc/containers.md</a>
</li>

<li>Simple layers<br />
<a href="https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear">https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear</a>
</li>

<li>Transfer Function Layers<br />
<a href="https://github.com/torch/nn/blob/master/doc/transfer.md#nn.transfer.dok">https://github.com/torch/nn/blob/master/doc/transfer.md#nn.transfer.dok</a>
</li>

<li>Feedforward neural network<br />
<a href="https://en.wikipedia.org/wiki/Feedforward_neural_network">https://en.wikipedia.org/wiki/Feedforward_neural_network</a>
</li>

<li>Biologické algoritmy (4) - Neuronové sítě<br />
<a href="https://www.root.cz/clanky/biologicke-algoritmy-4-neuronove-site/">https://www.root.cz/clanky/biologicke-algoritmy-4-neuronove-site/</a>
</li>

<li>Biologické algoritmy (5) - Neuronové sítě<br />
<a href="https://www.root.cz/clanky/biologicke-algoritmy-5-neuronove-site/">https://www.root.cz/clanky/biologicke-algoritmy-5-neuronove-site/</a>
</li>

<li>Umělá neuronová síť (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Um%C4%9Bl%C3%A1_neuronov%C3%A1_s%C3%AD%C5%A5">https://cs.wikipedia.org/wiki/Um%C4%9Bl%C3%A1_neuronov%C3%A1_s%C3%AD%C5%A5</a>
</li>

<li>PyTorch<br />
<a href="http://pytorch.org/">http://pytorch.org/</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>Matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Galerie grafů vytvořených v&nbsp;Matplotlibu<br />
<a href="https://matplotlib.org/3.2.1/gallery/">https://matplotlib.org/3.2.1/gallery/</a>
</li>

<li>3D rendering<br />
<a href="https://en.wikipedia.org/wiki/3D_rendering">https://en.wikipedia.org/wiki/3D_rendering</a>
</li>

<li>3D computer graphics<br />
<a href="https://en.wikipedia.org/wiki/3D_computer_graphics">https://en.wikipedia.org/wiki/3D_computer_graphics</a>
</li>

<li>Primary 3D view planes<br />
<a href="https://matplotlib.org/stable/gallery/mplot3d/view_planes_3d.html">https://matplotlib.org/stable/gallery/mplot3d/view_planes_3d.html</a>
</li>

<li>Getting started in scikit-learn with the famous iris dataset<br />
<a href="https://www.youtube.com/watch?v=hd1W4CyPX58">https://www.youtube.com/watch?v=hd1W4CyPX58</a>
</li>

<li>Training a machine learning model with scikit-learn<br />
<a href="https://www.youtube.com/watch?v=RlQuVL6-qe8">https://www.youtube.com/watch?v=RlQuVL6-qe8</a>
</li>

<li>Iris (plant)<br />
<a href="https://en.wikipedia.org/wiki/Iris_(plant)">https://en.wikipedia.org/wiki/Iris_(plant)</a>
</li>

<li>Kosatec<br />
<a href="https://cs.wikipedia.org/wiki/Kosatec">https://cs.wikipedia.org/wiki/Kosatec</a>
</li>

<li>Iris setosa<br />
<a href="https://en.wikipedia.org/wiki/Iris_setosa">https://en.wikipedia.org/wiki/Iris_setosa</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

