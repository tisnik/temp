<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba sekvenčních diagramů v Pythonu s využitím knihovny Napkin</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba sekvenčních diagramů v Pythonu s využitím knihovny Napkin</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části miniseriálu o tvorbě grafů a diagramů definovaných v univerzálním programovacím jazyku (a nikoli v DSL) se zaměříme na popis knihovny Napkin určené pro vykreslení sekvenčních diagramů (UML) přímo na základě kódu napsaného v Pythonu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba sekvenčních diagramů v&nbsp;Pythonu s&nbsp;využitím knihovny Napkin</a></p>
<p><a href="#k02">2. Nástroj PlantUML</a></p>
<p><a href="#k03">3. Vygenerování sekvenčních diagramů přímo v&nbsp;PlantUML</a></p>
<p><a href="#k04">4. Složitější příklady sekvenčních diagramů</a></p>
<p><a href="#k05">5. Zobrazení doby zpracování dotazu a čekání na odpověď</a></p>
<p><a href="#k06">6. Sekvenční diagramy a knihovna Napkin</a></p>
<p><a href="#k07">7. Instalace knihovny Napkin</a></p>
<p><a href="#k08">8. Sekvenční diagram vygenerovaný knihovnou Napkin</a></p>
<p><a href="#k09">9. Vykreslení diagramu přes lokální instalaci PlantUML</a></p>
<p><a href="#k10">10. Vykreslení diagramu knihovnou Napkin (přes PlantUML na serveru)</a></p>
<p><a href="#k11">11. Nepatrně složitější diagram: three-way handshake</a></p>
<p><a href="#k12">12. Zobrazení doby zpracování popř.&nbsp;čekání na odpověď</a></p>
<p><a href="#k13">13. Reprezentace několika dotazů v&nbsp;sekvenčním diagramu</a></p>
<p><a href="#k14">14. Specifikace opakujících se sekvenčních operací (<i>loop</i>)</a></p>
<p><a href="#k15">15. Vnořené cykly (loop) v&nbsp;diagramu</a></p>
<p><a href="#k16">16. Seskupení zpráv v&nbsp;diagramu</a></p>
<p><a href="#k17">17. Poznámky přiřazené k&nbsp;uzlům, zprávám či skupinám</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Odkazy na články s&nbsp;tématem programové tvorby grafů a diagramů</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba sekvenčních diagramů v&nbsp;Pythonu s&nbsp;využitím knihovny Napkin</h2>

<p>Na <a
href="https://www.root.cz/clanky/programova-tvorba-diagramu-v-jazyku-clojure-s-vyuzitim-knihovny-rhizome/">předchozí
článek o knihovně Rhizome</a> dnes navážeme. Popíšeme si totiž knihovnu
nazvanou <i>Napkin</i>. Tato knihovna je určena pro vykreslení takzvaných
<i>sekvenčních diagramů</i>, které jsou definovány v&nbsp;UML (<i>Unified
Modeling Language</i>). Důležité přitom je, že pro popis sekvenčních diagramů
je použit přímo univerzální programovací jazyk Python a nikoli specializovaný
jazyk (DSL &ndash; <i>Domain-Specific Language</i>). A jaké jsou výhody použití
Pythonu namísto DSL? Především je Python podporován mnoha integrovanými
vývojovými prostředími (IDE), programátorskými textovými editory i dalšími
nástroji, mezi něž patří například lintery apod. Navíc může být popis
sekvenčních diagramů kódem napsaným v&nbsp;Pythonu pro mnoho vývojářů
idiomatický a tudíž může být tvorba diagramů rychlejší a vedoucí k&nbsp;menšímu
množství chyb.</p>

<img src="http://i.iinfo.cz/images/487/plantuml-14.png" class="image-195550" width="373" height="283" alt="&#160;" />
<p><i>Obrázek 1: Jednoduchý diagram tříd vytvořený nástrojem PlantUML zmíněným
v&nbsp;navazující kapitole.</i></p>

<p>Vzhledem k&nbsp;tomu, že výstupem z&nbsp;<i>Napkinu</i> je popis sekvenčního
diagramu ve formátu akceptovaného nástrojem <i>PlantUML</i>, zaměříme se
v&nbsp;úvodních kapitolách na popis alespoň základních možností tohoto nástroje
&ndash; ovšem nejedná se o nosné téma celého článku.</p>

<img src="http://i.iinfo.cz/images/487/plantuml-17.png" class="image-195553" width="193" height="169" alt="&#160;" />
<p><i>Obrázek 2: Třída s&nbsp;atributy a metodami, které mají různá přístupová
práva. Povšimněte si oddělení atributů od metod. To je ve skutečnosti provedeno
automaticky.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Nástroj PlantUML</h2>

<p>Dále popsaná aplikace <i>Napkin</i> je postavena na nástroji nazvaném
<i>PlantUML</i> (<a
href="http://plantuml.sourceforge.net/">http://plantuml.sourceforge.net/</a>).
<i>PlantUML</i> dokáže na základě textového popisu UML diagramu vytvořit
bitmapový obrázek (PNG) či vektorovou kresbu (SVG) s&nbsp;tímto diagramem,
přičemž uživatel může do jisté míry ovlivnit způsob jeho vykreslení, přidat
popis hran, seskupit uzly v&nbsp;diagramu, změnit barvy hran i uzlů, přidat do
uzlů ikony apod. V&nbsp;současné verzi <i>PlantUML</i> jsou podporovány
následující typy UML diagramů:</p>

<ul>
<li>Diagram aktivit</li>
<li>Sekvenční diagram</li>
<li>Diagram tříd</li>
<li>Diagram objektů</li>
<li>Diagram komponent</li>
<li>Diagram užití</li>
<li>Stavový diagram</li>
<li>Diagram načasování operací (ve vývoji)</li>
<li>Deployment diagram (pravděpodobně nemá ekvivalentní český překlad)</li>
</ul>

<p><div class="rs-tip-major">Poznámka: ve fázi přípravy jsou i další typy
diagramů, například často využívaný Ganttův diagram, myšlenková mapa
atd.</div></p>

<img src="http://i.iinfo.cz/images/487/plantuml-4.png" class="image-195540" width="196" height="301" alt="&#160;" />
<p><i>Obrázek 3: Jednoduchý diagram aktivit vygenerovaný nástrojem
PlantUML.</i></p>

<p>Ve skutečnosti sice specifikace UML popisuje i další typy diagramů, ovšem
<i>PlantUML</i> s&nbsp;velkou pravděpodobností dokáže pokrýt většinu potřeb
analytiků i programátorů, protože v&nbsp;nabídce podporovaných diagramů jsou
zastoupeny všechny tři kategorie: popis struktury informačního systému, popis
chování informačního systému a popis interakce či komunikace jak v&nbsp;rámci
systému, tak i mimo něj.</p>

<p><i>PlantUML</i> je naprogramovaný v&nbsp;Javě, ovšem podobně jako tomu bylo
v&nbsp;případě <a
href="https://www.root.cz/clanky/nastroje-pro-tvorbu-grafu-a-diagramu-z-prikazove-radky/#k10">již
popsaného nástroje</a> <i>Ditaa</i> se jedná o relativně malý program, který
pro svůj běh nevyžaduje enormní množství zdrojů (diskový prostor, RAM atd.).
Pro uživatele <i>PlantUML</i> je na adrese <a
href="http://sourceforge.net/projects/plantuml/files/plantuml.jar/download">http://sourceforge.net/projects/plantuml/files/plantuml.jar/download</a>
k&nbsp;dispozici spustitelný Java archiv, dále je vhodné si stáhnout referenční
příručku k&nbsp;jazyku z&nbsp;adresy <a
href="http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf">http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf</a>.</p>

<img src="http://i.iinfo.cz/images/487/plantuml-6.png" class="image-195542" width="181" height="335" alt="&#160;" />
<p><i>Obrázek 4: Jednoduché rozvětvení reprezentované v&nbsp;diagramu aktivit
vytvořeného nástrojem PlantUML.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vygenerování sekvenčních diagramů přímo v&nbsp;PlantUML</h2>

<p>Nástroj <i>PlantUML</i> podporuje mnoho typů diagramů (vypsali jsme si je <a
href="#k02">v&nbsp;předchozí kapitole</a>). Mezi ně patří například <i>stavové
diagramy</i>, které dokážou názorně popsat stavy systému i možné přechody mezi
jednotlivými stavy. Ovšem v&nbsp;mnoha případech vzniká potřeba podrobněji
popsat i interakci mezi popisovaným systémem a jeho okolím, interakci mezi
dvěma nebo více moduly systému či (na té nejpodrobnější úrovni) interakci
probíhající mezi jednotlivými objekty, z&nbsp;nichž se systém skládá. Pro tento
účel slouží v&nbsp;jazyku UML především <i>sekvenční diagramy (sequence
diagrams)</i>, v&nbsp;nichž lze velmi názorným způsobem naznačit časovou
posloupnost posílání zpráv mezi různými typy objektů,
popř.&nbsp;k&nbsp;zobrazené posloupnosti zpráv přidat další komentáře, ikony a
značky. Jeden z&nbsp;typických a poměrně často v&nbsp;praxi používaných
příkladů použití <i>sekvenčních diagramů</i> je popis komunikace
s&nbsp;využitím síťových i jiných protokolů. Ostatně právě na síťovém protokolu
(navázání spojení a zrušení spojení) si <i>sekvenční diagramy</i> ukážeme
prakticky v&nbsp;navazujících dvou kapitolách.</p>

<p>Nejjednodušší sekvenční diagram je možné v&nbsp;nástroji <i>PlantUML</i>
deklarovat následujícím způsobem. S&nbsp;využitím symbolu
<strong>-&gt;</strong> je naznačeno poslání zprávy mezi dvojicí objektů,
v&nbsp;tomto případě mezi klientem a serverem. Sekvenční diagram neobsahuje
žádné počáteční ani koncové pseudostavy, což je jeden z&nbsp;rozpoznávacích
znaků mezi sekvenčním diagramem a stavovým diagramem. Proto také při odstranění
pseudostavů může <i>PlantUML</i> automaticky zaměnit stavový diagram za diagram
sekvenční, což je samozřejmě chyba (způsobená tím, že se PlantUML snaží o
automatické doplnění kontextových informací):</p>

<pre>
@startuml
&nbsp;
Client -&gt; Server: SYN
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-1.png" class="image-196201" width="144" height="127" alt="&#160;" />
<p><i>Obrázek 5: Sekvenční diagram vytvořený na základě prvního demonstračního
příkladu.</i></p>

<p>Druhý příklad je nepatrně složitější a ukazuje způsob navázání komunikace
v&nbsp;protokolu TCP (tzv. <i>three-way handshake</i>), přesněji řečeno ideální
stav, kdy se navázání spojení podaří:</p>

<pre>
@startuml
&nbsp;
Client -&gt; Server: SYN
Server -&gt; Client: SYN-ACK
Client -&gt; Server: ACK
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-2.png" class="image-196202" width="155" height="185" alt="&#160;" />
<p><i>Obrázek 6: Sekvenční diagram vytvořený na základě druhého demonstračního
příkladu.</i></p>

<p>Deklarace předchozího diagramu byla pravděpodobně pro mnoho vývojářů poněkud
nešikovná, protože se na druhém řádku prohodila jména komunikujících objektů.
To lze snadno napravit, protože symbol <strong>-&gt;</strong> je možné nahradit
symbolem <strong>&lt;-</strong>, který (samozřejmě) značí poslání zprávy
opačným směrem, ostatně tímto směrem bude mířit i šipka ve výsledném
diagramu:</p>

<pre>
@startuml
&nbsp;
Client -&gt; Server: SYN
Client &lt;- Server: SYN-ACK
Client -&gt; Server: ACK
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-3.png" class="image-196203" width="155" height="185" alt="&#160;" />
<p><i>Obrázek 7: Sekvenční diagram vytvořený na základě třetího demonstračního
příkladu.</i></p>

<p>Podívejme se ještě na nepatrně složitější příklad: ukončení spojení,
tentokrát způsobem označovaným <i>four-way handshake</i> (spojení v&nbsp;TCP
ukončují a vzájemně si ho potvrzují obě strany). Jednotlivé zprávy byly navíc
automaticky očíslovány, což zajistilo uvedení klíčového slova
<strong>autonumber</strong>:</p>

<pre>
@startuml
&nbsp;
<strong>autonumber</strong>
&nbsp;
Client -&gt; Server: FIN
Client &lt;- Server: ACK
Client &lt;- Server: FIN
Client -&gt; Server: ACK
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-4.png" class="image-196204" width="144" height="215" alt="&#160;" />
<p><i>Obrázek 8: Sekvenční diagram vytvořený na základě čtvrtého demonstračního
příkladu.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Složitější příklady sekvenčních diagramů</h2>

<p>Sekvenční diagramy mohou být i poměrně rozsáhlé, což je ukázáno na dalším
příkladu získaném z&nbsp;reálného projektu (resp.&nbsp;z&nbsp;fáze jeho
prvotního návrhu). Povšimněte si možnosti specifikace stylu vykreslení uzlů i
tvaru uzlů (<i>actor</i>, <i>database</i>, <i>participant</i>):</p>

<pre>
@startuml
&nbsp;
header Sequence diagram for data flow in Content Service
footer Copyright © 2020 Red Hat, Inc. Author: Pavel Tisnovsky
&nbsp;
<strong>actor</strong> "Author of\nrule content" as author
<strong>database</strong> "Internal\nGitLab\nrepository\n&lt;&amp;fork&gt;" as gitlab
<strong>database</strong> "External\nGitHab\nrepository\n&lt;&amp;fork&gt;" as github
<strong>participant</strong> "OpenShift\ntooling" as openshift #ffa0a0
<strong>participant</strong> "Insights\nContent Service" as content_service #a0a0ff
<strong>participant</strong> "Smart\nProxy" as smart_proxy #a0a0ff
<strong>collections</strong> "REST API\nconsumers" as consumers
&nbsp;
== New content or update of existing content ==
author -&gt; gitlab: Merge into\nmain branch
&nbsp;
== Data synchronization to Content Service ==
gitlab -&gt; github: New commit(s)
github -&gt; github: Merge commit
gitlab -&gt; openshift: Webhook - new changes
openshift -&gt; github:  Clone\nrepository
github -&gt; openshift: Repository content
openshift -&gt; openshift: Rebuild image
note right: OpenShift rebuild Insights\nContent Service image\nwith new rules content included
openshift -&gt; openshift: Restart pod
openshift -&gt; content_service: Set replicas &gt; 0
note right: Now the Content Service\nexposes new rules content\nvia its REST API
&nbsp;
== Synchronization between Smart Proxy and Content Service ==
smart_proxy -&gt; content_service: Get new content\nfor all rules
note right: Smart proxy needs\nto periodically\nupdate its cache
content_service -&gt; smart_proxy: Here's\nrequired\ncontent
smart_proxy -&gt; smart_proxy: Update content\nin cache
&nbsp;
== Providing recommendations to consumers ==
consumers -&gt; smart_proxy: Get\nrecommendations\norg ID\ncluster ID
smart_proxy -&gt; smart_proxy: Merge results\nwith content
smart_proxy -&gt; consumers: Recommendations\nfor cluster
&nbsp;
@enduml
</pre>

<img src="https://i.iinfo.cz/images/563/napkin-1.png" class="image-448932" alt="&#160;" width="897" height="1200" />
<p><i>Obrázek 9: Sekvenční diagram vykreslený podle předchozího popisu.</i></p>

<p>V&nbsp;sekvenčních diagramech je možné použít i ikony (Kafka, Kubernetes
atd.):</p>

<pre>
@startuml
&nbsp;
<strong>!include &lt;cloudinsight/kafka&gt;</strong>
<strong>!include &lt;kubernetes/k8s-sprites-unlabeled-25pct&gt;</strong>
&nbsp;
header Sequence diagram for the whole CCX (external) data pipeline
footer Copyright © 2020 Red Hat, Inc. Author: Pavel Tisnovsky
&nbsp;
participant "Smart\nProxy" as smart_proxy #a0a0ff
participant "3Scale" as 3scale
box "Insights operator" #ddffdd
participant "&lt;$master&gt;\nControl logic" as operator
database "IO memory cache" as cache
end box
entity "CRD" as crd
collections "OCP\nWebConsole" as console
&nbsp;
== Pulling data from Smart Proxy ==
operator -&gt; 3scale: Get\nrecommendations\norg ID\ncluster ID
3scale -&gt; smart_proxy: Get\nrecommendations\norg ID\ncluster ID
smart_proxy -&gt; 3scale: Recommendations\nfor cluster
3scale -&gt; operator: Recommendations\nfor cluster
&nbsp;
== Exposing recommendations ==
operator -&gt; cache: Store\nrecommendations
cache -&gt; crd: Expose\nrecommendations
&nbsp;
== Pulling from OCP WebConsole ==
console -&gt; crd: Read\nrecommendations
crd -&gt; console: Here are\nrequired data
&nbsp;
@enduml
</pre>

<img src="https://i.iinfo.cz/images/563/napkin-2.png" class="image-448933" alt="&#160;" width="828" height="827" />
<p><i>Obrázek 10: Sekvenční diagram vykreslený podle předchozího popisu.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Zobrazení doby zpracování dotazu a čekání na odpověď</h2>

<p>Často se setkáme s&nbsp;požadavkem, aby se v&nbsp;sekvenčním diagramu
zobrazila doba zpracování dotazu (požadavku). Tato doba se v&nbsp;diagramech
znázorňuje vertikálním sloupečkem, který spojuje šipky s&nbsp;dotazem a
odpovědí. V&nbsp;PlantUML se požadovaného výsledku dosáhne použitím klauzulí
<strong>activate jméno_uzlu</strong> a <strong>deactivate jméno_uzlu</strong>,
což je ukázáno v&nbsp;následujícím příkladu odvozeném od příkladu
předchozího:</p>

<pre>
@startuml
&nbsp;
!include &lt;cloudinsight/kafka&gt;
!include &lt;kubernetes/k8s-sprites-unlabeled-25pct&gt;
&nbsp;
header Sequence diagram for the whole CCX (external) data pipeline
footer Copyright © 2020 Red Hat, Inc. Author: Pavel Tisnovsky
&nbsp;
participant "Smart\nProxy" as smart_proxy #a0a0ff
participant "3Scale" as 3scale
box "Insights operator" #ddffdd
participant "&lt;$master&gt;\nControl logic" as operator
database "IO memory cache" as cache
end box
entity "CRD" as crd
collections "OCP\nWebConsole" as console
&nbsp;
== Pulling data from Smart Proxy ==
operator -&gt; 3scale: Get\nrecommendations\norg ID\ncluster ID
<strong>activate 3scale</strong>
3scale -&gt; smart_proxy: Get\nrecommendations\norg ID\ncluster ID
<strong>activate smart_proxy</strong>
smart_proxy -&gt; 3scale: Recommendations\nfor cluster
<strong>deactivate smart_proxy</strong>
3scale -&gt; operator: Recommendations\nfor cluster
<strong>deactivate 3scale</strong>
&nbsp;
== Exposing recommendations ==
operator -&gt; cache: Store\nrecommendations
cache -&gt; crd: Expose\nrecommendations
&nbsp;
== Pulling from OCP WebConsole ==
console -&gt; crd: Read\nrecommendations
<strong>activate crd</strong>
crd -&gt; console: Here are\nrequired data
<strong>deactivate crd</strong>
&nbsp;
@enduml
</pre>

<img src="https://i.iinfo.cz/images/563/napkin-3.png" class="image-448934" alt="&#160;" width="843" height="827" />
<p><i>Obrázek 11: Sekvenční diagram vykreslený podle předchozího popisu.</i></p>

<p>Naprosto stejným způsobem lze v&nbsp;diagramu naznačit dobu čekání na
odpověď. V&nbsp;takovém případě se jedná o sloupeček zobrazený na straně
dotazujícího uzlu. Povšimněte si, že příkazové dvojice
<strong>activate/deactivate</strong> jsou vnořeny a typicky se nepřekrývají
(proto je možné, jak si ukážeme dále, použít blok <strong>with</strong>):</p>

<pre>
@startuml
&nbsp;
!include &lt;cloudinsight/kafka&gt;
!include &lt;kubernetes/k8s-sprites-unlabeled-25pct&gt;
&nbsp;
header Sequence diagram for the whole CCX (external) data pipeline
footer Copyright © 2020 Red Hat, Inc. Author: Pavel Tisnovsky
&nbsp;
participant "Smart\nProxy" as smart_proxy #a0a0ff
participant "3Scale" as 3scale
box "Insights operator" #ddffdd
participant "&lt;$master&gt;\nControl logic" as operator
database "IO memory cache" as cache
end box
entity "CRD" as crd
collections "OCP\nWebConsole" as console
&nbsp;
== Pulling data from Smart Proxy ==
operator -&gt; 3scale: Get\nrecommendations\norg ID\ncluster ID
<strong>activate operator</strong>
<strong>activate 3scale</strong>
3scale -&gt; smart_proxy: Get\nrecommendations\norg ID\ncluster ID
<strong>activate smart_proxy</strong>
smart_proxy -&gt; 3scale: Recommendations\nfor cluster
<strong>deactivate smart_proxy</strong>
3scale -&gt; operator: Recommendations\nfor cluster
<strong>deactivate 3scale</strong>
<strong>deactivate operator</strong>
&nbsp;
== Exposing recommendations ==
operator -&gt; cache: Store\nrecommendations
cache -&gt; crd: Expose\nrecommendations
&nbsp;
== Pulling from OCP WebConsole ==
console -&gt; crd: Read\nrecommendations
<strong>activate console</strong>
<strong>activate crd</strong>
crd -&gt; console: Here are\nrequired data
<strong>deactivate crd</strong>
<strong>deactivate console</strong>
&nbsp;
@enduml
</pre>

<img src="https://i.iinfo.cz/images/563/napkin-4.png" class="image-448935" alt="&#160;" width="848" height="827" />
<p><i>Obrázek 12: Sekvenční diagram vykreslený podle předchozího popisu.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Sekvenční diagramy a knihovna Napkin</h2>

<p>Nyní již máme k&nbsp;dispozici všechny informace potřebné pro porozumění
sekvenčním diagramům v&nbsp;nástroji <i>PlantUML</i>. Ve druhé části článku se
tedy zaměříme na popis knihovny <i>Napkin</i> určené pro programovací jazyk
Python. Tato knihovna, která je dostupná <a
href="https://github.com/pinetr2e/napkin">jak na GitHubu</a>, tak i <a
href="https://pypi.org/project/napkin/">na PyPi</a>, umožňuje definici
sekvenčních diagramů přímo v&nbsp;Pythonu s&nbsp;využitím bloků
<strong>with</strong>, které reprezentují kontext, v&nbsp;němž je zpráva
poslána popř.&nbsp;zpracovávána. Interně se diagramy převádí z&nbsp;Pythonu
právě do <i>PlantUML</i> a následně jsou vykresleny &ndash; implicitně tak, že
se definice diagramu pošle na PlantUML server, který vrátí vykreslený výsledek.
V&nbsp;případě potřeby je však pochopitelně možné použít i lokální instalaci
<i>PlantUML</i>.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Instalace knihovny Napkin</h2>

<p>Instalace knihovny <i>Napkin</i> je snadná (alespoň v&nbsp;porovnání
s&nbsp;<i>PlantUML</i>), protože je distribuována formou standardně
připraveného balíčku pro jazyk Python a je dostupná na <a
href="https://pypi.org/project/napkin/">PyPi</a>. Instalaci provedeme nástrojem
<strong>pip</strong> popř.&nbsp;<strong>pip3</strong> a pochopitelně je
podporována i instalace do virtuálního prostředí Pythonu
(<i>virtualenv</i>):</p>

<pre>
$ <strong>pip3 install --user napkin</strong>
</pre>

<p>Průběh instalace naznačuje, že Napkin má jen minimální závislosti:</p>

<pre>
Collecting napkin
  Downloading https://files.pythonhosted.org/packages/f4/71/d00d15190bd5a2e630ead71158aca8d5784abc02452df66f8645cf59d055/napkin-0.6.8-py3-none-any.whl
Requirement already satisfied: requests in /usr/lib/python3.8/site-packages (from napkin)
Requirement already satisfied: chardet&lt;3.1.0,&gt;=3.0.2 in /usr/lib/python3.8/site-packages (from requests-&gt;napkin)
Requirement already satisfied: idna&lt;2.8,&gt;=2.5 in /usr/lib/python3.8/site-packages (from requests-&gt;napkin)
Requirement already satisfied: urllib3&lt;1.25,&gt;=1.21.1 in /usr/lib/python3.8/site-packages (from requests-&gt;napkin)
Installing collected packages: napkin
Successfully installed napkin-0.6.8
</pre>

<p>Po instalaci zjistíme, kde je umístěn spustitelný skript představující
vstupní bod do Napkinu:</p>

<pre>
$ <strong>whereis napkin</strong>
&nbsp;
napkin: /home/ptisnovs/.local/bin/napkin
</pre>

<p><div class="rs-tip-major">Poznámka: je dobré ověřit, zda je vypsaný adresář
na <strong>PATH</strong>.</div></p>

<p>Nakonec otestujeme, jestli je možné <i>Napkin</i> spustit z&nbsp;příkazové
řádky a mimochodem zjistíme i povolené přepínače:</p>

<pre>
$ <strong>napkin --help</strong>
&nbsp;
usage: napkin [-h]
              [--output-format {plantuml,plantuml_png,plantuml_svg,plantuml_txt}]
              [--output-dir OUTPUT_DIR] [--version] [--server-url SERVER_URL]
              srcs [srcs ...]
&nbsp;
Generate UML sequence diagram from Python code
&nbsp;
positional arguments:
  srcs                  Python file or directory containing diagram functions
&nbsp;
optional arguments:
  -h, --help            show this help message and exit
  --output-format {plantuml,plantuml_png,plantuml_svg,plantuml_txt}, -f {plantuml,plantuml_png,plantuml_svg,plantuml_txt}
  --output-dir OUTPUT_DIR, -o OUTPUT_DIR
  --version             show program's version number and exit
  --server-url SERVER_URL
                        (only for plantuml_png/svg format) Default is the
                        public server
&nbsp;
Supported output formats:
  plantuml         : PlantUML script (default)
  plantuml_png     : PlantUML script and PNG image
  plantuml_svg     : PlantUML script and SVG image
  plantuml_txt     : PlantUML script and ASCII art text
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Sekvenční diagram vygenerovaný knihovnou Napkin</h2>

<p>Podívejme se nyní na způsob definice sekvenčního diagramu s&nbsp;využitím
prostředků programovacího jazyka Python. Diagram se dvěma komunikujícími
objekty a jednou zprávou může být zapsán následujícím způsobem:</p>

<pre>
<strong>1</strong>       import napkin
&nbsp;
&nbsp;
<strong>2</strong>       @napkin.seq_diagram()
<strong>3</strong>       def client_server_1(c):
<strong>4</strong>           client = c.object('Client')
<strong>5</strong>           server = c.object('Server')
&nbsp;
<strong>6</strong>           with client:
<strong>7</strong>               server.SYN()
</pre>

<p>Jednotlivé části skriptu:</p>

<ol>
<li>Budeme používat dekorátor z&nbsp;balíčku <strong>napkin</strong></li>
<li>Dekorace funkce představující zápis komunikace mezi objekty</li>
<li>Ze jména funkce se odvodí jméno souboru s&nbsp;výsledným diagramem (parametr je doplněn před dekorátor)</li>
<li>První komunikující objekt se specifikací jeho jména tak, jak bude zobrazeno v&nbsp;diagramu</li>
<li>Druhý komunikující objekt se specifikací jeho jména tak, jak bude zobrazeno v&nbsp;diagramu</li>
<li>Začátek komunikace inicializovaného objektem <strong>klient</strong></li>
<li>Poslání zprávy objektu <strong>server</strong> se zapisuje formou volání funkce</li>
</ol>

<p>Vytvoření deklarace diagramu v&nbsp;jazyku akceptovaném nástrojem
<i>PlantUML</i>:</p>

<pre>
$ <strong>napkin client-server-1.py </strong>
&nbsp;
Load file : client-server-1.py
File generated : ./client_server_1.puml
</pre>

<p>Výsledný soubor vypadá následovně:</p>

<pre>
@startuml
participant Client
participant Server
&nbsp;
Client -&gt; Server : SYN()
@enduml
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vykreslení diagramu přes lokální instalaci PlantUML</h2>

<p>V&nbsp;případě, že máte k&nbsp;dispozici lokálně nainstalovaný nástroj
<i>PlantUML</i>, je možné si nechat vygenerovat diagram v&nbsp;rastrovém
formátu PNG následujícím příkazem (pro zajímavost je cesta k&nbsp;JAR archivu
s&nbsp;<i>PlantUML</i> nestandardní):</p>

<pre>
$ <strong>java -jar ~/tools/plantuml.jar client_server.puml</strong>
</pre>

<img src="https://i.iinfo.cz/images/563/napkin-5.png" class="image-448936" alt="&#160;" width="150" height="131" />
<p><i>Obrázek 13: Výsledek předchozího příkazu.</i></p>

<p>Alternativně je možné získat výstup ve vektorovém formátu SVG:</p>

<pre>
$ <strong>java -jar ~/tools/plantuml.jar client_server.puml -tsvg</strong>
</pre>

<p>Poslední možností je výstup do textového formátu (ASCII art):</p>

<pre>
$ <strong>java -jar ~/tools/plantuml.jar client_server.puml -ttxt</strong>
</pre>

<p>Výsledek v&nbsp;tomto případě vypadá následovně:</p>

<pre>
     ┌──────┐          ┌──────┐
     │Client│          │Server│
     └──┬───┘          └──┬───┘
        │      SYN()      │
        │ ────────────────&gt;
     ┌──┴───┐          ┌──┴───┐
     │Client│          │Server│
     └──────┘          └──────┘
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vykreslení diagramu knihovnou Napkin (přes PlantUML na serveru)</h2>

<p>Implicitně ovšem knihovna <i>Napkin</i> nepoužívá lokální instalaci
<i>PlantUML</i>, ale posílá definici sekvenčního diagramu na veřejně dostupný
server, jenž vykreslení diagramu provede a pošle zpátky výsledek. Pokud tedy
váš diagram neobsahuje žádná citlivá data, je vykreslení diagramu ještě
jednodušší (a server je navíc pro většinu případů i dostatečně rychlý).</p>

<p>Vytvoření popisu diagramu v&nbsp;jazyku podporovaného PlantUML:</p>

<pre>
$ <strong>napkin --output-format plantuml client-server-1.py</strong>
&nbsp;
Load file : client-server-1.py
File generated : ./client_server.puml
</pre>

<p>Vykreslení diagramu do rastrového obrázku PNG:</p>

<pre>
$ <strong>napkin --output-format plantuml_png client-server-1.py</strong>
&nbsp;
Load file : client-server-1.py
File generated : ./client_server.puml, ./client_server.png
</pre>

<p>Vykreslení diagramu do vektorové kresby SVG:</p>

<pre>
$ <strong>napkin --output-format plantuml_svg client-server-1.py</strong>
&nbsp;
Load file : client-server-1.py
File generated : ./client_server.puml, ./client_server.svg
</pre>

<p>Výstup do textového souboru (ASCII art):</p>

<pre>
$ <strong>napkin --output-format plantuml_txt client-server-1.py</strong>
&nbsp;
Load file : client-server-1.py
File generated : ./client_server.puml, ./client_server.txt
</pre>

<p>Výsledek je v&nbsp;tomto případě totožný s&nbsp;lokálním renderingem:</p>

<pre>
     ┌──────┐          ┌──────┐
     │Client│          │Server│
     └──┬───┘          └──┬───┘
        │      SYN()      │
        │ ────────────────&gt;
     ┌──┴───┐          ┌──┴───┐
     │Client│          │Server│
     └──────┘          └──────┘
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Nepatrně složitější diagram: three-way handshake</h2>

<p>Vyzkoušejme si nyní vytvořit nepatrně složitější diagram s&nbsp;již zmíněným
<i>three-way handskakem</i>. První varianta tohoto diagramu může vypadat takto
(jednotlivé zprávy jsou zdánlivě nezávislé):</p>

<pre>
import napkin
&nbsp;
&nbsp;
@napkin.seq_diagram()
def client_server_2(c):
    client = c.object('Client')
    server = c.object('Server')
&nbsp;
    with client:
        server.SYN()
&nbsp;
    with server:
        client.SYN_ACK()
&nbsp;
    with client:
        server.ACK()
</pre>

<p><div class="rs-tip-major">Poznámka: to, že jednotlivé zprávy nezávisí na
sobě (netvoří sekvenci) je ve skutečnosti špatné řešení.</div></p>

<img src="https://i.iinfo.cz/images/563/napkin-6.png" class="image-448937" alt="&#160;" width="169" height="189" />
<p><i>Obrázek 14: Výsledek předchozího příkazu.</i></p>

<p>Výsledek v&nbsp;textovém formátu:</p>

<pre>
     ┌──────┐          ┌──────┐
     │Client│          │Server│
     └──┬───┘          └──┬───┘
        │      SYN()      │
        │ ────────────────&gt;
        │                 │
        │    SYN_ACK()    │
        │ &lt;────────────────
        │                 │
        │      ACK()      │
        │ ────────────────&gt;
     ┌──┴───┐          ┌──┴───┐
     │Client│          │Server│
     └──────┘          └──────┘
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zobrazení doby zpracování popř.&nbsp;čekání na odpověď</h2>

<p>Víme již, že v&nbsp;sekvenčním diagramu lze zobrazit i dobu zpracování
požadavku popř.&nbsp;dobu čekání na odpověď. K&nbsp;tomuto účelu slouží
vertikální prázdné sloupečky. V&nbsp;nástroji <i>Napkin</i> můžeme tyto
sloupečky přidat s&nbsp;využitím konstrukce <strong>with</strong>
v&nbsp;Pythonu:</p>

<pre>
import napkin
&nbsp;
&nbsp;
@napkin.seq_diagram()
def client_server_3(c):
    client = c.object('Client')
    server = c.object('Server')
&nbsp;
    with client:
        with server.SYN():
            with client.SYN_ACK():
                server.ACK()
</pre>

<img src="https://i.iinfo.cz/images/563/napkin-7.png" class="image-448938" alt="&#160;" width="174" height="189" />
<p><i>Obrázek 15: Výsledek v&nbsp;grafické podobě.</i></p>

<p>Výsledek v&nbsp;textové podobě:</p>

<pre>
     ┌──────┐          ┌──────┐
     │Client│          │Server│
     └──┬───┘          └──┬───┘
        │     SYN()      ┌┴┐
        │ ──────────────&gt;│ │
        │                │ │
       ┌┴┐   SYN_ACK()   │ │
       │ │ &lt;─────────────│ │
       └┬┘               └┬┘
        │      ACK()      │
        │ ────────────────&gt;
     ┌──┴───┐          ┌──┴───┐
     │Client│          │Server│
     └──────┘          └──────┘
</pre>

<p>Odlišný sekvenční diagram, ovšem založený na stejných zprávách (je použitých
v&nbsp;jinak navrženém bloku <strong>with</strong>):</p>

<pre>
import napkin
&nbsp;
&nbsp;
@napkin.seq_diagram()
def client_server_4(c):
    client = c.object('Client')
    server = c.object('Server')
&nbsp;
    with client:
        with server.SYN():
            client.SYN_ACK()
        server.ACK()
</pre>

<img src="https://i.iinfo.cz/images/563/napkin-8.png" class="image-448939" alt="&#160;" width="174" height="189" />
<p><i>Obrázek 16: Výsledek v&nbsp;grafické podobě.</i></p>

<p>Výsledek v&nbsp;textové podobě:</p>

<pre>
     ┌──────┐          ┌──────┐
     │Client│          │Server│
     └──┬───┘          └──┬───┘
        │     SYN()      ┌┴┐
        │ ──────────────&gt;│ │
        │                └┬┘
        │    SYN_ACK()    │
        │ &lt;────────────────
        │                 │
        │      ACK()      │
        │ ────────────────&gt;
     ┌──┴───┐          ┌──┴───┐
     │Client│          │Server│
     └──────┘          └──────┘
</pre>

<p>A konečně explicitní zápis situace, kdy se zpráva vrátí, tj.&nbsp;jedná se o
reakci na zprávu předchozí:</p>

<pre>
import napkin
&nbsp;
&nbsp;
@napkin.seq_diagram()
def client_server_5(c):
    client = c.object('Client')
    server = c.object('Server')
&nbsp;
    with client:
        with server.SYN():
            c.ret("SYN_ACK")
        server.ACK()
</pre>

<img src="https://i.iinfo.cz/images/563/napkin-9.png" class="image-448940" alt="&#160;" width="164" height="189" />
<p><i>Obrázek 17: Povšimněte si, že odpověď je zobrazena čárkovanou
šipky.</i></p>

<p>Odlišný typ šipky je použit i v&nbsp;textové podobě diagramu:</p>

<pre>
     ┌──────┐          ┌──────┐
     │Client│          │Server│
     └──┬───┘          └──┬───┘
        │     SYN()      ┌┴┐
        │ ──────────────&gt;│ │
        │                └┬┘
        │     SYN_ACK     │
        │ &lt;─ ─ ─ ─ ─ ─ ─ ─
        │                 │
        │      ACK()      │
        │ ────────────────&gt;
     ┌──┴───┐          ┌──┴───┐
     │Client│          │Server│
     └──────┘          └──────┘
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Reprezentace několika dotazů v&nbsp;sekvenčním diagramu</h2>

<p>Pochopitelně nám nic nebrání použít v&nbsp;jednom diagramu několik dotazů,
které například mohou reprezentovat rozdílné chování systému pro různé vstupy.
Podívejme se na jeden z&nbsp;možných příkladů &ndash; přihlašování uživatele,
které může být buď úspěšné nebo naopak neúspěšné:</p>

<pre>
import napkin
&nbsp;
&nbsp;
@napkin.seq_diagram()
def request_response_1(c):
    client = c.object('Client')
    frontend = c.object('"Front end"')
    backend = c.object('"Back end"')
&nbsp;
    with client:
        with frontend.request("login='foo'", "password='bar'"):
            with backend.try_login("'foo'", "'bar'"):
                c.ret("login ok")
            c.ret("login ok")
&nbsp;
    with client:
        with frontend.request("login='foo'", "password='xyzzy'"):
            with backend.try_login("'foo'", "'bar'"):
                c.ret("login failed")
            c.ret("login failed")
</pre>

<p>Výsledek bude vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/563/napkin-10.png" class="image-448941" alt="&#160;" width="516" height="335" />
<p><i>Obrázek 18: Diagram vytvořený předchozím příkladem.</i></p>

<p>Prakticky stejného výsledku dosáhneme i tímto kódem:</p>

<pre>
import napkin
&nbsp;
&nbsp;
@napkin.seq_diagram()
def request_response_2(c):
    client = c.object('Client')
    frontend = c.object('"Front end"')
    backend = c.object('"Back end"')
&nbsp;
    with client:
        with frontend.request("login='foo'", "password='bar'"):
            with backend.try_login("'foo'", "'bar'"):
                c.ret("login ok")
            c.ret("login ok")
&nbsp;
        with frontend.request("login='foo'", "password='xyzzy'"):
            with backend.try_login("'foo'", "'bar'"):
                c.ret("login failed")
            c.ret("login failed")
</pre>

<img src="https://i.iinfo.cz/images/563/napkin-11.png" class="image-448942" alt="&#160;" width="516" height="335" />
<p><i>Obrázek 19: Diagram, který by měl být shodný s&nbsp;diagramem
předchozím.</i></p>

<p>V&nbsp;textové podobě bude diagram vypadat takto:</p>

<pre>
     ┌──────┐                              ┌─────────┐                ┌────────┐
     │Client│                              │Front end│                │Back end│
     └──┬───┘                              └────┬────┘                └───┬────┘
        │ request(login='foo', password='bar') ┌┴┐                        │
        │ ────────────────────────────────────&gt;│ │                        │
        │                                      │ │                        │
        │                                      │ │try_login('foo', 'bar') ┌┴┐
        │                                      │ │ ─────────────────────&gt; │ │
        │                                      │ │                        └┬┘
        │                                      │ │        login ok        │
        │                                      │ │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─
        │                                      └┬┘                        │
        │                login ok               │                         │
        │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─                          │
        │                                       │                         │
        │request(login='foo', password='xyzzy')┌┴┐                        │
        │ ────────────────────────────────────&gt;│ │                        │
        │                                      │ │                        │
        │                                      │ │try_login('foo', 'bar') ┌┴┐
        │                                      │ │ ─────────────────────&gt; │ │
        │                                      │ │                        └┬┘
        │                                      │ │      login failed      │
        │                                      │ │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─
        │                                      └┬┘                        │
        │              login failed             │                         │
        │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─                          │
     ┌──┴───┐                              ┌────┴────┐                ┌───┴────┐
     │Client│                              │Front end│                │Back end│
     └──────┘                              └─────────┘                └────────┘
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Specifikace opakujících se sekvenčních operací (<i>loop</i>)</h2>

<p>Do sekvenčních diagramů lze vložit i symboly reprezentující opakování
(<i>loop</i>). V&nbsp;knihovně Napkin je toto chování zajištěno kontextem
<strong>c.loop()</strong>:</p>

<pre>
import napkin
&nbsp;
&nbsp;
@napkin.seq_diagram()
def request_response_3(c):
    client = c.object('Client')
    frontend = c.object('"Front end"')
    backend = c.object('"Back end"')
&nbsp;
    with client:
        with frontend.request("login='foo'", "password='bar'"):
            with backend.try_login("'foo'", "'bar'"):
                c.ret("login ok")
            c.ret("login ok")
&nbsp;
    <strong>with c.loop()</strong>:
        with client:
            with frontend.request("login='foo'", "password='xyzzy'"):
                with backend.try_login("'foo'", "'bar'"):
                    c.ret("login failed")
                c.ret("login failed")
</pre>

<p>S&nbsp;výsledkem:</p>

<img src="https://i.iinfo.cz/images/563/napkin-12.png" class="image-448943" alt="&#160;" width="545" height="366" />
<p><i>Obrázek 20: Diagram s&nbsp;cyklem.</i></p>

<p>Textová podoba výsledku:</p>

<pre>
                    ┌──────┐                              ┌─────────┐                ┌────────┐
                    │Client│                              │Front end│                │Back end│
                    └──┬───┘                              └────┬────┘                └───┬────┘
                       │ request(login='foo', password='bar') ┌┴┐                        │
                       │ ────────────────────────────────────&gt;│ │                        │
                       │                                      │ │                        │
                       │                                      │ │try_login('foo', 'bar') ┌┴┐
                       │                                      │ │ ─────────────────────&gt; │ │
                       │                                      │ │                        └┬┘
                       │                                      │ │        login ok        │
                       │                                      │ │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─
                       │                                      └┬┘                        │
                       │                login ok               │                         │
                       │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─                          │
                       │                                       │                         │
                       │                                       │                         │
          ╔═══════╤════╪═══════════════════════════════════════╪═════════════════════════╪══════════════╗
          ║ LOOP  │    │                                       │                         │              ║
          ╟───────┘    │                                       │                         │              ║
          ║            │request(login='foo', password='xyzzy')┌┴┐                        │              ║
          ║            │ ────────────────────────────────────&gt;│ │                        │              ║
          ║            │                                      │ │                        │              ║
          ║            │                                      │ │try_login('foo', 'bar') ┌┴┐            ║
          ║            │                                      │ │ ─────────────────────&gt; │ │            ║
          ║            │                                      │ │                        └┬┘            ║
          ║            │                                      │ │      login failed      │              ║
          ║            │                                      │ │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─              ║
          ║            │                                      └┬┘                        │              ║
          ║            │              login failed             │                         │              ║
          ║            │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─                          │              ║
          ╚════════════╪═══════════════════════════════════════╪═════════════════════════╪══════════════╝
                    ┌──┴───┐                              ┌────┴────┐                ┌───┴────┐
                    │Client│                              │Front end│                │Back end│
                    └──────┘                              └─────────┘                └────────┘
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Vnořené cykly (loop) v&nbsp;diagramu</h2>

<p>Cykly mohou být i vnořené. Bez podrobnějších popisů se podívejme na příklad,
v&nbsp;němž je naznačeno, že se přihlašovací procedura může opakovat (což sice
není příliš logické, ovšem jedná se pouze o ilustrační příklad):</p>

<pre>
import napkin
&nbsp;
&nbsp;
@napkin.seq_diagram()
def request_response_4(c):
    client = c.object('Client')
    frontend = c.object('"Front end"')
    backend = c.object('"Back end"')
&nbsp;
    with client:
        with frontend.request("login='foo'", "password='bar'"):
            with backend.try_login("'foo'", "'bar'"):
                c.ret("login ok")
            c.ret("login ok")
&nbsp;
    <strong>with c.loop()</strong>:
        with client:
            with frontend.request("login='foo'", "password='xyzzy'"):
                <strong>with c.loop()</strong>:
                    with backend.try_login("'foo'", "'bar'"):
                        c.ret("login failed")
                    c.ret("login failed")
</pre>

<img src="https://i.iinfo.cz/images/563/napkin-13.png" class="image-448944" alt="&#160;" width="555" height="397" />
<p><i>Obrázek 21: Diagram s&nbsp;vnořenými cykly.</i></p>

<p>Opět si ukažme textovou podobu diagramu:</p>

<pre>
                    ┌──────┐                              ┌─────────┐                ┌────────┐
                    │Client│                              │Front end│                │Back end│
                    └──┬───┘                              └────┬────┘                └───┬────┘
                       │ request(login='foo', password='bar') ┌┴┐                        │
                       │ ────────────────────────────────────&gt;│ │                        │
                       │                                      │ │                        │
                       │                                      │ │try_login('foo', 'bar') ┌┴┐
                       │                                      │ │ ─────────────────────&gt; │ │
                       │                                      │ │                        └┬┘
                       │                                      │ │        login ok        │
                       │                                      │ │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─
                       │                                      └┬┘                        │
                       │                login ok               │                         │
                       │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─                          │
                       │                                       │                         │
                       │                                       │                         │
          ╔═══════╤════╪═══════════════════════════════════════╪═════════════════════════╪════════════════════════╗
          ║ LOOP  │    │                                       │                         │                        ║
          ╟───────┘    │                                       │                         │                        ║
          ║            │request(login='foo', password='xyzzy')┌┴┐                        │                        ║
          ║            │ ────────────────────────────────────&gt;│ │                        │                        ║
          ║            │                                      │ │                        │                        ║
          ║            │                                      │ │                        │                        ║
          ║            │                        ╔═══════╤═════╪═╪════════════════════════╪══════════════╗         ║
          ║            │                        ║ LOOP  │     │ │                        │              ║         ║
          ║            │                        ╟───────┘     │ │                        │              ║         ║
          ║            │                        ║             │ │try_login('foo', 'bar') ┌┴┐            ║         ║
          ║            │                        ║             │ │ ─────────────────────&gt; │ │            ║         ║
          ║            │                        ║             │ │                        └┬┘            ║         ║
          ║            │                        ║             │ │      login failed      │              ║         ║
          ║            │                        ║             │ │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─              ║         ║
          ║            │                        ╚═════════════╪═╪════════════════════════╪══════════════╝         ║
          ║            │                                      └┬┘                        │                        ║
          ║            │              login failed             │                         │                        ║
          ║            │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─                          │                        ║
          ╚════════════╪═══════════════════════════════════════╪═════════════════════════╪════════════════════════╝
                    ┌──┴───┐                              ┌────┴────┐                ┌───┴────┐
                    │Client│                              │Front end│                │Back end│
                    └──────┘                              └─────────┘                └────────┘
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Seskupení zpráv v&nbsp;diagramu</h2>

<p>Cyklům je podobná i značka pro seskupení zpráv v&nbsp;diagramu.
V&nbsp;knihovně Napkin se pro tento účel používá konstrukce <strong>with
c.group("Popis skupiny")</strong> tak, jak je to naznačeno v&nbsp;dalším (již
předposledním) demonstračním příkladu:</p>

<pre>
import napkin
&nbsp;
&nbsp;
@napkin.seq_diagram()
def request_response_5(c):
    client = c.object('Client')
    frontend = c.object('"Front end"')
    backend = c.object('"Back end"')
&nbsp;
    <strong>with c.group("Successful login")</strong>:
        with client:
            with frontend.request("login='foo'", "password='bar'"):
                with backend.try_login("'foo'", "'bar'"):
                    c.ret("login ok")
                c.ret("login ok")
&nbsp;
    <strong>with c.group("Failed login")</strong>:
        with client:
            with frontend.request("login='foo'", "password='xyzzy'"):
                with c.loop():
                    with backend.try_login("'foo'", "'bar'"):
                        c.ret("login failed")
                    c.ret("login failed")
</pre>

<img src="https://i.iinfo.cz/images/563/napkin-14.png" class="image-448945" alt="&#160;" width="555" height="429" />
<p><i>Obrázek 22: Diagram se seskupenými zprávami.</i></p>

<p>Opět si ukažme textovou podobu diagramu:</p>

<pre>
                    ┌──────┐                              ┌─────────┐                ┌────────┐
                    │Client│                              │Front end│                │Back end│
                    └──┬───┘                              └────┬────┘                └───┬────┘
                       │                                       │                         │
          ╔════════════╪══════╤════════════════════════════════╪═════════════════════════╪══════════════╗
          ║ SUCCESSFUL LOGIN  │                                │                         │              ║
          ╟──────────────request(login='foo', password='bar') ┌┴┐                        │              ║
          ║            │ ────────────────────────────────────&gt;│ │                        │              ║
          ║            │                                      │ │                        │              ║
          ║            │                                      │ │try_login('foo', 'bar') ┌┴┐            ║
          ║            │                                      │ │ ─────────────────────&gt; │ │            ║
          ║            │                                      │ │                        └┬┘            ║
          ║            │                                      │ │        login ok        │              ║
          ║            │                                      │ │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─              ║
          ║            │                                      └┬┘                        │              ║
          ║            │                login ok               │                         │              ║
          ║            │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─                          │              ║
          ╚════════════╪═══════════════════════════════════════╪═════════════════════════╪══════════════╝
                       │                                       │                         │
                       │                                       │                         │
          ╔════════════╪══╤════════════════════════════════════╪═════════════════════════╪════════════════════════╗
          ║ FAILED LOGIN  │                                    │                         │                        ║
          ╟─────────────request(login='foo', password='xyzzy')┌┴┐                        │                        ║
          ║            │ ────────────────────────────────────&gt;│ │                        │                        ║
          ║            │                                      │ │                        │                        ║
          ║            │                                      │ │                        │                        ║
          ║            │                        ╔═══════╤═════╪═╪════════════════════════╪══════════════╗         ║
          ║            │                        ║ LOOP  │     │ │                        │              ║         ║
          ║            │                        ╟───────┘     │ │                        │              ║         ║
          ║            │                        ║             │ │try_login('foo', 'bar') ┌┴┐            ║         ║
          ║            │                        ║             │ │ ─────────────────────&gt; │ │            ║         ║
          ║            │                        ║             │ │                        └┬┘            ║         ║
          ║            │                        ║             │ │      login failed      │              ║         ║
          ║            │                        ║             │ │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─              ║         ║
          ║            │                        ╚═════════════╪═╪════════════════════════╪══════════════╝         ║
          ║            │                                      └┬┘                        │                        ║
          ║            │              login failed             │                         │                        ║
          ║            │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─                          │                        ║
          ╚════════════╪═══════════════════════════════════════╪═════════════════════════╪════════════════════════╝
                    ┌──┴───┐                              ┌────┴────┐                ┌───┴────┐
                    │Client│                              │Front end│                │Back end│
                    └──────┘                              └─────────┘                └────────┘
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Poznámky přiřazené k&nbsp;uzlům, zprávám či skupinám</h2>

<p>Poslední vlastností knihovny Napkin, kterou si dnes ukážeme, je možnost
přidat poznámky (komentáře) k&nbsp;uzlům, zprávám popř.&nbsp;skupinám.
Prakticky každý objekt, s&nbsp;nímž se v&nbsp;knihovně Napkin pracuje,
poskytuje metodu <strong>note</strong> pro přidání poznámky (viz zvýrazněné
části skriptu):</p>

<pre>
import napkin
&nbsp;
&nbsp;
@napkin.seq_diagram()
def request_response_6(c):
    client = c.object('Client')
    frontend = c.object('"Front end"')
    backend = c.object('"Back end"')
&nbsp;
    <strong>client.note("Web client")</strong>
    <strong>frontend.note("Web front end (JS)")</strong>
    <strong>backend.note("Back end (Go)")</strong>
&nbsp;
    with c.group("Successful login"):
        with client:
            <strong>c.note("Login with proper name and password")</strong>
            with frontend.request("login='foo'", "password='bar'").note("Correct password"):
                with backend.try_login("'foo'", "'bar'"):
                    c.ret("login ok")
                c.ret("login ok")
&nbsp;
    with c.group("Failed login"):
        with client:
            <strong>c.note("Login with improper name and password")</strong>
            with frontend.request("login='foo'", "password='xyzzy'").note("Bad password"):
                with c.loop():
                    with backend.try_login("'foo'", "'bar'"):
                        c.ret("login failed")
                    c.ret("login failed")
                    <strong>c.note("Trying again ... is meaningless")</strong>
</pre>

<img src="https://i.iinfo.cz/images/563/napkin-15.png" class="image-448946" alt="&#160;" width="668" height="683" />
<p><i>Obrázek 23: Diagram s&nbsp;přidanými poznámkami.</i></p>

<p>Poznámky se pochopitelně objeví i v&nbsp;textovém výstupu:</p>

<pre>
                                 ┌──────┐                              ┌─────────┐                ┌────────┐
                                 │Client│                              │Front end│                │Back end│
                                 └──┬───┘                              └────┬────┘                └───┬────┘
                              ╔═════╧══════╗                                │                         │
                              ║Web client ░║                                │                         │
                              ╚═════╤══════╝                                │                         │
                                    │                             ╔═════════╧══════════╗              │
                                    │                             ║Web front end (JS) ░║              │
                                    │                             ╚═════════╤══════════╝              │
                                    │                                       │                  ╔══════╧════════╗
                                    │                                       │                  ║Back end (Go) ░║
                                    │                                       │                  ╚══════╤════════╝
                                    │                                       │                         │
           ╔═══════════════════╤════╪═══════════════════════════════════════╪═════════════════════════╪══════════════╗
           ║ SUCCESSFUL LOGIN  │    │                                       │                         │              ║
           ╟──────╔═════════════════╧═══════════════════╗                   │                         │              ║
           ║      ║Login with proper name and password ░║                   │                         │              ║
           ║      ╚═════════════════╤═══════════════════╝                   │                         │              ║
           ║                        │ request(login='foo', password='bar') ┌┴┐  ╔══════════════════╗  │              ║
           ║                        │ ────────────────────────────────────&gt;│ │  ║Correct password ░║  │              ║
           ║                        │                                      │ │  ╚══════════════════╝  │              ║
           ║                        │                                      │ │try_login('foo', 'bar') ┌┴┐            ║
           ║                        │                                      │ │ ─────────────────────&gt; │ │            ║
           ║                        │                                      │ │                        └┬┘            ║
           ║                        │                                      │ │        login ok        │              ║
           ║                        │                                      │ │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─              ║
           ║                        │                                      └┬┘                        │              ║
           ║                        │                login ok               │                         │              ║
           ║                        │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─                          │              ║
           ╚════════════════════════╪═══════════════════════════════════════╪═════════════════════════╪══════════════╝
                                    │                                       │                         │
                                    │                                       │                         │
          ╔═══════════════╤═════════╪═══════════════════════════════════════╪═════════════════════════╪════════════════════════╗
          ║ FAILED LOGIN  │         │                                       │                         │                        ║
          ╟──────╔══════════════════╧════════════════════╗                  │                         │                        ║
          ║      ║Login with improper name and password ░║                  │                         │                        ║
          ║      ╚══════════════════╤════════════════════╝                  │                         │                        ║
          ║                         │request(login='foo', password='xyzzy')┌┴┐  ╔══════════════╗      │                        ║
          ║                         │ ────────────────────────────────────&gt;│ │  ║Bad password ░║      │                        ║
          ║                         │                                      │ │  ╚══════════════╝      │                        ║
          ║                         │                                      │ │                        │                        ║
          ║                         │                ╔═══════╤═════════════╪═╪════════════════════════╪══════════════╗         ║
          ║                         │                ║ LOOP  │             │ │                        │              ║         ║
          ║                         │                ╟───────┘             │ │                        │              ║         ║
          ║                         │                ║                     │ │try_login('foo', 'bar') ┌┴┐            ║         ║
          ║                         │                ║                     │ │ ─────────────────────&gt; │ │            ║         ║
          ║                         │                ║                     │ │                        └┬┘            ║         ║
          ║                         │                ║                     │ │      login failed      │              ║         ║
          ║                         │                ║                     │ │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─              ║         ║
          ║                         │                ║                     │ │                        │              ║         ║
          ║                         │                ║      ╔══════════════╧═╧════════════════╗       │              ║         ║
          ║                         │                ║      ║Trying again ... is meaningless ░║       │              ║         ║
          ║                         │                ╚══════╚═════════════════════════════════╝═══════╪══════════════╝         ║
          ║                         │                                      └┬┘                        │                        ║
          ║                         │              login failed             │                         │                        ║
          ║                         │ &lt;─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─                          │                        ║
          ╚═════════════════════════╪═══════════════════════════════════════╪═════════════════════════╪════════════════════════╝
                                 ┌──┴───┐                              ┌────┴────┐                ┌───┴────┐
                                 │Client│                              │Front end│                │Back end│
                                 └──────┘                              └─────────┘                └────────┘
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
Python 3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>client-server-1.py</td><td>diagram se dvěma komunikujícími objekty a jednou poslanou zprávou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-1.py</a></td></tr>
<tr><td> 2</td><td>client-server-1.puml</td><td>diagram zapsaný ve formátu PlantUML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-1.puml">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-1.puml</a></td></tr>
<tr><td> 3</td><td>client-server-1.txt</td><td>diagram převedený do ASCII artu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-1.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-1.txt</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 4</td><td>client-server-2.py</td><td>nepatrně složitější diagram: three-way handshake</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-2.py</a></td></tr>
<tr><td> 5</td><td>client-server-2.puml</td><td>diagram zapsaný ve formátu PlantUML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-2.puml">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-2.puml</a></td></tr>
<tr><td> 6</td><td>client-server-2.txt</td><td>diagram převedený do ASCII artu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-2.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-2.txt</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>client-server-3.py</td><td>zobrazení doby zpracování popř. čekání na odpověď, první varianta</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-3.py</a></td></tr>
<tr><td> 8</td><td>client-server-3.puml</td><td>diagram zapsaný ve formátu PlantUML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-3.puml">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-3.puml</a></td></tr>
<tr><td> 9</td><td>client-server-3.txt</td><td>diagram převedený do ASCII artu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-3.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-3.txt</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>client-server-4.py</td><td>zobrazení doby zpracování popř. čekání na odpověď, druhá varianta</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-4.py</a></td></tr>
<tr><td>11</td><td>client-server-4.puml</td><td>diagram zapsaný ve formátu PlantUML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-4.puml">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-4.puml</a></td></tr>
<tr><td>12</td><td>client-server-4.txt</td><td>diagram převedený do ASCII artu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-4.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-4.txt</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>client-server-5.py</td><td>zobrazení doby zpracování popř. čekání na odpověď, třetí varianta</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-5.py</a></td></tr>
<tr><td>14</td><td>client-server-5.puml</td><td>diagram zapsaný ve formátu PlantUML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-5.puml">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-5.puml</a></td></tr>
<tr><td>15</td><td>client-server-5.txt</td><td>diagram převedený do ASCII artu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-5.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/client-server-5.txt</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>request-response-1.py</td><td>reprezentace několika dotazů v&nbsp;sekvenčním diagramu, první varianta</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-1.py</a></td></tr>
<tr><td>17</td><td>request-response-1.puml</td><td>diagram zapsaný ve formátu PlantUML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-1.puml">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-1.puml</a></td></tr>
<tr><td>18</td><td>request-response-1.txt</td><td>diagram převedený do ASCII artu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-1.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-1.txt</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>request-response-2.py</td><td>reprezentace několika dotazů v&nbsp;sekvenčním diagramu, druhá varianta</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-2.py</a></td></tr>
<tr><td>20</td><td>request-response-2.puml</td><td>diagram zapsaný ve formátu PlantUML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-2.puml">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-2.puml</a></td></tr>
<tr><td>21</td><td>request-response-2.txt</td><td>diagram převedený do ASCII artu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-2.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-2.txt</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>22</td><td>request-response-3.py</td><td>specifikace opakujících se sekvenčních operací (loop)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-3.py</a></td></tr>
<tr><td>23</td><td>request-response-3.puml</td><td>diagram zapsaný ve formátu PlantUML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-3.puml">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-3.puml</a></td></tr>
<tr><td>24</td><td>request-response-3.txt</td><td>diagram převedený do ASCII artu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-3.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-3.txt</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>25</td><td>request-response-4.py</td><td>vnořené cykly (loop) v&nbsp;diagramu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-4.py</a></td></tr>
<tr><td>26</td><td>request-response-4.puml</td><td>diagram zapsaný ve formátu PlantUML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-4.puml">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-4.puml</a></td></tr>
<tr><td>27</td><td>request-response-4.txt</td><td>diagram převedený do ASCII artu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-4.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-4.txt</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>28</td><td>request-response-5.py</td><td>seskupení zpráv v&nbsp;diagramu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-5.py</a></td></tr>
<tr><td>29</td><td>request-response-5.puml</td><td>diagram zapsaný ve formátu PlantUML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-5.puml">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-5.puml</a></td></tr>
<tr><td>30</td><td>request-response-5.txt</td><td>diagram převedený do ASCII artu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-5.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-5.txt</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>request-response-6.py</td><td>poznámky přiřazené k&nbsp;uzlům, zprávám či skupinám</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-6.py</a></td></tr>
<tr><td>32</td><td>request-response-6.puml</td><td>diagram zapsaný ve formátu PlantUML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-6.puml">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-6.puml</a></td></tr>
<tr><td>33</td><td>request-response-6.txt</td><td>diagram převedený do ASCII artu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-6.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/napkin/request-response-6.txt</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na články s&nbsp;tématem programové tvorby grafů a diagramů</h2>

<p>V&nbsp;této kapitole jsou uvedeny odkazy na předchozí články, v&nbsp;nichž
jsme se zabývali tvorbou různých typů grafů a diagramů &ndash; a to
v&nbsp;naprosté většině případů s&nbsp;využitím nějakého doménově specifického
jazyka neboli DSL (<i>Domain Specific Language</i>) popř.&nbsp;nějakého
univerzálního programovacího jazyka:</p>

<ol>

<li>Nástroje pro tvorbu UML diagramů<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/">https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/</a>
</li>

<li>Nástroje pro tvorbu UML diagramů z&nbsp;příkazové řádky<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky/">https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky/</a>
</li>

<li>Nástroje pro tvorbu UML diagramů z&nbsp;příkazové řádky (II)<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky-ii/">https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky-ii/</a>
</li>

<li>Nástroje pro tvorbu grafů a diagramů z&nbsp;příkazové řádky<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-grafu-a-diagramu-z-prikazove-radky/">https://www.root.cz/clanky/nastroje-pro-tvorbu-grafu-a-diagramu-z-prikazove-radky/</a>
</li>

<li>Sledování správy paměti v&nbsp;Pythonu s&nbsp;využitím nástroje objgraph<br />
<a href="https://www.root.cz/clanky/sledovani-spravy-pameti-v-pythonu-s-vyuzitim-nastroje-objgraph/">https://www.root.cz/clanky/sledovani-spravy-pameti-v-pythonu-s-vyuzitim-nastroje-objgraph/</a>
</li>

<li>Programová tvorba diagramů v&nbsp;jazyku Clojure s&nbsp;využitím knihovny Rhizome<br />
<a href="https://www.root.cz/clanky/programova-tvorba-diagramu-v-jazyku-clojure-s-vyuzitim-knihovny-rhizome/">https://www.root.cz/clanky/programova-tvorba-diagramu-v-jazyku-clojure-s-vyuzitim-knihovny-rhizome/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Napkin na GitHubu<br />
<a href="https://github.com/pinetr2e/napkin">https://github.com/pinetr2e/napkin</a>
</li>

<li>Napkin 0.6.8 na PyPi<br />
<a href="https://pypi.org/project/napkin/">https://pypi.org/project/napkin/</a>
</li>

<li>PlantUML (home page)<br />
<a href="http://plantuml.sourceforge.net/">http://plantuml.sourceforge.net/</a>
</li>

<li>PlantUML (download page)<br />
<a href="http://sourceforge.net/projects/plantuml/files/plantuml.jar/download">http://sourceforge.net/projects/plantuml/files/plantuml.jar/download</a>
</li>

<li>PlantUML (Language Reference Guide)<br />
<a href="http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf">http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf</a>
</li>

<li>Rhizome<br />
<a href="https://github.com/ztellman/rhizome">https://github.com/ztellman/rhizome</a>
</li>

<li>Swagger to UML<br />
<a href="https://github.com/nlohmann/swagger_to_uml">https://github.com/nlohmann/swagger_to_uml</a>
</li>

<li>pydiagrams<br />
<a href="https://github.com/billingtonm/pydiagrams">https://github.com/billingtonm/pydiagrams</a>
</li>

<li>graphviz(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/graphviz">https://linux.die.net/man/3/graphviz</a>
</li>

<li>dot(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/dot">https://linux.die.net/man/1/dot</a>
</li>

<li>neato(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/neato">https://linux.die.net/man/1/neato</a>
</li>

<li>twopi(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/twopi">https://linux.die.net/man/1/twopi</a>
</li>

<li>circo(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/circo">https://linux.die.net/man/1/circo</a>
</li>

<li>fdp(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/fdp">https://linux.die.net/man/1/fdp</a>
</li>

<li>sfdp(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/sfdp">https://linux.die.net/man/1/sfdp</a>
</li>

<li>Plain-text diagrams take shape in Asciidoctor!<br />
<a href="http://asciidoctor.org/new­s/2014/02/18/plain-text-diagrams-in-asciidoctor/">http://asciidoctor.org/new­s/2014/02/18/plain-text-diagrams-in-asciidoctor/</a>
</li>

<li>Graphviz – Graph Visualization Software<br />
<a href="http://www.graphviz.org/">http://www.graphviz.org/</a>
</li>

<li>graphviz (Manual Page)<br />
<a href="http://www.root.cz/man/7/graphviz/">http://www.root.cz/man/7/graphviz/</a>
</li>

<li>dot (Manual page)<br />
<a href="http://www.root.cz/man/1/dot/">http://www.root.cz/man/1/dot/</a>
</li>

<li>dot (Manual v&nbsp;PDF)<br />
<a href="https://graphviz.org/pdf/dot.1.pdf">https://graphviz.org/pdf/dot.1.pdf</a>
</li>

<li>Ditaa home page<br />
<a href="http://ditaa.sourceforge.net/">http://ditaa.sourceforge.net/</a>
</li>

<li>Ditaa introduction<br />
<a href="http://ditaa.sourceforge.net/#intro">http://ditaa.sourceforge.net/#intro</a>
</li>

<li>Ditaa usage<br />
<a href="http://ditaa.sourceforge.net/#usage">http://ditaa.sourceforge.net/#usage</a>
</li>

<li>Node, Edge and Graph Attributes<br />
<a href="http://www.graphviz.org/doc/in­fo/attrs.html">http://www.graphviz.org/doc/in­fo/attrs.html</a>
</li>

<li>Graphviz (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Graphviz">http://en.wikipedia.org/wiki/Graphviz</a>
</li>

<li>Unified Modeling Language<br />
<a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language">https://en.wikipedia.org/wiki/Unified_Modeling_Language</a>
</li>

<li>UML basics: The sequence diagram<br />
<a href="http://www.ibm.com/developerworks/rational/library/3101.html">http://www.ibm.com/developerworks/rational/library/3101.html</a>
</li>

<li>UML 2 State Machine Diagrams: An Agile Introduction<br />
<a href="http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm">http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm</a>
</li>

<li>Sequence diagram (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Sequence_diagram">https://en.wikipedia.org/wiki/Sequence_diagram</a>
</li>

<li>UML 2 Sequence Diagrams: An Agile Introduction<br />
<a href="http://www.agilemodeling.com/artifacts/sequenceDiagram.htm">http://www.agilemodeling.com/artifacts/sequenceDiagram.htm</a>
</li>

<li>A Quick Introduction to UML Sequence Diagrams<br />
<a href="http://www.tracemodeler.com/articles/a_quick_introduction_to_uml_sequence_diagrams/">http://www.tracemodeler.com/articles/a_quick_introduction_to_uml_sequence_diagrams/</a>
</li>

<li>UML Sequence Diagrams<br />
<a href="https://www.uml-diagrams.org/sequence-diagrams.html">https://www.uml-diagrams.org/sequence-diagrams.html</a>
</li>

<li>Web Sequence Diagrams<br />
<a href="https://www.websequencediagrams.com/">https://www.websequencediagrams.com/</a>
</li>

<li>Drawing sequence diagrams “napkin style”<br />
<a href="https://modeling-languages.com/drawing-sequence-diagrams-napkin-style/">https://modeling-languages.com/drawing-sequence-diagrams-napkin-style/</a>
</li>

<li>Curated list of UML tools – 2020 edition<br />
<a href="https://modeling-languages.com/uml-tools/#textual">https://modeling-languages.com/uml-tools/#textual</a>
</li>

<li>Flowchart diagrams vs. UML activity diagrams<br />
<a href="https://stackoverflow.com/questions/7081215/flowchart-diagrams-vs-uml-activity-diagrams">https://stackoverflow.com/questions/7081215/flowchart-diagrams-vs-uml-activity-diagrams</a>
</li>

<li>Kopenograms – Graphical Language for Structured Algorithms<br />
<a href="https://kopenogram.org/Assets/Kopenograms_Graphical_Language_for_Structured_Algorithms.pdf">https://kopenogram.org/Assets/Kopenograms_Graphical_Language_for_Structured_Algorithms.pdf</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

