<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Instalace knihovny MoviePy</a></p>
<p><a href="#k03">*** 3. Doinstalování dalších knihoven z&nbsp;interaktivní smyčky Pythonu</a></p>
<p><a href="#k04">*** 4. První příklad &ndash; vytvoření videa obsahujícího sérii tmavých snímků</a></p>
<p><a href="#k05">*** 5. Vytvoření animovaného GIFu se stejným obsahem</a></p>
<p><a href="#k06">*** 6. Editace videa na úrovni jednotlivých snímků a pixelů</a></p>
<p><a href="#k07">*** 7. Konstruktory datové struktury <strong>ndarray</strong></a></p>
<p><a href="#k08">*** 8. Základní operace s&nbsp;datovou strukturou <strong>ndarray</strong></a></p>
<p><a href="#k09">*** 9. Druhý příklad &ndash; pohybující se úsečka v&nbsp;desetisekundovém videu</a></p>
<p><a href="#k10">*** 10. Výsledky druhého příkladu</a></p>
<p><a href="#k11">*** 11. Třetí příklad &ndash; vykreslení všech 16 milionů barev v&nbsp;desetisekundovém videu</a></p>
<p><a href="#k12">*** 12. Výsledky třetího příkladu</a></p>
<p><a href="#k13">*** 13. Parametry předávané videokodeku</a></p>
<p><a href="#k14">*** 14. Čtvrtý příklad &ndash; animace &bdquo;průletu&ldquo; Mandelbrotovou množinou</a></p>
<p><a href="#k15">*** 15. Přepočet parametrů obrázku v&nbsp;průběhu animace a výpočet snímku Mandelbrotovy množiny</a></p>
<p><a href="#k16">*** 16. Pomocný modul s&nbsp;barvovou paletou</a></p>
<p><a href="#k17">*** 17. Výsledek vytvořený čtvrtým příkladem</a></p>
<p><a href="#k18">*** 18. Animace grafu vykresleného přes Matplotlib</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace knihovny MoviePy</h2>

<pre>
$ <strong>pip3 install --user moviepy</strong>
</pre>

<pre>
Collecting moviepy
  Downloading https://files.pythonhosted.org/packages/ee/88/1b57f7318b3079b41a5b4299ae99caedcd00b5f9897dd765c2e553b694c3/moviepy-0.2.3.3.tar.gz (397kB)
    100% |████████████████████████████████| 399kB 1.2MB/s 
Requirement already satisfied: decorator&lt;5.0,&gt;=4.0.2 in /usr/lib/python3.6/site-packages (from moviepy)
Collecting imageio&lt;3.0,&gt;=2.1.2 (from moviepy)
  Downloading https://files.pythonhosted.org/packages/a7/1d/33c8686072148b3b0fcc12a2e0857dd8316b8ae20a0fa66c8d6a6d01c05c/imageio-2.3.0-py2.py3-none-any.whl (3.3MB)
    100% |████████████████████████████████| 3.3MB 455kB/s 
Collecting tqdm&lt;5.0,&gt;=4.11.2 (from moviepy)
  Downloading https://files.pythonhosted.org/packages/78/bc/de067ab2d700b91717dc5459d86a1877e2df31abfb90ab01a5a5a5ce30b4/tqdm-4.23.0-py2.py3-none-any.whl (42kB)
    100% |████████████████████████████████| 51kB 9.9MB/s 
Collecting numpy (from moviepy)
  Downloading https://files.pythonhosted.org/packages/6e/dc/92c0f670e7b986829fc92c4c0208edb9d72908149da38ecda50d816ea057/numpy-1.14.2-cp36-cp36m-manylinux1_x86_64.whl (12.2MB)
    100% |████████████████████████████████| 12.2MB 137kB/s 
Requirement already satisfied: pillow in /usr/lib64/python3.6/site-packages (from imageio&lt;3.0,&gt;=2.1.2-&gt;moviepy)
Requirement already satisfied: olefile in /usr/lib/python3.6/site-packages (from pillow-&gt;imageio&lt;3.0,&gt;=2.1.2-&gt;moviepy)
Installing collected packages: numpy, imageio, tqdm, moviepy
  Running setup.py install for moviepy ... done
Successfully installed imageio-2.3.0 moviepy-0.2.3.3 numpy-1.14.2 tqdm-4.23.0
You are using pip version 9.0.1, however version 10.0.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Doinstalování dalších knihoven z&nbsp;interaktivní smyčky Pythonu</h2>

<p></p>

<pre>
$ <strong>python3</strong>
Python 3.6.3 (default, Oct  9 2017, 12:11:29) 
[GCC 7.2.1 20170915 (Red Hat 7.2.1-2)] on linux
Type "help", "copyright", "credits" or "license" for more information.
</pre>

<p></p>

<pre>
&gt;&gt;&gt; from moviepy.editor import VideoClip
Imageio: 'ffmpeg-linux64-v3.3.1' was not found on your computer; downloading it now.
Try 1. Download from https://github.com/imageio/imageio-binaries/raw/master/ffmpeg/ffmpeg-linux64-v3.3.1 (43.8 MB)
Downloading: 45929032/45929032 bytes (100.0%)
  Done
File saved as /home/tester/.imageio/ffmpeg/ffmpeg-linux64-v3.3.1.
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. První příklad &ndash; vytvoření videa obsahujícího sérii tmavých snímků</h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from moviepy.editor import VideoClip
import numpy
&nbsp;
WIDTH = 320
HEIGHT = 240
&nbsp;
&nbsp;
def <strong>make_frame</strong>(t):
    print("time: {t}".format(t=t))
    <i># vyplneni trojrozmerneho pole nulami</i>
    frame = numpy.zeros((HEIGHT, WIDTH, 3))
    return frame
&nbsp;
&nbsp;
<i># vytvoreni video klipu</i>
animation = VideoClip(make_frame, duration=10)
&nbsp;
<i># export videa do formatu MPEG-4</i>
animation.write_videofile("dark_scene.mp4", fps=24)
&nbsp;
<i># export videa do formatu Ogg Video File</i>
animation.write_videofile("dark_scene.ogv", fps=24)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vytvoření animovaného GIFu se stejným obsahem</h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from moviepy.editor import VideoClip
import numpy
&nbsp;
WIDTH = 320
HEIGHT = 240
&nbsp;
&nbsp;
def <strong>make_frame</strong>(t):
    print("time: {t}".format(t=t))
    <i># vyplneni trojrozmerneho pole nulami</i>
    frame = numpy.zeros((HEIGHT, WIDTH, 3))
    return frame
&nbsp;
&nbsp;
<i># vytvoreni video klipu</i>
animation = VideoClip(make_frame, duration=10)
&nbsp;
<i># export videa do formatu GIF</i>
animation.write_gif("dark_scene.gif", fps=24)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Editace videa na úrovni jednotlivých snímků a pixelů</h2>

<p>Funkce a objekty nabízené knihovnou <i>Numpy</i> se sice volají přímo
z&nbsp;Pythonu, ve skutečnosti se však interní datové struktury dosti
podstatným způsobem odlišují od datových struktur využívaných samotným
Pythonem. V&nbsp;knihovně <i>Numpy</i> tvoří základ datová struktura nazvaná
<strong>ndarray</strong>, která reprezentuje pole o prakticky libovolném počtu
dimenzí (ostatně &bdquo;nd&ldquo; ve jménu &bdquo;ndarray&ldquo; značí
N-dimensional). Tato pole se liší od běžných seznamů či n-tic v&nbsp;Pythonu,
protože <strong>ndarray</strong> jsou homogenní datovou strukturou: všechny
prvky totiž mají shodný typ a navíc všechny prvky leží za sebou, zatímco
seznamy v&nbsp;Pythonu jsou měnitelné (prvky lze přidávat a odebírat) a obecně
nehomogenní (každý prvek může mít odlišný datový typ). Za tuto velkou
flexibilitu se samozřejmě platí, a to jak většími nároky na operační paměť
(reference na objekty), tak i pomalejším zpracováním.</p>

<p>Při vytváření polí typu <strong>ndarray</strong>, ať již se jedná o vektory,
matice či o pole s&nbsp;větším množstvím dimenzí, lze specifikovat datový typ
všech prvků a dokonce i uspořádání prvků v&nbsp;paměti (buď podle zvyklostí
jazyka Fortran nebo jazyka C). Podívejme se nyní na tabulku, v&nbsp;níž jsou
vypsány možné typy prvků polí <strong>ndarray</strong>:</p>

<table>
<tr><th> #</th><th>Typ</th><th>Formát</th><th>Rozsah</th><th>Jednoznakový kód</th></tr>
<tr><td> 1</td><td>bool</td><td>uloženo po bajtech</td><td>True/False</td><td>'?'</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 2</td><td>int8</td><td>celočíselný se znaménkem</td><td>-128..127</td><td>'b'</td></tr>
<tr><td> 3</td><td>int16</td><td>celočíselný se znaménkem</td><td>-32768..32767</td><td>'h'</td></tr>
<tr><td> 4</td><td>int32</td><td>celočíselný se znaménkem</td><td>-2147483648..2147483647</td><td>'i'</td></tr>
<tr><td> 5</td><td>int64</td><td>celočíselný se znaménkem</td><td>-9223372036854775808..9223372036854775807</td><td>'l'</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>uint8</td><td>celočíselný bez znaménka</td><td>0..255</td><td>'B'</td></tr>
<tr><td> 7</td><td>uint16</td><td>celočíselný bez znaménka</td><td>0..65535</td><td>'H'</td></tr>
<tr><td> 8</td><td>uint32</td><td>celočíselný bez znaménka</td><td>0..4294967295</td><td>'I'</td></tr>
<tr><td> 9</td><td>uint64</td><td>celočíselný bez znaménka</td><td>0..18446744073709551615</td><td>'L'</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>float16</td><td>plovoucí řádová čárka</td><td>poloviční přesnost (half)</td><td>'e'</td></tr>
<tr><td>11</td><td>float32</td><td>plovoucí řádová čárka</td><td>jednoduchá přesnost (single)</td><td>'f'</td></tr>
<tr><td>12</td><td>float64</td><td>plovoucí řádová čárka</td><td>dvojitá přesnost (double)</td><td>'d'</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>complex64</td><td>komplexní číslo (dvojice)</td><td>2&times;float32</td><td>'F'</td></tr>
<tr><td>14</td><td>complex128</td><td>komplexní číslo (dvojice)</td><td>2&times;float64</td><td>'D'</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: jednoznakové kódy je možné použít
namísto jména typu, viz též funkce popsané v&nbsp;navazujících
kapitolách.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Konstruktory datové struktury <strong>ndarray</strong></h2>

<p>Pole typu <strong>ndarray</strong> je možné vytvořit několika různými
způsoby. Základní funkcí sloužící k&nbsp;převodu různých typů Pythonovských
objektů na pole je funkce nazvaná jednoduše <strong>numpy.array</strong>. Této
funkci se předá objekt (což je typicky seznam, n-tice či objekt typu
<i>range</i>) a popř.&nbsp;i další nepovinné parametry, které určují typ prvků
nově vzniklého pole (<strong>dtype</strong>), zda se má provést kopie prvků
(<strong>copy</strong>, většinou ano) či způsob uspořádání prvků v&nbsp;poli
(<strong>order</strong>):</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Základní operace s&nbsp;datovou strukturou <strong>ndarray</strong></h2>


<p>V&nbsp;mnoha případech je nutné z&nbsp;polí získat hodnoty většího množství prvků tvořících souvislý blok. Může se například jednat o všechny prvky pole kromě prvku prvního a posledního (typické pro některé filtry), prvky z&nbsp;první poloviny pole atd. I v&nbsp;tomto případě knihovna <i>Numpy</i> nabízí vývojářům velmi elegantní řešení, a to ve formě takzvaných řezů (<i>slices</i>). Namísto jediného indexu je totiž možné zadat dva indexy oddělené dvojtečkou, které potom reprezentují začátek a konec řezu. Opět se podívejme na demonstrační příklad:</p>

<pre>
a=numpy.arange(12)

a
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])

a[3:7]
array([3, 4, 5, 6])
</pre>

<p>Pokud se vynechá první index, automaticky se za něj dosadí 0, pokud se vynechá index druhý, dosadí se za něj velikost dimenze pole-1. Vynechat je možné i oba indexy; v&nbsp;tomto případě je řezem původní pole (tento zápis je sice možný, ale poněkud postrádá smysl):</p>

<pre>
a=numpy.arange(12)

a[:7]
array([0, 1, 2, 3, 4, 5, 6])

a[5:]
array([ 5,  6,  7,  8,  9, 10, 11])

a[:]
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
</pre>

<p>Někdy může být řez polem prázdný:</p>

<pre>
a=numpy.arange(12)

a
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])

a[-4:-6]
array([], dtype=int64)
</pre>

<p>Použít je možné i záporné indexy popř.&nbsp;první či druhý index zcela vynechat:</p>

<pre>
a[-6:-4]
array([6, 7])

a[-6:]
array([ 6,  7,  8,  9, 10, 11])

a[:-4]
array([0, 1, 2, 3, 4, 5, 6, 7])
</pre>

<img class="alignnone size-medium wp-image-6900" src="http://mojefedora.cz/wp-content/uploads/2016/04/15-1-418x450.png" alt="15" width="418" height="450" />
<p><i>Obrázek 3: Řezy jednorozměrným polem.</i></p>

<p>Řezy je možné provádět i u dvourozměrných či vícerozměrných polí. V&nbsp;tomto případě se zkombinuje zápis popsaný <a href="#k01">v&nbsp;první kapitole</a> s&nbsp;dvojtečkou:</p>

<pre>
import numpy

m=numpy.reshape(numpy.arange(25), (5,5))

m
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])

array([[10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])

m[2:4,3]

array([13, 18])

m[2:4,3:5]

array([[13, 14],
       [18, 19]])

m[1:4,1:4]

array([[ 6,  7,  8],
       [11, 12, 13],
       [16, 17, 18]])

m[-4:-2,-4:-2]

array([[ 6,  7],
       [11, 12]])
</pre>

<p>V&nbsp;případě importu knihovny <i>Numpy</i> dojde k&nbsp;přetížení mnoha dalších operátorů. Jedná se zejména o relační operátory, tj.&nbsp;o takové operátory, které slouží k&nbsp;porovnání dvou hodnot. Ve svém původním významu tyto operátory vrací jedinou pravdivostní hodnotu <strong>True</strong> nebo <strong>False</strong>. Ovšem pokud se relační operátory použijí ve své přetížené variantě pro porovnání polí (vektorů, matic), je výsledkem opět pole, ovšem pouze s&nbsp;hodnotami <strong>True</strong> a <strong>False</strong> vzniklými porovnáním prvků polí se stejným indexem. Při porovnávání musí mít obě pole stejný tvar, což je kontrolováno za běhu aplikace:</p>

<pre>
a=numpy.arange(1,11)
b=numpy.array([100,0,100,0,100,0,100,0,100,0])

a
array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])

b
array([100,   0, 100,   0, 100,   0, 100,   0, 100,   0])

a==b
array([False, False, False, False, False, False, False, False, False, False], dtype=bool)

a!=b
array([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True], dtype=bool)

a&lt;b
array([ True, False,  True, False,  True, False,  True, False,  True, False], dtype=bool)
</pre>

<p>Relační operátory je možné použít i tak, že jedním z&nbsp;operandů je pole a druhým operandem je skalární hodnota. Výsledkem takového porovnání je opět pole, tentokrát vytvořené porovnáním každého prvku zdrojového pole s&nbsp;jedinou skalární hodnotou:</p>

<pre>
a=numpy.arange(12)

a
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])

a==5
array([False, False, False, False,  True, False, False, False, False, False], dtype=bool)

a&lt;6
array([ True,  True,  True,  True,  True,  True, False, False, False,
       False, False, False], dtype=bool)
</pre>

<p>Podobně můžeme vytvořit &bdquo;Booleovská&ldquo; dvourozměrná pole:</p>

<pre>
m=numpy.arange(24)

m

array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23])

x=numpy.reshape(m, (6,4), order='F')

x&gt;10

array([[False, False,  True,  True],
       [False, False,  True,  True],
       [False, False,  True,  True],
       [False, False,  True,  True],
       [False, False,  True,  True],
       [False,  True,  True,  True]], dtype=bool)

x%2==1

array([[False, False, False, False],
       [ True,  True,  True,  True],
       [False, False, False, False],
       [ True,  True,  True,  True],
       [False, False, False, False],
       [ True,  True,  True,  True]], dtype=bool)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Druhý příklad &ndash; pohybující se úsečka v&nbsp;desetisekundovém videu</h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from moviepy.editor import VideoClip
import numpy
&nbsp;
WIDTH = 320
HEIGHT = 240
&nbsp;
line = 0
&nbsp;
&nbsp;
def <strong>make_frame</strong>(t):
    global line
    print("time: {t}, line: {l}".format(t=t, l=line))
&nbsp;
    <i># vyplneni trojrozmerneho pole nulami</i>
    frame = numpy.zeros((HEIGHT, WIDTH, 3))
&nbsp;
    <i># vykresleni jedine vodorovne usecky</i>
    if line &lt; HEIGHT:
        frame[line].fill(255)
        line += 1
    return frame
&nbsp;
&nbsp;
<i># vytvoreni video klipu</i>
animation = VideoClip(make_frame, duration=10)
&nbsp;
<i># export videa do formatu MPEG-4</i>
animation.write_videofile("line.mp4", fps=24)
&nbsp;
<i># znovunastaveni pocitadla</i>
line = 0
&nbsp;
<i># export videa do formatu Ogg Video File</i>
animation.write_videofile("line.ogv", fps=24)
&nbsp;
<i># znovunastaveni pocitadla</i>
line = 0
&nbsp;
<i># export videa do formatu GIF</i>
animation.write_gif("line.gif", fps=24)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Výsledky druhého příkladu</h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. Třetí příklad &ndash; vykreslení všech 16 milionů barev v&nbsp;desetisekundovém videu</h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from moviepy.editor import VideoClip
import numpy
&nbsp;
WIDTH = 256
HEIGHT = 256
&nbsp;
index = 0
&nbsp;
&nbsp;
def <strong>make_frame</strong>(t):
    <i>"""Vytvoreni jednoho snimku videa."""</i>
    global index
    print("time: {t}, index: {i}".format(t=t, i=index))
&nbsp;
    <i># vyplneni trojrozmerneho pole nulami</i>
    frame = numpy.zeros((HEIGHT, WIDTH, 3))
&nbsp;
    <i># vyplneni barvovym prechodem</i>
    for y in range(HEIGHT):
        for x in range(WIDTH):
            frame[y][x][0] = x
            frame[y][x][2] = y
            frame[y][x][1] = index
    index += 1
    return frame
&nbsp;
&nbsp;
<i># vytvoreni video klipu</i>
animation = VideoClip(make_frame, duration=10)
&nbsp;
<i># export videa do formatu Ogg Video File</i>
animation.write_videofile("colors.ogv", fps=25)
&nbsp;
<i># znovunastaveni pocitadla</i>
index = 0
&nbsp;
<i># export videa do formatu MPEG-4</i>
animation.write_videofile("colors.mp4", fps=25)
&nbsp;
<i># znovunastaveni pocitadla</i>
index = 0
&nbsp;
<i># export videa do formatu GIF</i>
animation.write_gif("colors.gif", fps=25)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Výsledky třetího příkladu</h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. Parametry předávané videokodeku</h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Čtvrtý příklad &ndash; animace &bdquo;průletu&ldquo; Mandelbrotovou množinou</h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from moviepy.editor import VideoClip
import numpy
import palette_mandmap
&nbsp;
&nbsp;
WIDTH = 320
HEIGHT = 240
&nbsp;
MAXITER = 255
&nbsp;
# pocatecni podminky
&nbsp;
x0 = -0.7913539
y0 = 0.161779
scale = 1.0000
scale_factor = 0.97
&nbsp;
&nbsp;
def <strong>make_frame</strong>(t):
    <i>"""Vytvoreni jednoho snimku videa."""</i>
    global scale
    print("time: {t}, scale: {s}".format(t=t, s=scale))
&nbsp;
    <i># vyplneni trojrozmerneho pole nulami</i>
    frame = numpy.zeros((HEIGHT, WIDTH, 3))
&nbsp;
    calc_mandelbrot(WIDTH, HEIGHT, MAXITER, palette_mandmap.palette, x0, y0, scale, frame)
    scale *= scale_factor
&nbsp;
    return frame
&nbsp;
&nbsp;
<i># vytvoreni video klipu</i>
animation = VideoClip(make_frame, duration=15)
&nbsp;
<i># export videa do formatu Ogg Video File</i>
animation.write_videofile("mandelbrot_zoom.ogv", fps=20, progress_bar=False, bitrate="900000")
&nbsp;
<i># export videa do formatu MPEG-4</i>
<i># animation.write_videofile("colors.mp4", fps=25)</i>
&nbsp;
<i># export videa do formatu GIF</i>
<i># animation.write_gif("colors.gif", fps=25)</i>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Přepočet parametrů obrázku v&nbsp;průběhu animace a výpočet snímku Mandelbrotovy množiny</h2>

<pre>
def <strong>calc_corner</strong>(c_width, c_height, xpos, ypos, scale):
    return xpos - c_width * scale, \
           ypos - c_height * scale, \
           xpos + c_width * scale, \
           ypos + c_height * scale
</pre>

<pre>
def <strong>calc_mandelbrot</strong>(width, height, maxiter, palette, xpos, ypos, scale, array):
    xmin, ymin, xmax, ymax = calc_corner(2.0, 1.5, xpos, ypos, scale)
    c = complex(xmin, ymin)
    for y in range(0, height):
        c = complex(xmin, c.imag)
        for x in range(0, width):
            z = 0.0 + 0.0J
            i = 0
&nbsp;
            <i># iteracni smycka</i>
            while i &lt; maxiter:
                if abs(z) &gt; 4.0:
                    break
                z = z**2 + c
                i += 1
&nbsp;
            <i># vypocet barvy</i>
            r = palette[i][0]
            g = palette[i][1]
            b = palette[i][2]
            array[y][x][0] = r
            array[y][x][1] = g
            array[y][x][2] = b

            <i># posun na dalsi bod na radku</i>
            c += (xmax - xmin) / width
&nbsp;
        <i># posun na dalsi radek</i>
        c += 1J*(ymax - ymin) / height
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Pomocný modul s&nbsp;barvovou paletou</h2>

<pre>
<i># taken from Fractint</i>
palette = (
        (255, 255, 255), (224, 224, 224), (216, 216, 216), (208, 208, 208),
        (200, 200, 200), (192, 192, 192), (184, 184, 184), (176, 176, 176),
        (168, 168, 168), (160, 160, 160), (152, 152, 152), (144, 144, 144),
        (136, 136, 136), (128, 128, 128), (120, 120, 120), (112, 112, 112),
        (104, 104, 104),  (96,  96,  96),  (88,  88,  88),  (80,  80,  80),
        (72,   72,  72),  (64,  64,  64),  (56,  56,  56),  (48,  48,  56),
        (40,   40,  56),  (32,  32,  56),  (24,  24,  56),  (16,  16,  56),
        (8,     8,  56), (000, 000,  60), (000, 000,  64), (000, 000,  72),
        (000, 000,  80), (000, 000,  88), (000, 000,  96), (000, 000, 104),
        (000, 000, 108), (000, 000, 116), (000, 000, 124), (000, 000, 132),
        (000, 000, 140), (000, 000, 148), (000, 000, 156), (000, 000, 160),
        (000, 000, 168), (000, 000, 176), (000, 000, 184), (000, 000, 192),
        (000, 000, 200), (000, 000, 204), (000, 000, 212), (000, 000, 220),
        (000, 000, 228), (000, 000, 236), (000, 000, 244), (000, 000, 252),
        (000,   4, 252),   (4,  12, 252),   (8,  20, 252),  (12,  28, 252),
        (16,   36, 252),  (20,  44, 252),  (20,  52, 252),  (24,  60, 252),
        (28,   68, 252),  (32,  76, 252),  (36,  84, 252),  (40,  92, 252),
        (40,  100, 252),  (44, 108, 252),  (48, 116, 252),  (52, 120, 252),
        (56,  128, 252),  (60, 136, 252),  (60, 144, 252),  (64, 152, 252),
        (68,  160, 252),  (72, 168, 252),  (76, 176, 252),  (80, 184, 252),
        (80,  192, 252),  (84, 200, 252),  (88, 208, 252),  (92, 216, 252),
        (96,  224, 252), (100, 232, 252), (100, 228, 248),  (96, 224, 244),
        (92,  216, 240),  (88, 212, 236),  (88, 204, 232),  (84, 200, 228),
        (80,  192, 220),  (76, 188, 216),  (76, 180, 212),  (72, 176, 208),
        (68,  168, 204),  (64, 164, 200),  (64, 156, 196),  (60, 152, 188),
        (56,  144, 184),  (52, 140, 180),  (52, 132, 176),  (48, 128, 172),
        (44,  120, 168),  (40, 116, 160),  (40, 108, 156),  (36, 104, 152),
        (32,   96, 148),  (28,  92, 144),  (28,  84, 140),  (24,  80, 136),
        (20,   72, 128),  (16,  68, 124),  (16,  60, 120),  (12,  56, 116),
        (8,    48, 112),   (4,  44, 108), (000,  36, 100),   (4,  36, 104),
        (12,   40, 108),  (16,  44, 116),  (24,  48, 120),  (28,  52, 128),
        (36,   56, 132),  (40,  60, 140),  (48,  64, 144),  (52,  64, 148),
        (60,   68, 156),  (64,  72, 160),  (72,  76, 168),  (76,  80, 172),
        (84,   84, 180),  (88,  88, 184),  (96,  92, 192), (104, 100, 192),
        (112, 112, 196), (124, 120, 200), (132, 132, 204), (144, 140, 208),
        (152, 152, 212), (164, 160, 216), (172, 172, 220), (180, 180, 224),
        (192, 192, 228), (200, 200, 232), (212, 212, 236), (220, 220, 240),
        (232, 232, 244), (240, 240, 248), (252, 252, 252), (252, 240, 244),
        (252, 224, 232), (252, 208, 224), (252, 192, 212), (252, 176, 204),
        (252, 160, 192), (252, 144, 184), (252, 128, 172), (252, 112, 164),
        (252,  96, 152), (252,  80, 144), (252,  64, 132), (252,  48, 124),
        (252,  32, 112), (252,  16, 104), (252, 000,  92), (236, 000,  88),
        (228, 000,  88), (216,   4,  84), (204,   4,  80), (192,   8,  76),
        (180,   8,  76), (168,  12,  72), (156,  16,  68), (144,  16,  64),
        (132,  20,  60), (124,  20,  60), (112,  24,  56), (100,  24,  52),
        (88,   28,  48),  (76,  32,  44),  (64,  32,  44),  (52,  36,  40),
        (40,   36,  36),  (28,  40,  32),  (16,  44,  28),  (20,  52,  32),
        (24,   60,  36),  (28,  68,  44),  (32,  76,  48),  (36,  88,  56),
        (40,   96,  60),  (44, 104,  64),  (48, 112,  72),  (52, 120,  76),
        (56,  132,  84),  (48, 136,  84),  (40, 144,  80),  (52, 148,  88),
        (68,  156, 100),  (80, 164, 112),  (96, 168, 124), (108, 176, 136),
        (124, 184, 144), (136, 192, 156), (152, 196, 168), (164, 204, 180),
        (180, 212, 192), (192, 220, 200), (208, 224, 212), (220, 232, 224),
        (236, 240, 236), (252, 248, 248), (252, 252, 252), (252, 252, 240),
        (252, 252, 228), (252, 252, 216), (248, 248, 204), (248, 248, 192),
        (248, 248, 180), (248, 248, 164), (244, 244, 152), (244, 244, 140),
        (244, 244, 128), (244, 244, 116), (240, 240, 104), (240, 240,  92),
        (240, 240,  76), (240, 240,  64), (236, 236,  52), (236, 236,  40),
        (236, 236,  28), (236, 236,  16), (232, 232,   0), (232, 232,  12),
        (232, 232,  28), (232, 232,  40), (236, 236,  56), (236, 236,  68),
        (236, 236,  84), (236, 236,  96), (240, 240, 112), (240, 240, 124),
        (240, 240, 140), (244, 244, 152), (244, 244, 168), (244, 244, 180),
        (244, 244, 196), (248, 248, 208), (248, 248, 224), (248, 248, 236),
        (252, 252, 252), (248, 248, 248), (240, 240, 240), (232, 232, 232))
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Výsledek vytvořený čtvrtým příkladem</h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Animace grafu vykresleného přes Matplotlib</h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech pěti dnes popsaných demonstračních příkladů určených pro
Python 3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/moviepy-examples">https://github.com/tisnik/moviepy-examples</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem
prozatím velmi malý, doslova několik kilobajtů), můžete namísto toho použít
odkazy na jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Projekt</th><th>Cesta</th></tr>
<tr><td>dark_scene</td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/1_dark_scene/moviepy_1_dark_scene.py">https://github.com/tisnik/moviepy-examples/blob/master/1_dark_scene/moviepy_1_dark_scene.py</a></td></tr>
<tr><td>moving_line</td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/2_moving_line/moviepy_2_moving_line.py">https://github.com/tisnik/moviepy-examples/blob/master/2_moving_line/moviepy_2_moving_line.py</a></td></tr>
<tr><td>color_palette</td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/3_color_palette/moviepy_3_colors.py">https://github.com/tisnik/moviepy-examples/blob/master/3_color_palette/moviepy_3_colors.py</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/">https://github.com/tisnik/moviepy-examples/blob/master/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/">https://github.com/tisnik/moviepy-examples/blob/master/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>MoviePy 0.2.3.3 na PyPi<br />
<a href="https://pypi.org/project/moviepy/">https://pypi.org/project/moviepy/</a>
</li>

<li>MoviePy na GitHubu<br />
<a href="https://github.com/Zulko/moviepy">https://github.com/Zulko/moviepy</a>
</li>

<li>MoviePy - dokumentace<br />
<a href="http://zulko.github.io/moviepy/">http://zulko.github.io/moviepy/</a>
</li>

<li>MoviePy - galerie<br />
<a href="http://zulko.github.io/moviepy/gallery.html">http://zulko.github.io/moviepy/gallery.html</a>
</li>

<li>Data Animations With Python and MoviePy<br />
<a href="https://zulko.github.io/blog/2014/11/29/data-animations-with-python-and-moviepy/">https://zulko.github.io/blog/2014/11/29/data-animations-with-python-and-moviepy/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

