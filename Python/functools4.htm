<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Když možnosti functools nedostačují: další knihovny pro podporu funkcionálního programování pro Python</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Když možnosti functools nedostačují: další knihovny pro podporu funkcionálního programování pro Python</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve čtvrtém článku o podpoře funkcionálního programování v jazyku Python se zaměříme na popis knihovny nazvané funcy, která do Pythonu přináší další užitečné funkcionální techniky, mezi než patří currying funkcí a taktéž kompozice funkcí.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Když možnosti functools nedostačují: další knihovny pro podporu funkcionálního programování pro Python</a></p>
<p><a href="#k02">2. Atributy transformované funkce vytvořené s&nbsp;využitím dekorátoru</a></p>
<p><a href="#k03">3. Využití dekorátoru <strong>@wraps</strong> pro automatickou úpravu atributů &bdquo;obalované&ldquo; funkce</a></p>
<p><a href="#k04">4. Dekorátor <strong>@wraps</strong> a několikanásobná aplikace dekorátorů na &bdquo;obalovanou&ldquo; funkci</a></p>
<p><a href="#k05">5. Když možnosti <strong>functools</strong> už nedostačují: další knihovny pro podporu funkcionálního programování</a></p>
<p><a href="#k06">6. Knihovna <strong>funcy</strong></a></p>
<p><a href="#k07">7. Instalace knihovny <strong>funcy</strong></a></p>
<p><a href="#k08">8. Zkrácená deklarace dekorátoru s&nbsp;využitím dekorátoru <strong>@decorator</strong></a></p>
<p><a href="#k09">9. Několikanásobná aplikace dekorátorů</a></p>
<p><a href="#k10">10. Přepis dekorátoru pro zjištění doby běhu funkce</a></p>
<p><a href="#k11">11. Curryfikace funkce s&nbsp;využitím <strong>curry</strong></a></p>
<p><a href="#k12">12. Příklad curryfikace funkce se dvěma parametry</a></p>
<p><a href="#k13">13. Curryfikace funkce se třemi parametry</a></p>
<p><a href="#k14">14. Rozdíl mezi curryfikací funkce s&nbsp;využitím <strong>curry</strong> a <strong>rcurry</strong></a></p>
<p><a href="#k15">15. &bdquo;autocurryfikace&ldquo;</a></p>
<p><a href="#k16">16. Kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>compose</strong></a></p>
<p><a href="#k17">17. Kompozice zleva doprava či zprava doleva?</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Příloha: odkazy na články o programovacím jazyku Clojure</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Když možnosti functools nedostačují: další knihovny pro podporu funkcionálního programování pro Python</h2>

<p>V&nbsp;předchozí trojici článků [<a
href="https://www.root.cz/clanky/podpora-funkcionalniho-programovani-v-pythonu-a-knihovna-functools/">1</a>]
[<a
href="https://www.root.cz/clanky/podpora-funkcionalniho-programovani-v-pythonu-a-knihovna-functools-2-cast/">2</a>]
[<a
href="https://www.root.cz/clanky/podpora-funkcionalniho-programovani-v-pythonu-a-knihovna-functools-3-cast/">3</a>]
jsme se zaměřili na ty funkcionální prvky programovacího jazyka Python, které
jsou realizovány ve standardní knihovně nazvané příznačně <i>functools</i>.
Ovšem na tomto místě je nutno říci, že tato knihovna je pojata poměrně
minimalistickým způsobem a nalezneme v&nbsp;ní pouze některé techniky. Co nám
ale vlastně ještě chybí? V&nbsp;první řadě lepší podpora pro tvorbu dekorátorů,
podpora pro <i>currying</i> funkcí (když se smíříme s&nbsp;tím, že to nedokáže
vlastní interpret Pythonu) a v&nbsp;neposlední řadě i podpora pro kompozici
funkcí. Jednou z&nbsp;knihoven, která tyto techniky do Pythonu přináší, je
knihovna <i>funcy</i>, s&nbsp;jejímiž naprostými základy se seznámíme dnes.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Atributy transformované funkce vytvořené s&nbsp;využitím dekorátoru</h2>

<p>V&nbsp;předchozím článku jsme se (kromě dalších věcí) seznámili i se
způsobem &bdquo;obalení&ldquo; nějaké funkce dalšími příkazy a popř.&nbsp;i
nelokálními proměnnými. Připomeňme si, že tato technologie je umožněna díky
tomu, že funkce jsou v&nbsp;Pythonu plnohodnotnými datovými typy a tím pádem je
(mj.) možné tvořit i uzávěry (<i>closure</i>). Obalení libovolné funkce kódem
uvedeným ve funkci <strong>wrapper1</strong> se syntakticky řeší takzvaným
<i>dekorátorem</i>, v&nbsp;tomto konkrétním případě dekorátorem
<strong>@wrapper1</strong>:</p>

<pre>
def <strong>wrapper1</strong>(function):
    def <strong>inner_function</strong>():
        print("-" * 40)
        function()
        print("-" * 40)
&nbsp;
    return inner_function
&nbsp;
&nbsp;
<u>@wrapper1</u>
def <strong>hello</strong>():
    print("Hello!")
&nbsp;
&nbsp;
hello()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_2.py</a>.</div></p>

<p>Vše bude fungovat zdánlivě bez problémů, ovšem nová funkce, která vznikne
aplikací dekorátoru (už se totiž v&nbsp;žádném případě nejedná o původní funkci
<strong>hello</strong>), bude mít některé své atributy nastaveny z&nbsp;pohledu
uživatele poněkud matoucím způsobem. Můžeme si to ostatně velmi snadno
otestovat:</p>

<pre>
print("function name:", hello.__name__)
</pre>

<p>Výsledek bude pro uživatele takové funkce matoucí a navíc i nejednoznačný
v&nbsp;případě, kdy použijeme dekorátor <strong>wrapper1</strong> vícekrát:</p>

<pre>
function name: inner_function
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Využití dekorátoru <strong>@wraps</strong> pro automatickou úpravu atributů &bdquo;obalované&ldquo; funkce</h2>

<p><a href="#k02">Problém zmíněný v&nbsp;předchozí kapitole</a> lze velmi
snadno vyřešit použitím (dalšího) dekorátoru pojmenovaného
<strong>@wraps</strong>, který nalezneme v&nbsp;balíčku
<strong>functools</strong>. Tento dekorátor se však neaplikuje na uživatelskou
funkci, kterou je třeba transformovat, ale na nově vznikající funkci
definovanou ve wrapperu a vracenou jako jeho návratovou hodnota. Celá úprava
demonstračního příkladu z&nbsp;předchozí kapitoly bude vypadat následovně
(dekorátor byl přidán k&nbsp;funkci <strong>inner_function</strong>):</p>

<pre>
from functools import wraps
&nbsp;
&nbsp;
def <strong>wrapper1</strong>(function):
    <u>@wraps(function)</u>
    def <strong>inner_function</strong>():
        print("-" * 40)
        function()
        print("-" * 40)
&nbsp;
    return inner_function
&nbsp;
&nbsp;
<u>@wrapper1</u>
def <strong>hello</strong>():
    print("Hello!")
&nbsp;
&nbsp;
hello()
&nbsp;
print("function name:", hello.__name__)
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_5.py</a>.</div></p>

<p>Výsledek bude nyní vypadat následovně:</p>

<pre>
----------------------------------------
Hello!
----------------------------------------
function name: hello
</pre>

<p><div class="rs-tip-major">Poznámka: z&nbsp;oněch zobrazených čtyř řádků je
patrné, že původní dekorátor <strong>@wrapper</strong> je stále plně funkční a
navíc je i jméno nové funkce korektní (alespoň z&nbsp;pohledu uživatele takové
funkce &ndash; který navíc nemusí nic vědět o tom, jak vlastně dekorátory
fungují).</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Dekorátor <strong>@wraps</strong> a několikanásobná aplikace dekorátorů na &bdquo;obalovanou&ldquo; funkci</h2>

<p>Dekorátor <strong>@wraps</strong>, s&nbsp;nímž jsme se ve stručnosti
seznámili v&nbsp;předchozím textu, je &bdquo;tranzitivní&ldquo; ve smyslu, že
pomůže zachovat původní jméno (popř.&nbsp;i další atributy) funkce, která je
transformována větším množstvím dekorátorů. Opět se podívejme na vhodný
demonstrační příklad, který vychází z&nbsp;nám již známého příkladu, kdy funkci
<strong>hello</strong> transformujeme s&nbsp;využitím dekorátorů nazvaných
jednoduše <strong>@wrapper1</strong> <strong>@wrapper2</strong>:</p>

<pre>
from functools import wraps
&nbsp;
&nbsp;
def <strong>wrapper1</strong>(function):
    <u>@wraps(function)</u>
    def <strong>inner_function</strong>():
        print("-" * 40)
        function()
        print("-" * 40)
&nbsp;
    return inner_function
&nbsp;
&nbsp;
def <strong>wrapper2</strong>(function):
    <u>@wraps(function)</u>
    def <strong>inner_function</strong>():
        print("=" * 40)
        function()
        print("=" * 40)
&nbsp;
    return inner_function
&nbsp;
&nbsp;
<u>@wrapper1</u>
<u>@wrapper2</u>
def <strong>hello</strong>():
    print("Hello!")
&nbsp;
&nbsp;
hello()
print("function name:", hello.__name__)
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_6.py</a>.</div></p>

<p>V&nbsp;případě, že tento skript spustíme, vypíšou se nejdříve zprávy
produkované transformovanou funkcí, resp.&nbsp;přesněji řečeno funkcí obalenou
dvojicí dekorátorů. A na posledním řádku se korektně vypíše původní jméno
funkce, které by jinak bylo ztraceno při transformaci (protože se technicky již
jedná o funkci nazvanou <strong>inner_function</strong>):</p>

<pre>
----------------------------------------
========================================
Hello!
========================================
----------------------------------------
function name: hello
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Když možnosti <strong>functools</strong> už nedostačují: další knihovny pro podporu funkcionálního programování</h2>

<p>V&nbsp;této sérii článků jsme si popsali většinu vlastností standardní
knihovny <strong>functools</strong>, která do Pythonu přináší některé prvky
funkcionálního programování. Ovšem některé funkcionální vlastnosti tato
knihovna nepokrývá či pokrývá jen částečně. Jedná se jak o podporu kompozice
funkcí popř.&nbsp;curryingu (i když <strong>partial</strong> je
<i>částečným</i> (sic) řešením), tak i například o podporu pro neměnitelné
datové typy, funkcí pro zpracování sekvencí, podporu typů <i>Option</i> či
<i>Result</i> (tak jsou pojmenované v&nbsp;Rustu) atd. Z&nbsp;tohoto důvodu
vznikla celá řada více či méně obsáhlých balíčků, z&nbsp;nichž mnohé jsou
vyjmenovány (a podle oblíbenosti seřazeny) na stránce <a
href="https://github.com/sfermigier/awesome-functional-python">Awesome
functional Python</a>. V&nbsp;dalším textu se postupně zaměříme především na
balíčky <strong>Funcy</strong>, <strong>(Py)Toolz</strong> a taktéž
<strong>Fn.py</strong>:</p>

<ol>

<li>Funcy na GitHubu<br />
<a href="https://github.com/suor/funcy/">https://github.com/suor/funcy/</a>
</li>

<li>PyToolz API Documentation<br />
<a href="https://toolz.readthedocs.io/en/latest/index.html">https://toolz.readthedocs.io/en/latest/index.html</a>
</li>

<li>Toolz (PyToolz) na GitHubu<br />
<a href="https://github.com/pytoolz/toolz">https://github.com/pytoolz/toolz</a>
</li>

<li>Fn.py: enjoy FP in Python<br />
<a href="https://github.com/kachayev/fn.py">https://github.com/kachayev/fn.py</a>
</li>

</ol>



<p><a name="k06"></a></p>
<h2 id="k06">6. Knihovna <strong>funcy</strong></h2>

<p>První z&nbsp;knihoven, které do Pythonu přidávají další funkcionální prvky,
se jmenuje <i>funcy</i>. Autor této knihovny se nechal inspirovat především
vlastnostmi programovacího jazyka <i>Clojure</i> a taktéž vlastnostmi knihovny
<i>Underscore</i> (či <i>Lodash</i>) pro ekosystém JavaScriptu. S&nbsp;Clojure
jsme se již na stránkách Rootu seznámili v&nbsp;samostatně běžícím seriálu (viz
odkazy na konci dnešního článku) a věnovali jsme se i knihovně
<i>Underscore</i>, a to konkrétně v&nbsp;článcích <a
href="https://www.root.cz/clanky/underscore-aneb-dalsi-knihovna-pro-funkcionalni-programovani-v-javascriptu/">Underscore
aneb další knihovna pro funkcionální programování v&nbsp;JavaScriptu</a> a <a
href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">Funkce
vyššího řádu v&nbsp;knihovně Underscore</a>. Jaké možnosti, vlastnosti a
techniky tedy byly z&nbsp;těchto dvou použity v&nbsp;knihovně <i>funcy</i>?
Podívejme se na jejich seznam:</p>

<ol>
<li>Funkce pro zpracování sekvencí (což je abstrakce postavená nad seznamy, n-ticemi atd.)</li>
<li>Funkce pro zpracování kolekcí</li>
<li>Zpracování funkcí &ndash; currying, kompozice funkcí a mnoho dalších podobných operací</li>
<li>Podpora pro práci s&nbsp;dekorátory</li>
<li>Podpůrné funkcionální konstrukce pro řízení toku (<i>control flow</i>), typicky založeném na použití dekorátorů a funkcí vyššího řádu</li>
<li>Podpora pro ladění</li>
<li>Podpora pro caching (v&nbsp;poněkud rozšířeném významu oproti nám již známé <i>@lru_cache</i> a <i>@cached_property</i>)</li>
</ol>

<p><div class="rs-tip-major">Poznámka: některé vlastnosti se ovšem částečně
překrývají s&nbsp;možnostmi jak samotného jazyku Python, tak i jeho standardní
knihovny (<i>functools</i>, <i>itertools</i>).</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Instalace knihovny <strong>funcy</strong></h2>

<p>Samotná instalace knihovny <strong>funcy</strong> je velmi snadná, protože
tato knihovna neobsahuje žádné překládané části (proto ani její <i>wheel</i>
nerozlišuje mezi architekturami) a ani nemá žádné další závislosti:</p>

<pre>
$ <strong>pip3 install --user funcy</strong>
&nbsp;
Collecting funcy
  Downloading funcy-2.0-py2.py3-none-any.whl (30 kB)
Installing collected packages: funcy
Successfully installed funcy-2.0
</pre>

<p>Nejedná se přitom o nijak obsáhlý balíček, protože jeho zdrojové kódy mají
přibližně 2500 řádků:</p>

<pre>
$ <strong>wc -l .local/lib/python3.8/site-packages/funcy/*.py</strong>
&nbsp;
  152 .local/lib/python3.8/site-packages/funcy/calc.py
  362 .local/lib/python3.8/site-packages/funcy/colls.py
   43 .local/lib/python3.8/site-packages/funcy/compat.py
  243 .local/lib/python3.8/site-packages/funcy/debug.py
  184 .local/lib/python3.8/site-packages/funcy/decorators.py
  246 .local/lib/python3.8/site-packages/funcy/flow.py
   28 .local/lib/python3.8/site-packages/funcy/funcmakers.py
   27 .local/lib/python3.8/site-packages/funcy/funcolls.py
  135 .local/lib/python3.8/site-packages/funcy/funcs.py
   21 .local/lib/python3.8/site-packages/funcy/__init__.py
  182 .local/lib/python3.8/site-packages/funcy/_inspect.py
  107 .local/lib/python3.8/site-packages/funcy/objects.py
   28 .local/lib/python3.8/site-packages/funcy/primitives.py
   41 .local/lib/python3.8/site-packages/funcy/py2.py
   32 .local/lib/python3.8/site-packages/funcy/py3.py
  504 .local/lib/python3.8/site-packages/funcy/seqs.py
   78 .local/lib/python3.8/site-packages/funcy/strings.py
   40 .local/lib/python3.8/site-packages/funcy/tree.py
   26 .local/lib/python3.8/site-packages/funcy/types.py
 2479 total
</pre>

<p>Vyzkoušejme si pro jistotu, zda je možné knihovnu <strong>funcy</strong>
naimportovat a zobrazit si nápovědu k&nbsp;ní:</p>

<pre>
&gt;&gt;&gt; import funcy
&gt;&gt;&gt; help(funcy)
</pre>

<p>Po zadání těchto příkazů by se na terminálu měla zobrazit nápověda
k&nbsp;naimportovanému balíčku:</p>

<pre>
Help on package funcy:
&nbsp;
NAME
    funcy
&nbsp;
PACKAGE CONTENTS
    _inspect
    calc
    colls
    compat
    debug
    decorators
    flow
    funcmakers
    funcolls
    funcs
    objects
    primitives
    py2
    py3
    seqs
    strings
    tree
    types
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Zkrácená deklarace dekorátoru s&nbsp;využitím dekorátoru <strong>@decorator</strong></h2>

<p>Podívejme se nejprve znovu na téma, kterému jsme se věnovali v&nbsp;závěru
předchozího článku i na začátku článku dnešního &ndash; jak v&nbsp;Pythonu
vytvořit <i>dekorátor</i>, tedy vhodně zapsanou funkci, která
obalí/transformuje uživatelem zadanou funkci. Víme již, že základní řešení může
vypadat následovně:</p>

<pre>
def <strong>wrapper1</strong>(function):
    def <strong>inner_function</strong>():
        print("-" * 40)
        function()
        print("-" * 40)
&nbsp;
    return inner_function
&nbsp;
&nbsp;
<u>@wrapper1</u>
def <strong>hello</strong>():
    print("Hello!")
&nbsp;
&nbsp;
hello()
</pre>

<p>Toto řešení je čitelné z&nbsp;pohledu uživatele dekorátoru a jeho další
výhodou je, že nic neskrývá, protože ze zdrojového kódu funkce
<strong>wrapper1</strong> je přímo patrné, jaká operace se zde provádí. Na
druhou stranu by možná bylo vhodnější si celý zápis zkrátit a zbytečně se
nezabývat deklarací wrapperu, prací s&nbsp;interní funkcí, kterou wrapper vrací
atd. A právě v&nbsp;takovém případě lze při použití knihovny <i>funcy</i> pro
deklaraci dekorátoru použít jiný dekorátor, zde konkrétně dekorátor nazvaný
přímočaře <strong>@decorator</strong>. Jeho použití je až triviálně snadné,
protože vlastně namísto původního wrapperu píšeme jen deklaraci
&bdquo;obalovací&ldquo; funkce:</p>

<pre>
from funcy import decorator
&nbsp;
&nbsp;
<u>@decorator</u>
def <strong>wrapper1</strong>(function):
    print("-" * 40)
    function()
    print("-" * 40)
&nbsp;
&nbsp;
<u>@wrapper1</u>
def <strong>hello</strong>():
    print("Hello!")
&nbsp;
&nbsp;
hello()
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_1.py</a>.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Několikanásobná aplikace dekorátorů</h2>

<p>Pro úplnost se ještě podívejme na další již známý příklad. Jedná se o
několikanásobnou aplikaci více dekorátorů, což znamená, že původní funkce je
transformována do jiné funkce a ta je dále transformována do další funkce
(atd.). Připomeňme si, že zdrojový kód tohoto příkladu vypadal takto:</p>

<pre>
def <strong>wrapper1</strong>(function):
    def <strong>inner_function</strong>():
        print("-" * 40)
        function()
        print("-" * 40)
&nbsp;
    return inner_function
&nbsp;
&nbsp;
def <strong>wrapper2</strong>(function):
    def <strong>inner_function</strong>():
        print("=" * 40)
        function()
        print("=" * 40)
&nbsp;
    return inner_function
&nbsp;
&nbsp;
<u>@wrapper1</u>
<u>@wrapper2</u>
def <strong>hello</strong>():
    print("Hello!")
&nbsp;
&nbsp;
hello()
</pre>

<p>Opět se podívejme na způsob zjednodušení celé struktury tohoto příkladu do
podoby založené na použití dekorátoru <strong>@decorator</strong>. Přepis je
přímočarý:</p>

<pre>
from funcy import decorator
&nbsp;
&nbsp;
<u>@decorator</u>
def <strong>wrapper1</strong>(function):
    print("-" * 40)
    function()
    print("-" * 40)
&nbsp;
&nbsp;
<u>@decorator</u>
def <strong>wrapper2</strong>(function):
    print("=" * 40)
    function()
    print("=" * 40)
&nbsp;
&nbsp;
<u>@wrapper1</u>
<u>@wrapper2</u>
def <strong>hello</strong>():
    print("Hello!")
&nbsp;
&nbsp;
hello()
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_2.py</a>.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Přepis dekorátoru pro zjištění doby běhu funkce</h2>

<p>Naposledy se podívejme na použití dekorátoru <strong>@decorator</strong>
z&nbsp;balíčku <i>funcy</i>. Tentokráte upravíme příklad s&nbsp;dekorátorem,
který dokáže změnit délku trvání nějaké operace v&nbsp;měřené funkci. Původní
zápis vypadal následovně:</p>

<pre>
<i># Original code:</i>
<i># https://pythonbasics.org/decorators/#Real-world-examples</i>
&nbsp;
&nbsp;
import time
&nbsp;
&nbsp;
def <strong>measure_time</strong>(func):
    def <strong>wrapper</strong>(*arg):
        t = time.time()
        res = func(*arg)
        print("Function took " + str(time.time() - t) + " seconds to run")
        return res
&nbsp;
    return wrapper
&nbsp;
&nbsp;
<u>@measure_time</u>
def <strong>tested_function</strong>(n):
    time.sleep(n)
&nbsp;
&nbsp;
tested_function(1)
tested_function(2)
</pre>

<p>Přepis do stručnější a čitelnější podoby:</p>

<pre>
from funcy import decorator
import time
&nbsp;
&nbsp;
<u>@decorator</u>
def <strong>measure_time</strong>(func):
    t = time.time()
    res = func()
    print("Function took " + str(time.time() - t) + " seconds to run")
    return res
&nbsp;
&nbsp;
<u>@measure_time</u>
def <strong>tested_function</strong>(n):
    print(f"Sleeping for {n} seconds")
    time.sleep(n)
&nbsp;
&nbsp;
tested_function(1)
tested_function(2)
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/measure_time.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/measure_time.py</a>.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Curryfikace funkce s&nbsp;využitím <strong>curry</strong></h2>

<p>Ve třetí části dnešního článku si ukážeme, jakým způsobem se
v&nbsp;programovacím jazyku Python s&nbsp;využitím knihovny <i>funcy</i>
provádí takzvaná <i>curryfikace</i> (anglicky <i>currying</i>). Pod tímto
termínem se v&nbsp;teorii programovacích jazyků (ovšem i obecně
v&nbsp;matematice) označuje proces, jímž se transformuje funkce, která
akceptuje více než jeden parametr, do řady vložených funkcí, přičemž každá
z&nbsp;nich akceptuje jen jediný parametr. Curryfikaci si můžeme představit
jako postupnou transformaci funkce s&nbsp;<i>n</i> parametry na jinak
zkonstruovanou funkci s&nbsp;<i>n-1</i> parametry atd. až rekurzivně dojdeme
k&nbsp;funkci s&nbsp;jediným parametrem:</p>

<pre>
x = f(a,b,c) &rarr;
    h = g(a)
    i = h(b)
    x = i(c)
</pre>

<p>Nebo na jediném řádku:</p>

<pre>
x = f(a,b,c) &rarr; g(a)(b)(c)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že funkce
<strong>g</strong> a <strong>h</strong> musí vracet jiné funkce.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Příklad curryfikace funkce se dvěma parametry</h2>

<p>Pro otestování možností, které nám nabízí funkce vyššího řádu
<strong>curry</strong> se pokusme o curryfikaci funkce <strong>add</strong> se
dvěma parametry <strong>x</strong> a <strong>y</strong>. Výsledkem curryfikace
by měla být funkce s&nbsp;jediným parametrem <strong>x</strong>, která vrací
jinou funkci akceptující taktéž jediný parametr (tentokrát <strong>y</strong>)
a teprve po zavolání této funkce se vrátí kýžený výsledek &ndash; součet dvou
numerických hodnot:</p>

<pre>
from funcy import curry
&nbsp;
&nbsp;
def <strong>add</strong>(x, y):
    return x + y
&nbsp;
&nbsp;
curried = curry(add)
&nbsp;
print(curried)
print(curried(1))
print(curried(1)(2))  <i># pozor na umístění závorek!</i>
</pre>

<p>Podívejme se nyní na vypsané výsledky:</p>

<pre>
&lt;function curry.&lt;locals&gt;.&lt;lambda&gt; at 0x7efd464f0160&gt;
&lt;function curry.&lt;locals&gt;.&lt;lambda&gt;.&lt;locals&gt;.&lt;lambda&gt; at 0x7efd463350d0&gt;
3
</pre>

<p>Jak máme tyto výsledky interpretovat?</p>

<ol>
<li>První řádek popisuje funkci (a my víme, že má jeden parametr)</li>
<li>Druhý řádek vznikl voláním této funkce a výsledkem je jiná funkce (opět akceptující jeden parametr, jak již víme)</li>
<li>A konečně řádek třetí vznikl zavoláním této funkce s&nbsp;kýženým výsledkem 3</li>
</ol>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry1.py</a>.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Curryfikace funkce se třemi parametry</h2>

<p>Ve skutečnosti pochopitelně není curryfikace omezena pouze na funkce se
dvěma parametry. Podívejme se tedy na to, jak bude vypadat curryfikace funkce,
která akceptuje tři parametry. Pro jednoduchost použijeme funkci, která své tři
parametry sečte a vrátí výsledek součtu:</p>

<pre>
from funcy import curry
&nbsp;
&nbsp;
def <strong>add3</strong>(x, y, z):
    return x + y + z
&nbsp;
&nbsp;
curried = curry(add3)
&nbsp;
print(curried)
print(curried(1))
print(curried(1)(2))     <i># pozor na umístění závorek!</i>
print(curried(1)(2)(3))  <i># pozor na umístění závorek!</i>
</pre>

<p>Po spuštění tohoto skriptu získáme na standardním výstupu následující čtyři
řádky:</p>

<pre>
&lt;function curry.&lt;locals&gt;.&lt;lambda&gt; at 0x7f3ea21d1160&gt;
&lt;function curry.&lt;locals&gt;.&lt;lambda&gt; at 0x7f3ea20160d0&gt;
&lt;function curry.&lt;locals&gt;.&lt;lambda&gt;.&lt;locals&gt;.&lt;lambda&gt; at 0x7f3ea1fa9f70&gt;
6
</pre>

<p>Postupně se jedná o tyto hodnoty:</p>

<ol>
<li>Funkce akceptující jeden parametr a vracející novou funkci (která bude opět vracet funkci akceptující jeden parametr).</li>
<li>Funkce akceptující jeden parametr a vracející novou funkci (která již bude vracet konkrétní číselnou hodnotu).</li>
<li>Funkce akceptující jeden parametr, která vrátí výsledek součtu tohoto parametru se svou vnitřní hodnotou 1+2.</li>
<li>Výsledek volání poslední funkce (z&nbsp;předchozího řádku) s&nbsp;parametrem 3.</li>
</ol>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry2.py</a>.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Rozdíl mezi curryfikací funkce s&nbsp;využitím <strong>curry</strong> a <strong>rcurry</strong></h2>

<p>Prozatím jsme si curryfikaci ukazovali na dvojici funkcí, jejichž parametry
vlastně byly <i>komutativní</i>, protože nezáleželo na jejich pořadí. To sice
ve skutečnosti není zcela pravda, protože interní stavy mezifunkcí již na
pořadí parametrech závisí, ovšem výsledkem bude pro stejné parametry (bez
ohledu na jejich pořadí) stejná hodnota (pochopitelně za předpokladu, že se
jedná o celá čísla). Ovšem podívejme se na funkci, kde již na pořadí parametrů
záleží. Bude se jednat o funkci pro výpočet podílu hodnot parametrů, takže se
zde striktně rozlišuje mezi dělencem a dělitelem:</p>

<pre>
from funcy import curry
&nbsp;
&nbsp;
def <strong>div</strong>(x, y):
    return x / y
&nbsp;
&nbsp;
curried = curry(div)
&nbsp;
print(curried)
print(curried(1))
print(curried(1)(2))  <i># pozor na umístění závorek!</i>
</pre>

<p>Nyní budou výsledky (zejména poslední řádek) vypadat takto:</p>

<pre>
&lt;function curry.&lt;locals&gt;.&lt;lambda&gt; at 0x7facbefbf160&gt;
&lt;function curry.&lt;locals&gt;.&lt;lambda&gt;.&lt;locals&gt;.&lt;lambda&gt; at 0x7facbee040d0&gt;
0.5
</pre>

<p>To by nemělo být příliš překvapující, protože výsledkem podílu 1/2 je za
určitých předpokladů :-) (správná verze Pythonu) skutečně hodnota 0.5.</p>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry1.py</a>.</div></p>

<p>Ovšem knihovna <i>funcy</i> nabízí programátorům i funkci nazvanou
<strong>rcurry</strong>, která provádí <i>currying</i> od posledního argumentu
k&nbsp;argumentu prvnímu, tedy v&nbsp;opačném pořadí. Pro nekomutativní
parametry se bude výsledek lišit (a nejen to &ndash; zde se dokonce projeví i
případná ne-asociativita). Ostatně se podívejme sami, jak se bude lišit
výsledek získaný po curryfikaci pomocí <strong>rcurry</strong> a nikoli pomocí
<strong>curry</strong>:</p>

<pre>
from funcy import rcurry
&nbsp;
&nbsp;
def <strong>div</strong>(x, y):
    return x / y
&nbsp;
&nbsp;
curried = rcurry(div)
&nbsp;
print(curried)
print(curried(1))
print(curried(1)(2))  <i># pozor na umístění závorek!</i>
</pre>

<p>Výsledek bude následující:</p>

<pre>
&lt;function rcurry.&lt;locals&gt;.&lt;lambda&gt; at 0x7f921d37c160&gt;
&lt;function rcurry.&lt;locals&gt;.&lt;lambda&gt;.&lt;locals&gt;.&lt;lambda&gt; at 0x7f921d1c10d0&gt;
2.0
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry2.py</a>.</div></p>

<p>Nyní se můžete ptát, k&nbsp;čemu je to vlastně dobré. Ve skutečnosti se může
jednat o poměrně užitečnou techniku, jak je to ostatně ukázáno i <a
href="https://funcy.readthedocs.io/en/stable/funcs.html#rcurry">v&nbsp;dokumentaci</a>.
My si ukážeme odlišný příklad, a to generátor funkcí pro výpočet libovolné
dopředu zvolené mocniny. Generované funkce tedy budou akceptovat hodnotu
<i>x</i> a vrátí <i>x<sup>y</sup></i>, kde <i>y</i> je již ve vygenerovaných
funkcích pevně &bdquo;zadrátováno&ldquo;:</p>

<pre>
from funcy import rcurry
&nbsp;
&nbsp;
def <strong>pow</strong>(x, y):
    return x ** y
&nbsp;
&nbsp;
n_pow = rcurry(pow)
pow2 = n_pow(2)
pow10 = n_pow(10)
&nbsp;
print(pow2(2))
print(pow10(2))
</pre>

<p>Funkce <strong>pow2</strong> a <strong>pow10</strong> byly vygenerovány
zavoláním funkce <strong>n_pow</strong> a předáním mocniny:</p>

<pre>
4
1024
</pre>

<p>Z&nbsp;druhého výsledku je zřejmé, že se vrátila hodnota 2<sup>10</sup>.</p>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry3.py</a>.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. &bdquo;autocurryfikace&ldquo;</h2>

<p>Knihovna <i>funcy</i> jde ovšem ještě dále a kromě &bdquo;běžných&ldquo;
funkcí vyššího řádu <strong>curry</strong> a <strong>ncurry</strong> nabízí
vývojářům ještě jednu curryfikační techniku. Ta je implementována ve funkci
vyššího řádu nazvané <strong>autocurry</strong>. Tato funkce opět akceptuje
libovolnou jinou funkci s&nbsp;libovolným počtem parametrů a vrací novou
funkci, která se chová jako vzorně curryfikovaná funkce (akceptuje tedy jeden
parametr a obecně vrací jinou funkci), ale současně se chová i jako funkce, na
kterou jsou aplikovány všechny kombinace <strong>partial</strong>. Což znamená,
že nově vzniklé funkci můžete předat libovolné množství parametrů (až do maxima
omezeného původní funkcí) a buď se vrátí curryfikovaná či částečně aplikovaná
funkce nebo přímo výsledek.</p>

<p>Zní to složitě? Podívejme se na příklad:</p>

<pre>
from funcy import autocurry
&nbsp;
&nbsp;
def <strong>pow</strong>(x, y):
    return x ** y
&nbsp;
&nbsp;
n_pow = autocurry(pow)
powX = n_pow()
pow2 = n_pow(2)
pow10 = n_pow(10)
pow3to3 = n_pow(3, 3)
&nbsp;
print(powX(3, 3))
print(pow2(2))
print(pow10(2))
print(pow3to3)
</pre>

<p>Na řádku:</p>

<pre>
n_pow = autocurry(pow)
</pre>

<p>jsme si vyžádali vygenerování nové funkce, která je jak curryfikovanou
obdobou vstupní funkce, tak i funkce, která se bude chovat, jako bychom použili
<strong>partial</strong>. To je ostatně patrné na následujících čtyřech
řádcích:</p>

<pre>
powX = n_pow()          <i># curryfikace/partial bez parametrů (pochopitelně se vrací funkce)</i>
pow2 = n_pow(2)         <i># curryfikace</i>
pow10 = n_pow(10)       <i># curryfikace</i>
pow3to3 = n_pow(3, 3)   <i># partial, ovšem dosazením všech parametrů ihned získáme výsledek (nevrací se funkce)</i>
</pre>

<p>A výsledky:</p>

<pre>
27
4
100    <i># 10^2 nikoli 2^10 !!!</i>
27
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/autocurry.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/autocurry.py</a>.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>compose</strong></h2>

<p>V&nbsp;několika funkcionálních jazycích (a taktéž v&nbsp;jazycích typu
FORTH, Factor nebo Joy) je umožněno vytvářet kompozice funkcí, tj.&nbsp;nové
funkce, které vzniknou vzájemným voláním funkcí existujících, ovšem s&nbsp;tím,
že se při konstrukci kompozice neřeší takové &bdquo;maličkosti&ldquo;, jako
jsou názvy či počty předávaných parametrů. Ovšem s&nbsp;kompozicí funkcí se
setkáme i v&nbsp;dalších jazycích, i když zde se celá technika může nazývat
jinak (<i>pipeline</i>) atd.</p>

<p>Podívejme se na velmi jednoduchý příklad, který provede kompozici
standardních funkcí <strong>len</strong> a <strong>str</strong>, a to konkrétně
tak, že se vstupní parametr převede na řetězec funkcí <strong>str</strong> a
následně se vypočte a vrátí délka tohoto řetězce funkcí <strong>len</strong>.
Kompozice je tedy <strong>len(str(vstup))</strong>:</p>

<pre>
from funcy import compose
&nbsp;
&nbsp;
composed = <u>compose(len, str)</u>
&nbsp;
print(composed)
print(composed(0))
print(composed(42))
print(composed(1000))
</pre>

<p>Výsledek by měl vypadat následovně &ndash; nejprve se vypíše typ hodnoty
<strong>composed</strong> a následně se vypíšou délky řetězců &bdquo;0&ldquo;,
&bdquo;42&ldquo; a &bdquo;1000&ldquo;:</p>

<pre>
&lt;function compose.&lt;locals&gt;.&lt;lambda&gt;.&lt;locals&gt;.&lt;lambda&gt; at 0x7f5bf7100160&gt;
1
2
4
</pre>

<p>Ovšem můžeme použít i funkce s&nbsp;větším množstvím parametrů. Například
lze vytvořit kompozici z&nbsp;funkce pro součet dvou hodnot s&nbsp;následným
vynásobením mezivýsledku dvojkou:</p>

<pre>
from funcy import compose
&nbsp;
&nbsp;
def <strong>add</strong>(x, y):
    return x+y
&nbsp;
&nbsp;
def <strong>double</strong>(x):
    return 2*x
&nbsp;
&nbsp;
composed = <u>compose(double, add)</u>
&nbsp;
print(composed(2, 3))
print(composed(-2, -3))
</pre>

<p>Takto vypadají výsledky:</p>

<pre>
10
-10
</pre>

<p>A pro úplnost si ukažme ještě kompozici získanou ze třech funkcí, konkrétně
<strong>abs(double(add(x,y)))</strong>:</p>

<pre>
from funcy import compose
&nbsp;
&nbsp;
def <strong>add</strong>(x, y):
    return x+y
&nbsp;
&nbsp;
def <strong>double</strong>(x):
    return 2*x
&nbsp;
&nbsp;
def <strong>abs</strong>(x):
    if x &lt; 0:
        return -x
    return x
&nbsp;
&nbsp;
composed = <u>compose(abs, double, add)</u>
&nbsp;
print(composed(2, 3))
print(composed(-2, -3))
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
10
10
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Kompozice zleva doprava či zprava doleva?</h2>

<p>Při tvorbě <i>pipeline</i> z&nbsp;funkcí je přirozenější číst kompozici
zleva doprava. V&nbsp;tomto případě je výhodnější namísto
<strong>compose</strong> použít funkci vyššího řádu nazvanou
<strong>rcompose</strong>:</p>

<pre>
from funcy import rcompose
&nbsp;
&nbsp;
composed = <u>rcompose(str, len)</u>
&nbsp;
print(composed)
print(composed(0))
print(composed(42))
print(composed(1000))
</pre>

<p>Výsledky budou odpovídat příkladu z&nbsp;předchozí kapitoly:</p>

<pre>
&lt;function compose.&lt;locals&gt;.&lt;lambda&gt;.&lt;locals&gt;.&lt;lambda&gt; at 0x7f9795247160&gt;
1
2
4
</pre>

<p>Podobně můžeme přepsat i druhý příklad z&nbsp;předchozí kapitoly do této
přehlednější podoby:</p>

<pre>
from funcy import rcompose
&nbsp;
&nbsp;
def <strong>add</strong>(x, y):
    return x+y
&nbsp;
&nbsp;
def <strong>double</strong>(x):
    return 2*x
&nbsp;
&nbsp;
composed = <u>rcompose(add, double)</u>
&nbsp;
print(composed(2, 3))
print(composed(-2, -3))
</pre>

<p>Výsledky:</p>

<pre>
10
-10
</pre>

<p>A poslední příklad byl přepsán do této <i>pipeline</i>:</p>

<pre>
from funcy import rcompose
&nbsp;
&nbsp;
def <strong>add</strong>(x, y):
    return x+y
&nbsp;
&nbsp;
def <strong>double</strong>(x):
    return 2*x
&nbsp;
&nbsp;
def <strong>abs</strong>(x):
    if x &lt; 0:
        return -x
    return x
&nbsp;
&nbsp;
composed = <u>rcompose(add, double, abs)</u>
&nbsp;
print(composed(2, 3))
print(composed(-2, -3))
</pre>

<p>Výsledky:</p>

<pre>
10
10
</pre>

<p><div class="rs-tip-major">Poznámka: termín <i>pipeline</i> je v&nbsp;IT
skutečně nadužíván a zneužíván, takže se za jeho použití v&nbsp;článku omlouvám
:-)</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty, které jsme si ukázali <a
href="https://www.root.cz/clanky/podpora-funkcionalniho-programovani-v-pythonu-a-knihovna-functools/">v&nbsp;úvodním
článku</a>, <a
href="https://www.root.cz/clanky/podpora-funkcionalniho-programovani-v-pythonu-a-knihovna-functools-2-cast/">předminule</a>,
<a
href="https://www.root.cz/clanky/podpora-funkcionalniho-programovani-v-pythonu-a-knihovna-functools-3-cast/">minule</a>
i dnes, naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je nutné mít
nainstalovánu některou z&nbsp;podporovaných verzí Pythonu 3, a pro dnešní
příklady i výše zmíněnou knihovnu <strong>funcy</strong>):</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>binary_operator.py</td><td>ukázka funkce vyššího řádu, která jako parametr akceptuje jinou funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator.py</a></td></tr>
<tr><td> 2</td><td>get_operator_1.py</td><td>ukázka funkce vyššího řádu, která vrací jinou funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_1.py</a></td></tr>
<tr><td> 3</td><td>get_operator_2.py</td><td>ukázka funkce vyššího řádu, která vrací jinou funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_2.py</a></td></tr>
<tr><td> 4</td><td>standard_operators.py</td><td>použití standardních operátorů přepsaných do formy funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/standard_operators.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/standard_operators.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>binary_operator_types.py</td><td>varianta příkladu <strong>binary_operator.py</strong> s&nbsp;plnými typovými deklaracemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator_types.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator_types.py</a></td></tr>
<tr><td> 6</td><td>get_operator_types.py</td><td>varianta příkladu <strong>get_operator_2.py</strong> s&nbsp;plnými typovými deklaracemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_types.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_types.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>map_1.py</td><td>příklad použití funkce <strong>map</strong>: výpočet délky všech slov v&nbsp;textu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_1.py</a></td></tr>
<tr><td> 8</td><td>map_2.py</td><td>příklad použití funkce <strong>map</strong>: výpočet absolutní hodnoty všech členů posloupnosti</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_2.py</a></td></tr>
<tr><td> 9</td><td>map_3.py</td><td>příklad použití funkce <strong>map</strong>: aplikace vlastní pojmenované funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_3.py</a></td></tr>
<tr><td>10</td><td>map_4.py</td><td>příklad použití funkce <strong>map</strong>: aplikace vlastního lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>map_list_comprehension_1.py</td><td>přepis skriptu <strong>map_1.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_1.py</a></td></tr>
<tr><td>12</td><td>map_list_comprehension_2.py</td><td>přepis skriptu <strong>map_2.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_2.py</a></td></tr>
<tr><td>13</td><td>map_list_comprehension_3.py</td><td>přepis skriptu <strong>map_3.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_3.py</a></td></tr>
<tr><td>14</td><td>map_list_comprehension_4.py</td><td>přepis skriptu <strong>map_4.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>filter_1.py</td><td>filtrace dat na základě délky řetězce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_1.py</a></td></tr>
<tr><td>16</td><td>filter_2.py</td><td>filtrace numerických dat podle toho, zda se jedná o sudá či lichá čísla</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_2.py</a></td></tr>
<tr><td>17</td><td>filter_3.py</td><td>přepis předchozího příkladu s&nbsp;využitím lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>filter_list_comprehension_1.py</td><td>přepis skriptu <strong>filter_list_comprehension_1.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_1.py</a></td></tr>
<tr><td>19</td><td>filter_list_comprehension_2.py</td><td>přepis skriptu <strong>filter_list_comprehension_2.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_2.py</a></td></tr>
<tr><td>20</td><td>filter_list_comprehension_3.py</td><td>přepis skriptu <strong>filter_list_comprehension_3.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>reduce_1.py</td><td>výpočet faktoriálu s&nbsp;využitím funkce vyššího řádu <strong>reduce</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_1.py</a></td></tr>
<tr><td>22</td><td>reduce_2.py</td><td>přepis předchozího příkladu s&nbsp;využitím lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_2.py</a></td></tr>
<tr><td>23</td><td>reduce_3.py</td><td>tisk tabulky faktoriálů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_3.py</a></td></tr>
<tr><td>24</td><td>reduce_4.py</td><td>přepis předchozího příkladu s&nbsp;využitím lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_4.py</a></td></tr>
<tr><td>25</td><td>reduce_5.py</td><td>přepis předchozího příkladu s&nbsp;využitím generátorové notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>return_function.py</td><td>funkce jako návratová hodnota jiné funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/return_function.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/return_function.py</a></td></tr>
<tr><td>27</td><td>closure_adder1.py</td><td>příklad použití uzávěru &ndash; konstrukce funkce typu <i>adder</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/closure_adder1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/closure_adder1.py</a></td></tr>
<tr><td>28</td><td>counter_closure_1.py</td><td>nekorektní implementace čítače s&nbsp;využitím uzávěrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_1.py</a></td></tr>
<tr><td>29</td><td>counter_closure_2.py</td><td>přístup k&nbsp;nelokálnímu symbolu (Python 2.x i Python 3.x)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_2.py</a></td></tr>
<tr><td>30</td><td>counter_closure_3.py</td><td>přístup k&nbsp;nelokálnímu symbolu (pouze Python 3.x)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>access_nonlocal_symbol.py</td><td>přístup k&nbsp;nelokálnímu symbolu v&nbsp;uzávěru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/access_nonlocal_symbol.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/access_nonlocal_symbol.py</a></td></tr>
<tr><td>32</td><td>functions_and_closures.py</td><td>funkce a uzávěry (umělý příklad)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/functions_and_closures.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/functions_and_closures.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>partial_1.py</td><td>funkce <strong>doubler</strong> odvozená (redukcí) z&nbsp;univerzálnější funkce <strong>mul</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_1.py</a></td></tr>
<tr><td>34</td><td>partial_2.py</td><td>transformace funkce se třemi parametry s&nbsp;využitím <strong>partial</strong> (nekorektní řešení)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_2.py</a></td></tr>
<tr><td>35</td><td>partial_3.py</td><td>transformace funkce se třemi parametry s&nbsp;využitím <strong>partial</strong> (korektní řešení)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_3.py</a></td></tr>
<tr><td>36</td><td>partial_4.py</td><td>transformace funkce s&nbsp;dosazením většího množství parametrů s&nbsp;využitím <strong>partial</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_4.py</a></td></tr>
<tr><td>37</td><td>partial_5.py</td><td>několikanásobná transformace původní funkce na několik nových funkcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_5.py</a></td></tr>
<tr><td>38</td><td>partial_6.py</td><td>postupná transformace již ztransformovaných funkcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_6.py</a></td></tr>
<tr><td>39</td><td>partial_7.py</td><td>typ originální funkce i funkcí získaných s&nbsp;využitím transformace pomocí <strong>partial</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_7.py</a></td></tr>
<tr><td>40</td><td>partial_8.py</td><td>jméno funkce, poziční argumenty funkce a pojmenované argumenty funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_8.py</a></td></tr>
<tr><td>41</td><td>partial_9.py</td><td>transformace <strong>reduce</strong> a pojmenované argumenty původní funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_9.py</a></td></tr>
<tr><td>42</td><td>partial_A.py</td><td>získání informací o redukované funkci s&nbsp;pojmenovanými argumenty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_A.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>partial_method_1.py</td><td>třída s&nbsp;metodou s&nbsp;parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_1.py</a></td></tr>
<tr><td>44</td><td>partial_method_2.py</td><td>třída s&nbsp;metodou s&nbsp;parametry &ndash; vliv volání setteru na stav objektu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_2.py</a></td></tr>
<tr><td>45</td><td>partial_method_3.py</td><td>metody <strong>enable</strong> a <strong>disable</strong> vzniklé transformací <strong>set_enabled</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_3.py</a></td></tr>
<tr><td>46</td><td>partial_method_4.py</td><td>další příklad použití funkce <strong>partialmethod</strong> &ndash; doplnění většího množství parametrů při transformaci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>47</td><td>lru_cache_1.py</td><td>klasický výpočet Fibonacciho posloupnosti rekurzivní funkcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_1.py</a></td></tr>
<tr><td>48</td><td>lru_cache_2.py</td><td>LRU cache pro výsledky Fibonacciho posloupnosti pro nejčastěji použité vstupy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_2.py</a></td></tr>
<tr><td>49</td><td>lru_cache_3.py</td><td>přečtení informací o využití LRU cache</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_3.py</a></td></tr>
<tr><td>50</td><td>lru_cache_4.py</td><td>programové vymazání LRU cache</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>51</td><td>cached_property_1.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_1.py</a></td></tr>
<tr><td>52</td><td>cached_property_2.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_2.py</a></td></tr>
<tr><td>53</td><td>cached_property_3.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>54</td><td>total_ordering.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/total_ordering.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/total_ordering.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>55</td><td>decorators_2.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_2.py</a></td></tr>
<tr><td>56</td><td>decorators_3.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_3.py</a></td></tr>
<tr><td>57</td><td>measure_time.py</td><td>praktické použití dekorátoru &ndash; měření doby trvání funkce označené dekorátorem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/measure_time.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/measure_time.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>58</td><td>decorators_4.py</td><td>atributy transformované funkce vytvořené s&nbsp;využitím dekorátoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_4.py</a></td></tr>
<tr><td>59</td><td>decorators_5.py</td><td>využití dekorátoru <strong>@wraps</strong> pro automatickou úpravu atributů &bdquo;obalované&ldquo; funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_5.py</a></td></tr>
<tr><td>60</td><td>decorators_6.py</td><td>dekorátor <strong>@wraps</strong> a několikanásobná aplikace dekorátorů na &bdquo;obalovanou&ldquo; funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>decorators_1.py</td><td>zkrácená deklarace dekorátoru s&nbsp;využitím dekorátoru <strong>@decorator</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_1.py</a></td></tr>
<tr><td>62</td><td>decorators_2.py</td><td>několikanásobná aplikace dekorátorů, dekorátor je vytvořen přes <strong>@decorator</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_2.py</a></td></tr>
<tr><td>63</td><td>measure_time.py</td><td>měření doby trvání funkce označené dekorátorem, dekorátor je vytvořen přes <strong>@decorator</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/measure_time.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/measure_time.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>64</td><td>curry1.py</td><td>curryfikace funkce se dvěma parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry1.py</a></td></tr>
<tr><td>65</td><td>curry2.py</td><td>curryfikace funkce se třemi parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry2.py</a></td></tr>
<tr><td>66</td><td>rcurry1.py</td><td>curryfikace funkce <strong>div</strong> funkcí <strong>curry</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry1.py</a></td></tr>
<tr><td>67</td><td>rcurry2.py</td><td>curryfikace funkce <strong>div</strong> funkcí <strong>rcurry</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry2.py</a></td></tr>
<tr><td>68</td><td>rcurry3.py</td><td>curryfikace funkce <strong>n_pow</strong> funkcí <strong>rcurry</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>69</td><td>autocurry.py</td><td>curryfikace funkce <strong>n_pow</strong> funkcí <strong>autocurry</strong> (s&nbsp;odlišným výsledkem)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/autocurry.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/autocurry.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>70</td><td>compose1.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>compose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose1.py</a></td></tr>
<tr><td>71</td><td>compose2.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>compose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose2.py</a></td></tr>
<tr><td>72</td><td>compose3.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>compose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose3.py</a></td></tr>
<tr><td>73</td><td>rcompose1.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>rcompose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose1.py</a></td></tr>
<tr><td>74</td><td>rcompose2.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>rcompose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose2.py</a></td></tr>
<tr><td>75</td><td>rcompose3.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>rcompose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose3.py</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Příloha: odkazy na články o programovacím jazyku Clojure</h2>

<p>Pro úplnost si uveďme odkazy na články o programovacím jazyku Clojure, jenž
byl, podobně jako knihovna <i>Underscore</i>, velkou inspirací pro tvorbu
knihovny <i>funcy</i>. Mnoho technik je v&nbsp;Clojure pojmenováno stejně či
velmi podobně, jako ve tomu <i>funcy</i> atd.:</p>

<ol>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Programovací jazyk Clojure &ndash; triky při práci s&nbsp;řetězci<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-retezci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-retezci/</a>
</li>

<li>Programovací jazyk Clojure &ndash; triky při práci s&nbsp;kolekcemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-kolekcemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-kolekcemi/</a>
</li>

<li>Programovací jazyk Clojure &ndash; práce s&nbsp;mapami a množinami<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-prace-s-mapami-a-mnozinami/">http://www.root.cz/clanky/programovaci-jazyk-clojure-prace-s-mapami-a-mnozinami/</a>
</li>

<li>Programovací jazyk Clojure &ndash; základy zpracování XML<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-zaklady-zpracovani-xml/">http://www.root.cz/clanky/programovaci-jazyk-clojure-zaklady-zpracovani-xml/</a>
</li>

<li>Programovací jazyk Clojure &ndash; testování s využitím knihovny Expectations<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/">http://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/</a>
</li>

<li>Programovací jazyk Clojure &ndash; některé užitečné triky použitelné (nejenom) v&nbsp;testech<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/">http://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/</a>
</li>

<li>Enlive &ndash; výkonný šablonovací systém pro jazyk Clojure<br/>
<a href="http://www.root.cz/clanky/enlive-vykonny-sablonovaci-system-pro-jazyk-clojure/">http://www.root.cz/clanky/enlive-vykonny-sablonovaci-system-pro-jazyk-clojure/</a>
</li>

<li>Nástroj Leiningen a programovací jazyk Clojure: tvorba vlastních knihoven pro veřejný repositář Clojars<br />
<a href="http://www.root.cz/clanky/nastroj-leiningen-a-programovaci-jazyk-clojure-tvorba-vlastnich-knihoven-pro-verejny-repositar-clojars/">http://www.root.cz/clanky/nastroj-leiningen-a-programovaci-jazyk-clojure-tvorba-vlastnich-knihoven-pro-verejny-repositar-clojars/</a>
</li>

<li>Novinky v&nbsp;Clojure verze 1.8.0<br />
<a href="http://www.root.cz/clanky/novinky-v-clojure-verze-1-8-0/">http://www.root.cz/clanky/novinky-v-clojure-verze-1-8-0/</a>
</li>

<li>Asynchronní programování v&nbsp;Clojure s&nbsp;využitím knihovny core.async<br />
<a href="http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async/">http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async/</a>
</li>

<li>Asynchronní programování v&nbsp;Clojure s&nbsp;využitím knihovny core.async (pokračování)<br />
<a href="http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-pokracovani/">http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-pokracovani/</a>
</li>

<li>Asynchronní programování v&nbsp;Clojure s&nbsp;využitím knihovny core.async (dokončení)<br />
<a href="http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-dokonceni/">http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-dokonceni/</a>
</li>

<li>Vytváříme IRC bota v&nbsp;programovacím jazyce Clojure<br />
<a href="http://www.root.cz/clanky/vytvarime-irc-bota-v-programovacim-jazyce-clojure/">http://www.root.cz/clanky/vytvarime-irc-bota-v-programovacim-jazyce-clojure/</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Multimetody v&nbsp;Clojure aneb polymorfismus bez použití OOP<br />
<a href="https://www.root.cz/clanky/multimetody-v-clojure-aneb-polymorfismus-bez-pouziti-oop/">https://www.root.cz/clanky/multimetody-v-clojure-aneb-polymorfismus-bez-pouziti-oop/</a>
</li>

<li>Práce s&nbsp;externími Java archivy v&nbsp;programovacím jazyku Clojure<br />
<a href="https://www.root.cz/clanky/prace-s-externimi-java-archivy-v-programovacim-jazyku-clojure/">https://www.root.cz/clanky/prace-s-externimi-java-archivy-v-programovacim-jazyku-clojure/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v&nbsp;praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vim s&nbsp;REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v&nbsp;Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v&nbsp;Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v&nbsp;Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v&nbsp;Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v&nbsp;Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v&nbsp;Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s&nbsp;vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s&nbsp;vektory a maticemi (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s&nbsp;využitím knihovny Clisk<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s&nbsp;využitím knihovny Clisk (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v&nbsp;jazyce Clojure<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v &nbsp;azyce Clojure (2)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v&nbsp;jazyce Clojure (3)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/</a>
</li>

<li>Programovací jazyk Clojure a práce s&nbsp;Gitem<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/</a>
</li>

<li>Programovací jazyk Clojure a práce s&nbsp;Gitem (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s&nbsp;využitím knihovny Clisk (dokončení)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/</a>
</li>

<li>Pixie: lehký skriptovací jazyk s&nbsp;„kouzelnými“ schopnostmi<br />
<a href="https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/">https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/</a>
</li>

<li>Programovací jazyk Pixie: funkce ze základní knihovny a použití FFI<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/">https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/</a>
</li>

<li>Novinky v&nbsp;Clojure verze 1.9.0<br />
<a href="https://www.root.cz/clanky/novinky-v-clojure-verze-1-9-0/">https://www.root.cz/clanky/novinky-v-clojure-verze-1-9-0/</a>
</li>

<li>Validace dat s&nbsp;využitím knihovny spec v&nbsp;Clojure 1.9.0<br />
<a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/">https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v&nbsp;Clojure<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v&nbsp;Clojure (2)<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/</a>
</li>

<li>Incanter: prostředí pro statistické výpočty s grafickým výstupem založené na Clojure<br />
<a href="https://www.root.cz/clanky/incanter-prostredi-pro-statisticke-vypocty-s-grafickym-vystupem-zalozene-na-clojure/">https://www.root.cz/clanky/incanter-prostredi-pro-statisticke-vypocty-s-grafickym-vystupem-zalozene-na-clojure/</a>
</li>

<li>Incanter: operace s&nbsp;maticemi<br />
<a href="https://www.root.cz/clanky/incanter-operace-s-maticemi/">https://www.root.cz/clanky/incanter-operace-s-maticemi/</a>
</li>

<li>Interpret programovacího jazyka Clojure integrovaný do Jupyter Notebooku<br />
<a href="https://www.root.cz/clanky/interpret-programovaciho-jazyka-clojure-integrovany-do-jupyter-notebooku/">https://www.root.cz/clanky/interpret-programovaciho-jazyka-clojure-integrovany-do-jupyter-notebooku/</a>
</li>

<li>Babashka: interpret Clojure určený pro rychlé spouštění utilit z&nbsp;příkazového řádku<br />
<a href="https://www.root.cz/clanky/babashka-interpret-clojure-urceny-pro-rychle-spousteni-utilit-z-prikazoveho-radku/">https://www.root.cz/clanky/babashka-interpret-clojure-urceny-pro-rychle-spousteni-utilit-z-prikazoveho-radku/</a>
</li>

<li>Pokročilý streaming založený na Apache Kafce, jazyku Clojure a knihovně Jackdaw<br />
<a href="https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw/">https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw/</a>
</li>

<li>Pokročilý streaming založený na Apache Kafce, jazyku Clojure a knihovně Jackdaw (2. část)<br />
<a href="https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw-2-cast/">https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw-2-cast/</a>
</li>

<li>Pokročilý streaming založený na projektu Apache Kafka, jazyku Clojure a knihovně Jackdaw (streamy a kolony)<br />
<a href="https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-projektu-apache-kafka-jazyku-clojure-a-knihovne-jackdaw-streamy-a-kolony/">https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-projektu-apache-kafka-jazyku-clojure-a-knihovne-jackdaw-streamy-a-kolony/</a>
</li>

<li>Řídicí struktury využitelné v&nbsp;programovacím jazyku Clojure<br />
<a href="https://www.root.cz/clanky/ridici-struktury-vyuzitelne-v-programovacim-jazyku-clojure/">https://www.root.cz/clanky/ridici-struktury-vyuzitelne-v-programovacim-jazyku-clojure/</a>
</li>

<li>Řídicí struktury využitelné v programovacím jazyku Clojure (dokončení)<br />
<a href="https://www.root.cz/clanky/ridici-struktury-vyuzitelne-v-programovacim-jazyku-clojure-dokonceni/">https://www.root.cz/clanky/ridici-struktury-vyuzitelne-v-programovacim-jazyku-clojure-dokonceni/</a>
</li>

<li>Formát EDN: extensible data notation<br />
<a href="https://www.root.cz/clanky/format-edn-extensible-data-notation/">https://www.root.cz/clanky/format-edn-extensible-data-notation/</a>
</li>

<li>Formát EDN: extensible data notation (dokončení)<br />
<a href="https://www.root.cz/clanky/format-edn-extensible-data-notation-dokonceni/">https://www.root.cz/clanky/format-edn-extensible-data-notation-dokonceni/</a>
</li>

<li>Čtyři různé podoby datové struktury map v&nbsp;programovacím jazyku Clojure<br />
<a href="https://www.root.cz/clanky/ctyri-ruzne-podoby-datove-struktury-map-v-programovacim-jazyku-clojure/">https://www.root.cz/clanky/ctyri-ruzne-podoby-datove-struktury-map-v-programovacim-jazyku-clojure/</a>
</li>

<li>Programová tvorba diagramů v&nbsp;jazyku Clojure s&nbsp;využitím knihovny Rhizome<br />
<a href="https://www.root.cz/clanky/programova-tvorba-diagramu-v-jazyku-clojure-s-vyuzitim-knihovny-rhizome/">https://www.root.cz/clanky/programova-tvorba-diagramu-v-jazyku-clojure-s-vyuzitim-knihovny-rhizome/</a>
</li>

<li>Využití Redisu z&nbsp;jazyka Clojure pomocí knihovny Carmine<br />
<a href="https://www.root.cz/clanky/vyuziti-redisu-z-jazyka-clojure-pomoci-knihovny-carmine/">https://www.root.cz/clanky/vyuziti-redisu-z-jazyka-clojure-pomoci-knihovny-carmine/</a>
</li>

<li>Využití Redisu z&nbsp;jazyka Clojure pomocí knihovny Carmine (dokončení)<br />
<a href="https://www.root.cz/clanky/vyuziti-redisu-z-jazyka-clojure-pomoci-knihovny-carmine-dokonceni/">https://www.root.cz/clanky/vyuziti-redisu-z-jazyka-clojure-pomoci-knihovny-carmine-dokonceni/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>functools — Higher-order functions and operations on callable objects<br />
<a href="https://docs.python.org/3/library/functools.html">https://docs.python.org/3/library/functools.html</a>
</li>

<li>Functional Programming HOWTO<br />
<a href="https://docs.python.org/3/howto/functional.html">https://docs.python.org/3/howto/functional.html</a>
</li>

<li>Functional Programming in Python: When and How to Use It<br />
<a href="https://realpython.com/python-functional-programming/">https://realpython.com/python-functional-programming/</a>
</li>

<li>Functional Programming With Python<br />
<a href="https://realpython.com/learning-paths/functional-programming/">https://realpython.com/learning-paths/functional-programming/</a>
</li>

<li>Awesome Functional Python<br />
<a href="https://github.com/sfermigier/awesome-functional-python">https://github.com/sfermigier/awesome-functional-python</a>
</li>

<li>Currying<br />
<a href="https://en.wikipedia.org/wiki/Currying">https://en.wikipedia.org/wiki/Currying</a>
</li>

<li>Currying in Python &ndash; A Beginner’s Introduction<br />
<a href="https://www.askpython.com/python/examples/currying-in-python">https://www.askpython.com/python/examples/currying-in-python</a>
</li>

<li>Fundamental Concepts in Programming Languages<br />
<a href="https://en.wikipedia.org/wiki/Fundamental_Concepts_in_Programming_Languages">https://en.wikipedia.org/wiki/Fundamental_Concepts_in_Programming_Languages</a>
</li>

<li>When should I use function currying?<br />
<a href="https://stackoverflow.com/questions/24881604/when-should-i-use-function-currying">https://stackoverflow.com/questions/24881604/when-should-i-use-function-currying</a>
</li>

<li>Toolz<br />
<a href="https://github.com/pytoolz/toolz/tree/master">https://github.com/pytoolz/toolz/tree/master</a>
</li>

<li>Coconut: funkcionální jazyk s pattern matchingem kompatibilní s&nbsp;Pythonem<br />
<a href="https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/">https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/</a>
</li>

<li>A HITCHHIKER'S GUIDE TO functools<br />
<a href="https://ep2021.europython.eu/media/conference/slides/a-hitchhikers-guide-to-functools.pdf">https://ep2021.europython.eu/media/conference/slides/a-hitchhikers-guide-to-functools.pdf</a>
</li>

<li>Coconut aneb funkcionální nadstavba nad Pythonem (2.část)<br />
<a href="https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/">https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/</a>
</li>

<li>Knihovny pro zpracování posloupností (sekvencí) v&nbsp;Pythonu<br />
<a href="https://www.root.cz/clanky/knihovny-pro-zpracovani-posloupnosti-sekvenci-v-pythonu/">https://www.root.cz/clanky/knihovny-pro-zpracovani-posloupnosti-sekvenci-v-pythonu/</a>
</li>

<li>clj - repositář s knihovnou<br />
<a href="https://github.com/bfontaine/clj">https://github.com/bfontaine/clj</a>
</li>

<li>clj 0.1.0 &ndash; stránka na PyPi<br />
<a href="https://pypi.python.org/pypi/clj/0.1.0">https://pypi.python.org/pypi/clj/0.1.0</a>
</li>

<li>Coconut: Simple, elegant, Pythonic functional programming<br />
<a href="http://coconut-lang.org/">http://coconut-lang.org/</a>
</li>

<li>coconut (Python package index)<br />
<a href="https://pypi.python.org/pypi/coconut/">https://pypi.python.org/pypi/coconut/</a>
</li>

<li>Coconut Tutorial<br />
<a href="http://coconut.readthedocs.io/en/master/HELP.html">http://coconut.readthedocs.io/en/master/HELP.html</a>
</li>

<li>Coconut FAQ<br />
<a href="http://coconut.readthedocs.io/en/master/FAQ.html">http://coconut.readthedocs.io/en/master/FAQ.html</a>
</li>

<li>Coconut Documentation<br />
<a href="http://coconut.readthedocs.io/en/master/DOCS.html">http://coconut.readthedocs.io/en/master/DOCS.html</a>
</li>

<li>Coconut na Redditu<br />
<a href="https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/">https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/</a>
</li>

<li>Repositář na GitHubu<br />
<a href="https://github.com/evhub/coconut">https://github.com/evhub/coconut</a>
</li>

<li>Object-Oriented Programming — The Trillion Dollar Disaster<br />
<a href="https://betterprogramming.pub/object-oriented-programming-the-trillion-dollar-disaster-92a4b666c7c7">https://betterprogramming.pub/object-oriented-programming-the-trillion-dollar-disaster-92a4b666c7c7</a>
</li>

<li>Goodbye, Object Oriented Programming<br />
<a href="https://cscalfani.medium.com/goodbye-object-oriented-programming-a59cda4c0e53">https://cscalfani.medium.com/goodbye-object-oriented-programming-a59cda4c0e53</a>
</li>

<li>So You Want to be a Functional Programmer (Part 1)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536</a>
</li>

<li>So You Want to be a Functional Programmer (Part 2)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a</a>
</li>

<li>So You Want to be a Functional Programmer (Part 3)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7</a>
</li>

<li>So You Want to be a Functional Programmer (Part 4)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49</a>
</li>

<li>So You Want to be a Functional Programmer (Part 5)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a</a>
</li>

<li>So You Want to be a Functional Programmer (Part 6)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-6-db502830403">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-6-db502830403</a>
</li>

<li>Why Programmers Need Limits<br />
<a href="https://cscalfani.medium.com/why-programmers-need-limits-3d96e1a0a6db">https://cscalfani.medium.com/why-programmers-need-limits-3d96e1a0a6db</a>
</li>

<li>Infographic showing code complexity vs developer experience<br />
<a href="https://twitter.com/rossipedia/status/1580639227313676288">https://twitter.com/rossipedia/status/1580639227313676288</a>
</li>

<li>Python's reduce(): From Functional to Pythonic Style<br />
<a href="https://realpython.com/python-reduce-function/">https://realpython.com/python-reduce-function/</a>
</li>

<li>What is the problem with reduce()?<br />
<a href="https://stackoverflow.com/questions/181543/what-is-the-problem-with-reduce">https://stackoverflow.com/questions/181543/what-is-the-problem-with-reduce</a>
</li>

<li>The fate of reduce() in Python 3000<br />
<a href="https://www.artima.com/weblogs/viewpost.jsp?thread=98196">https://www.artima.com/weblogs/viewpost.jsp?thread=98196</a>
</li>

<li>Reading 16: Map, Filter, Reduce<br />
<a href="http://web.mit.edu/6.031/www/sp22/classes/16-map-filter-reduce/">http://web.mit.edu/6.031/www/sp22/classes/16-map-filter-reduce/</a>
</li>

<li>Currying<br />
<a href="https://sw-samuraj.cz/2011/02/currying/">https://sw-samuraj.cz/2011/02/currying/</a>
</li>

<li>Používání funkcí v&nbsp;F#<br />
<a href="https://docs.microsoft.com/cs-cz/dotnet/fsharp/tutorials/using-functions">https://docs.microsoft.com/cs-cz/dotnet/fsharp/tutorials/using-functions</a>
</li>

<li>Funkce vyššího řádu<br />
<a href="http://naucte-se.haskell.cz/funkce-vyssiho-radu">http://naucte-se.haskell.cz/funkce-vyssiho-radu</a>
</li>

<li>Currying (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Currying">https://en.wikipedia.org/wiki/Currying</a>
</li>

<li>Currying (Haskell wiki)<br />
<a href="https://wiki.haskell.org/Currying">https://wiki.haskell.org/Currying</a>
</li>

<li>Haskell Curry<br />
<a href="https://en.wikipedia.org/wiki/Haskell_Curry">https://en.wikipedia.org/wiki/Haskell_Curry</a>
</li>

<li>Moses Schönfinkel<br />
<a href="https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel">https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel</a>
</li>

<li>ML &ndash; funkcionální jazyk s revolučním typovým systémem<br />
<a href="https://www.root.cz/clanky/ml-funkcionalni-jazyk-s-revolucnim-typovym-systemem/">https://www.root.cz/clanky/ml-funkcionalni-jazyk-s-revolucnim-typovym-systemem/</a>
</li>

<li>Funkce a typový systém programovacího jazyka ML<br />
<a href="https://www.root.cz/clanky/funkce-a-typovy-system-programovaciho-jazyka-ml/">https://www.root.cz/clanky/funkce-a-typovy-system-programovaciho-jazyka-ml/</a>
</li>

<li>Curryfikace (currying), výjimky a vlastní operátory v jazyku ML<br />
<a href="https://www.root.cz/clanky/curryfikace-currying-vyjimky-a-vlastni-operatory-v-jazyku-ml/">https://www.root.cz/clanky/curryfikace-currying-vyjimky-a-vlastni-operatory-v-jazyku-ml/</a>
</li>

<li>Primer on Python Decorators<br />
<a href="https://realpython.com/primer-on-python-decorators/">https://realpython.com/primer-on-python-decorators/</a>
</li>

<li>Python Decorators<br />
<a href="https://www.programiz.com/python-programming/decorator">https://www.programiz.com/python-programming/decorator</a>
</li>

<li>PythonDecorators (Python Wiki)<br />
<a href="https://wiki.python.org/moin/PythonDecorators">https://wiki.python.org/moin/PythonDecorators</a>
</li>

<li>Funcy na GitHubu<br />
<a href="https://github.com/suor/funcy/">https://github.com/suor/funcy/</a>
</li>

<li>Welcome to funcy documentation!<br />
<a href="https://funcy.readthedocs.io/en/stable/">https://funcy.readthedocs.io/en/stable/</a>
</li>

<li>Funcy cheatsheet<br />
<a href="https://funcy.readthedocs.io/en/stable/cheatsheet.html">https://funcy.readthedocs.io/en/stable/cheatsheet.html</a>
</li>

<li>PyToolz API Documentation<br />
<a href="https://toolz.readthedocs.io/en/latest/index.html">https://toolz.readthedocs.io/en/latest/index.html</a>
</li>

<li>Toolz (PyToolz) na GitHubu<br />
<a href="https://github.com/pytoolz/toolz">https://github.com/pytoolz/toolz</a>
</li>

<li>Fn.py: enjoy FP in Python<br />
<a href="https://github.com/kachayev/fn.py">https://github.com/kachayev/fn.py</a>
</li>

<li>Funcy na PyPi<br />
<a href="https://pypi.org/project/funcy/">https://pypi.org/project/funcy/</a>
</li>

<li>Underscore aneb další knihovna pro funkcionální programování v&nbsp;JavaScriptu<br />
<a href="https://www.root.cz/clanky/underscore-aneb-dalsi-knihovna-pro-funkcionalni-programovani-v-javascriptu/">https://www.root.cz/clanky/underscore-aneb-dalsi-knihovna-pro-funkcionalni-programovani-v-javascriptu/</a>
</li>

<li>Funkce vyššího řádu v&nbsp;knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Awesome functional Python<br />
<a href="https://github.com/sfermigier/awesome-functional-python">https://github.com/sfermigier/awesome-functional-python</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

