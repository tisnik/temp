<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Použití standardní knihovny Javy v Jythonu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Použití standardní knihovny Javy v Jythonu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhém článku o projektu Jython si ukážeme, jakým způsobem je možné v&nbsp;Jythonu používat rozhraní a třídy ze standardní knihovny jazyka Java. Uvidíme, že &ndash; možná poněkud paradoxně &ndash; je použití javovských knihoven snazší v&nbsp;Jythonu než v&nbsp;samotném programovacím jazyku Java.</p><!--more-->



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Použití standardní knihovny Javy v&nbsp;Jythonu</a></p>
<p><a href="#k02">*** 2. Použití tříd a rozhraní naprogramovaných v&nbsp;Javě z&nbsp;Jythonu</a></p>
<p><a href="#k03">*** 3. Zjednodušené volání getterů a setterů</a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Použití standardní knihovny Javy v&nbsp;Jythonu</h2>

<p><a href="https://mojefedora.cz/jython-aneb-ponekud-opomijeny-programovaci-jazyk-pro-virtualni-stroj-javy/">V&nbsp;prvním článku</a> jsme se seznámili s&nbsp;programovacími jazyky vytvořenými pro běh nad virtuálním strojem jazyka Javy (<i>JVM &ndash; Java Virtual Machine</i>). Připomeňme si, že se jedná například o jazyky <a href="https://mojefedora.cz/jython-aneb-ponekud-opomijeny-programovaci-jazyk-pro-virtualni-stroj-javy/#k03">Scala</a>, <a href="https://mojefedora.cz/jython-aneb-ponekud-opomijeny-programovaci-jazyk-pro-virtualni-stroj-javy/#k04">Clojure</a>, <a href="https://mojefedora.cz/jython-aneb-ponekud-opomijeny-programovaci-jazyk-pro-virtualni-stroj-javy/#k05">Groovy</a>, Ruby (<a href="https://mojefedora.cz/jython-aneb-ponekud-opomijeny-programovaci-jazyk-pro-virtualni-stroj-javy/#k06">JRuby</a>), Python (<a href="https://mojefedora.cz/jython-aneb-ponekud-opomijeny-programovaci-jazyk-pro-virtualni-stroj-javy/#k06">Jython</a>) a v&nbsp;neposlední řadě taktéž <a href="https://mojefedora.cz/jython-aneb-ponekud-opomijeny-programovaci-jazyk-pro-virtualni-stroj-javy/#k06">JavaScript</a> (Rhino a Nashorn) i relativně nový jazyk <a href="https://mojefedora.cz/jython-aneb-ponekud-opomijeny-programovaci-jazyk-pro-virtualni-stroj-javy/#k07">Kotlin</a>. Taktéž jsme si ukázali instalaci Jythonu, spuštění interaktivní smyčky REPL, základní knihovny dodávané společně s&nbsp;Jythonem a na závěr byl uveden benchmark měřící rychlost provádění výpočtů s&nbsp;typy <i>float</i> a <i>complex</i>.</p>

<p>Dnes si řekneme, jakým způsobem je možné ve skriptech psaných v&nbsp;Jythonu používat rozhraní a třídy nabízené <a href="https://en.wikipedia.org/wiki/Java_Platform,_Standard_Edition#General_purpose_packages">základní knihovnou programovacího jazyka Java</a>, která je dnes již <a href="https://docs.oracle.com/javase/9/docs/api/overview-summary.html">velmi rozsáhlá</a> (odkaz vede na knihovnu pro JDK 1.9). Zajímavý a na první pohled možná poněkud paradoxní je fakt, že použití standardní knihovny Javy (a vlastně i mnoha dalších javovských knihoven) je z&nbsp;Jythonu mnohem jednodušší, než je tomu ve vlastním jazyku Java. To ostatně uvidíme i na demonstračních příkladech, jejichž verze psané v&nbsp;Jythonu jsou kratší a přehlednější, než varianty vyvinuté přímo v&nbsp;programovacím jazyku Java. Jython je v&nbsp;tomto ohledu porovnatelný především s&nbsp;jazykem Groovy a v&nbsp;obecnějším pohledu i se Scalou a Kotlinem (i když typový systém těchto jazyků je odlišný).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Použití tříd a rozhraní naprogramovaných v&nbsp;Javě z&nbsp;Jythonu</h2>

<p>Již <a href="https://mojefedora.cz/jython-aneb-ponekud-opomijeny-programovaci-jazyk-pro-virtualni-stroj-javy/">v&nbsp;předchozím článku</a> jsme se seznámili se základními způsoby komunikace mezi skripty psanými v&nbsp;Jythonu a třídami popř.&nbsp;rozhraními vytvořenými v&nbsp;Javě (včetně standardní knihovny Javy). Připomeňme si ve stručnosti, jak vlastně vypadá konstrukce objektu daného typu (třídy). V&nbsp;programovacím jazyku Java vypadá programový kód pro vytvoření nového objektu přibližně takto:</p>

<pre>
List l = new ArrayList();
</pre>

<p>Naproti tomu v&nbsp;Jythonu je situace poněkud jednodušší a především přehlednější, a to díky jeho dynamickému typovému systému. Navíc není nutné explicitně zapisovat operátor <strong>new</strong>, protože volání konstruktoru vypadá v&nbsp;Pythonu odlišně &ndash; zapisuje se podobně jako volání funkce, ovšem namísto jména funkce se použije jméno třídy (popř.&nbsp;rozhraní):</p>

<pre>
l = ArrayList()
</pre>

<p>Poznámka: třídu je samozřejmě nutné nejdříve naimportovat:</p>

<pre>
from java.util import ArrayList
</pre>

<p>Typ objektu, resp.&nbsp;přesněji řečeno typ hodnoty, je uložen společně s&nbsp;objektem/hodnotou referencovanou v&nbsp;proměnné <strong>l</strong>. Můžeme se o tom snadno přesvědčit (například v&nbsp;interaktivní smyčce Jythonu):</p>

<pre>
$ <strong>type(l)</strong>
&nbsp;
&lt;type 'java.util.ArrayList'&gt;
</pre>

<p>Ve chvíli, kdy je instance třídy (tj.&nbsp;objekt) vytvořen, můžeme volat jeho metody popř.&nbsp;přistupovat k&nbsp;jeho atributům. Opět si to ukažme na příkladu:</p>

<pre>
&gt;&gt;&gt; <strong>l.append(1)</strong>
&gt;&gt;&gt; <strong>l.size()</strong>
1
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zjednodušené volání getterů a setterů</h2>

<p>Možnosti Jythonu jdou ovšem ještě dále, než je pouhá konstrukce objektů, volání jejich metod a přístup k&nbsp;atributům objektů. Pokud totiž třída obsahuje gettery a settery, tj.&nbsp;metody určené pro zjištění stavu popř.&nbsp;pro změnu stavu objektu, je možné gettery a settery volat nepřímo &ndash; přístupem (čtením či zápisem) do &bdquo;kvaziatributu&ldquo;, jehož jméno je odvozeno ze jména příslušného getteru a setteru. Ukažme si to opět na příkladu. Mějme třídu nazvanou <strong>CLS</strong> s&nbsp;getterem pojmenovaným <strong>getValue</strong> a setterem pojmenovaným <strong>setValue</strong>:</p>

<pre>
public class CLS {
    int v;

    public void setValue(int value) {
        this.v = value;
    }

    public int getValue() {
        return this.v;
    }
}
</pre>

<p>Ve chvíli, kdy si v&nbsp;Jythonu vytvoříme instanci této třídy, například do proměnné <strong>c</strong>, můžeme samozřejmě přímo volat getter a setter. Vše si ověříme v&nbsp;interaktivní smyčce REPL:</p>

<pre>
$ <strong>java -jar jython-standalone-2.7.0.jar </strong>
Jython 2.7.0 (default:9987c746f838, Apr 29 2015, 02:25:11) 
[OpenJDK 64-Bit Server VM (Oracle Corporation)] on java1.7.0_79
Type "help", "copyright", "credits" or "license" for more information.
&nbsp;
&gt;&gt;&gt; <strong>import CLS</strong>
&gt;&gt;&gt; <strong>c=CLS()</strong>
&gt;&gt;&gt; <strong>c.setValue(42)</strong>
&gt;&gt;&gt; <strong>c.getValue()</strong>
42
</pre>

<p>Popř.&nbsp;můžeme použít zkráceného zápisu, v&nbsp;němž se namísto explicitního volání getterů a setterů čte či zapisuje kvaziatribut, jehož jméno je odvozeno od názvů getterů a setterů:</p>

<pre>
&gt;&gt;&gt; <strong>c.value</strong>
42
&gt;&gt;&gt; <strong>c.value=6502</strong>
&gt;&gt;&gt; <strong>c.value</strong>
6502
</pre>

<pre>
&gt;&gt;&gt; <strong>f2=File("test")</strong>
&nbsp;
&gt;&gt;&gt; <strong>f2.createNewFile()</strong>
True
&nbsp;
&gt;&gt;&gt; <strong>f2.setExecutable(True)</strong>
True
</pre>

<pre>
&gt;&gt;&gt; <strong>f3=File("test2")</strong>
&nbsp;
&gt;&gt;&gt; <strong>f3.createNewFile()</strong>
True
&nbsp;
&gt;&gt;&gt; <strong>f3.executable=True</strong>
True
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
&gt;&gt;&gt; <strong>from java.io import File</strong>
&nbsp;
&gt;&gt;&gt; <strong>f1=File(".")</strong>
</pre>

<pre>
&gt;&gt;&gt; <strong>f1.isFile()</strong>
False
&gt;&gt;&gt; <strong>f1.isDirectory()</strong>
True
</pre>

<pre>
&gt;&gt;&gt; <strong>f1.file</strong>
False
&gt;&gt;&gt; <strong>f1.directory</strong>
True
</pre>

<pre>
&gt;&gt;&gt; <strong>f1.file=False</strong>
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: read-only attr: file
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p>Samozřejmě nezapomeneme ani na praktičtější příklady. Nejprve si vyzkoušíme použití getterů deklarovaných ve třídě <a href="https://docs.oracle.com/javase/7/docs/api/java/awt/Color.html">java.awt.Color</a>:</p>

<pre>
</pre>

<p>Ovšem ne vždy je situace tak snadná. Může totiž dojít k&nbsp;situaci, kdy nějaká třída obsahuje getter/setter a současně i viditelný atribut stejného jména. V&nbsp;takovém případě dojde k&nbsp;problémům, které si můžeme ukázat:</p>

<pre>
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Další série benchmarků</h2>

<p>Na závěr dnešního článku si opět ukážeme několik benchmarků, protože téma (ne)efektivity Jythonu v&nbsp;porovnání s&nbsp;dalšími programovacími jazyky, resp.&nbsp;přesněji řečeno s&nbsp;dalšími interpretry Pythonu, se neustále diskutuje a rychlost popř.&nbsp;pomalost Jythonu může vést k&nbsp;tomu, že se tento interpret nebude moci pro konkrétní typ aplikace použít. Připomeňme si, že minule jsme si ukázali dva benchmarky, které byly zaměřeny především na rychlost výpočtů s&nbsp;hodnotami typu <i>float</i> a <i>complex</i>. Výsledky prvního benchmarku (<a href="https://github.com/tisnik/jython-examples/tree/master/benchmark1">výpočtu Mandelbrotovy množiny</a>) vypadají následovně:</p>

<table style="text-align:right">
<tr><th>#</th><th>x-res</th><th>y-res</th><th>Jython (s)</th><th>Python 2 (s)</th><th>Python 3 (s)</th></tr>
<tr><td>1</td><td>16</td><td>16</td><td>1.79</td><td>0.01</td><td>0.02</td></tr>
<tr><td>2</td><td>24</td><td>24</td><td>1.79</td><td>0.01</td><td>0.02</td></tr>
<tr><td>3</td><td>32</td><td>32</td><td>1.84</td><td>0.02</td><td>0.02</td></tr>
<tr><td>4</td><td>48</td><td>48</td><td>2.11</td><td>0.03</td><td>0.03</td></tr>
<tr><td>5</td><td>64</td><td>64</td><td>2.01</td><td>0.04</td><td>0.05</td></tr>
<tr><td>6</td><td>96</td><td>96</td><td>2.16</td><td>0.08</td><td>0.09</td></tr>
<tr><td>7</td><td>128</td><td>128</td><td>2.24</td><td>0.15</td><td>0.15</td></tr>
<tr><td>8</td><td>192</td><td>192</td><td>2.43</td><td>0.32</td><td>0.33</td></tr>
<tr><td>9</td><td>256</td><td>256</td><td>2.81</td><td>0.57</td><td>0.58</td></tr>
<tr><td>10</td><td>384</td><td>384</td><td>3.87</td><td>1.25</td><td>1.29</td></tr>
<tr><td>11</td><td>512</td><td>512</td><td>5.05</td><td>2.27</td><td>2.28</td></tr>
<tr><td>12</td><td>768</td><td>768</td><td>8.61</td><td>5.07</td><td>5.21</td></tr>
<tr><td>13</td><td>1024</td><td>1024</td><td>13.22</td><td>9.00</td><td>9.10</td></tr>
<tr><td>14</td><td>1536</td><td>1536</td><td>28.15</td><td>20.73</td><td>21.24</td></tr>
<tr><td>15</td><td>2048</td><td>2048</td><td>50.03</td><td>36.11</td><td>38.24</td></tr>
<tr><td>16</td><td>3072</td><td>3072</td><td>100.78</td><td>81.93</td><td>84.02</td></tr>
<tr><td>17</td><td>4096</td><td>4096</td><td>179.21</td><td>144.45</td><td>148.44</td></tr>
</table>

<a href="https://mojefedora.cz/wp-content/uploads/2018/04/08_benchmark1.png"><img class="alignnone size-thumbnail wp-image-9932" src="https://mojefedora.cz/wp-content/uploads/2018/04/08_benchmark1-292x254.png" alt="" width="292" height="254" /></a>
<p><i>Obrázek 1: Výsledky prvního benchmarku prezentovaného minule vynesené do grafu.</i></p>

<p>Z&nbsp;výsledků <a href="">druhého benchmarku</a> je patrné, že je Jython při práci s&nbsp;komplexními čísly výrazně pomalejší, než nativní CPython 2.x i CPython 3.x:</p>

<table style="text-align:right">
<tr><th>#</th><th>x-res</th><th>y-res</th><th>Jython (s)</th><th>Python 2 (s)</th><th>Python 3 (s)</th></tr>
<tr><td>1 </td><td>16</td><td>16</td><td>1.77</td><td>0.01</td><td>0.02</td></tr>
<tr><td>2 </td><td>24</td><td>24</td><td>1.99</td><td>0.01</td><td>0.02</td></tr>
<tr><td>3 </td><td>32</td><td>32</td><td>1.80</td><td>0.02</td><td>0.03</td></tr>
<tr><td>4 </td><td>48</td><td>48</td><td>1.90</td><td>0.03</td><td>0.04</td></tr>
<tr><td>5 </td><td>64</td><td>64</td><td>1.99</td><td>0.04</td><td>0.06</td></tr>
<tr><td>6 </td><td>96</td><td>96</td><td>2.20</td><td>0.08</td><td>0.11</td></tr>
<tr><td>7 </td><td>128</td><td>128</td><td>2.70</td><td>0.14</td><td>0.18</td></tr>
<tr><td>8 </td><td>192</td><td>192</td><td>3.15</td><td>0.32</td><td>0.43</td></tr>
<tr><td>9 </td><td>256</td><td>256</td><td>4.13</td><td>0.56</td><td>0.77</td></tr>
<tr><td>10</td><td>384</td><td>384</td><td>6.61</td><td>1.25</td><td>1.60</td></tr>
<tr><td>11</td><td>512</td><td>512</td><td>10.10</td><td>2.22</td><td>2.71</td></tr>
<tr><td>12</td><td>768</td><td>768</td><td>20.59</td><td>5.12</td><td>6.37</td></tr>
<tr><td>13</td><td>1024</td><td>1024</td><td>34.45</td><td>9.09</td><td>10.78</td></tr>
<tr><td>14</td><td>1536</td><td>1536</td><td>77.73</td><td>20.33</td><td>24.25</td></tr>
<tr><td>15</td><td>2048</td><td>2048</td><td>134.13</td><td>35.95</td><td>43.61</td></tr>
<tr><td>16</td><td>3072</td><td>3072</td><td>294.04</td><td>81.64</td><td>99.77</td></tr>
<tr><td>17</td><td>4096</td><td>4096</td><td>523.57</td><td>148.13</td><td>176.97</td></tr>
</table>

<a href="https://mojefedora.cz/wp-content/uploads/2018/04/09_benchmark2.png"><img class="alignnone size-thumbnail wp-image-9933" src="https://mojefedora.cz/wp-content/uploads/2018/04/09_benchmark2-333x254.png" alt="" width="333" height="254" /></a>
<p><i>Obrázek 2: Výsledky druhého benchmarku vynesené do grafu.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady, které jsme si dnes ukázali, který naleznete
na adrese <a
href="https://github.com/tisnik/jython-examples">https://github.com/tisnik/jython-examples</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je nutné mít
v&nbsp;aktuálním adresáři symlink na Java archiv
<strong>jython-standalone-2.7.0.jar</strong>):</p>

<table>
<tr><th>Zdrojový kód/skript</th><th>Adresa</th></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránka projektu Jython<br />
<a href="http://www.jython.org/">http://www.jython.org/</a>
</li>

<li>Jython (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Jython">https://en.wikipedia.org/wiki/Jython</a>
</li>

<li>Scripting for the Java Platform (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Scripting_for_the_Java_Platform">https://en.wikipedia.org/wiki/Scripting_for_the_Java_Platform</a>
</li>

<li>JSR 223: Scripting for the Java<sup>TM</sup> Platform<br />
<a href="https://jcp.org/en/jsr/detail?id=223">https://jcp.org/en/jsr/detail?id=223</a>
</li>

<li>List of JVM languages<br />
<a href="https://en.wikipedia.org/wiki/List_of_JVM_languages">https://en.wikipedia.org/wiki/List_of_JVM_languages</a>
</li>

<li>Stránka programovacího jazyka Java<br />
<a href="https://www.oracle.com/java/index.html">https://www.oracle.com/java/index.html</a>
</li>

<li>Stránka programovacího jazyka Clojure<br />
<a href="http://clojure.org">http://clojure.org</a>
</li>

<li>Stránka programovacího jazyka Groovy<br />
<a href="http://groovy-lang.org/">http://groovy-lang.org/</a>
</li>

<li>Stránka programovacího jazyka JRuby<br />
<a href="http://jruby.org/">http://jruby.org/</a>
</li>

<li>Stránka programovacího jazyka Kotlin<br />
<a href="http://kotlinlang.org/">http://kotlinlang.org/</a>
</li>

<li>Stránka programovacího jazyka Scala<br />
<a href="https://www.scala-lang.org/">https://www.scala-lang.org/</a>
</li>

<li>Projekt Rhino<br />
<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino">https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino</a>
</li>

<li>Clojure (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Clojure">https://en.wikipedia.org/wiki/Clojure</a>
</li>

<li>Groovy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Groovy_%28programming_language%29">https://en.wikipedia.org/wiki/Groovy_%28programming_language%29</a>
</li>

<li>JRuby (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/JRuby">https://en.wikipedia.org/wiki/JRuby</a>
</li>

<li>Kotlin (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kotlin_%28programming_language%29">https://en.wikipedia.org/wiki/Kotlin_%28programming_language%29</a>
</li>

<li>Scala (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Scala_%28programming_language%29">https://en.wikipedia.org/wiki/Scala_%28programming_language%29</a>
</li>

<li>Python Interpreters Benchmarks<br />
<a href="https://pybenchmarks.org/u64q/jython.php">https://pybenchmarks.org/u64q/jython.php</a>
</li>

<li>Apache Kafka Producer Benchmarks - Java vs. Jython vs. Python<br />
<a href="http://mrafayaleem.com/2016/03/31/apache-kafka-producer-benchmarks/">http://mrafayaleem.com/2016/03/31/apache-kafka-producer-benchmarks/</a>
</li>

<li>What is Jython and is it useful at all? (Stack Overflow)<br />
<a href="https://stackoverflow.com/questions/1859865/what-is-jython-and-is-it-useful-at-all">https://stackoverflow.com/questions/1859865/what-is-jython-and-is-it-useful-at-all</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

