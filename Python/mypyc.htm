<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Rychlost Pythonu 3.11 v porovnání s JIT a AOT překladači Pythonu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Rychlost Pythonu 3.11 v porovnání s JIT a AOT překladači Pythonu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Rychlost Pythonu 3.11 v&nbsp;porovnání s&nbsp;JIT a AOT překladači Pythonu</a></p>
<p><a href="#k02">*** 2. JIT a AOT překladače Pythonu</a></p>
<p><a href="#k03">*** 3. AOT překladač <i>mypyc</i></a></p>
<p><a href="#k04">*** 4. Příklad použití překladače <i>mypyc</i></a></p>
<p><a href="#k05">*** 5. Zjištění, které části kódu bylo možné přeložit optimálním způsobem</a></p>
<p><a href="#k06">*** 6. Doplnění všech typových informací</a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. Zdrojové kódy benchmarků použitých v&nbsp;dnešním článku</a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady pro nástroj Numba</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady pro nástroj Mypy</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Rychlost Pythonu 3.11 v&nbsp;porovnání s&nbsp;JIT a AOT překladači Pythonu</h2>

<p><a href="https://www.root.cz/n/python/">Programovací jazyk Python</a> zajisté není zapotřebí čtenářům Roota podrobně představovat. V&nbsp;současnosti se jedná o jeden z&nbsp;nejpoužívanějších a současně i nejpopulárnějších (což ani zdaleka není totéž) programovacích jazyků a používá se jak pro psaní jednorázových skriptů, tak i mnohdy velmi rozsáhlých aplikací. Jednou z&nbsp;nevýhod Pythonu byl relativně pomalý běh aplikací psaných v&nbsp;tomto jazyku. Řekněme si to na rovinu: z&nbsp;mainstreamových jazyků vycházel klasický CPython většinou jako nejpomalejší technologie. Ovšem v&nbsp;současnosti již není situace vůbec špatná, protože existují JIT (<i>just in time</i>) i AOT (<i>ahead of time</i>) překladače Pythonu. A navíc i klasický CPython je neustále vylepšován, přičemž poměrně velký výkonnostní skok se odehrál u Python verze 3.11 a 3.12.</p>

<p>V&nbsp;dnešním článku se přesvědčíme, jak rychlý či naopak pomalý je klasický CPython (verze 3.8 až 3.12) v&nbsp;porovnání s&nbsp;JIT překladačem <i>Numba</i> a taktéž v&nbsp;porovnání s&nbsp;AOT překladačem <i>mypyc</i> (což je nástroj, který je součástí Mypy). JIT překladačem Numba jsme se již na stránkách Roota zabývali, a to konkrétně v&nbsp;článcích <a href="https://www.root.cz/clanky/projekt-numba-aneb-dalsi-pristup-k-prekladu-pythonu-do-nativniho-kodu/">Projekt Numba aneb další přístup k překladu Pythonu do nativního kódu</a> a <a href="https://www.root.cz/clanky/just-in-time-preklad-programu-psanych-v-pythonu-nastrojem-numba/">Just in time překlad programů psaných v Pythonu nástrojem Numba</a>. Nástroj <i>mypy</i> prozatím nebyl popsán, takže se v&nbsp;navazujících kapitolách alespoň ve stručnosti zmíníme o jeho základních vlastnostech. Navážeme přitom na tyto články o Mypy:</p>

<ol>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/</a>
</a>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy (2.část)<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-2-cast/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-2-cast/</a>
</a>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy (3)<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-3/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-3/</a>
</a>

</ol>

<p><div class="rs-tip-major">Poznámka: důvodem, proč se zaměříme na CPython verze 3.8 až 3.12 a nikoli na starší verze Pythonu, je ten, že starší verze již nejsou podporovány &ndash; viz též přehledná tabulka, kterou lze najít na adrese <a href="https://devguide.python.org/versions/">https://devguide.python.org/versions/</a>.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. JIT a AOT překladače Pythonu</h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. AOT překladač <i>mypyc</i></h2>

$ mypyc --help
usage: mypy [-h] [-v] [-V] [more options; see below]
            [-m MODULE] [-p PACKAGE] [-c PROGRAM_TEXT] [files ...]

Mypy is a program that will type check your Python code.

Pass in any files or folders you want to type check. Mypy will
recursively traverse any provided folders to find .py files:

    $ mypy my_program.py my_src_folder

For more information on getting started, see:

- https://mypy.readthedocs.io/en/stable/getting_started.html

For more details on both running mypy and using the flags below, see:


<p><a name="k04"></a></p>
<h2 id="k04">4. Příklad použití překladače <i>mypyc</i></h2>

<pre>
$ <strong>mypyc mandelbrot_5.py</strong>
</pre>

<pre>
running build_ext
building 'mandelbrot_5' extension
creating build/temp.linux-x86_64-cpython-311
creating build/temp.linux-x86_64-cpython-311/build
gcc -Wsign-compare -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNDEBUG -O2 -fexceptions -g -grecord-gcc-switches -pipe -Wall -Werror=format-security -Wp,-U_FORTIFY_SOURCE,-D_FORTIFY_SOURCE=3 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -O2 -fexceptions -g -grecord-gcc-switches -pipe -Wall -Werror=format-security -Wp,-U_FORTIFY_SOURCE,-D_FORTIFY_SOURCE=3 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -O2 -fexceptions -g -grecord-gcc-switches -pipe -Wall -Werror=format-security -Wp,-U_FORTIFY_SOURCE,-D_FORTIFY_SOURCE=3 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -fPIC -I/usr/local/lib64/python3.11/site-packages/mypyc/lib-rt -I/usr/include/python3.11 -c build/__native.c -o build/temp.linux-x86_64-cpython-311/build/__native.o -O3 -g1 -Werror -Wno-unused-function -Wno-unused-label -Wno-unreachable-code -Wno-unused-variable -Wno-unused-command-line-argument -Wno-unknown-warning-option -Wno-unused-but-set-variable -Wno-ignored-optimization-argument -Wno-cpp
creating build/lib.linux-x86_64-cpython-311
gcc -shared -Wl,-z,relro -Wl,--as-needed -Wl,-z,now -Wl,--build-id=sha1 -Wl,-z,relro -Wl,--as-needed -Wl,-z,now -Wl,--build-id=sha1 build/temp.linux-x86_64-cpython-311/build/__native.o -L/usr/lib64 -o build/lib.linux-x86_64-cpython-311/mandelbrot_5.cpython-311-x86_64-linux-gnu.so
copying build/lib.linux-x86_64-cpython-311/mandelbrot_5.cpython-311-x86_64-linux-gnu.so ->
</pre>

$ tree build
build
├── lib.linux-x86_64-cpython-311
│   ├── mandelbrot_5.cpython-311-x86_64-linux-gnu.so
│   └── mandelbrot_6.cpython-311-x86_64-linux-gnu.so
├── __native.c
├── __native.h
├── __native_internal.h
├── ops.txt
├── setup.py
└── temp.linux-x86_64-cpython-311
    └── build
        └── __native.o

4 directories, 8 files



<p><a name="k05"></a></p>
<h2 id="k05">5. Zjištění, které části kódu bylo možné přeložit optimálním způsobem</h2>

$ mypyc --html-report html mandelbrot_5.py

Mypy Type Check Coverage Summary
================================

Script: index

+--------------+-------------------+--------+
| Module       | Imprecision       | Lines  |
+--------------+-------------------+--------+
| mandelbrot_5 |  63.41% imprecise | 41 LOC |
+--------------+-------------------+--------+
| Total        |  63.41% imprecise | 41 LOC |
+--------------+-------------------+--------+


<p><a name="k06"></a></p>
<h2 id="k06">6. Doplnění všech typových informací</h2>

Mypy Type Check Coverage Summary
================================

Script: index

+--------------+-------------------+--------+
| Module       | Imprecision       | Lines  |
+--------------+-------------------+--------+
| mandelbrot_6 |   0.00% imprecise | 44 LOC |
+--------------+-------------------+--------+
| Total        |   0.00% imprecise | 44 LOC |
+--------------+-------------------+--------+



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. Zdrojové kódy benchmarků použitých v&nbsp;dnešním článku</h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady pro nástroj Numba</h2>

<p>Všechny demonstrační příklad ukazující vlastnosti nástroje Numba naleznete
opět v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>mandelbrot-v1</td><td>benchmark, v&nbsp;němž se nepoužívají anotace projektu Numba</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/mandelbrot-v1/">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/mandelbrot-v1/</a></td></tr>
<tr><td> 2</td><td>mandelbrot-v2</td><td>použití anotace <strong>@jit</strong> ve funkci, v&nbsp;níž se provádí mnoho výpočtů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/mandelbrot-v2/">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/mandelbrot-v2/</a></td></tr>
<tr><td> 3</td><td>mandelbrot-v3</td><td>volání zjednodušených variant funkce <strong>print</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/mandelbrot-v3/">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/mandelbrot-v3/</a></td></tr>
<tr><td> 4</td><td>mandelbrot-v4</td><td>použití anotace <strong>@jit</strong> s&nbsp;parametrem <strong>nopython</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/mandelbrot-v4/">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/mandelbrot-v4/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>sum1.py</td><td>funkce pro výpočet součtu dvou prvků, které je volána s&nbsp;argumenty typu <strong>int64</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum1.py</a></td></tr>
<tr><td> 6</td><td>sum2.py</td><td>funkce pro výpočet součtu dvou prvků, které je volána s&nbsp;argumenty typu <strong>double/float64</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum2.py</a></td></tr>
<tr><td> 7</td><td>sum3.py</td><td>funkce pro výpočet součtu dvou prvků volaná s&nbsp;argumenty různých typů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum3.py</a></td></tr>
<tr><td> 8</td><td>sum4.py</td><td>součet dvou polí z&nbsp;balíčku <i>Numpy</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum4.py</a></td></tr>
<tr><td> 9</td><td>sum5.py</td><td>porovnání různých variant součtu dvou polí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum5.py</a></td></tr>
<tr><td>10</td><td>sum6.py</td><td>dtto, ale pro větší počet volání funkce pro provedení součtu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>sum_array.py</td><td>explicitní zápis součtu všech prvků pole</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum_array.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum_array.py</a></td></tr>
<tr><td>12</td><td>range_loop.py</td><td>využití funkce <strong>range</strong> ve smyčce <strong>for</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/range_loop.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/range_loop.py</a></td></tr>
<tr><td>13</td><td>prange_loop.py</td><td>paralelní varianta funkce <strong>range</strong> ve smyčce <strong>for</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/prange_loop.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/prange_loop.py</a></td></tr>
<tr><td>14</td><td>sum_sqrts1.py</td><td>výpočet prováděný ve smyčce s&nbsp;akumulací výsledku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum_sqrts1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum_sqrts1.py</a></td></tr>
<tr><td>15</td><td>sum_sqrts2.py</td><td>dtto, ovšem provedení v&nbsp;režimu <strong>nopython</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum_sqrts2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum_sqrts2.py</a></td></tr>
<tr><td>16</td><td>sum_sqrts3.py</td><td>zapnutí režimu <i>fast array</i> při výpočtech</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum_sqrts3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numba/sum_sqrts3.py</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady pro nástroj Mypy</h2>

<p>Všechny Pythonovské skripty, které jsme si popsali v&nbsp;článcích o Mypy,
naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je pochopitelně
nutné mít nainstalován balíček <i>mypy</i> společně s&nbsp;Pythonem alespoň
3.7):</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>adder1.py</td><td>funkce <strong>add</strong> bez typových anotací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder1.py</a></td></tr>
<tr><td> 2</td><td>adder2.py</td><td>funkce <strong>add</strong> s&nbsp;typovými anotacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder2.py</a></td></tr>
<tr><td> 3</td><td>adder3.py</td><td>funkce <strong>add</strong> volaná s&nbsp;hodnotami <strong>True</strong> a <strong>False</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder3.py</a></td></tr>
<tr><td> 4</td><td>adder4.py</td><td>funkce <strong>add</strong> akceptující hodnoty typu <strong>bool</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder4.py</a></td></tr>
<tr><td> 5</td><td>adder5.py</td><td>zobrazení typových informací pro funkci bez typových anotací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder5.py</a></td></tr>
<tr><td> 6</td><td>adder6.py</td><td>zobrazení typových informací pro funkci s&nbsp;typovými anotacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>exec_problem_1.py</td><td>funkce <strong>add</strong> s&nbsp;typovými anotacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_1.py</a></td></tr>
<tr><td> 6</td><td>exec_problem_2.py</td><td>korektní detekce volání funkce <strong>add</strong> s&nbsp;nekompatibilními hodnotami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_2.py</a></td></tr>
<tr><td> 7</td><td>exec_problem_3.py</td><td>příkaz použitý v&nbsp;<strong>exec</strong> není statickým analyzátorem zachycen</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>list_type1.py</td><td>typ seznam, s&nbsp;inicializací (bez prvků), pro Python 3.10</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type1.py</a></td></tr>
<tr><td> 9</td><td>list_type2.py</td><td>typ seznam, s&nbsp;inicializací (bez prvků), pro starší verze Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type2.py</a></td></tr>
<tr><td>10</td><td>list_type3.py</td><td>typ seznam, s&nbsp;inicializací (s&nbsp;prvky), pro starší verze Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type3.py</a></td></tr>
<tr><td>11</td><td>list_type4.py</td><td>typ seznam, kontrola použití prvků s&nbsp;nekorektními typy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type4.py</a></td></tr>
<tr><td>12</td><td>list_type5.py</td><td>typ seznam, kontrola použití prvků s&nbsp;korektními typy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type5.py</a></td></tr>
<tr><td>13</td><td>list_type6.py</td><td>typ seznam, kontrola použití prvků s&nbsp;korektními typy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>14</td><td>tuple_type1.py</td><td>typ n-tice (nekorektní specifikace typu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type1.py</a></td></tr>
<tr><td>15</td><td>tuple_type2.py</td><td>typ n-tice (korektní specifikace typu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type2.py</a></td></tr>
<tr><td>16</td><td>tuple_type3.py</td><td>typ n-tice, v&nbsp;níž má každý prvek odlišný typ</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type3.py</a></td></tr>
<tr><td>17</td><td>tuple_type4.py</td><td>typ n-tice, v&nbsp;níž má každý prvek odlišný typ</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>json_check.py</td><td>delší kód v&nbsp;Pythonu bez typových anotací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/json_check.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/json_check.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>Variance1.java</td><td>variance v&nbsp;Javě &ndash; korektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.java">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.java</a></td></tr>
<tr><td>20</td><td>Variance2.java</td><td>variance v&nbsp;Javě &ndash; nekorektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.java">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.java</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>Variance1.py</td><td>variance v&nbsp;Pythonu &ndash; korektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.py</a></td></tr>
<tr><td>22</td><td>Variance2.py</td><td>variance v&nbsp;Pythonu &ndash; nekorektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.py</a></td></tr>
<tr><td>23</td><td>Variance3.py</td><td>variance v&nbsp;Pythonu &ndash; nekorektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance3.py</a></td></tr>
<tr><td>24</td><td>Variance4.py</td><td>použití typu <strong>Sequence</strong> namísto <strong>List</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>25</td><td>view_pyc.py</td><td>jednoduchá prohlížečka souborů .pyc</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/view_pyc.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/view_pyc.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>callable1.py</td><td>funkce s&nbsp;typovými informacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable1.py</a></td></tr>
<tr><td>27</td><td>callable2.py</td><td>variance funkcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable2.py</a></td></tr>
<tr><td>28</td><td>callable3.py</td><td>variance funkcí (nekorektní příklad)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable3.py</a></td></tr>
<tr><td>29</td><td>callable4.py</td><td>korektní řešení problému z&nbsp;kódu <strong>callable3.py</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>30</td><td>dict_type1.py</td><td>slovník bez specifikace informací o typech (homogenní struktura)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type1.py</a></td></tr>
<tr><td>31</td><td>dict_type2.py</td><td>slovník bez specifikace informací o typech (heterogenní struktura)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type2.py</a></td></tr>
<tr><td>32</td><td>dict_type3.py</td><td>typově silný slovník (heterogenní struktura)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type3.py</a></td></tr>
<tr><td>33</td><td>dict_type4.py</td><td>typově silný slovník (homogenní struktura)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type4.py</a></td></tr>
<tr><td>34</td><td>dict_type5.py</td><td>použití typu <strong>Union</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type5.py</a></td></tr>
<tr><td>35</td><td>dict_type6.py</td><td>použití typu <strong>Union</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type6.py</a></td></tr>
<tr><td>36</td><td>dict_type7.py</td><td>použití typu <strong>Optional</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type7.py</a></td></tr>
<tr><td>37</td><td>dict_type8.py</td><td>použití typu <strong>Optional</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type8.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>38</td><td>sprites1.py</td><td>původní kód před refaktoringem a bez typových informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites1.py</a></td></tr>
<tr><td>39</td><td>sprites2.py</td><td>refaktoring kódu <strong>sprites1.py</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites2.py</a></td></tr>
<tr><td>40</td><td>sprites3.py</td><td>přidání typových informací do kódu <strong>sprites2.py</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites3.py</a></td></tr>
<tr><td>41</td><td>sprites4.py</td><td>oprava chyb nalezených v&nbsp;kódu <strong>sprites3.py</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites4.py</a></td></tr>
<tr><td>42</td><td>sprites5.py</td><td>doplnění generických typů pro volbu <strong>--strict</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites5.py</a></td></tr>
<tr><td>43</td><td>sprites6.py</td><td>definice a použití nového datového typu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>44</td><td>reveal_type1.py</td><td>selektivní zjištění typu proměnné či třídy nástrojem Mypy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type1.py</a></td></tr>
<tr><td>45</td><td>reveal_type2.py</td><td>selektivní zjištění typu funkce nástrojem Mypy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type2.py</a></td></tr>
<tr><td>46</td><td>reveal_type3.py</td><td>typová inference</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type3.py</a></td></tr>
<tr><td>47</td><td>reveal_type4.py</td><td>typová inference</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type4.py</a></td></tr>
<tr><td>48</td><td>reveal_type5.py</td><td>explicitní definice typu versus typová inference</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>49</td><td>reveal_locals1.py</td><td>zjištění typů všech lokálních proměnných</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_locals1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_locals1.py</a></td></tr>
<tr><td>50</td><td>reveal_locals2.py</td><td>zjištění typů všech lokálních proměnných</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_locals2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_locals2.py</a></td></tr>
<tr><td>51</td><td>reveal_locals3.py</td><td>zjištění typů všech lokálních proměnných</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_locals3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_locals3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>52</td><td>list_sequence.py</td><td>měnitelné seznamy vs. neměnitelné sekvence</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_sequence.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_sequence.py</a></td></tr>
<tr><td>53</td><td>dict_mapping.py</td><td>měnitelné slovníky vs. neměnitelné mapování</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_mapping.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_mapping.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Python 3.12: More Faster and More Efficient Python<br />
<a href="https://medium.com/@HeCanThink/python-3-12-more-faster-and-more-efficient-python-b636f00b047">https://medium.com/@HeCanThink/python-3-12-more-faster-and-more-efficient-python-b636f00b047</a>
</a>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/</a>
</a>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy (2.část)<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-2-cast/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-2-cast/</a>
</a>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy (3)<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-3/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-3/</a>
</a>

<li>mypy homepage<br />
<a href="https://www.mypy-lang.org/">https://www.mypy-lang.org/</a>
</li>

<li>mypy documentation<br />
<a href="https://mypy.readthedocs.io/en/stable/">https://mypy.readthedocs.io/en/stable/</a>
</li>

<li>Mypy na PyPi Optional static typing for Python<br />
<a href="https://pypi.org/project/mypy/">https://pypi.org/project/mypy/</a>
</li>

<li>5 Reasons Why You Should Use Type Hints In Python<br />
<a href="https://www.youtube.com/watch?v=dgBCEB2jVU0">https://www.youtube.com/watch?v=dgBCEB2jVU0</a>
</li>

<li>Python Typing &ndash; Type Hints &amp; Annotations<br />
<a href="https://www.youtube.com/watch?v=QORvB-_mbZ0">https://www.youtube.com/watch?v=QORvB-_mbZ0</a>
</li>

<li>What Problems Can TypeScript Solve?<br />
<a href="https://www.typescriptlang.org/why-create-typescript">https://www.typescriptlang.org/why-create-typescript</a>
</li>

<li>How to find code that is missing type annotations?<br />
<a href="https://stackoverflow.com/questions/59898490/how-to-find-code-that-is-missing-type-annotations">https://stackoverflow.com/questions/59898490/how-to-find-code-that-is-missing-type-annotations</a>
</li>

<li>Do type annotations in Python enforce static type checking?<br />
<a href="https://stackoverflow.com/questions/54734029/do-type-annotations-in-python-enforce-static-type-checking">https://stackoverflow.com/questions/54734029/do-type-annotations-in-python-enforce-static-type-checking</a>
</li>

<li>Understanding type annotation in Python<br />
<a href="https://blog.logrocket.com/understanding-type-annotation-python/">https://blog.logrocket.com/understanding-type-annotation-python/</a>
</li>

<li>Static type checking with Mypy — Perfect Python<br />
<a href="https://www.youtube.com/watch?v=9gNnhNxra3E">https://www.youtube.com/watch?v=9gNnhNxra3E</a>
</li>

<li>Static Type Checker for Python<br />
<a href="https://github.com/microsoft/pyright">https://github.com/microsoft/pyright</a>
</li>

<li>Differences Between Pyright and Mypy<br />
<a href="https://github.com/microsoft/pyright/blob/main/docs/mypy-comparison.md">https://github.com/microsoft/pyright/blob/main/docs/mypy-comparison.md</a>
</li>

<li>4 Python type checkers to keep your code clean<br />
<a href="https://www.infoworld.com/article/3575079/4-python-type-checkers-to-keep-your-code-clean.html">https://www.infoworld.com/article/3575079/4-python-type-checkers-to-keep-your-code-clean.html</a>
</li>

<li>Pyre: A performant type-checker for Python 3<br />
<a href="https://pyre-check.org/">https://pyre-check.org/</a>
</li>

<li>"Typing the Untyped: Soundness in Gradual Type Systems" by Ben Weissmann<br />
<a href="https://www.youtube.com/watch?v=uJHD2xyv7xo">https://www.youtube.com/watch?v=uJHD2xyv7xo</a>
</li>

<li>Covariance and contravariance (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)">https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)</a>
</li>

<li>Functional Programming: Type Systems<br />
<a href="https://www.youtube.com/watch?v=hy1wjkcIBCU">https://www.youtube.com/watch?v=hy1wjkcIBCU</a>
</li>

<li>A Type System From Scratch – Robert Widmann<br />
<a href="https://www.youtube.com/watch?v=IbjoA5xVUq0">https://www.youtube.com/watch?v=IbjoA5xVUq0</a>
</li>

<li>"Type Systems - The Good, Bad and Ugly" by Paul Snively and Amanda Laucher<br />
<a href="https://www.youtube.com/watch?v=SWTWkYbcWU0">https://www.youtube.com/watch?v=SWTWkYbcWU0</a>
</li>

<li>Type Systems: Covariance, Contravariance, Bivariance, and Invariance explained<br />
<a href="https://medium.com/@thejameskyle/type-systems-covariance-contravariance-bivariance-and-invariance-explained-35f43d1110f8">https://medium.com/@thejameskyle/type-systems-covariance-contravariance-bivariance-and-invariance-explained-35f43d1110f8</a>
</li>

<li>Statická vs. dynamická typová kontrola<br />
<a href="https://www.root.cz/clanky/staticka-dynamicka-typova-kontrola/">https://www.root.cz/clanky/staticka-dynamicka-typova-kontrola/</a>
</li>

<li>Typový systém<br />
<a href="https://cs.wikipedia.org/wiki/Typov%C3%BD_syst%C3%A9m">https://cs.wikipedia.org/wiki/Typov%C3%BD_syst%C3%A9m</a>
</li>

<li>Comparison of programming languages by type system<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_programming_languages_by_type_system">https://en.wikipedia.org/wiki/Comparison_of_programming_languages_by_type_system</a>
</li>

<li>Flow<br />
<a href="https://flow.org/">https://flow.org/</a>
</li>

<li>TypeScript<br />
<a href="https://www.typescriptlang.org/">https://www.typescriptlang.org/</a>
</li>

<li>Sorbet<br />
<a href="https://sorbet.org/">https://sorbet.org/</a>
</li>

<li>Pyright<br />
<a href="https://github.com/microsoft/pyright">https://github.com/microsoft/pyright</a>
</li>

<li>Mypy: Type hints cheat sheet<br />
<a href="https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html">https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html</a>
</li>

<li>PEP 484 – Type Hints<br />
<a href="https://peps.python.org/pep-0484/">https://peps.python.org/pep-0484/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

