<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tisk naformátovaného a obarveného strukturovaného textu na terminál s využitím knihovny Rich</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tisk naformátovaného a obarveného strukturovaného textu na terminál s využitím knihovny Rich</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dnes se seznámíme s knihovnou Rich. Tato knihovna je určena pro použití v programech napsaných v Pythonu a slouží k tisku naformátovaného a obarveného strukturovaného textu na moderní terminály s podporou barev, Unicode a textových stylů. Tato knihovna navíc umožňuje tisk hodnot (objektů) v přehledné podobě.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tisk naformátovaného a obarveného strukturovaného textu na terminál s&nbsp;využitím knihovny Rich</a></p>
<p><a href="#k02">2. Instalace knihovny <strong>rich</strong></a></p>
<p><a href="#k03">3. Vestavěné demo, spuštění tohoto dema na různých terminálech</a></p>
<p><a href="#k04">4. Rozšířená a vylepšená funkce <strong>print</strong></a></p>
<p><a href="#k05">5. Způsoby importu a volání vylepšené funkce <strong>print</strong></a></p>
<p><a href="#k06">6. Logování nabízené knihovnou Rich</a></p>
<p><a href="#k07">7. Tisk všech lokálních proměnných do logů</a></p>
<p><a href="#k08">8. Výstup ve formátu JSON se zvýrazněním syntaxe</a></p>
<p><a href="#k09">9. Tisk všech lokálních proměnných do JSONu</a></p>
<p><a href="#k10">10. Užitečná funkce <strong>inspect</strong></a></p>
<p><a href="#k11">11. Výpis metod objektů funkcí <strong>inspect</strong></a></p>
<p><a href="#k12">12. Výpis interních atributů a metod funkcí <strong>inspect</strong></a></p>
<p><a href="#k13">13. Otestování možností funkce <strong>inspect</strong> na instanci standardní třídy <strong>Queue</strong></a></p>
<p><a href="#k14">14. Veřejné atributy instance třídy <strong>Queue</strong></a></p>
<p><a href="#k15">15. Metody objektu typu <strong>Queue</strong> s&nbsp;krátkým popiskem</a></p>
<p><a href="#k16">16. Výpis privátních metod a atributů objektu typu <strong>Queue</strong></a></p>
<p><a href="#k17">*** 17. Obsah navazujícího článku</a></p>
<p><a href="#k18">18. Již vydané články o tvorbě GUI a TUI v&nbsp;Pythonu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tisk naformátovaného a obarveného strukturovaného textu na terminál s&nbsp;využitím knihovny Rich</h2>

<p>Již mnohokrát jsme se na stránkách <a href="https://www.root.cz">Roota</a>
zabývali problematikou tvorby aplikací s&nbsp;plnohodnotným grafickým
uživatelským rozhraním, které se konkrétně (resp.&nbsp;v&nbsp;největší míře)
týkají článků o grafickém uživatelském rozhraní v&nbsp;Pythonu. Ovšem existuje
relativně velké množství aplikací popř.&nbsp;nástrojů či her, pro které může
být vhodnější použít &bdquo;pouhý&ldquo; textový terminál resp.&nbsp;textovou
konzoli. Příkladem mohou být aplikace, k&nbsp;nimž se přistupuje přes SSH,
systémové nástroje apod. Takové aplikace dělíme do dvou skupin. Do první
skupiny spadají interaktivně či neinteraktivně ovládané aplikace
s&nbsp;příkazovým řádkem. Příkladem takových aplikací mohou být správci balíčků
(<strong>dnf</strong>, <strong>apt-get</strong>, ...), které s&nbsp;uživatelem
interagují pouze několika otázkami typu Y/N. Dalším příkladem je nástroj
<strong>fdisk</strong> se složitějším systémem menu, z&nbsp;nichž se však
položka vybírá svým jménem (a nikoli například pohybem kurzoru).</p>

<img src="https://i.iinfo.cz/images/536/ipython1-1-1.png" class="image-443462" alt="dnf" width="644" height="429" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" >
<p><i>Obrázek 1: Poměrně velké množství aplikací sice využívá rozšířených
možností textových terminálů, ovšem stále se jedná spíše o neinteraktivní
nástroje bez celoobrazovkového přístupu k&nbsp;terminálu. Dobrým příkladem
takových typů aplikací je příkaz <strong>dnf</strong>, který může
v&nbsp;některých případech zobrazit jednoduchou otázku a
&bdquo;interaktivně&ldquo; očekávat odpověď.</i></p>

<p>A do druhé skupiny aplikací určených pro běh v&nbsp;terminálu můžeme zařadit
aplikace s&nbsp;plnohodnotným textovým uživatelským rozhraním neboli <i>TUI
(Text User Interface)</i>. Takových aplikací dnes existuje celá řada. Zmínit
můžeme zejména celoobrazovkové textové editory (pochopitelně včetně <a
href="https://www.root.cz/n/vim/">Vimu</a> a <a
href="https://www.root.cz/n/emacs/">Emacsu</a>), dále Midnight Commander,
nástroj Aptitude, ale i některé hry používající celoobrazovkový textový režim
(<a href="https://github.com/hackndev/0verkill">0verkill</a>, <a
href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-61-cast-angband-adom-doomrl-a-dalsi-zname-roguelike-hry/#k02">Rogue</a>,
<a href="https://www.root.cz/clanky/nethack/">Nethack</a>, <a
href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-61-cast-angband-adom-doomrl-a-dalsi-zname-roguelike-hry/#k05">Angband</a>,
<a
href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-61-cast-angband-adom-doomrl-a-dalsi-zname-roguelike-hry/#k06">DoomRL</a>
atd.). Částečně sem spadá i hra <a
href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-63-cast-dwarf-fortress/">Dwarf
Fortress</a>, která by mohla běžet v&nbsp;terminálu, ale kvůli přenositelnosti
používá vlastní engine založený na zobrazení textů.</p>

<a href="https://www.root.cz/obrazek/116575/"><img src="https://i.iinfo.cz/images/377/games-61-30-prev.png" alt="DoomRL" height="232" width="370" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" ></a>
<p><i>Obrázek 2: DoomRL – úvodní ASCII art použitý v&nbsp;této hře je takřka
dokonalý.</i></p>

<p>Textové uživatelské rozhraní je u některých aplikací volitelné. Dobrým
příkladem takového typu aplikace je <i>GNU Debugger</i>, který buď pracuje
v&nbsp;režimu příkazového řádku, nebo ho lze v&nbsp;případě potřeby přepnout do
režimu s&nbsp;celoobrazovkovým textovým uživatelským rozhraním. I o tvorbě
těchto aplikací jsme se ve stručnosti již zmínili v&nbsp;souvislosti
s&nbsp;balíčky <strong>GNU Readline</strong> a především
<strong>prompt_toolkit</strong>. Odkazy na tyto články jsou obsahem <a
href="#k18">osmnácté kapitoly</a>.</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-8.png" class="image-360855" alt="gnu gdb" height="381" width="566" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" >
<p><i>Obrázek 3: Nástroj GNU Debugger po zobrazení textového uživatelského
rozhraní (TUI) ve chvíli, kdy je nastaven breakpoint na vstupní bod (přesněji
řečeno na první příkaz) ve funkci <strong>main</strong>. Na levém okraji se
zobrazují jak breakpointy, tak i ukazatel na právě prováděný či krokovaný
příkaz.</i></p>

<p><div class="rs-tip-major">Poznámka: termín &bdquo;celoobrazovkový&ldquo;
nemá v&nbsp;kontextu dnešního článku takový význam, že by plocha aplikace
pokryla celou plochu monitoru (jako například při přehrávání videa), ale že
využije plochu terminálu. U reálných textových terminálů (pamatuje si je
někdo?) se skutečně jedná o celou obrazovku, ovšem dnes se naprostá většina
uživatelů setká pouze s&nbsp;emulátorem terminálu, který sám může být zobrazen
v&nbsp;okně a neběží tedy (striktně řečeno) na celé obrazovce (ovšem i tohoto
efektu je možné v&nbsp;případě potřeby dosáhnout).</div></p>

<a href="https://www.root.cz/obrazek/116568/"><img src="https://i.iinfo.cz/images/377/games-61-23-prev.png" alt="Angband" height="232" width="370" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" ></a>
<p><i>Obrázek 4: Hra Angband s&nbsp;textovým uživatelským rozhraním ve verzi
pro Linux – podrobnější charakteristiky hrdiny.</i></p>

<p>U obou dvou výše zmíněných typů aplikací je nutné umět do určité míry
ovládat terminálový výstup, aby například bylo možné smazat znak/řádek,
zvýraznit text změnou jeho stylu, barvy textu, barvy pozadí atd. A u aplikací
s&nbsp;plnohodnotným textovým uživatelským rozhraním je pochopitelně nutné
terminál ovládat do ještě větší míry, aby bylo možné pracovat s&nbsp;okny,
menu, nápovědou a dalšími ovládacími prvky (<i>widgety</i>). Vzhledem
k&nbsp;tomu, že se textové terminály vyvíjejí už velmi dlouho (minimálně od
roku 1965, kdy vznikl první skutečný počítačový terminál <i>IBM 2741</i> jako
náhrada za dálnopisy) jsou rozdílné i jejich možnosti (vlastnosti) i způsob
jejich ovládání (většinou s&nbsp;využitím řídicích kódů, dnes většinou
založených na takzvaných <i>escape sekvencích</i> a několika dalších ASCII
znacích).</p>

<a href="https://i.iinfo.cz/images/357/ibm-4-1.jpg"><img src="https://i.iinfo.cz/images/357/ibm-4-1-prev.jpg" alt="ibm-4" width="370" height="264" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" ></a>
<p><i>Obrázek 5: Část sálového počítače IBM System/360 Model 40 (rok výroby
1964). V&nbsp;pozadí můžeme vidět jednotky s&nbsp;magnetickými pásky (model IBM
2401), ovládací panel je umístěn přímo za slečnou. A slečna sedí u dálnopisu,
tedy přímého předchůdce počítačových terminálů.</i></p>

<p>Samozřejmě jsme mohli v&nbsp;průběhu předchozích desetiletí vidět snahu o
sjednocení ovládání terminálů, která probíhala paralelně s&nbsp;vytvářením
databáze obsahující vlastnosti terminálů (<i>terminfo</i> a <i>termcap</i>).
Existují také knihovny, které programátora dokážou odizolovat od
nízkoúrovňového přístupu k&nbsp;terminálům a jejich řízení s&nbsp;využitím
řídicích kódů. Jedná se především o knihovnu <i>curses</i> a jejího
následovníka <i>ncurses</i> (viz článek <a
href="https://www.root.cz/clanky/psani-aplikaci-pro-terminal-jak-funguje-knihovna-ncurses/">Psaní
aplikací pro terminál: jak funguje knihovna ncurses</a>, popř.&nbsp;o utility
spouštěné z&nbsp;příkazového řádku (<strong>tput</strong>,
<strong>tset</strong>, <strong>reset</strong> atd.).</p>

<a href="https://www.root.cz/obrazek/447796/"><img src="https://i.iinfo.cz/images/428/blessed1-1-prev.png" class="image-447796" alt="&#160;" width="370" height="208"  title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 6: Ovládací prvky vykreslené s&nbsp;využitím knihovny
Blessed-contrib (JavaScript).<br />
Zdroj: <a href="https://github.com/yaronn/blessed-contrib">https://github.com/yaronn/blessed-contrib</a>.</i></p>

<p>Dnes se budeme zabývat knihovnou <i>Rich</i>, která je určena pro Python. Do
jaké kategorie však tato knihovna spadá? Nejedná se v&nbsp;žádném případě o GUI
knihovnu, ovšem současně se nejedná ani o knihovnu pro tvorbu plnohodnotného
textového uživatelského rozhraní (TUI). Rich &bdquo;pouze&ldquo; vylepšuje
výstup naformátovaného textu na moderních terminálech, které (mnohdy) podporují
plné barvy (<i>true color</i>), Unicode atd. A právě v&nbsp;této oblasti je
<i>Rich</i> velmi dobrým pomocníkem (pravděpodobně nejlepším ve své
kategorii).</p>

<p><div class="rs-tip-major">Poznámka: dnes použité demonstrační příklady byly
spuštěny v&nbsp;<strong>xtermu</strong> s&nbsp;nastavením světlého pozadí.
Použité barvy se (podle očekávání) budou lišit ve chvíli, kdy bude použito
tmavé pozadí popřípadě odlišný emulátor terminálu &ndash; to je cena, kterou je
nutné zaplatit (mj.) i za zpětnou kompatibilitu. I z&nbsp;tohoto důvodu jsou
výsledky doplněny o terminál <strong>xfce4-terminal</strong> v&nbsp;jeho
výchozím nastavení s&nbsp;tmavým pozadím.</div></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-27.png" class="image-360874" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 7: Spuštění debuggeru, inicializace laděné aplikace, nastavení
breakpointu a doskok na breakpoint.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace knihovny <strong>rich</strong></h2>

<p>Knihovna Rich je <a href="https://pypi.org/project/rich/">dostupná na
PyPi</a>, takže je její instalace přímočará. V&nbsp;případě, že využijeme
nástroj <strong>pip</strong> resp.&nbsp;<strong>pip3</strong>, lze provést
instalaci (pro právě přihlášeného uživatele) následujícím způsobem:</p>

<pre>
$ <strong>pip3 install --user rich</strong>
&nbsp;
Collecting rich
  Downloading rich-12.6.0-py3-none-any.whl (237 kB)
     |████████████████████████████████| 237 kB 1.6 MB/s
Collecting typing-extensions&lt;5.0,&gt;=4.0.0; python_version &lt; "3.9"
  Downloading typing_extensions-4.4.0-py3-none-any.whl (26 kB)
Collecting pygments&lt;3.0.0,&gt;=2.6.0
  Downloading Pygments-2.13.0-py3-none-any.whl (1.1 MB)
     |████████████████████████████████| 1.1 MB 2.5 MB/s
Collecting commonmark&lt;0.10.0,&gt;=0.9.0
  Downloading commonmark-0.9.1-py2.py3-none-any.whl (51 kB)
     |████████████████████████████████| 51 kB 3.9 MB/s
Installing collected packages: typing-extensions, pygments, commonmark, rich
Successfully installed commonmark-0.9.1 pygments-2.13.0 rich-12.6.0 typing-extensions-4.4.0
</pre>

<p><div class="rs-tip-major">Poznámka: samozřejmě si můžete
<strong>rich</strong> přidat do souboru <strong>requirements.txt</strong>
a/nebo provést instalaci knihovny z&nbsp;virtuálního prostředí
Pythonu:</div></p>

<pre>
$ <strong>virtualenv -p python3 venv &amp;&amp; source venv/bin/activate &amp;&amp; python3 `which pip3` install -r requirements.txt</strong>
</pre>

<p>To, zda je balíček skutečně dostupný přímo z&nbsp;Pythonu, si můžeme ověřit
velmi snadno:</p>

<pre>
$ <strong>python3</strong>
&nbsp;
Python 3.9.3 (default, Sep 22 2022, 23:10:10) 
[GCC 9.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import rich
&gt;&gt;&gt; help("rich")
&nbsp;
Help on package rich:
&nbsp;
NAME
    rich - Rich text and beautiful formatting in the terminal.
&nbsp;
PACKAGE CONTENTS
    __main__
    _cell_widths
    _emoji_codes
    _emoji_replace
    _export_format
    _extension
    _inspect
...
...
...
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vestavěné demo, spuštění tohoto dema na různých terminálech</h2>

<p>Knihovna <strong>rich</strong> obsahuje i vestavěné demo, které přímo na
ploše terminálu ukáže některé její možnosti. Toto demo lze spustit
následovně:</p>

<pre>
$ <strong>python3 -m rich</strong>
</pre>

<p>Na moderním terminálu, který podporuje plné barvy a Unicode, se zobrazí
tento obsah:</p>

*** image ***
<p><i>Obrázek 8: Demo zobrazené na moderním terminálu.<br />
Zdroj: stránky projektu Rich.</i></p>

<p>Na <i>xtermu</i> se světlým pozadím a podporou jen 88 barev dostaneme tento
výstup:</p>

*** image ***
<p><i>Obrázek 9: Demo zobrazené na xtermu.</i></p>

*** image ***
<p><i>Obrázek 10: Demo zobrazené na xtermu.</i></p>

<p>Naproti tomu <i>xfce4-terminal</i> zobrazí text podobně, jako je tomu na
osmém obrázku:</p>

*** image ***
<p><i>Obrázek 11: Demo zobrazené na xfce4-terminalu.</i></p>

*** image ***
<p><i>Obrázek 12: Demo zobrazené na xfce4-terminalu (povšimněte si, že vlajky
nejsou v&nbsp;použitém fontu obsaženy).</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Rozšířená a vylepšená funkce <strong>print</strong></h2>

<p>Prakticky každý začínající programátor zavolá ve svých prvních programech
standardní funkci <strong>print</strong>:</p>

<pre>
Help on built-in function <strong>print</strong> in module builtins:
&nbsp;
print(...)
    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
&nbsp;
    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.
</pre>

<p>Tato funkce dokáže zobrazit hodnotu jakéhokoli typu, umožňuje přesměrovat
výstup do souboru, volit resp.&nbsp;modifikovat oddělovač záznamů atd. Ovšem
její možnosti při výstupu na terminál (který už dávno není pouhým emulátorem
dálnopisu) jsou limitovány &ndash; vypisované hodnoty jsou vypsány stejnou
barvou a totožným typem písma atd. Ostatně se o tom můžeme snadno přesvědčit
výpisem hodnot několika typů &ndash; seznamu, n-tice, slovníku a dalšího
seznamu se &bdquo;speciálními&ldquo; hodnotami:</p>

<pre>
a_list = [1, 2, 3, 4, 5]
<strong>print(a_list)</strong>
&nbsp;
a_tuple = (1, 2, 3, 4, 5)
<strong>print(a_tuple)</strong>
&nbsp;
a_dict = {'list': a_list, 'tuple': a_tuple, 'nil': None}
<strong>print(a_dict)</strong>
&nbsp;
other_list = [True, False, None]
<strong>print(other_list)</strong>
</pre>

<p>Výsledky:</p>

*** image ***
<p><i>Obrázek 13: Standardní funkce <strong>print</strong> na xtermu.</i></p>

*** image ***
<p><i>Obrázek 14: Standardní funkce <strong>print</strong> na xfce4-terminalu.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Způsoby importu a volání vylepšené funkce <strong>print</strong></h2>

<p>Knihovna Rich nabízí svoji vlastní variantu funkce <strong>print</strong>,
která dokáže zobrazované hodnoty (kromě dalších &bdquo;vychytávek&ldquo;)
barevně zvýraznit, takže výsledky budou vypadat přehledněji:

*** image ***
<p><i>Obrázek 15: Vylepšená funkce <strong>print</strong> na xtermu.</i></p>

*** image ***
<p><i>Obrázek 16: Vylepšená funkce <strong>print</strong> na xfce4-terminalu.</i></p>

<p><div class="rs-tip-major">Poznámka: povšimněte si, jak se jak barvou, tak i
stylem písma odlišují &bdquo;speciální&ldquo; hodnoty.</div></p>

<p>Tuto funkci lze naimportovat například takto &ndash; tím se přepíše vazba na
originální funkci <strong>print</strong>:</p>

<pre>
<strong>from rich import print</strong>
&nbsp;
a_list = [1, 2, 3, 4, 5]
<strong>print(a_list)</strong>
&nbsp;
a_tuple = (1, 2, 3, 4, 5)
<strong>print(a_tuple)</strong>
&nbsp;
a_dict = {'list': a_list, 'tuple': a_tuple, 'nil': None}
<strong>print(a_dict)</strong>
&nbsp;
other_list = [True, False, None]
<strong>print(other_list)</strong>
</pre>

<p>Alternativně je možné provést import stylem, jenž bude vyžadovat její volání
společně s&nbsp;uvedením jmenného aliasu balíčku:</p>

<pre>
<strong>import rich</strong>
&nbsp;
a_list = [1, 2, 3, 4, 5]
<strong>rich.print(a_list)</strong>
&nbsp;
a_tuple = (1, 2, 3, 4, 5)
<strong>rich.print(a_tuple)</strong>
&nbsp;
a_dict = {'list': a_list, 'tuple': a_tuple, 'nil': None}
<strong>rich.print(a_dict)</strong>
&nbsp;
other_list = [True, False, None]
<strong>rich.print(other_list)</strong>
</pre>

<p>Nebo můžeme při importu zvolit nový jmenný alias importované funkce
<strong>print</strong>:</p>

<pre>
<strong>from rich import print as rprint</strong>
&nbsp;
a_list = [1, 2, 3, 4, 5]
<strong>rprint(a_list)</strong>
&nbsp;
a_tuple = (1, 2, 3, 4, 5)
<strong>rprint(a_tuple)</strong>
&nbsp;
a_dict = {'list': a_list, 'tuple': a_tuple, 'nil': None}
<strong>rprint(a_dict)</strong>
&nbsp;
other_list = [True, False, None]
<strong>rprint(other_list)</strong>
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Logování nabízené knihovnou Rich</h2>

<p>V&nbsp;knihovně Rich nalezneme i další užitečné funkce a třídy. Příkladem
může být třída <strong>Console</strong>, která dokáže na terminál vypsat (opět
v&nbsp;přehledné podobě) jakoukoli hodnotu, přičemž formát odpovídá formátu,
který očekáváme od logovacích informací (tedy například se použije časové
razítko atd.). Ostatně se podívejme na následující demonstrační příklad, který
ve funkci <strong>perform_computation</strong> vypíše &bdquo;do logu&ldquo;
obsah hodnoty uložené v&nbsp;lokální proměnné <strong>dictionary</strong>:</p>

<pre>
from rich.console import Console
&nbsp;
<strong>console = Console()</strong>
&nbsp;
&nbsp;
def perform_computation(x, y):
    dictionary = {}
    dictionary["x"] = x
    dictionary["y"] = y
&nbsp;
    try:
        z = x / y
        dictionary["result"] = z
        dictionary["success"] = True
    except Exception as e:
        dictionary["success"] = False
        dictionary["errors"] = e
&nbsp;
    <strong>console.log(dictionary)</strong>
    return dictionary
&nbsp;
&nbsp;
perform_computation(1, 2)
perform_computation(1, 0)
</pre>

<p>Výsledek bude vypadat následovně (povšimněte si, že se zobrazí jak časové
razítko, tak i řádek v&nbsp;kódu, který log vypsal):</p>

*** image ***
<p><i>Obrázek 17: Výpis na xtermu.</i></p>

*** image ***
<p><i>Obrázek 18: Výpis na xfce4-terminalu.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Tisk všech lokálních proměnných do logů</h2>

<p>Pokud metodě <strong>Console.log</strong> předáme nepovinný parametr
<strong>log_locals</strong> nastavený na hodnotu <strong>True</strong>, vypíšou
se automaticky i hodnoty lokálních proměnných:</p>

<pre>
from rich.console import Console
&nbsp;
<strong>console = Console()</strong>
&nbsp;
&nbsp;
def perform_computation(x, y):
    dictionary = {}
    dictionary["x"] = x
    dictionary["y"] = y
&nbsp;
    try:
        z = x / y
        dictionary["result"] = z
        dictionary["success"] = True
    except Exception as e:
        dictionary["success"] = False
        dictionary["errors"] = e
&nbsp;
    <strong>console.log(dictionary, log_locals=True)</strong>
    return dictionary
&nbsp;
&nbsp;
perform_computation(1, 2)
perform_computation(1, 0)
</pre>

<p>S&nbsp;výsledkem:</p>

*** image ***
<p><i>Obrázek 19: Výpis na xtermu.</i></p>

*** image ***
<p><i>Obrázek 20: Výpis na xfce4-terminalu.</i></p>

<p>V&nbsp;dalším příkladu jsou mezi jednotlivá volání funkce
<strong>perform_computation</strong> vloženy pauzy, takže výstup bude odlišný
(použijí se dvě časová razítka):</p>

<pre>
from rich.console import Console
from time import sleep
&nbsp;
<strong>console = Console()</strong>
&nbsp;
&nbsp;
def perform_computation(x, y):
    dictionary = {}
    dictionary["x"] = x
    dictionary["y"] = y
&nbsp;
    try:
        z = x / y
        dictionary["result"] = z
        dictionary["success"] = True
    except Exception as e:
        dictionary["success"] = False
        dictionary["errors"] = e
&nbsp;
    <strong>console.log(dictionary, log_locals=True)</strong>
    return dictionary
&nbsp;
&nbsp;
perform_computation(1, 2)
sleep(1)
perform_computation(1, 0)
sleep(1)
perform_computation("foo", 0)
</pre>

<p>S&nbsp;výsledkem:</p>

*** image ***
<p><i>Obrázek 21: Výpis na xtermu.</i></p>

*** image ***
<p><i>Obrázek 22: Výpis na xfce4-terminalu.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Výstup ve formátu JSON se zvýrazněním syntaxe</h2>

<p>Nepatrnou změnou, konkrétně náhradou volání metody
<strong>Console.log</strong> za metodu <strong>Console.print_json</strong>, je
možné zajistit, že hodnoty budou na terminál vypsány ve formátu JSON, takže
jejich další zpracování může být snadnější:</p>

<pre>
from rich.console import Console
&nbsp;
<strong>console = Console()</strong>
&nbsp;
&nbsp;
def perform_computation(x, y):
    dictionary = {}
    dictionary["x"] = x
    dictionary["y"] = y
&nbsp;
    try:
        z = x / y
        dictionary["result"] = z
        dictionary["success"] = True
    except Exception as e:
        dictionary["success"] = False
        dictionary["errors"] = e
&nbsp;
    <strong>console.print_json(data=dictionary)</strong>
    return dictionary
&nbsp;
&nbsp;
perform_computation(1, 2)
perform_computation(1, 0)
</pre>

<p>Povšimněte si, že se v&nbsp;tomto případě nemůže přímo pracovat
s&nbsp;hodnotami typu <strong>Exception</strong> nebo s&nbsp;odvozenými
hodnotami, což je poměrně problematický rys knihovny Rich:</p>

*** image ***
<p><i>Obrázek 23: Výpis na xtermu.</i></p>

*** image ***
<p><i>Obrázek 24: Výpis na xfce4-terminalu.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Tisk všech lokálních proměnných do JSONu</h2>

<p>I u metody <strong>Console.proměnných</strong> je možné zobrazit obsah
lokálních proměnných ve formátu JSON. Použijeme zde trik &ndash; předání
pojmenovaného parametru <strong>data</strong>, jehož hodnotou bude výsledek
volání <strong>locals()</strong>:</strong></p>

    <pre>
from rich.console import Console
&nbsp;
<strong>console = Console()</strong>
&nbsp;
&nbsp;
def perform_computation(x, y):
    dictionary = {}
    dictionary["x"] = x
    dictionary["y"] = y
&nbsp;
    try:
        z = x / y
        dictionary["result"] = z
        dictionary["success"] = True
    except Exception as e:
        dictionary["success"] = False
        dictionary["errors"] = e
&nbsp;
    <strong>console.print_json(data=locals())</strong>
    return dictionary
&nbsp;
&nbsp;
perform_computation(1, 2)
perform_computation(1, 0)
</pre>

<p>Výsledky budou v&nbsp;tomto případě vypadat následovně:</p>

*** image ***
<p><i>Obrázek 25: Výpis na xtermu.</i></p>

*** image ***
<p><i>Obrázek 26: Výpis na xfce4-terminalu.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Užitečná funkce <strong>inspect</strong></h2>

<p>Velmi užitečnou funkcí, kterou v&nbsp;knihovně Rich najdeme, je funkce,
která se nazývá <strong>inspect</strong>. Tato funkce dokáže ve strukturované a
snadno čitelné formě zobrazit prakticky jakékoli hodnoty a navíc nabízí i
několik přepínačů:</p>

<pre>
Help on function inspect in rich:
&nbsp;
rich.inspect = inspect(obj: Any, *, console: Union[ForwardRef('Console'), NoneType] = None, title: Union[str, NoneType] = None, help: bool = False, methods: bool = False, docs: bool = True, private: bool = False, dunder: bool = False, sort: bool = True, all: bool = False, value: bool = True) -&gt; None
    Inspect any Python object.
    
    * inspect(&lt;OBJECT&gt;) to see summarized info.
    * inspect(&lt;OBJECT&gt;, methods=True) to see methods.
    * inspect(&lt;OBJECT&gt;, help=True) to see full (non-abbreviated) help.
    * inspect(&lt;OBJECT&gt;, private=True) to see private attributes (single underscore).
    * inspect(&lt;OBJECT&gt;, dunder=True) to see attributes beginning with double underscore.
    * inspect(&lt;OBJECT&gt;, all=True) to see all attributes.
&nbsp;    
    Args:
        obj (Any): An object to inspect.
        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.
        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.
        methods (bool, optional): Enable inspection of callables. Defaults to Fa
        docs (bool, optional): Also render doc strings. Defaults to True.
        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.
        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.
        sort (bool, optional): Sort attributes alphabetically. Defaults to True.
        all (bool, optional): Show all attributes. Defaults to False.
        value (bool, optional): Pretty print value. Defaults to True.
</pre>

<p>Vyzkoušejme si například, jaké informace se zobrazí o třídě
<strong>list</strong>:</p>

<pre>
from rich import inspect
&nbsp;
<strong>inspect(list)</strong>
</pre>

*** image ***
<p><i>Obrázek 27: Výpis na xtermu.</i></p>

*** image ***
<p><i>Obrázek 28: Výpis na xfce4-terminalu.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výpis metod objektů funkcí <strong>inspect</strong></h2>

<p>Třída <strong>list</strong> nabízí několik metod, které jsou veřejně
dostupné. Funkce <strong>inspect</strong> dokáže nejenom zobrazit jména těchto
metod, ale navíc dokáže i vypsat krátké anotace k&nbsp;těmto metodám. Ostatně
se podívejme na následující kód, kde voláme funkci <strong>inspect</strong>
s&nbsp;nepovinným parametrem <strong>methods</strong> nastaveným na hodnotu
<strong>True</strong>:</p>

<pre>
from rich import inspect
&nbsp;
inspect(list, <strong>methods=True</strong>)
</pre>

<p>Výsledek vypadá následovně:</p>

*** image ***
<p><i>Obrázek 29: Výpis všech veřejných metod třídy
<strong>list</strong>.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Výpis interních atributů a metod funkcí <strong>inspect</strong></h2>

<p>V&nbsp;případě, že se funkci <strong>inspect</strong> předá (samozřejmě
kromě zkoumaného objektu) i nepovinný atribut <strong>all=True</strong>,
zobrazí se na terminálu mnohem větší množství informací, a to včetně všech
atributů:</p>

<pre>
from rich import inspect
&nbsp;
inspect(list, <strong>all=True</strong>)
</pre>

<p>V&nbsp;tomto případě budou informace zobrazené na ploše terminálu vypadat
takto:</p>

*** image ***
<p><i>Obrázek 30: Výpis všech atributů a metod třídy
<strong>list</strong>.</i></p>

<p><div class="rs-tip-major">Poznámka: na screenshotu je uveden pouze výsek
informací, protože ve skutečnosti zaberou plochu několika terminálů.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Otestování možností funkce <strong>inspect</strong> na instanci standardní třídy <strong>Queue</strong></h2>

<p>Některé další možnosti poskytované funkcí <strong>inspect</strong> si
ukážeme na demonstračních příkladech, ve kterých se zkonstruuje instance
standardní třídy <strong>Queue</strong>. Samotná funkce <strong>print</strong>
totiž ani vzdáleně nedokáže vypsat informace o tomto objektu tak přehledně,
jako to dokáže právě funkce <strong>inspect</strong>:</p>

<pre>
from queue import Queue
&nbsp;
q = Queue()
&nbsp;
q.put(42)
q.put(3.14)
q.put(True)
q.put(None)
&nbsp;
<strong>print(q)</strong>
<strong>print(q.__dict__)</strong>
</pre>

<p>Výsledky v&nbsp;tomto případě nejsou v&nbsp;žádném případě přehledné:</p>

<pre>
&lt;queue.Queue object at 0x7f3c8f268430&gt;
&nbsp;
{'maxsize': 0, 'queue': deque([42, 3.14, True, None]), 'mutex': &lt;unlocked _thread.lock object at 0x7f3c8f23ba80&gt;, 'not_empty': &lt;Condition(&lt;unlocked _thread.lock object at 0x7f3c8f23ba80&gt;, 0)&gt;, 'not_full': &lt;Condition(&lt;unlocked _thread.lock object at 0x7f3c8f23ba80&gt;, 0)&gt;, 'all_tasks_done': &lt;Condition(&lt;unlocked _thread.lock object at 0x7f3c8f23ba80&gt;, 0)&gt;, 'unfinished_tasks': 4}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Veřejné atributy instance třídy <strong>Queue</strong></h2>

<p><a href="#k13">Výše uvedený</a> výpis, který je z&nbsp;pohledu vývojáře
dosti nepraktický, lze vylepšit právě funkcí <strong>inspect</strong>, která se
v&nbsp;tom nejjednodušším případě zavolá takto:</p>

<pre>
from rich import inspect
from queue import Queue
&nbsp;
<strong>q = Queue()</strong>
&nbsp;
q.put(42)
q.put(3.14)
q.put(True)
q.put(None)
&nbsp;
<strong>inspect(q)</strong>
</pre>

<p>Výsledkem bude relativně přehledný seznam veřejných atributů o tomto
objektu:</p>

*** image ***
<p><i>Obrázek 31: Zobrazení veřejných atributů o instanci třídy
<strong>Queue</strong>.</i></p>

<p><div class="rs-tip-major">Poznámka: povšimněte si především toho, jak
přehledně je zobrazen obsah atributu <strong>queue</strong> &ndash; jednotlivé
typy hodnot jsou (rekurzivně) obarveny.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Metody objektu typu <strong>Queue</strong> s&nbsp;krátkým popiskem</h2>

<p>Pro výpis veřejných metod objektu typu <strong>Queue</strong> na terminál se
použije toto volání funkce <strong>inspect</strong>:</p>

<pre>
<strong>inspect(q, methods=True)</strong>
</pre>

<p>Podívejme se na úplný zdrojový kód jednoduchého příkladu, který toto volání
realizuje:</p>

<pre>
from rich import inspect
from queue import Queue
&nbsp;
<strong>q = Queue()</strong>
&nbsp;
q.put(42)
q.put(3.14)
q.put(True)
q.put(None)
&nbsp;
<strong>inspect(q, methods=True)</strong>
</pre>

<p>Výsledek (zobrazený na <i>xtermu</i>) bude v&nbsp;tomto případě vypadat
následovně:</p>

*** image ***
<p><i>Obrázek 32: Zobrazení veřejných metod o instanci třídy
<strong>Queue</strong>.</i></p>

<p><div class="rs-tip-major">Poznámka: opět si povšimněte způsobu zvýraznění
speciálních hodnot typu <strong>True</strong>, <strong>False</strong> a
<strong>None</strong>.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Výpis privátních metod a atributů objektu typu <strong>Queue</strong></h2>

<p>Pro výpis veřejných ale i privátních metod je nutné použít, jak již ostatně
víme, nepovinný parametr <strong>private</strong> nastavený na hodnotu
<strong>True</strong>, tedy následovně:</p>

<pre>
from rich import inspect
from queue import Queue
&nbsp;
<strong>q = Queue()</strong>
&nbsp;
q.put(42)
q.put(3.14)
q.put(True)
q.put(None)
&nbsp;
<strong>inspect(q, methods=True, private=True)</strong>
</pre>

<p>Výsledek zobrazený na <i>xtermu</i> se světlým pozadím:</p>

*** image ***
<p><i>Obrázek 33: Zobrazení veřejných i privátních metod o instanci třídy
<strong>Queue</strong>.</i></p>

<p>A na závěr si ukažme, jak se vypíšou všechny veřejné i privátní
atributy:</p>

<pre>
from rich import inspect
from queue import Queue
&nbsp;
<strong>q = Queue()</strong>
&nbsp;
q.put(42)
q.put(3.14)
q.put(True)
q.put(None)
&nbsp;
<strong>inspect(q, all=True)</strong>
</pre>

<p>Povšimněte si, že výpis je zkrácen &ndash; ve skutečnosti v&nbsp;tomto
případě zabere dvě výšky terminálu:</p>

*** image ***
<p><i>Obrázek 34: Zobrazení všech veřejných i privátních metod a atributů
instance třídy <strong>Queue</strong>.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Obsah navazujícího článku</h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Již vydané články o tvorbě GUI a TUI v&nbsp;Pythonu</h2>

<p>Tento článek se zabývá tvorbou aplikací s&nbsp;textovým uživatelským
rozhraním v&nbsp;Pythonu. Neškodí si proto připomenout, že právě pro Python
existuje poměrně velké množství knihoven určených pro práci
s&nbsp;<i>grafickým</i> uživatelským rozhraním i s&nbsp;uživatelským rozhraním
<i>textovým</i>. Mnohé z&nbsp;těchto knihoven jsme si již na stránkách Roota
popsali, a to v&nbsp;následujících článcích:</p>

<ol>

<li>Knihovny pro tvorbu grafického uživatelského rozhraní v Pythonu<br />
<a href="https://www.root.cz/clanky/knihovny-pro-tvorbu-grafickeho-uzivatelskeho-rozhrani-v-pythonu/">https://www.root.cz/clanky/knihovny-pro-tvorbu-grafickeho-uzivatelskeho-rozhrani-v-pythonu/</a>
</li>

<li>Grafické uživatelské rozhraní v&nbsp;Pythonu: knihovna Tkinter<br />
<a href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-knihovna-tkinter/">https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-knihovna-tkinter/</a>
</li>

<li>Grafické uživatelské rozhraní v&nbsp;Pythonu: knihovna Tkinter (2.část)<br />
<a href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-knihovna-tkinter-2-cast/">https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-knihovna-tkinter-2-cast/</a>
</li>

<li>Grafické uživatelské rozhraní v&nbsp;Pythonu: knihovna Tkinter (3.část)<br />
<a href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-knihovna-tkinter-3-cast/">https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-knihovna-tkinter-3-cast/</a>
</li>

<li>Grafické uživatelské rozhraní v&nbsp;Pythonu: menu v&nbsp;knihovně Tkinter<br />
<a href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-menu-v-knihovne-tkinter/">https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-menu-v-knihovne-tkinter/</a>
</li>

<li>Grafické uživatelské rozhraní v&nbsp;Pythonu: kouzla s&nbsp;kreslicí plochou (canvasem)<br />
<a href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-kouzla-s-kreslici-plochou-canvasem/">https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-kouzla-s-kreslici-plochou-canvasem/</a>
</li>

<li>Grafické uživatelské rozhraní v&nbsp;Pythonu: kouzla s&nbsp;kreslicí plochou (2. část)<br />
<a href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-kouzla-s-kreslici-plochou-2-cast/">https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-kouzla-s-kreslici-plochou-2-cast/</a>
</li>

<li>Grafické uživatelské rozhraní v&nbsp;Pythonu: kouzla s&nbsp;kreslicí plochou (dokončení)<br />
<a href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-kouzla-s-kreslici-plochou-dokonceni/">https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-kouzla-s-kreslici-plochou-dokonceni/</a>
</li>

<li>Grafické uživatelské rozhraní v&nbsp;Pythonu: další možnosti nabízené widgety Text a ScrolledText<br />
<a href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-dalsi-moznosti-nabizene-widgety-text-a-scrolledtext/">https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-dalsi-moznosti-nabizene-widgety-text-a-scrolledtext/</a>
</li>

<li>Grafické uživatelské rozhraní v&nbsp;Pythonu: použití dialogových oken v&nbsp;knihovně Tkinter<br />
<a href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-pouziti-dialogovych-oken-v-knihovne-tkinter/">https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-pouziti-dialogovych-oken-v-knihovne-tkinter/</a>
</li>

<li>Tvorba grafického uživatelského rozhraní v&nbsp;Pythonu s&nbsp;využitím knihovny appJar<br />
<a href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-appjar/">https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-appjar/</a>
</li>

<li>Tvorba grafického uživatelského rozhraní v&nbsp;Pythonu: widgety v&nbsp;knihovně appJar<br />
<a href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-widgety-v-knihovne-appjar/">https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-widgety-v-knihovne-appjar/</a>
</li>

<li>Tvorba grafického uživatelského rozhraní v&nbsp;Pythonu: dokončení popisu widgetů v&nbsp;knihovně appJar<br />
<a href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-dokonceni-popisu-widgetu-v-knihovne-appjar/">https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-dokonceni-popisu-widgetu-v-knihovne-appjar/</a>
</li>

<li>Tvorba GUI v Pythonu: menu, toolbary a widgety pro vstup textu v knihovně appJar<br />
<a href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-menu-toolbary-a-widgety-pro-vstup-textu-v-knihovne-appjar/">https://www.root.cz/clanky/tvorba-gui-v-pythonu-menu-toolbary-a-widgety-pro-vstup-textu-v-knihovne-appjar/</a>
</li>

<li>Tvorba GUI v Pythonu: widgety pro zobrazení tabulek a stromů v knihovně appJar<br />
<a href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-widgety-pro-zobrazeni-tabulek-a-stromu-v-knihovne-appjar/">https://www.root.cz/clanky/tvorba-gui-v-pythonu-widgety-pro-zobrazeni-tabulek-a-stromu-v-knihovne-appjar/</a>
</li>

<li>Tvorba GUI v Pythonu: widgety pro zobrazení grafických informací nabízené knihovnou appJar<br />
<a href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-widgety-pro-zobrazeni-grafickych-informaci-nabizene-knihovnou-appjar/">https://www.root.cz/clanky/tvorba-gui-v-pythonu-widgety-pro-zobrazeni-grafickych-informaci-nabizene-knihovnou-appjar/</a>
</li>

<li>Tvorba GUI v Pythonu: použití želví grafiky společně s&nbsp;knihovnou appJar<br />
<a href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-pouziti-zelvi-grafiky-spolecne-s-knihovnou-appjar/">https://www.root.cz/clanky/tvorba-gui-v-pythonu-pouziti-zelvi-grafiky-spolecne-s-knihovnou-appjar/</a>
</li>

<li>Tvorba grafického uživatelského rozhraní v Pythonu s&nbsp;využitím frameworku PySide<br />
<a href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-frameworku-pyside/">https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-frameworku-pyside/</a>
</li>

<li>Tvorba GUI v Pythonu s PySide: signály a sloty, správci rozložení komponent<br />
<a href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-pyside-signaly-a-sloty-spravci-rozlozeni-komponent/">https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-pyside-signaly-a-sloty-spravci-rozlozeni-komponent/</a>
</li>

<li>Tvorba GUI v Pythonu s PySide: další dostupné ovládací prvky<br />
<a href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-pyside-dalsi-dostupne-ovladaci-prvky/">https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-pyside-dalsi-dostupne-ovladaci-prvky/</a>
</li>

<li>Tvorba GUI v Pythonu s PySide: přepínací tlačítka a tvorba hlavních oken aplikací<br />
<a href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-pyside-prepinaci-tlacitka-a-tvorba-hlavnich-oken-aplikaci/">https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-pyside-prepinaci-tlacitka-a-tvorba-hlavnich-oken-aplikaci/</a>
</li>

<li>Tvorba GUI v Pythonu s PySide: hlavní menu, nástrojový pruh a výběrový seznam<br />
<a href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-pyside-hlavni-menu-nastrojovy-pruh-a-vyberove-seznam/">https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-pyside-hlavni-menu-nastrojovy-pruh-a-vyberove-seznam/</a>
</li>

<li>Tvorba GUI v Pythonu s&nbsp;využitím frameworku PySide: rastrová a vektorová grafika<br />
<a href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-vyuzitim-frameworku-pyside-rastrova-a-vektorova-grafika/">https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-vyuzitim-frameworku-pyside-rastrova-a-vektorova-grafika/</a>
</li>

<li>Tvorba GUI v PySide: grafické operace používající třídu QPainter<br />
<a href="https://www.root.cz/clanky/tvorba-gui-v-pyside-graficke-operace-pouzivajici-tridu-qpainter/">https://www.root.cz/clanky/tvorba-gui-v-pyside-graficke-operace-pouzivajici-tridu-qpainter/</a>
</li>

<li>Tvorba GUI v Pythonu s PySide: pokročilejší grafické operace používající třídu QPainter<br />
<a href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-pyside-pokrocilejsi-graficke-operace-pouzivajici-tridu-qpainter/">https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-pyside-pokrocilejsi-graficke-operace-pouzivajici-tridu-qpainter/</a>
</li>

<li>Tvorba GUI v Pythonu s PySide: použití cest při kreslení 2D scén<br />
<a href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-pyside-pouziti-cest-pri-kresleni-2d-scen/">https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-pyside-pouziti-cest-pri-kresleni-2d-scen/</a>
</li>

<li>GUI v Pythonu s PySide: rastrové operace, vykreslování textů<br />
<a href="https://www.root.cz/clanky/gui-v-pythonu-s-pyside-rastrove-operace-vykreslovani-textu/">https://www.root.cz/clanky/gui-v-pythonu-s-pyside-rastrove-operace-vykreslovani-textu/</a>
</li>

<li>Tvorba GUI v Pythonu s&nbsp;využitím frameworku PySide: widgety pro textový vstup<br />
<a href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-vyuzitim-frameworku-pyside-widgety-pro-textovy-vstup/">https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-vyuzitim-frameworku-pyside-widgety-pro-textovy-vstup/</a>
</li>

<li>Složitější ovládací prvky ve frameworku PySide: tabulky a stromy<br />
<a href="https://www.root.cz/clanky/slozitejsi-ovladaci-prvky-ve-frameworku-pyside-tabulky-a-stromy/">https://www.root.cz/clanky/slozitejsi-ovladaci-prvky-ve-frameworku-pyside-tabulky-a-stromy/</a>
</li>

<li>Další užitečné ovládací prvky nabízené frameworkem PySide<br />
<a href="https://www.root.cz/clanky/dalsi-uzitecne-ovladaci-prvky-nabizene-frameworkem-pyside/">https://www.root.cz/clanky/dalsi-uzitecne-ovladaci-prvky-nabizene-frameworkem-pyside/</a>
</li>

<li>Standardní dialogy v knihovně PySide<br />
<a href="https://www.root.cz/clanky/standardni-dialogy-v-nbsp-knihovne-pyside/">https://www.root.cz/clanky/standardni-dialogy-v-nbsp-knihovne-pyside/</a>
</li>

<li>Konfigurace standardních dialogů nabízených knihovnou PySide<br />
<a href="https://www.root.cz/clanky/konfigurace-standardnich-dialogu-nabizenych-knihovnou-pyside/">https://www.root.cz/clanky/konfigurace-standardnich-dialogu-nabizenych-knihovnou-pyside/</a>
</li>

<li>Nastavení stylů vykreslování widgetů, oken i dialogů v knihovně PySide<br />
<a href="https://www.root.cz/clanky/nastaveni-stylu-vykreslovani-widgetu-oken-i-dialogu-v-knihovne-pyside/">https://www.root.cz/clanky/nastaveni-stylu-vykreslovani-widgetu-oken-i-dialogu-v-knihovne-pyside/</a>
</li>

<li>Tvorba GUI v Pythonu: použití kaskádových stylů v PySide<br />
<a href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-pouziti-kaskadovych-stylu-v-pyside/">https://www.root.cz/clanky/tvorba-gui-v-pythonu-pouziti-kaskadovych-stylu-v-pyside/</a>
</li>

<li>Práce s vektorovým formátem SVG ve frameworku PySide<br />
<a href="https://www.root.cz/clanky/prace-s-vektorovym-formatem-svg-ve-frameworku-pyside/">https://www.root.cz/clanky/prace-s-vektorovym-formatem-svg-ve-frameworku-pyside/</a>
</li>

<li>Práce s vektorovým formátem SVG ve frameworku PySide (dokončení)<br />
<a href="https://www.root.cz/clanky/prace-s-vektorovym-formatem-svg-ve-frameworku-pyside-dokonceni/">https://www.root.cz/clanky/prace-s-vektorovym-formatem-svg-ve-frameworku-pyside-dokonceni/</a>
</li>

<li>Použití UI souborů s popisem formulářů ve frameworku PySide<br />
<a href="https://www.root.cz/clanky/pouziti-ui-souboru-s-popisem-formularu-ve-frameworku-pyside/">https://www.root.cz/clanky/pouziti-ui-souboru-s-popisem-formularu-ve-frameworku-pyside/</a>
</li>

<li>Jazyk QML (Qt Modeling Language) a PySide<br />
<a href="https://www.root.cz/clanky/jazyk-qml-qt-modeling-language-a-pyside/">https://www.root.cz/clanky/jazyk-qml-qt-modeling-language-a-pyside/</a>
</li>

<li>Jazyk QML (Qt Modeling Language) a PySide 2<br />
<a href="https://www.root.cz/clanky/jazyk-qml-qt-modeling-language-a-pyside-2/">https://www.root.cz/clanky/jazyk-qml-qt-modeling-language-a-pyside-2/</a>
</li>

<li>Reakce na události v GUI deklarované v jazyku QML a PySide 2<br />
<a href="https://www.root.cz/clanky/reakce-na-udalosti-v-gui-deklarovane-v-jazyku-qml-a-pyside-2/">https://www.root.cz/clanky/reakce-na-udalosti-v-gui-deklarovane-v-jazyku-qml-a-pyside-2/</a>
</li>

<li>Interaktivní tvorba grafického uživatelského rozhraní nástrojem Pygubu<br />
<a href="https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-nastrojem-pygubu/">https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-nastrojem-pygubu/</a>
</li>

<li>Interaktivní tvorba grafického uživatelského rozhraní s&nbsp;využitím nástroje Pygubu (2)<br />
<a href="https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-s-vyuzitim-nastroje-pygubu-2/">https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-s-vyuzitim-nastroje-pygubu-2/</a>
</li>

<li>Interaktivní tvorba grafického uživatelského rozhraní s&nbsp;využitím nástroje Pygubu (dokončení)<br />
<a href="https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-s-vyuzitim-nastroje-pygubu-dokonceni/">https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-s-vyuzitim-nastroje-pygubu-dokonceni/</a>
</li>

</ol>

<p>Na stránkách Roota jsme se zabývali taktéž některými knihovnami (opět
určenými primárně pro Python), které je možné použít pro tvorbu aplikací
s&nbsp;celoobrazovkovým (či chcete-li celoterminálovým) textovým uživatelským
rozhraním. Podporu pro TUI poskytuje především knihovna
<strong>prompt_toolkit</strong>:</p>

<ol>

<li>Tvorba aplikací s příkazovým řádkem v Pythonu s knihovnami GNU Readline a prompt_toolkit<br />
<a href="https://www.root.cz/clanky/tvorba-aplikaci-s-prikazovym-radkem-v-pythonu-s-vyuzitim-knihoven-gnu-readline-a-prompt-toolkit/">https://www.root.cz/clanky/tvorba-aplikaci-s-prikazovym-radkem-v-pythonu-s-vyuzitim-knihoven-gnu-readline-a-prompt-toolkit/</a>
</li>

<li>Tvorba aplikací s textovým uživatelským rozhraním založeným na knihovně prompt_toolkit<br />
<a href="https://www.root.cz/clanky/tvorba-aplikaci-s-textovym-uzivatelskym-rozhranim-zalozenym-na-knihovne-prompt-toolkit/">https://www.root.cz/clanky/tvorba-aplikaci-s-textovym-uzivatelskym-rozhranim-zalozenym-na-knihovne-prompt-toolkit/</a>
</li>

<li>Tvorba textového rozhraní s&nbsp;knihovnou prompt_toolkit: základní prvky TUI<br />
<a href="https://www.root.cz/clanky/tvorba-textoveho-rozhrani-s-knihovnou-prompt-toolkit-zakladni-prvky-tui/">https://www.root.cz/clanky/tvorba-textoveho-rozhrani-s-knihovnou-prompt-toolkit-zakladni-prvky-tui/</a>
</li>

<li>Tvorba TUI s&nbsp;knihovnou prompt_toolkit: aplikace s celoobrazovkovým rozhraním<br />
<a href="https://www.root.cz/clanky/tvorba-tui-s-knihovnou-prompt-toolkit-aplikace-s-celoobrazovkovym-rozhranim/">https://www.root.cz/clanky/tvorba-tui-s-knihovnou-prompt-toolkit-aplikace-s-celoobrazovkovym-rozhranim/</a>
</li>

<li>Tvorba textového uživatelského rozhraní s&nbsp;knihovnou prompt_toolkit: ovládací prvky (widgety)<br />
<a href="https://www.root.cz/clanky/tvorba-textoveho-uzivatelskeho-rozhrani-s-knihovnou-prompt-toolkit-ovladaci-prvky-widgety/">https://www.root.cz/clanky/tvorba-textoveho-uzivatelskeho-rozhrani-s-knihovnou-prompt-toolkit-ovladaci-prvky-widgety/</a>
</li>

</ol>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
Python 3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Jméno souboru</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td> 1</td><td>standard_print.py</td><td>chování standardní funkce <strong>print</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/standard_print.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/standard_print.py</a></td></tr>
<tr><td> 2</td><td>rich_print_1.py</td><td>první způsob importu a volání vylepšené varianty funkce <strong>print</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/rich_print_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/rich_print_1.py</a></td></tr>
<tr><td> 3</td><td>rich_print_2.py</td><td>druhý způsob importu a volání vylepšené varianty funkce <strong>print</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/rich_print_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/rich_print_2.py</a></td></tr>
<tr><td> 4</td><td>rich_print_3.py</td><td>třetí způsob importu a volání vylepšené varianty funkce <strong>print</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/rich_print_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/rich_print_3.py</a></td></tr>
<tr><td> 5</td><td>console_log1.py</td><td>zobrazení zvolené hodnoty na konzoli</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_log1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_log1.py</a></td></tr>
<tr><td> 6</td><td>console_log2.py</td><td>zobrazení zvolené hodnoty i lokálních proměnných na konzoli</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_log2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_log2.py</a></td></tr>
<tr><td> 7</td><td>console_log3.py</td><td>způsob práce s&nbsp;časovým razítkem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_log3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_log3.py</a></td></tr>
<tr><td> 8</td><td>console_json1.py</td><td>tisk hodnot na konzoli ve formátu JSON</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_json1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_json1.py</a></td></tr>
<tr><td> 9</td><td>console_json2.py</td><td>tisk všech lokálních proměnných na konzoli ve formátu JSON</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_json2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_json2.py</a></td></tr>
<tr><td>10</td><td>inspect1.py</td><td>funkce <strong>inspect</strong> a třída <strong>list</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect1.py</a></td></tr>
<tr><td>11</td><td>inspect2.py</td><td>funkce <strong>inspect</strong>; tisk všech viditelných metod třídy/objektu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect2.py</a></td></tr>
<tr><td>12</td><td>inspect3.py</td><td>funkce <strong>inspect</strong>; tisk všech metod i atributů třídy/objektu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect3.py</a></td></tr>
<tr><td>13</td><td>inspect4.py</td><td>funkce <strong>inspect</strong>; tisk instance třídy <strong>Queue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect4.py</a></td></tr>
<tr><td>14</td><td>inspect5.py</td><td>funkce <strong>inspect</strong>; tisk všech metod instance třídy <strong>Queue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect5.py</a></td></tr>
<tr><td>15</td><td>inspect6.py</td><td>funkce <strong>inspect</strong>; tisk všech privátních metod instance třídy <strong>Queue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect6.py</a></td></tr>
<tr><td>16</td><td>inspect7.py</td><td>funkce <strong>inspect</strong>; tisk všech atributů i metod instance třídy <strong>Queue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect7.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Repositář s&nbsp;knihovnou Rich<br />
<a href="https://github.com/Textualize/rich">https://github.com/Textualize/rich</a>
</li>

<li>Knihovna Rich na PyPi<br />
<a href="https://pypi.org/project/rich/">https://pypi.org/project/rich/</a>
</li>

<li>How to Use the Rich Library with Python<br />
<a href="https://www.freecodecamp.org/news/use-the-rich-library-in-python/">https://www.freecodecamp.org/news/use-the-rich-library-in-python/</a>
</li>

<li>Introduction (Rich, Readthedocs)<br />
<a href="https://rich.readthedocs.io/en/stable/introduction.html">https://rich.readthedocs.io/en/stable/introduction.html</a>
</li>

<li>Awesome Python<br />
<a href="https://awesome-python.com/">https://awesome-python.com/</a>
</li>

<li>Python Awesome<br />
<a href="https://pythonawesome.com/about/">https://pythonawesome.com/about/</a>
</li>

<li>Python Rich Library<br />
<a href="https://vegibit.com/python-rich-library/">https://vegibit.com/python-rich-library/</a>
</li>

<li>Python’s rich library &ndash; a tutorial<br />
<a href="https://softbranchdevelopers.com/pythons-rich-library-a-tutorial/">https://softbranchdevelopers.com/pythons-rich-library-a-tutorial/</a>
</li>

<li>blessed na PyPi<br />
<a href="https://pypi.org/project/blessed/">https://pypi.org/project/blessed/</a>
</li>

<li>blessed na GitHubu<br />
<a href="https://github.com/jquast/blessed">https://github.com/jquast/blessed</a>
</li>

<li>Blessed documentation!<br />
<a href="https://blessed.readthedocs.io/en/latest/">https://blessed.readthedocs.io/en/latest/</a>
</li>

<li>termbox-go na GitHubu<br />
<a href="https://github.com/nsf/termbox-go">https://github.com/nsf/termbox-go</a>
</li>

<li>termui na GitHubu<br />
<a href="https://github.com/gizak/termui">https://github.com/gizak/termui</a>
</li>

<li>blessed na GitHubu<br />
<a href="https://github.com/chjj/blessed">https://github.com/chjj/blessed</a>
</li>

<li>blessed-contrib na GitHubu<br />
<a href="https://github.com/yaronn/blessed-contrib">https://github.com/yaronn/blessed-contrib</a>
</li>

<li>tui-rs na GitHubu<br />
<a href="https://github.com/fdehau/tui-rs">https://github.com/fdehau/tui-rs</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>
