<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Transcrypt: další technologie umožňující použití Pythonu na front endu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Transcrypt: další technologie umožňující použití Pythonu na front endu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Transcrypt: další technologie umožňující použití Pythonu na front endu</a></p>
<p><a href="#k02">2. Programovací jazyk Python a front end webových aplikací</a></p>
<p><a href="#k03">3. Programovací jazyk Python a front end webových aplikací</a></p>
<p><a href="#k04">4. Instalace Transcryptu nástrojem <strong>pip</strong></a></p>
<p><a href="#k05">5. Instalace v&nbsp;případě použití <i>PDM</i></a></p>
<p><a href="#k06">*** 6. Google Closure Compiler</a></p>
<p><a href="#k07">7. Instalace JDK pro Google Closure Compiler</a></p>
<p><a href="#k08">*** 8. Transpřeklad Pythonu do JavaScriptu</a></p>
<p><a href="#k09">9. Překlad kódu, který manipuluje se seznamy, do JavaScriptu</a></p>
<p><a href="#k10">10. Překlad kódu, který manipuluje se slovníky, do JavaScriptu</a></p>
<p><a href="#k11">11. Transformace jednoduchých funkcí do JavaScriptu</a></p>
<p><a href="#k12">12. Překlad rekurzivní funkce a taktéž generátoru <strong>range</strong></a></p>
<p><a href="#k13">13. Překlad uzávěru z&nbsp;Pythonu do JavaScriptu</a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Transcrypt: další technologie umožňující použití Pythonu na front endu</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Programovací jazyk Python a front end webových aplikací</h2>

<p>Programovací jazyk Python se v&nbsp;současnosti používá v&nbsp;mnoha
aplikačních oblastech &ndash; od jednoduchých skriptů umožňujících a
zjednodušujících administraci systému přes složitější utility, desktopové
aplikace (PyQt, PySide, wxPython, Tkinter, PyGObject či Wax) a webové služby až
po zpracování dat, strojové učení (<i>ML &ndash; machine learning</i>) a umělou
inteligenci (<i>AI &ndash; artificial intelligence</i>).</p>

<p>V&nbsp;dnešním článku nás ovšem bude zajímat především použití Pythonu při
tvorbě webových služeb a webových aplikací. V&nbsp;této oblasti se Python
používá především na <i>back endu</i>, tj.&nbsp;pro tu část webové
služby/aplikace, která je provozována na serveru a nějakým způsobem komunikuje
s&nbsp;ostatními komponentami vytvářeného systému: <i>front endem</i> (typicky
webový prohlížeč s&nbsp;interpretrem JavaScriptu), databází a dalšími
(mikro)službami, například s&nbsp;využitím message brokerů, systémů pro
monitoring a správu událostí atd. Tato oblast samozřejmě není pokryta pouze
Pythonem, ale najdeme zde i další programovací jazyky a technologie, zejména
Javu (a celý její middleware), JavaScript či TypeScript (node.js) a dnes taktéž
<a href="https://www.root.cz/serialy/programovaci-jazyk-go/">programovací jazyk
Go</a> (i když není problém využít například i Rust či další jazyky).</p>

<p>Zatímco pozice Pythonu v&nbsp;oblasti <i>back endu</i> je poměrně zřejmá, je
situace na <i>front endu</i> (tedy v&nbsp;současnosti na straně webového
prohlížeče) mnohem složitější. Důvod je jednoduchý &ndash; v&nbsp;této oblasti
z&nbsp;historických důvodů kraluje JavaScript, přičemž veškeré snahy a náhradu
tohoto jazyka byly prozatím neúspěšné (pokusů bylo hned několik, připomeňme
například browsery s&nbsp;nativní podporou programovacích jazyků <a
href="https://www.root.cz/serialy/programovaci-jazyk-tcl/">TCL</a>, <a
href="https://en.wikipedia.org/wiki/VBScript">VBScript</a> či projekt <a
href="https://dart.dev/">Dart</a>). Ovšem stále se můžeme setkat se snahami
JavaScript nepoužívat přímo, popř.&nbsp;ho obejít jinými nástroji. Příkladem
mohou být technologie umožňující tvorbu webových aplikací podobným způsobem,
jakoby se jednalo o aplikace desktopové. Příklady tohoto přístupu mohou být
projekty <a href="https://wiki.python.org/moin/Pyjamas">Pyjamas</a> (pro
Python), <a href="http://www.gwtproject.org/">Google Web Toolkit (GWT)</a>, <a
href="https://cordova.apache.org/">Apache Cordova</a> atd. (což jsou
v&nbsp;současnosti většinou již nepodporované projekty).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Programovací jazyk Python a front end webových aplikací</h2>

<p>Je tedy vůbec možné a praktické použít Python přímo na webovém front endu a
pokud to je možné, jakou za to zaplatíme cenu? Ve skutečnosti existuje hned
několik projektů, které se více či méně úspěšným způsobem snaží o to, aby byl
Python na front endu skutečně použitelný, a to i pro reálně provozované
aplikace. Mezi tyto projekty patří například:</p>

<ol>

<li><i>Brython</i>, což je transpřekladač z&nbsp;Pythonu do JavaScriptu,
přičemž samotný překlad (resp.&nbsp;přesněji řečeno transpřeklad) probíhá na
pozadí, což znamená, že přímo v&nbsp;kódu webové stránky je umístěn (či
načítán) kód v&nbsp;Pythonu. Podobné řešení jsme již viděli, například u
projektu <a href="https://github.com/Gozala/wisp">Wisp</a> (jazyk podobný
Clojure) či <a href="https://github.com/mherkender/lua.js">lua.js</a>
(transpřeklad z&nbsp;jazyka Lua). Výhodou Brythonu je, že se jakékoli úpravy
ihned projeví v&nbsp;aplikaci po znovunačtení stránky (F5), nevýhodou celková
pomalost inicializace webové aplikace.</li>

<li><i>Transcrypt</i> je taktéž transpřekladačem Pythonu (konkrétně Pythonu 3)
do JavaScriptu. Samotný transpřeklad je napsaný velmi dobře &ndash; zhruba
platí, že velikost vygenerovaného kódu v&nbsp;JavaScriptu odpovídá velikosti
původního kódu napsaného v&nbsp;Pythonu (případné zvětšení je o jednotky
procent). Musíme však počítat s&nbsp;tím, že je nutné načíst i jádro
Transcriptu, jehož velikost je přibližně 20 kB (tedy čím větší je kód samotné
aplikace, tím (poměrově) menší budou režijní náklady. Zajímavá a užitečná je i
podpora <i>type hintů</i> (informací o datovém typu parametrů, proměnných
atd.). Tímto projektem se budeme zabývat v&nbsp;navazujících kapitolách.</li>

<li>Podobným způsobem pracuje i projekt nazvaný <i>pyjaco</i>, který naleznete
na adrese <a
href="https://github.com/chrivers/pyjaco">https://github.com/chrivers/pyjaco</a>.</li>

<li><i>Skulpt</i> je naproti tomu v&nbsp;mnoha ohledech podobný projektu
<i>Brython</i>, protože taktéž umožňuje provádět transpřeklad na pozadí
(programátor tedy pracuje pouze se zdrojovým kódem vytvořeným
v&nbsp;Pythonu).</li>

<li><i>PyScript</i> je oproti předchozím nástrojům realizován odlišně, protože
je postaven na projektu nazvaném <a
href="https://github.com/pyodide/pyodide">Pyodide</a>. Jedná se v&nbsp;prvé
řadě o upravený překlad celého standardního Pythonu (konkrétně Pythonu,
resp.&nbsp;přesněji řečeno CPythonu 3.9), ovšem nikoli do nativního kódu
spustitelného přímo z&nbsp;příkazové řádky, ale do bajtkódu <i>WebAssembly</i>.
To mj.&nbsp;znamená, že interpret Pythonu, resp.&nbsp;přesněji řečeno programů
napsaných pro Python, lze spustit přímo z&nbsp;webového prohlížeče, a to
dokonce bez nutnosti mít Python lokálně nainstalovaný &ndash; musíme mít pouze
k&nbsp;dispozici vhodný webový server (pro jednoduché projekty dokonce ani to
ne &ndash; stačí lokálně uložené soubory), stránky na <a
href="https://pages.github.com/">github.io</a> atd. <i>PyScript</i> do tohoto
ekosystému přidává podporu pro nové HTML značky, zejména
<strong>&lt;py-script&gt;</strong> a <strong>&lt;py-env&gt;</strong>, jenž
umožňují snadný zápis skriptu a navíc i specifikaci cest, modulů a knihoven,
které budou na stránce použity.</li>

<li>Velmi zajímavým nástrojem, který názorně ukazuje, jak vlastně transpřeklad
funguje (a že jeho výsledek může být čitelný), je nástroj s&nbsp;poněkud
zvláštním jménem <i>fiddlesalad</i>, který naleznete na adrese <a
href="http://fiddlesalad.com/python/">http://fiddlesalad.com/python/</a>. Tento
nástroj umožňuje zápis zdrojového kódu v&nbsp;Pythonu, který je ihned (již
v&nbsp;době zápisu) transpřekládán do JavaScriptu a současně i spouštěn.</li>

</ol>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že většina projektů
zmíněných v&nbsp;předchozím textu (kromě <i>PyScriptu</i>) jsou ve skutečnosti
<i>transpřekladače</i> neboli <i>transpilery</i>. Jedná se o technologii
zajišťující, aby se i ve webovém prohlížeči mohlo (nepřímo) pracovat
s&nbsp;dalšími programovacími jazyky, nejenom se všudypřítomným a nativně
podporovaným JavaScriptem. Další variantou je interpretace s&nbsp;využitím
interpretru psaného v&nbsp;JavaScriptu popř.&nbsp;použití
WebAssembly.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace Transcryptu nástrojem <strong>pip</strong></h2>

<p>K&nbsp;dispozici je hned několik možností instalace Transcryptu. Vzhledem
k&nbsp;tomu, že je tento nástroj <a
href="https://pypi.org/project/Transcrypt/">dostupný přes PyPi</a>, můžeme pro
jeho instalaci použít standardní mechanismus dostupný přes <strong>pip</strong>
resp.&nbsp;<strong>pip3</strong>. Instalace pouze pro přihlášeného uživatele
(nebo do virtuálního prostředí) je snadná:</p>

<pre>
$ <strong>pip3 install --user transcrypt</strong>
&nbsp;
Collecting transcrypt
  Downloading Transcrypt-3.9.1-py2.py3-none-any.whl (19.0 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 19.0/19.0 MB 5.1 MB/s eta 0:00:00
Collecting mypy
  Downloading mypy-1.6.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.1 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 12.1/12.1 MB 5.9 MB/s eta 0:00:00
Collecting typing-extensions&gt;=4.1.0
  Downloading typing_extensions-4.8.0-py3-none-any.whl (31 kB)
Collecting mypy-extensions&gt;=1.0.0
  Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)
Installing collected packages: typing-extensions, mypy-extensions, mypy, transcrypt
Successfully installed mypy-1.6.1 mypy-extensions-1.0.0 transcrypt-3.9.1 typing-extensions-4.8.0
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že Transcrypt závisí na
nástroji <i>Mypy</i>, kterému jsme se na stránkách Roota již věnovali [<a
href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/">1</a>]
[<a
href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-2-cast/">2</a>]
[<a
href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-3/">3</a>].</div></p>

<p>Po instalaci si ověříme, zda je dostupný příkaz
<strong>transcrypt</strong>:</p>

<pre>
$ <strong>transcrypt</strong>
&nbsp;
Transcrypt (TM) Python to JavaScript Small Sane Subset Transpiler Version 3.9.0
Copyright (C) Geatec Engineering. License: Apache 2.0
&nbsp;
&nbsp;
Usage: transcrypt [-h] [-a] [-am] [-b] [-c] [-d] [-da] [-dc] [-de] [-dl] [-dm]
                  [-dn] [-ds] [-dt] [-e [esv]] [-ec] [-f] [-g] [-i] [-jc]
                  [-jk] [-jm] [-k] [-kc] [-l] [-m] [-n] [-o] [-od outdir]
                  [-p [parent]] [-r] [-s [symbols]] [-sf] [-t] [-u [unit]]
                  [-v] [-x x] [-xr] [-xg] [-xp [xpath]] [-xt] [-*]
                  [source]
</pre>

<p><div class="rs-tip-major">Poznámka: jak uvidíme dále, není ve skutečnosti
ještě instalace u konce, protože Transcrypt závisí i na JDK.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Instalace v&nbsp;případě použití <i>PDM</i></h2>

<p>Transcrypt lze nastavit i jako závislý balíček při použití nástroje PDM,
který byl na Rootu <a
href="https://www.root.cz/clanky/pdm-moderni-spravce-balicku-a-virtualnich-prostredi-pythonu/">popsán
minulý týden</a>. Ukažme si pro úplnost, jak by mohl vypadat projekt, který je
na Transcryptu postaven.</p>

<p>Nejprve si necháme vytvořit kostru nového projektu:</p>

<pre>
$ <strong>pdm init</strong>
</pre>

<p>Poctivě odpovíme na položené otázky (většinou jen potvrzením klávesou
Enter):</p>

<pre>
Creating a pyproject.toml for PDM...
Please enter the Python interpreter to use
0. /usr/bin/python (3.11)
1. /usr/bin/python3.11 (3.11)
2. /usr/bin/python3 (3.11)
Please select (0): <strong>0</strong>
Would you like to create a virtualenv with /usr/bin/python? [y/n] (y): <strong>Enter</strong>
Virtualenv is created successfully at /home/ptisnovs/test1/.venv
Is the project a library that is installable?
If yes, we will need to ask a few more questions to include the project name and
build backend [y/n] (n): <strong>Enter</strong>
License(SPDX name) (MIT): <strong>Enter</strong> 
Author name ():  <strong>Enter</strong>
Author email ():  <strong>Enter</strong>
Python requires('*' to allow any) (&gt;=3.11): <strong>Enter</strong> 
Project is initialized successfully
</pre>

<p>Do projektu přidáme závislost na Transcriptu. Výsledný projekt není běžným
Pythonovským projektem, kde by výsledkem měla být aplikace nebo knihovna, takže
je vlastně jedno, zda použijeme přímou závislost či závislost vývojářskou:</p>

<pre>
$ <strong>pdm add transcrypt</strong>
</pre>

<p>V&nbsp;tomto kroku by se měly nainstalovat stejné balíčky, jako při
instalaci přes <strong>pip</strong>:</p>

<pre>
Adding packages to default dependencies: transcrypt
🔒 Lock successful
Changes are written to pyproject.toml.
Synchronizing working set with resolved packages: 4 to add, 0 to update, 0 to 
remove
&nbsp;
  ✔ Install mypy-extensions 1.0.0 successful
  ✔ Install typing-extensions 4.8.0 successful
  ✔ Install transcrypt 3.9.1 successful
  ✔ Install mypy 1.6.1 successful
&nbsp;
🎉 All complete!
</pre>

<p>Výsledný projektový soubor bude vypadat takto:</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "", email = ""},
]
dependencies = [
    <strong>"transcrypt&gt;=3.9.1"</strong>,
]
requires-python = "&gt;=3.11"
readme = "README.md"
license = {text = "MIT"}
</pre>

<p>V&nbsp;případě, že zvolíme závislost pro vývojáře, bude soubor nepatrně
odlišný:</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "", email = ""},
]
[tool.pdm.dev-dependencies]
dev = [
    <strong>"transcrypt&gt;=3.9.1"</strong>,
]
requires-python = "&gt;=3.11"
readme = "README.md"
license = {text = "MIT"}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Google Closure Compiler</h2>

<p><a href="https://github.com/google/closure-compiler">Google Closure Compiler</a></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Instalace JDK pro Google Closure Compiler</h2>

<p>V&nbsp;případě, že se nástrojem Transcrypt pokusíme přeložit
(resp.&nbsp;přesněji řečeno transpřeložit) nějaký zdrojový soubor obsahující
kód v&nbsp;Pythonu do JavaScriptu, bude se provádět následná optimalizace a
minifikace kódu právě s&nbsp;využitím Google Closure Compileru. Ten je sice
nainstalován současně s&nbsp;Transcryptem, ovšem samotné JDK již nikoli. To,
zda je JDK dostupné či nikoli, lze snadno ověřit:</p>

<pre>
$ <strong>transcrypt test.py</strong>
</pre>

<p>nebo příkazem:</p>

<pre>
$ <strong>pdm run transcrypt test.py</strong>
</pre>

<p>Pokud se vypíše následující chyba (viz zvýrazněný řádek), je nutné
doinstalovat celé JDK:</p>

<pre>
Saving target code in: /home/ptisnovs/test1/__target__/org.transcrypt.__runtime__.js
Saving minified target code in: /home/ptisnovs/test1/__target__/org.transcrypt.__runtime__.js
&nbsp;
Error while compiling (offending file last):
        File 'org.transcrypt.__runtime__', line 0, namely:
&nbsp;
        <strong>[Errno 2] No such file or directory: 'java'</strong>
&nbsp;
Aborted
</pre>

<p><div class="rs-tip-major">Poznámka: pokud použijeme přepínač
<strong>-n</strong>, nebude výsledná optimalizace prováděna, což využijeme
v&nbsp;dalších kapitolách.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Transpřeklad Pythonu do JavaScriptu</h2>

<pre>
</pre>

<pre>
$ <strong>pdm run transcrypt hello.py</strong>
</pre>

<pre>
Transcrypt (TM) Python to JavaScript Small Sane Subset Transpiler Version 3.9.0
Copyright (C) Geatec Engineering. License: Apache 2.0


Saving target code in: /home/ptisnovs/test1/__target__/org.transcrypt.__runtime__.js
Saving minified target code in: /home/ptisnovs/test1/__target__/org.transcrypt.__runtime__.js
Saving target code in: /home/ptisnovs/test1/__target__/itertools.js
Saving minified target code in: /home/ptisnovs/test1/__target__/itertools.js
Saving target code in: /home/ptisnovs/test1/__target__/hello.js
Saving minified target code in: /home/ptisnovs/test1/__target__/hello.js

Ready
</pre>

<pre>
-rw-r--r--. 1 ptisnovs ptisnovs 1181 Oct 19 16:11 hello.py
</pre>

<pre>
-rw-r--r--. 1 ptisnovs ptisnovs  2481 Oct 19 16:14 hello.js
-rw-r--r--. 1 ptisnovs ptisnovs  1167 Oct 19 16:14 hello.project
-rw-r--r--. 1 ptisnovs ptisnovs  4367 Oct 19 16:14 itertools.js
-rw-r--r--. 1 ptisnovs ptisnovs 43192 Oct 19 16:14 org.transcrypt.__runtime__.js
</pre>

<pre>
-rw-r--r--. 1 ptisnovs ptisnovs  2834 Oct 19 16:33 hello.js
-rw-r--r--. 1 ptisnovs ptisnovs  1166 Oct 19 16:33 hello.project
-rw-r--r--. 1 ptisnovs ptisnovs  7737 Oct 19 16:33 itertools.js
-rw-r--r--. 1 ptisnovs ptisnovs 62007 Oct 19 16:33 org.transcrypt.__runtime__.js
</pre>

<pre>
$ <strong>python3 -m http.server</strong>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Překlad kódu, který manipuluje se seznamy, do JavaScriptu</h2>

<p>Podívejme se nyní na způsob překladu některých základních programových
konstrukcí z&nbsp;Pythonu do JavaScriptu. Oba zmíněné programovací jazyky mají
mnoho společných rysů, což by mělo znamenat, že se i jejich konstrukce budou
podobat. Začneme jednoduchým skriptem, který manipuluje se seznamy &ndash;
vytváří seznam, přidává do něj další prvek a následně celý výsledný seznam
vypíše:</p>

<pre>
x = [1, 2, 3, 4, 5]
&nbsp;
x.append(99)
&nbsp;
print(x)
&nbsp;
for item in x:
    print(item)
</pre>

<p>Po (trans)překladu do JavaScriptu získáme praktický stejný zdrojový kód,
který bude pouze na začátku obsahovat import symbolů, které odpovídají
standardní knihovně jazyka Python (důležitější je však ta část kódu, která
následuje za importem):</p>

<pre>
<i>// Transcrypt'ed from Python, 2023-10-19 16:36:48</i>
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
&nbsp;
&nbsp;
&nbsp;
var __name__ = '__main__';
export var x = [1, 2, 3, 4, 5];
x.append (99);
print (x);
for (var item of x) {
        print (item);
}
&nbsp;
<i>//# sourceMappingURL=lists.map</i>
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Překlad kódu, který manipuluje se slovníky, do JavaScriptu</h2>

<p>Podobně se můžeme přesvědčit o tom, jak se do JavaScriptu přeloží kód, který
manipuluje se slovníky:</p>

<pre>
x = {"foo": 1, "bar": 2, "baz": None}
&nbsp;
print(x)
&nbsp;
for key, value in enumerate(x):
    print(key, value)
</pre>

<p>Výsledný kód v&nbsp;JavaScriptu:</p>

<pre>
<i>// Transcrypt'ed from Python, 2023-10-19 16:36:27</i>
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
&nbsp;
&nbsp;
&nbsp;
var __name__ = '__main__';
export var x = dict ({'foo': 1, 'bar': 2, 'baz': null});
print (x);
for (var [key, value] of enumerate (x)) {
        print (key, value);
}
&nbsp;
<i>//# sourceMappingURL=maps.map</i>
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto případě je
<strong>enumerate</strong> importovaným symbolem a nikoli součástí standardní
knihovny jazyka JavaScript.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Transformace jednoduchých funkcí do JavaScriptu</h2>

<p>Programovací jazyky Python a JavaScript mají velmi podobnou <i>sémantiku</i>
funkcí (funkce jsou plnohodnotnými typy, lze pracovat s&nbsp;uzávěry atd.),
takže by nemělo být větším překvapením, jak se transformují jednoduché funkce
z&nbsp;Pythonu do JavaScriptu. Začneme opravdu triviálním příkladem (jehož
chování však ve skutečnosti již tak triviální není &ndash; záleží na datových
typech):</p>

<pre>
def <strong>add</strong>(a, b):
    return a+b
</pre>

<p>Překlad (transpřeklad) do JavaScriptu je v&nbsp;tomto případě poměrně
přímočarý:</p>

<pre>
<i>// Transcrypt'ed from Python, 2023-10-19 16:39:41</i>
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
&nbsp;
&nbsp;
&nbsp;
var __name__ = '__main__';
&nbsp;
export var add = function (a, b) {
        return a + b;
};
&nbsp;
<i>//# sourceMappingURL=adder1.map</i>
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Překlad rekurzivní funkce a taktéž generátoru <strong>range</strong></h2>

<p>Nyní se podívejme na způsob překladu funkce pro výpočet faktoriálu (která
vrací hodnotu <strong>None</strong> pro neplatný vstup). Při testu této funkce
se používá generátor <strong>range</strong>, který nemá v&nbsp;JavaScriptu
přímou obdobu. Bude tedy zajímavé se podívat na výsledky transpřekladu tohoto
příkladu:</p>

<pre>
def <strong>factorial</strong>(n):
    <i>"""Rekurzivní výpočet faktoriálu."""</i>
    assert isinstance(n, int), "Integer expected"
&nbsp;
    if n &lt; 0:
        return None
    if n == 0:
        return 1
    result = n * factorial(n - 1)
&nbsp;
    assert isinstance(result, int), "Internal error in factorial computation"
    return result
&nbsp;
&nbsp;
def <strong>main</strong>():
    for n in range(0, 11):
        print(n, factorial(n))
&nbsp;
&nbsp;
if __name__ == "__main__":
    main()
</pre>

<p>Samotná funkce pro výpočet faktoriálu se přeloží takto:</p>

<pre>
export var <strong>factorial</strong> = function (n) {
        if (n &lt; 0) {
                return null;
        }
        if (n == 0) {
                return 1;
        }
        var result = n * factorial (n - 1);
        return result;
};
</pre>

<p><div class="rs-tip-major">Poznámka: blok s&nbsp;<strong>assert</strong>
magicky zmizel :-)</div></p>

<p>A programová smyčka s&nbsp;<strong>range</strong> byla přeložena do
explicitně zapsané počítané smyčky typu <strong>for</strong>:</p>

<pre>
for (var n = 0; n &lt; 11; n++) {
        print (n, factorial (n));
}
</pre>

<p>Celý program po překladu do JavaScriptu vypadá takto:</p>

<pre>
<i>// Transcrypt'ed from Python, 2023-10-19 16:44:39</i>
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
&nbsp;
&nbsp;
&nbsp;
var __name__ = '__main__';
&nbsp;
export var <strong>factorial</strong> = function (n) {
        if (n &lt; 0) {
                return null;
        }
        if (n == 0) {
                return 1;
        }
        var result = n * factorial (n - 1);
        return result;
};
&nbsp;
export var <strong>main</strong> = function () {
        for (var n = 0; n &lt; 11; n++) {
                print (n, factorial (n));
        }
};
if (__name__ == '__main__') {
        main ();
}
&nbsp;
<i>//# sourceMappingURL=factorial.map</i>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Překlad uzávěru z&nbsp;Pythonu do JavaScriptu</h2>

<p>Již v&nbsp;předchozích kapitolách jsme si řekli, že jak jazyk Python, tak i
JavaScript mají podobný přístup k&nbsp;sémantice funkcí. Týká se to i podpory
uzávěrů, kdy má funkce (resp.&nbsp;přesněji řečeno kód uvnitř nějaké funkce)
přístup k&nbsp;nelokálním symbolům. Tuto problematiku si můžeme ukázat na
realizaci jednoduchého čítače s&nbsp;konstruktorem
<strong>createCounter</strong>, jehož funkce (interní funkce
<strong>next</strong>) přistupuje a dokonce i mění nelokální symbol
<strong>counter</strong>:</p>

<pre>
def <strong>createCounter</strong>():
    counter = 0
    def <strong>next</strong>():
        nonlocal counter
        counter += 1
        return counter
    return next
&nbsp;
&nbsp;
&nbsp;
<i>#</i>
<i># Spusteni testu.</i>
<i>#</i>
def <strong>main</strong>():
    counter1 = createCounter()
    counter2 = createCounter()
    for i in range(1,11):
        result1 = counter1()
        result2 = counter2()
        print("Iteration #%d" % i)
        print("    Counter1: %d" % result1)
        print("    Counter2: %d" % result2)
&nbsp;
&nbsp;
main()
</pre>

<p>Překlad tohoto demonstračního příkladu do JavaScriptu je v&nbsp;tomto
případě idiomatický, protože JavaScript (na rozdíl od Pythonu) nemá důvod pro
použití speciálního <i>sémantického</i> a současně i <i>syntaktického</i>
pravidla pro přístup k&nbsp;nelokálnímu symbolu:</p>

<pre>
<i>// Transcrypt'ed from Python, 2023-10-19 16:42:46</i>
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
&nbsp;
&nbsp;
&nbsp;
var __name__ = '__main__';
&nbsp;
export var <strong>createCounter</strong> = function () {
        var counter = 0;
        var <strong>py_next</strong> = function () {
                counter++;
                return counter;
        };
        return py_next;
};
&nbsp;
export var <strong>main</strong> = function () {
        var counter1 = createCounter ();
        var counter2 = createCounter ();
        for (var i = 1; i &lt; 11; i++) {
                var result1 = counter1 ();
                var result2 = counter2 ();
                print (__mod__ ('Iteration #%d', i));
                print (__mod__ ('    Counter1: %d', result1));
                print (__mod__ ('    Counter2: %d', result2));
        }
};
main ();
&nbsp;
<i>//# sourceMappingURL=counter_closure.map</i>
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
canvas = document.getElementById('canvas')
context = canvas.getContext('2d')

context.font = '60pt Arial'
context.fillStyle = 'darkblue'
context.strokeStyle = 'navyblue'

context.fillText('Hello Canvas', canvas.width / 2 - 210, canvas.height / 2 + 15)
context.strokeText('Hello Canvas', canvas.width / 2 - 210, canvas.height / 2 + 15)
</pre>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Canvas&lt;/title&gt;
        &lt;style&gt;
            body {
              background: #dddddd;
            }
           
            #canvas {
              margin: 10px;
              padding: 10px;
              background: #ffffff;
              border: thin inset #aaaaaa;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;canvas id='canvas' width='800' height='600'&gt;Canvas not supported&lt;/canvas&gt;
        &lt;script type="module"&gt;import * as canvas from "./__target__/canvas1.js";
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<pre>
// Transcrypt'ed from Python, 2023-10-20 14:52:48
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
var __name__ = '__main__';
export var canvas = document.getElementById ('canvas');
export var context = canvas.getContext ('2d');
context.font = '60pt Arial';
context.fillStyle = 'darkblue';
context.strokeStyle = 'navyblue';
context.fillText ('Hello Canvas', canvas.width / 2 - 210, canvas.height / 2 + 15);
context.strokeText ('Hello Canvas', canvas.width / 2 - 210, canvas.height / 2 + 15);

//# sourceMappingURL=canvas1.map
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<pre>
canvas = document.getElementById('canvas')
context = canvas.getContext('2d')

context.fillStyle = 'darkblue'
context.beginPath();
context.moveTo(75, 50);
context.lineTo(100, 75);
context.lineTo(100, 25);
context.fill();

context.fillStyle = 'darkred'
context.beginPath();
context.moveTo(225, 50);
context.lineTo(200, 75);
context.lineTo(200, 25);
context.fill();

context.strokeStyle = 'darkgreen'
context.lineWidth = 10;
context.beginPath();
context.moveTo(75, 125);
context.quadraticCurveTo(25, 125, 25, 162.5);
context.quadraticCurveTo(25, 200, 50, 200);
context.quadraticCurveTo(50, 220, 30, 225);
context.quadraticCurveTo(60, 220, 65, 200);
context.quadraticCurveTo(125, 200, 125, 162.5);
context.quadraticCurveTo(125, 125, 75, 125);
context.stroke();
</pre>

<pre>
// Transcrypt'ed from Python, 2023-10-20 14:52:22
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
var __name__ = '__main__';
export var canvas = document.getElementById ('canvas');
export var context = canvas.getContext ('2d');
context.fillStyle = 'darkblue';
context.beginPath ();
context.moveTo (75, 50);
context.lineTo (100, 75);
context.lineTo (100, 25);
context.fill ();
context.fillStyle = 'darkred';
context.beginPath ();
context.moveTo (225, 50);
context.lineTo (200, 75);
context.lineTo (200, 25);
context.fill ();
context.strokeStyle = 'darkgreen';
context.lineWidth = 10;
context.beginPath ();
context.moveTo (75, 125);
context.quadraticCurveTo (25, 125, 25, 162.5);
context.quadraticCurveTo (25, 200, 50, 200);
context.quadraticCurveTo (50, 220, 30, 225);
context.quadraticCurveTo (60, 220, 65, 200);
context.quadraticCurveTo (125, 200, 125, 162.5);
context.quadraticCurveTo (125, 125, 75, 125);
context.stroke ();

//# sourceMappingURL=canvas2.map
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty určené pro transpilaci do JavaScriptu, které
jsme si v&nbsp;dnešním článku ukázali, naleznete společně
s&nbsp;transpilovanými výsledky na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady (pro jejich transpřeklad je nutné mít
nainstalovánu některou z&nbsp;podporovaných verzí Pythonu 3, a pro dnešní
příklady i výše popsaný nástroj <strong>transcrypt</strong>):</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>factorial.py</td><td>výpočet faktoriálu realizovaný v&nbsp;Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/factorial.py">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/factorial.py</a></td></tr>
<tr><td> 2</td><td>factorial.js</td><td>výsledek transpřekladu příkladu <strong>factorial.py</strong> do JavaScriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/factorial.js">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/factorial.js</a></td></tr>
<tr><td> 3</td><td>lists.py</td><td>základní práce se seznamy v&nbsp;Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/lists.py">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/lists.py</a></td></tr>
<tr><td> 4</td><td>lists.js</td><td>výsledek transpřekladu příkladu <strong>lists.py</strong> do JavaScriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/lists.js">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/lists.js</a></td></tr>
<tr><td> 5</td><td>maps.py</td><td>základní práce s&nbsp;mapami (slovníky) v&nbsp;Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/maps.py">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/maps.py</a></td></tr>
<tr><td> 6</td><td>maps.js</td><td>výsledek transpřekladu příkladu <strong>maps.py</strong> do JavaScriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/maps.js">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/maps.js</a></td></tr>
<tr><td> 7</td><td>adder.py</td><td>jednoduchá funkce pro součet dvou hodnot</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/adder.py">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/adder.py</a></td></tr>
<tr><td> 8</td><td>adder.js</td><td>výsledek transpřekladu příkladu <strong>adder.py</strong> do JavaScriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/adder.js">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/adder.js</a></td></tr>
<tr><td> 9</td><td>counter_closure.py</td><td>čítač realizovaný s&nbsp;využitím uzávěru v&nbsp;Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/counter_closure.py">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/counter_closure.py</a></td></tr>
<tr><td>10</td><td>counter_closure.js</td><td>výsledek transpřekladu příkladu <strong>counter_closure.py</strong> do JavaScriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/counter_closure.js">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/counter_closure.js</a></td></tr>
<tr><td>11</td><td>hello.py</td><td>demonstrační příklad dodávaný přímo s&nbsp;Transcryptem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/hello.py">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/hello.py</a></td></tr>
<tr><td>12</td><td>hello.js</td><td>výsledek transpřekladu příkladu <strong>hello.py</strong> do JavaScriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/hello.js">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/hello.js</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>canvas1.html</td><td>HTML stránka s&nbsp;kreslicí plochou a načtením skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/canvas1.html">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/canvas1.html</a></td></tr>
<tr><td>14</td><td>canvas1.py</td><td>vykreslení textu na kreslicí plochu naprogramované v&nbsp;Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/canvas1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/canvas1.py</a></td></tr>
<tr><td>15</td><td>canvas1.js</td><td>výsledek transpřekladu příkladu <strong>canvas1.py</strong> do JavaScriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/canvas1.js">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/canvas1.js</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>canvas2.html</td><td>HTML stránka s&nbsp;kreslicí plochou a načtením skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/canvas2.html">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/canvas2.html</a></td></tr>
<tr><td>17</td><td>canvas2.py</td><td>vykreslení cesty složené ze křivek na kreslicí plochu naprogramované v&nbsp;Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/canvas2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/canvas2.py</a></td></tr>
<tr><td>18</td><td>canvas2.js</td><td>výsledek transpřekladu příkladu <strong>canvas2.py</strong> do JavaScriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/canvas2.js">https://github.com/tisnik/most-popular-python-libs/blob/master/transcrypt/canvas2.js</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránky projektu Transcrypt<br />
<a href="https://www.transcrypt.org/">https://www.transcrypt.org/</a>
</a>

<li>Balíček Transcrypt na PyPi<br />
<a href="https://pypi.org/project/Transcrypt/">https://pypi.org/project/Transcrypt/</a>
</a>

<li>Transcrypt na GitHubu<br />
<a href="https://github.com/TranscryptOrg/Transcrypt">https://github.com/TranscryptOrg/Transcrypt</a>
</a>

<li>Transcrypt: getting started<br />
<a href="https://www.transcrypt.org/docs/html/installation_use.html">https://www.transcrypt.org/docs/html/installation_use.html</a>
</a>

<li>Google Closure Compiler<br />
<a href="https://github.com/google/closure-compiler">https://github.com/google/closure-compiler</a>
</a>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/</a>
</a>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy (2.část)<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-2-cast/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-2-cast/</a>
</a>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy (3)<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-3/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-3/</a>
</a>

<li>PyScript<br />
<a href="https://pyscript.net/">https://pyscript.net/</a>
</li>

<li>PyScript na GitHubu<br />
<a href="https://github.com/pyscript/pyscript">https://github.com/pyscript/pyscript</a>
</li>

<li>Getting started with PyScript<br />
<a href="https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md">https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md</a>
</li>

<li>PyScript examples<br />
<a href="https://github.com/pyscript/pyscript/tree/main/examples">https://github.com/pyscript/pyscript/tree/main/examples</a>
</li>

<li>What is PyScript<br />
<a href="https://docs.pyscript.net/latest/concepts/what-is-pyscript.html">https://docs.pyscript.net/latest/concepts/what-is-pyscript.html</a>
</li>

<li>Pyodide<br />
<a href="https://pyodide.org/en/stable/">https://pyodide.org/en/stable/</a>
</li>

<li>PyScript: JavaScript and Python Interoperability<br />
<a href="https://www.jhanley.com/blog/pyscript-javascript-and-python-interoperability/">https://www.jhanley.com/blog/pyscript-javascript-and-python-interoperability/</a>
</li>

<li>Pyscript: JavaScript Event Callbacks<br />
<a href="https://www.jhanley.com/blog/pyscript-javascript-callbacks/">https://www.jhanley.com/blog/pyscript-javascript-callbacks/</a>
</li>

<li>Compiling to WebAssembly: It’s Happening!<br />
<a href="https://hacks.mozilla.org/2015/12/compiling-to-webassembly-its-happening/">https://hacks.mozilla.org/2015/12/compiling-to-webassembly-its-happening/</a>
</li>

<li>WebAssembly<br />
<a href="https://webassembly.org/">https://webassembly.org/</a>
</li>

<li>Blogy o WASM a Emscripten<br />
<a href="https://www.jamesfmackenzie.com/sitemap/#emscripten">https://www.jamesfmackenzie.com/sitemap/#emscripten</a>
</li>

<li>wat2wasm demo<br />
<a href="https://webassembly.github.io/wabt/demo/wat2wasm/">https://webassembly.github.io/wabt/demo/wat2wasm/</a>
</li>

<li>WABT: The WebAssembly Binary Toolkit<br />
<a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>
</li>

<li>Programming using Web Assembly<br />
<a href="https://medium.com/@alexc73/programming-using-web-assembly-c4c73a4e09a9">https://medium.com/@alexc73/programming-using-web-assembly-c4c73a4e09a9</a>
</li>

<li>Experiments with image manipulation in WASM using Go<br />
<a href="https://agniva.me/wasm/2018/06/18/shimmer-wasm.html">https://agniva.me/wasm/2018/06/18/shimmer-wasm.html</a>
</li>

<li>Fable<br />
<a href="https://fable.io/">https://fable.io/</a>
</li>

<li>Využití WebAssembly z&nbsp;programovacího jazyka Go<br />
<a href="https://www.root.cz/clanky/vyuziti-webassembly-z-programovaciho-jazyka-go/">https://www.root.cz/clanky/vyuziti-webassembly-z-programovaciho-jazyka-go/</a>
</li>

<li>WebAssembly prošlo standardizací ve W3C, byla vydána verze 1.0<br />
<a href="https://www.root.cz/zpravicky/webassembly-proslo-standardizaci-ve-w3c-byla-vydana-verze-1-0/">https://www.root.cz/zpravicky/webassembly-proslo-standardizaci-ve-w3c-byla-vydana-verze-1-0/</a>
</li>

<li>WebAssembly na Wiki Golangu<br />
<a href="https://github.com/golang/go/wiki/WebAssembly">https://github.com/golang/go/wiki/WebAssembly</a>
</li>

<li>The future of WebAssembly &ndash; A look at upcoming features and proposals<br />
<a href="https://blog.scottlogic.com/2018/07/20/wasm-future.html">https://blog.scottlogic.com/2018/07/20/wasm-future.html</a>
</li>

<li>Writing WebAssembly By Hand<br />
<a href="https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html">https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html</a>
</li>

<li>WebAssembly Specification<br />
<a href="https://webassembly.github.io/spec/core/index.html">https://webassembly.github.io/spec/core/index.html</a>
</li>

<li>Index of Instructions<br />
<a href="https://webassembly.github.io/spec/core/appendix/in­dex-instructions.html">https://webassembly.github.io/spec/core/appendix/in­dex-instructions.html</a>
</li>

<li>The WebAssembly Binary Toolkit<br />
<a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>
</li>

<li>Will WebAssembly replace JavaScript? Or Will WASM Make JavaScript More Valuable in Future?<br />
<a href="https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e">https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e</a>
</li>

<li>Roadmap (pro WebAssemly)<br />
<a href="https://webassembly.org/roadmap/">https://webassembly.org/roadmap/</a>
</li>

<li>S-expression<br />
<a href="https://en.wikipedia.org/wiki/S-expression">https://en.wikipedia.org/wiki/S-expression</a>
</li>

<li>Understanding WebAssembly text format<br />
<a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Under­standing_the_text_format">https://developer.mozilla.org/en-US/docs/WebAssembly/Under­standing_the_text_format</a>
</li>

<li>Learning Golang through WebAssembly – Part 1, Introduction and setup<br />
<a href="https://www.aaron-powell.com/posts/2019–02–04-golang-wasm-1-introduction/">https://www.aaron-powell.com/posts/2019–02–04-golang-wasm-1-introduction/</a>
</li>

<li>Learning Golang through WebAssembly – Part 2, Writing your first piece of Go<br />
<a href="https://www.aaron-powell.com/posts/2019–02–05-golang-wasm-2-writing-go/">https://www.aaron-powell.com/posts/2019–02–05-golang-wasm-2-writing-go/</a>
</li>

<li>Learning Golang through WebAssembly – Part 3, Interacting with JavaScript from Go<br />
<a href="https://www.aaron-powell.com/posts/2019–02–06-golang-wasm-3-interacting-with-js-from-go/">https://www.aaron-powell.com/posts/2019–02–06-golang-wasm-3-interacting-with-js-from-go/</a>
</li>

<li>Golang webassembly (wasm) testing with examples<br />
<a href="https://jelinden.fi/blog/golang-webassembly-wasm-testing-with-examples/qB7Tb2KmR">https://jelinden.fi/blog/golang-webassembly-wasm-testing-with-examples/qB7Tb2KmR</a>
</li>

<li>Use Cases (of WebAssembly)<br />
<a href="https://webassembly.org/docs/use-cases/">https://webassembly.org/docs/use-cases/</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>A quick guide about Python implementations<br />
<a href="https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321">https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321</a>
</li>

<li>How Brython works<br />
<a href="https://github.com/brython-dev/brython/wiki/How%20Brython%20works">https://github.com/brython-dev/brython/wiki/How%20Brython%20works</a>
</li>

<li>Brython &ndash; A Python 3 implementation for client-side web programming<br />
<a href="http://www.brython.info/">http://www.brython.info/</a>
</li>

<li>Brython videos and talks<br />
<a href="https://github.com/brython-dev/brython/wiki/Brython-videos-and-talks">https://github.com/brython-dev/brython/wiki/Brython-videos-and-talks</a>
</li>

<li>What is Brython?<br />
<a href="https://medium.com/frontendweb/what-is-brython-6edb424b07f6">https://medium.com/frontendweb/what-is-brython-6edb424b07f6</a>
</li>

<li>Python in browser (tabulka s&nbsp;porovnáními)<br />
<a href="http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html">http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html</a>
</li>

<li>JavaScript is Assembly Language for the Web: Sematic Markup is Dead! Clean vs. Machine-coded HTML<br />
<a href="http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx">http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx</a>
</li>

<li>pyscript VS brython<br />
<a href="https://www.libhunt.com/compare-pyscript-vs-brython">https://www.libhunt.com/compare-pyscript-vs-brython</a>
</li>

<li>PyScript - Run Python in the Browser! THE END of JavaScript???<br />
<a href="https://www.youtube.com/watch?v=du8vQC44PC4">https://www.youtube.com/watch?v=du8vQC44PC4</a>
</li>

<li>PyScript is Python in Your Browser<br />
<a href="https://www.youtube.com/watch?v=MJvCeKwr4z4">https://www.youtube.com/watch?v=MJvCeKwr4z4</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>Matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Galerie grafů vytvořených v&nbsp;Matplotlibu<br />
<a href="https://matplotlib.org/3.2.1/gallery/">https://matplotlib.org/3.2.1/gallery/</a>
</li>

<li>Replacing Javascript with Python<br />
<a href="https://stackoverflow.com/questions/69510962/replacing-javascript-with-python">https://stackoverflow.com/questions/69510962/replacing-javascript-with-python</a>
</li>

<li>Can Python Replace Javascript in the Future?<br />
<a href="https://dev.to/katholder/can-python-replace-javascript-in-the-future-4bbn">https://dev.to/katholder/can-python-replace-javascript-in-the-future-4bbn</a>
</li>

<li>asm.js<br />
<a href="http://asmjs.org/">http://asmjs.org/</a>
</li>

<li>asm.js: Working Draft<br />
<a href="http://asmjs.org/spec/latest/">http://asmjs.org/spec/latest/</a>
</li>

<li>Manual asm.js Demonstration<br />
<a href="https://www.youtube.com/watch?v=qkiqMuf5M84">https://www.youtube.com/watch?v=qkiqMuf5M84</a>
</li>

<li>asm.js - frequently asked questions<br />
<a href="http://asmjs.org/faq.html">http://asmjs.org/faq.html</a>
</li>

<li>When asm.js is faster than normal JS code, why should I write new code in JS?<br />
<a href="https://stackoverflow.com/questions/16527195/when-asm-js-is-faster-than-normal-js-code-why-should-i-write-new-code-in-js">https://stackoverflow.com/questions/16527195/when-asm-js-is-faster-than-normal-js-code-why-should-i-write-new-code-in-js</a>
</li>

<li>Faster Canvas Pixel Manipulation with Typed Arrays<br />
<a href="https://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays/">https://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

<!--
    06:00 - 07:00  51000
    07:00 - 08:00  52000
    08:00 - 09:00  53000
    09:00 - 10:00  54000
    10:00 - 11:00  55000
    11:00 - 12:00  56000
    -->
