<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Knihovna Jedi: doplňování kódu a statická analýza kódu v Pythonu (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Knihovna Jedi: doplňování kódu a statická analýza kódu v Pythonu (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části článku o knihovně Jedi si ukážeme další funkce dostupné při statické analýze kódu napsaného v Pythonu. Samozřejmě nezapomeneme na ukázku propojení knihovny Jedi s textovým editorem Atom a taktéž s modulem určeným pro slavný Emacs.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Knihovna Jedi: doplňování kódu a statická analýza kódu v Pythonu (dokončení)</a></p>
<p><a href="#k02">*** 2. Proč dát přednost knihovně Jedi před konkurenčními projekty?</a></p>

<p><a href="#k02">*** 2. Použití metody <strong>follow_definition()</strong> pro přečtení podrobnějších informací a navrhovaném identifikátoru</a></p>
<p><a href="#k03">*** 3. Analýza volání funkce</a></p>
<p><a href="#k04">*** 4. Ukázka použití metody <strong>Script.call_signatures()</strong></a></p>
<p><a href="#k05">*** 5. Složitější příklad pro analýzu volaných funkcí</a></p>
<p><a href="#k06">*** 6. Volání metod namísto obyčejných funkcí</a></p>
<p><a href="#k07">*** 7. Malé zopakování z&nbsp;minula &ndash; dynamické chování Pythonu a jeho vliv na funkci knihovny Jedi</a></p>
<p><a href="#k08">*** 8. Podrobnější informace o jménech funkcí v&nbsp;případě, že kód nelze staticky jednoznačně analyzovat</a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. Použití knihovny Jedi společně s&nbsp;Emacsem</a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Knihovna Jedi: doplňování kódu a statická analýza kódu v Pythonu (dokončení)</h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Proč dát přednost knihovně Jedi před konkurenčními projekty?</h2>




<p><a name="k02"></a></p>
<h2 id="k02">2. Použití metody <strong>follow_definition()</strong> pro přečtení podrobnějších informací a navrhovaném identifikátoru</h2>





<p><a name="k03"></a></p>
<h2 id="k03">3. Analýza volání funkce</h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. Ukázka použití metody <strong>Script.call_signatures()</strong></h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. Složitější příklad pro analýzu volaných funkcí</h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. Volání metod namísto obyčejných funkcí</h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. Malé zopakování z&nbsp;minula &ndash; dynamické chování Pythonu a jeho vliv na funkci knihovny Jedi</h2>

<pre>
function __main__.answer in test.py:8
function __main__.answer in test.py:12
function __main__.answer in test.py:16
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import jedi

src = '''
class anumber:
    """Docstring for a class."""
    pass


if random.random() &lt; 0.5:
    def answer():
        """1st variant of answer function."""
        return "42"
elif random.random() &lt; 0.5:
    def answer():
        """2nd variant of answer function."""
        return 42
else:
    def answer():
        """3rd variant of answer function."""
        return [42]


def anagrams(word):
    """Very primitive anagram generator."""
    if len(word) &lt; 2:
        return word
    else:
        tmp = []
        for i, letter in enumerate(word):
            for j in anagrams(word[:i]+word[i+1:]):
                tmp.append(j+letter)
    return tmp

ann = lambda x,y: x+y
anybody=True
print(answer())'''


def print_definitions(definitions):
    if not definitions:
        print("not found")
        return

    for definition in definitions:
        print("{type} {name} in {module}.py:{line}".format(type=definition.type,
                                                           name=definition.full_name,
                                                           module=definition.module_name,
                                                           line=definition.line))


lines = src.count('\n')
script = jedi.Script(src, lines+1, len('print('), 'test.py')

definitions = script.goto_definitions()

print_definitions(definitions)
</pre>




<p><a name="k08"></a></p>
<h2 id="k08">8. Podrobnější informace o jménech funkcí v&nbsp;případě, že kód nelze staticky jednoznačně analyzovat</h2>

<pre>
     1
     2  class anumber:
     3      """Docstring for a class."""
     4      pass
     5
     6
     7  if random.random() &lt; 0.5:
     8      def answer():
     9          """1st variant of answer function."""
    10          return "42"
    11  elif random.random() &lt; 0.5:
    12      def answer():
    13          """2nd variant of answer function."""
    14          return 42
    15  else:
    16      def answer():
    17          """3rd variant of answer function."""
    18          return [42]
    19
    20
    21  def anagrams(word):
    22      """Very primitive anagram generator."""
    23      if len(word) &lt; 2:
    24          return word
    25      else:
    26          tmp = []
    27          for i, letter in enumerate(word):
    28              for j in anagrams(word[:i]+word[i+1:]):
    29                  tmp.append(j+letter)
    30      return tmp
    31
    32  ann = lambda x,y: x+y
    33  anybody=True
    34  an
</pre>

<pre>
anagrams
----------------------------------------
function __main__.anagrams in test.py:21
anagrams(word)

Very primitive anagram generator.




ann
----------------------------------------
function __main__.<lambda> in test.py:32





answer
----------------------------------------
function __main__.answer in test.py:16
answer()

3rd variant of answer function.




anumber
----------------------------------------
class __main__.anumber in test.py:2
Docstring for a class.




any
----------------------------------------
function any in builtins.py:None
Return True if bool(x) is True for any x in the iterable.

If the iterable is empty, return False.




anybody
----------------------------------------
instance bool in builtins.py:None





</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import jedi

src = '''
class anumber:
    """Docstring for a class."""
    pass


if random.random() &lt; 0.5:
    def answer():
        """1st variant of answer function."""
        return "42"
elif random.random() &lt; 0.5:
    def answer():
        """2nd variant of answer function."""
        return 42
else:
    def answer():
        """3rd variant of answer function."""
        return [42]


def anagrams(word):
    """Very primitive anagram generator."""
    if len(word) &lt; 2:
        return word
    else:
        tmp = []
        for i, letter in enumerate(word):
            for j in anagrams(word[:i]+word[i+1:]):
                tmp.append(j+letter)
    return tmp

ann = lambda x,y: x+y
anybody=True
an'''


def print_definitions(definitions):
    if not definitions:
        print("not found")
        return

    for definition in definitions:
        print("{type} {name} in {module}.py:{line}".format(type=definition.type,
                                                           name=definition.full_name,
                                                           module=definition.module_name,
                                                           line=definition.line))


lines = src.count('\n')
script = jedi.Script(src, lines+1, len('an'), 'test.py')

completions = script.completions()

for completion in completions:
    print(completion.name)
    print("-"*40)
    definitions = completion.follow_definition()
    print_definitions(definitions)
    print(completion.docstring())
    print("\n"*3)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Některé chyby, které v&nbsp;Jedi existují</h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
     1
     2  class C1:
     3      def foo(self):
     4          """Function foo defined in class C1."""
     5          return 1
     6
     7  class C2:
     8      def foo(self):
     9          """Function foo defined in class C2."""
    10          return 2
    11
    12  class C3:
    13      def foo(self):
    14          """Function foo defined in class C3."""
    15          return 2
    16
    17  if True:
    18      obj = C1()
    19  elif True:
    20      obj = C2()
    21  else:
    22      obj = C3()
    23  obj.fo
</pre>

<pre>
foo
----------------------------------------
function __main__.foo in test.py:8
foo(self)

Function foo defined in class C2.
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import jedi

src = '''
class C1:
    def foo(self):
        """Function foo defined in class C1."""
        return 1

class C2:
    def foo(self):
        """Function foo defined in class C2."""
        return 2

class C3:
    def foo(self):
        """Function foo defined in class C3."""
        return 2

if True:
    obj = C1()
elif True:
    obj = C2()
else:
    obj = C3()
obj.fo'''


def print_definitions(definitions):
    if not definitions:
        print("not found")
        return

    for definition in definitions:
        print("{type} {name} in {module}.py:{line}".format(type=definition.type,
                                                           name=definition.full_name,
                                                           module=definition.module_name,
                                                           line=definition.line))


lines = src.count('\n')
script = jedi.Script(src, lines+1, len('obj.fo'), 'test.py')

completions = script.completions()

for completion in completions:
    print(completion.name)
    print("-"*40)
    definitions = completion.follow_definition()
    print_definitions(definitions)
    print(completion.docstring())
    print("\n"*3)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>




<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

wget -o atom.rpm https://atom.io/download/rpm

[root@ibm-x3650m4-01-vm-09 ~]# dnf install atom.rpm
Last metadata expiration check: 1:09:13 ago on Tue 21 Aug 2018 10:00:34 AM EDT.
Dependencies resolved.
================================================================================
 Package          Arch      Version           Repository                   Size
================================================================================
Installing:
 atom             x86_64    1.29.0-0.1        @commandline                131 M
Installing dependencies:
 libXScrnSaver    x86_64    1.2.2-14.fc28     Fedora-Everything            29 k

Transaction Summary
================================================================================
Install  2 Packages

Total size: 131 M
Total download size: 29 k
Installed size: 523 M
Is this ok [y/N]:

Downloading Packages:
libXScrnSaver-1.2.2-14.fc28.x86_64.rpm          1.1 MB/s |  29 kB     00:00    
--------------------------------------------------------------------------------
Total                                           1.0 MB/s |  29 kB     00:00     
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.
Running transaction
  Preparing        :                                                        1/1 
  Installing       : libXScrnSaver-1.2.2-14.fc28.x86_64                     1/2 
  Running scriptlet: libXScrnSaver-1.2.2-14.fc28.x86_64                     1/2 
  Installing       : atom-1.29.0-0.1.x86_64                                 2/2 
  Running scriptlet: atom-1.29.0-0.1.x86_64                                 2/2 
  Verifying        : atom-1.29.0-0.1.x86_64                                 1/2 
  Verifying        : libXScrnSaver-1.2.2-14.fc28.x86_64                     2/2 

Installed:
  atom.x86_64 1.29.0-0.1           libXScrnSaver.x86_64 1.2.2-14.fc28          

Complete!


<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. Použití knihovny Jedi společně s&nbsp;Emacsem</h2>

Alt-X list-packages

<pre>
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t)
 '(package-selected-packages (quote (jedi diffview ##))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady ukazující některé možnosti
knihovny <i>Jedi</i> byly uloženy do Git repositáře, který je dostupný na
adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Popis</th><th>Odkaz</th></tr>
<tr><td> 1</td><td>jedi11_follow_definitions.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/jedi/jedi11_follow_definitions.py">https://github.com/tisnik/presentations/blob/master/jedi/jedi11_follow_definitions.py</a></td></tr>
<tr><td> 2</td><td>jedi12_call_signatures.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/jedi/jedi12_call_signatures.py">https://github.com/tisnik/presentations/blob/master/jedi/jedi12_call_signatures.py</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/jedi/">https://github.com/tisnik/presentations/blob/master/jedi/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/jedi/">https://github.com/tisnik/presentations/blob/master/jedi/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/jedi/">https://github.com/tisnik/presentations/blob/master/jedi/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/jedi/">https://github.com/tisnik/presentations/blob/master/jedi/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/jedi/">https://github.com/tisnik/presentations/blob/master/jedi/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/jedi/">https://github.com/tisnik/presentations/blob/master/jedi/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Jedi - an awesome autocompletion/static analysis library for Python<br />
<a href="https://jedi.readthedocs.io/en/latest/index.html">https://jedi.readthedocs.io/en/latest/index.html</a>
</li>

<li>Jedi API Overview<br />
<a href="https://jedi.readthedocs.io/en/latest/docs/api.html">https://jedi.readthedocs.io/en/latest/docs/api.html</a>
</li>

<li>jedi-vim<br />
<a href="https://github.com/davidhalter/jedi-vim">https://github.com/davidhalter/jedi-vim</a>
</li>

<li>YouCompleteMe: A code-completion engine for Vim<br />
<a href="https://valloric.github.io/YouCompleteMe/">https://valloric.github.io/YouCompleteMe/</a>
</li>

<li>Elpy: Emacs Python Development Environment<br />
<a href="https://github.com/jorgenschaefer/elpy">https://github.com/jorgenschaefer/elpy</a>
</li>

<li>Emacs-Jedi<br />
<a href="https://github.com/tkf/emacs-jedi">https://github.com/tkf/emacs-jedi</a>
</li>

<li>Python Autocomplete Jedi Package<br />
<a href="https://atom.io/packages/autocomplete-python-jedi">https://atom.io/packages/autocomplete-python-jedi</a>
</li>

<li>Autocomplete (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Autocomplete">https://en.wikipedia.org/wiki/Autocomplete</a>
</li>

<li>Seriál Textový editor Vim jako IDE (zde na Root.cz)<br />
<a href="https://www.root.cz/serialy/textovy-editor-vim-jako-ide/">https://www.root.cz/serialy/textovy-editor-vim-jako-ide/</a>
</li>

<li>Jedi.el - Python auto-completion for Emacs<br />
<a href="https://tkf.github.io/emacs-jedi/latest/">https://tkf.github.io/emacs-jedi/latest/</a>
</li>

<li>Jedi: A completion library for Python<br />
<a href="https://www.masteringemacs.org/article/jedi-completion-library-python">https://www.masteringemacs.org/article/jedi-completion-library-python</a>
</li>

<li>Jedi.el - Python auto-completion for Emacs<br />
<a href="https://github.com/tkf/emacs-jedi">https://github.com/tkf/emacs-jedi</a>
</li>

<li>Jedi.el - Python auto-completion for Emacs<br />
<a href="http://tkf.github.io/emacs-jedi/latest/">http://tkf.github.io/emacs-jedi/latest/</a>
</li>

<li>Atom (stránka textového editoru)<br />
<a href="https://atom.io/">https://atom.io/</a>
</li>

<li>el-get (GitHub)<br />
<a href="https://github.com/dimitri/el-get">https://github.com/dimitri/el-get</a>
</li>

<li>MELPA<br />
<a href="https://www.emacswiki.org/emacs/MELPA">https://www.emacswiki.org/emacs/MELPA</a>
</li>

<li>Atom IDE<br />
<a href="https://ide.atom.io/">https://ide.atom.io/</a>
</li>

<li>Sublime Text as Python IDE - jedi<br />
<a href="https://screamingatmyscreen.com/2013/9/sublime-text-as-python-ide-jedi/">https://screamingatmyscreen.com/2013/9/sublime-text-as-python-ide-jedi/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

