<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Validace datových struktur v Pythonu (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Validace datových struktur v Pythonu (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí a současně i závěrečné části článku o knihovnách pro validaci složitých datových struktur v Pythonu si ukážeme způsob použití modulu pytest-voluptuous, který pro validaci využívá minule popsanou knihovnu s nezapamatovatelným názvem Voluptuous.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Validace datových struktur v&nbsp;Pythonu (dokončení)</a></p>
<p><a href="#k02">2. Instalace modulu <strong>pytest-voluptuous</strong> s&nbsp;jeho krátkým otestováním v&nbsp;REPLu</a></p>
<p><a href="#k03">3. První příklad &ndash; základy použití modulu <strong>pytest-voluptuous</strong></a></p>
<p><a href="#k04">4. Výsledek spuštění prvního příkladu</a></p>
<p><a href="#k05">5. Validace složitějších datových struktur (slovníků a seznamů slovníků)</a></p>
<p><a href="#k06">6. Výsledek spuštění druhého příkladu</a></p>
<p><a href="#k07">7. Praktičtější příklad &ndash; validace dat získaných z&nbsp;REST API</a></p>
<p><a href="#k08">8. Zjištění, jestli hodnota odpovídá UUID verze 4</a></p>
<p><a href="#k09">9. Výsledek běhu třetího demonstračního příkladu</a></p>
<p><a href="#k10">10. Validace složitější datové struktury získané přes REST API &ndash; první varianta</a></p>
<p><a href="#k11">11. Základní validace hodnot uložených ve slovníku</a></p>
<p><a href="#k12">12. Podrobná validace hodnot uložených ve slovníku</a></p>
<p><a href="#k13">13. Validace slovníků uložených v&nbsp;jiném slovníku</a></p>
<p><a href="#k14">14. Úplný zdrojový kód čtvrtého demonstračního příkladu</a></p>
<p><a href="#k15">15. Výsledek běhu čtvrtého demonstračního příkladu</a></p>
<p><a href="#k16">16. Použití klauzule <strong>Optional</strong></a></p>
<p><a href="#k17">17. Implicitní nastavení volitelných klíčů a konkrétní specifikace klíčů povinných</a></p>
<p><a href="#k18">*** 18. Pátý demonstrační příklad a výsledek jeho spuštění</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Validace datových struktur v&nbsp;Pythonu (dokončení)</h2>

<p>V&nbsp;posledním článku o knihovnách sloužících pro validaci složitých
datových struktur v&nbsp;Pythonu navážeme na <a
href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/">část
první</a> a taktéž <a
href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/">druhou</a>.
Připomeňme si, že v&nbsp;prvním článku jsme si popsali knihovny pojmenované
<i>Schemagic</i> a <i>Schema</i>. Obě tyto knihovny jsou založeny na tom, že
samotný popis validačních schémat je nadeklarován přímo v&nbsp;Pythonu, takže
se případní uživatelé těchto knihoven (což jsou většinou programátoři) nemusí
učit nový <i>DSL</i> (doménově specifický jazyk). Knihovna <i>Schemagic</i> je
zvláštní tím, že kromě vlastní validace provádí i konverzi dat. Ve druhé části
jsme si pak popsali knihovnu s&nbsp;nevyslovitelným názvem <i>Voluptuous</i>.
Autoři této knihovny dbají na to, aby byla validace co nejjednodušší,
tj.&nbsp;aby nebylo nutné tvořit složité třídy (k&nbsp;čemuž vede knihovna
<i>Schema</i>) atd.</p>

<p>Dnes si popíšeme poslední nástroj nazvaný <i>pytest-voluptuous</i>. Jedná se
o sadu tříd obalujících knihovnu <i>Voluptuous</i> takovým způsobem, aby bylo
testování co nejsnazší. Například je přetížen operátor ==, který umožňuje, aby
se data &bdquo;porovnávala&ldquo; se schématem v&nbsp;příkazu
<strong>assert</strong> atd. Připomeňme si, jak může vypadat velmi jednoduché
schéma sloužící pro validaci slovníku obsahujícího tři klíče:</p>

<pre>
user = Schema({"name": str,
               "surname": str,
               "id": pos})
</pre>

<p>Pro samotnou validaci si vytvoříme pomocnou funkci:</p>

<pre>
def <strong>validate</strong>(schema, data):
    try:
        print("\n\n")
        print(schema)
        print(data)
        schema(data)
        print("pass")
    except Exception as e:
        print(e)
</pre>

<p>Validace může probíhat následovně:</p>

<pre>
validate(user, {"name": "Eda",
                "surname": "Wasserfall",
                "id": 1})
&nbsp;
validate(user, {"name": "Eda",
                "id": 1})
&nbsp;
validate(user, {"name": "Eda",
                "surname": "Wasserfall",
                "id": 0})
</pre>

<p>V&nbsp;dalším textu uvidíme, že se celá validace může ještě nepatrně
zjednodušit a bude ji možné velmi snadno použít například v&nbsp;jednotkových
testech.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace modulu <strong>pytest-voluptuous</strong> s&nbsp;jeho krátkým otestováním v&nbsp;REPLu</h2>

<p>Před spuštěním demonstračních příkladů si knihovnu
<strong>pytest-voluptuous</strong> nainstalujeme, a to klasicky s&nbsp;využitím
nástroje <strong>pip3</strong> (nebo <strong>pip</strong>), protože tato
knihovna je <a href="https://pypi.org/project/pytest-voluptuous/">samozřejmě
registrována</a> i na <a href="https://pypi.python.org/pypi">PyPI (Python
Package Index)</a>. Pro jednoduchost provedeme instalaci jen pro právě
aktivního uživatele:.</p>

<pre>
$ <strong>pip3 install --user pytest-voluptuous</strong>
&nbsp;
Downloading/unpacking pytest-voluptuous
  Downloading pytest_voluptuous-1.0.2-py2.py3-none-any.whl
Requirement already satisfied (use --upgrade to upgrade): pytest in /usr/local/lib/python3.4/dist-packages (from pytest-voluptuous)
Downloading/unpacking voluptuous&gt;=0.9.0 (from pytest-voluptuous)
  Downloading voluptuous-0.11.1-py2.py3-none-any.whl
Installing collected packages: pytest-voluptuous, voluptuous
Successfully installed pytest-voluptuous voluptuous
Cleaning up...
</pre>

<p>Pro jistotu si vypíšeme základní informace o této knihovně,
tj.&nbsp;zjistíme, zda je databáze nástroje <strong>pip</strong>
konzistentní:</p>

<pre>
$ <strong>pip3 show pytest-voluptuous</strong>
&nbsp;
---
Name: pytest-voluptuous
Version: 1.0.2
Location: /home/tester/.local/lib/python3.4/site-packages
Requires: voluptuous, pytest
</pre>

<p>Nyní si můžeme základní vlastnosti této knihovny odzkoušet přímo
v&nbsp;interaktivní smyčce REPL programovacího jazyka Python. Knihovnu jsme
instalovali pro Python 3.x, takže musíme spustit i odpovídající interpret:</p>

<pre>
$ <strong>python3</strong>
</pre>

<p>Spuštění interpretru:</p>

<pre>
Python 3.4.3 (default, Nov 28 2017, 16:41:13) 
[GCC 4.8.4] on linux
Type "help", "copyright", "credits" or "license" for more information.
</pre>

<p>Import třídy <strong>S</strong> z&nbsp;modulu
<strong>pytest_voluptuous</strong> (skutečně se používá pouze S a nikoli
Schema):</p>

<pre>
&gt;&gt;&gt; from pytest_voluptuous import S
</pre>

<p>Definice jednoduchého schématu, které odpovídá schématu uvedenému <a
href="#k01">v&nbsp;první kapitole</a>:</p>

<pre>
&gt;&gt;&gt; user = S({"name": str, "surname": str, "id": int})
</pre>

<p>A konečně si můžeme ukázat, jak se provádí validace pomocí příkazu
<strong>assert</strong> a přetíženého operátoru ==:</p>

<pre>
&gt;&gt;&gt; assert user == {"name": "Eda", "surname": "Wasserfall", "id": 1}
&nbsp;
&gt;&gt;&gt; assert user == {"name": "Eda", "surname": "Wasserfall", "id": "xyzzy"}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AssertionError
&nbsp;
&gt;&gt;&gt; assert user == {"name": "Eda", "surname": "Wasserfall"}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AssertionError
</pre>

<p>Podrobnosti budou samozřejmě uvedeny v&nbsp;navazujících kapitolách.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První příklad &ndash; základy použití modulu <strong>pytest-voluptuous</strong></h2>

<p>Ukažme si nyní zdrojový kód prvního příkladu, v&nbsp;němž modul
<strong>pytest-voluptuous</strong> použijeme. Začátek je jednoduchý &ndash;
naimportujeme především třídu <strong>S</strong> z&nbsp;modulu
<strong>pytest_voluptuous</strong> a pro další testy i třídy
<strong>All</strong> a <strong>Length</strong> z&nbsp;modulu
<strong>voluptuous.validators</strong> (tyto třídy použijeme později):</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from pytest_voluptuous import S
from voluptuous.validators import All, Length
</pre>

<p>Dále definujeme validační schéma představující libovolně dlouhý seznam
celých čísel, čísel s&nbsp;plovoucí řádovou čárkou či čísel komplexních
(v&nbsp;obecně libovolném pořadí a počtu):</p>

<pre>
number_list = S([int, float, complex])
</pre>

<p>Následuje sada testů (už nyní si můžete tipnout, které dopadnou
v&nbsp;pořádku a které nikoli). Jak je u knihovny <i>Pytest</i> zvykem,
začínají testovací funkce prefixem &bdquo;test&ldquo;:</p>

<pre>
def <strong>test1</strong>():
    assert [1, 2, 3] == number_list
    assert [1, 2, 3.2] == number_list
&nbsp;
&nbsp;
def <strong>test2</strong>():
    assert [2j, 4j, 5j] == number_list
    assert [1+2j, 3+4j, 5j] == number_list
&nbsp;
&nbsp;
def <strong>test3</strong>():
    assert [1, "2", 3] == number_list
&nbsp;
&nbsp;
def <strong>test4</strong>():
    assert ["1", "2", "3"] == number_list
&nbsp;
&nbsp;
def <strong>test5</strong>():
    assert (1, 2, 3) == number_list
</pre>

<p>Druhé schéma představuje libovolně dlouhý seznam binárních číslic:</p>

<pre>
binary_numbers = S([0, 1])
&nbsp;
def <strong>test6</strong>():
    assert binary_numbers == [0, 0, 0]
    assert binary_numbers == [1, 1, 0]
&nbsp;
&nbsp;
def <strong>test7</strong>():
    assert binary_numbers == [1, 2, 3]
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto příkladu
naleznete na adrese <a
href="https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-1">https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-1</a>.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výsledek spuštění prvního příkladu</h2>

<p>Dnešní první demonstrační příklad nebudeme spouštět přímo intepretrem
Pythonu, ale přes <strong>pytest</strong>, tedy takto:</p>

<pre>
$ <strong>pytest pytest-voluptuous-demo1.py</strong>
</pre>

<p>Výsledkem by měl být přibližně následující výstup (samozřejmě se mohou
nepatrně lišit verze Pythonu i knihoven, ovšem testy by měly mít shodný
průběh). Povšimněte si, že z&nbsp;celkem sedmi testů čtyři testy nalezly
nevalidní data, přesně podle očekávání:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.4.3, pytest-3.3.1, py-1.5.2, pluggy-0.6.0
rootdir: /home/tester/temp/python/python-schema-checks/pytest-voluptuous-demo1, inifile:
plugins: voluptuous-1.0.2
collected 7 items
&nbsp;
pytest-voluptuous-demo1.py ..FFF.F                                       [100%]
&nbsp;
=================================== FAILURES ===================================
____________________________________ test3 _____________________________________
&nbsp;
    def test3():
&gt;       assert [1, "2", 3] == number_list
E       assert failed to validation error(s):
E         - 1: expected complex @ data[1]
&nbsp;
pytest-voluptuous-demo1.py:21: AssertionError
____________________________________ test4 _____________________________________
&nbsp;
    def test4():
&gt;       assert ["1", "2", "3"] == number_list
E       assert failed to validation error(s):
E         - 0: expected complex @ data[0]
E         - 1: expected complex @ data[1]
E         - 2: expected complex @ data[2]
&nbsp;
pytest-voluptuous-demo1.py:25: AssertionError
____________________________________ test5 _____________________________________
&nbsp;
    def test5():
&gt;       assert (1, 2, 3) == number_list
E       assert failed to validation error(s):
E         - : expected a list
&nbsp;
pytest-voluptuous-demo1.py:29: AssertionError
____________________________________ test7 _____________________________________
&nbsp;
    def test7():
&gt;       assert binary_numbers == [1, 2, 3]
E       assert failed to validation error(s):
E         - 1: not a valid value @ data[1]
E         - 2: not a valid value @ data[2]
&nbsp;
pytest-voluptuous-demo1.py:40: AssertionError
====================== 4 failed, 3 passed in 0.05 seconds ======================
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Validace složitějších datových struktur (slovníků a seznamů slovníků)</h2>

<p>V&nbsp;praxi se velmi často setkáme s&nbsp;tím, že je zapotřebí validovat
nejenom &bdquo;jednoduchý&ldquo; slovník, ale například i seznam (či n-tici)
slovníků. Připomeňme si, že deklarace validačního kritéria pro jednoduchý
slovník vypadá takto:</p>

<pre>
user = S({"name": str,
          "surname": str,
          "id": pos})
</pre>

<p>Validační kritérium pro seznam takových slovníků se zapíše následovně
(povšimněte si, se vlastně jedná o kombinaci kritéria známého <a
href="#k03">z&nbsp;prvního demonstračního příkladu</a> a kritéria zapsaného
před tímto odstavcem:</p>

<pre>
users = S(<strong>[</strong>S({"name": str,
             "surname": str,
             "id": pos})<strong>]</strong>)
</pre>

<p>Takto zapsaná validační kritéria jsou použita v&nbsp;dnešním druhém
demonstračním příkladu, jehož zdrojový kód vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from pytest_voluptuous import S, Partial, Exact
from voluptuous import Invalid
from voluptuous.validators import All, Length
</pre>

<p>Pomocná validační funkce pro celá kladná (přirozená) čísla:</p>

<pre>
def <strong>pos</strong>(value):
    if type(value) is not int or value &lt;= 0:
        raise Invalid("positive integer value expected, but got {v} instead".format(v=value))
</pre>

<p>Samotné validační schéma pro jediný slovník:</p>

<pre>
user = S({"name": str,
          "surname": str,
          "id": pos})
&nbsp;
&nbsp;
def <strong>test1</strong>():
    assert user == {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1}
&nbsp;
&nbsp;
def <strong>test2</strong>():
    assert user == {"name": "Eda",
                    "id": 1}
&nbsp;
&nbsp;
def <strong>test3</strong>():
    assert user == {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 0}
</pre>

<p>Validační schéma pro seznam slovníků:</p>

<pre>
users = S([S({"name": str,
             "surname": str,
             "id": pos})])
&nbsp;
def <strong>test4</strong>():
    assert users == [{"name": "Eda",
                      "surname": "Wasserfall",
                      "id": 1},
                     {"name": "Varel",
                      "surname": "Frištenský",
                      "id": 2}]
&nbsp;
def <strong>test5</strong>():
    assert users == [{"name": "Eda",
                      "surname": "Wasserfall",
                      "id": 0},
                     {"surname": "Frištenský",
                      "id": 2}]
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto příkladu
naleznete na adrese <a
href="https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-2">https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-2</a>.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Výsledek spuštění druhého příkladu</h2>

<p>Opět si ukažme, jak bude vypadat výsledek spuštění dnešního druhého
demonstračního příkladu. Opět použijeme příkaz <strong>pytest</strong>:</p>

<pre>
$ <strong>pytest pytest-voluptuous-demo2.py</strong>
</pre>

<p>Samotný výsledek pěti testů:</p>

<pre>
____________________________________ test2 _____________________________________
&nbsp;
    def test2():
&gt;       assert user == {"name": "Eda",
                        "id": 1}
E       AssertionError: assert failed to validation error(s):
E         - surname: required key not provided @ data['surname']
&nbsp;
pytest-voluptuous-demo2.py:26: AssertionError
____________________________________ test3 _____________________________________
&nbsp;
    def test3():
&gt;       assert user == {"name": "Eda",
                        "surname": "Wasserfall",
                        "id": 0}
E       AssertionError: assert failed to validation error(s):
E         - id: positive integer value expected, but got 0 instead for dictionary value @ data['id']
&nbsp;
pytest-voluptuous-demo2.py:31: AssertionError
____________________________________ test5 _____________________________________
&nbsp;
    def test5():
&gt;       assert users == [{"name": "Eda",
                          "surname": "Wasserfall",
                          "id": 0},
                         {"surname": "Frištenský",
                          "id": 2}]
E       AssertionError: assert failed to validation error(s):
E         - 0.id: positive integer value expected, but got 0 instead for dictionary value @ data[0]['id']
&nbsp;
pytest-voluptuous-demo2.py:49: AssertionError
====================== 3 failed, 2 passed in 0.05 seconds ======================
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Praktičtější příklad &ndash; validace dat získaných z&nbsp;REST API</h2>

<p>Zkusme se nyní zaměřit již na praktičtěji orientované příklady. Nejprve si
vyzkoušejme veřejně dostupnou webovou službu, která po požadavku typu GET
poslaného na adresu <a
href="https://httpbin.org/uuid">https://httpbin.org/uuid</a> vrátí JSON
s&nbsp;jediným klíčem &bdquo;uuid&ldquo;, pod nímž je uložen řetězec
odpovídající <a
href="https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)">UUID
verze 4</a>. Chování této webové služby si samozřejmě můžeme velmi jednoduše
ověřit:</p>

<pre>
$ <strong>curl https://httpbin.org/uuid</strong>
</pre>

<p>Výsledek může vypadat následovně (resp.&nbsp;přesněji řečeno takto
s&nbsp;prakticky stoprocentní jistotou vypadat nebude, protože získáte odlišnou
hodnotu :-):</p>

<pre>
{
  "uuid": "19bd32b7-2ee8-40f0-a275-935d87331e83"
</pre>

<p>Načtení struktury vrácené v&nbsp;JSONu v&nbsp;Pythonu:</p>

<pre>
response = requests.get("https://httpbin.org/uuid").json()
</pre>

<p>Jednu z&nbsp;možností otestování, zda řetězec odpovídá formátu UUID verze 4,
je možné v&nbsp;Pythonu implementovat pomocí knihovny
<strong>uuid</strong>:</p>

<pre>
def <strong>uuid4</strong>(string):
    val = UUID(string, version=4)
    if val.hex != string.replace('-', ''):
        raise Invalid("the string '{s}' is not valid UUID4".format(s=string))
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Zjištění, jestli hodnota odpovídá UUID verze 4</h2>

<p>Celý demonstrační příklad (v&nbsp;pořadí již třetí), který nejprve zjistí,
zda dva řetězce odpovídají formátu UUID verze 4 a následně zvaliduje JSON
vrácený webovou službou, může vypadat následovně.</p>

<p>Nezbytné import na začátku:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from pytest_voluptuous import S, Partial, Exact
from voluptuous import Invalid
from voluptuous.validators import All, Length
from uuid import UUID
import requests
</pre>

<p>Již popsaná funkce pro validaci UUID verze 4:</p>

<pre>
def <strong>uuid4</strong>(string):
    val = UUID(string, version=4)
    if val.hex != string.replace('-', ''):
        raise Invalid("the string '{s}' is not valid UUID4".format(s=string))
</pre>

<p>Schéma pro strukturu, kterou vrátí webová služba:</p>

<pre>
uuid_response_struct = S({"uuid": uuid4})
</pre>

<p>Vlastní sada tří jednotkových testů:</p>

<pre>
def <strong>test_uuid_1</strong>():
    assert {"uuid": "00ebf64b-c15e-4b5d-846a-28971dc05796"} == uuid_response_struct
&nbsp;
&nbsp;
def <strong>test_uuid_2</strong>():
    assert {"uuid": "00ebf64b-xxxx-4b5d-846a-28971dc05796"} == uuid_response_struct
&nbsp;
&nbsp;
def <strong>test_uuid_returned_by_the_service</strong>():
    response = requests.get("https://httpbin.org/uuid").json()
    assert response == uuid_response_struct
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto příkladu
naleznete na adrese <a
href="https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-3">https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-3</a>.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Výsledek běhu třetího demonstračního příkladu</h2>

<p>Opět se podívejme na to, jak vypadá výsledek běhu třetího příkladu. Druhý
test odhalil nevalidní řetězec (což je v&nbsp;pořádku, tuto chybu očekáváme),
ale samotná data z&nbsp;webové služby jsou korektní:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.3, pytest-3.3.2, py-1.5.2, pluggy-0.6.0
rootdir: /home/tester/temp/python/python-schema-checks/pytest-voluptuous-demo3, inifile:
plugins: voluptuous-1.0.2, cov-2.5.1
collected 3 items
&nbsp;
pytest-voluptuous-demo3.py .F.                                           [100%]
&nbsp;
=================================== FAILURES ===================================
_________________________________ test_uuid_2 __________________________________
&nbsp;
    def test_uuid_2():
&gt;       assert {"uuid": "00ebf64b-xxxx-4b5d-846a-28971dc05796"} == uuid_response_struct
E       AssertionError: assert failed to validation error(s):
E         - uuid: not a valid value for dictionary value @ data['uuid']
&nbsp;
pytest-voluptuous-demo3.py:26: AssertionError
====================== 1 failed, 2 passed in 0.63 seconds ======================
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Validace složitější datové struktury získané přes REST API &ndash; první varianta</h2>

<p>Na stejném webu, jaký jsme použili v&nbsp;předchozím příkladu, naleznete i
další zajímavý REST API endpoint, a to konkrétně na adrese <a
href="https://httpbin.org/anything">https://httpbin.org/anything</a>. Formát
vygenerované odpovědi (opět poslané v&nbsp;JSON formátu) zjistíme příkazem
<strong>curl</strong>:</p>

<pre>
$ <strong>curl https://httpbin.org/anything</strong>
</pre>

<p>Pro <strong>curl</strong> se vrátí následující struktura:</p>

<pre>
{
  "args": {}, 
  "data": "", 
  "files": {}, 
  "form": {}, 
  "headers": {
    "Accept": "*/*", 
    "Connection": "close", 
    "Host": "httpbin.org", 
    "User-Agent": "curl/7.35.0"
  }, 
  "json": null, 
  "method": "GET", 
  "origin": "111.111.111.111", 
  "url": "https://httpbin.org/anything"
}
</pre>

<p>Pokud stejný REST API endpoint použijete v&nbsp;prohlížeči, dostanete
odlišná data v&nbsp;sekci &bdquo;headers&ldquo;; například. Zbylé klíče ovšem
budou shodné:</p>

<pre>
{
  "args": {}, 
  "data": "", 
  "files": {}, 
  "form": {}, 
  "headers": {
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", 
    "Accept-Encoding": "gzip, deflate", 
    "Accept-Language": "en-US,en;q=0.5", 
    "Connection": "close", 
    "Dnt": "1", 
    "Host": "httpbin.org", 
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36"
  }, 
  "json": null, 
  "method": "GET", 
  "origin": "111.111.111.111", 
  "url": "https://httpbin.org/anything"
}
</pre>

<p>Podobně můžeme JSON s&nbsp;datovou strukturou získat přímo
z&nbsp;Pythonu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
import requests
&nbsp;
response = requests.get("https://httpbin.org/anything").json()
print(response)
</pre>

<p>V&nbsp;tomto případě získáme ještě více dat v&nbsp;sekci
&bdquo;headers&ldquo; (REST API odpovídá údaji, které on nás získal):</p>

<pre>
{
  "args": {}, 
  "data": "", 
  "files": {}, 
  "form": {}, 
  "headers": {
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", 
    "Accept-Encoding": "gzip, deflate, br", 
    "Accept-Language": "en-US,en;q=0.5", 
    "Cache-Control": "max-age=0", 
    "Connection": "close", 
    "Cookie": "_gauges_unique_day=1; _gauges_unique_month=1; _gauges_unique_year=1; _gauges_unique=1", 
    "Host": "httpbin.org", 
    "Referer": "https://httpbin.org/", 
    "Upgrade-Insecure-Requests": "1", 
    "User-Agent": "Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:57.0) Gecko/20100101 Firefox/57.0"
  }, 
  "json": null, 
  "method": "GET", 
  "origin": "213.175.37.10", 
  "url": "https://httpbin.org/anything"
}
</pre>

<p>První test může jednoduše otestovat, zda jsme získali slovník
s&nbsp;libovolnými hodnotami. Samotné validační kritérium vypadá takto:</p>

<pre>
anything_struct = S(dict)
</pre>

<p>Celý test i s&nbsp;nezbytnými importy:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from pytest_voluptuous import S, Partial, Exact
from voluptuous import Invalid
from voluptuous.validators import All, Length
import requests
import re
&nbsp;
&nbsp;
def <strong>test_the_anything_endpoint_1</strong>():
    anything_struct = S(dict)
    response = requests.get("https://httpbin.org/anything").json()
    assert response == anything_struct
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Základní validace hodnot uložených ve slovníku</h2>

<p>Výše uvedené validační kritérium pravděpodobně čtenáři tohoto článku příliš
neocenili, takže se ho pokusme vylepšit. Prvním vylepšením bude explicitní
vyjmenování všech klíčů, které se musí v&nbsp;datové struktuře nacházet. U
všech klíčů navíc určíme (prozatím nepříliš přesně) i typy hodnot. Povšimněte
si, že lze použít i <strong>None</strong>, což v&nbsp;JSONu odpovídá hodnotě
<strong>null</strong>. A samozřejmě můžeme použít <strong>dict</strong> pro
určení, že nějaký prvek je vloženým slovníkem:</p>

<pre>
def <strong>test_the_anything_endpoint_2</strong>():
    anything_struct = S({"args": dict,
                         "data": str,
                         "files": dict,
                         "form": dict,
                         "headers": dict,
                         "json": None,
                         "method": str,
                         "origin": str,
                         "url": str})
    response = requests.get("https://httpbin.org/anything").json()
    assert response == anything_struct
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Podrobná validace hodnot uložených ve slovníku</h2>

<p>Validační kritérium může být samozřejmě mnohem přesnější. Pro validaci
hodnoty s&nbsp;URL uložené pod klíčem &bdquo;url&ldquo; můžeme použít třídu
<strong>Url</strong> naimportovanou přímo z&nbsp;knihovny
<i>Voluptuous</i>:</p>

<pre>
from voluptuous import Url
</pre>

<p>Kritérium se změní následovně:</p>

<pre>
    anything_struct = S({"args": dict,
                         "data": str,
                         "files": dict,
                         "form": dict,
                         "headers": dict,
                         "json": None,
                         "method": str,
                         "origin": str,
                         "url": <strong>Url()</strong>})
</pre>

<p>Dále můžeme u některých hodnot určit větší počet možností. Například pod
klíčem &bdquo;method&ldquo; je uloženo jméno HTTP metody, což je sice řetězec,
ovšem s&nbsp;omezeným povoleným počtem hodnot. Totéž může platit u klíče
&bdquo;json&ldquo;, který může obsahovat buď <strong>null</strong>, nebo nějaký
řetězec. V&nbsp;předchozích knihovnách se pro tento účel používala klauzule
<strong>Or</strong>, nyní použijeme klauzuli <strong>Any</strong>:</p>

<pre>
from voluptuous import Any
</pre>

<p>Validační kritérium se nyní změní takto:</p>

<pre>
    anything_struct = S({"args": dict,
                         "data": str,
                         "files": dict,
                         "form": dict,
                         "headers": dict,
                         "json": <strong>Any(None, str)</strong>,
                         "method": <strong>Any("GET", "POST", "PUT", "DELETE")</strong>,
                         "origin": origin,
                         "url": <strong>Url()</strong>})
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Validace slovníků uložených v&nbsp;jiném slovníku</h2>

<p>Pokud se podíváme podrobněji na sekci &bdquo;headers&ldquo; vrácenou
v&nbsp;JSONu z&nbsp;webové služby, zjistíme, že obsahuje vnořený slovník, jehož
klíči i hodnotami jsou pouze řetězce:</p>

<pre>
  "headers": {
    "Accept": "*/*", 
    "Connection": "close", 
    "Host": "httpbin.org", 
    "User-Agent": "curl/7.35.0"
  }, 
</pre>

<p>Jak se takový slovník validuje již víme:</p>

<pre>
S({str:str})
</pre>

<p>Nyní pouze stačí toto validační kritérium vložit do hlavního validačního
kritéria, a to následujícím způsobem:</p>

<pre>
anything_struct = S({"args": dict,
                     "data": str,
                     "files": dict,
                     "form": dict,
                     "headers": <strong>S({str:str})</strong>,
                     "json": Any(None, str),
                     "method": Any("GET", "POST", "PUT", "DELETE"),
                     "origin": origin,
                     "url": Url()})
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Úplný zdrojový kód čtvrtého demonstračního příkladu</h2>

<p>Všechny tři varianty postupně vytvářeného validačního kritéria jsou součástí
dnešního čtvrtého demonstračního příkladu, jehož zdrojový kód vypadá
následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from pytest_voluptuous import S, Partial, Exact
from voluptuous import Invalid, Url, Any
from voluptuous.validators import All, Length
import requests
import re
&nbsp;
&nbsp;
def <strong>test_the_anything_endpoint_1</strong>():
    anything_struct = S(dict)
    response = requests.get("https://httpbin.org/anything").json()
    assert response == anything_struct
&nbsp;
&nbsp;
def <strong>test_the_anything_endpoint_2</strong>():
    anything_struct = S({"args": dict,
                         "data": str,
                         "files": dict,
                         "form": dict,
                         "headers": dict,
                         "json": None,
                         "method": str,
                         "origin": str,
                         "url": str})
    response = requests.get("https://httpbin.org/anything").json()
    assert response == anything_struct
&nbsp;
&nbsp;
def <strong>origin</strong>(value):
    if not re.fullmatch(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", value):
        raise Invalid("wrong input {i}, IP address expected".format(i=value))
&nbsp;
&nbsp;
def <strong>test_the_anything_endpoint_3</strong>():
    anything_struct = S({"args": dict,
                         "data": str,
                         "files": dict,
                         "form": dict,
                         "headers": S({str:str}),
                         "json": Any(None, str),
                         "method": Any("GET", "POST", "PUT", "DELETE"),
                         "origin": origin,
                         "url": Url()})
&nbsp;
    response = requests.get("https://httpbin.org/anything").json()
    assert response == anything_struct
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto příkladu
naleznete na adrese <a
href="https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-4">https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-4</a>.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Výsledek běhu čtvrtého demonstračního příkladu</h2>

<p>Opět si ukažme, jak bude vypadat čtvrtý demonstrační příklad po svém
spuštění:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.4.3, pytest-3.3.1, py-1.5.2, pluggy-0.6.0 -- /usr/bin/python3
cachedir: .cache
rootdir: /home/tester/temp/pytest-voluptuous-demo4, inifile:
plugins: voluptuous-1.0.2
collecting ... collected 3 items
&nbsp;
pytest-voluptuous-demo2.py::test_the_anything_endpoint_1 PASSED          [ 33%]
pytest-voluptuous-demo2.py::test_the_anything_endpoint_2 PASSED          [ 66%]
pytest-voluptuous-demo2.py::test_the_anything_endpoint_3 PASSED          [100%]
&nbsp;
=========================== 3 passed in 1.94 seconds ===========================
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Použití klauzule <strong>Optional</strong></h2>

<p>V&nbsp;případě, že některý klíč (a k&nbsp;němu přiřazená hodnota) nemusí být
ve slovníku uložen, je možné jméno klíče umístit do klauzule
<strong>Optional</strong>. To znamená, že původní validační schéma:</p>

<pre>
user = S({"name": str,
          "surname": str,
          "id": pos})
</pre>

<p>je možné změnit takovým způsobem, aby ID uživatele nemuselo být
z&nbsp;nějakého důvodu specifikováno:</p>

<pre>
user2 = S({"name": str,
           "surname": str,
           Optional("id"): pos})
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Implicitní nastavení volitelných klíčů a konkrétní specifikace klíčů povinných</h2>

<p>Někdy se setkáme i s&nbsp;opačnou možností &ndash; budeme chtít, aby většina
klíčů byla jen volitelná, ovšem některé klíče naopak musí být zadány vždy
(samozřejmě i s&nbsp;příslušnými navázanými hodnotami). V&nbsp;tomto případě
máme dvě možnosti. Buď otrocky používat klauzuli <strong>Optional</strong>:</p>

<pre>
user3 = S({"name": str,
           "surname": str,
           Optional("id"): pos,
           Optional("address"): str,
           Optional("state"): str,
           Optional("zip"): int})
</pre>

<p>nebo naopak použít klauzuli <strong>Required</strong> u těch klíčů, které
jsou povinné. Navíc ještě musíme při definici validačního kritéria nastavit
parametr <strong>required</strong> na pravdivostní hodnotu
<strong>False</strong> (tím se přepne chápání ostatních klíčů &ndash; budou
nepovinné):</p>

<pre>
user4 = S({Required("name"): str,
           Required("surname"): str,
           "id": pos,
           "address": str,
           "state": str,
           "zip": int}, required=False)
</pre>

<p>S&nbsp;druhou možností se setkáme častěji.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Pátý demonstrační příklad a výsledek jeho spuštění</h2>

<p>Obě klauzule <strong>Optional</strong> a <strong>Required</strong> použijeme
v&nbsp;dnešním pátém a současně i posledním demonstračním příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from pytest_voluptuous import S, Partial, Exact
from voluptuous import Invalid, Optional, Required
from voluptuous.validators import All, Length
&nbsp;
&nbsp;
def <strong>pos</strong>(value):
    if type(value) is not int or value &lt;= 0:
        raise Invalid("positive integer value expected, but got {v} instead".format(v=value))
&nbsp;
&nbsp;
user = <strong>S</strong>({"name": str,
          "surname": str,
          "id": pos})
&nbsp;
&nbsp;
def <strong>test1</strong>():
    assert user == {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1}
&nbsp;
&nbsp;
def <strong>test2</strong>():
    assert user == {"name": "Eda",
                    "id": 1}
&nbsp;
&nbsp;
def <strong>test3</strong>():
    assert user == {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 0}
&nbsp;
&nbsp;
def <strong>test4</strong>():
    assert user == {"name": "Eda",
                    "surname": "Wasserfall"}
&nbsp;
&nbsp;
user2 = <strong>S</strong>({"name": str,
           "surname": str,
           Optional("id"): pos})
&nbsp;
&nbsp;
def <strong>test5</strong>():
    assert user2 == {"name": "Eda",
                     "surname": "Wasserfall",
                     "id": 1}
&nbsp;
&nbsp;
def <strong>test6</strong>():
    assert user2 == {"name": "Eda",
                     "id": 1}
&nbsp;
&nbsp;
def <strong>test7</strong>():
    assert user2 == {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 0}
&nbsp;
&nbsp;
def <strong>test8</strong>():
    assert user2 == {"name": "Eda",
                     "surname": "Wasserfall"}
&nbsp;
&nbsp;
user3 = <strong>S</strong>({"name": str,
           "surname": str,
           Optional("id"): pos,
           Optional("address"): str,
           Optional("state"): str,
           Optional("zip"): int})
&nbsp;
&nbsp;
def <strong>test9</strong>():
    assert user3 == {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1}
&nbsp;
&nbsp;
def <strong>test10</strong>():
    assert user3 == {"name": "Eda",
                     "surname": "Wasserfall"}
&nbsp;
&nbsp;
def <strong>test11</strong>():
    assert user3 == {"name": "Eda",
                     "surname": "Wasserfall",
                     "zip": 12345}
&nbsp;
&nbsp;
user4 = <strong>S</strong>({Required("name"): str,
           Required("surname"): str,
           "id": pos,
           "address": str,
           "state": str,
           "zip": int}, required=False)
&nbsp;
&nbsp;
def <strong>test12</strong>():
    assert user4 == {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1}
&nbsp;
&nbsp;
def <strong>test13</strong>():
    assert user4 == {"name": "Eda",
                     "surname": "Wasserfall"}
&nbsp;
&nbsp;
def <strong>test14</strong>():
    assert user4 == {"name": "Eda",
                     "surname": "Wasserfall",
                     "zip": 12345}
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační projekty, které jsme si v&nbsp;dnešním článku popsali,
byly uloženy do Git repositáře, který naleznete na adrese <a
href="https://github.com/tisnik/python-schema-checks">https://github.com/tisnik/python-schema-checks</a>.
V&nbsp;tabulkách pod tímto odstavcem jsou pro úplnost vypsány odkazy na
<i>všechny</i> doposud zmíněné projekty rozdělené podle použité knihovny.
Z&nbsp;tohoto důvodu zde naleznete i projekty zmíněné <a
href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/">minule</a>
a samozřejmě i <a
href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/">předminule</a>.</p>

<h3>Schemagic</h3>

<table>
<tr><th>Projekt</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td>schemagic-demo-1</td><td>základní vlastnosti knihovny Schemagic</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-1">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-1</a></td></tr>
<tr><td>schemagic-demo-2</td><td>konverze prováděné při validaci</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-2">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-2</a></td></tr>
<tr><td>schemagic-demo-3</td><td>vlastní validační funkce</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-3">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-3</a></td></tr>
<tr><td>schemagic-demo-4</td><td>vylepšení předchozího příkladu</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-4">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-4</a></td></tr>
<tr><td>schemagic-demo-5</td><td>validace slovníků</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-5">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-5</a></td></tr>
<tr><td>schemagic-demo-6</td><td>validace slovníků podruhé</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-6">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-6</a></td></tr>
</table>

<h3>Schema</h3>

<table>
<tr><th>Projekt</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td>schema-demo-1</td><td>základní vlastnosti knihovny Schema</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-1">https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-1</a></td></tr>
<tr><td>schema-demo-2</td><td>validace slovníků a dalších typů</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-2">https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-2</a></td></tr>
<tr><td>schema-demo-3</td><td>validace slovníků a dalších typů</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-3">https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-3</a></td></tr>
<tr><td>schema-demo-4</td><td>validace slovníků a dalších typů</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-4">https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-4</a></td></tr>
<tr><td>schema-demo-5</td><td>validace slovníků a dalších typů</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-5">https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-5</a></td></tr>
<tr><td>schema-demo-6</td><td>validace slovníků a dalších typů</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-6">https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-6</a></td></tr>
</table>

<h3>Voluptuous</h3>

<table>
<tr><th>Projekt</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td>voluptuous-demo-1</td><td>základní vlastnosti knihovny Voluptuous</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/voluptuous-demo-1">https://github.com/tisnik/python-schema-checks/tree/master/voluptuous-demo-1</a></td></tr>
<tr><td>voluptuous-demo-2</td><td>validace obsahu slovníků</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/voluptuous-demo-2">https://github.com/tisnik/python-schema-checks/tree/master/voluptuous-demo-2</a></td></tr>
</table>

<h3>pytest_voluptuous</h3>

<table>
<tr><th>Projekt</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td>pytest-voluptuous-demo-1</td><td>validace obsahu slovníků</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-1">https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-1</a></td></tr>
<tr><td>pytest-voluptuous-demo-2</td><td>validace obsahu slovníků</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-2">https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-2</a></td></tr>
<tr><td>pytest-voluptuous-demo-3</td><td>validace struktury získané z&nbsp;REST API</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-3">https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-3</a></td></tr>
<tr><td>pytest-voluptuous-demo-4</td><td>validace složitější struktury získané z&nbsp;REST API</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-4">https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-4</a></td></tr>
<tr><td>pytest-voluptuous-demo-5</td><td>použití klauzulí Optional a Required</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-5">https://github.com/tisnik/python-schema-checks/tree/master/pytest-voluptuous-demo-5</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>7 Best Python Libraries for Validating Data<br />
<a href="https://www.yeahhub.com/7-best-python-libraries-validating-data/">https://www.yeahhub.com/7-best-python-libraries-validating-data/</a>
</li>

<li>Universally unique identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">https://en.wikipedia.org/wiki/Universally_unique_identifier</a>
</li>

<li>UUID objects according to RFC 4122 (knihovna pro Python)<br />
<a href="https://docs.python.org/3.5/library/uuid.html#uuid.uuid4">https://docs.python.org/3.5/library/uuid.html#uuid.uuid4</a>
</li>

<li>Object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Object_identifier">https://en.wikipedia.org/wiki/Object_identifier</a>
</li>

<li>Digital object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Digital_object_identifier">https://en.wikipedia.org/wiki/Digital_object_identifier</a>
</li>

<li>voluptuous na (na PyPi)<br />
<a href="https://pypi.python.org/pypi/voluptuous">https://pypi.python.org/pypi/voluptuous</a>
</li>

<li>voluptuous (na GitHubu)<br />
<a href="https://github.com/alecthomas/voluptuous">https://github.com/alecthomas/voluptuous</a>
</li>

<li>pytest-voluptuous 1.0.2 (na PyPi)<br />
<a href="https://pypi.org/project/pytest-voluptuous/">https://pypi.org/project/pytest-voluptuous/</a>
</li>

<li>pytest-voluptuous (na GitHubu)<br />
<a href="https://github.com/F-Secure/pytest-voluptuous">https://github.com/F-Secure/pytest-voluptuous</a>
</li>

<li>schemagic 0.9.1 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schemagic/0.9.1">https://pypi.python.org/pypi/schemagic/0.9.1</a>
</li>

<li>Schemagic / Schemagic.web (na GitHubu)<br />
<a href="https://github.com/Mechrophile/schemagic">https://github.com/Mechrophile/schemagic</a>
</li>

<li>schema 0.6.7 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schema">https://pypi.python.org/pypi/schema</a>
</li>

<li>schema (na GitHubu)<br />
<a href="https://github.com/keleshev/schema">https://github.com/keleshev/schema</a>
</li>

<li>XML Schema validator and data conversion library for Python<br />
<a href="https://github.com/brunato/xmlschema">https://github.com/brunato/xmlschema</a>
</li>

<li>xmlschema 0.9.7<br />
<a href="https://pypi.python.org/pypi/xmlschema/0.9.7">https://pypi.python.org/pypi/xmlschema/0.9.7</a>
</li>

<li>jsonschema 2.6.0<br />
<a href="https://pypi.python.org/pypi/jsonschema">https://pypi.python.org/pypi/jsonschema</a>
</li>

<li>warlock 1.3.0<br />
<a href="https://pypi.python.org/pypi/warlock">https://pypi.python.org/pypi/warlock</a>
</li>

<li>Python Virtual Environments – A Primer<br />
<a href="https://realpython.com/python-virtual-environments-a-primer/">https://realpython.com/python-virtual-environments-a-primer/</a>
</li>

<li>pip 1.1 documentation: Requirements files<br />
<a href="https://pip.readthedocs.io/en/1.1/requirements.html">https://pip.readthedocs.io/en/1.1/requirements.html</a>
</li>

<li>unittest.mock — mock object library<br />
<a href="https://docs.python.org/3.5/library/unittest.mock.html">https://docs.python.org/3.5/library/unittest.mock.html</a>
</li>

<li>mock 2.0.0<br />
<a href="https://pypi.python.org/pypi/mock">https://pypi.python.org/pypi/mock</a>
</li>

<li>An Introduction to Mocking in Python<br />
<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python</a>
</li>

<li>Unit testing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Unit_testing">https://en.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit testing<br />
<a href="https://cs.wikipedia.org/wiki/Unit_testing">https://cs.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>5 Differences between clojure.spec and Schema<br />
<a href="https://lispcast.com/clojure.spec-vs-schema/">https://lispcast.com/clojure.spec-vs-schema/</a>
</li>

<li>Schema: Clojure(Script) library for declarative data description and validation<br />
<a href="https://github.com/plumatic/schema">https://github.com/plumatic/schema</a>
</li>

<li>clojure.spec - Rationale and Overview<br />
<a href="https://clojure.org/about/spec">https://clojure.org/about/spec</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

