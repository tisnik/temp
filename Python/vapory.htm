<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Projekt Vapory: kombinace možností Pythonu a POV-Raye</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Projekt Vapory: kombinace možností Pythonu a POV-Raye</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku, který bude po dlouhé době opět věnován počítačové grafice, se seznámíme s projektem Vapory. Jedná se o knihovnu určenou pro Python, která umožňuje popis 3D scén pro raytracer POV-Ray přímo v Pythonu, což možnosti POV-Raye do značné míry rozšiřuje.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Projekt Vapory: kombinace možností Pythonu a POV-Raye</a></p>
<p><a href="#k02">2. Průběh zpracování celé 3D scény</a></p>
<p><a href="#k03">3. Instalace modulu <strong>vapory</strong> i raytraceru POV-Ray</a></p>
<p><a href="#k04">4. První testovací scéna napsaná přímo pro POV-Ray</a></p>
<p><a href="#k05">5. Shodná testovací scéna napsaná v&nbsp;Pythonu s&nbsp;využitím Vapory</a></p>
<p><a href="#k06">6. Dočasný soubor vygenerovaný modulem <strong>vapory</strong></a></p>
<p><a href="#k07">7. Druhý příklad &ndash; použití externích souborů s&nbsp;deklarací barev a textur</a></p>
<p><a href="#k08">8. Varianta naprogramovaná ve Vapory</a></p>
<p><a href="#k09">9. Vylepšení předchozího příkladu &ndash; deklarace hodnoty pro gama korekci</a></p>
<p><a href="#k10">10. Konstruktivní geometrie těles v&nbsp;POV-Rayi</a></p>
<p><a href="#k11">11. Třetí příklad &ndash; POV-Ray varianta</a></p>
<p><a href="#k12">12. Třetí příklad &ndash; varianta používající Vapory</a></p>
<p><a href="#k13">13. Úprava předchozího příkladu: použití samostatných objektů, na něž se aplikují CSG operace</a></p>
<p><a href="#k14">14. Základ tvorby jednoduchých animací</a></p>
<p><a href="#k15">15. Vygenerování série snímků ve Vapory</a></p>
<p><a href="#k16">16. Vytvoření animace ze série snímků</a></p>
<p><a href="#k17">17. Úplný zdrojový kód čtvrtého příkladu</a></p>
<p><a href="#k18">18. Makefile soubor určený pro vykreslení všech scén POV-Rayem</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Projekt Vapory: kombinace možností Pythonu a POV-Raye</h2>

<p>S&nbsp;raytracerem POV-Ray jsme se již na stránkách Rootu seznámili
v&nbsp;poměrně <a
href="https://www.root.cz/serialy/vykreslujeme-3d-sceny-s-pov-ray/">podrobném
seriálu</a>. Připomeňme si ve stručnosti, že se v&nbsp;tomto raytraceru pro
popis trojrozměrných scén (které mohou být i animované) používá vlastní jazyk,
jehož syntaxe je vzdáleně podobná Céčku a od něj odvozených jazyků. Původně byl
tento jazyk čistě deklarativní, ovšem s&nbsp;postupným vývojem schopností
POV-Raye do něj začaly být přidávány konstrukce pro tvorbu programových smyček
apod. Většina aplikací, které POV-Ray využívají jako svůj renderovací engine,
tedy všechny 3D scény (světla, kamery, textury, tělesa atd.) nejprve musí
exportovat do jazyka POV-Raye a teprve poté je možné provést vlastní
vykreslení.</p>

<img src="http://i.iinfo.cz/urs/povray50_05-preview-123594981442383.png" alt="scena1" />
<p><i>Obrázek 1: Implicitní plocha zapsaná obecným polynomem šestého
stupně. I takové plochy je možné v&nbsp;POV-Rayi vykreslit bez nutnosti jejich
rozdělení na trojúhelníky.</i></p>

<p>Do této kategorie nástrojů spadá i dnes popisovaný projekt <i>Vapory</i>,
který umožňuje, aby byla celá trojrozměrná scéna popsaná přímo v&nbsp;jazyku
Python s&nbsp;tím, že se překlad (<i>transpřeklad</i>) mezi Pythonem a
POV-Rayem provede zcela automaticky a prakticky bez zásahu uživatele. Také je
možné spojit možnosti <i>Vapory</i> s&nbsp;již popsaným [<a
href="https://www.root.cz/clanky/programova-tvorba-a-nelinearni-editace-videa-s-vyuzitim-knihovny-moviepy/">1</a>]
[<a
href="https://www.root.cz/clanky/pouziti-moviepy-spolecne-s-matplotlibem-pro-tvorbu-animovanych-grafu/">2</a>]
[<a
href="https://www.root.cz/clanky/pouziti-moviepy-spolecne-matplotlibem-pro-tvorbu-animovanych-grafu-dokonceni/">3</a>]
projektem <i>MoviePy</i>, což je poměrně zajímavé téma, kterému se budeme
věnovat příště.</p>

<img src="http://i.iinfo.cz/urs/povray50_01-123594968702243.jpg" alt="scena2" />
<p><i>Obrázek 2: Výsledek práce programu, který simuloval turbulentní proudění
vzduchu. Vypočtená data byla převedeno do formátu POV-Raye a následně
vykreslena.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Průběh zpracování celé 3D scény</h2>

<p>Průběh zpracování celé 3D scény při použití kombinace Vapory
s&nbsp;POV-Rayem vypadá následovně:</p>

<img src="https://i.iinfo.cz/images/587/vapory1-1.png" class="image-330811" alt="&#160;" height="338" width="450" />
<p><i>Obrázek 3: Zpracování 3D scény při použití Vapory a POV-Raye.</i></p>

<p>V&nbsp;navazujících kapitolách si ukážeme, jak se Vapory může použít, a to
nejenom při tvorbě statických 3D scén, ale i při programování jednodušších
animací (jednodušších pouze z&nbsp;toho prostého důvodu, že rozsah článku je
omezený).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace modulu <strong>vapory</strong> i raytraceru POV-Ray</h2>

<p>Nástroj <i>Vapory</i> je distribuován ve formě běžného balíčku pro Python,
takže je <a href="https://pypi.org/project/Vapory/">dostupný i na PyPi</a>. To
mj.&nbsp;znamená, že instalace bude velmi jednoduchá a vystačíme si
s&nbsp;nástrojem <strong>pip</strong> popř.&nbsp;<strong>pip3</strong>.
Instalaci postačuje provést pouze pro právě aktivního uživatele:</p>

<pre>
$ <strong>pip3 install --user vapory</strong>
Downloading/unpacking vapory
  Downloading Vapory-0.1.01.tar.gz
  Running setup.py (path:/tmp/pip_build_tester/vapory/setup.py) egg_info for package vapory
&nbsp;
    warning: no files found matching '*.txt' under directory 'examples'
Installing collected packages: vapory
  Running setup.py install for vapory
 &nbsp;
    warning: no files found matching '*.txt' under directory 'examples'
Successfully installed vapory
Cleaning up...
</pre>

<p>V&nbsp;případě raytraceru POV-Ray máme dvě možnosti. Buď je možné tento
nástroj nainstalovat přímo z&nbsp;balíčku připraveného pro danou distribuci
Linuxu, což je nejjednodušší řešení. Druhý způsob je sice nepatrně složitější,
ovšem získáte díky němu poslední verzi POV-Raye: naklonujte si repositář <a
href="https://github.com/POV-Ray/povray/tree/3.7-stable">https://github.com/POV-Ray/povray/tree/3.7-stable</a>
(ideálně právě větev <i>3.7-stable</i>, na kterou odkaz vede) a instalaci
provést následující sérií kroků:</p>

<pre>
cd unix/
./prebuild.sh
cd ../
./configure COMPILED_BY="jméno"
make
make install
</pre>

<p>Zapotřebí je mít k&nbsp;dispozici překladač C++ a několik knihoven ve
vývojářské verzi: Boost, zLib, libpng, libjpeg a libTIFF (většina těchto
knihoven se používá pro ukládání výsledných obrázků). Po <strong>make
install</strong> by již měl být POV-Ray připraven pro další použití, takže jen
pro rychlé ověření zjistíme jeho verzi:</p>

<pre>
$ <strong>povray --version</strong>
POV-Ray 3.7.1-beta.7695039.unofficial
&nbsp;
This is an unofficial version compiled by:
 Pavel Tisnovsky &lt;ptisnovs@redhat.com&gt;
 The POV-Ray Team is not responsible for supporting this version.
&nbsp;
Copyright 1991-2018 Persistence of Vision Raytracer Pty. Ltd.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
&nbsp;
Built-in features:
  I/O restrictions:          enabled
  X Window display:          disabled
  Supported image formats:   gif tga iff ppm pgm hdr png jpeg tiff
  Unsupported image formats: openexr
&nbsp;
Compilation settings:
  Build architecture:  x86_64-unknown-linux-gnu
  Built/Optimized for: x86_64-unknown-linux-gnu (using -march=native)
  Compiler vendor:     gnu
  Compiler version:    g++ 4.8
  Compiler flags:      -pipe -Wno-multichar -Wno-write-strings -fno-enforce-eh-specs -Wno-non-template-friend -s -O3 -ffast-math -march=native -pthread
</pre>

<img src="http://i.iinfo.cz/urs/povray41_01-122996412897835.jpg" alt="scena4" />
<p><i>Obrázek 4: Všimněte si především techniky vymodelování řetězu,
z&nbsp;hlediska raytraceru se jedná o velmi složitý objekt.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. První testovací scéna napsaná přímo pro POV-Ray</h2>

<p>Začněme porovnáním způsobu deklarace 3D scény v&nbsp;POV-Rayi a ve Vapory.
Jednoduchou scénu, v&nbsp;níž jsou umístěny dva objekty, kamera a světelný
zdroj, je možné popsat následovně (úplný zdrojový kód lze nalézt <a
href="https://github.com/tisnik/vapory-examples/blob/master/scene1.pov">zde</a>):</p>

<pre>
<i>// ------------------------------------------------------------</i>
<i>// Jednoduchá scéna s jedním uzavřeným objektem, jedním nekonečným</i>
<i>// objektem, jedním světlem a jednou kamerou (pozorovatelem)</i>
<i>//</i>
<i>// rendering lze spustit příkazem:</i>
<i>//     povray +W800 +H600 +B +FN +D +Iscena2.pov +Oscena2.png</i>
<i>// (pro náhled postačí zadat povray scena1.pov)</i>
<i>// ------------------------------------------------------------</i>
&nbsp;
<strong>#version 3.5;</strong>
&nbsp;
<i>// globální nastavení parametrů scény</i>
<strong>global_settings</strong> {
    assumed_gamma 2.2
    max_trace_level 5
}
&nbsp;
<i>// nastavení kamery (pozorovatele)</i>
<strong>camera</strong> {
    location  &lt;0.0, 2.0,-3.0&gt;        <i>// pozice kamery</i>
    up        &lt;0.0, 1.0, 0.0&gt;        <i>// vektor směřující vzhůru</i>
    right     &lt;4/3, 0.0, 0.0&gt;        <i>// vektor směřující doprava</i>
    look_at   &lt;0.0, 1.0, 2.0&gt;        <i>// bod, na který kamera směřuje</i>
}
&nbsp;
<i>// světelný zdroj</i>
<strong>light_source</strong> {
    &lt;2, 4, -3&gt;                       <i>// pozice světelného zdroje</i>
    color &lt;1,1,1&gt;                    <i>// barva světla</i>
}
&nbsp;
<i>// jediný uzavřený objekt ve scéně - zelená koule</i>
<strong>sphere</strong> {
    &lt;0, 1, 2&gt;,                           <i>// souřadnice středu koule</i>
    2.00                                 <i>// poloměr koule</i>
    texture {                            <i>// textura - povrch koule</i>
        pigment {
            color &lt;1.0, 1.0, 0.0&gt;  <i>// barva povrchu</i>
        }
        finish {                         <i>// optické vlastnosti materiálu</i>
            phong 1                      <i>// velikost a síla odlesků</i>
            phong_size 300
            reflection 0.15              <i>// odrazivost</i>
        }
    }
}
&nbsp;
<i>// druhý objekt - nekonečná rovina</i>
<strong>plane</strong> {
    y,                                   <i>// orientace roviny</i>
    -1.5                                 <i>// vzdálenost od počátku</i>
    texture {                            <i>// textura - vlastnosti povrchu</i>
        pigment {
            color &lt;1,1,1&gt;                   <i>// barva povrchu</i>
        }
        finish {                         <i>// optické vlastnosti materiálu</i>
            reflection 0.10
        }
    }
}
&nbsp;
&nbsp;
&nbsp;
<i>// ------------------------------------------------------------</i>
<i>// finito</i>
<i>// ------------------------------------------------------------</i>
</pre>

<p>Vykreslení (rendering) této scény se provede následujícím příkazem
(předpokladem samozřejmě je, že máte POV-Ray nainstalovaný nebo přeložený ze
zdrojových kódů):</p>

<pre>
<strong>povray +W640 +H480 +B +FN +D +Iscene1.pov +Oscene1.png</strong>
</pre>

<p>Samotný průběh renderingu &ndash; maximálně několik sekund &ndash; nás
nemusí příliš zajímat, ale jen pro jistotu:</p>

<pre>
Persistence of Vision(tm) Ray Tracer Version 3.7.1-alpha.7695039.unofficial
 ...
 ...
 ...
==== [Parsing...] ==========================================================
----------------------------------------------------------------------------
Parser Statistics
----------------------------------------------------------------------------
Finite Objects:            1
Infinite Objects:          1
Light Sources:             1
Total:                     3
----------------------------------------------------------------------------
Parser Time
  Parse Time:       0 hours  0 minutes  0 seconds (0.001 seconds)
              using 1 thread(s) with 0.000 CPU-seconds total
  Bounding Time:    0 hours  0 minutes  0 seconds (0.000 seconds)
              using 1 thread(s) with 0.000 CPU-seconds total
----------------------------------------------------------------------------
Render Options
  Quality:  9
  Bounding boxes.......On   Bounding threshold: 3
  Antialiasing.........Off
==== [Rendering...] ========================================================
 ...
 ...
 ...
----------------------------------------------------------------------------
Render Statistics
Image Resolution 640 x 480
----------------------------------------------------------------------------
Pixels:           307200   Samples:               0   Smpls/Pxl: 0.00
Rays:             620784   Saved:              5730   Max Level: 3/5
----------------------------------------------------------------------------
Ray-&gt;Shape Intersection          Tests       Succeeded  Percentage
----------------------------------------------------------------------------
Plane                           877300          278626     31.76
Sphere                          833770          330783     39.67
Bounding Box                    877300          612405     69.81
----------------------------------------------------------------------------
Shadow Ray Tests:            300278   Succeeded:                 38040
Shadow Cache Hits:            38032
Reflected Rays:              313584
----------------------------------------------------------------------------
----------------------------------------------------------------------------
Render Time:
  Photon Time:      No photons
  Radiosity Time:   No radiosity
  Trace Time:       0 hours  0 minutes  0 seconds (0.255 seconds)
              using 4 thread(s) with 0.786 CPU-seconds total
POV-Ray finished
</pre>

<p>Důležitější je výsledek:</p>

<a href="https://www.root.cz/obrazek/330812/"><img src="https://i.iinfo.cz/images/587/vapory1-2-prev.png" class="image-330812" alt="&#160;" height="270" width="360" /></a>
<p><i>Obrázek 5: Výsledek renderingu 3D scény raytracerem POV-Ray.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Shodná testovací scéna napsaná v&nbsp;Pythonu s&nbsp;využitím Vapory</h2>

<p>Stejnou scénu je možné v&nbsp;Pythonu s&nbsp;využitím modulu/knihovny Vapory
zapsat <a href="https://github.com/tisnik/vapory-examples/blob/master/scene1.py">takto</a>.
Při zápisu jsem se snažil do co největší míry dodržet strukturu zdrojového kódu
POV-Raye:</p>

<pre>
from vapory import *
&nbsp;
y = [0, 1, 0]
&nbsp;
&nbsp;
camera = <strong>Camera</strong>('location', [0.0, 2.0, -3.0],
                'up',       [0.0, 1.0, 0.0],
                'right',    [4/3, 0.0, 0.0],
                'look_at',  [0.0, 1.0, 2.0])
&nbsp;
light = <strong>LightSource</strong>([2, 4, -3],
                    'color', [1, 1, 1])
&nbsp;
sphere = <strong>Sphere</strong>([0, 1, 2],
                2.0,
                Texture(
                    Pigment('color', [1, 1, 0]),
                    Finish('phong', 1,
                           'phong_size', 300,
                           'reflection', 0.15)))
&nbsp;
plane = <strong>Plane</strong>(y,
              -1.5,
              Texture(
                  Pigment('color', [1, 1, 1]),
                  Finish('reflection', 0.10)))
&nbsp;
scene = <strong>Scene</strong>(camera,
              objects=[light, sphere, plane])
&nbsp;
scene.render("scene1_vapory.png", width=640, height=480)
</pre>

<p>Povšimněte si, že všechny objekty, které tvoří 3D scénu,
tj.&nbsp;(nekonečné) plochy, trojrozměrná tělesa, světla i kamera, jsou tvořeny
instancemi tříd definovaných ve Vapory. Jedná se o tyto třídy:
<strong>Camera</strong>, <strong>LightSource</strong>, <strong>Sphere</strong>
a <strong>Plane</strong>. Následně jsou všechny objekty přidány do scény
představované instancí třídy <strong>Scene</strong> a scéna je ihned poté
vykreslena metodou <strong>Scene.render()</strong>. Není tedy nutné explicitně
volat POV-Ray; tento krok za nás Vapory provede automaticky.</p>

<a href="https://www.root.cz/obrazek/330813/"><img src="https://i.iinfo.cz/images/587/vapory1-3-prev.png" class="image-330813" alt="&#160;" height="204" width="370" /></a>
<p><i>Obrázek 6: Porovnání shodné scény &ndash; jednou zapsané v&nbsp;jazyku
POV-Raye, podruhé v&nbsp;Pythonu.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Dočasný soubor vygenerovaný modulem <strong>vapory</strong></h2>

<p>V&nbsp;případě, že se vám podaří násilím přerušit rendering, můžete si
prohlédnout dočasný soubor, který byl vygenerovaný modulem <i>vapory</i>
z&nbsp;popisu scény. Tento soubor sice není příliš čitelný kvůli absenci mezer,
to ovšem POV-Rayi vůbec nevadí a soubor zpracuje zcela korektně:</p>

<pre>
light_source {
&lt;2,4,-3&gt;
color
&lt;1,1,1&gt; 
}
sphere {
&lt;0,1,2&gt;
2.0
texture {
pigment {
color
&lt;1,1,0&gt; 
}
finish {
phong
1
phong_size
300
reflection
0.15 
} 
} 
}
plane {
&lt;0,1,0&gt;
( -1.5 )
texture {
pigment {
color
&lt;1,1,1&gt; 
}
finish {
reflection
0.1 
} 
} 
}
camera {
location
&lt;0.0,2.0,-3.0&gt;
up
&lt;0.0,1.0,0.0&gt;
right
&lt;1.3333333333333333,0.0,0.0&gt;
look_at
&lt;0.0,1.0,2.0&gt;
right
&lt;1.3333333333333333,0,0&gt; 
}
global_settings{

}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Druhý příklad &ndash; použití externích souborů s&nbsp;deklarací barev a textur</h2>

<p>Ve druhém příkladu si ukážeme, jak lze využít externí soubory obsahující
deklarace barev, textur popř.&nbsp;i parametrů těles. Těchto souborů obsahuje
POV-Ray i ve standardní instalaci poměrně velké množství a lze je do scény
snadno vložit příkazem <strong>#include</strong>:</p>

<pre>
<i>// načtení všech potřebných externích souborů</i>
#include "colors.inc"
#include "stones.inc"
#include "glass.inc"
</pre>

<p>Příklad použití (viz zvýrazněné identifikátory):</p>

<pre>
light_source {
    &lt;-30, 11,  20&gt;                       <i>// pozice světelného zdroje</i>
    color <strong>White</strong>                          <i>// barva světla</i>
}
&nbsp;
plane {
    y,                                   <i>// orientace roviny</i>
    -1.5                                 <i>// vzdálenost od počátku</i>
    texture {                            <i>// textura - vlastnosti povrchu</i>
        <strong>T_Stone1</strong>                         <i>// definováno v externím souboru</i>
        pigment {                        <i>// vlastní vzorek textury</i>
            octaves 3                    <i>// modifikace procedurálního vzorku</i>
            rotate 90*z
        }
        finish {                         <i>// optické vlastnosti materiálu</i>
            reflection 0.10
        }
    }
}
</pre>

<a href="https://www.root.cz/obrazek/330814/"><img src="https://i.iinfo.cz/images/587/vapory1-4-prev.jpg" class="image-330814" alt="&#160;" height="270" width="360" /></a>
<p><i>Obrázek 7: Druhý demonstrační příklad vykreslený POV-Rayem.</i></p>

<p>Úplný zdrojový kód druhého příkladu ve variantě přímo pro POV-Ray vypadá
takto:</p>

<pre>
<i>// ------------------------------------------------------------</i>
<i>// Jednoduchá scéna s jedním uzavřeným objektem, jedním nekonečným</i>
<i>// objektem, trojicí světel a jednou kamerou (pozorovatelem)</i>
<i>//</i>
<i>// Založeno na souboru původně vytvořeném Danem Farmerem (leden 2002)</i>
<i>//</i>
<i>// rendering lze spustit příkazem:</i>
<i>//     povray +W800 +H600 +B +FN +D +Iscena2.pov +Oscena2.png</i>
<i>// (pro náhled postačí zadat povray scena2.pov)</i>
<i>// ------------------------------------------------------------</i>
&nbsp;
#version 3.5;
&nbsp;
<i>// globální nastavení parametrů scény</i>
global_settings {
    assumed_gamma 2.2
    max_trace_level 5
}
&nbsp;
<i>// načtení všech potřebných externích souborů</i>
#include "colors.inc"
#include "stones.inc"
#include "glass.inc"
&nbsp;
<i>// nastavení kamery (pozorovatele)</i>
camera {
    location  &lt;1.65, 5.5, -5.0&gt;          <i>// pozice kamery</i>
    up        &lt;0.0,  1.0,  0.0&gt;          <i>// vektor směřující vzhůru</i>
    right     &lt;4/3,  0.0,  0.0&gt;          <i>// vektor směřující doprava</i>
    look_at   &lt;0,    0.5, -1.0&gt;          <i>// bod, na který kamera směřuje</i>
}
&nbsp;
<i>// tři světelné zdroje</i>
light_source {
    &lt;-30, 11,  20&gt;                       <i>// pozice světelného zdroje</i>
    color White                          <i>// barva světla</i>
}
&nbsp;
light_source {
    &lt; 31, 12, -20&gt;                       <i>// pozice světelného zdroje</i>
    color White                          <i>// barva světla</i>
}
&nbsp;
light_source {
    &lt; 32, 11, -20&gt;                       <i>// pozice světelného zdroje</i>
    color LightGray                      <i>// barva světla</i>
}
&nbsp;
<i>// jediný uzavřený objekt ve scéně - zelená skleněná koule</i>
sphere {
    &lt;0, 0, 0&gt;,                           <i>// souřadnice středu koule</i>
    1.75                                 <i>// poloměr koule</i>
    interior {                           <i>// vlastnosti "vnitřku" koule</i>
        caustics 1.0                     <i>// světelná "prasátka"</i>
        ior 1.5                          <i>// index lomu</i>
    }
    texture {                            <i>// textura - povrch koule</i>
        T_Glass1                         <i>// definováno v externím souboru</i>
        pigment {
            color green 0.90 filter 0.85 <i>// barva povrchu</i>
        }
        finish {                         <i>// optické vlastnosti materiálu</i>
            phong 1                      <i>// velikost a síla odlesků</i>
            phong_size 300
            reflection 0.15              <i>// odrazivost</i>
        }
    }
}
&nbsp;
<i>// druhý objekt - nekonečná rovina</i>
plane {
    y,                                   <i>// orientace roviny</i>
    -1.5                                 <i>// vzdálenost od počátku</i>
    texture {                            <i>// textura - vlastnosti povrchu</i>
        T_Stone1                         <i>// definováno v externím souboru</i>
        pigment {                        <i>// vlastní vzorek textury</i>
            octaves 3                    <i>// modifikace procedurálního vzorku</i>
            rotate 90*z
        }
        finish {                         <i>// optické vlastnosti materiálu</i>
            reflection 0.10
        }
    }
}
&nbsp;
&nbsp;
&nbsp;
<i>// ------------------------------------------------------------</i>
<i>// finito</i>
<i>// ------------------------------------------------------------</i>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Varianta naprogramovaná ve Vapory</h2>

<p>Při použití Pythonu a knihovny Vapory je nutné v&nbsp;deklaraci scény uvést
všechny vkládané soubory v&nbsp;nepovinném parametru <strong>included</strong>,
který se předává konstruktoru třídy <strong>Scene</strong>. Hodnotou tohoto
parametru je seznam vkládaných souborů:</p>

<pre>
scene = Scene(camera,
              objects=[light1, light2, light3, sphere, plane],
              <strong>included=["colors.inc", "stones.inc", "glass.inc"]</strong>)
</pre>

<p>Úplný zápis druhého příkladu vypadá následovně:</p>

<pre>
from vapory import *
&nbsp;
y = [0, 1, 0]
z = [0, 0, 1]
&nbsp;
camera = <strong>Camera</strong>('location', [1.65, 5.5,-5.0],
                'up',       [ 0.0, 1.0, 0.0],
                'right',    [ 4/3, 0.0, 0.0],
                'look_at',  [ 0.0, 0.5,-1.0])
&nbsp;
<i># tři světelné zdroje</i>
light1 = <strong>LightSource</strong>([-30, 11, 20],
                     'color', 'White')
&nbsp;
light2 = <strong>LightSource</strong>([31, 12, -20],
                     'color', 'White')
&nbsp;
light3 = <strong>LightSource</strong>([32, 11, -20],
                     'color', 'LightGray')
&nbsp;
<i># jediný uzavřený objekt ve scéně - zelená skleněná koule</i>
sphere = <strong>Sphere</strong>([0, 0, 0],
                1.75,
                Interior(
                    'caustics', 1.0,
                    'ior', 1.5),
                Texture(
                    'T_Glass1',
                    Pigment('color', 'green', 0.9,
                            'filter', 0.85),
                    Finish('phong', 1,
                           'phong_size', 300,
                           'reflection', 0.15)))
&nbsp;
<i># druhý objekt - nekonečná rovina</i>
plane = <strong>Plane</strong>(y,
              -1.5,
              Texture(
                  'T_Stone1',
                  Pigment('octaves', 3,
                          'rotate', [i * 90 for i in z]),
                  Finish('reflection', 0.10)))
&nbsp;
scene = <strong>Scene</strong>(camera,
              objects=[light1, light2, light3, sphere, plane],
              included=["colors.inc", "stones.inc", "glass.inc"])
&nbsp;
scene.render("scene2_vapory.png", width=640, height=480)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vylepšení předchozího příkladu &ndash; deklarace hodnoty pro gama korekci</h2>

<p>Ve skutečnosti jsou výsledné obrázky vykreslené POV-Rayem odlišné, protože
první varianta (vytvořená přímo v&nbsp;jazyku POV-Raye) obsahovala deklaraci
hodnoty <i>gmma</i>, kdežto druhá varianta (Vapory) nikoli &ndash; viz též <a
href="https://en.wikipedia.org/wiki/Gamma_correction">Gama korekce na
Wiki</a>:</p>

<a href="https://www.root.cz/obrazek/330815/"><img src="https://i.iinfo.cz/images/587/vapory1-5-prev.jpg" class="image-330815" alt="&#160;" height="270" width="360" /></a>
<p><i>Obrázek 8: Obrázek vykreslený při použití gama=2.2.</i></p>

<a href="https://www.root.cz/obrazek/330816/"><img src="https://i.iinfo.cz/images/587/vapory1-6-prev.jpg" class="image-330816" alt="&#160;" height="270" width="360" /></a>
<p><i>Obrázek 9: Obrázek vykreslený při použití výchozí hodnoty gama.</i></p>

<p>V&nbsp;POV-Rayi je nastavení výchozí hodnoty gama velmi snadné:</p>

<pre>
<i>// globální nastavení parametrů scény</i>
global_settings {
    assumed_gamma 2.2
}
</pre>

<p>Ve Vapory musíme použít další nepovinný parametr předávaný do konstruktoru
třídy <strong>Scene</strong>. Tento parametr se jmenuje
<strong>global_settings</strong> a jeho hodnotou je seznam řetězců, které se
předávají POV-Rayi:</p>

<pre>
scene = Scene(camera,
              objects=[light1, light2, light3, sphere, plane],
              included=["colors.inc", "stones.inc", "glass.inc"],
              <strong>global_settings=["assumed_gamma 2.2"]</strong>)
</pre>

<p>Opět si ukažme úplný zdrojový kód tohoto příkladu:</p>

<pre>
from vapory import *
&nbsp;
y = [0, 1, 0]
z = [0, 0, 1]
&nbsp;
camera = Camera('location', [1.65, 5.5,-5.0],
                'up',       [ 0.0, 1.0, 0.0],
                'right',    [ 4/3, 0.0, 0.0],
                'look_at',  [ 0.0, 0.5,-1.0])
&nbsp;
<i># tři světelné zdroje</i>
light1 = LightSource([-30, 11, 20],
                     'color', 'White')
&nbsp;
light2 = LightSource([31, 12, -20],
                     'color', 'White')
&nbsp;
light3 = LightSource([32, 11, -20],
                     'color', 'LightGray')
&nbsp;
<i># jediný uzavřený objekt ve scéně - zelená skleněná koule</i>
sphere = Sphere([0, 0, 0],
                1.75,
                Interior(
                    'caustics', 1.0,
                    'ior', 1.5),
                Texture(
                    'T_Glass1',
                    Pigment('color', 'green', 0.9,
                            'filter', 0.85),
                    Finish('phong', 1,
                           'phong_size', 300,
                           'reflection', 0.15)))
&nbsp;
<i># druhý objekt - nekonečná rovina</i>
plane = Plane(y,
              -1.5,
              Texture(
                  'T_Stone1',
                  Pigment('octaves', 3,
                          'rotate', [i * 90 for i in z]),
                  Finish('reflection', 0.10)))
&nbsp;
scene = Scene(camera,
              objects=[light1, light2, light3, sphere, plane],
              included=["colors.inc", "stones.inc", "glass.inc"],
              global_settings=["assumed_gamma 2.2"])
&nbsp;
scene.render("scene2B_vapory.png", width=640, height=480)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Konstruktivní geometrie těles v&nbsp;POV-Rayi</h2>

<p>POV-Ray, podobně jako mnohé další raytracery, podporuje tzv.&nbsp;CSG.
Reprezentace modelů pomocí <i>konstruktivní geometrie těles</i>
(<i>Constructive Solid Geometry &ndash; CSG</i>) je založena na analytickém
popisu těles jejich objemem, tj. podmnožinou trojrozměrného prostoru ležícího
uvnitř tělesa. V&nbsp;literatuře se lze občas setkat s&nbsp;tvrzením, že
konstruktivní geometrie těles patří mezi metody popisující hranici těles. To
však není zcela přesné, protože v&nbsp;CSG můžeme pro libovolný bod jednoduše
zjistit, zda leží uvnitř či vně tělesa, což se v&nbsp;POV-Rayi velmi často
používá.</p>

<img src="http://i.iinfo.cz/urs/povray03_01-preview-120516786776884.png" alt="sceneX" />
<p><i>Obrázek 10: Jednoduché těleso vytvořené z koule a krychle spojené operací
rozdílu (difference).</i></p>

<p>Na druhou stranu se pro mnohá tělesa složitě zjišťují souřadnice bodů na
povrchu těles, mnohdy je dokonce nutné použít numerické metody. Minimálně
těmito vlastnostmi se tedy CSG odlišuje od běžně chápané hraniční reprezentace.
Vývoj konstruktivní geometrie byl zahájen v&nbsp;roce 1973 s&nbsp;cílem
definovat složité útvary pomocí operací sjednocení, průniku, rozdílu a hladkého
napojení nad základními tělesy (primitivy).</p>

<img src="http://i.iinfo.cz/urs/povray03_02-preview-120516792877464.png" alt="sceneX" />
<p><i>Obrázek 11: Jednoduché těleso vytvořené z koule a krychle spojené operací
průniku (intersection).</i></p>

<p>Jako primitiva se většinou používají objekty popsatelné pomocí jedné či
soustavou několika nerovnic, v&nbsp;nichž se vyskytují polynomy nízkého stupně.
Typicky se jedná o následující objekty: koule, válec, kužel, elipsoid (vše jsou
to kvadriky), toroid a poloprostor. Model vychází ze skutečnosti, že těleso
v&nbsp;prostoru lze popsat jako množinu bodů, které splňují určité vlastnosti.
Ty mohou být u jednoduchých objektů popsány jednou nerovnicí či soustavou
nerovnic.</p>

<img src="http://i.iinfo.cz/urs/povray03_03-preview-120516798038163.png" alt="sceneX" />
<p><i>Obrázek 12: Jednoduché těleso vytvořené z koule a krychle spojené operací
spojení (union).</i></p>

<p>Popisovat složitý objekt s&nbsp;mnoha nerovnostmi na povrchu pomocí soustavy
nerovnic může být velmi obtížné a může vést ke komplikacím při vyhodnocování
(vykreslování) scény. Aby k&nbsp;uvedeným problémům nedocházelo, skládají se
v&nbsp;CSG reprezentaci složitější objekty z&nbsp;objektů jednoduchých pomocí
množinových operací. Množinovými operacemi, které při popisu přicházejí
v&nbsp;úvahu, jsou binární nebo n-ární <strong>průnik</strong> (∩),
<strong>sjednocení</strong> (∪) a <strong>rozdíl</strong> (-). Často se používá
i unární operace <strong>doplněk</strong> ('), která znamená
&bdquo;převrácení&ldquo; tělesa, tedy smyslu bodů ležících uvnitř a vně tělesa
se zachováním hranice.</p>

<img src="http://i.iinfo.cz/urs/povray03_06-preview-120516814619116.png" alt="sceneX" />
<p><i>Obrázek 13: Základní 3D tělesa, která lze zkombinovat pomocí CSG.</i></p>

<p>Složité těleso je tedy v&nbsp;CSG reprezentaci popsáno stromem, který
obsahuje ve svých listech geometrické, popř. i doplňkové informace o
primitivních tělesech. V&nbsp;uzlech tohoto stromu jsou uloženy množinové
operace, popřípadě i transformace. Lineárními transformacemi může být popsána
změna polohy, popř. změna měřítka části tělesa ležícího v&nbsp;daném podstromu.
Kromě lineárních transformací lze použít i obecnější transformace, které potom
mohou reprezentovat například různé deformace buď celého tělesa nebo jeho části
(zde se však již jedná o poměrně složitou technologii).</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Třetí příklad &ndash; POV-Ray varianta</h2>

<p>V&nbsp;POV-Rayi se CSG zapisuje jednoduše. Následuje ukázka operace
rozdílu:</p>

<pre>
<strong>difference</strong> {
    těleso1
    těleso2
    transformace
}
</pre>

<p>Například pro vytvoření rozdílového tělesa mezi krychlí a koulí
použijeme:</p>

<pre>
<strong>difference</strong> {
    <strong>box</strong> {
        &lt;-VEL, -VEL, -VEL&gt;               <i>// jeden z vrcholů krychle na tělesové úhlopříčce</i>
        &lt; VEL,  VEL,  VEL&gt;               <i>// druhý z vrcholů krychle na tělesové úhlopříčce</i>
        texture {                        <i>// textura - povrch krychle</i>
            T_Wood23                     <i>// definováno v externím souboru</i>
            finish {                     <i>// optické vlastnosti materiálu</i>
                phong 1                  <i>// velikost a síla odlesků</i>
                phong_size 300
                reflection 0.15          <i>// odrazivost</i>
            }
        }
    }
    <strong>sphere</strong> {
        &lt;0, 0, 0&gt;,                       <i>// souřadnice středu koule</i>
        1.8                              <i>// poloměr koule</i>
        texture {                        <i>// textura - povrch koule</i>
            T_Wood24                     <i>// definováno v externím souboru</i>
            finish {                     <i>// optické vlastnosti materiálu</i>
                phong 1                  <i>// velikost a síla odlesků</i>
                phong_size 300
                reflection 0.15          <i>// odrazivost</i>
            }
        }
    }
    rotate &lt;0,45,0&gt;                      // rotace výsledného "dvojtělesa"
}
</pre>

<a href="https://www.root.cz/obrazek/330817/"><img src="https://i.iinfo.cz/images/587/vapory1-7-prev.jpg" class="image-330817" alt="&#160;" height="270" width="360" /></a>
<p><i>Obrázek 14: Výsledné rozdílové těleso.</i></p>

<p>Úplný <a
href="https://github.com/tisnik/vapory-examples/blob/master/scene3.pov">zdrojový
kód třetího příkladu</a> vypadá následovně:</p>

<pre>
<i>// ------------------------------------------------------------</i>
<i>// Aplikace CSG operace rozdílu koule a krychle</i>
<i>//</i>
<i>// Založeno na souboru původně vytvořeném Danem Farmerem (leden 2002)</i>
<i>//</i>
<i>// rendering lze spustit příkazem:</i>
<i>//     povray +W800 +H600 +B +FN +D +Iscena2.pov +Oscena2.png</i>
<i>// (pro náhled postačí zadat povray scena3.pov)</i>
<i>// ------------------------------------------------------------</i>
&nbsp;
#version 3.5;
&nbsp;
<i>// globální nastavení parametrů scény</i>
global_settings {
    assumed_gamma 2.2
    max_trace_level 5
}
&nbsp;
<i>// načtení všech potřebných externích souborů</i>
#include "colors.inc"
#include "stones.inc"
#include "glass.inc"
#include "woods.inc"
&nbsp;
<i>// nastavení kamery (pozorovatele)</i>
camera {
    location  &lt;1.65, 5.5, -5.0&gt;          <i>// pozice kamery</i>
    up        &lt;0.0,  1.0,  0.0&gt;          <i>// vektor směřující vzhůru</i>
    right     &lt;4/3,  0.0,  0.0&gt;          <i>// vektor směřující doprava</i>
    look_at   &lt;0,    0.5, -1.0&gt;          <i>// bod, na který kamera směřuje</i>
}
&nbsp;
<i>// tři světelné zdroje</i>
light_source {
    &lt;-30, 11,  20&gt;                       <i>// pozice světelného zdroje</i>
    color White                          <i>// barva světla</i>
}
&nbsp;
light_source {
    &lt; 31, 12, -20&gt;                       <i>// pozice světelného zdroje</i>
    color White                          <i>// barva světla</i>
}
&nbsp;
light_source {
    &lt; 32, 11, -20&gt;                       <i>// pozice světelného zdroje</i>
    color LightGray                      <i>// barva světla</i>
}
&nbsp;
#declare VEL=1.45;                       <i>// velikost krychle</i>
&nbsp;
difference {
    box {
        &lt;-VEL, -VEL, -VEL&gt;               <i>// jeden z vrcholů krychle na tělesové úhlopříčce</i>
        &lt; VEL,  VEL,  VEL&gt;               <i>// druhý z vrcholů krychle na tělesové úhlopříčce</i>
        texture {                        <i>// textura - povrch krychle</i>
            T_Wood23                     <i>// definováno v externím souboru</i>
            finish {                     <i>// optické vlastnosti materiálu</i>
                phong 1                  <i>// velikost a síla odlesků</i>
                phong_size 300
                reflection 0.15          <i>// odrazivost</i>
            }
        }
    }
    sphere {
        &lt;0, 0, 0&gt;,                       <i>// souřadnice středu koule</i>
        1.8                              <i>// poloměr koule</i>
        texture {                        <i>// textura - povrch koule</i>
            T_Wood24                     <i>// definováno v externím souboru</i>
            finish {                     <i>// optické vlastnosti materiálu</i>
                phong 1                  <i>// velikost a síla odlesků</i>
                phong_size 300
                reflection 0.15          <i>// odrazivost</i>
            }
        }
    }
    rotate &lt;0,45,0&gt;                      <i>// rotace výsledného "dvojtělesa"</i>
}
&nbsp;
<i>// druhý objekt - nekonečná rovina</i>
plane {
    y,                                   <i>// orientace roviny</i>
    -1.5                                 <i>// vzdálenost od počátku</i>
    texture {                            <i>// textura - vlastnosti povrchu</i>
        T_Stone1                         <i>// definováno v externím souboru</i>
        pigment {                        <i>// vlastní vzorek textury</i>
            octaves 3                    <i>// modifikace procedurálního vzorku</i>
            rotate 90*z
        }
        finish {                         <i>// optické vlastnosti materiálu</i>
            reflection 0.10
        }
    }
}
&nbsp;
&nbsp;
&nbsp;
<i>// ------------------------------------------------------------</i>
<i>// finito</i>
<i>// ------------------------------------------------------------ </i>
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Třetí příklad &ndash; varianta používající Vapory</h2>

<p>Přepis do Vapory je snadný, protože například rozdíl těles (CSG operace) se
zapíše konstruktorem <strong>Difference</strong>:</p>

<pre>
csg_object = <strong>Difference</strong>(
    <strong>Box</strong>([-VEL, -VEL, -VEL],
        [VEL, VEL, VEL],
        Texture(
            'T_Wood23',
            Finish('phong', 1,
                   'phong_size', 300,
                   'reflection', 0.15))),
    <strong>Sphere</strong>([0, 0, 0],
           1.8,
           Texture(
               'T_Wood24',
               Finish('phong', 1,
                      'phong_size', 300,
                      'reflection', 0.15)))
)
</pre>

<p>Přepis celého demonstračního příkladu <a
href="https://github.com/tisnik/vapory-examples/blob/master/scene3.py">do
Pythonu/Vapory</a> může vypadat takto:</p>

<pre>
from vapory import *
&nbsp;
y = [0, 1, 0]
z = [0, 0, 1]
&nbsp;
camera = Camera('location', [1.65, 5.5,-5.0],
                'up',       [ 0.0, 1.0, 0.0],
                'right',    [ 4/3, 0.0, 0.0],
                'look_at',  [ 0.0, 0.5,-1.0])
&nbsp;
<i># tři světelné zdroje</i>
&nbsp;
light1 = LightSource([-30, 11, 20],
                     'color', 'White')
&nbsp;
light2 = LightSource([31, 12, -20],
                     'color', 'White')
&nbsp;
light3 = LightSource([32, 11, -20],
                     'color', 'LightGray')
&nbsp;
VEL = 1.45  # velikost krychle
&nbsp;
csg_object = Difference(
    Box([-VEL, -VEL, -VEL],
        [VEL, VEL, VEL],
        Texture(
            'T_Wood23',
            Finish('phong', 1,
                   'phong_size', 300,
                   'reflection', 0.15))),
    Sphere([0, 0, 0],
           1.8,
           Texture(
               'T_Wood24',
               Finish('phong', 1,
                      'phong_size', 300,
                      'reflection', 0.15)))
)
&nbsp;
<i># druhý objekt - nekonečná rovina</i>
plane = Plane(y,
              -1.5,
              Texture(
                  'T_Stone1',
                  Pigment('octaves', 3,
                          'rotate', [i * 90 for i in z]),
                  Finish('reflection', 0.10)))
&nbsp;
scene = Scene(camera,
              objects=[light1, light2, light3, csg_object, plane],
              included=["colors.inc", "stones.inc", "woods.inc"],
              global_settings=["assumed_gamma 2.2"])
&nbsp;
scene.render("scene3_vapory.png", width=640, height=480)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Úprava předchozího příkladu: použití samostatných objektů, na něž se aplikují CSG operace</h2>

<p>Předchozí příklad je možné upravit takovým způsobem, že nejdříve vytvoříme
objekty představující samotná 3D tělesa vstupující do CSG:</p>

<pre>
VEL = 1.45  <i># velikost krychle</i>
&nbsp;
box = <strong>Box</strong>([-VEL, -VEL, -VEL],
          [VEL, VEL, VEL],
          Texture(
              'T_Wood23',
              Finish('phong', 1,
                     'phong_size', 300,
                     'reflection', 0.15)))
&nbsp;
sphere = <strong>Sphere</strong>([0, 0, 0],
                1.8,
                Texture(
                    'T_Wood24',
                    Finish('phong', 1,
                           'phong_size', 300,
                           'reflection', 0.15)))
</pre>

<p>Teprve poté se na tato dvě tělesa aplikuje vybraná operace. Předností je, že
jedno těleso lze použít vícekrát, popř.&nbsp;jednodušší tvorba animací:</p>

<pre>
csg_object = Difference(box, sphere)
</pre>

<p>Výsledný kód naleznete na adrese <a
href="https://github.com/tisnik/vapory-examples/blob/master/scene3_update.py">https://github.com/tisnik/vapory-examples/blob/master/scene3_update.py</a>:</p>

<pre>
from vapory import *
&nbsp;
y = [0, 1, 0]
z = [0, 0, 1]
&nbsp;
camera = Camera('location', [1.65, 5.5,-5.0],
                'up',       [ 0.0, 1.0, 0.0],
                'right',    [ 4/3, 0.0, 0.0],
                'look_at',  [ 0.0, 0.5,-1.0])
&nbsp;
# tři světelné zdroje
light1 = LightSource([-30, 11, 20],
                     'color', 'White')
&nbsp;
light2 = LightSource([31, 12, -20],
                     'color', 'White')
&nbsp;
light3 = LightSource([32, 11, -20],
                     'color', 'LightGray')
&nbsp;
VEL = 1.45  <i># velikost krychle</i>
&nbsp;
box = Box([-VEL, -VEL, -VEL],
          [VEL, VEL, VEL],
          Texture(
              'T_Wood23',
              Finish('phong', 1,
                     'phong_size', 300,
                     'reflection', 0.15)))
&nbsp;
sphere = Sphere([0, 0, 0],
                1.8,
                Texture(
                    'T_Wood24',
                    Finish('phong', 1,
                           'phong_size', 300,
                           'reflection', 0.15)))
&nbsp;
csg_object = Difference(box, sphere)
&nbsp;
<i># druhý objekt - nekonečná rovina</i>
plane = Plane(y,
              -1.5,
              Texture(
                  'T_Stone1',
                  Pigment('octaves', 3,
                          'rotate', [i * 90 for i in z]),
                  Finish('reflection', 0.10)))
&nbsp;
scene = Scene(camera,
              objects=[light1, light2, light3, csg_object, plane],
              included=["colors.inc", "stones.inc", "woods.inc"],
              global_settings=["assumed_gamma 2.2"])
&nbsp;
scene.render("scene3B_vapory.png", width=640, height=480)
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Základ tvorby jednoduchých animací</h2>

<p>Jeden z&nbsp;důvodů, proč používat Vapory namísto přímé dekarace 3D scén
v&nbsp;POV-Rayi, spočívá ve snadnější tvorbě animací, protože v&nbsp;Pythonu
můžeme provádět různě složité výpočty, pracovat s&nbsp;nelineárním časem atd.
atd. Samozřejmě si opět ukážeme příklad, který bude vycházet z&nbsp;příkladu
předchozího, tj.&nbsp;i zde se bude využívat CSG (<i>Constructive solid
geometry</i>). Ovšem celá scéna bude vytvářena a vykreslována v&nbsp;programové
smyčce, v&nbsp;níž se bude postupně měnit souřadnice středu koule, která
společně s&nbsp;krychlí tvoří těleso získané právě pomocí CSG. Koule je
zpočátku umístěna mimo krychli a v&nbsp;navazujících snímcích postupně krychlí
prolétá:</p>

<pre>
def construct_scene(t):
    sphere = Sphere([0, 3.3 - 7.0*t, 0],
                    1.8,
                    Texture(
                        'T_Wood24',
                        Finish('phong', 1,
                               'phong_size', 300,
                               'reflection', 0.15)))

    csg_object = Difference(box, sphere)
&nbsp;
    return Scene(camera,
                 objects=[light1, light2, light3, csg_object, plane],
                 included=["colors.inc", "stones.inc", "woods.inc"],
                 global_settings=["assumed_gamma 2.2"])
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Vygenerování série snímků ve Vapory</h2>

<p>Pokud výše uvedenou funkci spoustíte ve smyčce:</p>

<pre>
FRAMES = 100
&nbsp;
for frame in range(0, FRAMES):
    t = frame / float(FRAMES)
    scene = construct_scene(t)
    filename = "frame_{:03d}.png".format(frame)
    scene.render(filename, width=400, height=300)
</pre>

<p>Vytvoří se série snímků ve formátu PNG:</p>

<img src="https://i.iinfo.cz/images/503/vapory2-1.jpg" class="image-330818" alt="&#160;" height="300" width="400" />
<p><i>Obrázek 14: Snímek číslo 0.</i></p>

<img src="https://i.iinfo.cz/images/503/vapory2-2.jpg" class="image-330819" alt="&#160;" height="300" width="400" />
<p><i>Obrázek 15: Snímek číslo 8.</i></p>

<img src="https://i.iinfo.cz/images/503/vapory2-3.jpg" class="image-330820" alt="&#160;" height="300" width="400" />
<p><i>Obrázek 16: Snímek číslo 16.</i></p>

<img src="https://i.iinfo.cz/images/503/vapory2-4.jpg" class="image-330821" alt="&#160;" height="300" width="400" />
<p><i>Obrázek 17: Snímek číslo 24.</i></p>

<img src="https://i.iinfo.cz/images/503/vapory2-5.jpg" class="image-330822" alt="&#160;" height="300" width="400" />
<p><i>Obrázek 18: Snímek číslo 32.</i></p>

<img src="https://i.iinfo.cz/images/503/vapory2-6.jpg" class="image-330823" alt="&#160;" height="300" width="400" />
<p><i>Obrázek 19: Snímek číslo 40.</i></p>

<img src="https://i.iinfo.cz/images/503/vapory2-7.jpg" class="image-330824" alt="&#160;" height="300" width="400" />
<p><i>Obrázek 20: Snímek číslo 48.</i></p>

<img src="https://i.iinfo.cz/images/503/vapory2-8.jpg" class="image-330825" alt="&#160;" height="300" width="400" />
<p><i>Obrázek 21: Snímek číslo 56.</i></p>

<img src="https://i.iinfo.cz/images/503/vapory2-9.jpg" class="image-330826" alt="&#160;" height="300" width="400" />
<p><i>Obrázek 22: Snímek číslo 64.</i></p>

<img src="https://i.iinfo.cz/images/503/vapory2-10.jpg" class="image-330827" alt="&#160;" height="300" width="400" />
<p><i>Obrázek 23: Snímek číslo 72.</i></p>

<img src="https://i.iinfo.cz/images/503/vapory2-11.jpg" class="image-330828" alt="&#160;" height="300" width="400" />
<p><i>Obrázek 24: Snímek číslo 80.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Vytvoření animace ze série snímků</h2>

<p>Z&nbsp;těchto snímků je nutné vytvořit animaci, k&nbsp;čemuž (prozatím)
využijeme nástroj <i>ffmpeg</i>:</p>

<pre>
ffmpeg -r 10 -i frame_%03d.png -b:v 700k scene4.ogg
</pre>

<p>Výsledkem by tedy měla být tato animace:<br />
<a href="https://tisnik.github.io/moviepy-videos/video10.htm">https://tisnik.github.io/moviepy-videos/video10.htm</a></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Úplný zdrojový kód čtvrtého příkladu</h2>

<p>Úplný zdrojový kód čtvrtého příkladu naleznete na adrese <a
href="https://github.com/tisnik/vapory-examples/blob/master/scene4.py">https://github.com/tisnik/vapory-examples/blob/master/scene4.py</a>:</p>

<pre>
from vapory import *
&nbsp;
y = [0, 1, 0]
z = [0, 0, 1]
&nbsp;
camera = Camera('location', [1.65, 5.5,-5.0],
                'up',       [ 0.0, 1.0, 0.0],
                'right',    [ 4/3, 0.0, 0.0],
                'look_at',  [ 0.0, 0.5,-1.0])
&nbsp;
<i># tři světelné zdroje</i>
light1 = LightSource([-30, 11, 20],
                     'color', 'White')
&nbsp;
light2 = LightSource([31, 12, -20],
                     'color', 'White')
&nbsp;
light3 = LightSource([32, 11, -20],
                     'color', 'LightGray')
&nbsp;
VEL = 1.45  <i># velikost krychle</i>
&nbsp;
box = Box([-VEL, -VEL, -VEL],
          [VEL, VEL, VEL],
          Texture(
              'T_Wood23',
              Finish('phong', 1,
                     'phong_size', 300,
                     'reflection', 0.15)))
&nbsp;
<i># druhý objekt - nekonečná rovina</i>
plane = Plane(y,
              -1.5,
              Texture(
                  'T_Stone1',
                  Pigment('octaves', 3,
                          'rotate', [i * 90 for i in z]),
                  Finish('reflection', 0.10)))
&nbsp;
def construct_scene(t):
    sphere = Sphere([0, 3.3 - 7.0*t, 0],
                    1.8,
                    Texture(
                        'T_Wood24',
                        Finish('phong', 1,
                               'phong_size', 300,
                               'reflection', 0.15)))
&nbsp;
    csg_object = Difference(box, sphere)
&nbsp;
    return Scene(camera,
                 objects=[light1, light2, light3, csg_object, plane],
                 included=["colors.inc", "stones.inc", "woods.inc"],
                 global_settings=["assumed_gamma 2.2"])
&nbsp;
FRAMES = 100
&nbsp;
for frame in range(0, FRAMES):
    t = frame / float(FRAMES)
    scene = construct_scene(t)
    filename = "frame_{:03d}.png".format(frame)
    scene.render(filename, width=400, height=300)
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Makefile soubor určený pro vykreslení všech scén POV-Rayem</h2>

<p>Pro zajímavost si ještě ukažme soubor <strong>Makefile</strong> použitý pro
vytvoření rastrových obrázků ze všech zdrojových kódů určených přímo pro
POV-Ray, tj.&nbsp;ze souborů s&nbsp;koncovkou <strong>.pov</strong>. Tento
soubor je součástí repositáře:</p>

<pre>
<i># seznam vsech zdrojovych v POV-Rayi</i>
SOURCES := $(wildcard *.pov)
&nbsp;
<i># seznam souboru, ktere se maji vygenerovat</i>
GENERATED := $(patsubst %.pov,%.png,$(SOURCES))
&nbsp;
all: ${GENERATED}
&nbsp;
clean:
        rm *.png
&nbsp;
%.png:  %.pov
        povray +W640 +H480 +B +FN +D +I$&lt; +O$@
&nbsp;
.PHONY: clean
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
POV-Ray i Vapory byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/vapory-examples">https://github.com/tisnik/vapory-examples</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, stále doslova několik kilobajtů), můžete namísto toho použít odkazy
na jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Demonstrační příklad</th><th>Cesta</th></tr>
<tr><td>scene1.pov</td><td><a href="https://github.com/tisnik/vapory-examples/blob/master/scene1.pov">https://github.com/tisnik/vapory-examples/blob/master/scene1.pov</a></td></tr>
<tr><td>scene1.py</td><td><a href="https://github.com/tisnik/vapory-examples/blob/master/scene1.py">https://github.com/tisnik/vapory-examples/blob/master/scene1.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>scene2.pov</td><td><a href="https://github.com/tisnik/vapory-examples/blob/master/scene2.pov">https://github.com/tisnik/vapory-examples/blob/master/scene2.pov</a></td></tr>
<tr><td>scene2.py</td><td><a href="https://github.com/tisnik/vapory-examples/blob/master/scene2.py">https://github.com/tisnik/vapory-examples/blob/master/scene2.py</a></td></tr>
<tr><td>scene2_update.py</td><td><a href="https://github.com/tisnik/vapory-examples/blob/master/scene2_update.py">https://github.com/tisnik/vapory-examples/blob/master/scene2_update.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>scene3.pov</td><td><a href="https://github.com/tisnik/vapory-examples/blob/master/scene3.pov">https://github.com/tisnik/vapory-examples/blob/master/scene3.pov</a></td></tr>
<tr><td>scene3.py</td><td><a href="https://github.com/tisnik/vapory-examples/blob/master/scene3.py">https://github.com/tisnik/vapory-examples/blob/master/scene3.py</a></td></tr>
<tr><td>scene3_update.py</td><td><a href="https://github.com/tisnik/vapory-examples/blob/master/scene3_update.py">https://github.com/tisnik/vapory-examples/blob/master/scene3_update.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>scene4.py</td><td><a href="https://github.com/tisnik/vapory-examples/blob/master/scene4.py">https://github.com/tisnik/vapory-examples/blob/master/scene4.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>vapory na GitHubu<br />
<a href="https://github.com/Zulko/vapory">https://github.com/Zulko/vapory</a>
</li>

<li>Seriál na Rootu: Vykreslujeme 3D scény s POV-Ray<br />
<a href="https://www.root.cz/serialy/vykreslujeme-3d-sceny-s-pov-ray/">https://www.root.cz/serialy/vykreslujeme-3d-sceny-s-pov-ray/</a>
</li>

<li>Animace v POV-Rayi<br />
<a href="https://www.root.cz/clanky/animace-v-pov-rayi/">https://www.root.cz/clanky/animace-v-pov-rayi/</a>
</li>

<li>Tvorba pokročilejších animací v POV-Rayi<br />
<a href="https://www.root.cz/clanky/tvorba-pokrocilejsich-animaci-v-pov-rayi/">https://www.root.cz/clanky/tvorba-pokrocilejsich-animaci-v-pov-rayi/</a>
</li>

<li>The POV-Ray Cyclopedia:<br />
<a href="http://www.spi­ritone.com/~en­glish/cyclope­dia/index.html">http://www.spi­ritone.com/~en­glish/cyclope­dia/index.html</a>
</li>

<li>POV-Ray New Ring:<br />
<a href="http://webrin­g.povray.org/">http://webrin­g.povray.org/</a>
</li>

<li>Animations with POV-Ray:<br />
<a href="http://www.f-lohmueller.de/pov_tut/­animate/pov_a­nie.htm">http://www.f-lohmueller.de/pov_tut/­animate/pov_a­nie.htm</a>
</li>

<li>The POV-Ray Objects Collection:<br />
<a href="http://objects­.povworld.org/">http://objects­.povworld.org/</a>
</li>

<li>POV-Ray Texture Library 4.0:<br />
<a href="http://texlib­.povray.org/">http://texlib­.povray.org/</a>
</li>

<li>Galerie modelů vytvořených v Lparseru:<br />
<a href="http://home.wa­nadoo.nl/lauren­s.lapre/lparser2­.html">http://home.wa­nadoo.nl/lauren­s.lapre/lparser2­.html</a>
</li>

<li>Charlie Chernohorsky :-) L-systémy ve FractIntu:<br />
<a href="http://fractin­t.oblivion.cz/">http://fractin­t.oblivion.cz/</a>
</li>

<li>POV-Ray Hall of Fame,<br />
<a href="http://hof.po­vray.org/">http://hof.po­vray.org/</a>
</li>

<li>Tekno Frannansa,<br />
<a href="http://www.zaz­zle.com/tekf">http://www.zaz­zle.com/tekf</a>
</li>

<li>Internet Raytracing Competition,<br />
<a href="http://www.ir­tc.org/">http://www.ir­tc.org/</a>
</li>

<li>POVRay Short Code Contest – Round 3,<br />
<a href="http://local.was­p.uwa.edu.au/~pbou­rke/exhibition/scc3/fi­nal/">http://local.was­p.uwa.edu.au/~pbou­rke/exhibition/scc3/fi­nal/</a>
</li>

<li>SCC4: POVRay Short Code Contest,<br />
<a href="http://local.was­p.uwa.edu.au/~pbou­rke/exhibition/scc4/fi­nal/">http://local.was­p.uwa.edu.au/~pbou­rke/exhibition/scc4/fi­nal/</a>
</li>

<li>SCC5: POVRay Short Code Contest #5 – The animation round!,<br />
<a href="http://local.was­p.uwa.edu.au/~pbou­rke/exhibition/scc5/fi­nal.html">http://local.was­p.uwa.edu.au/~pbou­rke/exhibition/scc5/fi­nal.html</a>
</li>

<li>POV-Ray posters,<br />
<a href="http://www.po­vray.org/poster­s/">http://www.po­vray.org/poster­s/</a>
</li>

<li>Parametric Constructive Solid Geometry<br />
<a href="http://c-csg.com/">http://c-csg.com/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

