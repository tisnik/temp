<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku, který bude po dlouhé době opět věnován počítačové grafice, se seznámíme s projektem Vapory. Jedná se o knihovnu určenou pro Python, která umožňuje popis 3D scén pro raytracer POV-Ray přímo v Pythonu, což možnosti POV-Raye do značné míry rozšiřuje.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Projekt Vapory: kombinace možností Pythonu a POV-Raye</a></p>
<p><a href="#k02">2. Průběh zpracování celé 3D scény</a></p>
<p><a href="#k03">3. Instalace modulu <strong>vapory</strong> i raytraceru POV-Ray</a></p>
<p><a href="#k04">4. První testovací scéna napsaná přímo pro POV-Ray</a></p>
<p><a href="#k05">5. Shodná testovací scéna napsaná v&nbsp;Pythonu s&nbsp;využitím Vapory</a></p>
<p><a href="#k06">*** 6. Dočasný soubor vygenerovaný modulem <strong>vapory</strong></a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Makefile soubor určený pro vykreslení všech scén POV-Rayem</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Projekt Vapory: kombinace možností Pythonu a POV-Raye</h2>

<p>S&nbsp;raytracerem POV-Ray jsme se již na stránkách Rootu seznámili
v&nbsp;poměrně <a
href="https://www.root.cz/serialy/vykreslujeme-3d-sceny-s-pov-ray/">podrobném
seriálu</a>. Připomeňme si ve stručnosti, že se v&nbsp;tomto raytraceru pro
popis trojrozměrných scén (které mohou být i animované) používá vlastní jazyk,
jehož syntaxe je vzdáleně podobná Céčku a od něj odvozených jazyků. Původně byl
tento jazyk čistě deklarativní, ovšem s&nbsp;postupným vývojem schopností
POV-Raye do něj začaly být přidávány konstrukce pro tvorbu programových smyček
apod. Většina aplikací, které POV-Ray využívají jako svůj renderovací engine,
tedy všechny 3D scény (světla, kamery, textury, tělesa atd.) nejprve musí
exportovat do jazyka POV-Raye a teprve poté je možné provést vlastní
vykreslení.</p>

<img src="http://i.iinfo.cz/urs/povray50_05-preview-123594981442383.png" alt="scena1" />
<p><i>Obrázek 1: Implicitní plocha zapsaná obecným polynomem šestého
stupně. I takové plochy je možné v&nbsp;POV-Rayi vykreslit bez nutnosti jejich
rozdělení na trojúhelníky.</i></p>

<p>Do této kategorie nástrojů spadá i dnes popisovaný projekt <i>Vapory</i>,
který umožňuje, aby byla celá trojrozměrná scéna popsaná přímo v&nbsp;jazyku
Python s&nbsp;tím, že se překlad (<i>transpřeklad</i>) mezi Pythonem a
POV-Rayem provede zcela automaticky a prakticky bez zásahu uživatele. Také je
možné spojit možnosti <i>Vapory</i> s&nbsp;již popsaným [<a
href="https://www.root.cz/clanky/programova-tvorba-a-nelinearni-editace-videa-s-vyuzitim-knihovny-moviepy/">1</a>]
[<a
href="https://www.root.cz/clanky/pouziti-moviepy-spolecne-s-matplotlibem-pro-tvorbu-animovanych-grafu/">2</a>]
[<a
href="https://www.root.cz/clanky/pouziti-moviepy-spolecne-matplotlibem-pro-tvorbu-animovanych-grafu-dokonceni/">3</a>]
projektem <i>MoviePy</i>, což je poměrně zajímavé téma, kterému se budeme
věnovat příště.</p>

<img src="http://i.iinfo.cz/urs/povray50_01-123594968702243.jpg" alt="scena2" />
<p><i>Obrázek 2: Výsledek práce programu, který simuloval turbulentní proudění
vzduchu. Vypočtená data byla převedeno do formátu POV-Raye a následně
vykreslena.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Průběh zpracování celé 3D scény</h2>

<p>Průběh zpracování celé 3D scény při použití kombinace Vapory
s&nbsp;POV-Rayem vypadá následovně:</p>

*** image ***
<p><i>Obrázek 3: Zpracování 3D scény při použití Vapory a POV-Raye.</i></p>

<p>V&nbsp;navazujících kapitolách si ukážeme, jak se Vapory může použít, a to
nejenom při tvorbě statických 3D scén, ale i při programování jednodušších
animací (jednodušších pouze z&nbsp;toho prostého důvodu, že rozsah článku je
omezený).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace modulu <strong>vapory</strong> i raytraceru POV-Ray</h2>

<p>Nástroj <i>Vapory</i> je distribuován ve formě běžného balíčku pro Python,
takže je <a href="https://pypi.org/project/Vapory/">dostupný i na PyPi</a>. To
mj.&nbsp;znamená, že instalace bude velmi jednoduchá a vystačíme si
s&nbsp;nástrojem <strong>pip</strong> popř.&nbsp;<strong>pip3</strong>.
Instalaci postačuje provést pouze pro právě aktivního uživatele:</p>

<pre>
$ <strong>pip3 install --user vapory</strong>
Downloading/unpacking vapory
  Downloading Vapory-0.1.01.tar.gz
  Running setup.py (path:/tmp/pip_build_tester/vapory/setup.py) egg_info for package vapory
&nbsp;
    warning: no files found matching '*.txt' under directory 'examples'
Installing collected packages: vapory
  Running setup.py install for vapory
 &nbsp;
    warning: no files found matching '*.txt' under directory 'examples'
Successfully installed vapory
Cleaning up...
</pre>

<p>V&nbsp;případě raytraceru POV-Ray máme dvě možnosti. Buď je možné tento
nástroj nainstalovat přímo z&nbsp;balíčku připraveného pro danou distribuci
Linuxu, což je nejjednodušší řešení. Druhý způsob je sice nepatrně složitější,
ovšem získáte díky němu poslední verzi POV-Raye: naklonujte si repositář <a
href="https://github.com/POV-Ray/povray/tree/3.7-stable">https://github.com/POV-Ray/povray/tree/3.7-stable</a>
(ideálně právě větev <i>3.7-stable</i>, na kterou odkaz vede) a instalaci
provést následující sérií kroků:</p>

<pre>
cd unix/
./prebuild.sh
cd ../
./configure COMPILED_BY="jméno"
make
make install
</pre>

<p>Zapotřebí je mít k&nbsp;dispozici překladač C++ a několik knihoven ve
vývojářské verzi: Boost, zLib, libpng, libjpeg a libTIFF (většina těchto
knihoven se používá pro ukládání výsledných obrázků). Po <strong>make
install</strong> by již měl být POV-Ray připraven pro další použití, takže jen
pro rychlé ověření zjistíme jeho verzi:</p>

<pre>
$ <strong>povray --version</strong>
POV-Ray 3.7.1-beta.7695039.unofficial
&nbsp;
This is an unofficial version compiled by:
 Pavel Tisnovsky &lt;ptisnovs@redhat.com&gt;
 The POV-Ray Team is not responsible for supporting this version.
&nbsp;
Copyright 1991-2018 Persistence of Vision Raytracer Pty. Ltd.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
&nbsp;
Built-in features:
  I/O restrictions:          enabled
  X Window display:          disabled
  Supported image formats:   gif tga iff ppm pgm hdr png jpeg tiff
  Unsupported image formats: openexr
&nbsp;
Compilation settings:
  Build architecture:  x86_64-unknown-linux-gnu
  Built/Optimized for: x86_64-unknown-linux-gnu (using -march=native)
  Compiler vendor:     gnu
  Compiler version:    g++ 4.8
  Compiler flags:      -pipe -Wno-multichar -Wno-write-strings -fno-enforce-eh-specs -Wno-non-template-friend -s -O3 -ffast-math -march=native -pthread
</pre>

<img src="http://i.iinfo.cz/urs/povray41_01-122996412897835.jpg" alt="scena4" />
<p><i>Obrázek 4: Všimněte si především techniky vymodelování řetězu,
z&nbsp;hlediska raytraceru se jedná o velmi složitý objekt.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. První testovací scéna napsaná přímo pro POV-Ray</h2>

<p>Začněme porovnáním způsobu deklarace 3D scény v&nbsp;POV-Rayi a ve Vapory.
Jednoduchou scénu, v&nbsp;níž jsou umístěny dva objekty, kamera a světelný
zdroj, je možné popsat následovně (úplný zdrojový kód lze nalézt <a
href="https://github.com/tisnik/vapory-examples/blob/master/scene1.pov">zde</a>):</p>

<pre>
<i>// ------------------------------------------------------------</i>
<i>// Jednoduchá scéna s jedním uzavřeným objektem, jedním nekonečným</i>
<i>// objektem, jedním světlem a jednou kamerou (pozorovatelem)</i>
<i>//</i>
<i>// rendering lze spustit příkazem:</i>
<i>//     povray +W800 +H600 +B +FN +D +Iscena2.pov +Oscena2.png</i>
<i>// (pro náhled postačí zadat povray scena1.pov)</i>
<i>// ------------------------------------------------------------</i>
&nbsp;
<strong>#version 3.5;</strong>
&nbsp;
<i>// globální nastavení parametrů scény</i>
<strong>global_settings</strong> {
    assumed_gamma 2.2
    max_trace_level 5
}
&nbsp;
<i>// nastavení kamery (pozorovatele)</i>
<strong>camera</strong> {
    location  &lt;0.0, 2.0,-3.0&gt;        <i>// pozice kamery</i>
    up        &lt;0.0, 1.0, 0.0&gt;        <i>// vektor směřující vzhůru</i>
    right     &lt;4/3, 0.0, 0.0&gt;        <i>// vektor směřující doprava</i>
    look_at   &lt;0.0, 1.0, 2.0&gt;        <i>// bod, na který kamera směřuje</i>
}
&nbsp;
<i>// světelný zdroj</i>
<strong>light_source</strong> {
    &lt;2, 4, -3&gt;                       <i>// pozice světelného zdroje</i>
    color &lt;1,1,1&gt;                    <i>// barva světla</i>
}
&nbsp;
<i>// jediný uzavřený objekt ve scéně - zelená koule</i>
<strong>sphere</strong> {
    &lt;0, 1, 2&gt;,                           <i>// souřadnice středu koule</i>
    2.00                                 <i>// poloměr koule</i>
    texture {                            <i>// textura - povrch koule</i>
        pigment {
            color &lt;1.0, 1.0, 0.0&gt;  <i>// barva povrchu</i>
        }
        finish {                         <i>// optické vlastnosti materiálu</i>
            phong 1                      <i>// velikost a síla odlesků</i>
            phong_size 300
            reflection 0.15              <i>// odrazivost</i>
        }
    }
}
&nbsp;
<i>// druhý objekt - nekonečná rovina</i>
<strong>plane</strong> {
    y,                                   <i>// orientace roviny</i>
    -1.5                                 <i>// vzdálenost od počátku</i>
    texture {                            <i>// textura - vlastnosti povrchu</i>
        pigment {
            color &lt;1,1,1&gt;                   <i>// barva povrchu</i>
        }
        finish {                         <i>// optické vlastnosti materiálu</i>
            reflection 0.10
        }
    }
}
&nbsp;
&nbsp;
&nbsp;
<i>// ------------------------------------------------------------</i>
<i>// finito</i>
<i>// ------------------------------------------------------------</i>
</pre>

<p>Vykreslení (rendering) této scény se provede následujícím příkazem
(předpokladem samozřejmě je, že máte POV-Ray nainstalovaný nebo přeložený ze
zdrojových kódů):</p>

<pre>
<strong>povray +W640 +H480 +B +FN +D +Iscene1.pov +Oscene1.png</strong>
</pre>

<p>Samotný průběh renderingu &ndash; maximálně několik sekund &ndash; nás
nemusí příliš zajímat, ale jen pro jistotu:</p>

<pre>
Persistence of Vision(tm) Ray Tracer Version 3.7.1-alpha.7695039.unofficial
 ...
 ...
 ...
==== [Parsing...] ==========================================================
----------------------------------------------------------------------------
Parser Statistics
----------------------------------------------------------------------------
Finite Objects:            1
Infinite Objects:          1
Light Sources:             1
Total:                     3
----------------------------------------------------------------------------
Parser Time
  Parse Time:       0 hours  0 minutes  0 seconds (0.001 seconds)
              using 1 thread(s) with 0.000 CPU-seconds total
  Bounding Time:    0 hours  0 minutes  0 seconds (0.000 seconds)
              using 1 thread(s) with 0.000 CPU-seconds total
----------------------------------------------------------------------------
Render Options
  Quality:  9
  Bounding boxes.......On   Bounding threshold: 3
  Antialiasing.........Off
==== [Rendering...] ========================================================
 ...
 ...
 ...
----------------------------------------------------------------------------
Render Statistics
Image Resolution 640 x 480
----------------------------------------------------------------------------
Pixels:           307200   Samples:               0   Smpls/Pxl: 0.00
Rays:             620784   Saved:              5730   Max Level: 3/5
----------------------------------------------------------------------------
Ray-&gt;Shape Intersection          Tests       Succeeded  Percentage
----------------------------------------------------------------------------
Plane                           877300          278626     31.76
Sphere                          833770          330783     39.67
Bounding Box                    877300          612405     69.81
----------------------------------------------------------------------------
Shadow Ray Tests:            300278   Succeeded:                 38040
Shadow Cache Hits:            38032
Reflected Rays:              313584
----------------------------------------------------------------------------
----------------------------------------------------------------------------
Render Time:
  Photon Time:      No photons
  Radiosity Time:   No radiosity
  Trace Time:       0 hours  0 minutes  0 seconds (0.255 seconds)
              using 4 thread(s) with 0.786 CPU-seconds total
POV-Ray finished
</pre>

<p>Důležitější je výsledek:</p>

*** image ***
<p><i>Obrázek 5: Výsledek renderingu 3D scény raytracerem POV-Ray.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Shodná testovací scéna napsaná v&nbsp;Pythonu s&nbsp;využitím Vapory</h2>

<p>Stejnou scénu je možné v&nbsp;Pythonu s&nbsp;využitím modulu/knihovny Vapory
zapsat <a href="https://github.com/tisnik/vapory-examples/blob/master/scene1.pov">takto</a>.
Při zápisu jsem se snažil do co největší míry dodržet strukturu zdrojového kódu
POV-Raye:</p>

<pre>
from vapory import *
&nbsp;
y = [0, 1, 0]
&nbsp;
&nbsp;
camera = <strong>Camera</strong>('location', [0.0, 2.0, -3.0],
                'up',       [0.0, 1.0, 0.0],
                'right',    [4/3, 0.0, 0.0],
                'look_at',  [0.0, 1.0, 2.0])
&nbsp;
light = <strong>LightSource</strong>([2, 4, -3],
                    'color', [1, 1, 1])
&nbsp;
sphere = <strong>Sphere</strong>([0, 1, 2],
                2.0,
                Texture(
                    Pigment('color', [1, 1, 0]),
                    Finish('phong', 1,
                           'phong_size', 300,
                           'reflection', 0.15)))
&nbsp;
plane = <strong>Plane</strong>(y,
              -1.5,
              Texture(
                  Pigment('color', [1, 1, 1]),
                  Finish('reflection', 0.10)))
&nbsp;
scene = <strong>Scene</strong>(camera,
              objects=[light, sphere, plane])
&nbsp;
scene.render("scene1_vapory.png", width=640, height=480)
</pre>

<p>Povšimněte si, že všechny objekty, které tvoří 3D scénu,
tj.&nbsp;(nekonečné) plochy, trojrozměrná tělesa, světla i kamera, jsou tvořeny
instancemi tříd definovaných ve Vapory. Jedná se o tyto třídy:
<strong>Camera</strong>, <strong>LightSource</strong>, <strong>Sphere</strong>
a <strong>Plane</strong>. Následně jsou všechny objekty přidány do scény
představované instancí třídy <strong>Scene</strong> a scéna je ihned poté
vykreslena metodou <strong>Scene.render()</strong>. Není tedy nutné explicitně
volat POV-Ray; tento krok za nás Vapory provede automaticky.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Dočasný soubor vygenerovaný modulem <strong>vapory</strong></h2>

<p></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
// ------------------------------------------------------------
// Jednoduchá scéna s jedním uzavřeným objektem, jedním nekonečným
// objektem, trojicí světel a jednou kamerou (pozorovatelem)
//
// Založeno na souboru původně vytvořeném Danem Farmerem (leden 2002)
//
// rendering lze spustit příkazem:
//     povray +W800 +H600 +B +FN +D +Iscena2.pov +Oscena2.png
// (pro náhled postačí zadat povray scena2.pov)
// ------------------------------------------------------------

// globální nastavení parametrů scény
global_settings {
    assumed_gamma 2.2
    max_trace_level 5
}

// načtení všech potřebných externích souborů
#include "colors.inc"
#include "stones.inc"
#include "glass.inc"

// nastavení kamery (pozorovatele)
camera {
    location  <1.65, 5.5, -5.0>          // pozice kamery
    up        <0.0,  1.0,  0.0>          // vektor směřující vzhůru
    right     <4/3,  0.0,  0.0>          // vektor směřující doprava
    look_at   <0,    0.5, -1.0>          // bod, na který kamera směřuje
}

// tři světelné zdroje
light_source {
    <-30, 11,  20>                       // pozice světelného zdroje
    color White                          // barva světla
}

light_source {
    < 31, 12, -20>                       // pozice světelného zdroje
    color White                          // barva světla
}

light_source {
    < 32, 11, -20>                       // pozice světelného zdroje
    color LightGray                      // barva světla
}

// jediný uzavřený objekt ve scéně - zelená skleněná koule
sphere {
    <0, 0, 0>,                           // souřadnice středu koule
    1.75                                 // poloměr koule
    interior {                           // vlastnosti "vnitřku" koule
        caustics 1.0                     // světelná "prasátka"
        ior 1.5                          // index lomu
    }
    texture {                            // textura - povrch koule
        T_Glass1                         // definováno v externím souboru
        pigment {
            color green 0.90 filter 0.85 // barva povrchu
        }
        finish {                         // optické vlastnosti materiálu
            phong 1                      // velikost a síla odlesků
            phong_size 300
            reflection 0.15              // odrazivost
        }
    }
}

// druhý objekt - nekonečná rovina
plane {
    y,                                   // orientace roviny
    -1.5                                 // vzdálenost od počátku
    texture {                            // textura - vlastnosti povrchu
        T_Stone1                         // definováno v externím souboru
        pigment {                        // vlastní vzorek textury
            octaves 3                    // modifikace procedurálního vzorku
            rotate 90*z
        }
        finish {                         // optické vlastnosti materiálu
            reflection 0.10
        }
    }
}



// ------------------------------------------------------------
// finito
// ------------------------------------------------------------ 
</pre>

<pre>
from vapory import *

y = [0, 1, 0]
z = [0, 0, 1]

camera = Camera('location', [1.65, 5.5,-5.0],
                'up',       [ 0.0, 1.0, 0.0],
                'right',    [ 4/3, 0.0, 0.0],
                'look_at',  [ 0.0, 0.5,-1.0])

# tři světelné zdroje
light1 = LightSource([-30, 11, 20],
                     'color', 'White')

light2 = LightSource([31, 12, -20],
                     'color', 'White')

light3 = LightSource([32, 11, -20],
                     'color', 'LightGray')

# jediný uzavřený objekt ve scéně - zelená skleněná koule
sphere = Sphere([0, 0, 0],
                1.75,
                Interior(
                    'caustics', 1.0,
                    'ior', 1.5),
                Texture(
                    'T_Glass1',
                    Pigment('color', 'green', 0.9,
                            'filter', 0.85),
                    Finish('phong', 1,
                           'phong_size', 300,
                           'reflection', 0.15)))

# druhý objekt - nekonečná rovina
plane = Plane(y,
              -1.5,
              Texture(
                  'T_Stone1',
                  Pigment('octaves', 3,
                          'rotate', [i * 90 for i in z]),
                  Finish('reflection', 0.10)))

scene = Scene(camera,
              objects=[light1, light2, light3, sphere, plane],
              included=["colors.inc", "stones.inc", "glass.inc"])

scene.render("scene2_vapory.png", width=640, height=480)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
from vapory import *

y = [0, 1, 0]
z = [0, 0, 1]

camera = Camera('location', [1.65, 5.5,-5.0],
                'up',       [ 0.0, 1.0, 0.0],
                'right',    [ 4/3, 0.0, 0.0],
                'look_at',  [ 0.0, 0.5,-1.0])

# tři světelné zdroje
light1 = LightSource([-30, 11, 20],
                     'color', 'White')

light2 = LightSource([31, 12, -20],
                     'color', 'White')

light3 = LightSource([32, 11, -20],
                     'color', 'LightGray')

# jediný uzavřený objekt ve scéně - zelená skleněná koule
sphere = Sphere([0, 0, 0],
                1.75,
                Interior(
                    'caustics', 1.0,
                    'ior', 1.5),
                Texture(
                    'T_Glass1',
                    Pigment('color', 'green', 0.9,
                            'filter', 0.85),
                    Finish('phong', 1,
                           'phong_size', 300,
                           'reflection', 0.15)))

# druhý objekt - nekonečná rovina
plane = Plane(y,
              -1.5,
              Texture(
                  'T_Stone1',
                  Pigment('octaves', 3,
                          'rotate', [i * 90 for i in z]),
                  Finish('reflection', 0.10)))

scene = Scene(camera,
              objects=[light1, light2, light3, sphere, plane],
              included=["colors.inc", "stones.inc", "glass.inc"],
              global_settings=["assumed_gamma 2.2"])

scene.render("scene2B_vapory.png", width=640, height=480)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
from vapory import *

y = [0, 1, 0]
z = [0, 0, 1]

camera = Camera('location', [1.65, 5.5,-5.0],
                'up',       [ 0.0, 1.0, 0.0],
                'right',    [ 4/3, 0.0, 0.0],
                'look_at',  [ 0.0, 0.5,-1.0])

# tři světelné zdroje
light1 = LightSource([-30, 11, 20],
                     'color', 'White')

light2 = LightSource([31, 12, -20],
                     'color', 'White')

light3 = LightSource([32, 11, -20],
                     'color', 'LightGray')

VEL = 1.45  # velikost krychle

csg_object = Difference(
    Box([-VEL, -VEL, -VEL],
        [VEL, VEL, VEL],
        Texture(
            'T_Wood23',
            Finish('phong', 1,
                   'phong_size', 300,
                   'reflection', 0.15))),
    Sphere([0, 0, 0],
           1.8,
           Texture(
               'T_Wood24',
               Finish('phong', 1,
                      'phong_size', 300,
                      'reflection', 0.15)))
)

# druhý objekt - nekonečná rovina
plane = Plane(y,
              -1.5,
              Texture(
                  'T_Stone1',
                  Pigment('octaves', 3,
                          'rotate', [i * 90 for i in z]),
                  Finish('reflection', 0.10)))

scene = Scene(camera,
              objects=[light1, light2, light3, csg_object, plane],
              included=["colors.inc", "stones.inc", "woods.inc"],
              global_settings=["assumed_gamma 2.2"])

scene.render("scene3_vapory.png", width=640, height=480)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
from vapory import *

y = [0, 1, 0]
z = [0, 0, 1]

camera = Camera('location', [1.65, 5.5,-5.0],
                'up',       [ 0.0, 1.0, 0.0],
                'right',    [ 4/3, 0.0, 0.0],
                'look_at',  [ 0.0, 0.5,-1.0])

# tři světelné zdroje
light1 = LightSource([-30, 11, 20],
                     'color', 'White')

light2 = LightSource([31, 12, -20],
                     'color', 'White')

light3 = LightSource([32, 11, -20],
                     'color', 'LightGray')

VEL = 1.45  # velikost krychle

box = Box([-VEL, -VEL, -VEL],
          [VEL, VEL, VEL],
          Texture(
              'T_Wood23',
              Finish('phong', 1,
                     'phong_size', 300,
                     'reflection', 0.15)))

sphere = Sphere([0, 0, 0],
                1.8,
                Texture(
                    'T_Wood24',
                    Finish('phong', 1,
                           'phong_size', 300,
                           'reflection', 0.15)))

csg_object = Difference(box, sphere)

# druhý objekt - nekonečná rovina
plane = Plane(y,
              -1.5,
              Texture(
                  'T_Stone1',
                  Pigment('octaves', 3,
                          'rotate', [i * 90 for i in z]),
                  Finish('reflection', 0.10)))

scene = Scene(camera,
              objects=[light1, light2, light3, csg_object, plane],
              included=["colors.inc", "stones.inc", "woods.inc"],
              global_settings=["assumed_gamma 2.2"])

scene.render("scene3B_vapory.png", width=640, height=480)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

ffmpeg -r 10 -i frame_%03d.png -b:v 700k scene4.ogg



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Makefile soubor určený pro vykreslení všech scén POV-Rayem</h2>

<pre>
# seznam vsech zdrojovych v POV-Rayi
SOURCES := $(wildcard *.pov)

# seznam souboru, ktere se maji vygenerovat
GENERATED := $(patsubst %.pov,%.png,$(SOURCES))

all: ${GENERATED}

clean:
        rm *.png

%.png:  %.pov
        povray +W640 +H480 +B +FN +D +I$< +O$@

.PHONY: clean
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>vapory na GitHubu<br />
<a href="https://github.com/Zulko/vapory">https://github.com/Zulko/vapory</a>
</li>

<li>Seriál na Rootu: Vykreslujeme 3D scény s POV-Ray<br />
<a href="https://www.root.cz/serialy/vykreslujeme-3d-sceny-s-pov-ray/">https://www.root.cz/serialy/vykreslujeme-3d-sceny-s-pov-ray/</a>
</li>

<li>Animace v POV-Rayi<br />
<a href="https://www.root.cz/clanky/animace-v-pov-rayi/">https://www.root.cz/clanky/animace-v-pov-rayi/</a>
</li>

<li>Tvorba pokročilejších animací v POV-Rayi<br />
<a href="https://www.root.cz/clanky/tvorba-pokrocilejsich-animaci-v-pov-rayi/">https://www.root.cz/clanky/tvorba-pokrocilejsich-animaci-v-pov-rayi/</a>
</li>

<li>The POV-Ray Cyclopedia:<br />
<a href="http://www.spi­ritone.com/~en­glish/cyclope­dia/index.html">http://www.spi­ritone.com/~en­glish/cyclope­dia/index.html</a>
</li>

<li>POV-Ray New Ring:<br />
<a href="http://webrin­g.povray.org/">http://webrin­g.povray.org/</a>
</li>

<li>Animations with POV-Ray:<br />
<a href="http://www.f-lohmueller.de/pov_tut/­animate/pov_a­nie.htm">http://www.f-lohmueller.de/pov_tut/­animate/pov_a­nie.htm</a>
</li>

<li>The POV-Ray Objects Collection:<br />
<a href="http://objects­.povworld.org/">http://objects­.povworld.org/</a>
</li>

<li>POV-Ray Texture Library 4.0:<br />
<a href="http://texlib­.povray.org/">http://texlib­.povray.org/</a>
</li>

<li>Galerie modelů vytvořených v Lparseru:<br />
<a href="http://home.wa­nadoo.nl/lauren­s.lapre/lparser2­.html">http://home.wa­nadoo.nl/lauren­s.lapre/lparser2­.html</a>
</li>

<li>Charlie Chernohorsky :-) L-systémy ve FractIntu:<br />
<a href="http://fractin­t.oblivion.cz/">http://fractin­t.oblivion.cz/</a>
</li>

<li>POV-Ray Hall of Fame,<br />
<a href="http://hof.po­vray.org/">http://hof.po­vray.org/</a>
</li>

<li>Tekno Frannansa,<br />
<a href="http://www.zaz­zle.com/tekf">http://www.zaz­zle.com/tekf</a>
</li>

<li>Internet Raytracing Competition,<br />
<a href="http://www.ir­tc.org/">http://www.ir­tc.org/</a>
</li>

<li>POVRay Short Code Contest – Round 3,<br />
<a href="http://local.was­p.uwa.edu.au/~pbou­rke/exhibition/scc3/fi­nal/">http://local.was­p.uwa.edu.au/~pbou­rke/exhibition/scc3/fi­nal/</a>
</li>

<li>SCC4: POVRay Short Code Contest,<br />
<a href="http://local.was­p.uwa.edu.au/~pbou­rke/exhibition/scc4/fi­nal/">http://local.was­p.uwa.edu.au/~pbou­rke/exhibition/scc4/fi­nal/</a>
</li>

<li>SCC5: POVRay Short Code Contest #5 – The animation round!,<br />
<a href="http://local.was­p.uwa.edu.au/~pbou­rke/exhibition/scc5/fi­nal.html">http://local.was­p.uwa.edu.au/~pbou­rke/exhibition/scc5/fi­nal.html</a>
</li>

<li>POV-Ray posters,<br />
<a href="http://www.po­vray.org/poster­s/">http://www.po­vray.org/poster­s/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

