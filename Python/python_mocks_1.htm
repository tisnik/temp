<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Python pro vývojáře: použití knihovny unittest.mock (nejenom) při testování</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Python pro vývojáře: použití knihovny unittest.mock (nejenom) při testování</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Při testování aplikací, zejména při psaní jednotkových testů, se poměrně často dostaneme do situace, kdy potřebujeme nahradit nějakou funkci či metodu používanou v&nbsp;reálné aplikaci za &bdquo;falešnou&ldquo; funkci resp.&nbsp;metodu vytvořenou pouze pro účely testů. V&nbsp;programovacím jazyku Python je možné pro tvorbu a použití takových &bdquo;falešných&ldquo; funkcí použít hned několik různých knihoven, které se od sebe odlišují jak svými možnostmi, tak i způsobem zápisu či deklarace očekávaného chování testované aplikace. Standardem v&nbsp;této oblasti je v&nbsp;současnosti knihovna <i>unittest.mock</i>. Dnes si ukážeme některé základní techniky, které nám tato knihovna poskytuje.</p><!--more-->



<h2>Obsah</h2>

<p><a href="#k01">1. Python pro vývojáře: použití knihovny unittest.mock (nejenom) při testování</a></p>
<p><a href="#k02">2. Zdrojový soubor s&nbsp;funkcí, kterou budeme mockovat</a></p>
<p><a href="#k03">3. Test s&nbsp;volanou i mockovanou funkcí</a></p>
<p><a href="#k04">4. Vytvoření handleru, který se zavolá namísto originální funkce</a></p>
<p><a href="#k05">5. Kombinace handleru s&nbsp;předkonfigurovanou návratovou hodnotou?</a></p>
<p><a href="#k06">6. Úplný zdrojový kód druhého demonstračního příkladu</a></p>
<p><a href="#k07">7. Otestování, zda byla mockovaná funkce zavolána</a></p>
<p><a href="#k08">8. Úplný zdrojový kód třetího demonstračního příkladu</a></p>
<p><a href="#k09">9. Problematika mockování funkce, která je volaná nepřímo</a></p>
<p><a href="#k10">10. Mockování funkce volané nepřímo</a></p>
<p><a href="#k11">11. Úplný zdrojový kód čtvrtého demonstračního příkladu</a></p>
<p><a href="#k12">12. Pátý příklad &ndash; změna kódu v&nbsp;případě, že použijeme <strong>import</strong> a nikoli <strong>from X import</strong></a></p>
<p><a href="#k13">13. Mockování metod</a></p>
<p><a href="#k14">14. Testovaná třída</a></p>
<p><a href="#k15">15. Nepřímé volání metody, kterou budeme mockovat</a></p>
<p><a href="#k16">16. Mockování nepřímo volané metody</a></p>
<p><a href="#k17">17. Úplný zdrojový kód šestého demonstračního příkladu</a></p>
<p><a href="#k18">18. Obsah druhé části článku</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Python pro vývojáře: použití knihovny unittest.mock (nejenom) při testování</h2>

<p>S&nbsp;následující situací se již setkal pravděpodobně každý vývojář &ndash; je nutné otestovat funkcionalitu části aplikace, v&nbsp;této části se však volá nějaká funkce nebo metoda provádějící potenciálně destruktivní činnost (změna filesystému, vzdálené volání procedur, programování zařízení připojeného přes USB atd.). Popř.&nbsp;se volá funkce/metoda, která v&nbsp;závislosti na různých okolnostech vrací (minimálně z&nbsp;pohledu testů) pseudonáhodná data. Takovou funkci/metodu by bylo vhodné pro účely testování nahradit jednodušším kódem, jenž bude provádět předem známou činnost, například bude za každých okolností pouze vracet určitou hodnotu. Taková náhrada skutečných funkcí či metod za funkce/metody &bdquo;falešné&ldquo; se (poněkud nepřesně) nazývá mockování, a příslušný náhradní kód pak <i>test double</i>. V&nbsp;dnešním článku si ukážeme, jakým způsobem se může tato technika použít v&nbsp;Pythonu, konkrétně v&nbsp;Pythonu řady 3.x, který se ve Fedoře stal již před poměrně dlouhou dobou standardem.</p>

<p>V&nbsp;současnosti existuje relativně velké množství různých knihoven, které mockování v&nbsp;Pythonu umožňují. Z&nbsp;nich jmenujme například velmi zajímavý projekt <i>Flexmock</i>, který naleznete na adrese <a href="https://pypi.python.org/pypi/flexmock">https://pypi.python.org/pypi/flexmock</a>. Ovšem v&nbsp;Pythonu 3.x se standardem v&nbsp;této oblasti stala knihovna nazvaná <a href="https://docs.python.org/dev/library/unittest.mock.html">unittest.mock</a>. V&nbsp;případě, že ještě z&nbsp;nějakého důvodu musíte používat Python 2.x, použijte namísto knihovny <i>unittest.mock</i> knihovnu nazvanou jednoduše <a href="https://pypi.python.org/pypi/mock">mock</a>. Tato knihovna nabízí prakticky stejné možnosti jako <i>unittest.mock</i> (je ostatně založena na stejném kódu, který pouze byl pro potřeby Pythonu 2.x upraven), ovšem lze ji použít jak v&nbsp;Pythonu 2.x, tak i v&nbsp;Pythonu 3.x, a to bez toho, abyste museli upravovat zdrojové kódy vašich testů (samozřejmě za předpokladu, že se v&nbsp;nich nevyskytují konstrukce, které nejsou v&nbsp;Pythonu 2.x podporovány).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Zdrojový soubor s&nbsp;funkcí, kterou budeme mockovat</h2>

<p>Popis možností knihovny <strong>unittest.mock</strong> začneme na tom nejjednodušším možném příkladu. Bude se jednat o aplikaci (či spíše minimalistickou &bdquo;aplikaci&ldquo;) tvořenou jediným souborem se zdrojovým kódem <a href="https://github.com/tisnik/mocking-in-python/blob/master/mock-test1/application.py">application.py</a>. Tento soubor obsahuje jedinou funkci nazvanou <strong>function1</strong>, která po svém zavolání nejprve vypíše na standardní výstup text &bdquo;function1 called&ldquo; a následně vrátí do volajícího kódu řetězec s&nbsp;obsahem &bdquo;tested function&ldquo;, jenž může být v&nbsp;případě potřeby dále zpracován. Celý soubor se zdrojovým kódem má pouhé tři řádky:</p>

<pre>
def function1():
    print("function1 called")
    return "tested function"
</pre>

<p>Spuštění je snadné:</p>

<pre>
python3 application.py
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<table>
<tr><th>Projekt</th><th>Cesta</th></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>unittest.mock — mock object library<br />
<a href="https://docs.python.org/3.5/library/unittest.mock.html">https://docs.python.org/3.5/library/unittest.mock.html</a>
</li>

<li>An Introduction to Mocking in Python<br />
<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python</a>
</li>

<li>Python Mocking 101: Fake It Before You Make It<br />
<a href="https://blog.fugue.co/2016-02-11-python-mocking-101.html">https://blog.fugue.co/2016-02-11-python-mocking-101.html</a>
</li>

<li>Test Fixture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test_fixture">https://en.wikipedia.org/wiki/Test_fixture</a>
</li>

<li>Mock object (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Mock_object">https://en.wikipedia.org/wiki/Mock_object</a>
</li>

<li>Unit testing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Unit_testing">https://en.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>Tox<br />
<a href="https://tox.readthedocs.io/en/latest/">https://tox.readthedocs.io/en/latest/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

