<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
├── feature_list.txt
├── features
│   ├── adder.feature
│   └── steps
│       └── common.py
├── requirements.in
├── requirements.txt
├── run_tests.sh
└── src
    └── adder.py
&nbsp;
3 directories, 7 files
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
def add(x, y):
    return x + y
</pre>

<pre>
<strong>Feature</strong>: Adder test
&nbsp;
  @smoketest
  <strong>Scenario</strong>: Check the function add()
    <strong>Given</strong> The function add is callable
    <strong>When</strong> I call function add with arguments 1 and 2
    <strong>Then</strong> I should get 3 as a result
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
features/adder.feature
</pre>

<pre>
behave
pytest
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
from behave import given, then, when
from src.adder import add


@<strong>given</strong>('The function {function_name} is callable')
def initial_state(context, function_name):
    pass


@<strong>when</strong>('I call function {function} with arguments {x:d} and {y:d}')
def call_add(context, function, x, y):
    context.result = add(x, y)


@<strong>then</strong>('I should get {expected:d} as a result')
def check_integer_result(context, expected):
    assert context.result == expected, \
        "Wrong result: {r} != {e}".format(r=context.result, e=expected)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
+ export NOVENV=1
+ NOVENV=1
+ '[' 1 == 1 ']'
++ which behave
+ PYTHONDONTWRITEBYTECODE=1
+ LD_LIBRARY_PATH=lib
+ python3 /usr/local/bin/behave --tags=-skip -D dump_errors=true @feature_list.txt
Feature: Adder test # features/adder.feature:1

  @smoketest
  Scenario: Check the function add()                # features/adder.feature:4
    Given The function add is callable              # features/steps/common.py:5 0.000s
    When I call function add with arguments 1 and 2 # features/steps/common.py:10 0.000s
    Then I should get 3 as a result                 # features/steps/common.py:15 0.000s

1 feature passed, 0 failed, 0 skipped
1 scenario passed, 0 failed, 0 skipped
3 steps passed, 0 failed, 0 skipped, 0 undefined
Took 0m0.000s
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
from behave import given, then, when
from src.adder import add


@<strong>given</strong>('The function {function_name} is callable')
def initial_state(context, function_name):
    g = globals()
    assert function_name in g, "Function is not visible"
    assert callable(g[function_name]), "Not a function"


@<strong>when</strong>('I call function {function} with arguments {x:d} and {y:d}')
def call_add(context, function, x, y):
    context.result = add(x, y)


@<strong>then</strong>('I should get {expected:d} as a result')
def check_integer_result(context, expected):
    assert context.result == expected, \
        "Wrong result: {r} != {e}".format(r=context.result, e=expected)
</pre>

<pre>
<strong>Feature</strong>: Adder test

  <strong>Scenario</strong>: Check the function add()
    <strong>Given</strong> The function add is callable
    <strong>When</strong> I call function add with arguments 1 and 2
    <strong>Then</strong> I should get 3 as a result

  <strong>Scenario Outline</strong>: Thorough checking function add()
    <strong>Given</strong> The function add is callable
    <strong>When</strong> I call function add with arguments <x> and <y>
    <strong>Then</strong> I should get <result> as a result

     <strong>Examples</strong>: users
     |x|y|result|
     # basic arithmetic
     |          0| 0|          0|
     |          1| 2|          3|
     |          1|-2|         -1|
     # no overflows at 16 bit limits
     |      32767| 1|      32768|
     |      65535| 1|      65536|
     # integer overflow in Python?
     | 2147483648| 1| 2147483649|
     |-2147483647|-1|-2147483648|
     |-2147483648|-1|-2147483649|
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
Feature: Adder test # features/adder.feature:1

  Scenario: Check the function add()                # features/adder.feature:4
    Given The function add is callable              # features/steps/common.py:5
    When I call function add with arguments 1 and 2 # features/steps/common.py:12
    Then I should get 3 as a result                 # features/steps/common.py:17

  Scenario Outline: Thorough checking function add() -- @1.1 users  # features/adder.feature:17
    Given The function add is callable                              # features/steps/common.py:5
    When I call function add with arguments 0 and 0                 # features/steps/common.py:12
    Then I should get 0 as a result                                 # features/steps/common.py:17

  Scenario Outline: Thorough checking function add() -- @1.2 users  # features/adder.feature:18
    Given The function add is callable                              # features/steps/common.py:5
    When I call function add with arguments 1 and 2                 # features/steps/common.py:12
    Then I should get 3 as a result                                 # features/steps/common.py:17

  Scenario Outline: Thorough checking function add() -- @1.3 users  # features/adder.feature:19
    Given The function add is callable                              # features/steps/common.py:5
    When I call function add with arguments 1 and -2                # features/steps/common.py:12
    Then I should get -1 as a result                                # features/steps/common.py:17

  Scenario Outline: Thorough checking function add() -- @1.4 users  # features/adder.feature:21
    Given The function add is callable                              # features/steps/common.py:5
    When I call function add with arguments 32767 and 1             # features/steps/common.py:12
    Then I should get 32768 as a result                             # features/steps/common.py:17

  Scenario Outline: Thorough checking function add() -- @1.5 users  # features/adder.feature:22
    Given The function add is callable                              # features/steps/common.py:5
    When I call function add with arguments 65535 and 1             # features/steps/common.py:12
    Then I should get 65536 as a result                             # features/steps/common.py:17

  Scenario Outline: Thorough checking function add() -- @1.6 users  # features/adder.feature:24
    Given The function add is callable                              # features/steps/common.py:5
    When I call function add with arguments 2147483648 and 1        # features/steps/common.py:12
    Then I should get 2147483649 as a result                        # features/steps/common.py:17

  Scenario Outline: Thorough checking function add() -- @1.7 users  # features/adder.feature:25
    Given The function add is callable                              # features/steps/common.py:5
    When I call function add with arguments -2147483647 and -1      # features/steps/common.py:12
    Then I should get -2147483648 as a result                       # features/steps/common.py:17

  Scenario Outline: Thorough checking function add() -- @1.8 users  # features/adder.feature:26
    Given The function add is callable                              # features/steps/common.py:5
    When I call function add with arguments -2147483648 and -1      # features/steps/common.py:12
    Then I should get -2147483649 as a result                       # features/steps/common.py:17

1 feature passed, 0 failed, 0 skipped
9 scenarios passed, 0 failed, 0 skipped
27 steps passed, 0 failed, 0 skipped, 0 undefined
Took 0m0.002s
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
int add(int x, int y)
{
    return x+y;
}
</pre>

<pre>
gcc -Wall -ansi -c -fPIC adder.c -o adder.o
&nbsp;
gcc -shared -Wl,-soname,libadder.so -o libadder.so adder.o
</pre>

<pre>
import ctypes
&nbsp;
libname = "libadder.so"
&nbsp;
adder = ctypes.CDLL(libname)
&nbsp;
for x in range(0, 6):
    for y in range(0, 6):
        result = adder.add(x,y)
        print("{x} + {y} = {z}".format(x=x, y=y, z=result))
</pre>

<pre>
0 + 0 = 0
0 + 1 = 1
0 + 2 = 2
0 + 3 = 3
0 + 4 = 4
0 + 5 = 5
1 + 0 = 1
1 + 1 = 2
1 + 2 = 3
1 + 3 = 4
1 + 4 = 5
1 + 5 = 6
2 + 0 = 2
2 + 1 = 3
2 + 2 = 4
2 + 3 = 5
2 + 4 = 6
2 + 5 = 7
3 + 0 = 3
3 + 1 = 4
3 + 2 = 5
3 + 3 = 6
3 + 4 = 7
3 + 5 = 8
4 + 0 = 4
4 + 1 = 5
4 + 2 = 6
4 + 3 = 7
4 + 4 = 8
4 + 5 = 9
5 + 0 = 5
5 + 1 = 6
5 + 2 = 7
5 + 3 = 8
5 + 4 = 9
5 + 5 = 10
</pre>

<pre>
Traceback (most recent call last):
  File "call_adder.py", line 5, in <module>
    adder = ctypes.CDLL(libname)
  File "/usr/lib/python3.4/ctypes/__init__.py", line 351, in __init__
    self._handle = _dlopen(self._name, mode)
OSError: libadder.so: cannot open shared object file: No such file or directory
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
.
├── feature_list.txt
├── features
│   ├── environment.py
│   ├── smoketest.feature
│   └── steps
│       └── common.py
├── lib
│   ├── adder.c
│   ├── clean.sh
│   └── make_library.sh
├── requirements.in
├── requirements.txt
└── run_tests.sh

3 directories, 10 files
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
Feature: Smoke test

  @smoketest
  Scenario: Check the function int add(int, int)
    Given The library libadder.so is loaded
    When I call native function add with arguments 1 and 2
    Then I should get 3 as a result

  Scenario Outline: Thorough checking function int add(int, int)
    Given The library libadder.so is loaded
    When I call native function add with arguments <x> and <y>
    Then I should get <result> as a result

     Examples: users
     |x|y|result|
     # basic arithmetic
     |          0| 0|          0|
     |          1| 2|          3|
     |          1|-2|         -1|
     # no overflows at 16 bit limits
     |      32767| 1|      32768|
     |      65535| 1|      65536|
     # integer overflow
     | 2147483648| 1|-2147483647|
     |-2147483647|-1|-2147483648|
     |-2147483648|-1| 2147483647|
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
from behave.log_capture import capture
import ctypes


def _load_library(context, library_name):
    if context.tested_library is None:
        context.tested_library = ctypes.CDLL(library_name)


def before_all(context):
    """Perform setup before the first event."""
    context.tested_library = None
    context.load_library = _load_library
</pre>

<pre>
from behave import given, then, when


@given('The library {library_name} is loaded')
def initial_state(context, library_name):
    context.load_library(context, library_name)


@when('I call native function add with arguments {x:d} and {y:d}')
def call_add(context, x, y):
    context.result = context.tested_library.add(x, y)


@then('I should get {result:d} as a result')
def check_integer_result(context, result):
    assert context.result == result, "Expected result: {e}, returned value: {r}".format(e=result, r=context.result)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
Feature: Smoke test

  @smoketest
  Scenario: Check the function int add(int, int)
    Given The library libadder.so is loaded
    When I call native function add with integer arguments 1 and 2
    Then I should get 3 as a result

  Scenario Outline: Thorough checking function int add(int, int)
    Given The library libadder.so is loaded
    When I call native function add with integer arguments <x> and <y>
    Then I should get <result> as a result

     Examples: users
     |x|y|result|
     # basic arithmetic
     |          0| 0|          0|
     |          1| 2|          3|
     |          1|-2|         -1|
     # no overflows at 16 bit limits
     |      32767| 1|      32768|
     |      65535| 1|      65536|
     # integer overflow
     | 2147483648| 1|-2147483647|
     |-2147483647|-1|-2147483648|
     |-2147483648|-1| 2147483647|
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
from behave import given, then, when


@given('The library {library_name} is loaded')
def initial_state(context, library_name):
    context.load_library(context, library_name)


@when('I call native function {function} with integer arguments {x:d} and {y:d}')
def call_add(context, function, x, y):
    context.result = getattr(context.tested_library, function)(x, y)


@then('I should get {result:d} as a result')
def check_integer_result(context, result):
    assert context.result == result
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

https://github.com/tisnik/python-behave-demos

<table>
<tr><th>Projekt</th><th>Cesta</th></tr>
<tr><td>test_python_function1</td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/test_python_function1">https://github.com/tisnik/python-behave-demos/tree/master/test_python_function1</a></td></tr>
<tr><td>test_python_function2</td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/test_python_function2">https://github.com/tisnik/python-behave-demos/tree/master/test_python_function2</a></td></tr>
<tr><td>native_lib</td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/native_lib">https://github.com/tisnik/python-behave-demos/tree/master/native_lib</a></td></tr>
<tr><td>test_native_lib</td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/test_native_lib">https://github.com/tisnik/python-behave-demos/tree/master/test_native_lib</a></td></tr>
<tr><td>test_native_lib2</td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/test_native_lib2">https://github.com/tisnik/python-behave-demos/tree/master/test_native_lib2</a></td></tr>
</table>

<p></p>

<table>
<tr><td>github_test_version1</td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/github_test_version1">https://github.com/tisnik/python-behave-demos/tree/master/github_test_version1</a></td></tr>
<tr><td>github_test_version2</td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/github_test_version2">https://github.com/tisnik/python-behave-demos/tree/master/github_test_version2</a></td></tr>
<tr><td>github_test_version3</td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/github_test_version3">https://github.com/tisnik/python-behave-demos/tree/master/github_test_version3</a></td></tr>
<tr><td>github_test_version4</td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/github_test_version4">https://github.com/tisnik/python-behave-demos/tree/master/github_test_version4</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Behave na GitHubu<br />
<a href="https://github.com/behave/behave">https://github.com/behave/behave</a>
</li>

<li>behave 1.2.6 (PyPi)<br />
<a href="https://pypi.python.org/pypi/behave">https://pypi.python.org/pypi/behave</a>
</li>

<li>Dokumentace k Behave<br />
<a href="http://behave.readthedocs.io/en/latest/">http://behave.readthedocs.io/en/latest/</a>
</li>

<li>Příklady použití Behave<br />
<a href="https://github.com/behave/behave.example">https://github.com/behave/behave.example</a>
</li>

<li>Příklady použití Behave použité v&nbsp;dnešním článku<br />
<a href="https://github.com/tisnik/python-behave-demos">https://github.com/tisnik/python-behave-demos</a>
</li>

<li>Test Fixture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test_fixture">https://en.wikipedia.org/wiki/Test_fixture</a>
</li>

<li>Behavior-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Behavior-driven_development">https://en.wikipedia.org/wiki/Behavior-driven_development</a>
</li>

<li>Cucumber<br />
<a href="https://cucumber.io/">https://cucumber.io/</a>
</li>

<li>Jasmine<br />
<a href="https://jasmine.github.io/">https://jasmine.github.io/</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>Tox<br />
<a href="https://tox.readthedocs.io/en/latest/">https://tox.readthedocs.io/en/latest/</a>
</li>

<li>Extrémní programování<br />
<a href="https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD">https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD</a>
</li>

<li>Programování řízené testy<br />
<a href="https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy">https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Python namespaces<br />
<a href="https://bytebaker.com/2008/07/30/python-namespaces/">https://bytebaker.com/2008/07/30/python-namespaces/</a>
</li>

<li>Namespaces and Scopes<br />
<a href="https://www.python-course.eu/namespaces.php">https://www.python-course.eu/namespaces.php</a>
</li>

<li>pdb — The Python Debugger<br />
<a href="https://docs.python.org/3.6/library/pdb.html">https://docs.python.org/3.6/library/pdb.html</a>
</li>

<li>pdb – Interactive Debugger<br />
<a href="https://pymotw.com/2/pdb/">https://pymotw.com/2/pdb/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

