<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhém článku o statické kontrole pythonovských zdrojových kódů nástrojem Mypy si ukážeme práci s typově bezpečnými slovníky, typovou inferencí, práci s typově bezpečnými funkcemi (Callable) a ve druhé polovině článku si ukážeme převod aplikace bez určení datových typů ke kódu s doplněnými typovými informacemi.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy</a></p>
<p><a href="#k02">2. Základní vlastnosti slovníků (<i>dictionary</i>) v&nbsp;Pythonu</a></p>
<p><a href="#k03">3. Typová anotace u slovníků</a></p>
<p><a href="#k04">4. Specifikace několika povolených typů (union)</a></p>
<p><a href="#k05">5. Povolení hodnoty <strong>None</strong></a></p>
<p><a href="#k06">6. Typový systém a funkce</a></p>
<p><a href="#k07">7. Typové kontroly v&nbsp;těle funkcí</a></p>
<p><a href="#k08">8. Typ <strong>Callable</strong></a></p>
<p><a href="#k09">9. Postup při úpravě stávajících projektů bez typových anotací</a></p>
<p><a href="#k10">10. Původní zdrojový kód upravovaného demonstračního příkladu před refaktoringem a bez typových informací</a></p>
<p><a href="#k11">11. Refaktoring kódu</a></p>
<p><a href="#k12">12. Výsledek spuštění Mypy ve striktním režimu</a></p>
<p><a href="#k13">13. Využití Mypy pro nalezení chybějících typových anotací</a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">18. Výsledný kód s&nbsp;typovými informacemi</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy</h2>

<p>Ve druhém článku o statické kontrole zdrojových kódů naprogramovaných <a
href="https://www.root.cz/n/python/">v&nbsp;Pythonu</a> prováděné nástrojem
Mypy si nejprve popíšeme práci s&nbsp;typově bezpečnými slovníky
(<i>dictionary</i>), odvozením datových typů nástrojem Mypy (což je určitá
forma <i>typové inference</i>), specifikací typu volatelná funkce
(<i>Callable</i>, to je jedna z&nbsp;nejdůležitějších vlastností Mypy) a ve
druhé polovině článku si navíc na poněkud delším zdrojovém kódu ukážeme, jakým
způsobem je možné postupně převést aplikaci bez určení datových typů ke
zdrojovému kódu, v&nbsp;němž jsou na všech potřebných místech doplněny typové
informace. Uvidíme, že i kód s&nbsp;doplněnými typovými informacemi je stále
stručnější, než by tomu bylo v&nbsp;jazyku typu C++ či Java.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní vlastnosti slovníků (<i>dictionary</i>) v&nbsp;Pythonu</h2>

<p><a
href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/">V&nbsp;úvodním
článku</a> jsme si mj.&nbsp;ukázali, jak lze určit typ prvků seznamů a n-tic
(pokaždé se přitom jedná o odlišný koncept). Podívejme se nyní na další
standardní datovou strukturu programovacího jazyka Python. Jedná se o slovníky.
Práce s&nbsp;nimi je snadná; ukažme si například vytvoření prázdného slovníku
s&nbsp;následným přidáním tří prvků do slovníku. Povšimněte si, že v&nbsp;tomto
konkrétním případě jsou všechny klíče řetězci a všechny hodnoty jsou typu celé
číslo:</p>

<pre>
d = {}
&nbsp;
d["foo"] = 1
d["bar"] = 3
d["baz"] = 10
&nbsp;
print(d)
</pre>

<p>V&nbsp;Pythonu jsou ovšem slovníky heterogenními datovými strukturami, což
konkrétně znamená, že jak klíče, tak i hodnoty mohou být (prakticky)
libovolného typu, a to i v&nbsp;rámci jednoho slovníku. Opět si to ukažme:</p>

<pre>
d = {}
&nbsp;
d["foo"] = 1
d["bar"] = 3.14
d[10] = 10
d[42] = "answer"
&nbsp;
print(d)
</pre>

<p>Jak však bude tento kód zkontrolován nástrojem Mypy, pokud použijeme
přepínač <strong>--strict</strong>? Podívejme se nejprve na výsledek statické
typové kontroly:</p>

<pre>
$ <strong>mypy --strict dict_type2.py</strong>
&nbsp;
dict_type2.py:4: error: Incompatible types in assignment (expression has type "float", target has type "int")  [assignment]
dict_type2.py:5: error: Invalid index type "int" for "Dict[str, int]"; expected type "str"  [index]
dict_type2.py:6: error: Invalid index type "int" for "Dict[str, int]"; expected type "str"  [index]
dict_type2.py:6: error: Incompatible types in assignment (expression has type "str", target has type "int")  [assignment]
Found 4 errors in 1 file (checked 1 source file)
</pre>

<p>Z&nbsp;výsledku je patrné, že si Mypy z&nbsp;prvního přiřazení do slovníku
odvodil typ slovníku, což je velmi důležitá vlastnost nazývaná <i>typová
inference</i> (nejedná se sice o žádnou novinku, protože typová inference je
například součástí <a
href="https://www.root.cz/serialy/funkcionalni-programovaci-jazyk-ml/">programovacího
jazyka ML</a> z&nbsp;roku 1978, ovšem do dalších programovacích jazyků se tato
velmi užitečná vlastnost rozšiřuje teprve postupně). Navíc je z&nbsp;výsledků
vypsaných nástrojem Mypy patrné, že v&nbsp;tomto konkrétním případě nemusí být
typová inference zcela korektní a bude lepší typ slovníku specifikovat
explicitně.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Typová anotace u slovníků</h2>

<p>Při specifikaci typu slovníku je zapotřebí zadat jak typ klíčů, tak i typ
hodnot. V&nbsp;případě, že pouze vyžadujeme, aby nějaká proměnná (či parametr
funkce) byla typu slovník s&nbsp;libovolnými klíči a hodnotami, můžeme využít
datového typu <strong>Any</strong>:</p>

<pre>
from typing import Dict, Any
&nbsp;
d:Dict[Any, Any] = {}
&nbsp;
d["foo"] = 1
d["bar"] = 3.14
d[10] = 10
d[42] = "answer"
&nbsp;
print(d)
</pre>

<p><div class="rs-tip-major">Poznámka: mohlo by se zdát, že taková typová
anotace nemá valného významu, ale můžeme díky ní omezit přiřazování hodnot do
samotné proměnné <strong>d</strong> &ndash; vždy se musí jednat o
slovník.</div></p>

<p>Samozřejmě můžeme hodnoty zapisované do slovníku omezit, například tak, že
klíči budou pouze řetězce a hodnotami čísla typu <strong>float</strong>:</p>

<pre>
from typing import Dict, Any
&nbsp;
d:Dict[str, float] = {}
&nbsp;
d["foo"] = 1
d["bar"] = 3.14
d[10] = 10
d[42] = "answer"
&nbsp;
print(d)
</pre>

<p>Mypy pochopitelně v&nbsp;tomto krátkém příkladu nalezne celou řadu chyb, což
je naprosto v&nbsp;pořádku:</p>

<pre>
$ <strong>mypy dict_type4.py </strong>
&nbsp;
dict_type4.py:7: error: Invalid index type "int" for "Dict[str, float]"; expected type "str"  [index]
dict_type4.py:8: error: Invalid index type "int" for "Dict[str, float]"; expected type "str"  [index]
dict_type4.py:8: error: Incompatible types in assignment (expression has type "str", target has type "float")  [assignment]
Found 3 errors in 1 file (checked 1 source file)
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Specifikace několika povolených typů (union)</h2>

<p>V&nbsp;některých situacích budeme chtít specifikovat, že hodnoty ukládané do
slovníků mohou být několika zvolených typů. Nechceme tedy určit pouze jediný
typ, ale na druhou stranu nám nemusí vyhovovat typ <strong>Any</strong>.
V&nbsp;takových případech je možné použít typ <strong>Union</strong>, který se
ve specifikacích používá následovně:</p>

<pre>
Union[typ1, typ2, typ3, ...]
</pre>

<p>Můžeme tedy upravit typ slovníku tak, že klíči mají být stále řetězce, ale
hodnotami mohou být celá čísla, čísla typu float či řetězce:</p>

<pre>
from typing import Dict, Union
&nbsp;
d:Dict[str, <strong>Union[int, float, str]</strong>] = {}
&nbsp;
d["foo"] = 1
d["bar"] = 3.14
d[10] = 10
d[42] = "answer"
&nbsp;
print(d)
</pre>

<p>Výsledek typové kontroly nástrojem Mypy:</p>

<pre>
$ <strong>mypy dict_type5.py</strong>
&nbsp;
dict_type5.py:7: error: Invalid index type "int" for "Dict[str, Union[int, float, str]]"; expected type "str"  [index]
dict_type5.py:8: error: Invalid index type "int" for "Dict[str, Union[int, float, str]]"; expected type "str"  [index]
Found 2 errors in 1 file (checked 1 source file)
</pre>

<p><div class="rs-tip-major">Poznámka: chyby tedy byly nalezeny kvůli špatnému
typu klíčů, nikoli hodnot.</div></p>

<p>Samozřejmě je možné určit, že klíče mohou být typu <strong>int</strong> nebo
<strong>str</strong>, a to následovně:</p>

<pre>
from typing import Dict, Union
&nbsp;
d:Dict[<strong>Union[int, str]</strong>, Union[int, float, str]] = {}
&nbsp;
d["foo"] = 1
d["bar"] = 3.14
d[10] = 10
d[42] = "answer"
&nbsp;
print(d)
</pre>

<p>Nyní bude statická typová analýza vypadat následovně:</p>

<pre>
$ <strong>mypy dict_type6.py</strong>
&nbsp;
Success: no issues found in 1 source file
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Povolení hodnoty <strong>None</strong></h2>

<p>Dalším častým požadavkem je povolení hodnoty <strong>None</strong>, která je
typu <strong>None</strong> (typ i hodnota se tedy jmenuje stejně). Například
tento skript je typově nekorektní:</p>

<pre>
from typing import Dict
&nbsp;
d:Dict[str, float] = {}
&nbsp;
d["foo"] = 1
d["bar"] = 3.14
d["baz"] = <strong>None</strong>
&nbsp;
print(d)
</pre>

<p>Výsledek typové kontroly:</p>

<pre>
$ <strong>mypy dict_type7.py</strong>
&nbsp;
dict_type7.py:7: error: Incompatible types in assignment (expression has type "None", target has type "float")  [assignment]
Found 1 error in 1 file (checked 1 source file)
</pre>

<p>Pokud skutečně budeme chtít povolit i hodnotu <strong>None</strong>,
samozřejmě můžeme použít <strong>Union</strong>, ovšem existuje i
idiomatičtější přístup &ndash; využití typu <strong>Optional</strong>. Je to
snadné a čitelné:</p>

<pre>
from typing import Dict, Optional
&nbsp;
d:Dict[str, <strong>Optional[float]</strong>] = {}
&nbsp;
d["foo"] = 1
d["bar"] = 3.14
d["baz"] = None
&nbsp;
print(d)
</pre>

<p>Nyní bude statická typová analýza skriptu vypadat následovně:</p>

<pre>
$ <strong>mypy dict_type8.py</strong>
&nbsp;
Success: no issues found in 1 source file
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Typový systém a funkce</h2>

<p>Ještě jednou se vraťme k&nbsp;problematice specifikace datových typů u
funkcí. Víme již, jak lze specifikovat typ parametrů funkce i typ návratové
hodnoty. Mějme například funkci, která akceptuje (nekomplexní) číselné hodnoty
a vrátí hodnotu <strong>True</strong> v&nbsp;případě, že předávaná hodnota bude
kladná. Realizace této funkce i s&nbsp;uvedením typových informací je relativně
snadná:</p>

<pre>
def <strong>positive</strong>(x:float) -&gt; bool:
    return x &gt; 0.0
&nbsp;
&nbsp;
x:bool = positive(0.5)
y:int = positive(42)
z:float = positive(False)
w:str = positive(3)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Typové kontroly v&nbsp;těle funkcí</h2>

<p>K&nbsp;čemu je však zápis plně &bdquo;typově anotované&ldquo; funkce vhodný?
Na prvním místě se jedná o informaci, která pomáhá integrovaným vývojovým
prostředím. Ovšem možná ještě důležitější je fakt, že Mypy dokáže na základě
typů parametrů otestovat, zda se s&nbsp;parametry pracuje uvnitř funkce
korektně. Co to ovšem konkrétně znamená? Podívejme se na následující příklad,
který bude pochopitelně funkční pouze pro ty objekty, které mají definovánu
metodu <strong>strip</strong>:</p>

<pre>
def <strong>append</strong>(a, b):
    return a.strip()+b.strip()
&nbsp;
print(<strong>append</strong>(1, 2))
</pre>

<p>Po spuštění vznikne běhová chyba:</p>

<pre>
Traceback (most recent call last):
  File "appender1.py", line 4, in <module>
    print(append(1, 2))
  File "appender1.py", line 2, in append
    return a.strip()+b.strip()
AttributeError: 'int' object has no attribute 'strip'
</pre>

<p>Typově bezpečná varianta bude vypadat následovně:</p>

<pre>
def <strong>append</strong>(a:str, b:str) -&gt; str:
    return a.strip()+b.strip()
</pre>

<p>V&nbsp;upravené variantě tohoto příkladu sice specifikujeme, že funkci se
mají předávat parametry typu <strong>int</strong>, ovšem v&nbsp;těle funkce se
(omylem, refaktoringem, chybou copy&amp;paste atd.) s&nbsp;parametry pracuje,
jakoby se jednalo o řetězce (či naopak &ndash; spletli jsme se v&nbsp;určení
typů):</p>

<pre>
def <strong>append</strong>(a:int, b:int) -&gt; int:
    return a.strip()+b.strip()
</pre>

<p>Tento problém nástroj Mypy samozřejmě relativně snadno odhalí, protože má
k&nbsp;dispozici informace o tom, jaké metody (a zda vůbec nějaké) jsou pro
specifikovaný datový typ dostupné &ndash; a metoda <strong>strip</strong> to
pro celá čísla zcela určitě není:</p>

<pre>
$ <strong>mypy appender3.py</strong>
&nbsp;
appender3.py:2: error: "int" has no attribute "strip"  [attr-defined]
Found 1 error in 1 file (checked 1 source file)
</pre>

<p><div class="rs-tip-major">Poznámka: to, že tento problém odhalí Mypy
znamená, že ho mohou odhalit i integrovaná vývojová prostředí, která chybu
dokážou ihned označit &ndash; což je ta nejrychlejší a mnohdy i nejpřesnější
zpětná vazba, kterou může programátor dostat.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Typ <strong>Callable</strong></h2>

<p>Nyní již dokážeme u funkcí specifikovat jak typy parametrů, tak i typ
návratové hodnoty. Ovšem v&nbsp;programovacím jazyku Python jsou i samotné
funkce hodnotami a proto je v&nbsp;některých případech vhodné vědět, jakým
způsobem se specifikuje typ samotné funkce &ndash; resp.&nbsp;typ všech funkcí
se stejnými počty a typy parametrů a se stejným typem návratové hodnoty (tak
jednoduché to ovšem není &ndash; a to díky <i>varianci</i>, o níž se ještě
zmíníme). Funkce jsou specifikovány typem <strong>Callable</strong>, což ovšem
není (podobně jako u slovníků) plné určení typu. Musíme ještě doplnit typy
parametrů a typ návratové hodnoty. Celý zápis typu funkce by tedy mohl vypadat
následovně:</p>

<pre>
Callable[[typ_parametru_1, typ_parametru_2, ...], typ_návratové_hodnoty]
</pre>

<p>Jak lze takový typ použít? Například ho můžeme využít ve funkcích vyššího
řádu (<i>higher order functions</i>), které jako svůj parametr akceptují jinou
funkci či naopak funkci vrací. Podívejme se na jednoduchý příklad, v&nbsp;němž
jedné funkci budeme chtít při jejím volání předat funkci jinou. Předávaná
funkce bude využita později &ndash; zavolá se v&nbsp;těle první funkce:</p>

<pre>
def <strong>printIsPositive</strong>(x:float, <u>condition</u>) -&gt; None:
    if condition(x):
        print("Positive")
    else:
        print("Negative")
&nbsp;
&nbsp;
def <strong>positiveFloat</strong>(x:float) -&gt; bool:
    return x &gt; 0.0
&nbsp;
&nbsp;
def <strong>positiveInt</strong>(x:int) -&gt; bool:
    return x &gt; 0
&nbsp;
&nbsp;
printIsPositive(4, positiveFloat)
printIsPositive(4, positiveInt)
printIsPositive(-0.5, positiveFloat)
printIsPositive(-0.5, positiveInt)
</pre>

<p>Typová anotace není v&nbsp;tomto příkladu úplná, na což nás Mypy upozorní,
pochopitelně za předpokladu, že použijeme přepínač
<strong>--strict</strong>:</p>

<pre>
x.py:4: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]
Found 1 error in 1 file (checked 1 source file)
</pre>

<p>Typ funkcí, které je možné do <strong>printIsPositive</strong> předat,
můžeme omezit, a to právě s&nbsp;využitím <strong>Callable</strong>. Je to
patrné při pohledu na následující úpravu předchozího demonstračního
příkladu:</p>

<pre>
from typing import Callable
&nbsp;
&nbsp;
def <strong>printIsPositive</strong>(x:float, condition:Callable[[float], bool]) -&gt; None:
    if condition(x):
        print("Positive")
    else:
        print("Negative")
&nbsp;
&nbsp;
def <strong>positiveFloat</strong>(x:float) -&gt; bool:
    return x &gt; 0.0
&nbsp;
&nbsp;
def <strong>positiveInt</strong>(x:int) -&gt; bool:
    return x &gt; 0
&nbsp;
&nbsp;
printIsPositive(4, positiveFloat)
printIsPositive(4, positiveInt)
printIsPositive(-0.5, positiveFloat)
printIsPositive(-0.5, positiveInt)
</pre>

<p>Zkusme si zkontrolovat typovou korektnost:</p>

<pre>
$ <strong>mypy callable2.py</strong>
&nbsp;
callable2.py:20: error: Argument 2 to "printIsPositive" has incompatible type "Callable[[int], bool]"; expected "Callable[[float], bool]"  [arg-type]
callable2.py:22: error: Argument 2 to "printIsPositive" has incompatible type "Callable[[int], bool]"; expected "Callable[[float], bool]"  [arg-type]
Found 2 errors in 1 file (checked 1 source file)
</pre>

<p>V&nbsp;této chvíli totiž na scénu (opět) přichází <i>variance</i>,
resp.&nbsp;její dva typy. Připomeňme si, že existují čtyři typy variance:</p>

<ol>
<li>Covariance</li>
<li>Contravariance</li>
<li>Invariance</li>
<li>Bivariance</li>
</ol>

<p>U typu &bdquo;funkce&ldquo; (tedy <strong>Callable</strong>) v&nbsp;Pythonu
platí: argumenty/parametry jsou kontravariantní, kdežto návratová hodnota je
kovariantní. Zajímavá je zejména kontravariance parametrů, takže si předchozí
příklad zjednodušme &ndash; nebudeme funkci vyššího řádu předávat dva
parametry, ale pouze jediný parametr typu <strong>Callable</strong>:</p>

<pre>
from typing import Callable
&nbsp;
&nbsp;
def <strong>printIsPositive</strong>(condition:Callable[[float], bool]) -&gt; None:
    if condition(5):
        print("Positive")
    else:
        print("Negative")
&nbsp;
&nbsp;
def <strong>positiveFloat</strong>(x:float) -&gt; bool:
    return x &gt; 0.0
&nbsp;
&nbsp;
def <strong>positiveInt</strong>(x:int) -&gt; bool:
    return x &gt; 0
&nbsp;
&nbsp;
printIsPositive(positiveFloat)
printIsPositive(positiveInt)
</pre>

<p>Výsledek typové kontroly:</p>

<pre>
$ <strong>mypy callable3.py</strong>
&nbsp;
callable3.py:20: error: Argument 1 to "printIsPositive" has incompatible type "Callable[[int], bool]"; expected "Callable[[float], bool]"  [arg-type]
Found 1 error in 1 file (checked 1 source file)
</pre>

<p>Zde se právě uplatnila (poněkud neintuitivní) kontravariance. Parametr
funkce <strong>printIsPositive</strong> tedy musíme upravit tak, že bude
akceptovat funkci s&nbsp;parametrem typu <strong>int</strong> a nikoli
<strong>float</strong>:</p>

<pre>
from typing import Callable
&nbsp;
&nbsp;
def <strong>printIsPositive</strong>(condition:Callable[[int], bool]) -&gt; None:
    if condition(5):
        print("Positive")
    else:
        print("Negative")
&nbsp;
&nbsp;
def <strong>positiveFloat</strong>(x:float) -&gt; bool:
    return x &gt; 0.0
&nbsp;
&nbsp;
def <strong>positiveInt</strong>(x:int) -&gt; bool:
    return x &gt; 0
&nbsp;
&nbsp;
printIsPositive(positiveFloat)
printIsPositive(positiveInt)
</pre>

<p><div class="rs-tip-major">Poznámka: <strong>float</strong> je obecnější typ
než <strong>int</strong>; resp.&nbsp;naopak pokud funkce akceptuje funkci
s&nbsp;parametrem typu <strong>int</strong>, zcela jistě bude fungovat i
s&nbsp;funkcí akceptující parametr typu <strong>float</strong>. Naopak (tedy
&bdquo;podle selského rozumu&ldquo;, s&nbsp;variancí) by to nebylo možné,
protože by se interně mohly provádět operace, které nad typem
<strong>int</strong> nemají smysl (například test na nekonečno nebo
NaN).</div></p>

<p>Tentokrát typová kontrola proběhne v&nbsp;pořádku:</p>

<pre>
$ <strong>mypy callable4.py</strong>
&nbsp;
Success: no issues found in 1 source file
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Postup při úpravě stávajících projektů bez typových anotací</h2>

<p>Ve druhé polovině dnešního článku si ukážeme, jakým způsobem by se mohlo
postupovat při úpravě stávajících projektů napsaných v&nbsp;Pythonu, které
prozatím nepoužívají typové anotace. Celý postup je možné shrnout do několika
bodů:</p>

<ol>
<li>Refaktoring, ideálně tak, aby se nepoužívaly globální proměnné a globální kód</li>
<li>Použití Mypy pro nalezení chybějících typových anotací</li>
<li>Postupné doplnění typových anotací</li>
<li>Odstranění reálných chyb nalezených nástrojem Mypy</li>
</ol>

<p><div class="rs-tip-major">Poznámka: celý postup samozřejmě není nutné
aplikovat na celý projekt, ale například pouze na jednu knihovnu (baliček) nebo
dokonce jen na jediný zdrojový kód. Projekt je tak možné postupně,
v&nbsp;malých a testovatelných krocích, vylepšovat.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Původní zdrojový kód upravovaného demonstračního příkladu před refaktoringem a bez typových informací</h2>

<p>Podívejme se nejdříve na původní zdrojový kód příkladu tak, jak byl kdysi
ukázán v&nbsp;článku o knihovně Pygame. Tento zdrojový kód, který naleznete na
adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites1.py</a>,
neobsahuje typové informace (anotace) a bude ho zapotřebí poněkud
refaktorovat:</p>

<pre>
<i>#!/usr/bin/python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pygame
import sys
&nbsp;
<i># Nutno importovat kvůli konstantám QUIT atd.</i>
from pygame.locals import *
&nbsp;
<i># Velikost okna aplikace</i>
WIDTH = 320
HEIGHT = 240
&nbsp;
&nbsp;
<i># Třída představující sprite zobrazený jako jednobarevný čtverec.</i>
class <strong>BlockySprite</strong>(pygame.sprite.Sprite):
    <i># Konstruktor</i>
    def <strong>__init__</strong>(self, color, size, x, y):
        <i># Nejprve je nutné zavolat konstruktor předka,</i>
        <i># tj. konstruktor třídy pygame.sprite.Sprite:</i>
        pygame.sprite.Sprite.__init__(self)
&nbsp;
        <i># Vytvoření obrázku představujícího vizuální obraz spritu:</i>
        self.image = pygame.Surface([size, size])
        self.image.fill(color)
&nbsp;
        <i># Vytvoření obalového obdélníku</i>
        <i># (velikost se získá z rozměru obrázku)</i>
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
&nbsp;
        <i># Počáteční rychlost spritu</i>
        self.speed_x = 0
        self.speed_y = 0
&nbsp;
    <i># Nastavení barvy spritu, který kolidoval s hráčem</i>
    def <strong>yellowColor</strong>(self):
        self.image.fill(YELLOW)
&nbsp;
    <i># Nastavení barvy spritu, který nekolidoval s hráčem</i>
    def <strong>grayColor</strong>(self):
        self.image.fill(GRAY)
&nbsp;
&nbsp;
<i># Inicializace knihovny Pygame</i>
pygame.init()
&nbsp;
clock = pygame.time.Clock()
&nbsp;
<i># Vytvoření okna pro vykreslování</i>
display = pygame.display.set_mode([WIDTH, HEIGHT])
&nbsp;
<i># Nastavení titulku okna</i>
pygame.display.set_caption("Pygame test <i>#22")</i>
&nbsp;
<i># Konstanty s n-ticemi představujícími základní barvy</i>
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GRAY = (128, 128, 128)
YELLOW = (255, 255, 0)
&nbsp;
<i># Objekt sdružující všechny sprity</i>
all_sprites = pygame.sprite.Group()
<i># Objekt sdružující všechny sprity kromě hráče</i>
all_sprites_but_player = pygame.sprite.Group()
&nbsp;
<i># Vytvoření několika typů spritů</i>
<i>#                    barva  x   y velikost</i>
wall1 = BlockySprite(GRAY, 50, 10, 10)
wall2 = BlockySprite(GRAY, 15, 100, 100)
wall3 = BlockySprite(GRAY, 15, 100, 150)
wall4 = BlockySprite(GRAY, 15, 200, 100)
wall5 = BlockySprite(GRAY, 15, 200, 150)
wall6 = BlockySprite(GRAY, 15, 150, 100)
wall7 = BlockySprite(GRAY, 15, 150, 150)
player = BlockySprite(RED, 40, WIDTH / 2 - 20, HEIGHT / 2 - 20)
&nbsp;
<i># Přidání několika dalších spritů do seznamu</i>
<i># (jen jeden sprite - ten poslední - bude ve skutečnosti pohyblivý)</i>
all_sprites.add(wall1)
all_sprites.add(wall2)
all_sprites.add(wall3)
all_sprites.add(wall4)
all_sprites.add(wall5)
all_sprites.add(wall6)
all_sprites.add(wall7)
all_sprites.add(player)
&nbsp;
<i># Seznam všech nepohyblivých spritů</i>
all_sprites_but_player.add(wall1)
all_sprites_but_player.add(wall2)
all_sprites_but_player.add(wall3)
all_sprites_but_player.add(wall4)
all_sprites_but_player.add(wall5)
all_sprites_but_player.add(wall6)
all_sprites_but_player.add(wall7)
&nbsp;
&nbsp;
<i># Posun všech spritů ve skupině na základě jejich rychlosti</i>
@profile
def <strong>move_sprites</strong>(sprite_group, playground_width, playground_height):
    for sprite in sprite_group:
        <i># Posun spritu</i>
        sprite.rect.x = sprite.rect.x + sprite.speed_x
        sprite.rect.y = sprite.rect.y + sprite.speed_y
        <i># Kontrola, zda sprite nenarazil do okrajů okna</i>
        if sprite.rect.x &lt; 0:
            sprite.rect.x = 0
            sprite.speed_x = 0
        if sprite.rect.x + sprite.rect.width &gt; playground_width:
            sprite.rect.x = playground_width - sprite.rect.width
            sprite.speed_x = 0
        if sprite.rect.y &lt; 0:
            sprite.rect.y = 0
            sprite.speed_y = 0
        if sprite.rect.y + sprite.rect.height &gt; playground_height:
            sprite.rect.y = playground_height - sprite.rect.height
            sprite.speed_y = 0
&nbsp;
&nbsp;
<i># Vykreslení celé scény na obrazovku</i>
@profile
def <strong>draw_scene</strong>(display, background_color, sprite_group):
    <i># Vyplnění plochy okna černou barvou</i>
    display.fill(background_color)
    <i># Vykreslení celé skupiny spritů do bufferu</i>
    sprite_group.draw(display)
    <i># Obnovení obsahu obrazovky (překlopení zadního a předního bufferu)</i>
    pygame.display.update()
&nbsp;
&nbsp;
<i># Změna barvy spritu na základě kolize s hráčem</i>
@profile
def <strong>change_colors</strong>(sprite_group, hit_list):
    <i># Projít všemi sprity ze skupiny, kterou detekovala kolizní funkce</i>
    for sprite in sprite_group:
        if sprite in hit_list:
            sprite.yellowColor()
        else:
            sprite.grayColor()
&nbsp;
&nbsp;
<i># Zjistí kolize spritu se "stěnami" (nepohyblivými sprity)</i>
@profile
def <strong>check_collisions</strong>(player, sprite_group):
    <i># Vytvoření seznamu spritů, které kolidují s hráčem</i>
    hit_list = pygame.sprite.spritecollide(player, sprite_group, False)
    <i># Změna barev kolidujících spritů</i>
    change_colors(sprite_group, hit_list)
    collisions = len(hit_list)
    <i># Přenastavení titulku okna</i>
    caption = "Pygame test <i>#22: collisions " + str(collisions)</i>
    pygame.display.set_caption(caption)
&nbsp;
&nbsp;
@profile
def <strong>mainLoop</strong>():
    while True:
        <i># Načtení a zpracování všech událostí z fronty</i>
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    pygame.quit()
                    sys.exit()
                <i># Stiskem kurzorových kláves je možné měnit směr pohybu spritu</i>
                elif event.key == pygame.K_LEFT:
                    player.speed_x = -3
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = +3
                elif event.key == pygame.K_UP:
                    player.speed_y = -3
                elif event.key == pygame.K_DOWN:
                    player.speed_y = +3
            if event.type == KEYUP:
                <i># Puštění kurzorových kláves vede k zastavení pohybu spritu</i>
                if event.key == pygame.K_LEFT:
                    player.speed_x = 0
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = 0
                elif event.key == pygame.K_UP:
                    player.speed_y = 0
                elif event.key == pygame.K_DOWN:
                    player.speed_y = 0
&nbsp;
        move_sprites(all_sprites, display.get_width(), display.get_height())
        check_collisions(player, all_sprites_but_player)
        draw_scene(display, BLACK, all_sprites)
        clock.tick(20)
&nbsp;
&nbsp;
mainLoop()
&nbsp;
<i># finito</i>
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Refaktoring kódu</h2>

<p>Předchozí zdrojový kód je vhodné před doplněním o typové informace ještě
náležitě upravit. Postupně některé jeho části vložíme do funkcí a zajistíme,
aby se nepoužívaly globální proměnné (pouze globální &bdquo;konstanty&ldquo;, i
když koncept pravých konstant v&nbsp;Pythonu není). Refaktorovaný kód sice
stále nepoužívá typové anotace, ale už je na tuto důležitou změnu
připraven:</p>

<pre>
<i>#!/usr/bin/python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pygame
import sys
&nbsp;
<i># Nutno importovat kvůli konstantám QUIT atd.</i>
from pygame.locals import *
&nbsp;
<i># Velikost okna aplikace</i>
WIDTH = 320
HEIGHT = 240
&nbsp;
<i># Konstanty s n-ticemi představujícími základní barvy</i>
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GRAY = (128, 128, 128)
YELLOW = (255, 255, 0)
&nbsp;
CAPTION = "Sprites in Pygame"
&nbsp;
&nbsp;
<i># Třída představující sprite zobrazený jako jednobarevný čtverec.</i>
class <strong>BlockySprite</strong>(pygame.sprite.Sprite):
    <i># Konstruktor</i>
    def <strong>__init__</strong>(self, color, size, x, y):
        <i># Nejprve je nutné zavolat konstruktor předka,</i>
        <i># tj. konstruktor třídy pygame.sprite.Sprite:</i>
        pygame.sprite.Sprite.__init__(self)
&nbsp;
        <i># Vytvoření obrázku představujícího vizuální obraz spritu:</i>
        self.image = pygame.Surface([size, size])
        self.image.fill(color)
&nbsp;
        <i># Vytvoření obalového obdélníku</i>
        <i># (velikost se získá z rozměru obrázku)</i>
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
&nbsp;
        <i># Počáteční rychlost spritu</i>
        self.speed_x = 0
        self.speed_y = 0
&nbsp;
    <i># Nastavení barvy spritu, který kolidoval s hráčem</i>
    def <strong>yellowColor</strong>(self):
        self.image.fill(YELLOW)
&nbsp;
    <i># Nastavení barvy spritu, který nekolidoval s hráčem</i>
    def <strong>grayColor</strong>(self):
        self.image.fill(GRAY)
&nbsp;
&nbsp;
def <strong>initDisplay</strong>(caption):
    <i># Vytvoření okna pro vykreslování</i>
    display = pygame.display.set_mode([WIDTH, HEIGHT])
&nbsp;
    <i># Nastavení titulku okna</i>
    pygame.display.set_caption(caption)
&nbsp;
    return display
&nbsp;
&nbsp;
def <strong>createSprites</strong>():
    <i># Objekt sdružující všechny sprity</i>
    all_sprites = pygame.sprite.Group()
&nbsp;
    <i># Objekt sdružující všechny sprity kromě hráče</i>
    all_sprites_but_player = pygame.sprite.Group()
&nbsp;
    <i># Vytvoření několika typů spritů</i>
    <i>#                    barva  x   y velikost</i>
    wall1 = BlockySprite(GRAY, 50, 10, 10)
    wall2 = BlockySprite(GRAY, 15, 100, 100)
    wall3 = BlockySprite(GRAY, 15, 100, 150)
    wall4 = BlockySprite(GRAY, 15, 200, 100)
    wall5 = BlockySprite(GRAY, 15, 200, 150)
    wall6 = BlockySprite(GRAY, 15, 150, 100)
    wall7 = BlockySprite(GRAY, 15, 150, 150)
    player = BlockySprite(RED, 40, WIDTH / 2 - 20, HEIGHT / 2 - 20)
&nbsp;
    <i># Přidání několika dalších spritů do seznamu</i>
    <i># (jen jeden sprite - ten poslední - bude ve skutečnosti pohyblivý)</i>
    all_sprites.add(wall1)
    all_sprites.add(wall2)
    all_sprites.add(wall3)
    all_sprites.add(wall4)
    all_sprites.add(wall5)
    all_sprites.add(wall6)
    all_sprites.add(wall7)
    all_sprites.add(player)
&nbsp;
    <i># Seznam všech nepohyblivých spritů</i>
    all_sprites_but_player.add(wall1)
    all_sprites_but_player.add(wall2)
    all_sprites_but_player.add(wall3)
    all_sprites_but_player.add(wall4)
    all_sprites_but_player.add(wall5)
    all_sprites_but_player.add(wall6)
    all_sprites_but_player.add(wall7)
&nbsp;
    return all_sprites, all_sprites_but_player, player
&nbsp;
&nbsp;
<i># Posun všech spritů ve skupině na základě jejich rychlosti</i>
def <strong>move_sprites</strong>(sprite_group, playground_width, playground_height):
    for sprite in sprite_group:
        <i># Posun spritu</i>
        sprite.rect.x = sprite.rect.x + sprite.speed_x
        sprite.rect.y = sprite.rect.y + sprite.speed_y
        <i># Kontrola, zda sprite nenarazil do okrajů okna</i>
        if sprite.rect.x &lt; 0:
            sprite.rect.x = 0
            sprite.speed_x = 0
        if sprite.rect.x + sprite.rect.width &gt; playground_width:
            sprite.rect.x = playground_width - sprite.rect.width
            sprite.speed_x = 0
        if sprite.rect.y &lt; 0:
            sprite.rect.y = 0
            sprite.speed_y = 0
        if sprite.rect.y + sprite.rect.height &gt; playground_height:
            sprite.rect.y = playground_height - sprite.rect.height
            sprite.speed_y = 0
&nbsp;
&nbsp;
<i># Vykreslení celé scény na obrazovku</i>
def <strong>draw_scene</strong>(display, background_color, sprite_group):
    <i># Vyplnění plochy okna černou barvou</i>
    display.fill(background_color)
    <i># Vykreslení celé skupiny spritů do bufferu</i>
    sprite_group.draw(display)
    <i># Obnovení obsahu obrazovky (překlopení zadního a předního bufferu)</i>
    pygame.display.update()
&nbsp;
&nbsp;
<i># Změna barvy spritu na základě kolize s hráčem</i>
def <strong>change_colors</strong>(sprite_group, hit_list):
    <i># Projít všemi sprity ze skupiny, kterou detekovala kolizní funkce</i>
    for sprite in sprite_group:
        if sprite in hit_list:
            sprite.yellowColor()
        else:
            sprite.grayColor()
&nbsp;
&nbsp;
<i># Zjistí kolize spritu se "stěnami" (nepohyblivými sprity)</i>
def <strong>check_collisions</strong>(player, sprite_group):
    <i># Vytvoření seznamu spritů, které kolidují s hráčem</i>
    hit_list = pygame.sprite.spritecollide(player, sprite_group, False)
    <i># Změna barev kolidujících spritů</i>
    change_colors(sprite_group, hit_list)
    collisions = len(hit_list)
    <i># Přenastavení titulku okna</i>
    caption = CAPTION + ": collisions " + str(collisions)
    pygame.display.set_caption(caption)
&nbsp;
&nbsp;
def <strong>mainLoop</strong>(display, clock, all_sprites, all_sprites_but_player, player):
    while True:
        <i># Načtení a zpracování všech událostí z fronty</i>
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    pygame.quit()
                    sys.exit()
                <i># Stiskem kurzorových kláves je možné měnit směr pohybu spritu</i>
                elif event.key == pygame.K_LEFT:
                    player.speed_x = -3
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = +3
                elif event.key == pygame.K_UP:
                    player.speed_y = -3
                elif event.key == pygame.K_DOWN:
                    player.speed_y = +3
            if event.type == KEYUP:
                <i># Puštění kurzorových kláves vede k zastavení pohybu spritu</i>
                if event.key == pygame.K_LEFT:
                    player.speed_x = 0
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = 0
                elif event.key == pygame.K_UP:
                    player.speed_y = 0
                elif event.key == pygame.K_DOWN:
                    player.speed_y = 0
&nbsp;
        move_sprites(all_sprites, display.get_width(), display.get_height())
        check_collisions(player, all_sprites_but_player)
        draw_scene(display, BLACK, all_sprites)
        clock.tick(20)
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># Inicializace knihovny Pygame</i>
    pygame.init()
&nbsp;
    clock = pygame.time.Clock()
    display = initDisplay(CAPTION)
&nbsp;
    all_sprites, all_sprites_but_player, player = createSprites()
&nbsp;
    mainLoop(display, clock, all_sprites, all_sprites_but_player, player)
&nbsp;
&nbsp;
if __name__ == "__main__":
    main()
&nbsp;
&nbsp;
<i># finito</i>
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si zejména toho, že funkce
<strong>createSprites</strong> vrací n-tici. Nejedná se o zcela ideální řešení,
ovšem alespoň si osvěžíme, jak se v&nbsp;nástroji Mypy s&nbsp;n-ticemi
pracuje.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Výsledek spuštění Mypy ve striktním režimu</h2>

<p>V&nbsp;případě, že spustíme nástroj Mypy s&nbsp;přepínačem
<strong>--strict</strong>, vypíšou se jak všechny chybějící anotace, tak i
další potenciální problémy nalezené ve zdrojových kódech:</p>

<pre>
$ <strong>mypy --strict sprites2.py</strong>
</pre>

<p>Výsledek by měl v&nbsp;našem případě konkrétně vypadat takto:</p>

<pre>
sprites2.py:26: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:46: error: Function is missing a return type annotation  [no-untyped-def]
sprites2.py:46: note: Use "-&gt; None" if function does not return a value
sprites2.py:50: error: Function is missing a return type annotation  [no-untyped-def]
sprites2.py:50: note: Use "-&gt; None" if function does not return a value
sprites2.py:54: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:64: error: Function is missing a return type annotation  [no-untyped-def]
sprites2.py:66: error: Need type annotation for "all_sprites"  [var-annotated]
sprites2.py:69: error: Need type annotation for "all_sprites_but_player"  [var-annotated]
sprites2.py:73: error: Call to untyped function "BlockySprite" in typed context  [no-untyped-call]
sprites2.py:74: error: Call to untyped function "BlockySprite" in typed context  [no-untyped-call]
sprites2.py:75: error: Call to untyped function "BlockySprite" in typed context  [no-untyped-call]
sprites2.py:76: error: Call to untyped function "BlockySprite" in typed context  [no-untyped-call]
sprites2.py:77: error: Call to untyped function "BlockySprite" in typed context  [no-untyped-call]
sprites2.py:78: error: Call to untyped function "BlockySprite" in typed context  [no-untyped-call]
sprites2.py:79: error: Call to untyped function "BlockySprite" in typed context  [no-untyped-call]
sprites2.py:80: error: Call to untyped function "BlockySprite" in typed context  [no-untyped-call]
sprites2.py:106: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:127: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:137: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:147: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:151: error: Call to untyped function "change_colors" in typed context  [no-untyped-call]
sprites2.py:158: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:189: error: Call to untyped function "move_sprites" in typed context  [no-untyped-call]
sprites2.py:190: error: Call to untyped function "check_collisions" in typed context  [no-untyped-call]
sprites2.py:191: error: Call to untyped function "draw_scene" in typed context  [no-untyped-call]
sprites2.py:195: error: Function is missing a return type annotation  [no-untyped-def]
sprites2.py:195: note: Use "-&gt; None" if function does not return a value
sprites2.py:200: error: Call to untyped function "initDisplay" in typed context  [no-untyped-call]
sprites2.py:202: error: Call to untyped function "createSprites" in typed context  [no-untyped-call]
sprites2.py:204: error: Call to untyped function "mainLoop" in typed context  [no-untyped-call]
sprites2.py:208: error: Call to untyped function "main" in typed context  [no-untyped-call]
Found 29 errors in 1 file (checked 1 source file)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Využití Mypy pro nalezení chybějících typových anotací</h2>

<p>Prozatím se však budeme chtít soustředit na nalezení těch řádků
v&nbsp;programovém kódu, kde chybí typové anotace. K&nbsp;tomuto účelu nemusí
být striktní režim nejvhodnější. Namísto toho použijeme jiné přepínače (které
jsou součástí striktního režimu):</p>

<pre>
$ <strong>mypy --explicit-package-bases --disallow-untyped-calls --disallow-untyped-defs --disallow-incomplete-defs sprites2.py</strong>
</pre>

<p>Výsledek bude nyní vypadat následovně:</p>

<pre>
sprites2.py:26: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:46: error: Function is missing a return type annotation  [no-untyped-def]
sprites2.py:46: note: Use "-&gt; None" if function does not return a value
sprites2.py:50: error: Function is missing a return type annotation  [no-untyped-def]
sprites2.py:50: note: Use "-&gt; None" if function does not return a value
sprites2.py:54: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:64: error: Function is missing a return type annotation  [no-untyped-def]
sprites2.py:106: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:127: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:137: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:147: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:158: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:195: error: Function is missing a return type annotation  [no-untyped-def]
sprites2.py:195: note: Use "-&gt; None" if function does not return a value
sprites2.py:208: error: Call to untyped function "main" in typed context  [no-untyped-call]
Found 12 errors in 1 file (checked 1 source file)
</pre>

<p>Oněch dvanáct nalezených chyb postupně opravíme.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Přidání typů návratových hodnot u funkcí, které žádnou hodnotu nevracejí</h2>

<pre>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Typové anotace parametrů funkcí a jejich návratových hodnot</h2>

<pre>
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Výsledný kód s&nbsp;typovými anotacemi</h2>

<pre>
<i>#!/usr/bin/python</i>
<i># vim: set fileencoding=utf-8</i>

from typing import NewType, Tuple, List, Any

import pygame
import sys

<i># Nutno importovat kvůli konstantám QUIT atd.</i>
from pygame.locals import *

<i># Velikost okna aplikace</i>
WIDTH = 320
HEIGHT = 240

<i># Konstanty s n-ticemi představujícími základní barvy</i>
BLACK: Tuple[int, int, int] = (0, 0, 0)
RED: Tuple[int, int, int] = (255, 0, 0)
GRAY: Tuple[int, int, int] = (128, 128, 128)
YELLOW: Tuple[int, int, int] = (255, 255, 0)

CAPTION = "Sprites in Pygame"


<i># Třída představující sprite zobrazený jako jednobarevný čtverec.</i>
class <strong>BlockySprite</strong>(pygame.sprite.Sprite):
    <i># Konstruktor</i>
    def <strong>__init__</strong>(self, color: Tuple[int, int, int], size: int, x: int, y: int):
        <i># Nejprve je nutné zavolat konstruktor předka,</i>
        <i># tj. konstruktor třídy pygame.sprite.Sprite:</i>
        pygame.sprite.Sprite.__init__(self)

        <i># Vytvoření obrázku představujícího vizuální obraz spritu:</i>
        self.image = pygame.Surface([size, size])
        self.image.fill(color)

        <i># Vytvoření obalového obdélníku</i>
        <i># (velikost se získá z rozměru obrázku)</i>
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

        <i># Počáteční rychlost spritu</i>
        self.speed_x = 0
        self.speed_y = 0

    <i># Nastavení barvy spritu, který kolidoval s hráčem</i>
    def <strong>yellowColor</strong>(self) -&gt; None:
        self.image.fill(YELLOW)

    <i># Nastavení barvy spritu, který nekolidoval s hráčem</i>
    def <strong>grayColor</strong>(self) -&gt; None:
        self.image.fill(GRAY)


def <strong>initDisplay</strong>(caption: str) -&gt; pygame.Surface:
    <i># Vytvoření okna pro vykreslování</i>
    display = pygame.display.set_mode([WIDTH, HEIGHT])

    <i># Nastavení titulku okna</i>
    pygame.display.set_caption(caption)

    return display


def <strong>createSprites</strong>() -&gt; Tuple[pygame.sprite.Group, pygame.sprite.Group, BlockySprite]:
    <i># Objekt sdružující všechny sprity</i>
    all_sprites: pygame.sprite.Group = pygame.sprite.Group()

    <i># Objekt sdružující všechny sprity kromě hráče</i>
    all_sprites_but_player: pygame.sprite.Group = pygame.sprite.Group()

    <i># Vytvoření několika typů spritů</i>
    <i>#                    barva  x   y velikost</i>
    wall1 = BlockySprite(GRAY, 50, 10, 10)
    wall2 = BlockySprite(GRAY, 15, 100, 100)
    wall3 = BlockySprite(GRAY, 15, 100, 150)
    wall4 = BlockySprite(GRAY, 15, 200, 100)
    wall5 = BlockySprite(GRAY, 15, 200, 150)
    wall6 = BlockySprite(GRAY, 15, 150, 100)
    wall7 = BlockySprite(GRAY, 15, 150, 150)
    player = BlockySprite(RED, 40, WIDTH / 2 - 20, HEIGHT / 2 - 20)

    <i># Přidání několika dalších spritů do seznamu</i>
    <i># (jen jeden sprite - ten poslední - bude ve skutečnosti pohyblivý)</i>
    all_sprites.add(wall1)
    all_sprites.add(wall2)
    all_sprites.add(wall3)
    all_sprites.add(wall4)
    all_sprites.add(wall5)
    all_sprites.add(wall6)
    all_sprites.add(wall7)
    all_sprites.add(player)

    <i># Seznam všech nepohyblivých spritů</i>
    all_sprites_but_player.add(wall1)
    all_sprites_but_player.add(wall2)
    all_sprites_but_player.add(wall3)
    all_sprites_but_player.add(wall4)
    all_sprites_but_player.add(wall5)
    all_sprites_but_player.add(wall6)
    all_sprites_but_player.add(wall7)

    return all_sprites, all_sprites_but_player, player


<i># Posun všech spritů ve skupině na základě jejich rychlosti</i>
def <strong>move_sprites</strong>(sprite_group: pygame.sprite.Group, playground_width: int, playground_height:int) -&gt; None:
    for sprite in sprite_group:
        <i># Posun spritu</i>
        sprite.rect.x = sprite.rect.x + sprite.speed_x
        sprite.rect.y = sprite.rect.y + sprite.speed_y
        <i># Kontrola, zda sprite nenarazil do okrajů okna</i>
        if sprite.rect.x &lt; 0:
            sprite.rect.x = 0
            sprite.speed_x = 0
        if sprite.rect.x + sprite.rect.width &gt; playground_width:
            sprite.rect.x = playground_width - sprite.rect.width
            sprite.speed_x = 0
        if sprite.rect.y &lt; 0:
            sprite.rect.y = 0
            sprite.speed_y = 0
        if sprite.rect.y + sprite.rect.height &gt; playground_height:
            sprite.rect.y = playground_height - sprite.rect.height
            sprite.speed_y = 0


<i># Vykreslení celé scény na obrazovku</i>
def <strong>draw_scene</strong>(display: pygame.Surface, background_color: Tuple[int, int, int], sprite_group: pygame.sprite.Group) -&gt; None:
    <i># Vyplnění plochy okna černou barvou</i>
    display.fill(background_color)
    <i># Vykreslení celé skupiny spritů do bufferu</i>
    sprite_group.draw(display)
    <i># Obnovení obsahu obrazovky (překlopení zadního a předního bufferu)</i>
    pygame.display.update()


<i># Změna barvy spritu na základě kolize s hráčem</i>
def <strong>change_colors</strong>(sprite_group: pygame.sprite.Group, hit_list: List[pygame.sprite.Sprite]) -&gt; None:
    <i># Projít všemi sprity ze skupiny, kterou detekovala kolizní funkce</i>
    for sprite in sprite_group:
        if sprite in hit_list:
            sprite.yellowColor()
        else:
            sprite.grayColor()


<i># Zjistí kolize spritu se "stěnami" (nepohyblivými sprity)</i>
def <strong>check_collisions</strong>(player: BlockySprite, sprite_group: pygame.sprite.Group) -&gt; None:
    <i># Vytvoření seznamu spritů, které kolidují s hráčem</i>
    hit_list = pygame.sprite.spritecollide(player, sprite_group, False)
    <i># Změna barev kolidujících spritů</i>
    change_colors(sprite_group, hit_list)
    collisions = len(hit_list)
    <i># Přenastavení titulku okna</i>
    caption = CAPTION + ": collisions " + str(collisions)
    pygame.display.set_caption(caption)


def <strong>mainLoop</strong>(display: pygame.Surface, clock: pygame.time.Clock,
        all_sprites: pygame.sprite.Group,
        all_sprites_but_player: pygame.sprite.Group, player: BlockySprite) -&gt; None:
    while True:
        <i># Načtení a zpracování všech událostí z fronty</i>
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    pygame.quit()
                    sys.exit()
                <i># Stiskem kurzorových kláves je možné měnit směr pohybu spritu</i>
                elif event.key == pygame.K_LEFT:
                    player.speed_x = -3
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = +3
                elif event.key == pygame.K_UP:
                    player.speed_y = -3
                elif event.key == pygame.K_DOWN:
                    player.speed_y = +3
            if event.type == KEYUP:
                <i># Puštění kurzorových kláves vede k zastavení pohybu spritu</i>
                if event.key == pygame.K_LEFT:
                    player.speed_x = 0
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = 0
                elif event.key == pygame.K_UP:
                    player.speed_y = 0
                elif event.key == pygame.K_DOWN:
                    player.speed_y = 0

        move_sprites(all_sprites, display.get_width(), display.get_height())
        check_collisions(player, all_sprites_but_player)
        draw_scene(display, BLACK, all_sprites)
        clock.tick(20)


def <strong>main</strong>() -&gt; None:
    <i># Inicializace knihovny Pygame</i>
    pygame.init()

    clock = pygame.time.Clock()
    display = initDisplay(CAPTION)

    all_sprites, all_sprites_but_player, player = createSprites()

    mainLoop(display, clock, all_sprites, all_sprites_but_player, player)


if __name__ == "__main__":
    main()


<i># finito</i>
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
sprites3.py:82: error: Argument 3 to "BlockySprite" has incompatible type "float"; expected "int"  [arg-type]
sprites3.py:82: error: Argument 4 to "BlockySprite" has incompatible type "float"; expected "int"  [arg-type]
Found 2 errors in 1 file (checked 1 source file)
</pre>

<pre>
</pre>

<pre>
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Výsledný kód s&nbsp;typovými informacemi</h2>

<p>Pro úplnost se podívejme na to, jak bude vypadat výsledný kód skriptu po
jeho refaktoringu, přidání typových informací i opravě chyb nalezených
nástrojem Mypy. Tento kód je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites4.py</a>:</p>

<pre>
<i>#!/usr/bin/python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from typing import NewType, Tuple, List
&nbsp;
import pygame
import sys
&nbsp;
<i># Nutno importovat kvůli konstantám QUIT atd.</i>
from pygame.locals import *
&nbsp;
<i># Velikost okna aplikace</i>
WIDTH = 320
HEIGHT = 240
&nbsp;
<i># Konstanty s n-ticemi představujícími základní barvy</i>
BLACK: Tuple[int, int, int] = (0, 0, 0)
RED: Tuple[int, int, int] = (255, 0, 0)
GRAY: Tuple[int, int, int] = (128, 128, 128)
YELLOW: Tuple[int, int, int] = (255, 255, 0)
&nbsp;
CAPTION = "Sprites in Pygame"
&nbsp;
&nbsp;
<i># Třída představující sprite zobrazený jako jednobarevný čtverec.</i>
class <strong>BlockySprite</strong>(pygame.sprite.Sprite):
    <i># Konstruktor</i>
    def <strong>__init__</strong>(self, color: Tuple[int, int, int], size: int, x: int, y: int):
        <i># Nejprve je nutné zavolat konstruktor předka,</i>
        <i># tj. konstruktor třídy pygame.sprite.Sprite:</i>
        pygame.sprite.Sprite.__init__(self)
&nbsp;
        <i># Vytvoření obrázku představujícího vizuální obraz spritu:</i>
        self.image = pygame.Surface([size, size])
        self.image.fill(color)
&nbsp;
        <i># Vytvoření obalového obdélníku</i>
        <i># (velikost se získá z rozměru obrázku)</i>
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
&nbsp;
        <i># Počáteční rychlost spritu</i>
        self.speed_x = 0
        self.speed_y = 0
&nbsp;
    <i># Nastavení barvy spritu, který kolidoval s hráčem</i>
    def <strong>yellowColor</strong>(self) -&gt; None:
        self.image.fill(YELLOW)
&nbsp;
    <i># Nastavení barvy spritu, který nekolidoval s hráčem</i>
    def <strong>grayColor</strong>(self) -&gt; None:
        self.image.fill(GRAY)
&nbsp;
&nbsp;
def <strong>initDisplay</strong>(caption: str) -&gt; pygame.Surface:
    <i># Vytvoření okna pro vykreslování</i>
    display = pygame.display.set_mode([WIDTH, HEIGHT])
&nbsp;
    <i># Nastavení titulku okna</i>
    pygame.display.set_caption(caption)
&nbsp;
    return display
&nbsp;
&nbsp;
def <strong>createSprites</strong>() -&gt; Tuple[pygame.sprite.Group, pygame.sprite.Group, BlockySprite]:
    <i># Objekt sdružující všechny sprity</i>
    all_sprites: pygame.sprite.Group = pygame.sprite.Group()
&nbsp;
    <i># Objekt sdružující všechny sprity kromě hráče</i>
    all_sprites_but_player: pygame.sprite.Group = pygame.sprite.Group()
&nbsp;
    <i># Vytvoření několika typů spritů</i>
    <i>#                    barva  x   y velikost</i>
    wall1 = BlockySprite(GRAY, 50, 10, 10)
    wall2 = BlockySprite(GRAY, 15, 100, 100)
    wall3 = BlockySprite(GRAY, 15, 100, 150)
    wall4 = BlockySprite(GRAY, 15, 200, 100)
    wall5 = BlockySprite(GRAY, 15, 200, 150)
    wall6 = BlockySprite(GRAY, 15, 150, 100)
    wall7 = BlockySprite(GRAY, 15, 150, 150)
    player = BlockySprite(RED, 40, WIDTH // 2 - 20, HEIGHT // 2 - 20)
&nbsp;
    <i># Přidání několika dalších spritů do seznamu</i>
    <i># (jen jeden sprite - ten poslední - bude ve skutečnosti pohyblivý)</i>
    all_sprites.add(wall1)
    all_sprites.add(wall2)
    all_sprites.add(wall3)
    all_sprites.add(wall4)
    all_sprites.add(wall5)
    all_sprites.add(wall6)
    all_sprites.add(wall7)
    all_sprites.add(player)
&nbsp;
    <i># Seznam všech nepohyblivých spritů</i>
    all_sprites_but_player.add(wall1)
    all_sprites_but_player.add(wall2)
    all_sprites_but_player.add(wall3)
    all_sprites_but_player.add(wall4)
    all_sprites_but_player.add(wall5)
    all_sprites_but_player.add(wall6)
    all_sprites_but_player.add(wall7)
&nbsp;
    return all_sprites, all_sprites_but_player, player
&nbsp;
&nbsp;
<i># Posun všech spritů ve skupině na základě jejich rychlosti</i>
def <strong>move_sprites</strong>(sprite_group: pygame.sprite.Group, playground_width: int, playground_height:int) -&gt; None:
    for sprite in sprite_group:
        <i># Posun spritu</i>
        sprite.rect.x = sprite.rect.x + sprite.speed_x
        sprite.rect.y = sprite.rect.y + sprite.speed_y
        <i># Kontrola, zda sprite nenarazil do okrajů okna</i>
        if sprite.rect.x &lt; 0:
            sprite.rect.x = 0
            sprite.speed_x = 0
        if sprite.rect.x + sprite.rect.width &gt; playground_width:
            sprite.rect.x = playground_width - sprite.rect.width
            sprite.speed_x = 0
        if sprite.rect.y &lt; 0:
            sprite.rect.y = 0
            sprite.speed_y = 0
        if sprite.rect.y + sprite.rect.height &gt; playground_height:
            sprite.rect.y = playground_height - sprite.rect.height
            sprite.speed_y = 0
&nbsp;
&nbsp;
<i># Vykreslení celé scény na obrazovku</i>
def <strong>draw_scene</strong>(display: pygame.Surface, background_color: Tuple[int, int, int], sprite_group: pygame.sprite.Group) -&gt; None:
    <i># Vyplnění plochy okna černou barvou</i>
    display.fill(background_color)
    <i># Vykreslení celé skupiny spritů do bufferu</i>
    sprite_group.draw(display)
    <i># Obnovení obsahu obrazovky (překlopení zadního a předního bufferu)</i>
    pygame.display.update()
&nbsp;
&nbsp;
<i># Změna barvy spritu na základě kolize s hráčem</i>
def <strong>change_colors</strong>(sprite_group: pygame.sprite.Group, hit_list: List[pygame.sprite.Sprite]) -&gt; None:
    <i># Projít všemi sprity ze skupiny, kterou detekovala kolizní funkce</i>
    for sprite in sprite_group:
        if sprite in hit_list:
            sprite.yellowColor()
        else:
            sprite.grayColor()
&nbsp;
&nbsp;
<i># Zjistí kolize spritu se "stěnami" (nepohyblivými sprity)</i>
def <strong>check_collisions</strong>(player: BlockySprite, sprite_group: pygame.sprite.Group) -&gt; None:
    <i># Vytvoření seznamu spritů, které kolidují s hráčem</i>
    hit_list = pygame.sprite.spritecollide(player, sprite_group, False)
    <i># Změna barev kolidujících spritů</i>
    change_colors(sprite_group, hit_list)
    collisions = len(hit_list)
    <i># Přenastavení titulku okna</i>
    caption = CAPTION + ": collisions " + str(collisions)
    pygame.display.set_caption(caption)
&nbsp;
&nbsp;
def <strong>mainLoop</strong>(display: pygame.Surface, clock: pygame.time.Clock,
        all_sprites: pygame.sprite.Group,
        all_sprites_but_player: pygame.sprite.Group, player: BlockySprite) -&gt; None:
    while True:
        <i># Načtení a zpracování všech událostí z fronty</i>
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    pygame.quit()
                    sys.exit()
                <i># Stiskem kurzorových kláves je možné měnit směr pohybu spritu</i>
                elif event.key == pygame.K_LEFT:
                    player.speed_x = -3
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = +3
                elif event.key == pygame.K_UP:
                    player.speed_y = -3
                elif event.key == pygame.K_DOWN:
                    player.speed_y = +3
            if event.type == KEYUP:
                <i># Puštění kurzorových kláves vede k zastavení pohybu spritu</i>
                if event.key == pygame.K_LEFT:
                    player.speed_x = 0
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = 0
                elif event.key == pygame.K_UP:
                    player.speed_y = 0
                elif event.key == pygame.K_DOWN:
                    player.speed_y = 0
&nbsp;
        move_sprites(all_sprites, display.get_width(), display.get_height())
        check_collisions(player, all_sprites_but_player)
        draw_scene(display, BLACK, all_sprites)
        clock.tick(20)
&nbsp;
&nbsp;
def <strong>main</strong>() -&gt; None:
    <i># Inicializace knihovny Pygame</i>
    pygame.init()
&nbsp;
    clock = pygame.time.Clock()
    display = initDisplay(CAPTION)
&nbsp;
    all_sprites, all_sprites_but_player, player = createSprites()
&nbsp;
    mainLoop(display, clock, all_sprites, all_sprites_but_player, player)
&nbsp;
&nbsp;
if __name__ == "__main__":
    main()
&nbsp;
&nbsp;
<i># finito</i>
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty, které jsme si v&nbsp;dnešním článku ukázali,
naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je nutné mít
nainstalován balíček <i>mypy</i>):</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>adder1.py</td><td>funkce <strong>add</strong> bez typových anotací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder1.py</a></td></tr>
<tr><td> 2</td><td>adder2.py</td><td>funkce <strong>add</strong> s&nbsp;typovými anotacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder2.py</a></td></tr>
<tr><td> 3</td><td>adder3.py</td><td>funkce <strong>add</strong> volaná s&nbsp;hodnotami <strong>True</strong> a <strong>False</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder3.py</a></td></tr>
<tr><td> 4</td><td>adder4.py</td><td>funkce <strong>add</strong> akceptující hodnoty typu <strong>bool</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder4.py</a></td></tr>
<tr><td> 5</td><td>adder5.py</td><td>zobrazení typových informací pro funkci bez typových anotací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder5.py</a></td></tr>
<tr><td> 6</td><td>adder6.py</td><td>zobrazení typových informací pro funkci s&nbsp;typovými anotacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>exec_problem_1.py</td><td>funkce <strong>add</strong> s&nbsp;typovými anotacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_1.py</a></td></tr>
<tr><td> 6</td><td>exec_problem_2.py</td><td>korektní detekce volání funkce <strong>add</strong> s&nbsp;nekompatibilními hodnotami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_2.py</a></td></tr>
<tr><td> 7</td><td>exec_problem_3.py</td><td>příkaz použitý v&nbsp;<strong>exec</strong> není statickým analyzátorem zachycen</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>list_type1.py</td><td>typ seznam, s&nbsp;inicializací (bez prvků), pro Python 3.10</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type1.py</a></td></tr>
<tr><td> 9</td><td>list_type2.py</td><td>typ seznam, s&nbsp;inicializací (bez prvků), pro starší verze Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type2.py</a></td></tr>
<tr><td>10</td><td>list_type3.py</td><td>typ seznam, s&nbsp;inicializací (s&nbsp;prvky), pro starší verze Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type3.py</a></td></tr>
<tr><td>11</td><td>list_type4.py</td><td>typ seznam, kontrola použití prvků s&nbsp;nekorektními typy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type4.py</a></td></tr>
<tr><td>12</td><td>list_type5.py</td><td>typ seznam, kontrola použití prvků s&nbsp;korektními typy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type5.py</a></td></tr>
<tr><td>13</td><td>list_type6.py</td><td>typ seznam, kontrola použití prvků s&nbsp;korektními typy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>14</td><td>tuple_type1.py</td><td>typ n-tice (nekorektní specifikace typu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type1.py</a></td></tr>
<tr><td>15</td><td>tuple_type2.py</td><td>typ n-tice (korektní specifikace typu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type2.py</a></td></tr>
<tr><td>16</td><td>tuple_type3.py</td><td>typ n-tice, v&nbsp;níž má každý prvek odlišný typ</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type3.py</a></td></tr>
<tr><td>17</td><td>tuple_type4.py</td><td>typ n-tice, v&nbsp;níž má každý prvek odlišný typ</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>json_check.py</td><td>delší kód v&nbsp;Pythonu bez typových anotací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/json_check.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/json_check.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>Variance1.java</td><td>variance v&nbsp;Javě &ndash; korektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.java">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.java</a></td></tr>
<tr><td>20</td><td>Variance2.java</td><td>variance v&nbsp;Javě &ndash; nekorektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.java">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.java</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>Variance1.py</td><td>variance v&nbsp;Pythonu &ndash; korektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.py</a></td></tr>
<tr><td>22</td><td>Variance2.py</td><td>variance v&nbsp;Pythonu &ndash; nekorektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.py</a></td></tr>
<tr><td>23</td><td>Variance3.py</td><td>variance v&nbsp;Pythonu &ndash; nekorektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance3.py</a></td></tr>
<tr><td>24</td><td>Variance4.py</td><td>použití typu <strong>Sequence</strong> namísto <strong>List</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>25</td><td>view_pyc.py</td><td>jednoduchá prohlížečka souborů .pyc</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/view_pyc.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/view_pyc.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>callable1.py</td><td>funkce s&nbsp;typovými informacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable1.py</a></td></tr>
<tr><td>27</td><td>callable2.py</td><td>variance funkcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable2.py</a></td></tr>
<tr><td>28</td><td>callable3.py</td><td>variance funkcí (nekorektní příklad)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable3.py</a></td></tr>
<tr><td>29</td><td>callable4.py</td><td>korektní řešení problému z&nbsp;kódu <strong>callable3.py</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>30</td><td>dict_type1.py</td><td>slovník bez specifikace informací o typech (homogenní struktura)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type1.py</a></td></tr>
<tr><td>31</td><td>dict_type2.py</td><td>slovník bez specifikace informací o typech (heterogenní struktura)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type2.py</a></td></tr>
<tr><td>32</td><td>dict_type3.py</td><td>typově silný slovník (heterogenní struktura)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type3.py</a></td></tr>
<tr><td>33</td><td>dict_type4.py</td><td>typově silný slovník (homogenní struktura)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type4.py</a></td></tr>
<tr><td>34</td><td>dict_type5.py</td><td>použití typu <strong>Union</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type5.py</a></td></tr>
<tr><td>35</td><td>dict_type6.py</td><td>použití typu <strong>Union</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type6.py</a></td></tr>
<tr><td>36</td><td>dict_type7.py</td><td>použití typu <strong>Optional</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type7.py</a></td></tr>
<tr><td>37</td><td>dict_type8.py</td><td>použití typu <strong>Optional</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type8.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>38</td><td>sprites1.py</td><td>původní kód před refaktoringem a bez typových informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites1.py</a></td></tr>
<tr><td>39</td><td>sprites2.py</td><td>refaktoring kódu <strong>sprites1.py</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites2.py</a></td></tr>
<tr><td>40</td><td>sprites3.py</td><td>přidání typových informací do kódu <strong>sprites2.py</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites3.py</a></td></tr>
<tr><td>41</td><td>sprites4.py</td><td>oprava chyb nalezených v&nbsp;kódu <strong>sprites3.py</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites4.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>mypy homepage<br />
<a href="https://www.mypy-lang.org/">https://www.mypy-lang.org/</a>
</li>

<li>mypy documentation<br />
<a href="https://mypy.readthedocs.io/en/stable/">https://mypy.readthedocs.io/en/stable/</a>
</li>

<li>Mypy na PyPi Optional static typing for Python<br />
<a href="https://pypi.org/project/mypy/">https://pypi.org/project/mypy/</a>
</li>

<li>5 Reasons Why You Should Use Type Hints In Python<br />
<a href="https://www.youtube.com/watch?v=dgBCEB2jVU0">https://www.youtube.com/watch?v=dgBCEB2jVU0</a>
</li>

<li>Python Typing &ndash; Type Hints &amp; Annotations<br />
<a href="https://www.youtube.com/watch?v=QORvB-_mbZ0">https://www.youtube.com/watch?v=QORvB-_mbZ0</a>
</li>

<li>What Problems Can TypeScript Solve?<br />
<a href="https://www.typescriptlang.org/why-create-typescript">https://www.typescriptlang.org/why-create-typescript</a>
</li>

<li>How to find code that is missing type annotations?<br />
<a href="https://stackoverflow.com/questions/59898490/how-to-find-code-that-is-missing-type-annotations">https://stackoverflow.com/questions/59898490/how-to-find-code-that-is-missing-type-annotations</a>
</li>

<li>Do type annotations in Python enforce static type checking?<br />
<a href="https://stackoverflow.com/questions/54734029/do-type-annotations-in-python-enforce-static-type-checking">https://stackoverflow.com/questions/54734029/do-type-annotations-in-python-enforce-static-type-checking</a>
</li>

<li>Understanding type annotation in Python<br />
<a href="https://blog.logrocket.com/understanding-type-annotation-python/">https://blog.logrocket.com/understanding-type-annotation-python/</a>
</li>

<li>Static type checking with Mypy — Perfect Python<br />
<a href="https://www.youtube.com/watch?v=9gNnhNxra3E">https://www.youtube.com/watch?v=9gNnhNxra3E</a>
</li>

<li>Static Type Checker for Python<br />
<a href="https://github.com/microsoft/pyright">https://github.com/microsoft/pyright</a>
</li>

<li>Differences Between Pyright and Mypy<br />
<a href="https://github.com/microsoft/pyright/blob/main/docs/mypy-comparison.md">https://github.com/microsoft/pyright/blob/main/docs/mypy-comparison.md</a>
</li>

<li>4 Python type checkers to keep your code clean<br />
<a href="https://www.infoworld.com/article/3575079/4-python-type-checkers-to-keep-your-code-clean.html">https://www.infoworld.com/article/3575079/4-python-type-checkers-to-keep-your-code-clean.html</a>
</li>

<li>Pyre: A performant type-checker for Python 3<br />
<a href="https://pyre-check.org/">https://pyre-check.org/</a>
</li>

<li>"Typing the Untyped: Soundness in Gradual Type Systems" by Ben Weissmann<br />
<a href="https://www.youtube.com/watch?v=uJHD2xyv7xo">https://www.youtube.com/watch?v=uJHD2xyv7xo</a>
</li>

<li>Covariance and contravariance (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)">https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)</a>
</li>

<li>Functional Programming: Type Systems<br />
<a href="https://www.youtube.com/watch?v=hy1wjkcIBCU">https://www.youtube.com/watch?v=hy1wjkcIBCU</a>
</li>

<li>A Type System From Scratch – Robert Widmann<br />
<a href="https://www.youtube.com/watch?v=IbjoA5xVUq0">https://www.youtube.com/watch?v=IbjoA5xVUq0</a>
</li>

<li>"Type Systems - The Good, Bad and Ugly" by Paul Snively and Amanda Laucher<br />
<a href="https://www.youtube.com/watch?v=SWTWkYbcWU0">https://www.youtube.com/watch?v=SWTWkYbcWU0</a>
</li>

<li>Type Systems: Covariance, Contravariance, Bivariance, and Invariance explained<br />
<a href="https://medium.com/@thejameskyle/type-systems-covariance-contravariance-bivariance-and-invariance-explained-35f43d1110f8">https://medium.com/@thejameskyle/type-systems-covariance-contravariance-bivariance-and-invariance-explained-35f43d1110f8</a>
</li>

<li>Statická vs. dynamická typová kontrola<br />
<a href="https://www.root.cz/clanky/staticka-dynamicka-typova-kontrola/">https://www.root.cz/clanky/staticka-dynamicka-typova-kontrola/</a>
</li>

<li>Typový systém<br />
<a href="https://cs.wikipedia.org/wiki/Typov%C3%BD_syst%C3%A9m">https://cs.wikipedia.org/wiki/Typov%C3%BD_syst%C3%A9m</a>
</li>

<li>Comparison of programming languages by type system<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_programming_languages_by_type_system">https://en.wikipedia.org/wiki/Comparison_of_programming_languages_by_type_system</a>
</li>

<li>Flow<br />
<a href="https://flow.org/">https://flow.org/</a>
</li>

<li>TypeScript<br />
<a href="https://www.typescriptlang.org/">https://www.typescriptlang.org/</a>
</li>

<li>Sorbet<br />
<a href="https://sorbet.org/">https://sorbet.org/</a>
</li>

<li>Pyright<br />
<a href="https://github.com/microsoft/pyright">https://github.com/microsoft/pyright</a>
</li>

<li>Mypy: Type hints cheat sheet<br />
<a href="https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html">https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html</a>
</li>

<li>PEP 484 – Type Hints<br />
<a href="https://peps.python.org/pep-0484/">https://peps.python.org/pep-0484/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

