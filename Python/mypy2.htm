<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p></p>

<pre>
d = {}

d["foo"] = 1
d["bar"] = 3
d["baz"] = 10

print(d)
</pre>

<pre>
d = {}

d["foo"] = 1
d["bar"] = 3.14
d[10] = 10
d[42] = "answer"

print(d)
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
from typing import Dict, Any
&nbsp;
d:Dict[Any, Any] = {}
&nbsp;
d["foo"] = 1
d["bar"] = 3.14
d[10] = 10
d[42] = "answer"
&nbsp;
print(d)
</pre>

<pre>
from typing import Dict, Any
&nbsp;
d:Dict[str, float] = {}
&nbsp;
d["foo"] = 1
d["bar"] = 3.14
d[10] = 10
d[42] = "answer"
&nbsp;
print(d)
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
def <strong>positive</strong>(x:float) -> bool:
    return x > 0.0


x:bool = positive(0.5)
y:int = positive(42)
z:float = positive(False)
w:str = positive(3)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
from typing import Callable


def <strong>printIsPositive</strong>(x:float, condition:Callable[[float], bool]) -> None:
    if condition(x):
        print("Positive")
    else:
        print("Negative")


def <strong>positiveFloat</strong>(x:float) -> bool:
    return x > 0.0


def <strong>positiveInt</strong>(x:int) -> bool:
    return x > 0


printIsPositive(4, positiveFloat)
printIsPositive(4, positiveInt)
printIsPositive(-0.5, positiveFloat)
printIsPositive(-0.5, positiveInt)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
from typing import Callable


def <strong>printIsPositive</strong>(condition:Callable[[float], bool]) -> None:
    if condition(5):
        print("Positive")
    else:
        print("Negative")


def <strong>positiveFloat</strong>(x:float) -> bool:
    return x > 0.0


def <strong>positiveInt</strong>(x:int) -> bool:
    return x > 0


printIsPositive(positiveFloat)
printIsPositive(positiveInt)
</pre>

<pre>
from typing import Callable


def <strong>printIsPositive</strong>(condition:Callable[[int], bool]) -> None:
    if condition(5):
        print("Positive")
    else:
        print("Negative")


def <strong>positiveFloat</strong>(x:float) -> bool:
    return x > 0.0


def <strong>positiveInt</strong>(x:int) -> bool:
    return x > 0


printIsPositive(positiveFloat)
printIsPositive(positiveInt)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
<i>#!/usr/bin/python</i>
<i># vim: set fileencoding=utf-8</i>

import pygame
import sys

<i># Nutno importovat kvůli konstantám QUIT atd.</i>
from pygame.locals import *

<i># Velikost okna aplikace</i>
WIDTH = 320
HEIGHT = 240


<i># Třída představující sprite zobrazený jako jednobarevný čtverec.</i>
class <strong>BlockySprite</strong>(pygame.sprite.Sprite):
    <i># Konstruktor</i>
    def <strong>__init__</strong>(self, color, size, x, y):
        <i># Nejprve je nutné zavolat konstruktor předka,</i>
        <i># tj. konstruktor třídy pygame.sprite.Sprite:</i>
        pygame.sprite.Sprite.__init__(self)

        <i># Vytvoření obrázku představujícího vizuální obraz spritu:</i>
        self.image = pygame.Surface([size, size])
        self.image.fill(color)

        <i># Vytvoření obalového obdélníku</i>
        <i># (velikost se získá z rozměru obrázku)</i>
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

        <i># Počáteční rychlost spritu</i>
        self.speed_x = 0
        self.speed_y = 0

    <i># Nastavení barvy spritu, který kolidoval s hráčem</i>
    def <strong>yellowColor</strong>(self):
        self.image.fill(YELLOW)

    <i># Nastavení barvy spritu, který nekolidoval s hráčem</i>
    def <strong>grayColor</strong>(self):
        self.image.fill(GRAY)


<i># Inicializace knihovny Pygame</i>
pygame.init()

clock = pygame.time.Clock()

<i># Vytvoření okna pro vykreslování</i>
display = pygame.display.set_mode([WIDTH, HEIGHT])

<i># Nastavení titulku okna</i>
pygame.display.set_caption("Pygame test <i>#22")</i>

<i># Konstanty s n-ticemi představujícími základní barvy</i>
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GRAY = (128, 128, 128)
YELLOW = (255, 255, 0)

<i># Objekt sdružující všechny sprity</i>
all_sprites = pygame.sprite.Group()
<i># Objekt sdružující všechny sprity kromě hráče</i>
all_sprites_but_player = pygame.sprite.Group()

<i># Vytvoření několika typů spritů</i>
<i>#                    barva  x   y velikost</i>
wall1 = BlockySprite(GRAY, 50, 10, 10)
wall2 = BlockySprite(GRAY, 15, 100, 100)
wall3 = BlockySprite(GRAY, 15, 100, 150)
wall4 = BlockySprite(GRAY, 15, 200, 100)
wall5 = BlockySprite(GRAY, 15, 200, 150)
wall6 = BlockySprite(GRAY, 15, 150, 100)
wall7 = BlockySprite(GRAY, 15, 150, 150)
player = BlockySprite(RED, 40, WIDTH / 2 - 20, HEIGHT / 2 - 20)

<i># Přidání několika dalších spritů do seznamu</i>
<i># (jen jeden sprite - ten poslední - bude ve skutečnosti pohyblivý)</i>
all_sprites.add(wall1)
all_sprites.add(wall2)
all_sprites.add(wall3)
all_sprites.add(wall4)
all_sprites.add(wall5)
all_sprites.add(wall6)
all_sprites.add(wall7)
all_sprites.add(player)

<i># Seznam všech nepohyblivých spritů</i>
all_sprites_but_player.add(wall1)
all_sprites_but_player.add(wall2)
all_sprites_but_player.add(wall3)
all_sprites_but_player.add(wall4)
all_sprites_but_player.add(wall5)
all_sprites_but_player.add(wall6)
all_sprites_but_player.add(wall7)


<i># Posun všech spritů ve skupině na základě jejich rychlosti</i>
@profile
def <strong>move_sprites</strong>(sprite_group, playground_width, playground_height):
    for sprite in sprite_group:
        <i># Posun spritu</i>
        sprite.rect.x = sprite.rect.x + sprite.speed_x
        sprite.rect.y = sprite.rect.y + sprite.speed_y
        <i># Kontrola, zda sprite nenarazil do okrajů okna</i>
        if sprite.rect.x &lt; 0:
            sprite.rect.x = 0
            sprite.speed_x = 0
        if sprite.rect.x + sprite.rect.width &gt; playground_width:
            sprite.rect.x = playground_width - sprite.rect.width
            sprite.speed_x = 0
        if sprite.rect.y &lt; 0:
            sprite.rect.y = 0
            sprite.speed_y = 0
        if sprite.rect.y + sprite.rect.height &gt; playground_height:
            sprite.rect.y = playground_height - sprite.rect.height
            sprite.speed_y = 0


<i># Vykreslení celé scény na obrazovku</i>
@profile
def <strong>draw_scene</strong>(display, background_color, sprite_group):
    <i># Vyplnění plochy okna černou barvou</i>
    display.fill(background_color)
    <i># Vykreslení celé skupiny spritů do bufferu</i>
    sprite_group.draw(display)
    <i># Obnovení obsahu obrazovky (překlopení zadního a předního bufferu)</i>
    pygame.display.update()


<i># Změna barvy spritu na základě kolize s hráčem</i>
@profile
def <strong>change_colors</strong>(sprite_group, hit_list):
    <i># Projít všemi sprity ze skupiny, kterou detekovala kolizní funkce</i>
    for sprite in sprite_group:
        if sprite in hit_list:
            sprite.yellowColor()
        else:
            sprite.grayColor()


<i># Zjistí kolize spritu se "stěnami" (nepohyblivými sprity)</i>
@profile
def <strong>check_collisions</strong>(player, sprite_group):
    <i># Vytvoření seznamu spritů, které kolidují s hráčem</i>
    hit_list = pygame.sprite.spritecollide(player, sprite_group, False)
    <i># Změna barev kolidujících spritů</i>
    change_colors(sprite_group, hit_list)
    collisions = len(hit_list)
    <i># Přenastavení titulku okna</i>
    caption = "Pygame test <i>#22: collisions " + str(collisions)</i>
    pygame.display.set_caption(caption)


@profile
def <strong>mainLoop</strong>():
    while True:
        <i># Načtení a zpracování všech událostí z fronty</i>
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    pygame.quit()
                    sys.exit()
                <i># Stiskem kurzorových kláves je možné měnit směr pohybu spritu</i>
                elif event.key == pygame.K_LEFT:
                    player.speed_x = -3
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = +3
                elif event.key == pygame.K_UP:
                    player.speed_y = -3
                elif event.key == pygame.K_DOWN:
                    player.speed_y = +3
            if event.type == KEYUP:
                <i># Puštění kurzorových kláves vede k zastavení pohybu spritu</i>
                if event.key == pygame.K_LEFT:
                    player.speed_x = 0
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = 0
                elif event.key == pygame.K_UP:
                    player.speed_y = 0
                elif event.key == pygame.K_DOWN:
                    player.speed_y = 0

        move_sprites(all_sprites, display.get_width(), display.get_height())
        check_collisions(player, all_sprites_but_player)
        draw_scene(display, BLACK, all_sprites)
        clock.tick(20)


mainLoop()

<i># finito</i>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
<i>#!/usr/bin/python</i>
<i># vim: set fileencoding=utf-8</i>

import pygame
import sys

<i># Nutno importovat kvůli konstantám QUIT atd.</i>
from pygame.locals import *

<i># Velikost okna aplikace</i>
WIDTH = 320
HEIGHT = 240

<i># Konstanty s n-ticemi představujícími základní barvy</i>
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GRAY = (128, 128, 128)
YELLOW = (255, 255, 0)

CAPTION = "Sprites in Pygame"


<i># Třída představující sprite zobrazený jako jednobarevný čtverec.</i>
class <strong>BlockySprite</strong>(pygame.sprite.Sprite):
    <i># Konstruktor</i>
    def <strong>__init__</strong>(self, color, size, x, y):
        <i># Nejprve je nutné zavolat konstruktor předka,</i>
        <i># tj. konstruktor třídy pygame.sprite.Sprite:</i>
        pygame.sprite.Sprite.__init__(self)

        <i># Vytvoření obrázku představujícího vizuální obraz spritu:</i>
        self.image = pygame.Surface([size, size])
        self.image.fill(color)

        <i># Vytvoření obalového obdélníku</i>
        <i># (velikost se získá z rozměru obrázku)</i>
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

        <i># Počáteční rychlost spritu</i>
        self.speed_x = 0
        self.speed_y = 0

    <i># Nastavení barvy spritu, který kolidoval s hráčem</i>
    def <strong>yellowColor</strong>(self):
        self.image.fill(YELLOW)

    <i># Nastavení barvy spritu, který nekolidoval s hráčem</i>
    def <strong>grayColor</strong>(self):
        self.image.fill(GRAY)


def <strong>initDisplay</strong>(caption):
    <i># Vytvoření okna pro vykreslování</i>
    display = pygame.display.set_mode([WIDTH, HEIGHT])

    <i># Nastavení titulku okna</i>
    pygame.display.set_caption(caption)

    return display


def <strong>createSprites</strong>():
    <i># Objekt sdružující všechny sprity</i>
    all_sprites = pygame.sprite.Group()

    <i># Objekt sdružující všechny sprity kromě hráče</i>
    all_sprites_but_player = pygame.sprite.Group()

    <i># Vytvoření několika typů spritů</i>
    <i>#                    barva  x   y velikost</i>
    wall1 = BlockySprite(GRAY, 50, 10, 10)
    wall2 = BlockySprite(GRAY, 15, 100, 100)
    wall3 = BlockySprite(GRAY, 15, 100, 150)
    wall4 = BlockySprite(GRAY, 15, 200, 100)
    wall5 = BlockySprite(GRAY, 15, 200, 150)
    wall6 = BlockySprite(GRAY, 15, 150, 100)
    wall7 = BlockySprite(GRAY, 15, 150, 150)
    player = BlockySprite(RED, 40, WIDTH / 2 - 20, HEIGHT / 2 - 20)

    <i># Přidání několika dalších spritů do seznamu</i>
    <i># (jen jeden sprite - ten poslední - bude ve skutečnosti pohyblivý)</i>
    all_sprites.add(wall1)
    all_sprites.add(wall2)
    all_sprites.add(wall3)
    all_sprites.add(wall4)
    all_sprites.add(wall5)
    all_sprites.add(wall6)
    all_sprites.add(wall7)
    all_sprites.add(player)

    <i># Seznam všech nepohyblivých spritů</i>
    all_sprites_but_player.add(wall1)
    all_sprites_but_player.add(wall2)
    all_sprites_but_player.add(wall3)
    all_sprites_but_player.add(wall4)
    all_sprites_but_player.add(wall5)
    all_sprites_but_player.add(wall6)
    all_sprites_but_player.add(wall7)

    return all_sprites, all_sprites_but_player, player


<i># Posun všech spritů ve skupině na základě jejich rychlosti</i>
def <strong>move_sprites</strong>(sprite_group, playground_width, playground_height):
    for sprite in sprite_group:
        <i># Posun spritu</i>
        sprite.rect.x = sprite.rect.x + sprite.speed_x
        sprite.rect.y = sprite.rect.y + sprite.speed_y
        <i># Kontrola, zda sprite nenarazil do okrajů okna</i>
        if sprite.rect.x &lt; 0:
            sprite.rect.x = 0
            sprite.speed_x = 0
        if sprite.rect.x + sprite.rect.width &gt; playground_width:
            sprite.rect.x = playground_width - sprite.rect.width
            sprite.speed_x = 0
        if sprite.rect.y &lt; 0:
            sprite.rect.y = 0
            sprite.speed_y = 0
        if sprite.rect.y + sprite.rect.height &gt; playground_height:
            sprite.rect.y = playground_height - sprite.rect.height
            sprite.speed_y = 0


<i># Vykreslení celé scény na obrazovku</i>
def <strong>draw_scene</strong>(display, background_color, sprite_group):
    <i># Vyplnění plochy okna černou barvou</i>
    display.fill(background_color)
    <i># Vykreslení celé skupiny spritů do bufferu</i>
    sprite_group.draw(display)
    <i># Obnovení obsahu obrazovky (překlopení zadního a předního bufferu)</i>
    pygame.display.update()


<i># Změna barvy spritu na základě kolize s hráčem</i>
def <strong>change_colors</strong>(sprite_group, hit_list):
    <i># Projít všemi sprity ze skupiny, kterou detekovala kolizní funkce</i>
    for sprite in sprite_group:
        if sprite in hit_list:
            sprite.yellowColor()
        else:
            sprite.grayColor()


<i># Zjistí kolize spritu se "stěnami" (nepohyblivými sprity)</i>
def <strong>check_collisions</strong>(player, sprite_group):
    <i># Vytvoření seznamu spritů, které kolidují s hráčem</i>
    hit_list = pygame.sprite.spritecollide(player, sprite_group, False)
    <i># Změna barev kolidujících spritů</i>
    change_colors(sprite_group, hit_list)
    collisions = len(hit_list)
    <i># Přenastavení titulku okna</i>
    caption = CAPTION + ": collisions " + str(collisions)
    pygame.display.set_caption(caption)


def <strong>mainLoop</strong>(display, clock, all_sprites, all_sprites_but_player, player):
    while True:
        <i># Načtení a zpracování všech událostí z fronty</i>
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    pygame.quit()
                    sys.exit()
                <i># Stiskem kurzorových kláves je možné měnit směr pohybu spritu</i>
                elif event.key == pygame.K_LEFT:
                    player.speed_x = -3
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = +3
                elif event.key == pygame.K_UP:
                    player.speed_y = -3
                elif event.key == pygame.K_DOWN:
                    player.speed_y = +3
            if event.type == KEYUP:
                <i># Puštění kurzorových kláves vede k zastavení pohybu spritu</i>
                if event.key == pygame.K_LEFT:
                    player.speed_x = 0
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = 0
                elif event.key == pygame.K_UP:
                    player.speed_y = 0
                elif event.key == pygame.K_DOWN:
                    player.speed_y = 0

        move_sprites(all_sprites, display.get_width(), display.get_height())
        check_collisions(player, all_sprites_but_player)
        draw_scene(display, BLACK, all_sprites)
        clock.tick(20)


def <strong>main</strong>():
    <i># Inicializace knihovny Pygame</i>
    pygame.init()

    clock = pygame.time.Clock()
    display = initDisplay(CAPTION)

    all_sprites, all_sprites_but_player, player = createSprites()

    mainLoop(display, clock, all_sprites, all_sprites_but_player, player)


if __name__ == "__main__":
    main()


<i># finito</i>
</pre>

<p></p>

<pre>
sprites2.py:26: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:46: error: Function is missing a return type annotation  [no-untyped-def]
sprites2.py:46: note: Use "-&gt; None" if function does not return a value
sprites2.py:50: error: Function is missing a return type annotation  [no-untyped-def]
sprites2.py:50: note: Use "-&gt; None" if function does not return a value
sprites2.py:54: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:64: error: Function is missing a return type annotation  [no-untyped-def]
sprites2.py:106: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:127: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:137: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:147: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:158: error: Function is missing a type annotation  [no-untyped-def]
sprites2.py:195: error: Function is missing a return type annotation  [no-untyped-def]
sprites2.py:195: note: Use "-&gt; None" if function does not return a value
sprites2.py:208: error: Call to untyped function "main" in typed context  [no-untyped-call]
Found 12 errors in 1 file (checked 1 source file)
</pre>


<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
<i>#!/usr/bin/python</i>
<i># vim: set fileencoding=utf-8</i>

from typing import NewType, Tuple, List, Any

import pygame
import sys

<i># Nutno importovat kvůli konstantám QUIT atd.</i>
from pygame.locals import *

<i># Velikost okna aplikace</i>
WIDTH = 320
HEIGHT = 240

<i># Konstanty s n-ticemi představujícími základní barvy</i>
BLACK: Tuple[int, int, int] = (0, 0, 0)
RED: Tuple[int, int, int] = (255, 0, 0)
GRAY: Tuple[int, int, int] = (128, 128, 128)
YELLOW: Tuple[int, int, int] = (255, 255, 0)

CAPTION = "Sprites in Pygame"


<i># Třída představující sprite zobrazený jako jednobarevný čtverec.</i>
class <strong>BlockySprite</strong>(pygame.sprite.Sprite):
    <i># Konstruktor</i>
    def <strong>__init__</strong>(self, color: Tuple[int, int, int], size: int, x: int, y: int):
        <i># Nejprve je nutné zavolat konstruktor předka,</i>
        <i># tj. konstruktor třídy pygame.sprite.Sprite:</i>
        pygame.sprite.Sprite.__init__(self)

        <i># Vytvoření obrázku představujícího vizuální obraz spritu:</i>
        self.image = pygame.Surface([size, size])
        self.image.fill(color)

        <i># Vytvoření obalového obdélníku</i>
        <i># (velikost se získá z rozměru obrázku)</i>
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

        <i># Počáteční rychlost spritu</i>
        self.speed_x = 0
        self.speed_y = 0

    <i># Nastavení barvy spritu, který kolidoval s hráčem</i>
    def <strong>yellowColor</strong>(self) -&gt; None:
        self.image.fill(YELLOW)

    <i># Nastavení barvy spritu, který nekolidoval s hráčem</i>
    def <strong>grayColor</strong>(self) -&gt; None:
        self.image.fill(GRAY)


def <strong>initDisplay</strong>(caption: str) -&gt; pygame.Surface:
    <i># Vytvoření okna pro vykreslování</i>
    display = pygame.display.set_mode([WIDTH, HEIGHT])

    <i># Nastavení titulku okna</i>
    pygame.display.set_caption(caption)

    return display


def <strong>createSprites</strong>() -&gt; Tuple[pygame.sprite.Group, pygame.sprite.Group, BlockySprite]:
    <i># Objekt sdružující všechny sprity</i>
    all_sprites: pygame.sprite.Group = pygame.sprite.Group()

    <i># Objekt sdružující všechny sprity kromě hráče</i>
    all_sprites_but_player: pygame.sprite.Group = pygame.sprite.Group()

    <i># Vytvoření několika typů spritů</i>
    <i>#                    barva  x   y velikost</i>
    wall1 = BlockySprite(GRAY, 50, 10, 10)
    wall2 = BlockySprite(GRAY, 15, 100, 100)
    wall3 = BlockySprite(GRAY, 15, 100, 150)
    wall4 = BlockySprite(GRAY, 15, 200, 100)
    wall5 = BlockySprite(GRAY, 15, 200, 150)
    wall6 = BlockySprite(GRAY, 15, 150, 100)
    wall7 = BlockySprite(GRAY, 15, 150, 150)
    player = BlockySprite(RED, 40, WIDTH / 2 - 20, HEIGHT / 2 - 20)

    <i># Přidání několika dalších spritů do seznamu</i>
    <i># (jen jeden sprite - ten poslední - bude ve skutečnosti pohyblivý)</i>
    all_sprites.add(wall1)
    all_sprites.add(wall2)
    all_sprites.add(wall3)
    all_sprites.add(wall4)
    all_sprites.add(wall5)
    all_sprites.add(wall6)
    all_sprites.add(wall7)
    all_sprites.add(player)

    <i># Seznam všech nepohyblivých spritů</i>
    all_sprites_but_player.add(wall1)
    all_sprites_but_player.add(wall2)
    all_sprites_but_player.add(wall3)
    all_sprites_but_player.add(wall4)
    all_sprites_but_player.add(wall5)
    all_sprites_but_player.add(wall6)
    all_sprites_but_player.add(wall7)

    return all_sprites, all_sprites_but_player, player


<i># Posun všech spritů ve skupině na základě jejich rychlosti</i>
def <strong>move_sprites</strong>(sprite_group: pygame.sprite.Group, playground_width: int, playground_height:int) -&gt; None:
    for sprite in sprite_group:
        <i># Posun spritu</i>
        sprite.rect.x = sprite.rect.x + sprite.speed_x
        sprite.rect.y = sprite.rect.y + sprite.speed_y
        <i># Kontrola, zda sprite nenarazil do okrajů okna</i>
        if sprite.rect.x &lt; 0:
            sprite.rect.x = 0
            sprite.speed_x = 0
        if sprite.rect.x + sprite.rect.width &gt; playground_width:
            sprite.rect.x = playground_width - sprite.rect.width
            sprite.speed_x = 0
        if sprite.rect.y &lt; 0:
            sprite.rect.y = 0
            sprite.speed_y = 0
        if sprite.rect.y + sprite.rect.height &gt; playground_height:
            sprite.rect.y = playground_height - sprite.rect.height
            sprite.speed_y = 0


<i># Vykreslení celé scény na obrazovku</i>
def <strong>draw_scene</strong>(display: pygame.Surface, background_color: Tuple[int, int, int], sprite_group: pygame.sprite.Group) -&gt; None:
    <i># Vyplnění plochy okna černou barvou</i>
    display.fill(background_color)
    <i># Vykreslení celé skupiny spritů do bufferu</i>
    sprite_group.draw(display)
    <i># Obnovení obsahu obrazovky (překlopení zadního a předního bufferu)</i>
    pygame.display.update()


<i># Změna barvy spritu na základě kolize s hráčem</i>
def <strong>change_colors</strong>(sprite_group: pygame.sprite.Group, hit_list: List[pygame.sprite.Sprite]) -&gt; None:
    <i># Projít všemi sprity ze skupiny, kterou detekovala kolizní funkce</i>
    for sprite in sprite_group:
        if sprite in hit_list:
            sprite.yellowColor()
        else:
            sprite.grayColor()


<i># Zjistí kolize spritu se "stěnami" (nepohyblivými sprity)</i>
def <strong>check_collisions</strong>(player: BlockySprite, sprite_group: pygame.sprite.Group) -&gt; None:
    <i># Vytvoření seznamu spritů, které kolidují s hráčem</i>
    hit_list = pygame.sprite.spritecollide(player, sprite_group, False)
    <i># Změna barev kolidujících spritů</i>
    change_colors(sprite_group, hit_list)
    collisions = len(hit_list)
    <i># Přenastavení titulku okna</i>
    caption = CAPTION + ": collisions " + str(collisions)
    pygame.display.set_caption(caption)


def <strong>mainLoop</strong>(display: pygame.Surface, clock: pygame.time.Clock,
        all_sprites: pygame.sprite.Group,
        all_sprites_but_player: pygame.sprite.Group, player: BlockySprite) -&gt; None:
    while True:
        <i># Načtení a zpracování všech událostí z fronty</i>
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    pygame.quit()
                    sys.exit()
                <i># Stiskem kurzorových kláves je možné měnit směr pohybu spritu</i>
                elif event.key == pygame.K_LEFT:
                    player.speed_x = -3
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = +3
                elif event.key == pygame.K_UP:
                    player.speed_y = -3
                elif event.key == pygame.K_DOWN:
                    player.speed_y = +3
            if event.type == KEYUP:
                <i># Puštění kurzorových kláves vede k zastavení pohybu spritu</i>
                if event.key == pygame.K_LEFT:
                    player.speed_x = 0
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = 0
                elif event.key == pygame.K_UP:
                    player.speed_y = 0
                elif event.key == pygame.K_DOWN:
                    player.speed_y = 0

        move_sprites(all_sprites, display.get_width(), display.get_height())
        check_collisions(player, all_sprites_but_player)
        draw_scene(display, BLACK, all_sprites)
        clock.tick(20)


def <strong>main</strong>() -&gt; None:
    <i># Inicializace knihovny Pygame</i>
    pygame.init()

    clock = pygame.time.Clock()
    display = initDisplay(CAPTION)

    all_sprites, all_sprites_but_player, player = createSprites()

    mainLoop(display, clock, all_sprites, all_sprites_but_player, player)


if __name__ == "__main__":
    main()


<i># finito</i>
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
sprites3.py:82: error: Argument 3 to "BlockySprite" has incompatible type "float"; expected "int"  [arg-type]
sprites3.py:82: error: Argument 4 to "BlockySprite" has incompatible type "float"; expected "int"  [arg-type]
Found 2 errors in 1 file (checked 1 source file)
</pre>

<pre>
</pre>

<pre>
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<pre>
<i>#!/usr/bin/python</i>
<i># vim: set fileencoding=utf-8</i>

from typing import NewType, Tuple, List, Any

import pygame
import sys

<i># Nutno importovat kvůli konstantám QUIT atd.</i>
from pygame.locals import *

<i># Velikost okna aplikace</i>
WIDTH = 320
HEIGHT = 240

<i># Konstanty s n-ticemi představujícími základní barvy</i>
BLACK: Tuple[int, int, int] = (0, 0, 0)
RED: Tuple[int, int, int] = (255, 0, 0)
GRAY: Tuple[int, int, int] = (128, 128, 128)
YELLOW: Tuple[int, int, int] = (255, 255, 0)

CAPTION = "Sprites in Pygame"


<i># Třída představující sprite zobrazený jako jednobarevný čtverec.</i>
class <strong>BlockySprite</strong>(pygame.sprite.Sprite):
    <i># Konstruktor</i>
    def <strong>__init__</strong>(self, color: Tuple[int, int, int], size: int, x: int, y: int):
        <i># Nejprve je nutné zavolat konstruktor předka,</i>
        <i># tj. konstruktor třídy pygame.sprite.Sprite:</i>
        pygame.sprite.Sprite.__init__(self)

        <i># Vytvoření obrázku představujícího vizuální obraz spritu:</i>
        self.image = pygame.Surface([size, size])
        self.image.fill(color)

        <i># Vytvoření obalového obdélníku</i>
        <i># (velikost se získá z rozměru obrázku)</i>
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

        <i># Počáteční rychlost spritu</i>
        self.speed_x = 0
        self.speed_y = 0

    <i># Nastavení barvy spritu, který kolidoval s hráčem</i>
    def <strong>yellowColor</strong>(self) -&gt; None:
        self.image.fill(YELLOW)

    <i># Nastavení barvy spritu, který nekolidoval s hráčem</i>
    def <strong>grayColor</strong>(self) -&gt; None:
        self.image.fill(GRAY)


def <strong>initDisplay</strong>(caption: str) -&gt; pygame.Surface:
    <i># Vytvoření okna pro vykreslování</i>
    display = pygame.display.set_mode([WIDTH, HEIGHT])

    <i># Nastavení titulku okna</i>
    pygame.display.set_caption(caption)

    return display


def <strong>createSprites</strong>() -&gt; Tuple[pygame.sprite.Group, pygame.sprite.Group, BlockySprite]:
    <i># Objekt sdružující všechny sprity</i>
    all_sprites: pygame.sprite.Group = pygame.sprite.Group()

    <i># Objekt sdružující všechny sprity kromě hráče</i>
    all_sprites_but_player: pygame.sprite.Group = pygame.sprite.Group()

    <i># Vytvoření několika typů spritů</i>
    <i>#                    barva  x   y velikost</i>
    wall1 = BlockySprite(GRAY, 50, 10, 10)
    wall2 = BlockySprite(GRAY, 15, 100, 100)
    wall3 = BlockySprite(GRAY, 15, 100, 150)
    wall4 = BlockySprite(GRAY, 15, 200, 100)
    wall5 = BlockySprite(GRAY, 15, 200, 150)
    wall6 = BlockySprite(GRAY, 15, 150, 100)
    wall7 = BlockySprite(GRAY, 15, 150, 150)
    player = BlockySprite(RED, 40, WIDTH // 2 - 20, HEIGHT // 2 - 20)

    <i># Přidání několika dalších spritů do seznamu</i>
    <i># (jen jeden sprite - ten poslední - bude ve skutečnosti pohyblivý)</i>
    all_sprites.add(wall1)
    all_sprites.add(wall2)
    all_sprites.add(wall3)
    all_sprites.add(wall4)
    all_sprites.add(wall5)
    all_sprites.add(wall6)
    all_sprites.add(wall7)
    all_sprites.add(player)

    <i># Seznam všech nepohyblivých spritů</i>
    all_sprites_but_player.add(wall1)
    all_sprites_but_player.add(wall2)
    all_sprites_but_player.add(wall3)
    all_sprites_but_player.add(wall4)
    all_sprites_but_player.add(wall5)
    all_sprites_but_player.add(wall6)
    all_sprites_but_player.add(wall7)

    return all_sprites, all_sprites_but_player, player


<i># Posun všech spritů ve skupině na základě jejich rychlosti</i>
def <strong>move_sprites</strong>(sprite_group: pygame.sprite.Group, playground_width: int, playground_height:int) -&gt; None:
    for sprite in sprite_group:
        <i># Posun spritu</i>
        sprite.rect.x = sprite.rect.x + sprite.speed_x
        sprite.rect.y = sprite.rect.y + sprite.speed_y
        <i># Kontrola, zda sprite nenarazil do okrajů okna</i>
        if sprite.rect.x &lt; 0:
            sprite.rect.x = 0
            sprite.speed_x = 0
        if sprite.rect.x + sprite.rect.width &gt; playground_width:
            sprite.rect.x = playground_width - sprite.rect.width
            sprite.speed_x = 0
        if sprite.rect.y &lt; 0:
            sprite.rect.y = 0
            sprite.speed_y = 0
        if sprite.rect.y + sprite.rect.height &gt; playground_height:
            sprite.rect.y = playground_height - sprite.rect.height
            sprite.speed_y = 0


<i># Vykreslení celé scény na obrazovku</i>
def <strong>draw_scene</strong>(display: pygame.Surface, background_color: Tuple[int, int, int], sprite_group: pygame.sprite.Group) -&gt; None:
    <i># Vyplnění plochy okna černou barvou</i>
    display.fill(background_color)
    <i># Vykreslení celé skupiny spritů do bufferu</i>
    sprite_group.draw(display)
    <i># Obnovení obsahu obrazovky (překlopení zadního a předního bufferu)</i>
    pygame.display.update()


<i># Změna barvy spritu na základě kolize s hráčem</i>
def <strong>change_colors</strong>(sprite_group: pygame.sprite.Group, hit_list: List[pygame.sprite.Sprite]) -&gt; None:
    <i># Projít všemi sprity ze skupiny, kterou detekovala kolizní funkce</i>
    for sprite in sprite_group:
        if sprite in hit_list:
            sprite.yellowColor()
        else:
            sprite.grayColor()


<i># Zjistí kolize spritu se "stěnami" (nepohyblivými sprity)</i>
def <strong>check_collisions</strong>(player: BlockySprite, sprite_group: pygame.sprite.Group) -&gt; None:
    <i># Vytvoření seznamu spritů, které kolidují s hráčem</i>
    hit_list = pygame.sprite.spritecollide(player, sprite_group, False)
    <i># Změna barev kolidujících spritů</i>
    change_colors(sprite_group, hit_list)
    collisions = len(hit_list)
    <i># Přenastavení titulku okna</i>
    caption = CAPTION + ": collisions " + str(collisions)
    pygame.display.set_caption(caption)


def <strong>mainLoop</strong>(display: pygame.Surface, clock: pygame.time.Clock,
        all_sprites: pygame.sprite.Group,
        all_sprites_but_player: pygame.sprite.Group, player: BlockySprite) -&gt; None:
    while True:
        <i># Načtení a zpracování všech událostí z fronty</i>
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    pygame.quit()
                    sys.exit()
                <i># Stiskem kurzorových kláves je možné měnit směr pohybu spritu</i>
                elif event.key == pygame.K_LEFT:
                    player.speed_x = -3
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = +3
                elif event.key == pygame.K_UP:
                    player.speed_y = -3
                elif event.key == pygame.K_DOWN:
                    player.speed_y = +3
            if event.type == KEYUP:
                <i># Puštění kurzorových kláves vede k zastavení pohybu spritu</i>
                if event.key == pygame.K_LEFT:
                    player.speed_x = 0
                elif event.key == pygame.K_RIGHT:
                    player.speed_x = 0
                elif event.key == pygame.K_UP:
                    player.speed_y = 0
                elif event.key == pygame.K_DOWN:
                    player.speed_y = 0

        move_sprites(all_sprites, display.get_width(), display.get_height())
        check_collisions(player, all_sprites_but_player)
        draw_scene(display, BLACK, all_sprites)
        clock.tick(20)


def <strong>main</strong>() -&gt; None:
    <i># Inicializace knihovny Pygame</i>
    pygame.init()

    clock = pygame.time.Clock()
    display = initDisplay(CAPTION)

    all_sprites, all_sprites_but_player, player = createSprites()

    mainLoop(display, clock, all_sprites, all_sprites_but_player, player)


if __name__ == "__main__":
    main()


<i># finito</i>
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty, které jsme si v&nbsp;dnešním článku ukázali,
naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je nutné mít
nainstalován balíček <i>mypy</i>):</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>adder1.py</td><td>funkce <strong>add</strong> bez typových anotací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder1.py</a></td></tr>
<tr><td> 2</td><td>adder2.py</td><td>funkce <strong>add</strong> s&nbsp;typovými anotacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder2.py</a></td></tr>
<tr><td> 3</td><td>adder3.py</td><td>funkce <strong>add</strong> volaná s&nbsp;hodnotami <strong>True</strong> a <strong>False</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder3.py</a></td></tr>
<tr><td> 4</td><td>adder4.py</td><td>funkce <strong>add</strong> akceptující hodnoty typu <strong>bool</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder4.py</a></td></tr>
<tr><td> 5</td><td>adder5.py</td><td>zobrazení typových informací pro funkci bez typových anotací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder5.py</a></td></tr>
<tr><td> 6</td><td>adder6.py</td><td>zobrazení typových informací pro funkci s&nbsp;typovými anotacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>exec_problem_1.py</td><td>funkce <strong>add</strong> s&nbsp;typovými anotacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_1.py</a></td></tr>
<tr><td> 6</td><td>exec_problem_2.py</td><td>korektní detekce volání funkce <strong>add</strong> s&nbsp;nekompatibilními hodnotami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_2.py</a></td></tr>
<tr><td> 7</td><td>exec_problem_3.py</td><td>příkaz použitý v&nbsp;<strong>exec</strong> není statickým analyzátorem zachycen</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>list_type1.py</td><td>typ seznam, s&nbsp;inicializací (bez prvků), pro Python 3.10</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type1.py</a></td></tr>
<tr><td> 9</td><td>list_type2.py</td><td>typ seznam, s&nbsp;inicializací (bez prvků), pro starší verze Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type2.py</a></td></tr>
<tr><td>10</td><td>list_type3.py</td><td>typ seznam, s&nbsp;inicializací (s&nbsp;prvky), pro starší verze Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type3.py</a></td></tr>
<tr><td>11</td><td>list_type4.py</td><td>typ seznam, kontrola použití prvků s&nbsp;nekorektními typy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type4.py</a></td></tr>
<tr><td>12</td><td>list_type5.py</td><td>typ seznam, kontrola použití prvků s&nbsp;korektními typy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type5.py</a></td></tr>
<tr><td>13</td><td>list_type6.py</td><td>typ seznam, kontrola použití prvků s&nbsp;korektními typy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>14</td><td>tuple_type1.py</td><td>typ n-tice (nekorektní specifikace typu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type1.py</a></td></tr>
<tr><td>15</td><td>tuple_type2.py</td><td>typ n-tice (korektní specifikace typu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type2.py</a></td></tr>
<tr><td>16</td><td>tuple_type3.py</td><td>typ n-tice, v&nbsp;níž má každý prvek odlišný typ</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type3.py</a></td></tr>
<tr><td>17</td><td>tuple_type4.py</td><td>typ n-tice, v&nbsp;níž má každý prvek odlišný typ</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>json_check.py</td><td>delší kód v&nbsp;Pythonu bez typových anotací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/json_check.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/json_check.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>Variance1.java</td><td>variance v&nbsp;Javě &ndash; korektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.java">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.java</a></td></tr>
<tr><td>20</td><td>Variance2.java</td><td>variance v&nbsp;Javě &ndash; nekorektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.java">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.java</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>Variance1.py</td><td>variance v&nbsp;Pythonu &ndash; korektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.py</a></td></tr>
<tr><td>22</td><td>Variance2.py</td><td>variance v&nbsp;Pythonu &ndash; nekorektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.py</a></td></tr>
<tr><td>23</td><td>Variance3.py</td><td>variance v&nbsp;Pythonu &ndash; nekorektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance3.py</a></td></tr>
<tr><td>24</td><td>Variance4.py</td><td>použití typu <strong>Sequence</strong> namísto <strong>List</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>25</td><td>view_pyc.py</td><td>jednoduchá prohlížečka souborů .pyc</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/view_pyc.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/view_pyc.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>27</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>28</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>29</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>30</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>31</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>mypy homepage<br />
<a href="https://www.mypy-lang.org/">https://www.mypy-lang.org/</a>
</li>

<li>mypy documentation<br />
<a href="https://mypy.readthedocs.io/en/stable/">https://mypy.readthedocs.io/en/stable/</a>
</li>

<li>Mypy na PyPi Optional static typing for Python<br />
<a href="https://pypi.org/project/mypy/">https://pypi.org/project/mypy/</a>
</li>

<li>5 Reasons Why You Should Use Type Hints In Python<br />
<a href="https://www.youtube.com/watch?v=dgBCEB2jVU0">https://www.youtube.com/watch?v=dgBCEB2jVU0</a>
</li>

<li>Python Typing &ndash; Type Hints &amp; Annotations<br />
<a href="https://www.youtube.com/watch?v=QORvB-_mbZ0">https://www.youtube.com/watch?v=QORvB-_mbZ0</a>
</li>

<li>What Problems Can TypeScript Solve?<br />
<a href="https://www.typescriptlang.org/why-create-typescript">https://www.typescriptlang.org/why-create-typescript</a>
</li>

<li>How to find code that is missing type annotations?<br />
<a href="https://stackoverflow.com/questions/59898490/how-to-find-code-that-is-missing-type-annotations">https://stackoverflow.com/questions/59898490/how-to-find-code-that-is-missing-type-annotations</a>
</li>

<li>Do type annotations in Python enforce static type checking?<br />
<a href="https://stackoverflow.com/questions/54734029/do-type-annotations-in-python-enforce-static-type-checking">https://stackoverflow.com/questions/54734029/do-type-annotations-in-python-enforce-static-type-checking</a>
</li>

<li>Understanding type annotation in Python<br />
<a href="https://blog.logrocket.com/understanding-type-annotation-python/">https://blog.logrocket.com/understanding-type-annotation-python/</a>
</li>

<li>Static type checking with Mypy — Perfect Python<br />
<a href="https://www.youtube.com/watch?v=9gNnhNxra3E">https://www.youtube.com/watch?v=9gNnhNxra3E</a>
</li>

<li>Static Type Checker for Python<br />
<a href="https://github.com/microsoft/pyright">https://github.com/microsoft/pyright</a>
</li>

<li>Differences Between Pyright and Mypy<br />
<a href="https://github.com/microsoft/pyright/blob/main/docs/mypy-comparison.md">https://github.com/microsoft/pyright/blob/main/docs/mypy-comparison.md</a>
</li>

<li>4 Python type checkers to keep your code clean<br />
<a href="https://www.infoworld.com/article/3575079/4-python-type-checkers-to-keep-your-code-clean.html">https://www.infoworld.com/article/3575079/4-python-type-checkers-to-keep-your-code-clean.html</a>
</li>

<li>Pyre: A performant type-checker for Python 3<br />
<a href="https://pyre-check.org/">https://pyre-check.org/</a>
</li>

<li>"Typing the Untyped: Soundness in Gradual Type Systems" by Ben Weissmann<br />
<a href="https://www.youtube.com/watch?v=uJHD2xyv7xo">https://www.youtube.com/watch?v=uJHD2xyv7xo</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

