<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Projekt py2many: dokončení</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Projekt py2many: dokončení</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na článek o &bdquo;univerzálním&ldquo; transpileru py2many dnes navážeme a dokončíme popis možností a schopností tohoto nástroje. Ukážeme si způsob překladu konstrukcí async a await, try a except, použití pattern matchingu i překlad kódů s definicí tříd.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Projekt py2many: dokončení</a></p>
<p><a href="#k02">2. Skript s&nbsp;konstrukcemi <strong>async</strong> a <strong>await</strong></a></p>
<p><a href="#k03">3. Překlad konstrukcí <strong>async</strong> a <strong>await</strong> do dalších jazyků</a></p>
<p><a href="#k04">4. Základní konstrukce s&nbsp;pattern matchingem v&nbsp;Pythonu</a></p>
<p><a href="#k05">5. Překlad pattern matchingu do dalších jazyků</a></p>
<p><a href="#k06">6. Programové bloky <strong>try-except</strong> v&nbsp;Pythonu</a></p>
<p><a href="#k07">7. Překlad bloku <strong>try-except</strong> do dalších jazyků</a></p>
<p><a href="#k08">8. Podpora objektově orientovaného programování v&nbsp;Pythonu</a></p>
<p><a href="#k09">9. Definice třídy s&nbsp;několika metodami v&nbsp;Pythonu</a></p>
<p><a href="#k10">10. Překlad definice třídy do dalších programovacích jazyků</a></p>
<p><a href="#k11">11. Definice třídy se speciálními metodami</a></p>
<p><a href="#k12">12. Překlad třídy se speciálními metodami do dalších jazyků</a></p>
<p><a href="#k13">13. Definice třídy, vytvoření instancí třídy, nepřímé volání speciálních metod</a></p>
<p><a href="#k14">14. Překlad třídy i s&nbsp;její instanciací a voláním speciálních metod</a></p>
<p><a href="#k15">15. Definice třídy s&nbsp;doplněním všech typových informací</a></p>
<p><a href="#k16">16. Překlad třídy s&nbsp;doplněnými typovými informacemi</a></p>
<p><a href="#k17">17. Doplněná tabulka se srovnáním úspěchu transpřekladu jednotlivých příkladů</a></p>
<p><a href="#k18">18. Závěrečné zhodnocení</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Projekt py2many: dokončení</h2>

<p>Jak již bylo napsáno v&nbsp;perexu dnešního článku, navážeme na <a
href="https://www.root.cz/clanky/projekt-py2many-transpiler-pythonu-do-dalsich-programovacich-jazyku/">úvodní
článek</a> o do jisté míry univerzálním transpileru <strong>py2many</strong>,
který dokáže (či by alespoň měl dokázat) překládat programy psané
v&nbsp;Pythonu do dalších jazyků, a to včetně C++, Rustu, Go či jazyka Julia.
Zatímco minule jsme si ukázali způsoby překladu základních programových
konstrukcí, dnes se zaměříme na ukázky překladu jazykových konstrukcí pro
asynchronní programování (<strong>async</strong> a <strong>await</strong>),
překladu bloků pro zachycení výjimek (<strong>try</strong> a
<strong>except</strong> resp.&nbsp;<strong>catch</strong>), ale i na použití
<i>pattern matchingu</i>. Nezapomeneme ani na další důležitou součást jazyka
Python &ndash; na podporu objektově orientovaného programování založeného na
využití tříd.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Skript s&nbsp;konstrukcemi <strong>async</strong> a <strong>await</strong></h2>

<p>U některých typů aplikací se setkáme s&nbsp;tím, že je nutné volat určité
části kódu pro několik požadavků současně či alespoň souběžně. Využití vláken
je v&nbsp;Pythonu obecně (stále) problematické kvůli GILu, ovšem alternativní
řešení těchto problémů může spočívat v&nbsp;tom, že nějakou vhodnou technologií
umožníme asynchronní vykonávání kódu v&nbsp;těch okamžicích, v&nbsp;nichž jsou
jiné části kódu pozastaveny, protože čekají na dokončení nějakých
vstupně-výstupních operací. Naprosto typickým příkladem jsou některé virtuální
stroje JavaScriptu, které povětšinou umožňují běh aplikace pouze v&nbsp;jediném
vláknu, ale i v&nbsp;takových případech je <i>pro některé typy operací</i>
umožněno zajistit souběh několika operací. Jak do JavaScriptu, tak i později do
Pythonu byla přidána nová klíčová slova <strong>async</strong> a
<strong>await</strong>, která asynchronní operace umožní naprogramovat.</p>

<p>Bude tedy užitečné zjistit, jak a zda vůbec se tyto konstrukce přeloží do
dalších programovacích jazyků. Použijeme přitom následující skript, který
ukazuje způsob realizace asynchronně běžící úlohy:</p>

<h3>async_await.py</h3>

<pre>
<u>async</u> def <strong>task</strong>():
    print("task started")
    <u>await</u> asyncio.sleep(5)
    print("task finished")
&nbsp;
&nbsp;
def <strong>main</strong>():
    task1 = asyncio.create_task(task())
    print("task created")
    <u>await</u> task1
    print("done")
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Překlad konstrukcí <strong>async</strong> a <strong>await</strong> do dalších jazyků</h2>

<p>Podívejme se na způsob překladu výše uvedeného skriptu:</p>

<h3>async_await.cpp</h3>

<pre>
FAILED
</pre>

<p><div class="rs-tip-major">Poznámka: k&nbsp;tomuto výsledku není co dodat :)</div></p>


<h3>async_await.go</h3>

<pre>
package main
&nbsp;
import (
"fmt")
&nbsp;
&nbsp;
&nbsp;
#[async]
func task() {
fmt.Printf("%v\n","task started");
await!(asyncio.sleep(5));
fmt.Printf("%v\n","task finished");}
&nbsp;
&nbsp;
func Main() {
task1 := asyncio.create_task(task())
fmt.Printf("%v\n","task created");
await!(task1);
fmt.Printf("%v\n","done");}
&nbsp;
&nbsp;
</pre>

<p><div class="rs-tip-major">Poznámka: popravdě je to poprvé, co vidím znak
<strong>!</strong> použitý v&nbsp;identifikátoru jazyka Go. Výsledek je podle
očekávání nepřeložitelný.</div></p>


<h3>async_await.jl</h3>

<pre>
#[async]
function task()
println(join(["task started"], " "));
await!(sleep(asyncio, 5));
println(join(["task finished"], " "));
end
&nbsp;
function main()
task1 = create_task(asyncio, task())
println(join(["task created"], " "));
await!(task1);
println(join(["done"], " "));
end
&nbsp;
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti se používá makro
<strong>@async</strong> pro vytvoření asynchronní úlohy. A podle očekávání není
<strong>await!</strong> definovaný symbol.</div></p>


<h3>async_await.rs</h3>

<pre>
//! ```cargo
//! [package]
//! edition = "2018"
//! [dependencies]
//!
//! ```
&nbsp;
#![allow(clippy::collapsible_else_if)]
#![allow(clippy::double_parens)] // https://github.com/adsharma/py2many/issues/17
#![allow(clippy::map_identity)]
#![allow(clippy::needless_return)]
#![allow(clippy::print_literal)]
#![allow(clippy::ptr_arg)]
#![allow(clippy::redundant_static_lifetimes)] // https://github.com/adsharma/py2many/issues/266
#![allow(clippy::unnecessary_cast)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::useless_vec)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(unused_parens)]
&nbsp;
pub async fn task() {
    println!("{}", "task started");
    asyncio.sleep(5).await;
    println!("{}", "task finished");
}
&nbsp;
pub fn main() {
    let task1 = asyncio.create_task(task());
    println!("{}", "task created");
    task1.await;
    println!("{}", "done");
}
</pre>

<p><div class="rs-tip-major">Poznámka: minimálně snaha je zde patrná &ndash;
<strong>task</strong> je asynchronní (v&nbsp;Rustu 2015) funkcí; na druhou
stranu <strong>await</strong> v&nbsp;této podobě nelze použít. To je škoda,
protože řešení by zde mělo být možné navrhnout.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Základní konstrukce s&nbsp;pattern matchingem v&nbsp;Pythonu</h2>

<p>Podívejme se na další (stále možná poněkud specifickou) vlastnost
programovacího jazyka Python. Tento jazyk totiž podporuje (relativně
jednoduchou) formu <i>pattern matchingu</i>. V&nbsp;té naprosto nejjednodušší
podobě může pattern matching nahradit sérii podmínek
<strong>if-elseif-elseif...</strong>. A právě tuto formu pattern matchingu si
otestujeme na &bdquo;školním&ldquo; příkladu pro výpočet faktoriálu:</p>

<h3>pattern_matching_factorial.py</h3>

<pre>
def <strong>factorial</strong>(n):
    <u>match</u> n:
        <u>case</u> 0:
            return 1
        <u>case</u> 1:
            return 1
        <u>case</u> x:
            return x * factorial(x-1)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Překlad pattern matchingu do dalších jazyků</h2>

<p>A jak dopadne překlad tohoto skriptu do dalších programovacích jazyků? Nyní to bude rychlá kontrola:</p>

<h3>pattern_matching_factorial.cpp</h3>

<pre>
FAILED
</pre>

<p><div class="rs-tip-major">Poznámka: bez komentáře.</div></p>

<h3>pattern_matching_factorial.go</h3>

<pre>
FAILED
</pre>

<p><div class="rs-tip-major">Poznámka: bez komentáře.</div></p>

<h3>pattern_matching_factorial.jl</h3>

<pre>
FAILED
</pre>

<p><div class="rs-tip-major">Poznámka: bez komentáře.</div></p>

<h3>pattern_matching_factorial.rs</h3>

<pre>
FAILED
</pre>

<p><div class="rs-tip-major">Poznámka: bez komentáře.</div></p>

<p>Mimochodem &ndash; problém spočívá v&nbsp;tom, že pattern matching není
(alespoň prozatím) nástrojem <strong>py2many</strong> podporován, takže
příslušné uzly v&nbsp;AST stromu nejsou rozpoznány. Toto chování je patrné
z&nbsp;chybových hlášení vypisovaných při pokusu o (trans)překlad:</p>

<pre>
pattern_matching_factorial.py ... pattern_matching_factorial.cpp
pattern_matching_factorial.py:1:0: py2many.exceptions.AstNotImplementedError: sequence item 0: expected str instance, NoneType found
pattern_matching_factorial.py ... pattern_matching_factorial.rs
pattern_matching_factorial.py:1:0: py2many.exceptions.AstNotImplementedError: sequence item 0: expected str instance, NoneType found
Error: ['rustfmt', '--edition=2018', 'pattern_matching_factorial.rs'] (code: 1):
b'error: expected one of `!` or `::`, found `&lt;eof&gt;`\n --&gt; /home/ptisnovs/xy/pattern_matching_factorial.rs:1:1\n  |\n1 | FAILED\n  | ^^^^^^ expected one of `!` or `::`\n\n'b''
pattern_matching_factorial.py ... pattern_matching_factorial.jl
pattern_matching_factorial.py:1:0: py2many.exceptions.AstNotImplementedError: sequence item 0: expected str instance, NoneType found
Error: Could not format: pattern_matching_factorial.jl
Due to: FileNotFoundError [Errno 2] No such file or directory: 'format.jl'
pattern_matching_factorial.py ... pattern_matching_factorial.go
pattern_matching_factorial.py:1:0: py2many.exceptions.AstNotImplementedError: sequence item 0: expected str instance, NoneType found
Error: ['gofmt', '-w', 'pattern_matching_factorial.go'] (code: 2):
b"pattern_matching_factorial.go:1:1: expected 'package', found FAILED\n"b''
</pre>

<p><div class="rs-tip-major">Poznámka: a to je škoda, protože minimálně
v&nbsp;případě Rustu by se mohlo jednat o pěknou a užitečnou
vlastnost.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Programové bloky <strong>try-except</strong> v&nbsp;Pythonu</h2>

<p>Další programovou konstrukcí, kterou v&nbsp;programovacím jazyku Python
nalezneme a která se velmi často používá, je podpora pro zachycení výjimek
v&nbsp;bloku <strong>try-except</strong>. V&nbsp;moderním Pythonu může být
tento blok poměrně komplikovaný (zachycení skupiny výjimek atd.), ovšem
prozatím si ukažme jeho zcela nejprimitivnější podobu, v&nbsp;níž zachytíme
pokus o dělení nulou a namísto chyby vrátíme zvolenou konstantu (taktéž nulu).
Funkce s&nbsp;tímto blokem bude plně otypována:</p>

<h3>safe_div.py</h3>

<pre>
def <strong>safe_div</strong>(x: int, y: int) -&gt; int:
    try:
        return x//y
    except Exception:
        return 0
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Překlad bloku <strong>try-except</strong> do dalších jazyků</h2>

<p>Jak si s&nbsp;blokem <strong>try-except</strong> poradil transpiler
<strong>py2many</strong> je zřejmé z&nbsp;okomentovaných výsledků
transpřekladu:</p>

<h3>safe_div.cpp</h3>

<pre>
#include &lt;iostream&gt; // NOLINT(build/include_order)
inline int safe_div(int x, int y) {
  try {
    return x / y;
  } catch (const std::exception &amp;e) {
    ExceptHandler /*unimplemented()*/
  } catch (const std::overflow_error &amp;e) {
    std::cout &lt;&lt; "OVERFLOW ERROR" &lt;&lt; std::endl;
  } catch (const std::runtime_error &amp;e) {
    std::cout &lt;&lt; "RUNTIME ERROR" &lt;&lt; std::endl;
  } catch (...) {
    std::cout &lt;&lt; "UNKNOWN ERROR" &lt;&lt; std::endl;
    0
  }
}
</pre>

<p><div class="rs-tip-major">Poznámka: zajímavé je, že bloky
<strong>catch</strong> nejsou uvedeny ve správném pořadí, takže první blok bude
použit pro zachycení všech výjimek. Ovšem v&nbsp;dalších ohledech řešení
odpovídá původnímu kódu.</div></p>


<h3>safe_div.go</h3>

<pre>
FAILED
</pre>

<p><div class="rs-tip-major">Poznámka: bez komentáře :-)</div></p>

<h3>safe_div.jl</h3>

<pre>
function safe_div(x::Int64, y::Int64)::Int64
    try
        return x / y
    catch exn
        if exn isa Exception
            return 0
        end
    end
end
&nbsp;
</pre>

<p><div class="rs-tip-major">Poznámka: zde se ve skutečnosti nezachytí korektní výjimka, protože se vyhodí <i>InexactError(NaN)</i> a nikoli dělení nulou. Příklad je tedy sémanticky nekorektní.</div></p>

<h3>safe_div.rs</h3>

<pre>
FAILED
</pre>

<p><div class="rs-tip-major">Poznámka: bez komentáře :-)</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Podpora objektově orientovaného programování v&nbsp;Pythonu</h2>

<p>Programovací jazyk Python patří do skupiny jazyků podporujících objektově
orientované programování (<i>OOP</i>) založené na třídách. To znamená, že
základní vlastnosti objektu (zde konkrétně dostupné metody a popř.&nbsp;třídní
atributy) jsou definovány ve třídě a objekt je vytvořen zavoláním konstruktoru
příslušné třídy. A i některé další programovací jazyky, zejména C++, takto
pojaté objektově orientované programování podporují.</p>

<p>Ovšem na druhou stranu další jazyky, které nás v&nbsp;kontextu dnešního
článku zajímají, naopak &bdquo;třídní OOP&ldquo; nemají. Sem spadá jazyk Go (má
podporu pro rozhraní a metody, nikoli pro třídy), Julia (zaměřeno spíše na
multiple dispatching) i Rust (podporuje <i>traity</i>, což je sémanticky
poněkud odlišná technologie). Proto bude zajímavé zjistit, jakým způsobem se
vlastně přeloží popř.&nbsp;naopak nepřeloží kód naprogramovaný v&nbsp;Pythonu,
který obsahuje deklaraci třídy s&nbsp;několika metodami i konstruktorem
(poněkud nepřesně zde považuji speciální metodu <strong>__init__</strong> za
konstruktor), třídy se speciálními metodami atd.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Definice třídy s&nbsp;několika metodami v&nbsp;Pythonu</h2>

<p>Nejprve se podívejme na velmi jednoduchou třídu, která obsahuje definici
konstruktoru a dvou běžných metod nazvaných <strong>on_visit</strong> a
<strong>on_leave</strong>. Jedná se o nestatické a netřídní metody:</p>

<h3>visitor.py</h3>

<pre>
class <strong>Visitor</strong>():
    def <strong>__init__</strong>(self):
        self.nest_level = 0
&nbsp;
    def <strong>on_visit</strong>(self, text):
        indent = " " * self.nest_level * 2
        print(indent, text)
        self.nest_level += 1
&nbsp;
    def <strong>on_leave</strong>(self, node):
        self.nest_level -= 1
</pre>

<p><div class="rs-tip-major">Poznámka: mimochodem &ndash; tato třída o jisté
míry implementuje návrhový vzor <i>visitor</i>.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Překlad definice třídy do dalších programovacích jazyků</h2>

<h3>visitor.cpp</h3>

<pre>
#include &lt;iostream&gt; // NOLINT(build/include_order)
class Visitor {
public:
  int nest_level;
&nbsp;
  inline void __init__() { int this-&gt;nest_level = 0; }
&nbsp;
  template &lt;typename T0&gt; void on_visit(T0 text) {
    std::string indent = (std::string{" "} * (this-&gt;nest_level)) * 2;
    std::cout &lt;&lt; indent;
    std::cout &lt;&lt; " ";
    std::cout &lt;&lt; text;
    std::cout &lt;&lt; std::endl;
    this-&gt;nest_level += 1;
  }
&nbsp;
  template &lt;typename T0&gt; void on_leave(T0 node) { this-&gt;nest_level -= 1; }
};
</pre>

<p><div class="rs-tip-major">Poznámka: poněkud mě překvapilo použití šablon,
ale to je způsobeno tím, že v&nbsp;původní třídě není deklarován typ parametru
metody <strong>on_visit</strong>. Tento kód může sloužit jako základ pro další
úpravy.</div></p>


<h3>visitor.go</h3>

<pre>
FAILED
</pre>

<p><div class="rs-tip-major">Poznámka: bez komentáře :-)</div></p>

<h3>visitor.jl</h3>

<pre>
struct Visitor
    nest_level::Int64
end
&nbsp;
function __init__(self::Visitor)
    self.nest_level = 0
end
&nbsp;
function on_visit{T0}(self::Visitor, text::T0)
    indent = " "*self.nest_level*2
    println(join([indent, text], " "));
    self.nest_level += 1
end
&nbsp;
function on_leave{T0}(self::Visitor, node::T0)
    self.nest_level -= 1
end
&nbsp;
</pre>

<p><div class="rs-tip-major">Poznámka: platí podobné výtky jako v&nbsp;případě
jazyka C++ &ndash; kvůli chybějícím typovým informacím není výsledek
spustitelný a vyžaduje další explicitní úpravy. O problematice přetížení
operátoru * se ještě zmíníme v&nbsp;dalších kapitolách.</div></p>


<h3>visitor.rs</h3>

<pre>
//! ```cargo
//! [package]
//! edition = "2018"
//! [dependencies]
//!
//! ```
&nbsp;
#![allow(clippy::collapsible_else_if)]
#![allow(clippy::double_parens)] // https://github.com/adsharma/py2many/issues/17
#![allow(clippy::map_identity)]
#![allow(clippy::needless_return)]
#![allow(clippy::print_literal)]
#![allow(clippy::ptr_arg)]
#![allow(clippy::redundant_static_lifetimes)] // https://github.com/adsharma/py2many/issues/266
#![allow(clippy::unnecessary_cast)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::useless_vec)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(unused_parens)]
&nbsp;
pub struct Visitor {
    pub nest_level: i32,
}
&nbsp;
impl Visitor {
    pub fn __init__(&amp;self) {
        self.nest_level = 0;
    }
&nbsp;
    pub fn on_visit&lt;T0&gt;(&amp;self, text: T0) {
        pub const indent: &amp;str = ((" " * self.nest_level) * 2);
        println!("{} {}", indent, text);
        self.nest_level += 1;
    }
&nbsp;
    pub fn on_leave&lt;T0&gt;(&amp;self, node: T0) {
        self.nest_level -= 1;
    }
}
</pre>

<p><div class="rs-tip-major">Poznámka: nebyl pochopen význam operátoru *, takže
si překladač Rustu správně stěžuje na kombinaci řetězců s&nbsp;čísly. Taktéž
Rust nedovoluje zápis do atributu <strong>nest_level</strong>, protože parametr
<strong>self</strong> není předáván s&nbsp;modifikátorem
<strong>mut</strong>.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Definice třídy se speciálními metodami</h2>

<p>I v&nbsp;dalším demonstračním příkladu bude použita definice třídy
v&nbsp;Pythonu. Tentokrát však bude třída kromě konstruktoru, což je vlastně
speciálně pojmenovaná metoda, obsahovat i další dvě metody se speciálním
významem. První z&nbsp;těchto metod se jmenuje <strong>__add__</strong> a
slouží pro definici chování binárního operátoru +. Druhá speciální metoda se
jmenuje <strong>__str__</strong> a volá se ve chvíli, kdy je nutné objekt
reprezentovat formou řetězce. Podívejme se tedy na zdrojový kód takové
třídy:</p>

<h3>add_method_1.py</h3>

<pre>
class <strong>Foo</strong>:
    def <strong>__init__</strong>(self, value):
        self._value = value
&nbsp;
    def <strong>__add__</strong>(self, other):
        return Foo(self._value + other._value)
&nbsp;
    def <strong>__str__</strong>(self):
        return "*" * self._value
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si použití operátoru * pro
opakování řetězce ve speciální metodě <strong>__str__</strong>. I tento prvek
Pythonu je pro transpiler problematický.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Překlad třídy se speciálními metodami do dalších jazyků</h2>

<p>Při (trans)překladu výše uvedeného zdrojového kódu můžeme předpokládat, že
realizace v&nbsp;programovacím jazyce C++ by měla být (minimálně) možná,
protože C++ podporuje třídní OOP. V&nbsp;dalších jazycích se ovšem bude
pravděpodobně postupovat stylem &bdquo;best effort&ldquo; a výsledek nebude
přeložitelný a někdy ani sémanticky totožný.</p>

<h3>add_method_1.cpp</h3>

<pre>
class Foo {
public:
  auto _value;
&nbsp;
  template &lt;typename T0&gt; void __init__(T0 value) { auto this-&gt;_value = value; }
&nbsp;
  template &lt;typename T0&gt; Foo __add__(T0 other) {
    return Foo((this-&gt;_value) + (other._value));
  }
&nbsp;
  inline std::string __str__() { return std::string{"*"} * (this-&gt;_value); }
};
</pre>

<p><div class="rs-tip-major">Poznámka: až na několik nepatrných problémů se
vlastně jedná o dobré řešení.</div></p>

<h3>add_method_1.go</h3>

<pre>
package main
&nbsp;
&nbsp;
&nbsp;
&nbsp;
type Foo struct {
_value ST0
}
func __init__[T0 any](self Foo, value T0 any) {
self._value = value}
&nbsp;
&nbsp;
func __add__[T0 any](self Foo, other T0 any) Foo {
return Foo{_value: (self._value + other._value)}}
&nbsp;
&nbsp;
func __str__(self Foo) string {
return ("*"*self._value)}
&nbsp;
&nbsp;
&nbsp;
</pre>

<p><div class="rs-tip-major">Poznámka: zde transpřekladač v&nbsp;první řadě
nepochopil význam operátoru &bdquo;násobení řetězce&ldquo;. Ovšem opět se jedná
o poměrně dobře vytvořenou šablonu, kterou je však nutné ručně
doladit, aby byla přeložitelná a spustitelná.</div></p>


<h3>add_method_1.jl</h3>

<pre>
struct Foo
    _value::
end
&nbsp;
function __init__{T0}(self::Foo, value::T0)
    self._value = value
end
&nbsp;
function __add__{T0}(self::Foo, other::T0)::Foo
    return Foo(self._value + other._value)
end
&nbsp;
function __str__(self::Foo)::String
    return "*"*self._value
end
&nbsp;
</pre>

<p><div class="rs-tip-major">Poznámka: třídní OOP není v&nbsp;programovacím
jazyce Julia použito, metody jsou nahrazeny funkcemi. Opět zde došlo
k&nbsp;nepochopení významu operátoru &bdquo;násobení řetězců&ldquo; a významu
speciálních metod.</div></p>


<h3>add_method_1.rs</h3>

<pre>
//! ```cargo
//! [package]
//! edition = "2018"
//! [dependencies]
//!
//! ```
&nbsp;
#![allow(clippy::collapsible_else_if)]
#![allow(clippy::double_parens)] // https://github.com/adsharma/py2many/issues/17
#![allow(clippy::map_identity)]
#![allow(clippy::needless_return)]
#![allow(clippy::print_literal)]
#![allow(clippy::ptr_arg)]
#![allow(clippy::redundant_static_lifetimes)] // https://github.com/adsharma/py2many/issues/266
#![allow(clippy::unnecessary_cast)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::useless_vec)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(unused_parens)]
&nbsp;
pub struct Foo {
    pub _value: _,
}
&nbsp;
impl Foo {
    pub fn __init__&lt;T0&gt;(&amp;self, value: T0) {
        self._value = value;
    }
&nbsp;
    pub fn __add__&lt;T0&gt;(&amp;self, other: T0) -&gt; Foo {
        return Foo {
            _value: (self._value + other._value),
        };
    }
&nbsp;
    pub fn __str__(&amp;self) -&gt; &amp;'static str {
        return ("*" * self._value) as &amp;'static str;
    }
}
</pre>

<p><div class="rs-tip-major">Poznámka: je nutné doplnit datové typy, vyřešit
problém s&nbsp;operátorem + (<strong>operator+</strong>) i * atd., ovšem jako
základní kostra řešení je tento kód poměrně dobře použitelný.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Definice třídy, vytvoření instancí třídy, nepřímé volání speciálních metod</h2>

<p>Nyní si vyzkoušejme zdrojový kód s&nbsp;definicí třídy <strong>Foo</strong>
upravit takovým způsobem, že do něj přidáme pomocnou funkci, ve které se
vytvoří dvě instance této třídy, tyto instance se sečtou (zavolá se tedy
speciální metoda <strong>__add__</strong>) a výsledek se vypíše ve formě
řetězce (zavolá se tedy speciální metoda <strong>__str__</strong>).
V&nbsp;samotném Pythonu lze tento algoritmus zapsat přímočaře:</p>

<h3>add_method_2.py</h3>

<pre>
class <strong>Foo</strong>:
    def <strong>__init__</strong>(self, value):
        self._value = value
&nbsp;
    def <strong>__add__</strong>(self, other):
        return Foo(self._value + other._value)
&nbsp;
    def <strong>__str__</strong>(self):
        return "*" * self._value
&nbsp;
&nbsp;
def <strong>test_adding</strong>():
    f1 = Foo(1)
    f2 = Foo(2)
&nbsp;
    print(f1 + f2)
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Překlad třídy i s&nbsp;její instanciací a voláním speciálních metod</h2>

<h3>add_method_2.cpp</h3>

<pre>
#include &lt;iostream&gt; // NOLINT(build/include_order)
class Foo {
public:
  auto _value;
&nbsp;
  template &lt;typename T0&gt; void __init__(T0 value) { auto this-&gt;_value = value; }
&nbsp;
  template &lt;typename T0&gt; Foo __add__(T0 other) {
    return Foo((this-&gt;_value) + (other._value));
  }
&nbsp;
  inline std::string __str__() { return std::string{"*"} * (this-&gt;_value); }
};
&nbsp;
inline void test_adding() {
  Foo f1 = Foo(1);
  Foo f2 = Foo(2);
  std::cout &lt;&lt; f1 + f2;
  std::cout &lt;&lt; std::endl;
}
</pre>

<p><div class="rs-tip-major">Poznámka: po transpřekladu do programovacího
jazyka C++ je patrné, že se ztratil význam speciálních metod, takže se sice
posléze vyhodnocuje výraz <strong>f1 + f2</strong>, ovšem to pochopitelně není
platné. Taktéž se (což nás ovšem již nepřekvapí) ztratil význam operátoru
*.</div></p>

<h3>add_method_2.go</h3>


<pre>
package main
&nbsp;
import (
"fmt")
&nbsp;
&nbsp;
&nbsp;
type Foo struct {
_value ST0
}
func __init__[T0 any](self Foo, value T0 any) {
self._value = value}
&nbsp;
&nbsp;
func __add__[T0 any](self Foo, other T0 any) Foo {
return Foo{_value: (self._value + other._value)}}
&nbsp;
&nbsp;
func __str__(self Foo) string {
return ("*"*self._value)}
&nbsp;
&nbsp;
&nbsp;
func TestAdding() {
var f1 Foo = Foo{_value: 1}
var f2 Foo = Foo{_value: 2}
fmt.Printf("%v\n",(f1 + f2));}
&nbsp;
&nbsp;
</pre>

<p><div class="rs-tip-major">Poznámka: nepřeložitelné (podle očekávání) a
současně i sémanticky nevyhovující. Zdrojové kódy s&nbsp;třídami evidentně
nejsou nástrojem <strong>py2many</strong> ani jazykem Go příliš
podporovány.</div></p>


<h3>add_method_2.jl</h3>

<pre>
struct Foo
    _value::
end
&nbsp;
function __init__{T0}(self::Foo, value::T0)
    self._value = value
end
&nbsp;
function __add__{T0}(self::Foo, other::T0)::Foo
    return Foo(self._value + other._value)
end
&nbsp;
function __str__(self::Foo)::String
    return "*"*self._value
end
&nbsp;
function test_adding()
    f1 = Foo(1)
    f2 = Foo(2)
    println(join([f1 + f2], " "));
end
&nbsp;
</pre>

<p><div class="rs-tip-major">Poznámka: opět zde vidíme relativně dobře použitou
šablonu, ovšem příklad vyžaduje další specifické ruční úpravy.</div></p>


<h3>add_method_2.rs</h3>

<pre>
//! ```cargo
//! [package]
//! edition = "2018"
//! [dependencies]
//!
//! ```
&nbsp;
#![allow(clippy::collapsible_else_if)]
#![allow(clippy::double_parens)] // https://github.com/adsharma/py2many/issues/17
#![allow(clippy::map_identity)]
#![allow(clippy::needless_return)]
#![allow(clippy::print_literal)]
#![allow(clippy::ptr_arg)]
#![allow(clippy::redundant_static_lifetimes)] // https://github.com/adsharma/py2many/issues/266
#![allow(clippy::unnecessary_cast)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::useless_vec)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(unused_parens)]
&nbsp;
pub struct Foo {
    pub _value: _,
}
&nbsp;
impl Foo {
    pub fn __init__&lt;T0&gt;(&amp;self, value: T0) {
        self._value = value;
    }
&nbsp;
    pub fn __add__&lt;T0&gt;(&amp;self, other: T0) -&gt; Foo {
        return Foo {
            _value: (self._value + other._value),
        };
    }
&nbsp;
    pub fn __str__(&amp;self) -&gt; &amp;'static str {
        return ("*" * self._value) as &amp;'static str;
    }
}
pub fn test_adding() {
    let f1: Foo = Foo { _value: 1 };
    let f2: Foo = Foo { _value: 2 };
    println!("{}", (f1 + f2));
}
</pre>

<p><div class="rs-tip-major">Poznámka: základní kostra programu je
v&nbsp;pořádku a pravděpodobně by vše bylo ještě lepší, kdybychom použili
typové anotace (což si vyzkoušíme v&nbsp;rámci dalšího textu). Bez typových
anotací je totiž výsledný zdrojový kód nepřeložitelný (nekompatibilní
<strong>operator+</strong> atd.).</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Definice třídy s&nbsp;doplněním všech typových informací</h2>

<p>V&nbsp;posledním demonstračním příkladu, který si v&nbsp;dnešním článku
ukážeme, rozšíříme deklaraci naší třídy o typové informace. To by mělo pomoci
především při překladu do jazyků se statickým typovým systémem (stále jsou však
použity speciální metody atd.):</p>

<h3>add_method_3.py</h3>

<pre>
class <strong>Foo</strong>:
    def __init__(self, value: int):
        self._value = value
&nbsp;
    def <strong>__add__</strong>(self, other: Foo) -&gt; Foo:
        return Foo(self._value + other._value)
&nbsp;
    def <strong>__str__</strong>(self) -&gt; str:
        return "*" * self._value
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Překlad třídy s&nbsp;doplněnými typovými informacemi</h2>

<h3>add_method_3.cpp</h3>

<pre>
class Foo {
public:
  int _value;
&nbsp;
  inline void __init__(int value) { int this-&gt;_value = value; }
&nbsp;
  inline Foo __add__(Foo other) { return Foo((this-&gt;_value) + (other._value)); }
&nbsp;
  inline std::string __str__() { return std::string{"*"} * (this-&gt;_value); }
};
</pre>

<p><div class="rs-tip-major">Poznámka: příklad sice obsahuje části, které budou
vyžadovat ruční úpravy, ale nyní se již jedná o poměrně dobře čitelný a
upravovatelný kód.</div></p>


<h3>add_method_3.go</h3>

<pre>
package main
&nbsp;
type Foo struct {
	_value int
}
&nbsp;
func __init__(self Foo, value int) {
	self._value = value
}
&nbsp;
func __add__(self Foo, other Foo) Foo {
	return Foo{_value: (self._value + other._value)}
}
&nbsp;
func __str__(self Foo) string {
	return ("*" * self._value)
}
</pre>

<p><div class="rs-tip-major">Poznámka: až na nerozepsání funkce operátoru * pro
opakování řetězce je tento zdrojový kód v&nbsp;pořádku. Typové informace zde
velmi pomohly.</div></p>

<h3>add_method_3.jl</h3>

<pre>
struct Foo
    _value::Int64
end
&nbsp;
function __init__(self::Foo, value::Int64)
    self._value = value
end
&nbsp;
function __add__(self::Foo, other::Foo)::Foo
    return Foo(self._value + other._value)
end
&nbsp;
function __str__(self::Foo)::String
    return "*"*self._value
end
&nbsp;
</pre>

<p><div class="rs-tip-major">Poznámka: opět prakticky bezproblémové řešení,
samozřejmě až na to, že zde není použit OOP přístup založený na
třídách.</div></p>


<h3>add_method_3.rs</h3>

<pre>
//! ```cargo
//! [package]
//! edition = "2018"
//! [dependencies]
//!
//! ```
&nbsp;
#![allow(clippy::collapsible_else_if)]
#![allow(clippy::double_parens)] // https://github.com/adsharma/py2many/issues/17
#![allow(clippy::map_identity)]
#![allow(clippy::needless_return)]
#![allow(clippy::print_literal)]
#![allow(clippy::ptr_arg)]
#![allow(clippy::redundant_static_lifetimes)] // https://github.com/adsharma/py2many/issues/266
#![allow(clippy::unnecessary_cast)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::useless_vec)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(unused_parens)]
&nbsp;
pub struct Foo {
    pub _value: i32,
}
&nbsp;
impl Foo {
    pub fn __init__(&amp;self, value: i32) {
        self._value = value;
    }
&nbsp;
    pub fn __add__(&amp;self, other: Foo) -&gt; Foo {
        return Foo {
            _value: (self._value + other._value),
        };
    }
&nbsp;
    pub fn __str__(&amp;self) -&gt; &amp;str {
        return ("*" * self._value);
    }
}
</pre>

<p><div class="rs-tip-major">Poznámka: jediný problém spočívá (opět)
v&nbsp;nerozeznání funkce operátoru *, ovšem jinak se jedná o korektní
kód.</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Doplněná tabulka se srovnáním úspěchu transpřekladu jednotlivých příkladů</h2>

<p><a
href="https://www.root.cz/clanky/projekt-py2many-transpiler-pythonu-do-dalsich-programovacich-jazyku/#k18">Již
minule</a> jsme mohli vidět, že některé výsledky transpilace jsou nevalné. Dnes
si tabulku doplníme o informace o tom, jak dobře či špatně jsou transpřekládány
další programové konstrukce Pythonu. Hodnoty &times; a &#2713; mají zřejmý
význam, hodnota 1/2 pak představuje řešení, které sice není přímo přeložitelné
a spustitelné, ale není zcela špatné – malým ručním zásahem je možné
transpilované zdrojové kódy opravit:</p>



<table>
<tr><th>Program</th><th>Testuje se</th><th>C++</th><th>Go</th><th>Julia</th><th>Rust</th></tr>
<tr><td>hello.py</td><td>jednotlivý příkaz mimo funkci</td><td>×</td><td>×</td><td>✓</td><td>×</td></tr>
<tr><td>hello_func<sub>2</sub>.py</td><td>definice samostatné funkce</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr>
<tr><td>hello_func.py</td><td>definice funkce s jejím voláním</td><td>×</td><td>×</td><td>✓</td><td>×</td></tr>
<tr><td>factorial.py</td><td>definice funkce bez typových informací</td><td>×</td><td>×</td><td>×</td><td>×</td></tr>
<tr><td>ackermann_untyped.py</td><td>Ackermannova funkce definovaná bez datových typů</td><td>✓</td><td>×</td><td>1/2</td><td>?</td></tr>
<tr><td>ackermann_typed.py</td><td>Ackermannova funkce definovaná s datovými typy</td><td>✓</td><td>✓</td><td>1/2</td><td>✓</td></tr>
<tr><td>bubble.py</td><td>realizace algoritmu bublinkového řazení</td><td>×</td><td>×</td><td>1/2</td><td>1/2</td></tr>
<tr><td>list_untyped.py</td><td>konstrukce a naplnění seznamu; bez typů</td><td>1/2</td><td>×</td><td>1/2</td><td>1/2</td></tr>
<tr><td>list_typed.py</td><td>konstrukce a naplnění seznamu; s typy</td><td>1/2</td><td>1/2</td><td>1/2</td><td>1/2</td></tr>
<tr><td>async_await.py</td><td>konstrukce <strong>async</strong> a <strong>await</strong></td><td>×</td><td>×</td><td>×</td><td>1/2</td></tr>
<tr><td>pattern_matching_factorial.py</td><td> základní pattern matching<td>×</td><td>×</td><td>×</td><td>×</td></td></tr>
<tr><td>safe_div.py</td><td>funkce s blokem <strong>try-except</strong></td><td>1/2</td><td>×</td><td>×</td><td>×</td></tr>
<tr><td>visitor.py</td><td>třída s&nbsp;metodami</td><td>1/2</td><td>×</td><td>1/2</td><td>1/2</td></tr>
<tr><td>add_method_1.py</td><td>třída se speciálními metodami</td><td>1/2</td><td>1/2</td><td>1/2</td><td>1/2</td></tr>
<tr><td>add_method_2.py</td><td>třída se speciálními metodami</td><td>1/2</td><td>1/2</td><td>1/2</td><td>1/2</td></tr>
<tr><td>add_method_3.py</td><td>třída s&nbsp;doplněnými typovými informacemi</td><td>1/2</td><td>1/2</td><td>1/2</td><td>1/2</td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Závěrečné zhodnocení</h2>

<p>Ani zdaleka jsme si neukázali všechny jazykové konstrukce Pythonu ani způsob
jejich (trans)překladu do dalších jazyků podporovaných nástrojem
<strong>py2many</strong>, ovšem už ze základních ukázek je patrné, že se tento
nástroj v&nbsp;současnosti nehodí na transpilaci celých projektů. Výsledné kódy
v&nbsp;některých případech poměrně dobře odpovídají Pythonu, jindy však
<strong>py2many</strong> dosti halucinuje (to je nyní moderní slovo, kterým se
mávnutím ruky tak trošku zpochybňují nedostatky AI) a některé jazykové
konstrukce nejsou přeloženy vůbec, i když by to mělo být možné. Navíc pro
Python pravděpodobně neexistuje sofistikovanější nástroj z&nbsp;této skupiny,
takže je nutné si buď vystačit s&nbsp;<strong>py2many</strong> nebo transpilaci
přímo přes AST/CST neprovádět. Navíc je při transpřekladu prakticky nutné
používat typové anotace (hinty), které mají i další výhody, zejména pro
rozsáhlejší projekty.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python a pro nástroj <strong>py2many</strong> byly uloženy
do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>hello.py</td><td>jednotlivý příkaz volaný mimo funkci nebo metodu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello.py</a></td></tr>
<tr><td> 2</td><td>hello.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello.cpp</a></td></tr>
<tr><td> 3</td><td>hello.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello.go</a></td></tr>
<tr><td> 4</td><td>hello.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello.jl</a></td></tr>
<tr><td> 5</td><td>hello.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello.rs</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>hello_func2.py</td><td>definice samostatné funkce bez jejího volání</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func2.py</a></td></tr>
<tr><td> 7</td><td>hello_func2.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func2.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func2.cpp</a></td></tr>
<tr><td> 8</td><td>hello_func2.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func2.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func2.go</a></td></tr>
<tr><td> 9</td><td>hello_func2.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func2.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func2.jl</a></td></tr>
<tr><td>10</td><td>hello_func2.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func2.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func2.rs</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>hello_func.py</td><td>definice funkce s&nbsp;jejím voláním</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func.py</a></td></tr>
<tr><td>12</td><td>hello_func.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func.cpp</a></td></tr>
<tr><td>13</td><td>hello_func.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func.go</a></td></tr>
<tr><td>14</td><td>hello_func.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func.jl</a></td></tr>
<tr><td>15</td><td>hello_func.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/hello_func.rs</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>factorial.py</td><td>definice složitější funkce bez typových informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/factorial.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/factorial.py</a></td></tr>
<tr><td>17</td><td>factorial.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/factorial.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/factorial.cpp</a></td></tr>
<tr><td>18</td><td>factorial.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/factorial.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/factorial.go</a></td></tr>
<tr><td>19</td><td>factorial.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/factorial.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/factorial.jl</a></td></tr>
<tr><td>20</td><td>factorial.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/factorial.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/factorial.rs</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>ackermann_untyped.py</td><td>Ackermannova funkce definovaná bez datových typů (hintů)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_untyped.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_untyped.py</a></td></tr>
<tr><td>22</td><td>ackermann_untyped.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_untyped.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_untyped.cpp</a></td></tr>
<tr><td>23</td><td>ackermann_untyped.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_untyped.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_untyped.go</a></td></tr>
<tr><td>24</td><td>ackermann_untyped.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_untyped.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_untyped.jl</a></td></tr>
<tr><td>25</td><td>ackermann_untyped.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_untyped.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_untyped.rs</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>ackermann_typed.py</td><td>Ackermannova funkce definovaná s&nbsp;datovými typy (hinty)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_typed.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_typed.py</a></td></tr>
<tr><td>27</td><td>ackermann_typed.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_typed.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_typed.cpp</a></td></tr>
<tr><td>28</td><td>ackermann_typed.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_typed.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_typed.go</a></td></tr>
<tr><td>29</td><td>ackermann_typed.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_typed.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_typed.jl</a></td></tr>
<tr><td>30</td><td>ackermann_typed.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_typed.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/ackermann_typed.rs</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>bubble.py</td><td>algoritmus bublinkového řazení</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/bubble.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/bubble.py</a></td></tr>
<tr><td>32</td><td>bubble.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/bubble.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/bubble.cpp</a></td></tr>
<tr><td>33</td><td>bubble.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/bubble.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/bubble.go</a></td></tr>
<tr><td>34</td><td>bubble.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/bubble.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/bubble.jl</a></td></tr>
<tr><td>35</td><td>bubble.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/bubble.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/bubble.rs</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>36</td><td>list_untyped.py</td><td>práce se seznamy, bez typových informací (hintů)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_untyped.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_untyped.py</a></td></tr>
<tr><td>37</td><td>list_untyped.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_untyped.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_untyped.cpp</a></td></tr>
<tr><td>38</td><td>list_untyped.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_untyped.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_untyped.go</a></td></tr>
<tr><td>39</td><td>list_untyped.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_untyped.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_untyped.jl</a></td></tr>
<tr><td>40</td><td>list_untyped.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_untyped.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_untyped.rs</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>41</td><td>list_typed.py</td><td>práce se seznamy, s&nbsp;typovými informacemi (hinty)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_typed.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_typed.py</a></td></tr>
<tr><td>42</td><td>list_typed.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_typed.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_typed.cpp</a></td></tr>
<tr><td>43</td><td>list_typed.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_typed.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_typed.go</a></td></tr>
<tr><td>44</td><td>list_typed.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_typed.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_typed.jl</a></td></tr>
<tr><td>45</td><td>list_typed.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_typed.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/list_typed.rs</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>46</td><td>async_await.py</td><td>použití jazykových konstrukcí <strong>async</strong> a <strong>await</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/async_await.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/async_await.py</a></td></tr>
<tr><td>47</td><td>async_await.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/async_await.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/async_await.cpp</a></td></tr>
<tr><td>48</td><td>async_await.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/async_await.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/async_await.go</a></td></tr>
<tr><td>49</td><td>async_await.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/async_await.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/async_await.jl</a></td></tr>
<tr><td>50</td><td>async_await.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/async_await.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/async_await.rs</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>51</td><td>safe_div.py</td><td>realizace funkce pro podíl dvou hodnot s&nbsp;detekcí dělení nulou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/safe_div.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/safe_div.py</a></td></tr>
<tr><td>52</td><td>safe_div.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/safe_div.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/safe_div.cpp</a></td></tr>
<tr><td>53</td><td>safe_div.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/safe_div.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/safe_div.go</a></td></tr>
<tr><td>54</td><td>safe_div.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/safe_div.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/safe_div.jl</a></td></tr>
<tr><td>55</td><td>safe_div.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/safe_div.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/safe_div.rs</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>56</td><td>visitor.py</td><td>jednoduchá třída s&nbsp;několika metodami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/visitor.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/visitor.py</a></td></tr>
<tr><td>57</td><td>visitor.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/visitor.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/visitor.cpp</a></td></tr>
<tr><td>58</td><td>visitor.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/visitor.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/visitor.go</a></td></tr>
<tr><td>59</td><td>visitor.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/visitor.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/visitor.jl</a></td></tr>
<tr><td>60</td><td>visitor.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/visitor.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/visitor.rs</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>pattern_matching_factorial.py</td><td>pattern matching použitý při výpočtu faktoriálu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/pattern_matching_factorial.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/pattern_matching_factorial.py</a></td></tr>
<tr><td>62</td><td>pattern_matching_factorial.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/pattern_matching_factorial.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/pattern_matching_factorial.cpp</a></td></tr>
<tr><td>63</td><td>pattern_matching_factorial.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/pattern_matching_factorial.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/pattern_matching_factorial.go</a></td></tr>
<tr><td>64</td><td>pattern_matching_factorial.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/pattern_matching_factorial.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/pattern_matching_factorial.jl</a></td></tr>
<tr><td>65</td><td>pattern_matching_factorial.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/pattern_matching_factorial.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/pattern_matching_factorial.rs</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>66</td><td>add_method_1.py</td><td>třída se speciálními metodami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_1.py</a></td></tr>
<tr><td>67</td><td>add_method_1.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_1.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_1.cpp</a></td></tr>
<tr><td>68</td><td>add_method_1.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_1.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_1.go</a></td></tr>
<tr><td>69</td><td>add_method_1.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_1.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_1.jl</a></td></tr>
<tr><td>70</td><td>add_method_1.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_1.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_1.rs</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>71</td><td>add_method_2.py</td><td>třída se speciálními metodami, instanciace třídy atd.</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_2.py</a></td></tr>
<tr><td>72</td><td>add_method_2.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_2.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_2.cpp</a></td></tr>
<tr><td>73</td><td>add_method_2.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_2.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_2.go</a></td></tr>
<tr><td>74</td><td>add_method_2.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_2.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_2.jl</a></td></tr>
<tr><td>75</td><td>add_method_2.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_2.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_2.rs</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>76</td><td>add_method_3.py</td><td>třída s&nbsp;typovými informacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_3.py</a></td></tr>
<tr><td>77</td><td>add_method_3.cpp</td><td>výsledek transpřekladu do jazyka C++</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_3.cpp">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_3.cpp</a></td></tr>
<tr><td>78</td><td>add_method_3.go</td><td>výsledek transpřekladu do jazyka Go</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_3.go">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_3.go</a></td></tr>
<tr><td>79</td><td>add_method_3.jl</td><td>výsledek transpřekladu do jazyka Julia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_3.jl">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_3.jl</a></td></tr>
<tr><td>80</td><td>add_method_3.rs</td><td>výsledek transpřekladu do jazyka Rust</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_3.rs">https://github.com/tisnik/most-popular-python-libs/blob/master/py2many/add_method_3.rs</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>py2many na GitHubu<br />
<a href="https://github.com/py2many/py2many">https://github.com/py2many/py2many</a>
</li>

<li>py2many na PyPi<br />
<a href="https://pypi.org/project/py2many/">https://pypi.org/project/py2many/</a>
</li>

<li>Awesome Transpilers<br />
<a href="https://github.com/milahu/awesome-transpilers">https://github.com/milahu/awesome-transpilers</a>
</li>

<li>Pseudocode (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Pseudocode">https://en.wikipedia.org/wiki/Pseudocode</a>
</li>

<li>Pseudokód (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Pseudok%C3%B3d">https://cs.wikipedia.org/wiki/Pseudok%C3%B3d</a>
</li>

<li>Cython (home page)<br />
<a href="http://cython.org/">http://cython.org/</a>
</li>

<li>Cython (wiki)<br />
<a href="https://github.com/cython/cython/wiki">https://github.com/cython/cython/wiki</a>
</li>

<li>Cython (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Cython">https://en.wikipedia.org/wiki/Cython</a>
</li>

<li>Cython (GitHub)<br />
<a href="https://github.com/cython/cython">https://github.com/cython/cython</a>
</li>

<li>Seriál Programovací jazyk Julia<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-julia/">https://www.root.cz/serialy/programovaci-jazyk-julia/</a>
</li>

<li>Seriál programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Ackermann function<br />
<a href="https://en.wikipedia.org/wiki/Ackermann_function">https://en.wikipedia.org/wiki/Ackermann_function</a>
</li>

<li>EmbeddingCython<br />
<a href="https://github.com/cython/cython/wiki/EmbeddingCython">https://github.com/cython/cython/wiki/EmbeddingCython</a>
</li>

<li>The Basics of Cython<br />
<a href="http://docs.cython.org/en/latest/src/tutorial/cython_tutorial.html">http://docs.cython.org/en/latest/src/tutorial/cython_tutorial.html</a>
</li>

<li>Compiling to WebAssembly: It’s Happening!<br />
<a href="https://hacks.mozilla.org/2015/12/compiling-to-webassembly-its-happening/">https://hacks.mozilla.org/2015/12/compiling-to-webassembly-its-happening/</a>
</li>

<li>WebAssembly<br />
<a href="https://webassembly.org/">https://webassembly.org/</a>
</li>

<li>A quick guide about Python implementations<br />
<a href="https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321">https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

