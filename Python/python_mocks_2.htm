<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Python pro vývojáře: použití knihovny unittest.mock (nejenom) při testování (2.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Python pro vývojáře: použití knihovny unittest.mock (nejenom) při testování (2.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části článku o testování v&nbsp;Pythonu si popíšeme další možnosti nabízené knihovnou <i>unittest.mock</i>. Zejména si ukážeme použití tříd nazvaných <strong>Mock</strong> a <strong>MagicMock</strong>, seznámíme se s&nbsp;možnostmi zjištění, zda jsou mockované funkce volány s&nbsp;očekávanými parametry a samozřejmě nezapomeneme ani na velmi důležitou &bdquo;maličkost&ldquo; &ndash; jakým způsobem se mockování použije společně s&nbsp;frameworkem <strong>pytest</strong> (protože právě při skutečném testování se mockování funkcí a metod provádí nejčastěji).</p><!--more-->



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Python pro vývojáře: použití knihovny unittest.mock (nejenom) při testování (2.část)</a></p>
<p><a href="#k02">*** 2. Složitější aplikace implementovaná ve větším množství modulů</a></p>
<p><a href="#k03">*** 3. Mockování funkcí volaných nepřímo z&nbsp;jiných modulů</a></p>
<p><a href="#k04">*** 4. Výsledek spuštění testů definovaných v&nbsp;prvním příkladu</a></p>
<p><a href="#k05">*** 5. Úplný zdrojový kód prvního demonstračního příkladu</a></p>
<p><a href="#k06">*** 6. Mockování funkce přímo volané z&nbsp;testů</a></p>
<p><a href="#k07">*** 7. Výsledek spuštění testů definovaných ve druhém příkladu</a></p>
<p><a href="#k08">*** 8. Úplný zdrojový kód druhého demonstračního příkladu</a></p>
<p><a href="#k09">*** 9. Přímé použití konstruktoru <strong>patch()</strong> v&nbsp;těle testů</a></p>
<p><a href="#k10">*** 10. Úplný zdrojový kód třetího demonstračního příkladu</a></p>
<p><a href="#k11">*** 11. Další možnosti nabízené objekty <strong>Mock</strong> a <strong>MagicMock</strong></a></p>
<p><a href="#k12">*** 12. Úplný zdrojový kód čtvrtého demonstračního příkladu</a></p>
<p><a href="#k13">*** 13. Zjištění kolikrát a s&nbsp;jakými parametry byla mockovaná funkce zavolána</a></p>
<p><a href="#k14">*** 14. Výsledek spuštění testů definovaných v&nbsp;pátém příkladu</a></p>
<p><a href="#k15">*** 15. Úplný zdrojový kód pátého demonstračního příkladu</a></p>
<p><a href="#k16">*** 16. Pořadí předávání mock objektů do funkce s&nbsp;anotací <strong>@patch</strong></a></p>
<p><a href="#k17">*** 17. Výsledek spuštění testů definovaných v&nbsp;šestém příkladu</a></p>
<p><a href="#k18">*** 18. Úplný zdrojový kód šestého demonstračního příkladu</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Python pro vývojáře: použití knihovny unittest.mock (nejenom) při testování (2.část)</h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Složitější aplikace implementovaná ve větším množství modulů</h2>

<p></p>

<pre>
</pre>

<pre>
</pre>

<pre>
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Mockování funkcí volaných nepřímo z&nbsp;jiných modulů</h2>

<p></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výsledek spuštění testů definovaných v&nbsp;prvním příkladu</h2>

<p></p>

<pre>
*** test1 ***
function1
function2
function3
function1 returns: function1 function2 function3

*** test2 ***
function1
function2
function3
function1 returns: function1 function2 function3

*** test3 ***
function1
function1 returns: function1 *mocked*

*** test4 ***
function1
function2
function1 returns: function1 function2 *mocked*

*** test5 ***
function1
function2
function3
function1 returns: function1 function2 function3
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Úplný zdrojový kód prvního demonstračního příkladu</h2>

<p></p>

<h3>Soubor <strong>module1.py</strong></h3>

<pre>
from module2 import *


def function1():
    print("function1")
    return "function1 " + function2()
</pre>



<h3>Soubor <strong>module2.py</strong></h3>

<pre>
from module3 import *


def function2():
    print("function2")
    return "function2 " + function3()
</pre>



<h3>Soubor <strong>module3.py</strong></h3>

<pre>
def function3():
    print("function3")
    return "function3"
</pre>



<h3>Soubor <strong>test.py</strong> s&nbsp;testy</h3>

<pre>
from unittest.mock import *

from module1 import *


def test1():
    print("*** test1 ***")
    value = function1()
    print("function1 returns: {v}".format(v=value))


@patch('module2.function2', return_value="*mocked*")
def test2(mocked_function):
    print("*** test2 ***")
    value = function1()
    print("function1 returns: {v}".format(v=value))


@patch('module1.function2', return_value="*mocked*")
def test3(mocked_function):
    print("*** test3 ***")
    value = function1()
    print("function1 returns: {v}".format(v=value))


@patch('module2.function3', return_value="*mocked*")
def test4(mocked_function):
    print("*** test4 ***")
    value = function1()
    print("function1 returns: {v}".format(v=value))


@patch('module3.function3', return_value="*mocked*")
def test5(mocked_function):
    print("*** test5 ***")
    value = function1()
    print("function1 returns: {v}".format(v=value))


if __name__ == '__main__':
    test1()
    print()

    test2()
    print()

    test3()
    print()

    test4()
    print()

    test5()
    print()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Mockování funkce přímo volané z&nbsp;testů</h2>

<p></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Výsledek spuštění testů definovaných ve druhém příkladu</h2>

<p></p>

<pre>
*** test1 ***
function1 returns: *mocked*

*** test2 ***
function1
function2
function3
function1 returns: function1 function2 function3

*** test3 ***
function1
function1 returns: function1 *mocked*

*** test4 ***
function1
function2
function1 returns: function1 function2 *mocked*

*** test5 ***
function1
function2
function3
function1 returns: function1 function2 function3
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Úplný zdrojový kód druhého demonstračního příkladu</h2>

<p></p>

<h3>Soubor <strong>module1.py</strong></h3>

<pre>
</pre>



<h3>Soubor <strong>module2.py</strong></h3>

<pre>
</pre>



<h3>Soubor <strong>module3.py</strong></h3>

<pre>
</pre>



<h3>Soubor <strong>test.py</strong> s&nbsp;testy</h3>

<pre>
from unittest.mock import *

import module1


@patch('module1.function1', return_value="*mocked*")
def test1(mocked_function):
    print("*** test1 ***")
    value = module1.function1()
    print("function1 returns: {v}".format(v=value))


@patch('module2.function2', return_value="*mocked*")
def test2(mocked_function):
    print("*** test2 ***")
    value = module1.function1()
    print("function1 returns: {v}".format(v=value))


@patch('module1.function2', return_value="*mocked*")
def test3(mocked_function):
    print("*** test3 ***")
    value = module1.function1()
    print("function1 returns: {v}".format(v=value))


@patch('module2.function3', return_value="*mocked*")
def test4(mocked_function):
    print("*** test4 ***")
    value = module1.function1()
    print("function1 returns: {v}".format(v=value))


@patch('module3.function3', return_value="*mocked*")
def test5(mocked_function):
    print("*** test5 ***")
    value = module1.function1()
    print("function1 returns: {v}".format(v=value))


if __name__ == '__main__':
    test1()
    print()

    test2()
    print()

    test3()
    print()

    test4()
    print()

    test5()
    print()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Přímé použití konstruktoru <strong>patch()</strong> v&nbsp;těle testů</h2>

<p></p>

<pre>
*** test1 ***
function1 returns: *mocked

*** test2 ***
function1
function2
function3
function1 returns: function1 function2 function3

*** test3 ***
function1
function1 returns: function1 *mocked

*** test4 ***
function1
function2
function1 returns: function1 function2 *mocked

*** test5 ***
function1
function2
function3
function1 returns: function1 function2 function3
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Úplný zdrojový kód třetího demonstračního příkladu</h2>

<p></p>

<h3>Soubor <strong>module1.py</strong></h3>

<pre>
</pre>



<h3>Soubor <strong>module2.py</strong></h3>

<pre>
</pre>



<h3>Soubor <strong>module3.py</strong></h3>

<pre>
</pre>



<h3>Soubor <strong>test.py</strong> s&nbsp;testy</h3>

<pre>
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Další možnosti nabízené objekty <strong>Mock</strong> a <strong>MagicMock</strong></h2>

<p></p>

<pre>
*** test1 ***
function1 returns: *mocked*
mocked function called: True

*** test2 ***
function1
function2
function3
function1 returns: function1 function2 function3
mocked function called: False

*** test3 ***
function1
function1 returns: function1 *mocked*
mocked function called: True

*** test4 ***
function1
function2
function1 returns: function1 function2 *mocked*
mocked function called: True

*** test5 ***
function1
function2
function3
function1 returns: function1 function2 function3
mocked function called: False
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Úplný zdrojový kód čtvrtého demonstračního příkladu</h2>

<p></p>

<h3>Soubor <strong>module1.py</strong></h3>

<pre>
</pre>



<h3>Soubor <strong>module2.py</strong></h3>

<pre>
</pre>



<h3>Soubor <strong>module3.py</strong></h3>

<pre>
</pre>



<h3>Soubor <strong>test.py</strong> s&nbsp;testy</h3>

<pre>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Zjištění kolikrát a s&nbsp;jakými parametry byla mockovaná funkce zavolána</h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Výsledek spuštění testů definovaných v&nbsp;pátém příkladu</h2>

<p></p>

<pre>
*** test1 ***
add returns: 42
mocked function called: True
add returns: 42
mocked function called: True
calls:  [call(1, 2), call(100, 100)]

*** test2 ***
add returns: 42
mocked function called: True
Traceback (most recent call last):
  File "test.py", line 41, in <module>
    test2()
  File "test.py", line 34, in test2
    mocked_function.assert_called_with(1, 1)
  File "/usr/lib/python3.4/unittest/mock.py", line 771, in assert_called_with
    raise AssertionError(_error_message()) from cause
AssertionError: Expected call: add_implementation(1, 1)
Actual call: add_implementation(1, 2)
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Úplný zdrojový kód pátého demonstračního příkladu</h2>

<p></p>

<h3>Soubor <strong>module1.py</strong></h3>

<pre>
</pre>



<h3>Soubor <strong>module2.py</strong></h3>

<pre>
</pre>



<h3>Soubor <strong>test.py</strong> s&nbsp;testy</h3>

<pre>
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Pořadí předávání mock objektů do funkce s&nbsp;anotací <strong>@patch</strong></h2>

<p></p>

<pre>
@patch("module1.f1", name="f1", return_value=0)
@patch("module1.f2", name="f2", return_value=0)
def test3(mocked_f2, mocked_f1):
    ...
    ...
    ...
</pre>

<pre>
@patch("module1.f1", name="f1", return_value=0)
@patch("module1.f2", name="f2", return_value=0)
@patch("module1.f3", name="f3", return_value=0)
def test4(mocked_f3, mocked_f2, mocked_f1):
    ...
    ...
    ...
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Výsledek spuštění testů definovaných v&nbsp;šestém příkladu</h2>

<p></p>

<pre>
*** test1 ***
compute returns: 14

*** test1 ***
compute returns: 130
mocked function 'f1' called: True
calls:  [call(10)]


*** test3 ***
compute returns: 9
mocked function 'f1' called: True
calls:  [call(1)]

mocked function 'f2' called: True
calls:  [call(2)]


*** test4 ***
compute returns: 0
mocked function 'f1' called: True
calls:  [call(100)]

mocked function 'f2' called: True
calls:  [call(200)]

mocked function 'f3' called: True
calls:  [call(300)]
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Úplný zdrojový kód šestého demonstračního příkladu</h2>

<p></p>

<h3>Soubor <strong>module1.py</strong></h3>

<pre>
</pre>



<h3>Soubor <strong>module2.py</strong></h3>

<pre>
</pre>



<h3>Soubor <strong>test.py</strong> s&nbsp;testy</h3>

<pre>
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech šesti dnes popsaných demonstračních příkladů (každý společně s&nbsp;pomocným skriptem určeným pro spuštění testů) byly uloženy do Git repositáře dostupného na adrese <a href="https://github.com/tisnik/mocking-in-python">https://github.com/tisnik/mocking-in-python</a>. V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem prozatím velmi malý, doslova několik kilobajtů), můžete namísto toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Projekt</th><th>Cesta</th></tr>
<tr><td>mock-test7</td><td><a href="https://github.com/tisnik/mocking-in-python/blob/master/mock-test7">https://github.com/tisnik/mocking-in-python/blob/master/mock-test7</a></td></tr>
<tr><td>mock-test8</td><td><a href="https://github.com/tisnik/mocking-in-python/blob/master/mock-test8">https://github.com/tisnik/mocking-in-python/blob/master/mock-test8</a></td></tr>
<tr><td>mock-test9</td><td><a href="https://github.com/tisnik/mocking-in-python/blob/master/mock-test9">https://github.com/tisnik/mocking-in-python/blob/master/mock-test9</a></td></tr>
<tr><td>mock-testA</td><td><a href="https://github.com/tisnik/mocking-in-python/blob/master/mock-testA">https://github.com/tisnik/mocking-in-python/blob/master/mock-testA</a></td></tr>
<tr><td>mock-testB</td><td><a href="https://github.com/tisnik/mocking-in-python/blob/master/mock-testB">https://github.com/tisnik/mocking-in-python/blob/master/mock-testB</a></td></tr>
<tr><td>mock-testC</td><td><a href="https://github.com/tisnik/mocking-in-python/blob/master/mock-testC">https://github.com/tisnik/mocking-in-python/blob/master/mock-testC</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>unittest.mock — mock object library<br />
<a href="https://docs.python.org/3.5/library/unittest.mock.html">https://docs.python.org/3.5/library/unittest.mock.html</a>
</li>

<li>mock 2.0.0<br />
<a href="https://pypi.python.org/pypi/mock">https://pypi.python.org/pypi/mock</a>
</li>

<li>An Introduction to Mocking in Python<br />
<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python</a>
</li>

<li>Mock - Mocking and Testing Library<br />
<a href="http://mock.readthedocs.io/en/stable/">http://mock.readthedocs.io/en/stable/</a>
</li>

<li>Python Mocking 101: Fake It Before You Make It<br />
<a href="https://blog.fugue.co/2016-02-11-python-mocking-101.html">https://blog.fugue.co/2016-02-11-python-mocking-101.html</a>
</li>

<li>Nauč se Python! - Testování<br />
<a href="http://naucse.python.cz/lessons/intro/testing/">http://naucse.python.cz/lessons/intro/testing/</a>
</li>

<li>Flexmock (dokumentace)<br />
<a href="https://flexmock.readthedocs.io/en/latest/">https://flexmock.readthedocs.io/en/latest/</a>
</li>

<li>Test Fixture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test_fixture">https://en.wikipedia.org/wiki/Test_fixture</a>
</li>

<li>Behavior-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Behavior-driven_development">https://en.wikipedia.org/wiki/Behavior-driven_development</a>
</li>

<li>Mock object (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Mock_object">https://en.wikipedia.org/wiki/Mock_object</a>
</li>

<li>Unit testing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Unit_testing">https://en.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit testing<br />
<a href="https://cs.wikipedia.org/wiki/Unit_testing">https://cs.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Extrémní programování<br />
<a href="https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD">https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD</a>
</li>

<li>Programování řízené testy<br />
<a href="https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy">https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>Tox<br />
<a href="https://tox.readthedocs.io/en/latest/">https://tox.readthedocs.io/en/latest/</a>
</li>

<li>Cucumber<br />
<a href="https://cucumber.io/">https://cucumber.io/</a>
</li>

<li>Jasmine<br />
<a href="https://jasmine.github.io/">https://jasmine.github.io/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>pytest: helps you write better programs<br />
<a href="https://docs.pytest.org/en/latest/">https://docs.pytest.org/en/latest/</a>
</li>

<li>doctest — Test interactive Python examples<br />
<a href="https://docs.python.org/dev/library/doctest.html#module-doctest">https://docs.python.org/dev/library/doctest.html#module-doctest</a>
</li>

<li>Python mock by example
<a href="http://www.alexandrejoseph.com/blog/2015-08-21-python-mock-example.html">http://www.alexandrejoseph.com/blog/2015-08-21-python-mock-example.html</a>
</li>

<li>unittest — Unit testing framework<br />
<a href="https://docs.python.org/dev/library/unittest.html">https://docs.python.org/dev/library/unittest.html</a>
</li>

<li>Python namespaces<br />
<a href="https://bytebaker.com/2008/07/30/python-namespaces/">https://bytebaker.com/2008/07/30/python-namespaces/</a>
</li>

<li>Namespaces and Scopes<br />
<a href="https://www.python-course.eu/namespaces.php">https://www.python-course.eu/namespaces.php</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

