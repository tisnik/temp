<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba sešitů ve formátu XLSX v Pythonu: knihovna XlsxWriter</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba sešitů ve formátu XLSX v Pythonu: knihovna XlsxWriter</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dnes si ukážeme použití knihovny XlsxWriter určené pro programovací jazyk Python. Tuto knihovnu lze použít pro vytváření sešitů ve formátu Office Open XML Workbook neboli zkráceně XLSX. Podporována je ovšem i práce se styly a dalšími objekty vkládanými do sešitů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba sešitů ve formátu XLSX v&nbsp;Pythonu: knihovna XlsxWriter</a></p>
<p><a href="#k02">2. Formáty používané tabulkovými procesory</a></p>
<p><a href="#k03">3. Instalace knihovny XlsxWriter</a></p>
<p><a href="#k04">4. Vytvoření prázdného sešitu</a></p>
<p><a href="#k05">5. Vytvoření listu s několika vyplněnými buňkami</a></p>
<p><a href="#k06">6. Alternativní adresování buněk</a></p>
<p><a href="#k07">7. Nastavení šířky sloupců v&nbsp;rámci listu</a></p>
<p><a href="#k08">8. Nastavení formátu vybraných buněk</a></p>
<p><a href="#k09">9. Alternativní nastavení formátu buněk</a></p>
<p><a href="#k10">10. Nastavení stylu/formátu celých řádků nebo sloupců</a></p>
<p><a href="#k11">11. Buňky se specifikací datového typu</a></p>
<p><a href="#k12">12. Buňky se specifikací číselného formátu</a></p>
<p><a href="#k13">13. Další numerický formát buněk</a></p>
<p><a href="#k14">14. Změna velikosti fontu (písma) v&nbsp;buňkách</a></p>
<p><a href="#k15">15. Nastavení barvy textu v&nbsp;buňkách</a></p>
<p><a href="#k16">16. Kód barvy textu určený šesticí hexadecimálních hodnot</a></p>
<p><a href="#k17">17. Nastavení barvy pozadí buněk</a></p>
<p><a href="#k18">18. Obsah druhé části článku</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba sešitů ve formátu XLSX v&nbsp;Pythonu: knihovna XlsxWriter</h2>

<p>Jedním z&nbsp;relativně častých požadavků kladených na různé informační
systémy je požadavek na to, aby bylo možné ručně zadaná, naměřená či vypočtená
data vyexportovat v&nbsp;takovém formátu, který by byl zpracovatelný
v&nbsp;tabulkových procesorech (<i>spreadsheet</i>), například
v&nbsp;&bdquo;kancelářských&ldquo; aplikacích <i>Gnumeric</i>, <i>Microsoft
Excel</i>, <i>LibreOffice Calc</i> či v&nbsp;některých tabulkových procesorech
naprogramovaných a dostupných ve formě webových aplikací (<i>Google Doc</i> či
neprávem přehlížený <i>Ethercalc</i>). Z&nbsp;pohledu uživatelů se jedná o
logický požadavek, protože v&nbsp;tabulkových procesorech je možné relativně
snadno provádět další analýzy dat, interaktivně vytvářet grafy, provádět různé
dotazy nad daty atd. Navíc data vyexportovaná do jednoho z&nbsp;podporovaných a
(polo)standardizovaných formátů lze naimportovat například do <i>Jupyter
Notebooku</i>, <i>Matlabu</i> atd. a následně je sofistikovaněji zpracovat
v&nbsp;těchto prostředích.</p>

<p><div class="rs-tip-major">Poznámka: na druhou stranu je pochopitelně nutné
upozornit na to, že i přes (zdánlivou) jednoduchost a pochopitelnost může být
zpracování dat v&nbsp;tabulkových procesorech v&nbsp;mnoha ohledech dosti
problematické a může vést buď ke ztrátě, či &bdquo;jen&ldquo;
k&nbsp;dezinterpretaci dat. Nicméně zejména u informačních systémů, které
začaly být vytvářeny přímo uživateli &ndash; IT laiky, se mnohdy setkáme právě
s&nbsp;tím, že tabulkový procesor je ústřední částí takového systému (a nemusí
se v&nbsp;žádném případě jednat pouze o malé projekty, protože s&nbsp;časem
jejich složitost může narůstat až do chvíle, kdy se začne negativně projevovat
použitá architektura).</div></p>

<p>Dnes si ukážeme použití knihovny <strong>XlsxWriter</strong> určené pro
programovací jazyk Python. Předností této knihovny je podpora pro práci
s&nbsp;větším množstvím listů v&nbsp;sešitu, podpora pro styly tabulek i
jednotlivých buněk, možnost vkládání dalších objektů do tabulek a
v&nbsp;neposlední řadě i fakt, že tato knihovna má jen minimální závislosti a
ani velikost příslušného balíčku není nijak ohromující &ndash; cca 700
kilobajtů po rozbalení.</p>

<p><div class="rs-tip-major">Poznámka: screenshoty byly pořízeny
v&nbsp;Gnumericu, ale podobně budou vygenerované sešity vypadat i
v&nbsp;dalších tabulkových procesorech.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Formáty používané tabulkovými procesory</h2>

<p>Existuje hned několik formátů, které jsou podporovány jak knihovnami
určenými pro programovací jazyk Python (kterým se dnes budeme zabývat), tak i
tabulkovými procesory. Tyto formáty se od sebe odlišují svými vlastnostmi:
některé formáty pouze dokážou ukládat tabulky s&nbsp;hodnotami jen několika
datových typů (což způsobuje obecně známé problémy s&nbsp;reprezentací časových
údajů či peněžních částek), další formáty již umožňují ukládat vzorce,
formátování buněk, styly buněk a některé dokonce i tak složité objekty, jako
jsou grafy. Z&nbsp;hlediska kompatibility mezi různými systémy je tak možné se
rozhodnout například mezi následujícími formáty:</p>

<ul>

<li><i>CSV</i> neboli <i>Comma-Separated Values</i> [<a
href="https://en.wikipedia.org/wiki/Comma-separated_values">1</a>] je jedním
z&nbsp;nejčastěji používaných souborových formátů v&nbsp;této oblasti, a to
přesto, že je export a import CSV v&nbsp;některých případech problematický
(například některé české mutace Excelu namísto čárek používají středníky,
problémy nastávají s&nbsp;buňkami obsahujícími znaky pro konec řádku atd.).
Pokud máte při importu či exportu potíže se zpracováním CSV, můžete
v&nbsp;naprosté většině tabulkových procesorů zvolit přesnou specifikaci, jak
se má konverze (resp.&nbsp;přesněji řečeno import nebo export) provést.
V&nbsp;Pythonu pro tento účel existuje standardní knihovna <strong>csv</strong>
(viz též <a
href="https://docs.python.org/3/library/csv.html">https://docs.python.org/3/library/csv.html</a>),
která s&nbsp;CSV soubory dokáže pracovat podle <a
href="https://tools.ietf.org/html/rfc4180">RFC 4180</a>. Tato de facto norma
však zdaleka nepopisuje všechny varianty CSV, s&nbsp;nimiž se můžete
v&nbsp;praxi setkat.</li>

<li><i>TSV</i> neboli <i>Tab-Separated Values</i> [<a
href="https://en.wikipedia.org/wiki/Tab-separated_values">2</a>] [<a
href="http://jkorpela.fi/TSV.html">3</a>] je velmi podobným formátem, ovšem
s&nbsp;tím rozdílem, že oddělovačem jednotlivých buněk je znak tabulátoru.
Podobně jako v&nbsp;případě CSV i zde existuje několik voleb, které ovlivňují
způsob importu (zda tabulka obsahuje hlavičky sloupců atd.). Nicméně i zde jsme
omezeni pouze na &bdquo;čistá&ldquo; data &ndash; nelze (jednotně) uložit
metadata o jednotlivých sloupcích, export je omezen na jediný sešit a
neexistuje zde ani možnost vložení dalších objektů do tabulky.</li>

<li>Existuje i relativně velké množství aplikací, v&nbsp;nichž jsou tabulková
data uložena ve formě běžných textových souborů s&nbsp;nějakými oddělovači
odlišnými od výše zmíněného tabulátoru (relativně často se jedná o středníky,
dvojtečky nebo o znak |, i když invence programátorů jsou v&nbsp;tomto směru
velké). Buď se jedná o zobecnění formátů CSV a TSV [<a
href="https://en.wikipedia.org/wiki/Delimiter-separated_values">4</a>], nebo
může mít textový soubor podobu naformátovaných sloupců s&nbsp;pevnou délkou (a
tedy bez problémů čitelných uživatelem). V&nbsp;tomto případě většinou musí
tabulkové procesory soubor analyzovat a na základě této analýzy navrhnout, kde
se nachází jednotlivé sloupce. Příkladem takového souboru je například <a
href="https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt">https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt</a>,
v&nbsp;němž se jako oddělovače používají právě znaky &bdquo;|&ldquo; a navíc
&ndash; aby byl import ještě zajímavější &ndash; jsou v&nbsp;numerických
hodnotách použity čárky namísto teček.</li>

<li>Dalším velmi často používaným formátem pro přenos tabulek i celých sešitů
(<i>sheet</i>) je formát nazvaný <i>Office Open XML Workbook</i>. Tento formát
je součástí skupiny formátů známých též pod zkratkou <i>OOXML</i> (plným jménem
<i>Office Open XML</i>) nebo též (z&nbsp;dnes již spíše historických důvodů)
<i>Microsoft Open XML</i>. Práci s&nbsp;tímto formátem v&nbsp;programovacím
jazyku Python je věnována celá <a href="#k03">druhá část dnešního
článku</a>.</li>

<li>Podobně koncipovaný je i <i>Open Document Format for Office
Applications</i> (ODF), známý též pod kratším jménem <i>OpenDocument</i>. Tímto
formátem se dnes ještě nebudeme zabývat, i když je taktéž poměrně často
používaný (i když se zdá, že souboj mezi ODF a OOXML je již rozhodnutý).</li>

</ul>

<p><div class="rs-tip-major">Poznámka: dnes se budeme zabývat pouze vytvářením
souborů s&nbsp;tabulkami či s&nbsp; celými sešity. Druhým problémem &ndash; a
to vlastně problémem obecně složitějším &ndash; je import takových sešitů do
datových struktur programovacího jazyka Python (například do datových rámců
knihovny Pandas). Na tuto problematiku, s&nbsp;níž se mnozí setkávají
v&nbsp;praxi, se však zaměříme až v&nbsp;navazujících článcích.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace knihovny XlsxWriter</h2>

<p>Pro tvorbu sešitů ve formátu <i>Office Open XML Workbook</i> (zkráceně
<i>XLSX</i>) z&nbsp;Pythonu existuje knihovna nazvaná přímočaře
<strong>XlsxWriter</strong>. Nejprve samozřejmě musíme příslušnou knihovnu
nainstalovat, což je v&nbsp;tomto konkrétním případě otázka několika sekund,
protože tato knihovna nemá žádné složité závislosti. Postačuje použít příkaz
<strong>pip</strong> popř.&nbsp;<strong>pip3</strong> pro instalaci knihovny
<strong>redis</strong>.  Pro jistotu instalaci provedeme pouze pro aktivního
uživatele, takže se knihovna i její metadata uloží do adresáře
<strong>~/.local/lib/python{VERZE}/site-packages/</strong>:</p>

<pre>
$ <strong>pip3 install --user XlsxWriter</strong>
&nbsp;
Collecting XlsxWriter
  Downloading https://files.pythonhosted.org/packages/cd/84/c239b08592a431f7ad8773f7869470255b5f1ad860d7b40a9e7ed3f01bde/XlsxWriter-3.0.2-py3-none-any.whl (149kB)
    100% |████████████████████████████████| 153kB 1.5MB/s 
Installing collected packages: XlsxWriter
Successfully installed XlsxWriter-3.0.2
</pre>

<p>Otestování instalace:</p>

<pre>
$ <strong>python3</strong>
&nbsp;
&gt;&gt;&gt; <strong>import xlsxwriter</strong>
&gt;&gt;&gt; <strong>help(xlsxwriter)</strong>
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
Help on package xlsxwriter:
&nbsp;
NAME
    xlsxwriter
&nbsp;
DESCRIPTION
    # SPDX-License-Identifier: BSD-2-Clause
    # Copyright 2013-2021, John McNamara, jmcnamara@cpan.org
    #
&nbsp;
PACKAGE CONTENTS
    app
    ...
    ...
    ...
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vytvoření prázdného sešitu</h2>

<p>Demonstrační příklady, s&nbsp;nimiž se dnes seznámíme, budou zpočátku velmi
jednoduché, a to z&nbsp;toho důvodu, aby se na nich ukázala snadnost práce
s&nbsp;knihovnou <i>XlsxWriter</i>. V&nbsp;prvním příkladu je ukázáno, jak se
vytvoří sešit s&nbsp;jediným prázdným listem. Sešit je představován instancí
třídy <strong>Workbook</strong>, list v&nbsp;sešitu pak instancí třídy
<strong>Worksheet</strong>. Na konci skriptu je korektní zavolat metodu
<strong>Workbook.close</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření prázdného sešitu."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
workbook = <strong>xlsxwriter.Workbook('example01.xlsx')</strong>
&nbsp;
<i># vložení nového listu do sešitu</i>
worksheet = <strong>workbook.add_worksheet()</strong>
&nbsp;
<i># explicitní uzavření sešitu</i>
<strong>workbook.close()</strong>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-1.png" class="image-493221" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 1: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>

<p>Nutnost explicitního volání metody <strong>Workbook.Close</strong> je
z&nbsp;praktického pohledu dosti nepříjemná, protože se například
v&nbsp;důsledku vyvolání výjimky může stát, že se metoda nezavolá.
V&nbsp;Pythonu však existuje lepší řešení &ndash; vytvoření <i>kontextu</i>,
v&nbsp;jehož rámci je sešit otevřen. Po opuštění tohoto kontextu dojde
k&nbsp;automatickému uzavření sešitu, což je přesně to chování, které
vyžadujeme. Z&nbsp;tohoto důvodu budou všechny další demonstrační příklady
založeny na této kostře:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření prázdného sešitu, zajištění uzavření objektu worksheet."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
<strong>with xlsxwriter.Workbook('example02.xlsx') as workbook:</strong>
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-2.png" class="image-493222" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 2: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vytvoření listu s několika vyplněnými buňkami</h2>

<p>Do prozatím prázdného sešitu nyní přidáme několik buněk s&nbsp;hodnotami.
Pro tento účel se používá metoda nazvaná <strong>Worksheet.Write</strong>,
která má několik podob. V&nbsp;základní podobě se této metodě předává adresa
buňky následovaná hodnotou, která se má do buňky uložit. Adresu buňky lze
zapsat stejným způsobem, jako je tomu i ve vlastním spreadsheetu &ndash;
řetězcem se jménem sloupce a číslem řádku. A hodnotou může být jak řetězec, tak
i číslo:</p>

<pre>
worksheet.write('A1', 'www.root.cz')
worksheet.write('A2', 6)
</pre>

<p><div class="rs-tip-major">Poznámka: ve spreadsheetech se pro adresaci buněk
ještě používá notace R1C1, ke které se ovšem ještě vrátíme.</div></p>

<p>Celý skript, který vytvoří sešit s&nbsp;jedním listem s&nbsp;několika
vyplněnými buňkami, může vypadat následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s několika vyplněnými buňkami."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example03.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># buňka s textem</i>
    <strong>worksheet.write('A1', 'www.root.cz')</strong>
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    <strong>worksheet.write('A2', 6)</strong>
    <strong>worksheet.write('A3', 7)</strong>
    <strong>worksheet.write('B3', 8)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-3.png" class="image-493223" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 3: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Alternativní adresování buněk</h2>

<p>Zejména při programovém vyplňování tabulky není výše použitý způsob
adresování buněk příliš vhodný, protože by bylo nutné programově skládat adresu
buňky ve formátu řetězce &bdquo;A1&ldquo;. Ovšem existuje i alternativní způsob
adresace buněk, v&nbsp;němž je jak číslo řádku, tak i číslo sloupce zadáno
celočíselným indexem. Přitom se číslo řádku uvádí na prvním místě:</p>

<pre>
<strong>worksheet.write(řádek, sloupec, 'www.root.cz')</strong>
</pre>

<p>Demonstrační příklad <a href="#k05">z&nbsp;předchozí kapitoly</a> je tedy
možné upravit takto:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s několika vyplněnými buňkami, alternativní adresování buněk."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example04.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># buňka s textem</i>
    <strong>worksheet.write(0, 0, 'www.root.cz')</strong>
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    <strong>worksheet.write(1, 0, 6)</strong>
    <strong>worksheet.write(2, 0, 7)</strong>
    <strong>worksheet.write(2, 1, 8)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-4.png" class="image-493224" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 4: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se řádky i sloupce
číslují od nuly, tedy jinak, než je tomu při běžném pohledu na sešit!</div></p>

<p>Díky tomuto způsobu zápisu můžeme velmi snadno programově vytvořit tabulku
s&nbsp;převrácenými hodnotami pro x=1 až 10. Postačovat nám přitom bude
jednoduchá programová smyčka:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example05.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># buňky s textem</i>
    worksheet.write('A1', 'x')
    worksheet.write('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        <strong>worksheet.write(x, 0, x)</strong>
        <strong>worksheet.write(x, 1, 1.0/x)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-5.png" class="image-493225" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 5: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že je možné oba způsoby
adresace buněk v&nbsp;tabulce kombinovat.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Nastavení šířky sloupců v&nbsp;rámci listu</h2>

<p>Při pohledu na předchozí screenshoty je zřejmé, že se šířky sloupců
automaticky <u>ne</u>přizpůsobily vizuální šířce zobrazených údajů. Ovšem ve
skutečnosti můžeme šířku sloupců zadat explicitně, a to velmi jednoduše &ndash;
metodou <strong>Worksheet.set_column</strong>, které se předají adresy sloupců
a požadovaná šířka ve &bdquo;znacích&ldquo; (tedy tak, jak je zadávána i přímo
v&nbsp;Excelu). Alternativně je možné použít metodu pojmenovanou
<strong>Worksheet.set_column_pixels</strong> a zadat tak šířku
v&nbsp;pixelech:</p>

<pre>
<i># šířka jediného sloupce</i>
worksheet.set_column('A:A', 8)
</pre>

<p>Podívejme se nyní na upravený skript, který nastaví šířky obou použitých
sloupců i dalších 24 nepoužitých (prázdných) sloupců:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, nastavení šířky sloupců."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example06.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># nastavení šířky sloupců</i>
    <strong>worksheet.set_column('A:A', 8)</strong>
    <strong>worksheet.set_column('B:B', 14)</strong>
    <strong>worksheet.set_column('C:Z', 2)</strong>
&nbsp;
    <i># buňky s textem</i>
    worksheet.write('A1', 'x')
    worksheet.write('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write(x, 0, x)
        worksheet.write(x, 1, 1.0/x)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-6.png" class="image-493226" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 6: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Nastavení formátu vybraných buněk</h2>

<p>Mezi další přednosti plnohodnotných formátů ze skupiny Office Open či Open
Document Format patří podpora pro nastavení stylů a formátů vybraných buněk.
Styly podporuje i knihovna <i>XlsxWriter</i>. Nejdříve je nutné vytvořit objekt
představující formát. K&nbsp;tomuto účelu slouží metoda
<strong>Workbook.add_format</strong>, které lze předat slovník se specifikací
formátu buněk. Pokud například budeme chtít buňky zvýraznit tučným písmem, bude
tento slovník obsahovat jediný atribut nazvaný &bdquo;bold&ldquo;:</p>

<pre>
<i># definice nového stylu</i>
bold_style = <strong>workbook.add_format({'bold': True})</strong>
</pre>

<p>Formát lze předat v&nbsp;posledním parametry nám již známé metody
<strong>Worksheet.write</strong>:</p>

<pre>
worksheet.write('A1', 'x', <strong>bold_style</strong>)
</pre>

<p>Podívejme se nyní na demonstrační příklad, v&nbsp;němž se nastaví tučné
písmo u buněk &bdquo;A1&ldquo; a &bdquo;B1&ldquo;, tedy u buněk tvořících názvy
sloupců:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, nastavení stylů vybraných buněk."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example07.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># nastavení šířky sloupců</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># definice nového stylu</i>
    <strong>bold_style = workbook.add_format({'bold': True})</strong>
&nbsp;
    <i># buňky s textem</i>
    worksheet.write('A1', 'x', <strong>bold_style</strong>)
    worksheet.write('B1', '1/x', <strong>bold_style</strong>)
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write(x, 0, x)
        worksheet.write(x, 1, 1.0/x)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-7.png" class="image-493227" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 7: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>

<p>Samozřejmě je možné nastavit i další vlastnosti, například je možné změnit
barvu textu v&nbsp;buňce na modrou:</p>

<pre>
<i># definice nového stylu</i>
bold_style = workbook.add_format(<strong>{'bold': True,</strong>
                                  <strong>'font_color': 'blue'}</strong>)
</pre>

<p>Předchozí skript nepatrně upravíme do této podoby:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, nastavení stylů vybraných buněk."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example08.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># nastavení šířky sloupců</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># definice nového stylu</i>
    <strong>bold_style = workbook.add_format({'bold': True,</strong>
                                      <strong>'font_color': 'blue'})</strong>
&nbsp;
    <i># buňky s textem</i>
    worksheet.write('A1', 'x', <strong>bold_style</strong>)
    worksheet.write('B1', '1/x', <strong>bold_style</strong>)
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write(x, 0, x)
        worksheet.write(x, 1, 1.0/x)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-8.png" class="image-493228" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 8: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>

<p><div class="rs-tip-major">Poznámka: jen na okraj &ndash; Excel podporuje
maximálně 65490 formátů/stylů (ať již toto divné číslo vzniklo jakkoli), takže
je teoreticky možné tuto hranici při programovém vytváření sešitů překročit.
Prakticky by k&nbsp;tomu ale nemělo dojít, pokud budou formáty použity rozumným
způsobem, tedy pokud budou sdíleny mezi různými buňkami.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Alternativní nastavení formátu buněk</h2>

<p>Samotný styl (resp.&nbsp;formát) je objektem a jeho atributy nemusí být
nastaveny pouze obsahem slovníku s&nbsp;parametry formátu. Alternativně je
totiž možné použít i k&nbsp;tomu určené metody, například metodu
<strong>set_bold</strong> pro nastavení tučného písma buněk,
<strong>set_font_color</strong> pro modifikaci barvy textu či
<strong>set_font_size</strong> pro změnu velikosti písma. Tento přístup může
být v&nbsp;některých situacích výhodnější, takže si ho ukažme:</p>

<pre>
<i># definice nového stylu</i>
<strong>bold_style = workbook.add_format()</strong>
<strong>bold_style.set_bold()</strong>
<strong>bold_style.set_font_color('blue')</strong>
</pre>

<p>Takový styl se použije naprosto stejným způsobem, jako tomu bylo
v&nbsp;předchozích dvou demonstračních příkladech:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, nastavení stylů vybraných buněk."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example09.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># nastavení šířky sloupců</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># definice nového stylu</i>
    <strong>bold_style = workbook.add_format()</strong>
    <strong>bold_style.set_bold()</strong>
    <strong>bold_style.set_font_color('blue')</strong>
&nbsp;
    <i># buňky s textem</i>
    worksheet.write('A1', 'x', <strong>bold_style</strong>)
    worksheet.write('B1', '1/x', <strong>bold_style</strong>)
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write(x, 0, x)
        worksheet.write(x, 1, 1.0/x)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-9.png" class="image-493229" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 9: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Nastavení stylu/formátu celých řádků nebo sloupců</h2>

<p>V&nbsp;tabulkových procesorech je možné pracovat s&nbsp;celými řádky
popř.&nbsp;celými sloupci. Podívejme se nejdříve na způsob nastavení vlastností
celého (vybraného) řádku. Pro tento účel se používá metoda nazvaná
<strong>Worksheet.set_row</strong>, které je nutné předat index řádku (přitom
se číslují od nuly!), dále výšku řádku a ve třetím (nepovinném) parametru
příslušný styl (existuje ještě čtvrtý nepovinný parametr, ke kterému se vrátíme
příště). Jak vypadá základní specifikace stylu již víme, takže nám zbývá určit
nastavení výšky celého řádku. Výchozí hodnotou je 20, takže pro první řádek
(s&nbsp;indexem rovným nule) nastavíme jeho styl takto:</p>

<pre>
<i># definice nového stylu</i>
bold_style = <strong>workbook.add_format()</strong>
bold_style.set_bold()
bold_style.set_font_color('blue')
&nbsp;
<i># styl pro první řádek</i>
<strong>worksheet.set_row(0, 20, bold_style)</strong>
</pre>

<p>Opět se podívejme na celý skript:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, nastavení stylu řádků."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example10.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># nastavení šířky sloupců</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># definice nového stylu</i>
    bold_style = <strong>workbook.add_format()</strong>
    <strong>bold_style.set_bold()</strong>
    <strong>bold_style.set_font_color('blue')</strong>
&nbsp;
    <i># styl pro první řádek</i>
    <strong>worksheet.set_row(0, 20, bold_style)</strong>
&nbsp;
    <i># buňky s textem</i>
    worksheet.write('A1', 'x')
    worksheet.write('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write(x, 0, x)
        worksheet.write(x, 1, 1.0/x)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-10.png" class="image-493230" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 10: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>

<p>Zatímco pro nastavení stylu celého řádku se používá metoda
<strong>Worksheet.set_row</strong>, pro určení stylu sloupce či sloupců lze
použít podobnou metodu pojmenovanou <strong>Worksheet.set_column</strong>. Této
metodě se předává označení sloupce (index či řetězec se jménem sloupce
resp.&nbsp;rozsahem), šířka sloupce ve znakových jednotkách (to již známe) a
konečně styl přiřazený celému sloupci:</p>

<pre>
<i># definice dalšího nového stylu</i>
red_style = <strong>workbook.add_format()</strong>
red_style.set_font_color('red')
&nbsp;
<i># nastavení šířky sloupců a stylu</i>
<strong>worksheet.set_column('A:A', 8, red_style)</strong>
</pre>

<p>Opět si samozřejmě vše ukážeme v&nbsp;reálném skriptu, v&nbsp;němž
mimochodem nastavujeme jak formát prvního řádku, tak i odlišný formát prvního
sloupce:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, nastavení stylu sloupců."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example11.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = <strong>workbook.add_format()</strong>
    <strong>red_style.set_font_color('red')</strong>
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8, <strong>red_style</strong>)
    worksheet.set_column('B:B', 14)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write('A1', 'x')
    worksheet.write('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write(x, 0, x)
        worksheet.write(x, 1, 1.0/x)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Z&nbsp;výsledků je patrné, že později nastavený styl (řádku)
&bdquo;vyhrál&ldquo;, což je patrné na vzhledu buňky A1:</p>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-11.png" class="image-493231" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 11: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Buňky se specifikací datového typu</h2>

<p>Prozatím jsme do buněk zapisovali údaje metodou
<strong>Worksheet.write</strong>. Ve skutečnosti je však možné specifikovat i
typ hodnot (typicky tedy rozlišit řetězce od numerických hodnot) tím, že
namísto <strong>Worksheet.write</strong> použijeme metody
<strong>Worksheet.write_string</strong> a
<strong>Worksheet.write_number</strong> tak, jak je to ukázáno v&nbsp;dalším
demonstračním příkladu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, buňky se specifikací datového typu."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example12.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8, red_style)
    worksheet.set_column('B:B', 14)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    <strong>worksheet.write_string('A1', 'x')</strong>
    <strong>worksheet.write_string('B1', '1/x')</strong>
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        <strong>worksheet.write_number(x, 0, x)</strong>
        <strong>worksheet.write_number(x, 1, 1.0/x)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-12.png" class="image-493232" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 12: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>

<p><div class="rs-tip-major">Poznámka: existují i další metody pro ostatní
datové typy:</div></p>

<table>
<tr><th>Metoda</th></tr>
<tr><td><strong>Worksheet.write_blank</strong></td></tr>
<tr><td><strong>Worksheet.write_boolean</strong></td></tr>
<tr><td><strong>Worksheet.write_datetime</strong></td></tr>
<tr><td><strong>Worksheet.write_url</strong></td></tr>
<tr><td><strong>Worksheet.write_rich_string()</strong></td></tr>
</table>



<p><a name="k12"></a></p>
<h2 id="k12">12. Buňky se specifikací číselného formátu</h2>

<p>V&nbsp;tabulkových procesorech se na data zadaná do jednotlivých buněk
můžeme dívat dvěma způsoby. Jedná se o vlastní zapsanou hodnotu, která je
interně reprezentována sekvencí bitů a v&nbsp;lidsky čitelné podobě můžeme tuto
hodnotu vidět na vstupním řádku. A druhý způsob pohledu na data zapsaná do
buňky je závislý na zvoleném <i>formátu zobrazení</i>, který s&nbsp;původní
hodnotou může souviset mnohdy jen okrajově. Příkladem může být specifikace
formátu číselné hodnoty tak, aby se zobrazila jen celá část čísla &ndash;
tabulkový procesor v&nbsp;tomto případě nebude případné cifry za desetinnou
čárkou/tečkou zobrazovat a maximálně hodnotu zaokrouhlí. Podobně lze u časových
razítek požadovat pouze zobrazení data (a nikoli hodin, minut, sekund atd.). A
naopak je možné vhodným formátem například zvýraznit záporné hodnoty apod.</p>

<p>Formát zobrazení hodnot v&nbsp;buňkách lze měnit i při použití knihovny
<i>XlsxWriter</i>. Předností je, že formát zobrazení se specifikuje stejným či
velmi podobným způsobem, jako je tomu i v&nbsp;GUI tabulkového procesoru:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, buňky se specifikací číselného formátu."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example13.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = <strong>workbook.add_format({'num_format': '##.###'})</strong>
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8, red_style)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-13.png" class="image-493233" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 13: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;Excelu lze v&nbsp;jednom sešitu
použít 200 až 250 formátů hodnot (v&nbsp;závislosti na verzi, jazykové mutaci a
fázi Měsíce). Opět se jedná o číslo, které je teoreticky možné relativně snadno
překročit, zejména při programovém vytváření sešitů.</div></p>

<p>Jiný formát, tentokrát vyžadující zobrazení čtyř cifer za desetinnou
čárkou/tečkou:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, buňky se specifikací číselného formátu."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example14.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = <strong>workbook.add_format({'num_format': '0.0000'})</strong>
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8, red_style)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-14.png" class="image-493234" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 14: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Další numerický formát buněk</h2>

<p>Podívejme se na různé možnosti specifikace formátu numerických hodnot a
časových razítek. Formát je zadán stejně, jako ve většině tabulkových
procesorů:</p>

<table>
<tr><td>0</td></tr>
<tr><td>0.00</td></tr>
<tr><td>#,##0.00</td></tr>
<tr><td>($#,##0.00_);[Red]($#,##0.00)</td></tr>
<tr><td>0.00%</td></tr>
<tr><td>d-mmm-yy</td></tr>
<tr><td>h:mm:ss AM/PM</td></tr>
<tr><td>mm:ss</td></tr>
</table>

<p>Příklad explicitní specifikace numerického formátu, v&nbsp;němž se nepoužívá
slovník, ale přímo metoda <strong>set_num_format</strong>:</p>

<pre>
numeric_format = <strong>workbook.add_format()</strong>
<strong>numeric_format.set_num_format('0.0000')</strong>
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, buňky se specifikací číselného formátu."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example15.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = <strong>workbook.add_format()</strong>
    <strong>numeric_format.set_num_format('0.0000')</strong>
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8, red_style)
    worksheet.set_column('B:B', 14, <strong>numeric_format</strong>)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-15.png" class="image-493235" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 15: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Změna velikosti fontu (písma) v&nbsp;buňkách</h2>

<p>Ve chvíli, kdy máme k&nbsp;dispozici objekt pro specifikaci formátu
(<strong>Workbook.add_format</strong>), je možné kromě stylu (tučné písmo atd.)
a barvy nastavit i velikost písma. Jednou z&nbsp;možností je specifikace
velikosti metodou <strong>set_font_size</strong> tak, jak je to ukázáno
v&nbsp;dalším skriptu. Přitom je výška řádku automaticky upravena tak, aby byly
vidět obsahy všech buněk na tomto řádku (to však neplatí pro šířku sloupců, což
již ostatně víme):</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, změna velikosti fontu."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example16.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># nastavení šířky sloupců</i>
    worksheet.set_column('A:A', 20)
&nbsp;
    <i># buňky s numerickými hodnotami a různou velikostí textu</i>
    for x in range(1, 21):
        style = workbook.add_format()
        <strong>style.set_font_size(x)</strong>
        worksheet.write_number(x, 0, x, <strong>style</strong>)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Význam jednotlivých hodnot od 1 do 20 je vidět na screenshotu:</p>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-16.png" class="image-493236" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 16: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>

<p><div class="rs-tip-major">Poznámka: pro specifikaci velikosti fontu lze
použít pouze celá čísla!</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Nastavení barvy textu v&nbsp;buňkách</h2>

<p>V&nbsp;sešitech je možné jednotlivé části buněk vybarvit různými barvami.
Pro specifikaci těchto barev slouží osm metod, jejichž názvy a stručný popis
naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Metoda</th><th>Stručný popis metody</th></tr>
<tr><td>1</td><td>format.set_font_color()</td><td>nastavení barvy textu v&nbsp;buňce</td></tr>
<tr><td>2</td><td>format.set_fg_color()</td><td>barva popředí buňky</td></tr>
<tr><td>3</td><td>format.set_bg_color()</td><td>barva pozadí buňky</td></tr>
<tr><td>4</td><td>format.set_border_color()</td><td>barva všech okrajů buňky</td></tr>
<tr><td>5</td><td>format.set_bottom_color()</td><td>barva spodního okraje</td></tr>
<tr><td>6</td><td>format.set_top_color()</td><td>barva horního okraje</td></tr>
<tr><td>7</td><td>format.set_left_color()</td><td>barva levého okraje</td></tr>
<tr><td>8</td><td>format.set_right_color()</td><td>barva pravého okraje</td></tr>
</table>

<p>Nejprve si ukažme, jakým způsobem je možné změnit barvu textu v&nbsp;buňce.
Použijeme přitom metodu <strong>format.set_font_color</strong>, která je
zmíněna v&nbsp;předchozí tabulce:</p>

<pre>
style = <strong>workbook.add_format()</strong>
<strong>style.set_font_color(color)</strong>
</pre>

<p>Použití této metody v&nbsp;uceleném skriptu je snadné. Použijeme přitom
standardní jména barev rozpoznávaných knihovnou <i>XlsxWriter</i>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, nastavení barvy textu."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example17.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># nastavení šířky sloupců</i>
    worksheet.set_column('A:A', 20)
&nbsp;
    <i># barvy buněk</i>
    colors = (
            'black',
            'blue',
            'brown',
            'cyan',
            'gray',
            'green',
            'lime',
            'magenta',
            'navy',
            'orange',
            'pink',
            'purple',
            'red',
            'silver',
            'white',
            'yellow'
            )
&nbsp;
    <i># buňky s řetězci a různou barvou textu</i>
    for x, color in enumerate(colors):
        style = workbook.add_format()
        <strong>style.set_font_color(color)</strong>
        worksheet.write_string(x, 0, color, style)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Výsledkem bude tato tabulka:</p>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-17.png" class="image-493237" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 17: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Kód barvy textu určený šesticí hexadecimálních hodnot</h2>

<p>Kromě jména barvy je možné barvu textu, pozadí, okraje buňky atd. určit i
zápisem hodnoty barvových složek ve formátu <strong>#ffggbb</strong> (takzvaný
<i>hexa triplet</i>), v&nbsp;níž je každá barvová složka <a
href="https://en.wikipedia.org/wiki/RGB_color_model">z&nbsp;barvového prostoru
RGB</a> (tedy <i>RGB triplet</i>) určena dvojicí hexadecimálních hodnot a tedy
může nabývat hodnot z&nbsp;rozsahu 00 až FF. Tímto jednoduchým způsobem lze
(teoreticky) použít jakoukoli barvu z&nbsp;palety s&nbsp;více než 16 miliony
barev. Opět si pochopitelně ukážeme, jak lze takto zakódované barvy použít
v&nbsp;praxi:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, nastavení barvy textu."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example18.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># nastavení šířky sloupců</i>
    worksheet.set_column('A:A', 20)
&nbsp;
    <i># barvy buněk</i>
    colors = (
            '#000000',
            '#0000ff',
            '#800000',
            '#00ffff',
            '#808080',
            '#008000',
            '#00ff00',
            '#ff00ff',
            '#000080',
            '#ff6600',
            '#ff00ff',
            '#800080',
            '#ff0000',
            '#c0c0c0',
            '#ffffff',
            '#ffff00',
            )
&nbsp;
    <i># buňky s řetězci a různou barvou textu</i>
    for x, color in enumerate(colors):
        style = workbook.add_format()
        style.set_font_color(color)
        worksheet.write_string(x, 0, color, style)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Výsledek by měl v&nbsp;tomto případě odpovídat předchozí tabulce, protože
jsou použity hexa kódy pro pojmenované barvy:</p>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-18.png" class="image-493238" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 18: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Nastavení barvy pozadí buněk</h2>

<p>Stejně snadno jako barvu textu je možné v&nbsp;knihovně <i>XlsxWriter</i>
modifikovat i barvu pozadí vybrané buňky (resp.&nbsp;v&nbsp;našem případě
nikoli vybrané buňky, ale buňky, do níž právě zapisujeme data). Pro tento účel
se používá metoda <strong>format.set_bg_color</strong>. Pochopitelně je opět
možné pro specifikaci barvy pozadí zvolit některou z&nbsp;pojmenovaných barev
tak, jak je to ukázáno v&nbsp;dalším demonstračním příkladu:</p>

<pre>
style = <strong>workbook.add_format()</strong>
<strong>style.set_bg_color("red")</strong>
</pre>

<p>Tabulka, v&nbsp;níž jsou použity všechny pojmenované barvy podporované
knihovnou <i>XlsxWriter</i>, se vytvoří po spuštění tohoto skriptu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, nastavení barvy pozadí."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example19.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># nastavení šířky sloupců</i>
    worksheet.set_column('A:A', 20)
&nbsp;
    <i># barvy buněk</i>
    colors = (
            'black',
            'blue',
            'brown',
            'cyan',
            'gray',
            'green',
            'lime',
            'magenta',
            'navy',
            'orange',
            'pink',
            'purple',
            'red',
            'silver',
            'white',
            'yellow'
            )
&nbsp;
    <i># buňky s řetězci a různou barvou pozadí buněk</i>
    for x, color in enumerate(colors):
        style = workbook.add_format()
        style.set_bg_color(color)
        worksheet.write_string(x, 0, color, style)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-19.png" class="image-493239" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 19: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>

<p>Alternativní způsob specifikace barvy pozadí buňky spočívá v&nbsp;použití
<i>hexa tripletů</i> (tady &bdquo;podle CSS&ldquo; resp.&nbsp;&bdquo;podle
HTML&ldquo;). To již ostatně dobře známe z&nbsp;předchozí kapitoly, takže jen
v&nbsp;krátkosti:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, nastavení barvy pozadí."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example20.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># nastavení šířky sloupců</i>
    worksheet.set_column('A:A', 20)
&nbsp;
    <i># barvy buněk</i>
    colors = (
            '#000000',
            '#0000ff',
            '#800000',
            '#00ffff',
            '#808080',
            '#008000',
            '#00ff00',
            '#ff00ff',
            '#000080',
            '#ff6600',
            '#ff00ff',
            '#800080',
            '#ff0000',
            '#c0c0c0',
            '#ffffff',
            '#ffff00',
            )
&nbsp;
    <i># buňky s řetězci a různou barvou pozadí buněk</i>
    for x, color in enumerate(colors):
        style = workbook.add_format()
        style.set_bg_color(color)
        worksheet.write_string(x, 0, color, style)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/473/xlsxwriter1-20.png" class="image-493240" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="400" height="600" />
<p><i>Obrázek 20: Výsledný sešit otevřený v&nbsp;Gnumericu.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah druhé části článku</h2>

<p>V&nbsp;dnešním článku jsme se seznámili pouze se základními možnostmi
poskytovanými knihovnou <i>XlsxWriter</i>. Příště se zaměříme na některé
pokročilejší vlastnosti, například na vytváření sloučených buněk (velmi často
požadováno), podmíněné formáty buněk, definovaná jména buněk, podporu pro
validaci vstupních dat a samozřejmě nezapomeneme ani na podporu při vkládání
různých objektů do sešitů &ndash; obrázků, formátovaných textů, komentářů
atd.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 a nejnovější stabilní verzi knihovny XlsxWriter
byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_empty_worksheet.py</td><td>vytvoření prázdného sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/01_empty_worksheet.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/01_empty_worksheet.py</a></td></tr>
<tr><td> 2</td><td>02_with_statement.py</td><td>vytvoření prázdného sešitu, zajištění uzavření objektu worksheet</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/02_with_statement.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/02_with_statement.py</a></td></tr>
<tr><td> 3</td><td>03_simple_data.py</td><td>vytvoření sešitu s několika vyplněnými buňkami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/03_simple_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/03_simple_data.py</a></td></tr>
<tr><td> 4</td><td>04_alternative_addressing.py</td><td>vytvoření sešitu s několika vyplněnými buňkami, alternativní adresování buněk</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/04_alternative_addressing.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/04_alternative_addressing.py</a></td></tr>
<tr><td> 5</td><td>05_fill_in_table.py</td><td>vytvoření sešitu s delší tabulkou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/05_fill_in_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/05_fill_in_table.py</a></td></tr>
<tr><td> 6</td><td>06_column_widths.py</td><td>vytvoření sešitu s delší tabulkou, nastavení šířky sloupců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/06_column_widths.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/06_column_widths.py</a></td></tr>
<tr><td> 7</td><td>07_styles.py</td><td>nastavení stylů vybraných buněk</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/07_styles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/07_styles.py</a></td></tr>
<tr><td> 8</td><td>08_more_styles.py</td><td>nastavení stylů vybraných buněk</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/08_more_styles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/08_more_styles.py</a></td></tr>
<tr><td> 9</td><td>09_alternative_styles.py</td><td>alternativní způsob nastavení stylů vybraných buněk</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/09_alternative_styles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/09_alternative_styles.py</a></td></tr>
<tr><td>10</td><td>10_format_for_row.py</td><td>nastavení stylu celých řádků v&nbsp;sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/10_format_for_row.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/10_format_for_row.py</a></td></tr>
<tr><td>11</td><td>11_format_set_column.py</td><td>nastavení stylu celých sloupců v&nbsp;sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/11_format_set_column.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/11_format_set_column.py</a></td></tr>
<tr><td>12</td><td>12_write_proper_types.py</td><td>buňky s&nbsp;explicitní specifikací datového typu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/12_write_proper_types.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/12_write_proper_types.py</a></td></tr>
<tr><td>13</td><td>13_numeric_format.py</td><td>buňky se specifikací číselného formátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/13_numeric_format.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/13_numeric_format.py</a></td></tr>
<tr><td>14</td><td>14_numeric_format.py</td><td>buňky se specifikací číselného formátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/14_numeric_format.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/14_numeric_format.py</a></td></tr>
<tr><td>15</td><td>15_alternative_numeric_format.py</td><td>další způsob specifikace číselného formátu buněk tabulky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/15_alternative_numeric_format.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/15_alternative_numeric_format.py</a></td></tr>
<tr><td>16</td><td>16_font_size.py</td><td>změna velikosti písma v&nbsp;různých buňkách tabulky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/16_font_size.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/16_font_size.py</a></td></tr>
<tr><td>17</td><td>17_named_colors.py</td><td>použití pojmenovaných barev pro změnu barvy písma</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/17_named_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/17_named_colors.py</a></td></tr>
<tr><td>18</td><td>18_html_colors.py</td><td>použití šestice hexadecimálních číslic pro změnu barvy písma</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/18_html_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/18_html_colors.py</a></td></tr>
<tr><td>19</td><td>19_named_bg_colors.py</td><td>použití pojmenovaných barev pro změnu barvy pozadí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/19_named_bg_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/19_named_bg_colors.py</a></td></tr>
<tr><td>20</td><td>20_html_background_colors.py</td><td>použití šestice hexadecimálních číslic pro změnu barvy pozadí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/20_html_background_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/20_html_background_colors.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Comparison of spreadsheet software<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_spreadsheet_software">https://en.wikipedia.org/wiki/Comparison_of_spreadsheet_software</a>
</li>

<li>Creating Excel files with Python and XlsxWriter<br />
<a href="https://xlsxwriter.readthedocs.io/">https://xlsxwriter.readthedocs.io/</a>
</li>

<li>XlsxWriter<br />
<a href="https://github.com/jmcnamara/XlsxWriter">https://github.com/jmcnamara/XlsxWriter</a>
</li>

<li>openpyxl - A Python library to read/write Excel 2010 xlsx/xlsm files<br />
<a href="https://openpyxl.readthedocs.io/en/stable/index.html">https://openpyxl.readthedocs.io/en/stable/index.html</a>
</li>

<li>Spreadsheet Files<br />
<a href="https://fileinfo.com/filetypes/spreadsheet">https://fileinfo.com/filetypes/spreadsheet</a>
</li>

<li>OpenDocument<br />
<a href="https://en.wikipedia.org/wiki/OpenDocument">https://en.wikipedia.org/wiki/OpenDocument</a>
</li>

<li>Tvorba sešitů pro tabulkové procesory v&nbsp;programovacím jazyku Go<br />
<a href="https://www.root.cz/clanky/tvorba-sesitu-pro-tabulkove-procesory-v-programovacim-jazyku-go/">https://www.root.cz/clanky/tvorba-sesitu-pro-tabulkove-procesory-v-programovacim-jazyku-go/</a>
</li>

<li>Spreadsheet<br />
<a href="https://en.wikipedia.org/wiki/Spreadsheet">https://en.wikipedia.org/wiki/Spreadsheet</a>
</li>

<li>List of spreadsheet software<br />
<a href="https://en.wikipedia.org/wiki/List_of_spreadsheet_software">https://en.wikipedia.org/wiki/List_of_spreadsheet_software</a>
</li>

<li>Processing spreadsheet data in Go<br />
<a href="https://appliedgo.net/spreadsheet/">https://appliedgo.net/spreadsheet/</a>
</li>

<li>Comma-separated values<br />
<a href="https://en.wikipedia.org/wiki/Comma-separated_values">https://en.wikipedia.org/wiki/Comma-separated_values</a>
</li>

<li>Common Format and MIME Type for Comma-Separated Values (CSV) Files<br />
<a href="https://tools.ietf.org/html/rfc4180">https://tools.ietf.org/html/rfc4180</a>
</li>

<li>Tab-separated values<br />
<a href="https://en.wikipedia.org/wiki/Tab-separated_values">https://en.wikipedia.org/wiki/Tab-separated_values</a>
</li>

<li>Office Open XML (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Office_Open_XML">https://en.wikipedia.org/wiki/Office_Open_XML</a>
</li>

<li>Standard ECMA-376: Office Open XML File Formats<br />
<a href="https://www.ecma-international.org/publications/standards/Ecma-376.htm">https://www.ecma-international.org/publications/standards/Ecma-376.htm</a>
</li>

<li>A Simple File Format for NumPy Arrays<br />
<a href="https://docs.scipy.org/doc/numpy-1.14.2/neps/npy-format.html">https://docs.scipy.org/doc/numpy-1.14.2/neps/npy-format.html</a>
</li>

<li>numpy.lib.format<br />
<a href="https://numpy.org/devdocs/reference/generated/numpy.lib.format.html">https://numpy.org/devdocs/reference/generated/numpy.lib.format.html</a>
</li>

<li>The NumPy array: a structure for efficient numerical computation<br />
<a href="https://arxiv.org/pdf/1102.1523.pdf">https://arxiv.org/pdf/1102.1523.pdf</a>
</li>

<li>numpy.ndarray.tofile<br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile">https://numpy.org/doc/stable/reference/generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile</a>
</li>

<li>numpy.fromfile<br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.fromfile.html">https://numpy.org/doc/stable/reference/generated/numpy.fromfile.html</a>
</li>

<li>How to read part of binary file with numpy?<br />
<a href="https://stackoverflow.com/questions/14245094/how-to-read-part-of-binary-file-with-numpy">https://stackoverflow.com/questions/14245094/how-to-read-part-of-binary-file-with-numpy</a>
</li>

<li>How to read binary files in Python using NumPy?<br />
<a href="https://stackoverflow.com/questions/39762019/how-to-read-binary-files-in-python-using-numpy">https://stackoverflow.com/questions/39762019/how-to-read-binary-files-in-python-using-numpy</a>
</li>

<li>Understanding the Open XML file formats<br />
<a href="https://docs.microsoft.com/en-us/office/open-xml/understanding-the-open-xml-file-formats">https://docs.microsoft.com/en-us/office/open-xml/understanding-the-open-xml-file-formats</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

