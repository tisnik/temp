<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Novinky v typovém systému přidané do Pythonu 3.12</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Novinky v typovém systému přidané do Pythonu 3.12</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Novinky v&nbsp;typovém systému přidané do Pythonu 3.12</a></p>
<p><a href="#k02">2. Typové parametry funkcí</a></p>
<p><a href="#k03">3. Nový způsob zápisu typových parametrů funkcí</a></p>
<p><a href="#k04">4. Zápis většího množství typových parametrů</a></p>
<p><a href="#k05">5. Přepis do syntaxe Pythonu 3.12</a></p>
<p><a href="#k06">6. Chování funkce <strong>pair[T, T]()</strong> při předání hodnot různých typů</a></p>
<p><a href="#k07">7. Typové parametry tříd</a></p>
<p><a href="#k08">8. Statická kontrola typů u tříd s&nbsp;typovými parametry</a></p>
<p><a href="#k09">9. Přepis do syntaxe Pythonu 3.12</a></p>
<p><a href="#k10">10. Dekorátor <strong>@override</strong></a></p>
<p><a href="#k11">11. Ukázka použití dekorátoru <strong>@override</strong></a></p>
<p><a href="#k12">12. Úprava pro starší nástroje</a></p>
<p><a href="#k13">*** 13. Klíčové slovo <strong>type</strong></a></p>
<p><a href="#k14">*** 14. Závěr</a></p>
<p><a href="#k15">*** 15. Příloha: překlad Pythonu 3.12</a></p>
<p><a href="#k16">16. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k17">17. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Novinky v&nbsp;typovém systému přidané do Pythonu 3.12</h2>

<p>V&nbsp;Pythonu 3.12 můžeme najít poměrně velké množství novinek, které jsou
shrnuty například na stránce <a
href="https://docs.python.org/3/whatsnew/3.12.html">https://docs.python.org/3/whatsnew/3.12.html</a>.
Z&nbsp;hlediska syntaxe a sémantiky Pythonu je nejdůležitější hned první
zmíněná novinka &ndash; podpora nového zápisu typových parametrů a navíc i
zavedení nového klíčového slova <strong>type</strong>, které je možné použít
pro definici nových pojmenovaných datových typů. V&nbsp;dnešním článku se
s&nbsp;těmito novinkami seznámíme, ovšem ukážeme si taktéž to, do jaké míry
jsou tyto novinky využity v&nbsp;nástroji <i>Mypy</i> a jak vypadá starší
(kompatibilní) způsob práce s&nbsp;typovými informacemi, které je možné do
zdrojových kódů Pythonu přidávat (<i>type hints</i>).</p>

<p>Seznámíme se i s&nbsp;dalšími novinkami, například s&nbsp;existencí
dekorátoru <strong>@override</strong>, který má podobný význam, jako je tomu
v&nbsp;Javě.</p>

<p><div class="rs-tip-major">Poznámka: samotný interpretr Pythonu sice
s&nbsp;datovými typy do určité míry pracuje, ovšem nekontroluje správnost
jejich použití, alespoň ne v&nbsp;současné verzi. I proto je nutné využít
možností dalších nástrojů, mezi které patří i výše zmíněný nástroj
<i>Mypy</i>.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Typové parametry funkcí</h2>

<p>Začneme způsobem specifikace typových parametrů u funkcí. Stávající způsob,
který je kompatibilní i s&nbsp;nástrojem <i>Mypy</i>, je založen na definici
nových typů s&nbsp;využitím <strong>TypeVar</strong>:</p>

<pre>
T = TypeVar('T')
</pre>

<p>Takto definovaný typ lze použít například pro specifikaci typů parametrů
funkce i pro specifikaci typu návratové hodnoty (či hodnot). Můžeme si
například nadefinovat funkci, která akceptuje dva parametry stejného typu
<strong>T</strong> (přičemž ovšem nespecifikujeme, o jaký konkrétní typ se
jedná, jen že oba parametry musí být stejného typu) a současně určíme, že
funkce vrátí dvojici hodnot, které budou taktéž stejného typu
<strong>T</strong>:</p>

<pre>
from typing import TypeVar, Tuple
&nbsp;
T = TypeVar('T')
&nbsp;
&nbsp;
def <strong>pair</strong>(first: T, second: T) -&gt; Tuple[T, T]:
    x = (first, second)
    return x
&nbsp;
&nbsp;
print(pair("A", "B"))
</pre>

<p>Nástroje typu <i>Mypy</i> dokážou v&nbsp;takovém případě zajistit, aby oba
předávané parametry měly skutečně shodný typ (viz další text) a dokážou
samozřejmě odvodit i typ výsledné dvojice.</p>

<p>Ostatně si můžeme snadno ověřit korektnost tohoto příkladu:</p>

<pre>
$ <strong>mypy generics-2.py </strong>
&nbsp;
Success: no issues found in 1 source file
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Nový způsob zápisu typových parametrů funkcí</h2>

<p>Funkci, kterou jsme si ukázali <a href="#k02">v&nbsp;předchozí kapitole</a>,
lze v&nbsp;Pythonu 3.12 zapsat kratším způsobem, který se navíc začíná podobat
syntaxi, kterou známe i z&nbsp;jiných mainstreamových programovacích jazyků.
Obecné jméno typového parametru (nebo, jak uvidíme dále, více parametrů) se
zapíše do hranatých závorek za jménem funkce. Zcela se tedy vynechává volání
<strong>TypeVar</strong> a zápis funkce je tak více odizolován od ostatního
programového kódu (což je jen dobře &ndash; čím méně kontextu je zapotřebí
znát, tím lépe):</p>

<pre>
from typing import Tuple
&nbsp;
&nbsp;
def <strong>pair[T]</strong>(first: T, second: T) -&gt; Tuple[T, T]:
    x = (first, second)
    return x
&nbsp;
&nbsp;
print(pair("A", "B"))
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;praxi lze většinou i vynechat
import typů z&nbsp;balíčku <strong>typing</strong>, což v&nbsp;praxi znamená,
že namísto <strong>typing.List</strong> se pro definici typu použije přímo
<strong>list</strong> atd.</div></p>

<p>Tento způsob prozatím není v&nbsp;Mypy podporován:</p>

<pre>
$ <strong>mypy generics-1.py </strong>
&nbsp;
generics-1.py:4: error: invalid syntax  [syntax]
Found 1 error in 1 file (errors prevented further checking)
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Zápis většího množství typových parametrů</h2>

<p>V&nbsp;případě, že budeme chtít nadeklarovat funkci, která akceptuje dva
parametry obecně různých typů <strong>T</strong> a <strong>U</strong> a vrací
dvojici s&nbsp;prvky typu <strong>T, U</strong>, můžeme použít buď starší zápis
kompatibilní s&nbsp;Mypy nebo zápis novější, který je podporován Pythonem 3.12.
Ukažme si nejdříve starší zápis, který spočívá v&nbsp;tom, že explicitně
nadeklarujeme dva typové identifikátory <strong>T</strong> a <strong>U</strong>
zavoláním <strong>TypeVar</strong>. Poté již tyto identifikátory použijeme
běžným způsobem:</p>

<pre>
from typing import TypeVar, Tuple
&nbsp;
T = TypeVar('T')
U = TypeVar('U')
&nbsp;
&nbsp;
def <strong>pair</strong>(first: T, second: U) -&gt; Tuple[T, U]:
    x = (first, second)
    return x
&nbsp;
&nbsp;
reveal_type(pair(1, 2))
reveal_type(pair(0, "B"))
reveal_type(pair("A", 42))
reveal_type(pair("A", "B"))
</pre>

<p>Nástrojem <i>Mypy</i> se nyní můžeme přesvědčit, že typ funkce (při volání)
je správně odvozen a že je odvozen i její návratový typ:</p>

<pre>
$ <strong>mypy generics-4.py </strong>
&nbsp;
generics-4.py:12: note: Revealed type is "Tuple[builtins.int, builtins.int]"
generics-4.py:13: note: Revealed type is "Tuple[builtins.int, builtins.str]"
generics-4.py:14: note: Revealed type is "Tuple[builtins.str, builtins.int]"
generics-4.py:15: note: Revealed type is "Tuple[builtins.str, builtins.str]"
Success: no issues found in 1 source file
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Přepis do syntaxe Pythonu 3.12</h2>

<p>Příklad <a href="#k04">z&nbsp;předchozí kapitoly</a> je relativně snadno
přepsatelný do podoby využívající novou syntaxi Pythonu 3.12. Povšimněte si, že
typové parametry se opět zapisují do hranatých závorek uvedených za jménem
funkce a že jsou odděleny čárkou:</p>

<pre>
from typing import Tuple
&nbsp;
&nbsp;
def <strong>pair[T, U]</strong>(first: T, second: U) -&gt; Tuple[T, U]:
    x = (first, second)
    return x
&nbsp;
&nbsp;
print(pair("A", "B"))
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Chování funkce <strong>pair[T, T]()</strong> při předání hodnot různých typů</h2>

<p>Nyní se zaměřme na možná poněkud matoucí chování typového systému Pythonu.
Zkusme funkci, která akceptuje dvojici hodnot <i>stejných</i> typů předat
řetězec a celé číslo:</p>

<pre>
from typing import TypeVar, Tuple
&nbsp;
T = TypeVar('T')
&nbsp;
&nbsp;
def <strong>pair</strong>(first: T, second: T) -&gt; Tuple[T, T]:
    x = (first, second)
    return x
&nbsp;
&nbsp;
print(pair("A", 42))
</pre>

<p>Kontrola nástrojem <i>Mypy</i> kupodivu projde naprosto bez problémů:</p>

<pre>
$ <strong>mypy generics-5.py </strong>
&nbsp;
Success: no issues found in 1 source file
</pre>

<p>Proč tomu tak je odhalí nepatrně upravený příklad, v&nbsp;němž funkci
<strong>pair</strong> postupně předáme různé kombinace parametrů a
s&nbsp;využitím <strong>reveal_type</strong> (nabízené nástrojem <i>Mypy</i>)
zjistíme, jakého typu je výsledná n-tice:</p>

<pre>
from typing import TypeVar, Tuple
&nbsp;
T = TypeVar('T')
&nbsp;
&nbsp;
def <strong>pair</strong>(first: T, second: T) -&gt; Tuple[T, T]:
    x = (first, second)
    return x
&nbsp;
&nbsp;
reveal_type(pair(1, 2))
reveal_type(pair(0, "B"))
reveal_type(pair("A", 42))
reveal_type(pair("A", "B"))
</pre>

<p>Z&nbsp;výsledků je patrné, že výsledná n-tice buď obsahuje dvojici celých
čísel (korektní), dvojici řetězců (taktéž korektní) a u obou
&bdquo;divných&ldquo; kombinací se vrací dvojice objektů, protože je to
nejbližší typ, který může reprezentovat jak celá čísla (<strong>int</strong>),
tak i řetězce (<strong>str</strong>):</p>

<pre>
$ <strong>mypy generics-6.py </strong>
&nbsp;
generics-6.py:11: note: Revealed type is "Tuple[builtins.int, builtins.int]"
generics-6.py:12: note: Revealed type is "Tuple[builtins.object, builtins.object]"
generics-6.py:13: note: Revealed type is "Tuple[builtins.object, builtins.object]"
generics-6.py:14: note: Revealed type is "Tuple[builtins.str, builtins.str]"
Success: no issues found in 1 source file
</pre>

<p>Ovšem samotné typy prvků se v&nbsp;runtime nezmění:</p>

<pre>
from typing import TypeVar, Tuple
&nbsp;
T = TypeVar('T')
&nbsp;
&nbsp;
def <strong>pair</strong>(first: T, second: T) -&gt; Tuple[T, T]:
    x = (first, second)
    return x
&nbsp;
&nbsp;
p = pair(0, "B")
print(type(p[0]))
print(type(p[1]))
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
&lt;class 'int'&gt;
&lt;class 'str'&gt;
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Typové parametry tříd</h2>

<p>Typové parametry lze specifikovat i u tříd. Opět se nejprve podívejme na
způsob zápisu, který je kompatibilní i se staršími nástroji typu <i>Mypy</i>,
které ještě nepřešly na novou syntaxi Pythonu 3.12. Vytvoříme si třídu
představující jednoduchou kolekci se dvěma metodami, přičemž už při konstrukci
třídy určíme, prvky jakého typu je možné do takové kolekce přidat a jaké prvky
z&nbsp;kolekce získáme. Z&nbsp;důvodu již zmíněné kompatibility se staršími
nástroji použijeme <strong>TypeVar</strong> a zápis bude vypadat
následovně:</p>

<pre>
from typing import TypeVar, Generic
from typing import List
&nbsp;
&nbsp;
T = TypeVar('T')
&nbsp;
&nbsp;
class <strong>Collection</strong>(Generic[T]):
    def <strong>__init__</strong>(self) -&gt; None:
        self.collection : List[T] = []
&nbsp;
    def <strong>append</strong>(self, item: T) -&gt; None:
        self.collection.append(item)
&nbsp;
    def <strong>get_all</strong>(self) -&gt; List[T]:
        return self.collection
&nbsp;
&nbsp;
c = Collection[int]()
c.append(1)
c.append(2)
print(c.get_all())
</pre>

<p>Kontrola nástrojem <i>Mypy</i> by v&nbsp;tomto příkladu neměla nalézt žádné
chyby:</p>

<pre>
$ <strong>mypy collection-1.py</strong>
&nbsp;
Success: no issues found in 1 source file
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Statická kontrola typů u tříd s&nbsp;typovými parametry</h2>

<p>Pokusme se nyní vytvořit instanci naší třídy <strong>Collection</strong>,
přičemž budeme vyžadovat, aby prvky kolekce byly typu <strong>int</strong>.
Následně se pokusíme do takto zkonstruované kolekce vložit řetězec:</p>

<pre>
from typing import TypeVar, Generic
from typing import List
&nbsp;
&nbsp;
T = TypeVar('T')
&nbsp;
&nbsp;
class <strong>Collection</strong>(Generic[T]):
    def __init__(self) -&gt; None:
        self.collection : List[T] = []
&nbsp;
    def <strong>append</strong>(self, item: T) -&gt; None:
        self.collection.append(item)
&nbsp;
    def <strong>get_all</strong>(self) -&gt; List[T]:
        return self.collection
&nbsp;
&nbsp;
c = Collection[int]()
c.append(1)
c.append("foo")
</pre>

<p>Tento prohřešek proti typovému systému je správně rozpoznán při statické
typové kontrole:</p>

<pre>
$ <strong>mypy collection-2.py</strong>
&nbsp;
collection-2.py:21: error: Argument 1 to "append" of "Collection" has incompatible type "str"; expected "int"  [arg-type]
Found 1 error in 1 file (checked 1 source file)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Přepis do syntaxe Pythonu 3.12</h2>

<p>Přepis skriptu <a href="#k08">z&nbsp;předchozí kapitoly</a> tak, aby se
využila nová syntaxe zavedená v&nbsp;Pythonu 3.12, bude vypadat následovně.
Namísto <strong>TypeVar</strong> a určení předka třídy zapíšeme identifikátor
typu do hranatých závorek za jméno třídy:</p>

<pre>
from typing import List
&nbsp;
&nbsp;
class <strong>Collection[T]</strong>():
    def <strong>__init__</strong>(self) -&gt; None:
        self.collection : List[T] = []
&nbsp;
    def <strong>append</strong>(self, item: T) -&gt; None:
        self.collection.append(item)
&nbsp;
    def <strong>get_all</strong>(self) -&gt; List[T]:
        return self.collection
&nbsp;
&nbsp;
c = Collection[int]()
c.append(1)
c.append("foo")
</pre>

<p>Ve skutečnosti můžeme namísto typu <strong>typing.List</strong> použít přímo
<strong>list</strong>, takže je programový kód ještě kratší a v&nbsp;tomto
případě i přehlednější:</p>

<pre>
class <strong>Collection[T]</strong>():
    def <strong>__init__</strong>(self) -&gt; None:
        self.collection : list[T] = []
&nbsp;
    def <strong>append</strong>(self, item: T) -&gt; None:
        self.collection.append(item)
&nbsp;
    def <strong>get_all</strong>(self) -&gt; list[T]:
        return self.collection
&nbsp;
&nbsp;
c = Collection[int]()
c.append(1)
c.append("foo")
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Dekorátor <strong>@override</strong></h2>

<p>V&nbsp;Pythonu se taktéž objevuje nový dekorátor, který se jmenuje
<strong>override</strong>. Tento dekorátor nalezneme v&nbsp;balíčku
<strong>typing</strong>. Podobný zápis najdeme například v&nbsp;Javě (kde se
však jedná o anotaci &ndash; což je méně mocný nástroj než dekorátor), kde je
určen ke statické kontrole při překladu, zda metoda takto označená skutečně
překrývá metodu předka. Pokud například programátor napíše špatné jméno metody
(překlep), nemá překladač jinou možnost jak zjistit, že se má jednat o novou
metodu nebo jde o špatně zapsané jméno metody předka. V&nbsp;Pythonu je význam
stejný, ovšem s&nbsp;tím, že kontrolu neprovádí překladač (CPython je ostatně
interpretovaný), ale předpokládá se použití specializovaných nástrojů pro
statické typové kontroly.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Ukázka použití dekorátoru <strong>@override</strong></h2>

<p>Použití dekorátoru <strong>@override</strong> je triviální. Postačuje ho
nejprve naimportovat a posléze jím označit ty metody potomka, které překrývají
metody předka. Ukažme si jednoduchý příklad, kde jak předek, tak i jeho potomek
mají pouze jedinou metodu <strong>eat</strong>:</p>

<pre>
from typing import override
&nbsp;
class <strong>Fruit</strong>:
    def <strong>eat</strong>(self):
        pass
&nbsp;
class <strong>Apple</strong>(Fruit):
    <u>@override</u>
    def <strong>eat</strong>(self):
        pass
</pre>

<p>Statická typová kontrola by měla detekovat nekorektní použití dekorátoru (a
nebo špatné jméno metody) v&nbsp;tomto případě. Jméno metody v&nbsp;potomkovi
se liší od jména metody předka, i když programátor dal najevo, že chce metodu
překrýt:</p>

<pre>
from typing import override
&nbsp;
class <strong>Fruit</strong>:
    def <strong>eat</strong>(self):
        pass
&nbsp;
class <strong>Apple</strong>(Fruit):
    <u>@override</u>
    def <strong>eat_apple</strong>(self):
        pass
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Úprava pro starší nástroje</h2>

<p>Pro starší nástroje, například pro <i>Mypy</i>, se dekorátor
<strong>@override</strong> musí naimportovat z&nbsp;balíčku
<strong>typing_extensions</strong>. Výsledný program se tedy liší pouze
odlišným importem:</p>

<pre>
from typing_extensions import override
&nbsp;
class <strong>Fruit</strong>:
    def <strong>eat</strong>(self):
        pass
&nbsp;
class <strong>Apple</strong>(Fruit):
    <u>@override</u>
    def <strong>eat</strong>(self):
        pass
</pre>

<p>Ovšem <i>Mypy</i> bude kontrolu tohoto dekorátoru provádět pouze ve chvíli,
kdy jsou u metod uvedeny typy. Opět si samozřejmě ukažme příklad, v&nbsp;němž
je tato úprava provedena:</p>

<pre>
from typing_extensions import override
&nbsp;
class <strong>Fruit</strong>:
    def <strong>eat</strong>(self) -&gt; None:
        pass
&nbsp;
class <strong>Apple</strong>(Fruit):
    <u>@override</u>
    def <strong>eat_apple</strong>(self) -&gt; None:
        pass
</pre>

<p>V&nbsp;tomto případě již <i>Mypy</i> správně odhalí chybu:</p>

<pre>
override-4.py:9: error: Method "eat_apple" is marked as an override, but no base method was found with this name  [misc]
Found 1 error in 1 file (checked 1 source file)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Klíčové slovo <strong>type</strong></h2>

<p>V&nbsp;Pythonu 3.12 se objevuje i nové klíčové slovo <strong>type</strong>.
To je možné použít pro zjednodušení deklarace nových datových typů. Použití
tohoto klíčového slova je snadné, jak je to ostatně patrné i z&nbsp;následující
ukázky, v&nbsp;níž nejdříve nadeklarujeme dva nové datové typy a posléze je
použijeme při určení typů parametrů funkce
<strong>print_score_table</strong>:</p>

<pre>
type Names = List[str]
type Scores = List[int]
&nbsp;
&nbsp;
def <strong>print_score_table</strong>(names: Names, scores: Scores) -&gt; None:
    for name, score in zip(names, scores):
        print(name, score)
&nbsp;
&nbsp;
print_score_table(["aa", "bb"], [1, 2])
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Závěr</h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Příloha: překlad Pythonu 3.12</h2>

<p>Vzhledem k&nbsp;tomu, že Python 3.12 prozatím nebývá nabízen všemi
standardními distribucemi Linuxu, můžeme si provést jeho překlad, slinkování a
popř.&nbsp;i instalaci. Nejedná se o nic složitého (otestováno na Fedoře a
Mintu).</p>

<p>Nejdříve je nutné nainstalovat tooling jazyka C a některé použité
knihovny:</p>

<pre>
$ <strong>sudo dnf install wget yum-utils make gcc openssl-devel bzip2-devel libffi-devel zlib-devel</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: pochopitelně nahraďte
<strong>dnf</strong> za <strong>apt.get</strong> atd., podle toho, jakou
používáte distribuci.</div></p>

<p>Dále si stáhněte tarball se zdrojovými kódy Pythonu 3.12 (zde konkrétně se
jedná o 3.12.1, v&nbsp;době psaní článku další setinkové verze nebyly
k&nbsp;dispozici):</p>

<pre>
$ <strong>wget https://www.python.org/ftp/python/3.12.1/Python-3.12.1.tgz</strong>
</pre>

<p>Rozbalte stažený tarball příkazem:</p>

<pre>
$ <strong>tar xzf Python-3.12.1.tgz</strong>
</pre>

<p>Následuje přesun do adresáře se zdrojovými kódy a konfigurace na základě
možností poskytovaných operačním systémem:</p>

<pre>
$ <strong>cd Python-3.12.1</strong>
$ <strong>./configure --with-system-ffi --with-computed-gotos</strong>
</pre>

<p>Překlad je proveden příkazem <strong>make</strong>, kterému je vhodné předat
počet paralelně běžících úloh. Ten by měl odpovídat počtu procesorových jader
(například 16):</p>

<pre>
$ <strong>make -j 16</strong>
</pre>

<p>Výsledný binární soubor můžete zmenšit příkazem <strong>strip</strong>:</p>

<pre>
$ <strong>strip python</strong>
&nbsp;
$ <strong>ls -l -h python</strong>
-rwxrwxr-x 1 ptisnovs ptisnovs 6,9M Dec 13 18:47 python
</pre>

<p>Nově přeložený interpret si můžeme ihned spustit:</p>

<pre>
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty, které jsme si v&nbsp;dnešním článku (i
v&nbsp;obou předchozích článcích) ukázali, naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady. Pro spuštění starších příklad je nutné
mít nainstalován balíček <i>mypy</i> společně s&nbsp;Pythonem alespoň 3.7. Nové
příklady (u nichž je to napsáno) vyžadují Python 3.12:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>adder1.py</td><td>funkce <strong>add</strong> bez typových anotací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder1.py</a></td></tr>
<tr><td> 2</td><td>adder2.py</td><td>funkce <strong>add</strong> s&nbsp;typovými anotacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder2.py</a></td></tr>
<tr><td> 3</td><td>adder3.py</td><td>funkce <strong>add</strong> volaná s&nbsp;hodnotami <strong>True</strong> a <strong>False</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder3.py</a></td></tr>
<tr><td> 4</td><td>adder4.py</td><td>funkce <strong>add</strong> akceptující hodnoty typu <strong>bool</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder4.py</a></td></tr>
<tr><td> 5</td><td>adder5.py</td><td>zobrazení typových informací pro funkci bez typových anotací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder5.py</a></td></tr>
<tr><td> 6</td><td>adder6.py</td><td>zobrazení typových informací pro funkci s&nbsp;typovými anotacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/adder6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>exec_problem_1.py</td><td>funkce <strong>add</strong> s&nbsp;typovými anotacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_1.py</a></td></tr>
<tr><td> 6</td><td>exec_problem_2.py</td><td>korektní detekce volání funkce <strong>add</strong> s&nbsp;nekompatibilními hodnotami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_2.py</a></td></tr>
<tr><td> 7</td><td>exec_problem_3.py</td><td>příkaz použitý v&nbsp;<strong>exec</strong> není statickým analyzátorem zachycen</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/exec_problem_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>list_type1.py</td><td>typ seznam, s&nbsp;inicializací (bez prvků), pro Python 3.10</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type1.py</a></td></tr>
<tr><td> 9</td><td>list_type2.py</td><td>typ seznam, s&nbsp;inicializací (bez prvků), pro starší verze Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type2.py</a></td></tr>
<tr><td>10</td><td>list_type3.py</td><td>typ seznam, s&nbsp;inicializací (s&nbsp;prvky), pro starší verze Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type3.py</a></td></tr>
<tr><td>11</td><td>list_type4.py</td><td>typ seznam, kontrola použití prvků s&nbsp;nekorektními typy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type4.py</a></td></tr>
<tr><td>12</td><td>list_type5.py</td><td>typ seznam, kontrola použití prvků s&nbsp;korektními typy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type5.py</a></td></tr>
<tr><td>13</td><td>list_type6.py</td><td>typ seznam, kontrola použití prvků s&nbsp;korektními typy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_type6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>14</td><td>tuple_type1.py</td><td>typ n-tice (nekorektní specifikace typu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type1.py</a></td></tr>
<tr><td>15</td><td>tuple_type2.py</td><td>typ n-tice (korektní specifikace typu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type2.py</a></td></tr>
<tr><td>16</td><td>tuple_type3.py</td><td>typ n-tice, v&nbsp;níž má každý prvek odlišný typ</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type3.py</a></td></tr>
<tr><td>17</td><td>tuple_type4.py</td><td>typ n-tice, v&nbsp;níž má každý prvek odlišný typ</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/tuple_type4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>json_check.py</td><td>delší kód v&nbsp;Pythonu bez typových anotací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/json_check.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/json_check.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>Variance1.java</td><td>variance v&nbsp;Javě &ndash; korektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.java">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.java</a></td></tr>
<tr><td>20</td><td>Variance2.java</td><td>variance v&nbsp;Javě &ndash; nekorektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.java">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.java</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>Variance1.py</td><td>variance v&nbsp;Pythonu &ndash; korektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance1.py</a></td></tr>
<tr><td>22</td><td>Variance2.py</td><td>variance v&nbsp;Pythonu &ndash; nekorektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance2.py</a></td></tr>
<tr><td>23</td><td>Variance3.py</td><td>variance v&nbsp;Pythonu &ndash; nekorektní příklad použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance3.py</a></td></tr>
<tr><td>24</td><td>Variance4.py</td><td>použití typu <strong>Sequence</strong> namísto <strong>List</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/Variance4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>25</td><td>view_pyc.py</td><td>jednoduchá prohlížečka souborů .pyc</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/view_pyc.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/view_pyc.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>callable1.py</td><td>funkce s&nbsp;typovými informacemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable1.py</a></td></tr>
<tr><td>27</td><td>callable2.py</td><td>variance funkcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable2.py</a></td></tr>
<tr><td>28</td><td>callable3.py</td><td>variance funkcí (nekorektní příklad)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable3.py</a></td></tr>
<tr><td>29</td><td>callable4.py</td><td>korektní řešení problému z&nbsp;kódu <strong>callable3.py</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/callable4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>30</td><td>dict_type1.py</td><td>slovník bez specifikace informací o typech (homogenní struktura)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type1.py</a></td></tr>
<tr><td>31</td><td>dict_type2.py</td><td>slovník bez specifikace informací o typech (heterogenní struktura)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type2.py</a></td></tr>
<tr><td>32</td><td>dict_type3.py</td><td>typově silný slovník (heterogenní struktura)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type3.py</a></td></tr>
<tr><td>33</td><td>dict_type4.py</td><td>typově silný slovník (homogenní struktura)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type4.py</a></td></tr>
<tr><td>34</td><td>dict_type5.py</td><td>použití typu <strong>Union</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type5.py</a></td></tr>
<tr><td>35</td><td>dict_type6.py</td><td>použití typu <strong>Union</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type6.py</a></td></tr>
<tr><td>36</td><td>dict_type7.py</td><td>použití typu <strong>Optional</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type7.py</a></td></tr>
<tr><td>37</td><td>dict_type8.py</td><td>použití typu <strong>Optional</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_type8.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>38</td><td>sprites1.py</td><td>původní kód před refaktoringem a bez typových informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites1.py</a></td></tr>
<tr><td>39</td><td>sprites2.py</td><td>refaktoring kódu <strong>sprites1.py</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites2.py</a></td></tr>
<tr><td>40</td><td>sprites3.py</td><td>přidání typových informací do kódu <strong>sprites2.py</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites3.py</a></td></tr>
<tr><td>41</td><td>sprites4.py</td><td>oprava chyb nalezených v&nbsp;kódu <strong>sprites3.py</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites4.py</a></td></tr>
<tr><td>42</td><td>sprites5.py</td><td>doplnění generických typů pro volbu <strong>--strict</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites5.py</a></td></tr>
<tr><td>43</td><td>sprites6.py</td><td>definice a použití nového datového typu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/sprites6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>44</td><td>reveal_type1.py</td><td>selektivní zjištění typu proměnné či třídy nástrojem Mypy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type1.py</a></td></tr>
<tr><td>45</td><td>reveal_type2.py</td><td>selektivní zjištění typu funkce nástrojem Mypy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type2.py</a></td></tr>
<tr><td>46</td><td>reveal_type3.py</td><td>typová inference</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type3.py</a></td></tr>
<tr><td>47</td><td>reveal_type4.py</td><td>typová inference</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type4.py</a></td></tr>
<tr><td>48</td><td>reveal_type5.py</td><td>explicitní definice typu versus typová inference</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_type5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>49</td><td>reveal_locals1.py</td><td>zjištění typů všech lokálních proměnných</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_locals1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_locals1.py</a></td></tr>
<tr><td>50</td><td>reveal_locals2.py</td><td>zjištění typů všech lokálních proměnných</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_locals2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_locals2.py</a></td></tr>
<tr><td>51</td><td>reveal_locals3.py</td><td>zjištění typů všech lokálních proměnných</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_locals3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/reveal_locals3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>52</td><td>list_sequence.py</td><td>měnitelné seznamy vs. neměnitelné sekvence</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_sequence.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/list_sequence.py</a></td></tr>
<tr><td>53</td><td>dict_mapping.py</td><td>měnitelné slovníky vs. neměnitelné mapování</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_mapping.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/dict_mapping.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>54</td><td>collection-1.py</td><td>generická kolekce, varianta kompatibilní se staršími verzemi Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/collection-1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/collection-1.py</a></td></tr>
<tr><td>55</td><td>collection-2.py</td><td>generická kolekce, použití nekorektních typů při jejím použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/collection-2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/collection-2.py</a></td></tr>
<tr><td>56</td><td>collection-3.py</td><td>generická kolekce, varianta určená pro Python 3.12</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/collection-3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/collection-3.py</a></td></tr>
<tr><td>57</td><td>collection-4.py</td><td>generická kolekce, použití nekorektních typů při jejím použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/collection-4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/collection-4.py</a></td></tr>
<tr><td>58</td><td>generics-1.py</td><td>generická funkce, varianta určená pro Python 3.12</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/generics-1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/generics-1.py</a></td></tr>
<tr><td>59</td><td>generics-2.py</td><td>generická funkce, varianta kompatibilní se staršími verzemi Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/generics-2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/generics-2.py</a></td></tr>
<tr><td>60</td><td>generics-3.py</td><td>použití dvou různých typů, varianta určená pro Python 3.12</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/generics-3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/generics-3.py</a></td></tr>
<tr><td>61</td><td>generics-4.py</td><td>použití dvou různých typů, varianta kompatibilní se staršími verzemi Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/generics-4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/generics-4.py</a></td></tr>
<tr><td>62</td><td>generics-5.py</td><td>volání s&nbsp;různými typy parametrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/generics-5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/generics-5.py</a></td></tr>
<tr><td>63</td><td>generics-6.py</td><td>využití <strong>reveal_types</strong> z&nbsp;balíčku Mypy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/generics-6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/generics-6.py</a></td></tr>
<tr><td>64</td><td>generics-7.py</td><td>výpis typů prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/generics-7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/generics-7.py</a></td></tr>
<tr><td>65</td><td>override-1.py</td><td>dekorátor @override, varianta určená pro Python 3.12</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/override-1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/override-1.py</a></td></tr>
<tr><td>56</td><td>override-2.py</td><td>dekorátor @override, nekorektní použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/override-2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/override-2.py</a></td></tr>
<tr><td>56</td><td>override-3.py</td><td>dekorátor @override, varianta určená pro Mypy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/override-3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/override-3.py</a></td></tr>
<tr><td>57</td><td>override-4.py</td><td>dekorátor @override, metody s&nbsp;typy, varianta určená pro Mypy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/override-4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/override-4.py</a></td></tr>
<tr><td>58</td><td>type-1.py</td><td>nové klíčové slovo <strong>type</strong> v&nbsp;Pythonu 3.12</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/type-1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/type-1.py</a></td></tr>
</table>



<p><a name="k17"></a></p>
<h2 id="k17">17. Odkazy na Internetu</h2>

<ol>

<li>What’s New In Python 3.12 (official)<br />
<a href="https://docs.python.org/3/whatsnew/3.12.html">https://docs.python.org/3/whatsnew/3.12.html</a>
</li>

<li>What’s New In Python 3.12<br />
<a href="https://dev.to/mahiuddindev/python-312-4n43">https://dev.to/mahiuddindev/python-312-4n43</a></li>

<li>PEP 698 – Override Decorator for Static Typing<br />
<a href="https://peps.python.org/pep-0698/">https://peps.python.org/pep-0698/</a>
</li>

<li>typing.override<br />
<a href="https://docs.python.org/3/library/typing.html#typing.override">https://docs.python.org/3/library/typing.html#typing.override</a>
</li>

<li>Type Hinting<br />
<a href="https://realpython.com/lessons/type-hinting/">https://realpython.com/lessons/type-hinting/</a>
</li>

<li>mypy homepage<br />
<a href="https://www.mypy-lang.org/">https://www.mypy-lang.org/</a>
</li>

<li>mypy documentation<br />
<a href="https://mypy.readthedocs.io/en/stable/">https://mypy.readthedocs.io/en/stable/</a>
</li>

<li>Mypy na PyPi Optional static typing for Python<br />
<a href="https://pypi.org/project/mypy/">https://pypi.org/project/mypy/</a>
</li>

<li>5 Reasons Why You Should Use Type Hints In Python<br />
<a href="https://www.youtube.com/watch?v=dgBCEB2jVU0">https://www.youtube.com/watch?v=dgBCEB2jVU0</a>
</li>

<li>Python Typing &ndash; Type Hints &amp; Annotations<br />
<a href="https://www.youtube.com/watch?v=QORvB-_mbZ0">https://www.youtube.com/watch?v=QORvB-_mbZ0</a>
</li>

<li>What Problems Can TypeScript Solve?<br />
<a href="https://www.typescriptlang.org/why-create-typescript">https://www.typescriptlang.org/why-create-typescript</a>
</li>

<li>How to find code that is missing type annotations?<br />
<a href="https://stackoverflow.com/questions/59898490/how-to-find-code-that-is-missing-type-annotations">https://stackoverflow.com/questions/59898490/how-to-find-code-that-is-missing-type-annotations</a>
</li>

<li>Do type annotations in Python enforce static type checking?<br />
<a href="https://stackoverflow.com/questions/54734029/do-type-annotations-in-python-enforce-static-type-checking">https://stackoverflow.com/questions/54734029/do-type-annotations-in-python-enforce-static-type-checking</a>
</li>

<li>Understanding type annotation in Python<br />
<a href="https://blog.logrocket.com/understanding-type-annotation-python/">https://blog.logrocket.com/understanding-type-annotation-python/</a>
</li>

<li>Static type checking with Mypy — Perfect Python<br />
<a href="https://www.youtube.com/watch?v=9gNnhNxra3E">https://www.youtube.com/watch?v=9gNnhNxra3E</a>
</li>

<li>Static Type Checker for Python<br />
<a href="https://github.com/microsoft/pyright">https://github.com/microsoft/pyright</a>
</li>

<li>Differences Between Pyright and Mypy<br />
<a href="https://github.com/microsoft/pyright/blob/main/docs/mypy-comparison.md">https://github.com/microsoft/pyright/blob/main/docs/mypy-comparison.md</a>
</li>

<li>4 Python type checkers to keep your code clean<br />
<a href="https://www.infoworld.com/article/3575079/4-python-type-checkers-to-keep-your-code-clean.html">https://www.infoworld.com/article/3575079/4-python-type-checkers-to-keep-your-code-clean.html</a>
</li>

<li>Pyre: A performant type-checker for Python 3<br />
<a href="https://pyre-check.org/">https://pyre-check.org/</a>
</li>

<li>"Typing the Untyped: Soundness in Gradual Type Systems" by Ben Weissmann<br />
<a href="https://www.youtube.com/watch?v=uJHD2xyv7xo">https://www.youtube.com/watch?v=uJHD2xyv7xo</a>
</li>

<li>Covariance and contravariance (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)">https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)</a>
</li>

<li>Functional Programming: Type Systems<br />
<a href="https://www.youtube.com/watch?v=hy1wjkcIBCU">https://www.youtube.com/watch?v=hy1wjkcIBCU</a>
</li>

<li>A Type System From Scratch – Robert Widmann<br />
<a href="https://www.youtube.com/watch?v=IbjoA5xVUq0">https://www.youtube.com/watch?v=IbjoA5xVUq0</a>
</li>

<li>"Type Systems - The Good, Bad and Ugly" by Paul Snively and Amanda Laucher<br />
<a href="https://www.youtube.com/watch?v=SWTWkYbcWU0">https://www.youtube.com/watch?v=SWTWkYbcWU0</a>
</li>

<li>Type Systems: Covariance, Contravariance, Bivariance, and Invariance explained<br />
<a href="https://medium.com/@thejameskyle/type-systems-covariance-contravariance-bivariance-and-invariance-explained-35f43d1110f8">https://medium.com/@thejameskyle/type-systems-covariance-contravariance-bivariance-and-invariance-explained-35f43d1110f8</a>
</li>

<li>Statická vs. dynamická typová kontrola<br />
<a href="https://www.root.cz/clanky/staticka-dynamicka-typova-kontrola/">https://www.root.cz/clanky/staticka-dynamicka-typova-kontrola/</a>
</li>

<li>Typový systém<br />
<a href="https://cs.wikipedia.org/wiki/Typov%C3%BD_syst%C3%A9m">https://cs.wikipedia.org/wiki/Typov%C3%BD_syst%C3%A9m</a>
</li>

<li>Comparison of programming languages by type system<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_programming_languages_by_type_system">https://en.wikipedia.org/wiki/Comparison_of_programming_languages_by_type_system</a>
</li>

<li>Flow<br />
<a href="https://flow.org/">https://flow.org/</a>
</li>

<li>TypeScript<br />
<a href="https://www.typescriptlang.org/">https://www.typescriptlang.org/</a>
</li>

<li>Sorbet<br />
<a href="https://sorbet.org/">https://sorbet.org/</a>
</li>

<li>Pyright<br />
<a href="https://github.com/microsoft/pyright">https://github.com/microsoft/pyright</a>
</li>

<li>Mypy: Type hints cheat sheet<br />
<a href="https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html">https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html</a>
</li>

<li>PEP 484 – Type Hints<br />
<a href="https://peps.python.org/pep-0484/">https://peps.python.org/pep-0484/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

