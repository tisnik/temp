<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Knihovna Polars: výkonnější alternativa ke knihovně Pandas (líné vyhodnocování operací)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Knihovna Polars: výkonnější alternativa ke knihovně Pandas (líné vyhodnocování operací)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Knihovna Polars: výkonnější alternativa ke knihovně Pandas (líné vyhodnocování operací)</a></p>
<p><a href="#k02">2. Líné operace a líné vyhodnocování v&nbsp;IT</a></p>
<p><a href="#k03">3. Koncept líných datových rámců</a></p>
<p><a href="#k04">4. Líné načtení dat do datového rámce ze souboru ve formátu CSV</a></p>
<p><a href="#k05">5. Převod běžného datového rámce na líný datový rámec</a></p>
<p><a href="#k06">6. Převod líného datového rámce na běžný datový rámec</a></p>
<p><a href="#k07">7. Ukázka podpory líných operací v&nbsp;knihovně Polars</a></p>
<p><a href="#k08">8. Konstrukce plánu s&nbsp;větším množstvím operací; realizace plánu</a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. Rozvětvení plánů</a></p>
<p><a href="#k15">*** 15. Cache pro řetězce</a></p>
<p><a href="#k16">16. Obsah závěrečné části seriálu o knihovně Polars</a></p>
<p><a href="#k17">17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Knihovna Polars: výkonnější alternativa ke knihovně Pandas (líné vyhodnocování operací)</h2>

<p>Jak jsme si již několikrát připomenuli v&nbsp;předchozí dvojici článků, je knihovna <i>Polars</i> navržena takovým způsobem, aby byly operace s&nbsp;daty uloženými v&nbsp;datových řadách nebo v&nbsp;datových rámcích realizovány co nejrychleji, ideálně s&nbsp;využitím souběžně běžících úloh, ale i s&nbsp;využitím moderních SIMD operací. Vzhledem k&nbsp;tomu, že se jedná o velmi důležitou vlastnost (a vlastně o jediný důvod, proč vlastně přejít od <i>Pandas</i> k&nbsp;<i>Polars</i>), budeme se touto velmi zajímavou problematikou zabývat v&nbsp;dnešním článku.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Líné operace a líné vyhodnocování v&nbsp;IT</h2>

<p>V&nbsp;informatice se na mnoha místech setkáme s&nbsp;využitím takzvaných
&bdquo;líných&ldquo; operací popř.&nbsp;&bdquo;líných datových struktur&ldquo;
resp.&nbsp;&bdquo;<a
href="https://en.wikipedia.org/wiki/Lazy_evaluation">líného
vyhodnocování</a>&ldquo;. Jedná se o koncept, který je založen na tom, že se
nějaký výpočet či operace neprovede ihned ve chvíli, kdy je v&nbsp;programu
zapsána, ale obecně se její vykonání přesune do budoucnosti s&nbsp;tím
předpokladem, že mnohdy vlastně není nutné operaci provádět vůbec nebo ne
v&nbsp;plném rozsahu. Připomeňme si například, jak jsou realizovány &bdquo;líné
sekvence&ldquo; v&nbsp;programovacím jazyku Clojure. Obecně platí, že se prvky
v&nbsp;líných sekvencích vyhodnocují až tehdy, kdy je to nezbytně nutné a
předpokládá se, že k&nbsp;vyhodnocení nemusí dojít vůbec.</p>

<p>Příkladem může být líná sekvence, která vznikne aplikací funkcí
<strong>range</strong> + <strong>filter</strong> + <strong>map</strong> +
<strong>take</strong>. V&nbsp;Clojure můžeme pro větší čitelnost použít
<i>threading makro</i>, takže výsledný zápis připomíná klasickou pipelinu:</p>

<pre>
(-&gt;&gt; (range)
     (map #(* % 3))
     (filter #(even %))
     (take 10))
</pre>

<p>Funkce <strong>range</strong> obecně (pokud se jí nezadají další parametry)
generuje nekonečnou sekvenci, ovšem díky pozdějšímu použití
<strong>take</strong> se z&nbsp;této nekonečné sekvence získá jen prvních
<i>n</i> prvků &ndash; a až za podmínky, kdy se musí pracovat s&nbsp;hodnotou
prvku (například když se má výsledek vytisknout). Aplikace funkcí
<strong>range</strong>, <strong>filter</strong> a <strong>map</strong> jsou
tedy provedeny později či vůbec ne. V&nbsp;našem konkrétním případě bude
výsledkem tato konečná a <i>realizovaná</i> sekvence:</p>

<pre>
(0 6 12 18 24 30 36 42 48 54)
</pre>

<p><div class="rs-tip-major">Poznámka: koncept líného vyhodnocování operací
není použit pouze v&nbsp;jazyku Clojure, ale najdeme ho (pochopitelně
v&nbsp;poněkud odlišné podobě) například v&nbsp;OCamlu, Scheme, Haskellu,
Mirandě, ale &ndash; i když jen v&nbsp;omezené míře &ndash; například i
v&nbsp;Pythonu (generátory, které mohou vytvářet nekonečné sekvence).</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Koncept líných datových rámců</h2>

<p>V&nbsp;tomto seriálu jsme se již několikrát zmínili o funkci nazvané
<strong>read_csv</strong>. Připomeňme si, že tato funkce slouží pro načtení dat
uložených ve formátu CSV (<i>comma separated values</i>), TSV (<i>tab separated
values</i>) popř.&nbsp;z&nbsp;textového souboru s&nbsp;pevně zadanou
strukturou. Výsledkem je plnohodnotný datový rámec, jenž je uložený
v&nbsp;operační paměti a na který je možné aplikovat všechny předminule i
minule popsané operace, včetně seskupení dat s&nbsp;jejich následnou agregací.
Například:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = polars.read_csv("hall_of_fame.csv")
&nbsp;
<i># maximální počet zobrazených řádků</i>
polars.Config.set_tbl_rows(100)
&nbsp;
<i># seskupení podle názvu jazyka</i>
df = df.groupby("Winner", maintain_order=True).agg([polars.col("Year").len()<strong>.alias("Zvítězil")</strong>]). \
        sort("Zvítězil"). \
        reverse(). \
        <strong>head(5)</strong>
&nbsp;
<i># zobrazíme datový rámec</i>
print(df)
</pre>

<p>Jakým způsobem je ale vůbec možné pracovat s&nbsp;daty, která mají větší
objem, než je volná kapacita operační paměti? Řešením jsou takzvané <i>líné
datové rámce</i>. V&nbsp;případě použití líných rámců se operace vyžadované
uživatelem neprovádí hned, ale až ve chvíli, kdy jsou výsledky skutečně
zapotřebí &ndash; vyžadované operace jsou tedy zapamatovány ve formě
<i>plánu</i>. A navíc je vykonávání operací řešeno formou
&bdquo;streamu&ldquo;, tj.&nbsp;v&nbsp;naprosté většině případů se nevyžaduje,
aby byl celý datový rámec uložen v&nbsp;operační paměti. Práci s&nbsp;línými
datovými rámci si ostatně ukážeme v&nbsp;navazujících kapitolách.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Líné načtení dat do datového rámce ze souboru ve formátu CSV</h2>

<p>Podívejme se nyní na způsob &bdquo;líného&ldquo; načtení datového rámce ze
souboru, v&nbsp;němž jsou data uložena ve formátu CSV. Namísto funkce
<strong>read_csv</strong> použijeme funkci nazvanou <strong>scan_csv</strong>,
která má stejné povinné i nepovinné parametry, jako již zmíněná funkce
<strong>read_csv</strong>, takže záměna v&nbsp;existujících skriptech je možná
a hlavně snadná:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># líné přečtení zdrojových dat</i>
df = <strong>polars.scan_csv("hall_of_fame.csv")</strong>
&nbsp;
<i># zobrazíme líně načtený datový rámec</i>
print(df)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_01_scan_csv.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_01_scan_csv.py</a>.</div></p>

<p>Výsledek, který získáme po spuštění tohoto skriptu, je zcela odlišný od
výsledku operace <strong>read_csv</strong>. Funkce <strong>scan_csv</strong>
totiž pouze zaznamená, jaká operace se má provést a uloží tento záznam do
<i>plánu</i>. A tento plán je skriptem zobrazen:</p>

<pre>
naive plan: (run LazyFrame.describe_optimized_plan() to see the optimized plan)
&nbsp;
  CSV SCAN hall_of_fame.csv
  PROJECT */2 COLUMNS
</pre>

<p>Výsledkem je tedy <i>líný datový rámec</i>. Naproti tomu použití funkce
<strong>read_csv</strong> vede k&nbsp;okamžitému načtení dat a výsledkem bude
běžný datový rámec:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># okamžité přečtení zdrojových dat</i>
df = <strong>polars.read_csv("hall_of_fame.csv")</strong>
&nbsp;
<i># zobrazíme načtený datový rámec</i>
print(df)
print()
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
shape: (20, 2)
┌──────┬────────┐
│ Year ┆ Winner │
│ ---  ┆ ---    │
│ i64  ┆ str    │
╞══════╪════════╡
│ 2022 ┆ C++    │
│ 2021 ┆ Python │
│ 2020 ┆ Python │
│ 2019 ┆ C      │
│ ...  ┆ ...    │
│ 2006 ┆ Ruby   │
│ 2005 ┆ Java   │
│ 2004 ┆ PHP    │
│ 2003 ┆ C++    │
└──────┴────────┘
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Převod běžného datového rámce na líný datový rámec</h2>

<p>Knihovna <i>Polars</i> umožňuje provést převod běžného datového rámce
(tj.&nbsp;rámce s&nbsp;vyhodnocenými daty) na líný datový rámec. Pro tento účel
se používá metoda nazvaná příznačně <strong>lazy</strong>. Podívejme se nyní na
to, jak tento převod může proběhnout v&nbsp;praxi. V&nbsp;dalším demonstračním
příkladu nejdříve načteme obsah souboru ve formátu CSV do běžného datového
rámce, jehož obsah je následně zobrazen na terminálu. Posléze z&nbsp;tohoto
rámce vytvoříme líný datový rámec s&nbsp;využitím již zmíněné metody
<strong>lazy</strong> a následně tento líný datový rámec zobrazíme:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
df = <strong>polars.read_csv("hall_of_fame.csv")</strong>
&nbsp;
<i># převod na líný datový rámec</i>
df2 = <strong>df.lazy()</strong>
&nbsp;
<i># zobrazíme načtený datový rámec</i>
print(df)
print()
&nbsp;
<i># následně zobrazíme líný datový rámec</i>
print(df2)
print()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_02_read_csv_and_convert.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_02_read_csv_and_convert.py</a>.</div></p>

<p>Ze zobrazených výsledků je patrné, že se nejdříve skutečně zobrazí obsah
běžného datového rámce:</p>

<pre>
shape: (20, 2)
┌──────┬────────┐
│ Year ┆ Winner │
│ ---  ┆ ---    │
│ i64  ┆ str    │
╞══════╪════════╡
│ 2022 ┆ C++    │
│ 2021 ┆ Python │
│ 2020 ┆ Python │
│ 2019 ┆ C      │
│ ...  ┆ ...    │
│ 2006 ┆ Ruby   │
│ 2005 ┆ Java   │
│ 2004 ┆ PHP    │
│ 2003 ┆ C++    │
└──────┴────────┘
</pre>

<p>Následně se namísto obsahu líného datového rámce vzniklého konverzí zobrazí
&ndash; přesně podle očekávání &ndash; pouze <i>plán</i>, tj.&nbsp;seznam
operací, které se mají provést v&nbsp;budoucnosti:</p>

<pre>
naive plan: (run LazyFrame.describe_optimized_plan() to see the optimized plan)
&nbsp;
  DF ["Year", "Winner"]; PROJECT */2 COLUMNS; SELECTION: "None"
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Převod líného datového rámce na běžný datový rámec</h2>

<p>Způsob převodu běžného datového rámce na líný datový rámec jsme si ukázali
<a href="#k05">v&nbsp;předchozí kapitole</a>. Mnohdy je však mnohem důležitější
provést opačný převod, tedy převod líného rámce na běžný rámec. V&nbsp;tomto
případě však není slovo &bdquo;převod&ldquo; zcela přesné, protože se nejedná o
transformaci dat, ale o &bdquo;realizaci&ldquo; (uskutečnění) všech operací,
které byly pouze naplánovány. Podívejme se na jednoduchý příklad, v&nbsp;němž
se převod/realizace provádí metodou nazvanou <strong>collect</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># líné přečtení zdrojových dat</i>
df = <strong>polars.scan_csv("hall_of_fame.csv")</strong>
&nbsp;
<i># zobrazíme líně načtený datový rámec</i>
print(df)
print()
&nbsp;
<i># převod na běžný datový rámec</i>
df2 = <strong>df.collect()</strong>
&nbsp;
<i># zobrazíme běžný (výsledný) datový rámec</i>
print(df2)
print()
print(df2.columns)
print(df2.dtypes)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_03_collect_to_df.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_03_collect_to_df.py</a>.</div></p>

<p>Po spuštění tohoto demonstračního příkladu se nejdříve zobrazí <i>plán</i>
pro líný datový rámec:</p>

<pre>
naive plan: (run LazyFrame.describe_optimized_plan() to see the optimized plan)
&nbsp;
  CSV SCAN hall_of_fame.csv
  PROJECT */2 COLUMNS
</pre>

<p>Ve druhém kroku se zobrazí realizovaný konkrétní datový rámec vytvořený
metodou <strong>collect</strong>:</p>

<pre>
shape: (20, 2)
┌──────┬────────┐
│ Year ┆ Winner │
│ ---  ┆ ---    │
│ i64  ┆ str    │
╞══════╪════════╡
│ 2022 ┆ C++    │
│ 2021 ┆ Python │
│ 2020 ┆ Python │
│ 2019 ┆ C      │
│ ...  ┆ ...    │
│ 2006 ┆ Ruby   │
│ 2005 ┆ Java   │
│ 2004 ┆ PHP    │
│ 2003 ┆ C++    │
└──────┴────────┘
&nbsp;
['Year', 'Winner']
[Int64, Utf8]
</pre>

<p><div class="rs-tip-major">Poznámka: zatímco práce s&nbsp;líným datovým
rámcem není prakticky závislá na volné kapacitě operační paměti, po realizaci
již mohou nastat problémy v&nbsp;případě, že se zpracovává enormní množství dat
(což ovšem není náš případ).</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Ukázka podpory líných operací v&nbsp;knihovně Polars</h2>

<p>Nyní se dostáváme k&nbsp;velmi důležité vlastnosti knihovny <i>Polars</i>.
Připomeňme si, že dokud není nutné pracovat s&nbsp;daty podrobenými nějaké
operaci nebo sérií operací, není vlastně nutné tyto operace ani provádět
&ndash; postačuje si pouze zapamatovat jejich pořadí a případný použitý
parametr nebo parametry. A přesně tímto způsobem se pracuje s&nbsp;línými
datovými rámci, protože každá další operace nad rámcem se &bdquo;pouze&ldquo;
zapíše do <i>plánu</i>.</p>

<p>Samozřejmě si tento koncept můžeme velmi snadno otestovat, a to konkrétně na
demonstračním příkladu, v&nbsp;němž se pokusíme záznamy v&nbsp;líném datovém
rámci seřadit podle sloupce &bdquo;Winner&ldquo;. V&nbsp;případě, že by se
následně nezavolala operace <strong>collect</strong>, k&nbsp;vlastnímu řazení
by vůbec nedošlo:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># líné přečtení zdrojových dat</i>
df = <strong>polars.scan_csv("hall_of_fame.csv")</strong>
&nbsp;
<i># zobrazíme líně načtený datový rámec</i>
print(df)
print()
&nbsp;
<i># aplikace operace na líný datový rámec</i>
df2 = <strong>df.sort("Winner")</strong>
&nbsp;
<i># převod na běžný datový rámec</i>
df3 = <strong>df2.collect()</strong>
&nbsp;
<i># zobrazíme druhý líny datový rámec</i>
print(df2)
print()
&nbsp;
<i># zobrazíme běžný (výsledný) datový rámec</i>
print(df3)
print()
print(df3.columns)
print(df3.dtypes)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_04_lazy_sort.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_04_lazy_sort.py</a>.</div></p>

<p>Opět je vhodné si alespoň ve stručnosti okomentovat jednotlivé informace
vypsané po spuštění tohoto demonstračního příkladu. Nejdříve se líně načtou
data ze souboru s&nbsp;formátem CSV. Výsledkem je líný datový rámec, který je
zobrazen formou svého plánu, tedy následovně:</p>

<pre>
naive plan: (run LazyFrame.describe_optimized_plan() to see the optimized plan)
&nbsp;
  CSV SCAN hall_of_fame.csv
  PROJECT */2 COLUMNS
</pre>

<p>Z&nbsp;tohoto líného datového rámce je s&nbsp;využitím operace
<strong>sort</strong> vytvořen nový líný datový rámec, jehož plán je
pochopitelně odlišný &ndash; obsahuje totiž i onu operaci seřazení:</p>

<pre>
naive plan: (run LazyFrame.describe_optimized_plan() to see the optimized plan)
&nbsp;
  SORT BY [col("Winner")]
    CSV SCAN hall_of_fame.csv
    PROJECT */2 COLUMNS
</pre>

<p>A konečně se po provedení operace <strong>collect</strong> <i>realizují</i>
obě naplánované operace, tedy načtení dat ze souboru typu CSV a seřazení
záznamů na základě obsahu sloupce &bdquo;Winner&ldquo;. Výsledkem těchto dvou
operací je již běžný datový rámec s&nbsp;tímto obsahem:</p>

<pre>
shape: (20, 2)
┌──────┬──────────────┐
│ Year ┆ Winner       │
│ ---  ┆ ---          │
│ i64  ┆ str          │
╞══════╪══════════════╡
│ 2019 ┆ C            │
│ 2017 ┆ C            │
│ 2008 ┆ C            │
│ 2022 ┆ C++          │
│ ...  ┆ ...          │
│ 2010 ┆ Python       │
│ 2007 ┆ Python       │
│ 2006 ┆ Ruby         │
│ 2013 ┆ Transact-SQL │
└──────┴──────────────┘
&nbsp;
['Year', 'Winner']
[Int64, Utf8]
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Konstrukce plánu s&nbsp;větším množstvím operací; realizace plánu</h2>

<p>Samotný plán postupně vytvářený pro líné datové rámce pochopitelně může
obsahovat i větší množství operací a dokonce je ho možné i větvit. Nejdříve si
ukažme, jak by vypadal plán se třemi operacemi:</p>

<ol>
<li>(Líné) načtení datového rámce</li>
<li>Seřazení záznamů podle zvoleného sloupce</li>
<li>Otočení pořadí všech záznamů</li>
</ol>

<p>Tyto operace jsou postupně definovány v&nbsp;následujícím skriptu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># líné přečtení zdrojových dat</i>
df = <strong>polars.scan_csv("hall_of_fame.csv")</strong>
&nbsp;
<i># zobrazíme líně načtený datový rámec</i>
print(df)
print()
&nbsp;
<i># aplikace operace na líný datový rámec</i>
df2 = <strong>df.sort("Winner").reverse()</strong>
&nbsp;
<i># převod na běžný datový rámec</i>
df3 = <strong>df2.collect()</strong>
&nbsp;
<i># zobrazíme druhý líny datový rámec</i>
print(df2)
print()
&nbsp;
<i># zobrazíme běžný (výsledný) datový rámec</i>
print(df3)
print()
print(df3.columns)
print(df3.dtypes)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_05_lazy_sort_reverse.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_05_lazy_sort_reverse.py</a>.</div></p>

<p>Povšimněte si, jak se liší druhý plán od plánu z&nbsp;předchozího
demonstračního příkladu &ndash; operace <strong>reverse</strong> je rozepsána
na dvě paralelně probíhající operace:</p>

<pre>
naive plan: (run LazyFrame.describe_optimized_plan() to see the optimized plan)
&nbsp;
  CSV SCAN hall_of_fame.csv
  PROJECT */2 COLUMNS
&nbsp;
&nbsp;
naive plan: (run LazyFrame.describe_optimized_plan() to see the optimized plan)
&nbsp;
   LOCAL SELECT [col("Year").reverse(), col("Winner").reverse()] FROM
    SORT BY [col("Winner")]
      CSV SCAN hall_of_fame.csv
      PROJECT */2 COLUMNS
&nbsp;
&nbsp;
shape: (20, 2)
┌──────┬──────────────┐
│ Year ┆ Winner       │
│ ---  ┆ ---          │
│ i64  ┆ str          │
╞══════╪══════════════╡
│ 2013 ┆ Transact-SQL │
│ 2006 ┆ Ruby         │
│ 2007 ┆ Python       │
│ 2010 ┆ Python       │
│ ...  ┆ ...          │
│ 2022 ┆ C++          │
│ 2008 ┆ C            │
│ 2017 ┆ C            │
│ 2019 ┆ C            │
└──────┴──────────────┘
&nbsp;
['Year', 'Winner']
[Int64, Utf8]
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># líné přečtení zdrojových dat</i>
df = polars.scan_csv("hall_of_fame.csv")
&nbsp;
<i># zobrazíme plán pro líně načtený datový rámec</i>
print(<strong>df.describe_plan()</strong>)
print(<strong>df.describe_optimized_plan()</strong>)
print()
&nbsp;
<i># aplikace operace na líný datový rámec</i>
df2 = <strong>df.sort("Winner").reverse()</strong>
&nbsp;
<i># převod na běžný datový rámec</i>
df3 = <strong>df2.collect()</strong>
&nbsp;
<i># zobrazíme plán pro druhý líny datový rámec</i>
print(<strong>df2.describe_plan()</strong>)
print(<strong>df2.describe_optimized_plan()</strong>)
print()
&nbsp;
<i># zobrazíme běžný (výsledný) datový rámec</i>
print(df3)
print()
print(df3.columns)
print(df3.dtypes)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_06_describe_plan.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_06_describe_plan.py</a>.</div></p>

<pre>
  CSV SCAN hall_of_fame.csv
  PROJECT */2 COLUMNS
&nbsp;
  CSV SCAN hall_of_fame.csv
  PROJECT */2 COLUMNS
&nbsp;
&nbsp;
   LOCAL SELECT [col("Year").reverse(), col("Winner").reverse()] FROM
    SORT BY [col("Winner")]
      CSV SCAN hall_of_fame.csv
      PROJECT */2 COLUMNS
&nbsp;
   LOCAL SELECT [col("Year").reverse(), col("Winner").reverse()] FROM
    SORT BY [col("Winner")]
      CSV SCAN hall_of_fame.csv
      PROJECT */2 COLUMNS
&nbsp;
&nbsp;
shape: (20, 2)
┌──────┬──────────────┐
│ Year ┆ Winner       │
│ ---  ┆ ---          │
│ i64  ┆ str          │
╞══════╪══════════════╡
│ 2013 ┆ Transact-SQL │
│ 2006 ┆ Ruby         │
│ 2007 ┆ Python       │
│ 2010 ┆ Python       │
│ ...  ┆ ...          │
│ 2022 ┆ C++          │
│ 2008 ┆ C            │
│ 2017 ┆ C            │
│ 2019 ┆ C            │
└──────┴──────────────┘
&nbsp;
['Year', 'Winner']
[Int64, Utf8]
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># líné přečtení zdrojových dat</i>
df = polars.scan_csv("hall_of_fame.csv")
&nbsp;
<i># zobrazíme plán pro líně načtený datový rámec</i>
print(<strong>df.describe_plan()</strong>)
print()
&nbsp;
<i># aplikace operace na líný datový rámec</i>
df2 = <strong>df.sort("Winner").reverse()</strong>
&nbsp;
<i># převod vybraných prvků na běžný datový rámec</i>
df3 = <strong>df2.fetch(5)</strong>
&nbsp;
<i># zobrazíme plán pro druhý líny datový rámec</i>
print(<strong>df2.describe_plan()</strong>)
print()
&nbsp;
<i># zobrazíme běžný (výsledný) datový rámec</i>
print(df3)
print()
print(df3.columns)
print(df3.dtypes)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_07_fetch.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_07_fetch.py</a>.</div></p>

<pre>
  CSV SCAN hall_of_fame.csv
  PROJECT */2 COLUMNS
&nbsp;
&nbsp;
   LOCAL SELECT [col("Year").reverse(), col("Winner").reverse()] FROM
    SORT BY [col("Winner")]
      CSV SCAN hall_of_fame.csv
      PROJECT */2 COLUMNS
&nbsp;
&nbsp;
shape: (5, 2)
┌──────┬────────┐
│ Year ┆ Winner │
│ ---  ┆ ---    │
│ i64  ┆ str    │
╞══════╪════════╡
│ 2018 ┆ Python │
│ 2020 ┆ Python │
│ 2021 ┆ Python │
│ 2022 ┆ C++    │
│ 2019 ┆ C      │
└──────┴────────┘
&nbsp;
['Year', 'Winner']
[Int64, Utf8]
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># líné přečtení zdrojových dat</i>
df = polars.scan_csv("hall_of_fame.csv")
&nbsp;
<i># zobrazíme plán pro líně načtený datový rámec</i>
print(<strong>df.describe_plan()</strong>)
print()
&nbsp;
<i># seskupení podle názvu jazyka</i>
df2 = <strong>df.groupby("Winner", maintain_order=True).agg([polars.col("Year")])</strong>
&nbsp;
<i># převod vybraných prvků na běžný datový rámec</i>
df3 = <strong>df2.fetch(5)</strong>
&nbsp;
<i># zobrazíme plán pro druhý líny datový rámec</i>
print(<strong>df2.describe_plan()</strong>)
print()
&nbsp;
<i># zobrazíme běžný (výsledný) datový rámec</i>
print(df3)
print()
print(df3.columns)
print(df3.dtypes)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_08_group_by.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_08_group_by.py</a>.</div></p>

<pre>
  CSV SCAN hall_of_fame.csv
  PROJECT */2 COLUMNS
&nbsp;
&nbsp;
  Aggregate
        [col("Year")] BY [col("Winner")] FROM
          CSV SCAN hall_of_fame.csv
  PROJECT */2 COLUMNS
&nbsp;
&nbsp;
&nbsp;
shape: (3, 2)
┌────────┬────────────────────┐
│ Winner ┆ Year               │
│ ---    ┆ ---                │
│ str    ┆ list[i64]          │
╞════════╪════════════════════╡
│ C++    ┆ [2022]             │
│ Python ┆ [2021, 2020, 2018] │
│ C      ┆ [2019]             │
└────────┴────────────────────┘
&nbsp;
['Winner', 'Year']
[Utf8, List(Int64)]
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># líné přečtení zdrojových dat</i>
df = polars.scan_csv("hall_of_fame.csv")
&nbsp;
<i># zobrazíme plán pro líně načtený datový rámec</i>
print(<strong>df.describe_plan()</strong>)
print()
&nbsp;
<i># seskupení podle názvu jazyka</i>
df2 = <strong>df.groupby("Winner", maintain_order=True).agg([polars.col("Year")])</strong>
&nbsp;
<i># převod vybraných prvků na běžný datový rámec</i>
df3 = <strong>df2.fetch(2)</strong>
&nbsp;
<i># zobrazíme plán pro druhý líny datový rámec</i>
print(<strong>df2.describe_plan()</strong>)
print()
&nbsp;
<i># zobrazíme běžný (výsledný) datový rámec</i>
print(df3)
print()
print(df3.columns)
print(df3.dtypes)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_09_group_by_fetch_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_09_group_by_fetch_2.py</a>.</div></p>

<p>Nyní je</p>

<pre>
  CSV SCAN hall_of_fame.csv
  PROJECT */2 COLUMNS
&nbsp;
&nbsp;
  Aggregate
        [col("Year")] BY [col("Winner")] FROM
          CSV SCAN hall_of_fame.csv
  PROJECT */2 COLUMNS
&nbsp;
&nbsp;
&nbsp;
shape: (2, 2)
┌────────┬───────────┐
│ Winner ┆ Year      │
│ ---    ┆ ---       │
│ str    ┆ list[i64] │
╞════════╪═══════════╡
│ C++    ┆ [2022]    │
│ Python ┆ [2021]    │
└────────┴───────────┘
&nbsp;
['Winner', 'Year']
[Utf8, List(Int64)]
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># líné přečtení zdrojových dat</i>
df = polars.scan_csv("hall_of_fame.csv")
&nbsp;
<i># zobrazíme plán pro líně načtený datový rámec</i>
print(df.describe_plan())
print()
&nbsp;
<i># seskupení podle názvu jazyka</i>
df2 = (
    df.groupby("Winner", maintain_order=True)
    .agg([polars.col("Year").len().alias("Zvítězil")])
    .sort("Zvítězil")
    .reverse()
    .head(5)
)
&nbsp;
<i># převod prvků na běžný datový rámec</i>
df3 = df2.collect()
&nbsp;
<i># zobrazíme plán pro druhý líny datový rámec</i>
print(df2.describe_plan())
print()
&nbsp;
<i># zobrazíme běžný (výsledný) datový rámec</i>
print(df3)
print()
print(df3.columns)
print(df3.dtypes)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu získáte na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_10_group_by_len_sort_reverse_head.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_10_group_by_len_sort_reverse_head.py</a>.</div></p>

<pre>
  CSV SCAN hall_of_fame.csv
  PROJECT */2 COLUMNS
&nbsp;
&nbsp;
  SLICE[offset: 0, len: 5]
     LOCAL SELECT [col("Winner").reverse(), col("Zvítězil").reverse()] FROM
      SORT BY [col("Zvítězil")]
        Aggregate
                [col("Year").count().alias("Zvítězil")] BY [col("Winner")] FROM
                  CSV SCAN hall_of_fame.csv
  PROJECT */2 COLUMNS
&nbsp;
&nbsp;
&nbsp;
shape: (5, 2)
┌─────────────┬──────────┐
│ Winner      ┆ Zvítězil │
│ ---         ┆ ---      │
│ str         ┆ u32      │
╞═════════════╪══════════╡
│ Python      ┆ 5        │
│ C           ┆ 3        │
│ Objective-C ┆ 2        │
│ Java        ┆ 2        │
│ Go          ┆ 2        │
└─────────────┴──────────┘
&nbsp;
['Winner', 'Zvítězil']
[Utf8, UInt32]
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Rozvětvení plánů</h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Cache pro řetězce</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import polars
&nbsp;
<i># přečtení zdrojových dat</i>
with polars.StringCache():
    df = polars.read_csv("hall_of_fame.csv")
&nbsp;
    <i># seskupení podle názvu jazyka</i>
    df2 = (
        df.groupby("Winner", maintain_order=True)
        .agg([polars.col("Year").len().alias("Zvítězil")])
        .sort("Zvítězil")
        .reverse()
        .head(5)
    )
&nbsp;
    <i># zobrazíme výsledný datový rámec</i>
    print(df2)
    print()
    print(df2.columns)
    print(df2.dtypes)
</pre>

<p></p>

<pre>
shape: (5, 2)
┌─────────────┬──────────┐
│ Winner      ┆ Zvítězil │
│ ---         ┆ ---      │
│ str         ┆ u32      │
╞═════════════╪══════════╡
│ Python      ┆ 5        │
│ C           ┆ 3        │
│ Objective-C ┆ 2        │
│ Java        ┆ 2        │
│ Go          ┆ 2        │
└─────────────┴──────────┘
&nbsp;
['Winner', 'Zvítězil']
[Utf8, UInt32]
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Obsah závěrečné části seriálu o knihovně Polars</h2>

<p>Ve čtvrté a současně i poslední části miniseriálu o knihovně <i>Pandas</i>
se budeme zabývat velmi častou operací &ndash; spojením dvou (nebo i
v&nbsp;případě potřeby většího množství) datových rámců. V&nbsp;knihovně Polars
je možné rámce spojit jak &bdquo;po řádcích&ldquo;, tak i &bdquo;po
sloupcích&ldquo; a popř.&nbsp;i vyřešit splynutí hodnot z&nbsp;těch sloupců,
které si logicky odpovídají. To však není vše, protože lze provést i operace
typu <strong>join</strong> (což je jméno převzaté ze SQL). K&nbsp;dispozici je
vnitřní join, levý join, pravý join i vnější join.</p>

<p><div class="rs-tip-major">Poznámka: mnohé z&nbsp;těchto operací probíhají
odlišným způsobem, než je tomu v&nbsp;knihovně <i>Pandas</i> a to
z&nbsp;jednoho prostého důvodu &ndash; <i>Polars</i> totiž (alespoň prozatím)
nepodporuje převod jednoho či většího množství sloupců na indexy. V&nbsp;této
knihovně je tedy každému záznamu přiřazen celočíselný index odpovídající pořadí
záznamu v&nbsp;datovém rámci. Při spojování je tudíž nutné namísto indexů
explicitně specifikovat sloupce obsahující odpovídající si hodnoty.</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 (nikoli ovšem pro starší verze Pythonu 2!) byly
uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>series_01_from_list.py</td><td>konstrukce datové řady ze seznamu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_01_from_list.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_01_from_list.py</a></td></tr>
<tr><td> 2</td><td>series_02_from_tuple.py</td><td>konstrukce datové řady z&nbsp;n-tice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_02_from_tuple.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_02_from_tuple.py</a></td></tr>
<tr><td> 3</td><td>series_03_from_range.py</td><td>konstrukce datové řady generátorem <strong>range</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_03_from_range.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_03_from_range.py</a></td></tr>
<tr><td> 4</td><td>series_04_from_other_type.py</td><td>použití odlišných datových typů prvků v&nbsp;datové řadě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_04_from_other_type.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_04_from_other_type.py</a></td></tr>
<tr><td> 5</td><td>series_05_strings.py</td><td>datová řada obsahující řetězce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_05_strings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_05_strings.py</a></td></tr>
<tr><td> 6</td><td>series_06_booleans.py</td><td>datová řada obsahující pravdivostní hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_06_booleans.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_06_booleans.py</a></td></tr>
<tr><td> 7</td><td>series_07_null_value.py</td><td>datová řada obsahující prvky s&nbsp;hodnotou <strong>null</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_07_null_value.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_07_null_value.py</a></td></tr>
<tr><td> 8</td><td>series_08_type_specification.py</td><td>explicitní specifikace datového typu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_08_type_specification.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_08_type_specification.py</a></td></tr>
<tr><td> 9</td><td>series_09_select.py</td><td>výběr prvků z&nbsp;datové řady pomocí indexu, indexů či řezu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_09_select.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_09_select.py</a></td></tr>
<tr><td>10</td><td>series_10_filter.py</td><td>výběr prvků z&nbsp;datové řady pomocí filtru (podmínky)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_10_filter.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_10_filter.py</a></td></tr>
<tr><td>11</td><td>series_11_from_arange.py</td><td>konstrukce datové řady s&nbsp;využitím <strong>numpy.arange</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_11_from_arange.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_11_from_arange.py</a></td></tr>
<tr><td>12</td><td>series_12_from_linspace.py</td><td>konstrukce datové řady s&nbsp;využitím <strong>numpy.linspace</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_12_from_linspace.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/series_12_from_linspace.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>data_frame_01_load_csv.py</td><td>načtení dat ze souboru typu CSV</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_01_load_csv.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_01_load_csv.py</a></td></tr>
<tr><td>14</td><td>data_frame_02_load_csv_no_header_A.py</td><td>práce se soubory typu CSV bez hlavičky (nekorektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_02_load_csv_no_header_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_02_load_csv_no_header_A.py</a></td></tr>
<tr><td>15</td><td>data_frame_03_load_csv_no_header_B.py</td><td>práce se soubory typu CSV bez hlavičky (korektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_03_load_csv_no_header_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_03_load_csv_no_header_B.py</a></td></tr>
<tr><td>16</td><td>data_frame_04_load_csv_no_header_C.py</td><td>práce se soubory typu CSV bez hlavičky (korektní varianta s&nbsp;explicitními jmény sloupců)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_04_load_csv_no_header_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_04_load_csv_no_header_B.py</a></td></tr>
<tr><td>17</td><td>data_frame_05_load_tsv_A.py</td><td>práce se soubory typu TSV (nekorektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_05_load_tsv_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_05_load_tsv_A.py</a></td></tr>
<tr><td>18</td><td>data_frame_06_load_tsv_B.py</td><td>práce se soubory typu TSV (korektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_06_load_tsv_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_06_load_tsv_B.py</a></td></tr>
<tr><td>19</td><td>data_frame_07_describe.py</td><td>získání metainformací o datovém rámci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_07_describe.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_07_describe.py</a></td></tr>
<tr><td>20</td><td>data_frame_08_timestamps_A.py</td><td>načtení dat obsahujících časová razítka</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_08_timestamps_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_08_timestamps_A.py</a></td></tr>
<tr><td>21</td><td>data_frame_09_timestamps_B.py</td><td>načtení dat obsahujících časová razítka</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_09_timestamps_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_09_timestamps_B.py</a></td></tr>
<tr><td>22</td><td>data_frame_10_load_sql_A.py</td><td>načtení dat z&nbsp;relační databáze s&nbsp;uložením výsledku ve formě datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_10_load_sql_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_10_load_sql_A.py</a></td></tr>
<tr><td>23</td><td>data_frame_11_load_sql_B.py</td><td>načtení dat z&nbsp;relační databáze s&nbsp;uložením výsledku ve formě datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_11_load_sql_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_11_load_sql_B.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>24</td><td>data_frame_12_head_A.py</td><td>zobrazení hlavičky datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_12_head_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_12_head_A.py</a></td></tr>
<tr><td>25</td><td>data_frame_13_head_B.py</td><td>zobrazení hlavičky datového rámce se specifikací počtu řádků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_13_head_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_13_head_B.py</a></td></tr>
<tr><td>26</td><td>data_frame_14_head_C.py</td><td>globální změna počtu zobrazených řádků u datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_14_head_C.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_14_head_C.py</a></td></tr>
<tr><td>27</td><td>data_frame_15_formatting_A.py</td><td>různé způsoby naformátování obsahu datových rámců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_15_formatting_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_15_formatting_A.py</a></td></tr>
<tr><td>28</td><td>data_frame_16_formatting_B.py</td><td>různé způsoby naformátování obsahu datových rámců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_16_formatting_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_16_formatting_B.py</a></td></tr>
<tr><td>29</td><td>data_frame_17_sort.py</td><td>seřazení údajů v&nbsp;datovém rámci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_17_sort.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_17_sort.py</a></td></tr>
<tr><td>30</td><td>data_frame_18_sort_reverse.py</td><td>zpětné seřazení údajů v&nbsp;datovém rámci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_18_sort_reverse.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_18_sort_reverse.py</a></td></tr>
<tr><td>31</td><td>data_frame_19_unique.py</td><td>zajištění unikátnosti záznamů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_19_unique.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_19_unique.py</a></td></tr>
<tr><td>32</td><td>data_frame_20_map_conversion.py</td><td>konverze dat ve sloupci s&nbsp;využitím metody <strong>map</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_20_map_conversion.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_20_map_conversion.py</a></td></tr>
<tr><td>33</td><td>data_frame_21_apply_conversion.py</td><td>konverze dat ve sloupci s&nbsp;využitím metody <strong>apply</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_21_apply_conversion.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_21_apply_conversion.py</a></td></tr>
<tr><td>34</td><td>data_frame_22_group_by.py</td><td>seskupení údajů na základě zvoleného sloupce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_22_group_by.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_22_group_by.py</a></td></tr>
<tr><td>35</td><td>data_frame_23_group_by_sort.py</td><td>seskupení a seřazení údajů při agregaci na základě hodnot ve zvoleném sloupci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_23_group_by_sort.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_23_group_by_sort.py</a></td></tr>
<tr><td>36</td><td>data_frame_23_group_by_sort_B.py</td><td>ukázka rozdílů mezi použitím a nepoužitím <strong>sort</strong> při agregaci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_23_group_by_sort_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_23_group_by_sort_B.py</a></td></tr>
<tr><td>37</td><td>data_frame_24_sort_group_by_sort.py</td><td>kombinace <strong>sort</strong> a <strong>groupby</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_24_sort_group_by_sort.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_24_sort_group_by_sort.py</a></td></tr>
<tr><td>38</td><td>data_frame_25_group_by_len.py</td><td>jednoduchá agregace údajů při seskupení</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_25_group_by_len.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_25_group_by_len.py</a></td></tr>
<tr><td>39</td><td>data_frame_26_group_by_len_sort.py</td><td>jednoduchá agregace údajů při seskupení, kombinace se seřazením</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_26_group_by_len_sort.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_26_group_by_len_sort.py</a></td></tr>
<tr><td>40</td><td>data_frame_27_group_by_len_sort_reverse.py</td><td>jednoduchá agregace údajů při seskupení, kombinace se seřazením</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_27_group_by_len_sort_reverse.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_27_group_by_len_sort_reverse.py</a></td></tr>
<tr><td>41</td><td>data_frame_28_group_by_len_sort_reverse_head.py</td><td>kombinace předchozího s&nbsp;<strong>head</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_28_group_by_len_sort_reverse_head.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/data_frame_28_group_by_len_sort_reverse_head.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>42</td><td>lazy_frame_01_scan_csv.py</td><td>líné načtení dat ze souboru typu CSV</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_01_scan_csv.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_01_scan_csv.py</a></td></tr>
<tr><td>43</td><td>lazy_frame_02_read_csv_and_convert.py</td><td>načtení dat ze souboru typu CSV do datového rámce a konverze na líný datový rámec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_02_read_csv_and_convert.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_02_read_csv_and_convert.py</a></td></tr>
<tr><td>44</td><td>lazy_frame_03_collect_to_df.py</td><td>převod líného datového rámce na běžný datový rámec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_03_collect_to_df.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_03_collect_to_df.py</a></td></tr>
<tr><td>45</td><td>lazy_frame_04_lazy_sort.py</td><td>operace <strong>sort</strong> aplikovaná líně</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_04_lazy_sort.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_04_lazy_sort.py</a></td></tr>
<tr><td>46</td><td>lazy_frame_05_lazy_sort_reverse.py</td><td>dvojice operací <strong>sort</strong> + <strong>reverse</strong>, taktéž aplikovaných líně</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_05_lazy_sort_reverse.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_05_lazy_sort_reverse.py</a></td></tr>
<tr><td>47</td><td>lazy_frame_06_describe_plan.py</td><td>zobrazení informací o plánovaných operacích</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_06_describe_plan.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_06_describe_plan.py</a></td></tr>
<tr><td>48</td><td>lazy_frame_07_fetch.py</td><td>přečtení výseku dat z&nbsp;líného datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_07_fetch.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_07_fetch.py</a></td></tr>
<tr><td>49</td><td>lazy_frame_08_group_by.py</td><td>operace <strong>groupby</strong> následovaná agregací pro líný datový rámec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_08_group_by.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_08_group_by.py</a></td></tr>
<tr><td>50</td><td>lazy_frame_09_group_by_fetch_2.py</td><td>zjištění, jak vlastně přesně pracuje operace <strong>fetch</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_09_group_by_fetch_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_09_group_by_fetch_2.py</a></td></tr>
<tr><td>51</td><td>lazy_frame_10_group_by_len_sort_reverse_head.py</td><td>&bdquo;pipeline&ldquo; operací aplikovaných na líný datový rámec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_10_group_by_len_sort_reverse_head.py">https://github.com/tisnik/most-popular-python-libs/blob/master/polars/lazy_frame_10_group_by_len_sort_reverse_head.py</a></td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>Projekt Polars na GitHubu<br />
<a href="https://github.com/pola-rs/polars">https://github.com/pola-rs/polars</a>
</li>

<li>Dokumentace k&nbsp;projektu Polars (popis API)<br />
<a href="https://pola-rs.github.io/polars/py-polars/html/reference/index.html">https://pola-rs.github.io/polars/py-polars/html/reference/index.html</a>
</li>

<li>Polars: The Next Big Python Data Science Library... written in RUST? <br />
<a href="https://www.youtube.com/watch?v=VHqn7ufiilE">https://www.youtube.com/watch?v=VHqn7ufiilE</a>
</li>

<li>Polars API: funkce pro načtení datového rámce z&nbsp;CSV<br />
<a href="https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.read_csv.html">https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.read_csv.html</a>
</li>

<li>Polars API: funkce pro načtení datového rámce z&nbsp;relační databáze<br />
<a href="https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.read_sql.html">https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.read_sql.html</a>
</li>

<li>Python’s Pandas vs Polars: Who Wins this Fight in Library <br />
<a href="https://analyticsindiamag.com/pythons-pandas-vs-polars-who-wins-this-fight-in-library/">https://analyticsindiamag.com/pythons-pandas-vs-polars-who-wins-this-fight-in-library/</a>
</li>

<li>Polars vs Pandas: what is more convenient?<br />
<a href="https://medium.com/@ilia.ozhmegov/polars-vs-pandas-what-is-more-convenient-331956742a69">https://medium.com/@ilia.ozhmegov/polars-vs-pandas-what-is-more-convenient-331956742a69</a>
</li>

<li>A Gentle Introduction to Pandas Data Analysis (on Kaggle)<br />
<a href="https://www.youtube.com/watch?v=_Eb0utIRdkw&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&index=4">https://www.youtube.com/watch?v=_Eb0utIRdkw&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&amp;index=4</a>
</li>

<li>Speed Up Your Pandas Dataframes<br />
<a href="https://www.youtube.com/watch?v=u4_c2LDi4b8&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&index=5">https://www.youtube.com/watch?v=u4_c2LDi4b8&list=PL7RwtdVQXQ8oYpuIIDWR0SaaSCe8ZeZ7t&amp;index=5</a>
</li>

<li>pandas.read_csv<br />
<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html</a>
</li>

<li>How to define format when using pandas to_datetime?<br />
<a href="https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime">https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime</a>
</li>

<li>Pandas : skip rows while reading csv file to a Dataframe using read_csv() in Python<br />
<a href="https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/">https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/</a>
</li>

<li>Skip rows during csv import pandas<br />
<a href="https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas">https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas</a>
</li>

<li>Denni kurz<br />
<a href="https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt">https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt</a>
</li>

<li>UUID objects according to RFC 4122 (knihovna pro Python)<br />
<a href="https://docs.python.org/3.5/library/uuid.html#uuid.uuid4">https://docs.python.org/3.5/library/uuid.html#uuid.uuid4</a>
</li>

<li>Object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Object_identifier">https://en.wikipedia.org/wiki/Object_identifier</a>
</li>

<li>Digital object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Digital_object_identifier">https://en.wikipedia.org/wiki/Digital_object_identifier</a>
</li>

<li>voluptuous na (na PyPi)<br />
<a href="https://pypi.python.org/pypi/voluptuous">https://pypi.python.org/pypi/voluptuous</a>
</li>

<li>Repositář knihovny voluptuous na GitHubu<br />
<a href="https://github.com/alecthomas/voluptuous">https://github.com/alecthomas/voluptuous</a>
</li>

<li>pytest-voluptuous 1.0.2 (na PyPi)<br />
<a href="https://pypi.org/project/pytest-voluptuous/">https://pypi.org/project/pytest-voluptuous/</a>
</li>

<li>pytest-voluptuous (na GitHubu)<br />
<a href="https://github.com/F-Secure/pytest-voluptuous">https://github.com/F-Secure/pytest-voluptuous</a>
</li>

<li>schemagic 0.9.1 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schemagic/0.9.1">https://pypi.python.org/pypi/schemagic/0.9.1</a>
</li>

<li>Schemagic / Schemagic.web (na GitHubu)<br />
<a href="https://github.com/Mechrophile/schemagic">https://github.com/Mechrophile/schemagic</a>
</li>

<li>schema 0.6.7 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schema">https://pypi.python.org/pypi/schema</a>
</li>

<li>schema (na GitHubu)<br />
<a href="https://github.com/keleshev/schema">https://github.com/keleshev/schema</a>
</li>

<li>KX v DBOps Benchmark Results by Ferenc Bodon<br />
<a href="https://community.kx.com/t5/Community-Blogs/KX-v-DBOps-Benchmark-Results-by-Ferenc-Bodon/ba-p/12182">https://community.kx.com/t5/Community-Blogs/KX-v-DBOps-Benchmark-Results-by-Ferenc-Bodon/ba-p/12182</a>
</li>

<li>TIOBE Index for January 2023<br />
<a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a>
</li>

<li>Lazy evaluation<br />
<a href="https://en.wikipedia.org/wiki/Lazy_evaluation">https://en.wikipedia.org/wiki/Lazy_evaluation</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

