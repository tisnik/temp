<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">2. Instalace knihovny PeachPy</a></p>
<p><a href="#k03">*** 3. Subrutina vracející konstantní hodnotu: původní řešení a nové řešení</a></p>
<p><a href="#k04">4. Výsledná podoba dnešního prvního demonstračního příkladu</a></p>
<p><a href="#k04">5. Výpis strojových instrukcí vygenerovaných nástrojem PeachPy</a></p>
<p><a href="#k06">*** 6. Optimalizace subrutiny: přímá práce s&nbsp;registrem <strong>EAX</strong></a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p></p>

https://www.root.cz/clanky/volani-subrutin-naprogramovanych-v-assembleru-z-jazyka-python/



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace knihovny PeachPy</h2>

<p>Aby bylo možné spouštět demonstrační příklady uvedené v&nbsp;navazujících
kapitolách, je pochopitelně nutné si knihovnu <i>PeachPy</i> nainstalovat.
Nepoužívejte ovšem balíček <a href="https://pypi.org/project/PeachPy/">ve verzi
zveřejněné na PyPi</a>, protože ten je zastaralý a instalace pro novější verze
Pythonu neproběhne korektně. Lepší a stejně (ne)bezpečné je provést instalaci
přímo z&nbsp;GitHubu, konkrétně z&nbsp;repositáře <a
href="https://github.com/Maratyszcza/PeachPy">https://github.com/Maratyszcza/PeachPy</a>:</p>

<pre>
$ <strong>pip install --user --upgrade git+https://github.com/Maratyszcza/PeachPy</strong>
</pre>

<p>Tato knihovna nemá žádné závislosti, takže je její instalace snadná:</p>

<pre>
Collecting git+https://github.com/Maratyszcza/PeachPy
  Cloning https://github.com/Maratyszcza/PeachPy to /tmp/pip-req-build-qhcvwpek
  Running command git clone --filter=blob:none --quiet https://github.com/Maratyszcza/PeachPy /tmp/pip-req-build-qhcvwpek
  Resolved https://github.com/Maratyszcza/PeachPy to commit 349e8f836142b2ed0efeb6bb99b1b715d87202e9
  Preparing metadata (setup.py) ... done
Requirement already satisfied: six in /usr/lib/python3.12/site-packages (from PeachPy==0.2.0) (1.16.0)
Building wheels for collected packages: PeachPy
  Building wheel for PeachPy (setup.py) ... done
  Created wheel for PeachPy: filename=PeachPy-0.2.0-py3-none-any.whl size=300119 sha256=993026a5f1746c3c7994f8a35fdb4a19a48f6502aa991adcc125eadd1bfbc149
  Stored in directory: /tmp/pip-ephem-wheel-cache-cyt7vjqq/wheels/f2/59/12/225dd94305705e4cfee531e8af6597a3b9360c07f0485b1ddd
Successfully built PeachPy
Installing collected packages: PeachPy
Successfully installed PeachPy-0.2.0
</pre>

<p>Kontrola instalace, resp.&nbsp;kontrola dostupnosti balíčku
<strong>peachpy</strong>:</p>

<pre>
$ <strong>python</strong>
&nbsp;
Python 3.12.9 (main, Feb  4 2025, 00:00:00) [GCC 14.2.1 20240912 (Red Hat 14.2.1-3)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; <strong>import peachpy</strong>
&gt;&gt;&gt; <strong>help(peachpy)</strong>
&nbsp;
Help on package peachpy:
&nbsp;
NAME
    peachpy
&nbsp;
DESCRIPTION
    # This file is part of PeachPy package and is licensed under the Simplified BSD license.
    #    See license.rst for the full text of the license.
&nbsp;
PACKAGE CONTENTS
    abi
    arm (package)
    c (package)
    codegen
    common (package)
    encoder
    formats (package)
    function
    literal
    loader
    name
    parse
    stream
    util
    writer
    x86_64 (package)
    ...
    ...
    ...
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Subrutina vracející konstantní hodnotu: původní řešení a nové řešení</h2>

<p>Nyní se vraťme k&nbsp;původnímu článku, ve kterém jsme si ukázali několik
příkladů subrutin napsaných v&nbsp;assembleru. Ta nejjednodušší subrutina pouze
vracela konstantní hodnotu a v&nbsp;assembleru vypadala následovně:</p>

<pre>
[bits 64]
&nbsp;
        mov eax, 42
        ret
</pre>

<p>Tato subrutina je na platformě x86-64 přeložena do šesti bajtů, které jsme
načetli, obalili kódem, který ze subrutiny udělal Pythonovskou funkci a tuto
funkci jsme následně zavolali. Jednalo se o několik relativně nízkoúrovňových
operací:</p>

<pre>
import ctypes
import mmap
&nbsp;
<i># konstrukce bufferu</i>
with mmap.mmap(-1, mmap.PAGESIZE, prot=mmap.PROT_WRITE | mmap.PROT_EXEC) as buffer:
    <i># zapis strojoveho kodu do bufferu</i>
    buffer.write(
        b'\xB8\x2A\x00\x00\x00'
        b'\xC3'
    )
&nbsp;
    <i># deklarace typu nativni funkce</i>
    function_type = ctypes.CFUNCTYPE(ctypes.c_int)
&nbsp;
    <i># ziskani adresy strojoveho kodu</i>
    function_pointer = ctypes.c_void_p.from_buffer(buffer)
&nbsp;
    <i># reference na volatelnou funkci</i>
    function_42 = function_type(ctypes.addressof(function_pointer))
&nbsp;
    <i># zavolani funkce a vypis vysledku</i>
    result = function_42()
    print(result)
&nbsp;
    <i># pred uzavrenim bufferu je nutne odstranit ukazatele</i>
    del function_pointer
</pre>

<p>Řešení založené na nástroji PeachPy vypadá odlišně, ale postup je vlastně stále stejný. Nejprve je nutné specifikovat instrukce </p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výsledná podoba dnešního prvního demonstračního příkladu</h2>

<p>Výsledek by měl vypadat následovně:</p>

<pre>
<i># datové typy</i>
from peachpy import int32_t
&nbsp;
<i># základní konstruktory atd.</i>
from peachpy.x86_64 import Function, GeneralPurposeRegister32, abi
&nbsp;
<i># konstruktory instrukcí</i>
from peachpy.x86_64 import MOV, RETURN
&nbsp;
<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_42", (), int32_t) as asm_function:
    reg_x = GeneralPurposeRegister32()
    MOV(reg_x, 42)
    RETURN(reg_x)
&nbsp;
<i># obalení strojového kódu tak, aby se dal volat z interpretru Pythonu</i>
function_42 = asm_function.finalize(abi.detect()).encode().load()
&nbsp;
<i># typ hodnoty</i>
print(type(function_42))
print()
&nbsp;
<i># zavolání nové funkce</i>
print(function_42())
</pre>

<p>Po spuštění skutečně dostaneme hodnotu 42:</p>

<pre>
42
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Výpis strojových instrukcí vygenerovaných nástrojem PeachPy</h2>

<p>Nástroj PeachPy dokáže subrutinu, která je tvořena strojovými instrukcemi,
vypsat i v&nbsp;podobě odpovídající syntaxi assembleru. Z&nbsp;našeho pohledu
se tedy provádí činnost s&nbsp;libozvučným označením <i>disassembling</i>. Pro
tento účel se používá metoda <strong>format_code()</strong>:</p>

<pre>
<i># získání disassemblovaného strojového kódu</i>
disassembled = asm_function.finalize(abi.detect()).format_code()
</pre>

<p>Podívejme se, jak lze toto volání zařadit do našeho skriptu:</p>

<pre>
<i># datové typy</i>
from peachpy import int32_t
&nbsp;
<i># základní konstruktory atd.</i>
from peachpy.x86_64 import Function, GeneralPurposeRegister32, abi
&nbsp;
<i># konstruktory instrukcí</i>
from peachpy.x86_64 import MOV, RETURN
&nbsp;
<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_42", (), int32_t) as asm_function:
    reg_x = GeneralPurposeRegister32()
    MOV(reg_x, 42)
    RETURN(reg_x)
&nbsp;
<i># výpis disassemblovaného strojového kódu</i>
print(asm_function.finalize(abi.detect()).format_code())
</pre>

<p>Výsledek by měl vypadat následovně:</p>

<pre>
        MOV eax, 42
        MOV eax, eax
        RET
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Optimalizace subrutiny: přímá práce s&nbsp;registrem <strong>EAX</strong></h2>

<pre>
<i># datové typy</i>
from peachpy import int32_t

<i># základní konstruktory atd.</i>
from peachpy.x86_64 import Function, GeneralPurposeRegister32, abi

<i># registry</i>
from peachpy.x86_64 import eax

<i># konstruktory instrukcí</i>
from peachpy.x86_64 import MOV, RETURN

<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_42", (), int32_t) as asm_function:
    MOV(eax, 42)
    RETURN()

<i># obalení strojového kódu tak, aby se dal volat z interpretru Pythonu</i>
function_42 = asm_function.finalize(abi.detect()).encode().load()

<i># typ hodnoty</i>
print(type(function_42))
print()

<i># zavolání nové funkce</i>
print(function_42())
</pre>

<pre>
<i># datové typy</i>
from peachpy import int32_t

<i># základní konstruktory atd.</i>
from peachpy.x86_64 import Function, GeneralPurposeRegister32, abi

<i># registry</i>
from peachpy.x86_64 import eax

<i># konstruktory instrukcí</i>
from peachpy.x86_64 import MOV, RETURN

<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_42", (), int32_t) as asm_function:
    MOV(eax, 42)
    RETURN()


<i># výpis disassemblovaného strojového kódu</i>
print(asm_function.finalize(abi.detect()).format_code())
</pre>

<pre>
        MOV eax, 42
        RET
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady popsané v&nbsp;minulém článku i
v&nbsp;předchozích kapitolách lze nalézt v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>42.asm</td><td>subrutina bez parametrů vracející konstantu naprogramovaná v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.asm</a></td></tr>
<tr><td> 2</td><td>42.bin</td><td>instrukce subrutiny přeložené do strojového kódu bez dalších metainformací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.bin">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.bin</a></td></tr>
<tr><td> 3</td><td>42.lst</td><td>kontrolní výpis (<i>listing</i>) vytvořený assemblerem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.lst">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.lst</a></td></tr>
<tr><td> 4</td><td>asm1.py</td><td>spuštění strojového kódu z&nbsp;paměťového bufferu (nekorektní verze)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm1.py</a></td></tr>
<tr><td> 5</td><td>asm2.py</td><td>spuštění strojového kódu z&nbsp;paměťového bufferu (korektní verze)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm2.py</a></td></tr>
<tr><td> 6</td><td>asm3.py</td><td>spuštění strojového kódu načteného z&nbsp;(binárního) souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>double.asm</td><td>subrutina s&nbsp;jedním parametrem vracející 32bitovou hodnotu naprogramovaná v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.asm</a></td></tr>
<tr><td> 8</td><td>double.bin</td><td>instrukce subrutiny přeložené do strojového kódu bez dalších metainformací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.bin">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.bin</a></td></tr>
<tr><td> 9</td><td>double.lst</td><td>kontrolní výpis (<i>listing</i>) vytvořený assemblerem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.lst">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.lst</a></td></tr>
<tr><td>10</td><td>asm4.py</td><td>spuštění strojového kódu s&nbsp;předáním parametru, varianta bez přetečení 32bitové hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm4.py</a></td></tr>
<tr><td>11</td><td>asm5.py</td><td>spuštění strojového kódu s&nbsp;předáním parametru, varianta s&nbsp;přetečením 32bitové hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td>double64.asm</td><td>subrutina s&nbsp;jedním parametrem vracející 64bitovou hodnotu naprogramovaná v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.asm</a></td></tr>
<tr><td>13</td><td>double64.bin</td><td>instrukce subrutiny přeložené do strojového kódu bez dalších metainformací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.bin">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.bin</a></td></tr>
<tr><td>14</td><td>double64.lst</td><td>kontrolní výpis (<i>listing</i>) vytvořený assemblerem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.lst">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.lst</a></td></tr>
<tr><td>15</td><td>asm6.py</td><td>spuštění strojového kódu s&nbsp;předáním parametru bez přetečení 64bitové hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>add.asm</td><td>subrutina se dvěma parametry vracející jejich součet naprogramovaná v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.asm</a></td></tr>
<tr><td>17</td><td>add.bin</td><td>instrukce subrutiny přeložené do strojového kódu bez dalších metainformací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.bin">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.bin</a></td></tr>
<tr><td>18</td><td>add.lst</td><td>kontrolní výpis (<i>listing</i>) vytvořený assemblerem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.lst">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.lst</a></td></tr>
<tr><td>19</td><td>asm7.py</td><td>spuštění strojového kódu s&nbsp;předáním obou parametrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm7.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>20</td><td>asm8.py</td><td>načtení strojového kódu přímo z&nbsp;kontrolního výpisu (listingu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm8.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td>22</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td>23</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td>24</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td>25</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
</table>

výpis strojových instrukcí vygenerovaných nástrojem PeachPy

peachpy_42_1.py
peachpy_42_2.py
peachpy_42_3.py
peachpy_42_4.py



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Volání subrutin naprogramovaných v&nbsp;assembleru z&nbsp;jazyka Python<br />
<a href="https://www.root.cz/clanky/volani-subrutin-naprogramovanych-v-assembleru-z-jazyka-python/">https://www.root.cz/clanky/volani-subrutin-naprogramovanych-v-assembleru-z-jazyka-python/</a>
</li>

<li>ctypes &ndash; A foreign function library for Python<br />
<a href="https://docs.python.org/3/library/ctypes.html">https://docs.python.org/3/library/ctypes.html</a>
</li>

<li>CFFI documentation<br />
<a href="https://cffi.readthedocs.io/en/latest/">https://cffi.readthedocs.io/en/latest/</a>
</li>

<li>cffi 1.15.1 na PyPi<br />
<a href="https://pypi.org/project/cffi/">https://pypi.org/project/cffi/</a>
</li>

<li>Python Bindings: Calling C or C++ From Python<br />
<a href="https://realpython.com/python-bindings-overview/">https://realpython.com/python-bindings-overview/</a>
</li>

<li>Interfacing with C/C++ Libraries<br />
<a href="https://docs.python-guide.org/scenarios/clibs/">https://docs.python-guide.org/scenarios/clibs/</a>
</li>

<li>Cython, pybind11, cffi – which tool should you choose?<br />
<a href="http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html">http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html</a>
</li>

<li>Python FFI with ctypes and cffi<br />
<a href="https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi">https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi</a>
</li>

<li>Using standard library headers with CFFI<br />
<a href="https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi">https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi</a>
</li>

<li>C Arrays<br />
<a href="https://www.programiz.com/c-programming/c-arrays">https://www.programiz.com/c-programming/c-arrays</a>
</li>

<li>C Arrays<br />
<a href="https://www.w3schools.com/c/c_arrays.php">https://www.w3schools.com/c/c_arrays.php</a>
</li>

<li>Array of Structures in C<br />
<a href="https://overiq.com/c-programming-101/array-of-structures-in-c/#google_vignette">https://overiq.com/c-programming-101/array-of-structures-in-c/#google_vignette</a>
</li>

<li>Keystone Engine na GitHubu<br />
<a href="https://github.com/keystone-engine/keystone">https://github.com/keystone-engine/keystone</a>
</li>

<li>Keystone: The Ultimate Assembler<br />
<a href="https://www.keystone-engine.org/">https://www.keystone-engine.org/</a>
</li>

<li>The Ultimate Disassembler<br />
<a href="http://www.capstone-engine.org/">http://www.capstone-engine.org/</a>
</li>

<li>Tutorial for Keystone<br />
<a href="https://www.keystone-engine.org/docs/tutorial.html">https://www.keystone-engine.org/docs/tutorial.html</a>
</li>

<li>Rozhraní pro Capstone na PyPi<br />
<a href="https://pypi.org/project/capstone/">https://pypi.org/project/capstone/</a>
</li>

<li>Rozhraní pro Keystone na PyPi<br />
<a href="https://pypi.org/project/keystone-engine/">https://pypi.org/project/keystone-engine/</a>
</li>

<li>KEYSTONE: Next Generation Assembler Framework<br />
<a href="https://www.keystone-engine.org/docs/BHUSA2016-keystone.pdf">https://www.keystone-engine.org/docs/BHUSA2016-keystone.pdf</a>
</li>

<li>AT&amp;T Syntax versus Intel Syntax<br />
<a href="http://web.mit.edu/rhel-doc/3/rhel-as-en-3/i386-syntax.html">http://web.mit.edu/rhel-doc/3/rhel-as-en-3/i386-syntax.html</a>
</li>

<li>AT&amp;T assembly syntax and IA-32 instructions<br />
<a href="https://gist.github.com/mishurov/6bcf04df329973c15044">https://gist.github.com/mishurov/6bcf04df329973c15044</a>
</li>

<li>ARM GCC Inline Assembler Cookbook<br />
<a href="http://www.ethernut.de/en/documents/arm-inline-asm.html">http://www.ethernut.de/en/documents/arm-inline-asm.html</a>
</li>

<li>Extended Asm - Assembler Instructions with C Expression Operands<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html">https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html</a>
</li>

<li>ARM inline asm secrets<br />
<a href="http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/">http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/</a>
</li>

<li>How to Use Inline Assembly Language in C Code<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C">https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C</a>
</li>

<li>GCC-Inline-Assembly-HOWTO<br />
<a href="http://ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html">http://ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html</a>
</li>

<li>A Brief Tutorial on GCC inline asm (x86 biased)<br />
<a href="http://www.osdever.net/tutorials/view/a-brief-tutorial-on-gcc-inline-asm">http://www.osdever.net/tutorials/view/a-brief-tutorial-on-gcc-inline-asm</a>
</li>

<li>GCC Inline ASM<br />
<a href="http://locklessinc.com/articles/gcc_asm/">http://locklessinc.com/articles/gcc_asm/</a>
</li>

<li>GNU Assembler Examples<br />
<a href="http://cs.lmu.edu/~ray/notes/gasexamples/">http://cs.lmu.edu/~ray/notes/gasexamples/</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>The GNU Assembler Tutorial<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html">http://tigcc.ticalc.org/doc/gnuasm.html</a>
</li>

<li>The GNU Assembler - macros<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html#SEC109">http://tigcc.ticalc.org/doc/gnuasm.html#SEC109</a>
</li>

<li>ARM subroutines &amp; program stack<br />
<a href="http://www.toves.org/books/armsub/">http://www.toves.org/books/armsub/</a>
</li>

<li>Generating Mixed Source and Assembly List using GCC<br />
<a href="http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/">http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/</a>
</li>

<li>Calling subroutines<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v&nbsp;assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Assembler pod Linuxem<br />
<a href="http://phoenix.inf.upol.cz/linux/prog/asm.html">http://phoenix.inf.upol.cz/linux/prog/asm.html</a>
</li>

<li>Online x86 / x64 Assembler and Disassembler<br />
<a href="https://defuse.ca/online-x86-assembler.htm#disassembly">https://defuse.ca/online-x86-assembler.htm#disassembly</a>
</li>

<li>Executing assembly code in memory using python modules ctypes and mmap<br />
<a href="https://stackoverflow.com/questions/58851655/executing-assembly-code-in-memory-using-python-modules-ctypes-and-mmap">https://stackoverflow.com/questions/58851655/executing-assembly-code-in-memory-using-python-modules-ctypes-and-mmap</a>
</li>

<li>mmap - Memory-mapped file support<br />
<a href="https://docs.python.org/3/library/mmap.html">https://docs.python.org/3/library/mmap.html</a>
</li>

<li>ctypes - A foreign function library for Python<br />
<a href="https://docs.python.org/3/library/ctypes.html#module-ctypes">https://docs.python.org/3/library/ctypes.html#module-ctypes</a>
</li>

<li>Calling Conventions<br />
<a href="https://wiki.osdev.org/Calling_Conventions">https://wiki.osdev.org/Calling_Conventions</a>
</li>

<li>Linux x64 Calling Convention: Stack Frame<br />
<a href="https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/linux-x64-calling-convention-stack-frame">https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/linux-x64-calling-convention-stack-frame</a>
</li>

<li>Netwide assembler<br />
<a href="https://www.nasm.us/">https://www.nasm.us/</a>
</li>

<li>The Netwide Assembler: NASM: output formats<br />
<a href="https://ece-research.unm.edu/jimp/310/nasm/nasmdoc6.html">https://ece-research.unm.edu/jimp/310/nasm/nasmdoc6.html</a>
</li>

<li>PeachPy 0.0.1 <br />
<a href="https://pypi.org/project/PeachPy/">https://pypi.org/project/PeachPy/</a>
</li>

<li>PeachPy<br />
<a href="https://github.com/Maratyszcza/PeachPy">https://github.com/Maratyszcza/PeachPy</a>
</li>

<li>Historie s&nbsp;commity do knihovny PeachPy<br />
<a href="https://github.com/Maratyszcza/PeachPy/commits/master/">https://github.com/Maratyszcza/PeachPy/commits/master/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

