<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Volání subrutin naprogramovaných v assembleru z jazyka Python: knihovna PeachPy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Volání subrutin naprogramovaných v assembleru z jazyka Python: knihovna PeachPy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Volání subrutin naprogramovaných v&nbsp;assembleru z&nbsp;jazyka Python: knihovna PeachPy</a></p>
<p><a href="#k02">2. Instalace knihovny PeachPy</a></p>
<p><a href="#k03">3. Subrutina vracející konstantní hodnotu: původní řešení a nové řešení</a></p>
<p><a href="#k04">4. Výsledná podoba dnešního prvního demonstračního příkladu</a></p>
<p><a href="#k04">5. Výpis strojových instrukcí vygenerovaných nástrojem PeachPy</a></p>
<p><a href="#k06">6. Optimalizace subrutiny: přímá práce s&nbsp;registrem <strong>EAX</strong></a></p>
<p><a href="#k07">7. Subrutina akceptující jeden celočíselný parametr</a></p>
<p><a href="#k08">8. Varianta s&nbsp;pojmenovaným parametrem</a></p>
<p><a href="#k09">9. Varianta založená na znalosti ABI</a></p>
<p><a href="#k10">10. Práce se 64bitovými hodnotami</a></p>
<p><a href="#k11">11. První verze 64bitové varianty funkce <strong>double</strong></a></p>
<p><a href="#k12">12. Korektní verze 64bitové varianty funkce <strong>double</strong></a></p>
<p><a href="#k13">13. Subrutina pro součet dvou celých čísel</a></p>
<p><a href="#k14">14. Realizace subrutiny pro součet dvou celých čísel v&nbsp;knihovně PeachPy</a></p>
<p><a href="#k15">15. Výpis strojového kódu přeložené instrukce</a></p>
<p><a href="#k16">16. Ukázka způsobu překladu instrukce <strong>ADD</strong></a></p>
<p><a href="#k17">17. Různé varianty překladu instrukce <strong>ADD</strong></a></p>
<p><a href="#k18">*** 18. Obsah navazujícího článku</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Volání subrutin naprogramovaných v&nbsp;assembleru z&nbsp;jazyka Python: knihovna PeachPy</h2>

<p><a
href="https://www.root.cz/clanky/volani-subrutin-naprogramovanych-v-assembleru-z-jazyka-python/">V&nbsp;předchozím
článku</a> o tvorbě skriptů v&nbsp;Pythonu, které přímo dokážou volat strojový
kód, jsme si ukázali, jakým způsobem je možné využít poněkud nestandardní
postup, který je založen na balíčcích <strong>mmap</strong> (podpora pro
paměťové oblasti, které mohou být &bdquo;spustitelné&ldquo;) a
<strong>ctypes</strong> (podpora pro volání nativních funkcí
resp.&nbsp;subrutin přímo z&nbsp;Pythonu). Výsledné řešení bylo zajímavé
zejména proto, že nám umožnilo nahlédnout &bdquo;pod pokličku&ldquo;, takže
nyní máme alespoň základní povědomí o tom, jak je problém volání subrutin
naprogramovaných přímo ve strojovém kódu realizován v&nbsp;dalších knihovnách a
nástrojích, které ovšem mnohdy tyto základní koncepty obalí do další vrstvy
abstrakce (což může být výhoda, ale taktéž nevýhoda).</p>

<p>Dnes si představíme knihovnu nazvanou <i>PeachPy</i>, která taktéž umožňuje
realizovat kooperaci mezi skripty naprogramovanými v&nbsp;Pythonu na jedné
straně a strojovým kódem zapsaným formou instrukcí na straně druhé. Tato
knihovna ovšem podporuje zápis instrukcí, které subrutinu tvoří, přímo
v&nbsp;Pythonu. V&nbsp;tomto případě je každá instrukce (z&nbsp;pohledu
vývojáře) realizována voláním nějaké funkce. Toto volání funkcí je interně
překládáno do strojového kódu a následně je tento strojový kód
&bdquo;obalen&ldquo; takovým způsobem, aby byl volatelný naprosto stejným
způsobem, jako jakákoli jiná funkce naprogramovaná přímo v&nbsp;Pythonu.
V&nbsp;tomto případě tedy nemusíme vůbec používat assembler a navíc PeachPy
podporuje různé procesorové architektury.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace knihovny PeachPy</h2>

<p>Aby bylo možné spouštět demonstrační příklady uvedené v&nbsp;navazujících
kapitolách, je pochopitelně nutné si knihovnu <i>PeachPy</i> nainstalovat.
Nepoužívejte ovšem balíček <a href="https://pypi.org/project/PeachPy/">ve verzi
zveřejněné na PyPi</a>, protože ten je zastaralý a instalace pro novější verze
Pythonu neproběhne korektně. Lepší a stejně (ne)bezpečné je provést instalaci
přímo z&nbsp;GitHubu, konkrétně z&nbsp;repositáře <a
href="https://github.com/Maratyszcza/PeachPy">https://github.com/Maratyszcza/PeachPy</a>:</p>

<pre>
$ <strong>pip install --user --upgrade git+https://github.com/Maratyszcza/PeachPy</strong>
</pre>

<p>Tato knihovna nemá žádné závislosti, takže je její instalace snadná:</p>

<pre>
Collecting git+https://github.com/Maratyszcza/PeachPy
  Cloning https://github.com/Maratyszcza/PeachPy to /tmp/pip-req-build-qhcvwpek
  Running command git clone --filter=blob:none --quiet https://github.com/Maratyszcza/PeachPy /tmp/pip-req-build-qhcvwpek
  Resolved https://github.com/Maratyszcza/PeachPy to commit 349e8f836142b2ed0efeb6bb99b1b715d87202e9
  Preparing metadata (setup.py) ... done
Requirement already satisfied: six in /usr/lib/python3.12/site-packages (from PeachPy==0.2.0) (1.16.0)
Building wheels for collected packages: PeachPy
  Building wheel for PeachPy (setup.py) ... done
  Created wheel for PeachPy: filename=PeachPy-0.2.0-py3-none-any.whl size=300119 sha256=993026a5f1746c3c7994f8a35fdb4a19a48f6502aa991adcc125eadd1bfbc149
  Stored in directory: /tmp/pip-ephem-wheel-cache-cyt7vjqq/wheels/f2/59/12/225dd94305705e4cfee531e8af6597a3b9360c07f0485b1ddd
Successfully built PeachPy
Installing collected packages: PeachPy
Successfully installed PeachPy-0.2.0
</pre>

<p>Kontrola instalace, resp.&nbsp;kontrola dostupnosti balíčku
<strong>peachpy</strong>:</p>

<pre>
$ <strong>python</strong>
&nbsp;
Python 3.12.9 (main, Feb  4 2025, 00:00:00) [GCC 14.2.1 20240912 (Red Hat 14.2.1-3)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; <strong>import peachpy</strong>
&gt;&gt;&gt; <strong>help(peachpy)</strong>
&nbsp;
Help on package peachpy:
&nbsp;
NAME
    peachpy
&nbsp;
DESCRIPTION
    # This file is part of PeachPy package and is licensed under the Simplified BSD license.
    #    See license.rst for the full text of the license.
&nbsp;
PACKAGE CONTENTS
    abi
    arm (package)
    c (package)
    codegen
    common (package)
    encoder
    formats (package)
    function
    literal
    loader
    name
    parse
    stream
    util
    writer
    x86_64 (package)
    ...
    ...
    ...
</pre>

<p>Pro zajímavost si vypišme aktuálně používané ABI (liší se podle architektury a operačního systému):</p>

<pre>
<i># základní konstruktory atd.</i>
from peachpy.x86_64 import abi
&nbsp;
print(abi.detect())
</pre>

<p>Na platformě x86-64 a Linuxu by se mělo vypsat:</p>

<pre>
SystemV x86-64 ABI
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Subrutina vracející konstantní hodnotu: původní řešení a nové řešení</h2>

<p>Nyní se vraťme k&nbsp;původnímu článku, ve kterém jsme si ukázali několik
příkladů subrutin napsaných v&nbsp;assembleru. Ta nejjednodušší subrutina pouze
vracela konstantní hodnotu a v&nbsp;assembleru vypadala následovně:</p>

<pre>
[bits 64]
&nbsp;
        mov eax, 42
        ret
</pre>

<p>Tato subrutina je na platformě x86-64 přeložena do šesti bajtů, které jsme
načetli, obalili kódem, který ze subrutiny udělal Pythonovskou funkci a tuto
funkci jsme následně zavolali. Jednalo se o několik relativně nízkoúrovňových
operací:</p>

<pre>
import ctypes
import mmap
&nbsp;
<i># konstrukce bufferu</i>
with mmap.mmap(-1, mmap.PAGESIZE, prot=mmap.PROT_WRITE | mmap.PROT_EXEC) as buffer:
    <i># zapis strojoveho kodu do bufferu</i>
    buffer.write(
        b'\xB8\x2A\x00\x00\x00'
        b'\xC3'
    )
&nbsp;
    <i># deklarace typu nativni funkce</i>
    function_type = ctypes.CFUNCTYPE(ctypes.c_int)
&nbsp;
    <i># ziskani adresy strojoveho kodu</i>
    function_pointer = ctypes.c_void_p.from_buffer(buffer)
&nbsp;
    <i># reference na volatelnou funkci</i>
    function_42 = function_type(ctypes.addressof(function_pointer))
&nbsp;
    <i># zavolani funkce a vypis vysledku</i>
    result = function_42()
    print(result)
&nbsp;
    <i># pred uzavrenim bufferu je nutne odstranit ukazatele</i>
    del function_pointer
</pre>

<p>Řešení založené na nástroji PeachPy vypadá odlišně, ale postup je vlastně
stále stejný. Nejprve je nutné specifikovat vlastní instrukce subrutiny.
Prozatím vytvoříme subrutinu bez parametrů vracející 32bitovou hodnotu.
V&nbsp;subrutině vložíme do náhodně vybraného pracovního registru konstantu 42,
kterou vrátíme &ndash; tato hodnota bude návratovou hodnotou celé subrutiny.
Povšimněte si, jak se zapisují jednotlivé instrukce, jakoby se jednalo o volání
Pythonovských funkcí:</p>

<pre>
with Function("Function_42", (), int32_t) as asm_function:
    reg_x = GeneralPurposeRegister32()
    MOV(reg_x, 42)
    RETURN(reg_x)
</pre>

<p><div class="rs-tip-major">Poznámka: &bdquo;obalení&ldquo; blokem
<strong>with</strong> zajistí automatické ukončení zápisu instrukcí (což je
vyžadováno). Ovšem proměnná <strong>asm_function</strong> bude platná i po
opuštění tohoto bloku.</div></p>

<p>Následně se provede (de facto) překlad instrukcí do strojového kódu a nový
kód subrutiny je obalen tak, aby byl volatelný z&nbsp;Pythonu:</p>

<pre>
<i># obalení strojového kódu tak, aby se dal volat z interpretru Pythonu</i>
function_42 = asm_function.finalize(abi.detect()).encode().load()
</pre>

<p>Novou funkci je nyní možné začít používat v&nbsp;Pythonním kódu a zjistit
například její typ, zavolat ji (proč bychom ji jinak definovali?) atd.:</p>

<pre>
<i># typ hodnoty</i>
print(type(function_42))
print()
&nbsp;
<i># zavolání nové funkce</i>
print(function_42())
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výsledná podoba dnešního prvního demonstračního příkladu</h2>

<p>Výsledná podoba dnešního prvního demonstračního příkladu by měla vypadat
následovně:</p>

<pre>
<i># datové typy</i>
from peachpy import int32_t
&nbsp;
<i># základní konstruktory atd.</i>
from peachpy.x86_64 import Function, GeneralPurposeRegister32, abi
&nbsp;
<i># konstruktory instrukcí</i>
from peachpy.x86_64 import MOV, RETURN
&nbsp;
<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_42", (), int32_t) as asm_function:
    reg_x = GeneralPurposeRegister32()
    MOV(reg_x, 42)
    RETURN(reg_x)
&nbsp;
<i># obalení strojového kódu tak, aby se dal volat z interpretru Pythonu</i>
function_42 = asm_function.finalize(abi.detect()).encode().load()
&nbsp;
<i># typ hodnoty</i>
print(type(function_42))
print()
&nbsp;
<i># zavolání nové funkce</i>
print(function_42())
</pre>

<p>Po spuštění skutečně dostaneme specifikaci typu funkce a následně hodnotu
42:</p>

<pre>
&lt;class 'peachpy.x86_64.function.ExecutableFuntion'&gt;
&nbsp;
42
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Výpis strojových instrukcí vygenerovaných nástrojem PeachPy</h2>

<p>Nástroj PeachPy dokáže subrutinu, která je tvořena strojovými instrukcemi,
vypsat i v&nbsp;podobě odpovídající syntaxi assembleru. Z&nbsp;našeho pohledu
se tedy provádí činnost s&nbsp;libozvučným označením <i>disassembling</i>. Pro
tento účel se používá metoda <strong>format_code()</strong>:</p>

<pre>
<i># získání disassemblovaného strojového kódu</i>
disassembled = asm_function.finalize(abi.detect()).format_code()
</pre>

<p>Podívejme se, jak lze toto volání zařadit do našeho skriptu:</p>

<pre>
<i># datové typy</i>
from peachpy import int32_t
&nbsp;
<i># základní konstruktory atd.</i>
from peachpy.x86_64 import Function, GeneralPurposeRegister32, abi
&nbsp;
<i># konstruktory instrukcí</i>
from peachpy.x86_64 import MOV, RETURN
&nbsp;
<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_42", (), int32_t) as asm_function:
    reg_x = GeneralPurposeRegister32()
    MOV(reg_x, 42)
    RETURN(reg_x)
&nbsp;
<i># výpis disassemblovaného strojového kódu</i>
print(asm_function.finalize(abi.detect()).format_code())
</pre>

<p>Výsledek by měl vypadat následovně:</p>

<pre>
        MOV eax, 42
        MOV eax, eax
        RET
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Optimalizace subrutiny: přímá práce s&nbsp;registrem <strong>EAX</strong></h2>

<p>Při pohledu na strojový kód vypsaný předchozím příkladem je patrné, že není
v&nbsp;žádném případě optimální. Zcela zbytečně totiž obsahuje instrukci pro
přesun hodnoty z&nbsp;registru <strong>EAX</strong> do téhož registru. Proč
tomu tak je? Vyžádali jsme si použití libovolného pracovního registru a PeachPy
zvolil právě akumulátor (což je čistě náhodou správně):</p>

<pre>
reg_x = GeneralPurposeRegister32()
</pre>

<p>Následující instrukce se převede do načtení konstanty do registru
<strong>EAX</strong>, což je opět správně:</p>

<pre>
MOV(reg_x, 42)
</pre>

<p>Ovšem ABI na platformě x86-64 říká, že návratová hodnota funkce má být
uložena v&nbsp;registru RAX popř.&nbsp;RAX+RDX. V&nbsp;našem případě tedy
postačuje naplnit <strong>EAX</strong>, což je již splněno, takže explicitní
specifikace v&nbsp;instrukci <strong>RETURN</strong> je zbytečná:</p>

<pre>
RETURN(reg_x)
</pre>

<p>Pokud přesně víme, s&nbsp;jakými registry máme pracovat (je to jen
<strong>EAX</strong>), můžeme subrutinu zapsat odlišně:</p>

<pre>
MOV(eax, 42)
RETURN()
</pre>

<p>Otestujeme si, zda je chování korektní:</p>

<pre>
<i># datové typy</i>
from peachpy import int32_t
&nbsp;
<i># základní konstruktory atd.</i>
from peachpy.x86_64 import Function, GeneralPurposeRegister32, abi
&nbsp;
<i># registry</i>
from peachpy.x86_64 import eax
&nbsp;
<i># konstruktory instrukcí</i>
from peachpy.x86_64 import MOV, RETURN
&nbsp;
<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_42", (), int32_t) as asm_function:
    MOV(eax, 42)
    RETURN()
&nbsp;
<i># obalení strojového kódu tak, aby se dal volat z interpretru Pythonu</i>
function_42 = asm_function.finalize(abi.detect()).encode().load()
&nbsp;
<i># typ hodnoty</i>
print(type(function_42))
print()
&nbsp;
<i># zavolání nové funkce</i>
print(function_42())
</pre>

<p>Výsledek je opravdu správný:</p>

<pre>
&lt;class 'peachpy.x86_64.function.ExecutableFuntion'&gt;
&nbsp;
42
</pre>

<p>V&nbsp;dalším skriptu si necháme vypsat vygenerovaný strojový kód,
pochopitelně v&nbsp;jeho disassemblované podobě:</p>

<pre>
<i># datové typy</i>
from peachpy import int32_t
&nbsp;
<i># základní konstruktory atd.</i>
from peachpy.x86_64 import Function, GeneralPurposeRegister32, abi
&nbsp;
<i># registry</i>
from peachpy.x86_64 import eax
&nbsp;
<i># konstruktory instrukcí</i>
from peachpy.x86_64 import MOV, RETURN
&nbsp;
<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_42", (), int32_t) as asm_function:
    MOV(eax, 42)
    RETURN()
&nbsp;
&nbsp;
<i># výpis disassemblovaného strojového kódu</i>
print(asm_function.finalize(abi.detect()).format_code())
</pre>

<p>Výsledek nyní zcela odpovídá subrutině z&nbsp;předchozího článku:</p>

<pre>
        MOV eax, 42
        RET
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Subrutina akceptující jeden celočíselný parametr</h2>

<p>V&nbsp;dalších skriptech si ukážeme způsob naprogramování subrutiny, která
akceptuje jeden celočíselný parametr, ten vynásobí dvěma a vrátí výsledek této
operace. Ukážeme si dvě varianty naprogramování subrutiny. První varianta je
&bdquo;vysokoúrovňová&ldquo; a umožní nám abstrahovat od konkrétního ABI (tedy
například se v&nbsp;parametry budeme pracovat jako se skutečnými pojmenovanými
parametry a nebudeme řešit způsob jejich předávání). Druhá varianta bude více
&bdquo;nízkoúrovňová&ldquo; a využijeme v&nbsp;ní znalosti konkrétního ABI
(x86-64), tedy faktu, že první argument se předává v&nbsp;registru
<strong>EDI</strong> a výsledek bude uložen v&nbsp;registru
<strong>EAX</strong>.</p>

<p>Připomeňme si, jak tato subrutina vypadala v&nbsp;případě jejího
naprogramování v&nbsp;Netwide Assembleru:</p>

<pre>
[bits 64]
&nbsp;
        mov eax, edi
        add eax, eax
        ret
</pre>

<p>Výsledkem překladu assemblerem bude v&nbsp;tomto případě binární soubor o
délce pouhých pěti bajtů. O tom se můžeme přesvědčit i z&nbsp;kontrolního
výpisu (<i>listingu</i>) vytvořeného assemblerem:</p>

<pre>
     1                                  [bits 64]
     2                                  
     3 00000000 89F8                            mov eax, edi
     4 00000002 01C0                            add eax, eax
     5 00000004 C3                              ret
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Varianta s&nbsp;pojmenovaným parametrem</h2>

<p>První varianta subrutiny <strong>double</strong> bude naprogramována spíše
&bdquo;vysokoúrovňovým&ldquo; způsobem, ve kterém se využijí pojmenované a
otypované parametry. Nejdříve je definováno jméno a typ parametru (zatím bez
vazby na subrutinu):</p>

<pre>
x = Argument(int32_t)
</pre>

<p>Dále tento parametr použijeme při specifikaci hlavičky subrutiny. Seznam
parametrů je uveden jako druhý argument konstruktoru <strong>Function</strong>.
Třetí argument uvádí typ návratové hodnoty:</p>

<pre>
<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_double", (x, ), int32_t) as asm_function:
    ...
    ...
    ...
</pre>

<p>Důležité je, že parametr <strong>x</strong> může být použít
v&nbsp;instrukcích, a to následujícím stylem:</p>

<pre>
    LOAD.ARGUMENT(eax, x)
    ADD(eax, eax)
    RETURN()
</pre>

<p><div class="rs-tip-major">Poznámka: samotná subrutina je tedy realizována
nízkoúrovňovými instrukcemi, ovšem prozatím vůbec nemusíme znát ABI dané
architektury, abychom tuto subrutinu mohli zavolat a předat jí očekávané
hodnoty.</div></p>

<p>Celý skript bude vypadat následovně:</p>

<pre>
<i># datové typy</i>
from peachpy import int32_t, Argument
&nbsp;
<i># základní konstruktory atd.</i>
from peachpy.x86_64 import Function, GeneralPurposeRegister32, abi
&nbsp;
<i># registry</i>
from peachpy.x86_64 import eax
&nbsp;
<i># konstruktory instrukcí</i>
from peachpy.x86_64 import ADD, MOV, LOAD, RETURN
&nbsp;
x = Argument(int32_t)
&nbsp;
<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_double", (x, ), int32_t) as asm_function:
    LOAD.ARGUMENT(eax, x)
    ADD(eax, eax)
    RETURN()
&nbsp;
<i># obalení strojového kódu tak, aby se dal volat z interpretru Pythonu</i>
double = asm_function.finalize(abi.detect()).encode().load()
&nbsp;
<i># typ hodnoty</i>
print(type(double))
print()
&nbsp;
<i># výpis disassemblovaného strojového kódu</i>
print(asm_function.finalize(abi.detect()).format_code())
print()
&nbsp;
<i># zavolání nové funkce</i>
print(double(42))
&nbsp;
<i># přetečení 32bitové hodnoty</i>
print(double(10000000000))
</pre>

<p>Podívejme se na výsledky:</p>

<pre>
&lt;class 'peachpy.x86_64.function.ExecutableFuntion'&gt;
&nbsp;
        MOV eax, edi
        ADD eax, eax
        RET
&nbsp;
84
-1474836480
</pre>

<p>Výsledky jsou korektní (resp.&nbsp;i korektně došlo k&nbsp;přetečení), a
dokonce i vygenerovaný kód vypadá velmi rozumně (i když ho je možné
zkrátit).</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Varianta založená na znalosti ABI</h2>

<p>Druhá varianta subrutiny vracející svůj argument vynásobený dvěma je
založena na znalosti ABI. Konkrétně budeme předpokládat, že argument je předaný
v&nbsp;registru <strong>EDI</strong> a výsledek bude umístěn do registru
<strong>EAX</strong>. To nám umožní zkrácení subrutiny na pouhé tři
instrukce:</p>

<pre>
    MOV(eax, edi)
    ADD(eax, eax)
    RETURN()
</pre>

<p>Výsledný skript bude vypadat následovně:</p>

<pre>
<i># datové typy</i>
from peachpy import int32_t, Argument
&nbsp;
<i># základní konstruktory atd.</i>
from peachpy.x86_64 import Function, GeneralPurposeRegister32, abi
&nbsp;
<i># registry</i>
from peachpy.x86_64 import eax, edi
&nbsp;
<i># konstruktory instrukcí</i>
from peachpy.x86_64 import ADD, MOV, RETURN
&nbsp;
<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_double", (), int32_t) as asm_function:
    MOV(eax, edi)
    ADD(eax, eax)
    RETURN()
&nbsp;
<i># obalení strojového kódu tak, aby se dal volat z interpretru Pythonu</i>
double = asm_function.finalize(abi.detect()).encode().load()
&nbsp;
<i># typ hodnoty</i>
print(type(double))
print()
&nbsp;
<i># výpis disassemblovaného strojového kódu</i>
print(asm_function.finalize(abi.detect()).format_code())
print()
&nbsp;
<i># zavolání nové funkce</i>
print(double(42))
&nbsp;
<i># přetečení 32bitové hodnoty</i>
print(double(10000000000))
</pre>

<p>Chování pochopitelně otestujeme:</p>

<pre>
&lt;class 'peachpy.x86_64.function.ExecutableFuntion'&gt;
&nbsp;
        MOV eax, edi
        ADD eax, eax
        RET
&nbsp;
84
-1474836480
</pre>

<p>Výsledky jsou korektní, a to včetně (očekávaného) přetečení druhého
výsledku.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Práce se 64bitovými hodnotami</h2>

<p>Připomeňme si, že v&nbsp;Pythonu se pracuje s&nbsp;celočíselnými hodnotami,
které mohou mít prakticky neomezený rozsah (pochopitelně jsme limitováni
kapacitou paměti, ale především výpočetní rychlostí mikroprocesoru). Samozřejmě
i takové hodnoty je možné zpracovávat v&nbsp;subrutinách naprogramovaných
v&nbsp;assembleru nebo ve strojovém kódu, ale většinou se v&nbsp;praxi setkáme
s&nbsp;tím, že jsou zpracovávané či vracené celočíselné hodnoty nějakým
způsobem omezené.</p>

<p>Prozatím jsme naše subrutiny, typy jejich parametrů i typy návratových
hodnot navrhli takovým způsobem, že výpočty budou korektní pouze pro 32bitové
hodnoty (a i tehdy dochází k&nbsp;přetečení, to je však plně očekáváno). Zkusme
nyní provést takové úpravy, které by nám umožnily pracovat s&nbsp;hodnotami
64bitovými. Na první pohled by se mohlo zdát, že se jedná o triviální úlohu,
ovšem v&nbsp;praxi uvidíme, že je zapotřebí si dávat velmi dobrý pozor na
(tenké, ale stále existující) rozhraní mezi nativním kódem a Pythonem. Může se
totiž stát, že i &bdquo;plně 64bitová&ldquo; subrutina nebude vracet korektní
64bitové výsledky.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. První verze 64bitové varianty funkce <strong>double</strong></h2>

<p>Pokusme se nyní skript <a href="#k09">uvedený v&nbsp;deváté kapitole</a>
upravit takovým způsobem, aby jak parametry volané subrutiny, tak i její
návratová hodnota byly reprezentovány 64bitovými celými čísly a nikoli čísly
32bitovými. Jak to provedeme? Namísto 32bitových registrů <strong>EAX</strong>
a <strong>EDI</strong> použijeme 64bitové registry <strong>RAX</strong> a
<strong>RDI</strong> a navíc budeme specifikovat, že návratová hodnota je typu
<strong>int64_t</strong>. Všechny změny jsou v&nbsp;následujícím výpisu
zvýrazněny podtržením:</p>

<pre>
<i># datové typy</i>
from peachpy import int64_t, Argument
&nbsp;
<i># základní konstruktory atd.</i>
from peachpy.x86_64 import Function, GeneralPurposeRegister32, abi
&nbsp;
<i># registry</i>
from peachpy.x86_64 import <u>rax</u>, <u>rdi</u>
&nbsp;
<i># konstruktory instrukcí</i>
from peachpy.x86_64 import ADD, MOV, RETURN
&nbsp;
<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_double", (), <u>int64_t</u>) as asm_function:
    <u>MOV(rax, rdi)</u>
    <u>ADD(rax, rax)</u>
    RETURN()
&nbsp;
<i># obalení strojového kódu tak, aby se dal volat z interpretru Pythonu</i>
double = asm_function.finalize(abi.detect()).encode().load()
&nbsp;
<i># typ hodnoty</i>
print(type(double))
print()
&nbsp;
<i># výpis disassemblovaného strojového kódu</i>
print(asm_function.finalize(abi.detect()).format_code())
print()
&nbsp;
<i># zavolání nové funkce</i>
print(double(42))
&nbsp;
<i># přetečení 32bitové hodnoty se nekoná - nebo snad ano?</i>
print(double(10000000000))
</pre>

<p>Jak (kontrolní) výpis typu funkce, tak i výpis vygenerovaných instrukcí
vypadají korektně:</p>

<pre>
&lt;class 'peachpy.x86_64.function.ExecutableFuntion'&gt;
&nbsp;
        MOV rax, rdi
        ADD rax, rax
        RET
</pre>

<p>Korektně vypadá i první výsledek, ovšem druhý již ne:</p>

<pre>
84
2820130816
</pre>

<p>Ovšem pozor: hodnota 2820130816 značí, že k&nbsp;přetečení nedošlo při
vlastních výpočtech (ty jsou plně 64bitové a máme je pod kontrolou) ani při
zpracování návratové hodnoty, ale již na vstupu, resp.&nbsp;přesněji na
rozhraní mezi Pythonem a nativním kódem. Při &bdquo;běžném&ldquo; 32bitovém
přetečení bychom totiž měli dostat výsledky:</p>

<pre>
84
-1474836480
</pre>

<p>Konverzi hodnoty tedy provedl interpret Pythonu před voláním subrutiny.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Korektní verze 64bitové varianty funkce <strong>double</strong></h2>

<p>Abychom předchozí příklad opravili, je nutné explicitně specifikovat, že
argumentem naší subrutiny je 64bitová hodnota. Nejprve takový argument
vytvoříme:</p>

<pre>
x = Argument(int64_t)
</pre>

<p>Změní se jen deklarace hlavičky subrutiny, protože nyní explicitně napíšeme,
že argumentem bude <strong>x</strong>, i když interně budeme stále přímo
pracovat s&nbsp;64bitovým ABI:</p>

<pre>
<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_double", (x, ), int64_t) as asm_function:
    ...
    ...
    ...
</pre>

<p>Samotné tělo subrutiny (strojové instrukce) se nijak nezmění:</p>

<pre>
    MOV(rax, rdi)
    ADD(rax, rax)
    RETURN()
</pre>

<p>Opravený skript by měl vypadat následovně:</p>

<pre>
<i># datové typy</i>
from peachpy import int64_t, Argument
&nbsp;
<i># základní konstruktory atd.</i>
from peachpy.x86_64 import Function, GeneralPurposeRegister32, abi
&nbsp;
<i># registry</i>
from peachpy.x86_64 import rax, rdi
&nbsp;
<i># konstruktory instrukcí</i>
from peachpy.x86_64 import ADD, MOV, RETURN
&nbsp;
x = Argument(int64_t)
&nbsp;
<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_double", (x, ), int64_t) as asm_function:
    MOV(rax, rdi)
    ADD(rax, rax)
    RETURN()
&nbsp;
<i># obalení strojového kódu tak, aby se dal volat z interpretru Pythonu</i>
double = asm_function.finalize(abi.detect()).encode().load()
&nbsp;
<i># typ hodnoty</i>
print(type(double))
print()
&nbsp;
<i># výpis disassemblovaného strojového kódu</i>
print(asm_function.finalize(abi.detect()).format_code())
print()
&nbsp;
<i># zavolání nové funkce</i>
print(double(42))
&nbsp;
<i># přetečení 32bitové hodnoty se nekoná</i>
print(double(10000000000))
</pre>

<p>Zkontrolujeme, zda skutečně dostaneme korektní výsledek:</p>

<pre>
&lt;class 'peachpy.x86_64.function.ExecutableFuntion'&gt;
&nbsp;
        MOV rax, rdi
        ADD rax, rax
        RET
&nbsp;
84
20000000000
</pre>

<p>Ze zobrazených výsledků je patrné, že nyní se se 64bitovými argumenty i
návratovými hodnotami pracuje korektně.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Subrutina pro součet dvou celých čísel</h2>

<p>Minule jsme si ukázali jednoduchou subrutinu, která prováděla součet dvou
celých čísel. Ta jsou do subrutiny předána v&nbsp;registrech
<strong>EDI</strong> a <strong>ESI</strong> popř.&nbsp;v&nbsp;případě
64bitových hodnot v&nbsp;registrech <strong>RDI</strong> a
<strong>RSI</strong>:</p>

<pre>
[bits 64]
&nbsp;
        mov eax, edi
        add eax, esi
        ret
</pre>

<p>Připomeňme si, jak se přeložená subrutina načetla a následně volala přes
knihovnu <strong>ctypes</strong>:</p>

<pre>
import ctypes
import mmap
&nbsp;
<i># konstrukce bufferu</i>
with mmap.mmap(-1, mmap.PAGESIZE, prot=mmap.PROT_WRITE | mmap.PROT_EXEC) as buffer:
    with open("add.bin", "rb") as fin:
        buffer.write(fin.read())
&nbsp;
    <i># deklarace typu nativni funkce</i>
    function_type = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_int)
&nbsp;
    <i># ziskani adresy strojoveho kodu</i>
    function_pointer = ctypes.c_void_p.from_buffer(buffer)
&nbsp;
    <i># reference na volatelnou funkci</i>
    add = function_type(ctypes.addressof(function_pointer))
&nbsp;
    <i># zavolani funkce a vypis vysledku</i>
    result = add(1, 2)
    print(result)
&nbsp;
    <i># pred uzavrenim bufferu je nutne odstranit ukazatele</i>
    del function_pointer
</pre>

<p>Nyní provedeme podobnou operaci, ovšem plně založenou na knihovně
<i>PeachPy</i>.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Realizace subrutiny pro součet dvou celých čísel v&nbsp;knihovně PeachPy</h2>

<p>Celý postup si popíšeme po jednotlivých krocích. Nejdříve specifikujeme
argumenty subrutiny, tj.&nbsp;jejich jména a typy:</p>

<pre>
x = Argument(int64_t)
y = Argument(int64_t)
</pre>

<p>Následně přes PeachPy určíme, že subrutina bude volána s&nbsp;argumenty
<strong>x</strong> a <strong>y</strong> (definovanými výše) a že její návratová
hodnota bude typu <strong>int64_t</strong>:</p>

<pre>
<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_add", (x, y), int64_t) as asm_function:
    ...
    ...
    ...
</pre>

<p>V&nbsp;samotné subrutině můžeme přímo využít znalostí ABI, tj.&nbsp;toho, že
hodnoty pro výpočet získáme v&nbsp;registrech <strong>RDI</strong> a
<strong>RSI</strong> a návratová hodnota bude v&nbsp;registru
<strong>RAX</strong>:</p>

<pre>
    MOV(rax, rdi)
    ADD(rax, rsi)
    RETURN()
</pre>

<p>Celý skript vypadá následovně:</p>

<pre>
<i># datové typy</i>
from peachpy import int64_t, Argument
&nbsp;
<i># základní konstruktory atd.</i>
from peachpy.x86_64 import Function, GeneralPurposeRegister32, abi
&nbsp;
<i># registry</i>
from peachpy.x86_64 import rax, rdi, rsi
&nbsp;
<i># konstruktory instrukcí</i>
from peachpy.x86_64 import ADD, MOV, RETURN
&nbsp;
x = Argument(int64_t)
y = Argument(int64_t)
&nbsp;
<i># vytvoření nové subrutiny ve strojovém kódu</i>
with Function("Function_add", (x, y), int64_t) as asm_function:
    MOV(rax, rdi)
    ADD(rax, rsi)
    RETURN()
&nbsp;
<i># obalení strojového kódu tak, aby se dal volat z interpretru Pythonu</i>
add = asm_function.finalize(abi.detect()).encode().load()
&nbsp;
<i># typ hodnoty</i>
print(type(add))
print()
&nbsp;
<i># výpis disassemblovaného strojového kódu</i>
print(asm_function.finalize(abi.detect()).format_code())
print()
&nbsp;
<i># zavolání nové funkce</i>
print(add(1, 2))
&nbsp;
print(add(10000000000, 20000000000))
</pre>

<p>Výsledky ukazují jak přeloženou subrutinu (zcela korektní), tak i výsledky
výpočtů, ze kterých je patrné, že se korektně pracuje se 64bitovými
hodnotami:</p>

<pre>
&lt;class 'peachpy.x86_64.function.ExecutableFuntion'&gt;
&nbsp;
        MOV rax, rdi
        ADD rax, rsi
        RET
&nbsp;
3
30000000000
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Výpis strojového kódu přeložené instrukce</h2>

<p>Mezi další užitečné vlastnosti knihovny <i>PeachPy</i> patří schopnost
zobrazit strojový kód přeložené instrukce, popř.&nbsp;instrukci zobrazit
s&nbsp;využitím různých formátů zápisu. Některé assemblery totiž používají
AT&amp;T syntaxi (výchozí nastavení GNU Assembleru), jiné spíše původní syntaxi
společnosti Intel (Netwide Assembler a původní DOSovské assemblery). Způsoby
zápisu operandů se dosti podstatným způsobem liší, takže je dobré, že nám
PeachPy dává na výběr. Jak se vlastně postupuje?</p>

<p>Nejprve zkonstruujeme objekt, který instrukci představuje, například:</p>

<pre>
ADD(rax, rdi)
</pre>

<p>Tento konstruktor vytvoří objekt, který v&nbsp;assembleru odpovídá
instrukci:</p>

<pre>
ADD rax, rdi
</pre>

<p>Následně můžeme získat bytové pole (<i>byte array</i>) se strojovým kódem
přeložené instrukce, pochopitelně včetně jejích operandů:</p>

<pre>
instruction = ADD(rax, rdi)
bytové_pole = instruction.encode()
</pre>

<p>Takové bytové pole si můžeme zobrazit například formou hexadecimálního
výpisu (každý bajt se zobrazí jako dvě hexadecimální cifry), což je již několik
desetiletí nepsaný standard:</p>

<pre>
print(" ".join(format(byte, "02x") for byte in instruction.encode()))
</pre>

<p>A dále je možné si nechat zobrazit zápis instrukce tak, jak to odpovídá
vybranému assembleru. Na výběr je několik formátů, z&nbsp;nichž využijeme
&bdquo;gas&ldquo; (což odpovídá AT&amd;T syntaxi), &bdquo;nasm&ldquo; (Netwide
Assembler) nebo &bdquo;peachpy&ldquo; (modernější způsoby zápisu). Specifický
je i formát používaný assemblerem jazyka Go (k&nbsp;tomu se ještě vrátíme
příště):</p>

<pre>
print(instruction.format(assembly_format="nasm"))
print(instruction.format(assembly_format="peachpy"))
print(instruction.format(assembly_format="gas"))
print(instruction.format(assembly_format="go"))
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Ukázka způsobu překladu instrukce <strong>ADD</strong></h2>

<p>Vyzkoušejme si nyní zobrazit instrukci <strong>ADD rax, rdi</strong> různými
způsoby: jako strojový kód a taktéž ve formátu odpovídajícím různým
assemblerům:</p>

<pre>
<i># registry</i>
from peachpy.x86_64 import rax, rdi
&nbsp;
<i># konstruktory instrukcí</i>
from peachpy.x86_64 import ADD
&nbsp;
&nbsp;
def <strong>print_instruction</strong>(instruction):
    print(" ".join(format(byte, "02x") for byte in instruction.encode()))
    print(instruction.format(assembly_format="nasm"))
    print(instruction.format(assembly_format="peachpy"))
    print(instruction.format(assembly_format="gas"))
    print(instruction.format(assembly_format="go"))
&nbsp;
&nbsp;
print_instruction(ADD(rax, rdi))
</pre>

<p>Výsledky (s&nbsp;doplněnými poznámkami) by měly vypadat následovně:</p>

<pre>
48 01 f8               &lt;- strojový kód
ADD rax, rdi           &lt;- formát Netwide assembleru
ADD rax, rdi           &lt;- formát PeachPy
addq %rdi, %rax        &lt;- výchozí formát GNU assembleru
ADDQ DI, AX            &lt;- formát assembleru v&nbsp;jazyku Go
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Různé varianty překladu instrukce <strong>ADD</strong></h2>

<pre>
<i># registry</i>
from peachpy.x86_64 import rax, rbx, rcx, rdx, rsi, rdi, rbp
from peachpy.x86_64 import r8, r9, r10, r11, r12, r13, r14, r15
&nbsp;
<i># konstruktory instrukcí</i>
from peachpy.x86_64 import ADD
&nbsp;
&nbsp;
def <strong>print_instruction</strong>(instruction):
    print(" ".join(format(byte, "02x") for byte in instruction.encode()), end="\t")
    print(instruction.format(assembly_format="peachpy"), end="\t")
    print(instruction.format(assembly_format="gas"))
&nbsp;
&nbsp;
for r1 in  rax, rbx, rcx, rdx, rsi, rdi, rbp, r8, r9, r10, r11, r12, r13, r14, r15:
    for r2 in  rax, rbx, rcx, rdx, rsi, rdi, rbp, r8, r9, r10, r11, r12, r13, r14, r15:
        print_instruction(ADD(r1, r2))
</pre>

<p>Výsledky by měly vypadat takto (výpis je zkrácen):</p>

<pre>
48 01 c0        ADD rax, rax    addq %rax, %rax
48 01 d8        ADD rax, rbx    addq %rbx, %rax
48 01 c8        ADD rax, rcx    addq %rcx, %rax
48 01 d0        ADD rax, rdx    addq %rdx, %rax
48 01 f0        ADD rax, rsi    addq %rsi, %rax
48 01 f8        ADD rax, rdi    addq %rdi, %rax
48 01 e8        ADD rax, rbp    addq %rbp, %rax
4c 01 c0        ADD rax, r8     addq %r8, %rax
4c 01 c8        ADD rax, r9     addq %r9, %rax
4c 01 d0        ADD rax, r10    addq %r10, %rax
4c 01 d8        ADD rax, r11    addq %r11, %rax
4c 01 e0        ADD rax, r12    addq %r12, %rax
4c 01 e8        ADD rax, r13    addq %r13, %rax
4c 01 f0        ADD rax, r14    addq %r14, %rax
4c 01 f8        ADD rax, r15    addq %r15, %rax
    ...
    ...
    ...
49 01 c7        ADD r15, rax    addq %rax, %r15
49 01 df        ADD r15, rbx    addq %rbx, %r15
49 01 cf        ADD r15, rcx    addq %rcx, %r15
49 01 d7        ADD r15, rdx    addq %rdx, %r15
49 01 f7        ADD r15, rsi    addq %rsi, %r15
49 01 ff        ADD r15, rdi    addq %rdi, %r15
49 01 ef        ADD r15, rbp    addq %rbp, %r15
4d 01 c7        ADD r15, r8     addq %r8, %r15
4d 01 cf        ADD r15, r9     addq %r9, %r15
4d 01 d7        ADD r15, r10    addq %r10, %r15
4d 01 df        ADD r15, r11    addq %r11, %r15
4d 01 e7        ADD r15, r12    addq %r12, %r15
4d 01 ef        ADD r15, r13    addq %r13, %r15
4d 01 f7        ADD r15, r14    addq %r14, %r15
4d 01 ff        ADD r15, r15    addq %r15, %r15
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah navazujícího článku</h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady popsané v&nbsp;minulém článku i
v&nbsp;předchozích kapitolách lze nalézt v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>42.asm</td><td>subrutina bez parametrů vracející konstantu naprogramovaná v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.asm</a></td></tr>
<tr><td> 2</td><td>42.bin</td><td>instrukce subrutiny přeložené do strojového kódu bez dalších metainformací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.bin">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.bin</a></td></tr>
<tr><td> 3</td><td>42.lst</td><td>kontrolní výpis (<i>listing</i>) vytvořený assemblerem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.lst">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.lst</a></td></tr>
<tr><td> 4</td><td>asm1.py</td><td>spuštění strojového kódu z&nbsp;paměťového bufferu (nekorektní verze)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm1.py</a></td></tr>
<tr><td> 5</td><td>asm2.py</td><td>spuštění strojového kódu z&nbsp;paměťového bufferu (korektní verze)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm2.py</a></td></tr>
<tr><td> 6</td><td>asm3.py</td><td>spuštění strojového kódu načteného z&nbsp;(binárního) souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>double.asm</td><td>subrutina s&nbsp;jedním parametrem vracející 32bitovou hodnotu naprogramovaná v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.asm</a></td></tr>
<tr><td> 8</td><td>double.bin</td><td>instrukce subrutiny přeložené do strojového kódu bez dalších metainformací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.bin">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.bin</a></td></tr>
<tr><td> 9</td><td>double.lst</td><td>kontrolní výpis (<i>listing</i>) vytvořený assemblerem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.lst">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.lst</a></td></tr>
<tr><td>10</td><td>asm4.py</td><td>spuštění strojového kódu s&nbsp;předáním parametru, varianta bez přetečení 32bitové hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm4.py</a></td></tr>
<tr><td>11</td><td>asm5.py</td><td>spuštění strojového kódu s&nbsp;předáním parametru, varianta s&nbsp;přetečením 32bitové hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td>double64.asm</td><td>subrutina s&nbsp;jedním parametrem vracející 64bitovou hodnotu naprogramovaná v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.asm</a></td></tr>
<tr><td>13</td><td>double64.bin</td><td>instrukce subrutiny přeložené do strojového kódu bez dalších metainformací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.bin">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.bin</a></td></tr>
<tr><td>14</td><td>double64.lst</td><td>kontrolní výpis (<i>listing</i>) vytvořený assemblerem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.lst">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.lst</a></td></tr>
<tr><td>15</td><td>asm6.py</td><td>spuštění strojového kódu s&nbsp;předáním parametru bez přetečení 64bitové hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>add.asm</td><td>subrutina se dvěma parametry vracející jejich součet naprogramovaná v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.asm</a></td></tr>
<tr><td>17</td><td>add.bin</td><td>instrukce subrutiny přeložené do strojového kódu bez dalších metainformací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.bin">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.bin</a></td></tr>
<tr><td>18</td><td>add.lst</td><td>kontrolní výpis (<i>listing</i>) vytvořený assemblerem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.lst">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.lst</a></td></tr>
<tr><td>19</td><td>asm7.py</td><td>spuštění strojového kódu s&nbsp;předáním obou parametrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm7.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>20</td><td>asm8.py</td><td>načtení strojového kódu přímo z&nbsp;kontrolního výpisu (listingu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm8.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>peachpy_abi.py</td><td>zjištění, které ABI se používá na počítači, na němž je skript spuštěn</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_abi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_abi.py</a></td></tr>
<tr><td>22</td><td>peachpy_42_1.py</td><td>první verze subrutiny vracející celočíselnou konstantu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_42_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_42_1.py</a></td></tr>
<tr><td>23</td><td>peachpy_42_2.py</td><td>výpis strojových instrukcí vygenerovaných nástrojem PeachPy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_42_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_42_2.py</a></td></tr>
<tr><td>24</td><td>peachpy_42_3.py</td><td>kratší verze subrutiny vracející celočíselnou konstantu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_42_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_42_3.py</a></td></tr>
<tr><td>25</td><td>peachpy_42_4.py</td><td>výpis strojových instrukcí vygenerovaných nástrojem PeachPy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_42_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_42_4.py</a></td></tr>
<tr><td>26</td><td>peachpy_double32_1.py</td><td>subrutina akceptující jeden celočíselný parametr: varianta s&nbsp;pojmenovaným parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_double32_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_double32_1.py</a></td></tr>
<tr><td>27</td><td>peachpy_double32_2.py</td><td>subrutina akceptující jeden celočíselný parametr: varianta založená na znalosti ABI</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_double32_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_double32_2.py</a></td></tr>
<tr><td>28</td><td>peachpy_double64_1.py</td><td>přepis předchozího příkladu tak, aby pracoval se 64bitovým parametrem a vracel 64bitovou hodnotu (nekorektní řešení)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_double64_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_double64_1.py</a></td></tr>
<tr><td>29</td><td>peachpy_double64_2.py</td><td>přepis předchozího příkladu tak, aby pracoval se 64bitovým parametrem a vracel 64bitovou hodnotu (korektní řešení)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_double64_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_double64_2.py</a></td></tr>
<tr><td>30</td><td>peachpy_add_1.py</td><td>subrutina provádějící součet dvou celočíselných hodnot</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_add_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_add_1.py</a></td></tr>
<tr><td>31</td><td>peachpy_add_2.py</td><td>subrutina provádějící součet dvou celočíselných hodnot</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_add_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_add_2.py</a></td></tr>
<tr><td>32</td><td>peachpy_add_3.py</td><td>subrutina provádějící součet dvou celočíselných hodnot</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_add_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_add_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>peachpy_instruction_1.py</td><td>výpis strojového kódu instrukcí, jednodušší varianta</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_instruction_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_instruction_1.py</a></td></tr>
<tr><td>34</td><td>peachpy_instruction_2.py</td><td>výpis strojového kódu instrukcí, složitější varianta</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_instruction_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/peachpy_instruction_2.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Volání subrutin naprogramovaných v&nbsp;assembleru z&nbsp;jazyka Python<br />
<a href="https://www.root.cz/clanky/volani-subrutin-naprogramovanych-v-assembleru-z-jazyka-python/">https://www.root.cz/clanky/volani-subrutin-naprogramovanych-v-assembleru-z-jazyka-python/</a>
</li>

<li>ctypes &ndash; A foreign function library for Python<br />
<a href="https://docs.python.org/3/library/ctypes.html">https://docs.python.org/3/library/ctypes.html</a>
</li>

<li>CFFI documentation<br />
<a href="https://cffi.readthedocs.io/en/latest/">https://cffi.readthedocs.io/en/latest/</a>
</li>

<li>cffi 1.15.1 na PyPi<br />
<a href="https://pypi.org/project/cffi/">https://pypi.org/project/cffi/</a>
</li>

<li>Python Bindings: Calling C or C++ From Python<br />
<a href="https://realpython.com/python-bindings-overview/">https://realpython.com/python-bindings-overview/</a>
</li>

<li>Interfacing with C/C++ Libraries<br />
<a href="https://docs.python-guide.org/scenarios/clibs/">https://docs.python-guide.org/scenarios/clibs/</a>
</li>

<li>Cython, pybind11, cffi – which tool should you choose?<br />
<a href="http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html">http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html</a>
</li>

<li>Python FFI with ctypes and cffi<br />
<a href="https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi">https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi</a>
</li>

<li>Using standard library headers with CFFI<br />
<a href="https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi">https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi</a>
</li>

<li>C Arrays<br />
<a href="https://www.programiz.com/c-programming/c-arrays">https://www.programiz.com/c-programming/c-arrays</a>
</li>

<li>C Arrays<br />
<a href="https://www.w3schools.com/c/c_arrays.php">https://www.w3schools.com/c/c_arrays.php</a>
</li>

<li>Array of Structures in C<br />
<a href="https://overiq.com/c-programming-101/array-of-structures-in-c/#google_vignette">https://overiq.com/c-programming-101/array-of-structures-in-c/#google_vignette</a>
</li>

<li>Keystone Engine na GitHubu<br />
<a href="https://github.com/keystone-engine/keystone">https://github.com/keystone-engine/keystone</a>
</li>

<li>Keystone: The Ultimate Assembler<br />
<a href="https://www.keystone-engine.org/">https://www.keystone-engine.org/</a>
</li>

<li>The Ultimate Disassembler<br />
<a href="http://www.capstone-engine.org/">http://www.capstone-engine.org/</a>
</li>

<li>Tutorial for Keystone<br />
<a href="https://www.keystone-engine.org/docs/tutorial.html">https://www.keystone-engine.org/docs/tutorial.html</a>
</li>

<li>Rozhraní pro Capstone na PyPi<br />
<a href="https://pypi.org/project/capstone/">https://pypi.org/project/capstone/</a>
</li>

<li>Rozhraní pro Keystone na PyPi<br />
<a href="https://pypi.org/project/keystone-engine/">https://pypi.org/project/keystone-engine/</a>
</li>

<li>KEYSTONE: Next Generation Assembler Framework<br />
<a href="https://www.keystone-engine.org/docs/BHUSA2016-keystone.pdf">https://www.keystone-engine.org/docs/BHUSA2016-keystone.pdf</a>
</li>

<li>AT&amp;T Syntax versus Intel Syntax<br />
<a href="http://web.mit.edu/rhel-doc/3/rhel-as-en-3/i386-syntax.html">http://web.mit.edu/rhel-doc/3/rhel-as-en-3/i386-syntax.html</a>
</li>

<li>AT&amp;T assembly syntax and IA-32 instructions<br />
<a href="https://gist.github.com/mishurov/6bcf04df329973c15044">https://gist.github.com/mishurov/6bcf04df329973c15044</a>
</li>

<li>ARM GCC Inline Assembler Cookbook<br />
<a href="http://www.ethernut.de/en/documents/arm-inline-asm.html">http://www.ethernut.de/en/documents/arm-inline-asm.html</a>
</li>

<li>Extended Asm - Assembler Instructions with C Expression Operands<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html">https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html</a>
</li>

<li>ARM inline asm secrets<br />
<a href="http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/">http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/</a>
</li>

<li>How to Use Inline Assembly Language in C Code<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C">https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C</a>
</li>

<li>GCC-Inline-Assembly-HOWTO<br />
<a href="http://ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html">http://ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html</a>
</li>

<li>A Brief Tutorial on GCC inline asm (x86 biased)<br />
<a href="http://www.osdever.net/tutorials/view/a-brief-tutorial-on-gcc-inline-asm">http://www.osdever.net/tutorials/view/a-brief-tutorial-on-gcc-inline-asm</a>
</li>

<li>GCC Inline ASM<br />
<a href="http://locklessinc.com/articles/gcc_asm/">http://locklessinc.com/articles/gcc_asm/</a>
</li>

<li>GNU Assembler Examples<br />
<a href="http://cs.lmu.edu/~ray/notes/gasexamples/">http://cs.lmu.edu/~ray/notes/gasexamples/</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>The GNU Assembler Tutorial<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html">http://tigcc.ticalc.org/doc/gnuasm.html</a>
</li>

<li>The GNU Assembler - macros<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html#SEC109">http://tigcc.ticalc.org/doc/gnuasm.html#SEC109</a>
</li>

<li>ARM subroutines &amp; program stack<br />
<a href="http://www.toves.org/books/armsub/">http://www.toves.org/books/armsub/</a>
</li>

<li>Generating Mixed Source and Assembly List using GCC<br />
<a href="http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/">http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/</a>
</li>

<li>Calling subroutines<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v&nbsp;assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Assembler pod Linuxem<br />
<a href="http://phoenix.inf.upol.cz/linux/prog/asm.html">http://phoenix.inf.upol.cz/linux/prog/asm.html</a>
</li>

<li>Online x86 / x64 Assembler and Disassembler<br />
<a href="https://defuse.ca/online-x86-assembler.htm#disassembly">https://defuse.ca/online-x86-assembler.htm#disassembly</a>
</li>

<li>Executing assembly code in memory using python modules ctypes and mmap<br />
<a href="https://stackoverflow.com/questions/58851655/executing-assembly-code-in-memory-using-python-modules-ctypes-and-mmap">https://stackoverflow.com/questions/58851655/executing-assembly-code-in-memory-using-python-modules-ctypes-and-mmap</a>
</li>

<li>mmap - Memory-mapped file support<br />
<a href="https://docs.python.org/3/library/mmap.html">https://docs.python.org/3/library/mmap.html</a>
</li>

<li>ctypes - A foreign function library for Python<br />
<a href="https://docs.python.org/3/library/ctypes.html#module-ctypes">https://docs.python.org/3/library/ctypes.html#module-ctypes</a>
</li>

<li>Calling Conventions<br />
<a href="https://wiki.osdev.org/Calling_Conventions">https://wiki.osdev.org/Calling_Conventions</a>
</li>

<li>Linux x64 Calling Convention: Stack Frame<br />
<a href="https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/linux-x64-calling-convention-stack-frame">https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/linux-x64-calling-convention-stack-frame</a>
</li>

<li>Netwide assembler<br />
<a href="https://www.nasm.us/">https://www.nasm.us/</a>
</li>

<li>The Netwide Assembler: NASM: output formats<br />
<a href="https://ece-research.unm.edu/jimp/310/nasm/nasmdoc6.html">https://ece-research.unm.edu/jimp/310/nasm/nasmdoc6.html</a>
</li>

<li>PeachPy 0.0.1 <br />
<a href="https://pypi.org/project/PeachPy/">https://pypi.org/project/PeachPy/</a>
</li>

<li>PeachPy<br />
<a href="https://github.com/Maratyszcza/PeachPy">https://github.com/Maratyszcza/PeachPy</a>
</li>

<li>Historie s&nbsp;commity do knihovny PeachPy<br />
<a href="https://github.com/Maratyszcza/PeachPy/commits/master/">https://github.com/Maratyszcza/PeachPy/commits/master/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

