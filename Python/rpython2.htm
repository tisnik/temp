<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>RPython vs Cython aneb dvojí přístup k překladu Pythonu do nativního kódu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>RPython vs Cython aneb dvojí přístup k překladu Pythonu do nativního kódu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Význam písmene &bdquo;R&ldquo; ve jménu RPython</a></p>
<p><a href="#k02">*** 2. Automatické odvozování typů proměnných, argumentů i návratových hodnot funkcí</a></p>
<p><a href="#k03">*** 3. Tři přístupy při odvození datových typů</a></p>

<p><a href="#k02">*** 2. Nejčastější chyba při analýze kódu: <strong>UnionError</strong></a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. Alternativní přístup k&nbsp;překladu Pythonu do nativního kódu: projekt Cython</a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Význam písmene &bdquo;R&ldquo; ve jménu RPython</h2>

<p>V&nbsp;úvodním článku o projektu RPython jsme se seznámili se základními postupy, na nichž je tento projekt založen. Připomeňme si ve stručnosti, že RPython je určen pro překlad programů napsaných v&nbsp;podmnožině Pythonu do nativního kódu, ať již se jedná o přímo spustitelný kód či o dynamicky linkovanou knihovnu. Samotný RPython byl vyvinut primárně pro autory interpretrů a překladačů dalších programovacích jazyků (využit je například v&nbsp;projektu Pixie) a autoři RPythonu nepředpokládají, že by byl masivně využíván mimo tuto dosti úzce vymezenou oblast (samozřejmě to však nezakazují). Pokud se rozhodnete RPython využít ve svém projektu, například pro urychlení některých výpočtů, je nutné se již dopředu připravit na tři potenciální problémy:</p>

<ul>

<li>Počáteční písmeno v&nbsp;názvu RPython znamená &bdquo;restricted&ldquo;, což se týká jak omezení, která nám klade vlastní jazyk, tak i omezení dostupných knihoven. Pokud se však skutečně překládají výpočty či simulace, nemusí být tato vlastnost RPythonu příliš omezující.</li>

<li>Některá chybová hlášení RPythonu jsou poněkud kryptická a pro jejich vyluštění je dobré vědět, jakým způsobem vlastně RPython provádí překlad. Právě z&nbsp;tohoto důvodu si v&nbsp;navazujících kapitolách význam některých chybových hlášení popíšeme podrobněji.</li>

<li>Čas překladu je v&nbsp;porovnání s&nbsp;dále zmíněným Cythonem významně delší. Na mém obstarožním notebooku s&nbsp;procesorem i5 (4&times;M 540 @ 2.53GHz) trvá překlad i jednoduchého programu typu &bdquo;Hello world!&ldquo; prakticky přesně 25 sekund, což při vývoji může být otravné. Na druhou stranu je většina chyb vedoucích k&nbsp;zastavení překladu detekována již na samotném začátku celého procesu.</li>

</ul>

<p>Vraťme se nyní k&nbsp;tématu, kterým jsme se již částečně začali zabývat minule. Jedná se o typový systém RPythonu. RPython totiž kvůli překladu do nativního kódu potřebuje znát typ proměnných, argumentů funkcí i návratových hodnot funkcí. Navíc tuto znalost musí rozšířit z&nbsp;oblasti přiřazení hodnoty do proměnné (zde je typ zřejmý) i do všech dalších částí programu. Původní varianty RPythonu neumožnily po prvním přiřazení hodnoty do proměnné měnit její typ, ovšem současné varianty to umožňují (za předpokladu, že se dodrží podmínky popsané později), což je ostatně patrné i z&nbsp;dnešního prvního příkladu. Povšimněte si, že se v&nbsp;tomto příkladu jedné lokální proměnné postupně přiřazují hodnoty různých typů:</p>

<pre>
def <strong>entry_point</strong>(argv):
    x = "one"
    print x
    x = 2
    print x
    x = None
    print x
    x = True
    print x
    x = range(10)
    print x[1]
    return 0
&nbsp;
&nbsp;
def <strong>target</strong>(driver, args):
    print "*** target ***"
    return entry_point, None
</pre>

<p>Tento program by měl jít bez problémů přeložit i spustit.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Nejčastější chyba při analýze kódu: <strong>UnionError</strong></h2>

<p>Při pohledu na předchozí demonstrační příklad by se mohlo zdát, že RPython dokáže typ hodnoty určit vlastně kdykoli a kdekoli. Ve skutečnosti tomu tak není, což si ukážeme na třech zdánlivě totožných příkladech.</p>

<p>V&nbsp;prvním příkladu je pomocná funkce <strong>f</strong> volána dvakrát, a to s&nbsp;parametrem vždy nastaveným na <strong>False</strong>. V&nbsp;tomto případě překladač vlastně nikdy neprojde první větví ve funkci <strong>f</strong> a překlad (včetně analýzy celého &bdquo;flow&ldquo;) proběhne v&nbsp;pořádku:</p>

<pre>
def <strong>f</strong>(param):
    if param:
        return 42
    else:
        return "foobar"
&nbsp;
&nbsp;
def <strong>entry_point</strong>(argv):
    z = f(False)
    print z
&nbsp;
    w = f(False)
    print w
&nbsp;
    return 0
&nbsp;
&nbsp;
def <strong>target</strong>(driver, args):
    print "*** target ***"
    return entry_point, None
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že skutečně musela být provedena statická analýza chování programu, neboť funkce <strong>entry_point</strong> je volána v&nbsp;runtime a nikoli v&nbsp;compile time.</div></p>

<p>Druhá varianta příkladu je prakticky totožná s&nbsp;variantou předchozí, ovšem až na ten detail, že funkce <strong>f</strong> je vždy volána s&nbsp;parametrem <strong>True</strong> a tudíž se řízení programu nikdy nedostane do větve <i>else</i>. I tento příklad bude možné bez problémů přeložit a spustit:</p>

<pre>
def <strong>f</strong>(param):
    if param:
        return 42
    else:
        return "foobar"
&nbsp;
&nbsp;
def <strong>entry_point</strong>(argv):
    z = f(True)
    print z
&nbsp;
    w = f(True)
    print w
&nbsp;
    return 0
&nbsp;
&nbsp;
def <strong>target</strong>(driver, args):
    print "*** target ***"
    return entry_point, None
</pre>

<p>Konečně se dostáváme k&nbsp;poslední variantě, ve které se (v&nbsp;runtime) volá funkce <strong>f</strong> opět dvakrát, tentokrát však s&nbsp;odlišnou hodnotou parametru:</p>

<pre>
def <strong>f</strong>(param):
    if param:
        return 42
    else:
        return "foobar"
&nbsp;
&nbsp;
def <strong>entry_point</strong>(argv):
    z = f(True)
    print z
&nbsp;
    w = f(False)
    print w
&nbsp;
    return 0
&nbsp;
&nbsp;
def <strong>target</strong>(driver, args):
    print "*** target ***"
    return entry_point, None
</pre>

<p>V&nbsp;klasickém Pythonu to není nijak problematické &ndash; funkce prostě při prvním volání vrátí hodnotu 42 a při volání druhém hodnotu &bdquo;foobar&ldquo;. Ovšem překladač RPythonu je v&nbsp;tomto ohledu striktnější a vypíše chybu při překladu. Ta může vypadat poněkud krypticky:</p>

<pre>
[translation:ERROR] UnionError: 
&nbsp;
Offending annotations:
  SomeInteger(const=42, knowntype=int, nonneg=True, unsigned=False)
  SomeString(const='foobar', no_nul=True)
&nbsp;
In &lt;FunctionGraph of (rpython_types_6:1)f at 0x7f60791ea890&gt;:
&lt;return block&gt;
Processing block:
 block@3[param_0] is a &lt;class 'rpython.flowspace.flowcontext.SpamBlock'&gt; 
 in (rpython_types_6:1)f 
 containing the following operations: 
       v2 = bool(param_0) 
 --end--
</pre>

<p></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
class Foo:
    def __init__(self, value):
        self._value = value
&nbsp;
    def __add__(self, other):
        return Foo(self._value + other._value)
&nbsp;
    def __str__(self):
        return str(self._value)
&nbsp;
&nbsp;
&nbsp;
def entry_point(argv):
    f1 = Foo(1)
    f2 = Foo(2)
&nbsp;
    f3 = f1 + f2
&nbsp;
    print(f1)
    print(f2)
    print(f3)
&nbsp;
    return 0
&nbsp;
&nbsp;
def target(driver, args):
    print "*** target ***"
    return entry_point, None
</pre>

<pre>
[translation:ERROR] AnnotatorError: 
&nbsp;
Blocked block -- operation cannot succeed
&nbsp;
    f3_0 = add(f1_0, f2_0)
&nbsp;
In &lt;FunctionGraph of (plus_operator:13)entry_point at 0x7fddd3897910&gt;:
Happened at file plus_operator.py line 17
&nbsp;
        f1 = Foo(1)
        f2 = Foo(2)
    
==&gt;     f3 = f1 + f2
    
        print(f1)
        print(f2)
        print(f3)
&nbsp;
Known variable annotations:
 f1_0 = SomeInstance(can_be_None=False, classdef=plus_operator.Foo)
 f2_0 = SomeInstance(can_be_None=False, classdef=plus_operator.Foo)
</pre>

<pre>
class Foo:
    def __init__(self, value):
        self._value = value
&nbsp;
    def __add__(self, other):
        return Foo(self._value + other._value)
&nbsp;
    def __str__(self):
        return str(self._value)
&nbsp;
&nbsp;
&nbsp;
def entry_point(argv):
    f1 = Foo(1)
    f2 = Foo(2)
&nbsp;
    f3 = f1 + f2
&nbsp;
    print(f1)
    print(f2)
    print(f3)
&nbsp;
    return 0
&nbsp;
&nbsp;
def target(driver, args):
    print "*** target ***"
    return entry_point, None
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
def entry_point(argv):
    l1 = [1, 2, 3, 4]
    l2 = ['a', 'b', 'c', 'd']
    l3 = [1, 'a']
&nbsp;
    print l1
    print l2
    print l3
&nbsp;
    return 0
&nbsp;
&nbsp;
def target(driver, args):
    print "*** target ***"
    return entry_point, None
</pre>

<pre>
[translation:ERROR] UnionError: 

Offending annotations:
  SomeInteger(const=1, knowntype=int, nonneg=True, unsigned=False)
  SomeChar(const='a', no_nul=True)


    l3_0 = newlist((1), ('a'))

In <FunctionGraph of (rpython_list:1)entry_point at 0x7f795b6c0750>:
Happened at file rpython_list.py line 4

        l1 = [1, 2, 3, 4]
        l2 = ['a', 'b', 'c', 'd']
==>     l3 = [1, 'a']
    
        print l1
        print l2
        print l3
</pre>

<pre>
Known variable annotations:

Processing block:
 block@12[argv_0] is a &lt;class 'rpython.flowspace.flowcontext.SpamBlock'&gt; 
 in (rpython_list:1)entry_point 
 containing the following operations: 
       l1_0 = newlist((1), (2), (3), (4)) 
       l2_0 = newlist(('a'), ('b'), ('c'), ('d')) 
       l3_0 = newlist((1), ('a')) 
       v0 = str(l1_0) 
       v1 = simple_call((function rpython_print_item), v0) 
       v2 = simple_call((function rpython_print_newline)) 
       v3 = str(l2_0) 
       v4 = simple_call((function rpython_print_item), v3) 
       v5 = simple_call((function rpython_print_newline)) 
       v6 = str(l3_0) 
       v7 = simple_call((function rpython_print_item), v6) 
       v8 = simple_call((function rpython_print_newline)) 
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
def entry_point(argv):
    t = ("a", "b", "c", "d")

    for i in range(len(t)):
        print i, t[i]

    return 0


def target(driver, args):
    print "*** target ***"
    return entry_point, None
</pre>

<pre>
[translation:ERROR] TyperError: non-constant tuple index
.. (rpython_tuple:1)entry_point
.. block@34[v13...] with 1 exits
.. v14 = getitem((('a', 'b', 'c', 'd')), i_0)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
def entry_point(argv):
    t = ["a", "b", "c", "d"]

    for i in range(len(t)):
        print i, t[:-1-i]

    return 0


def target(driver, args):
    print "*** target ***"
    return entry_point, None
</pre>

<pre>
[translation:ERROR] AnnotatorError: 

slicing: not proven to have non-negative stop


    v1 = getslice(t_0, (None), v0)

In &lt;FunctionGraph of (rpython_list_slicing:1)entry_point at 0x7fa669592910&gt;:
Happened at file rpython_list_slicing.py line 5

==&gt;         print i, t[:-1-i]

Known variable annotations:
 t_0 = SomeList(listdef=&lt;[SomeChar(no_nul=True)]&gt;)
 v0 = SomeInteger(knowntype=int, nonneg=False, unsigned=False)

Processing block:
 block@46[v2...] is a &lt;class 'rpython.flowspace.flowcontext.SpamBlock'&gt; 
 in (rpython_list_slicing:1)entry_point 
 containing the following operations: 
       v3 = str(i_0) 
       v4 = simple_call((function rpython_print_item), v3) 
       v0 = sub((-1), i_0) 
       v1 = getslice(t_0, (None), v0) 
       v5 = str(v1) 
       v6 = simple_call((function rpython_print_item), v5) 
       v7 = simple_call((function rpython_print_newline)) 
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
class ClassX:
    def foo(self):
        print("ClassX.foo")


class ClassY:
    def foo(self):
        print("ClassY.foo")


def entry_point(argv):
    obj = ClassX() if len(argv) == 3 else ClassY()
    obj.foo()
    return 0


def target(driver, args):
    return entry_point, None
</pre>

<pre>
[translation:ERROR] UnionError: 

RPython cannot unify instances with no common base class

Offending annotations:
  SomeInstance(can_be_None=False, classdef=classes1.ClassY)
  SomeInstance(can_be_None=False, classdef=classes1.ClassX)

In <FunctionGraph of (classes1:11)entry_point at 0x7f9e866d6810>:
Happened at file classes1.py line 13

        obj.foo()

Processing block:
 block@21 is a <class 'rpython.flowspace.flowcontext.SpamBlock'> 
 in (classes1:11)entry_point 
 containing the following operations: 
       obj_0 = simple_call((classobj ClassX)) 
 --end--
</pre>

<pre>
class SuperClass:
    pass

class ClassX(SuperClass):
    def foo(self):
        print("ClassX.foo")


class ClassY(SuperClass):
    def foo(self):
        print("ClassY.foo")


def entry_point(argv):
    obj = ClassX() if len(argv) == 2 else ClassY()
    obj.foo()
    return 0


def target(driver, args):
    return entry_point, None
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
class SuperClass:
    pass

class ClassX(SuperClass):
    def foo(self):
        print("ClassX.foo")


class ClassY(SuperClass):
    def foo(self, dummy):
        print("ClassY.foo")


def entry_point(argv):
    obj = ClassX() if len(argv) == 2 else ClassY()
    obj.foo()
    return 0


def target(driver, args):
    return entry_point, None
</pre>

<pre>
[translation:ERROR] AnnotatorError: 

signature mismatch: foo() takes exactly 2 arguments (1 given)


Occurred processing the following simple_call:
  <MethodDesc 'foo' of <ClassDef 'classes3.ClassX'> bound to <ClassDef 'classes3.ClassX'> {}> returning

  <MethodDesc 'foo' of <ClassDef 'classes3.ClassY'> bound to <ClassDef 'classes3.ClassY'> {}> returning

    v1 = simple_call(v0)

In <FunctionGraph of (classes3:14)entry_point at 0x7f8f2736e890>:
Happened at file classes3.py line 16

==>     obj.foo()

Known variable annotations:
 v0 = SomePBC(can_be_None=False, descriptions={...2...}, knowntype=instancemethod, subset_of=None)

Processing block:
 block@39[obj_0] is a <class 'rpython.flowspace.flowcontext.SpamBlock'> 
 in (classes3:14)entry_point 
 containing the following operations: 
       v0 = getattr(obj_0, ('foo')) 
       v1 = simple_call(v0) 
       v2 = str(v1) 
       v3 = simple_call((function rpython_print_item), v2) 
       v4 = simple_call((function rpython_print_newline)) 
 --end--
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
class SuperClass:
    pass

class ClassX(SuperClass):
    def foo(self):
        print("ClassX.foo")


class ClassY(SuperClass):
    def foo(self, dummy):
        print("ClassY.foo")


def entry_point(argv):
    obj = ClassX() if len(argv) == 2 else ClassY()
    assert isinstance(obj, ClassX)
    obj.foo()
    return 0


def target(driver, args):
    return entry_point, None
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
$ <strong>pip3 install --user cython</strong>
&nbsp;
Collecting cython
  Cache entry deserialization failed, entry ignored
  Downloading https://files.pythonhosted.org/packages/6f/79/d8e2cd00bea8156a995fb284ce7b6677c49eccd2d318f73e201a9ce560dc/Cython-0.28.3-cp36-cp36m-manylinux1_x86_64.whl (3.4MB)
    100% |████████████████████████████████| 3.4MB 443kB/s 
Installing collected packages: cython
Successfully installed cython-0.28.3
You are using pip version 9.0.1, however version 10.0.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
</pre>

<pre>
$ cython --version
&nbsp;
Cython version 0.28.3
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
print("Hello world!")
</pre>

<pre>
rm -f hello_world.c
rm -f hello_world

cython --embed hello_world.py

gcc -O9 -I /usr/include/python3.6m/ -L/usr/lib64 -lpython3.6m hello_world.c -o hello_world
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
from distutils import sysconfig

PROGNAME = "hello_world"
CC = "gcc"
CC_OPT = "-O9"

INCLUDE_DIR = sysconfig.get_python_inc()
LIBRARY_DIR = sysconfig.get_config_var('LIBDIR')
PYTHON_LIB = sysconfig.get_config_var('LIBRARY')[3:-2]
SYSTEM_LIBS = sysconfig.get_config_var('SYSLIBS')

print("rm -f {progname}.c".format(progname=PROGNAME))
print("rm -f {progname}".format(progname=PROGNAME))

print("cython --embed {progname}.py".format(progname=PROGNAME))
print("{cc} {cc_opt} -I {include_dir} -L{library_dir} -l{python_lib} {system_libs} {progname}.c -o {progname}".format(
    cc=CC, cc_opt=CC_OPT, include_dir=INCLUDE_DIR, library_dir=LIBRARY_DIR,
    python_lib=PYTHON_LIB, system_libs=SYSTEM_LIBS, progname=PROGNAME))
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
PYTHON=python3
COMPILER=gcc
LINKER=gcc

# GCCOPTIONS=-O9 -ffast-math
CCOPTIONS=-O9

INCLUDE_DIR:=$(shell $(PYTHON) -c "from distutils import sysconfig; print(sysconfig.get_python_inc())")
LIBRARY_DIR:=$(shell $(PYTHON) -c "from distutils import sysconfig; print(sysconfig.get_config_var('LIBDIR'))")
PYTHON_LIB:=$(shell $(PYTHON) -c "from distutils import sysconfig; print(sysconfig.get_config_var('LIBRARY')[3:-2])")
SYSLIBS:=$(shell $(PYTHON) -c "import distutils.sysconfig; print(distutils.sysconfig.get_config_var('SYSLIBS'))")


all: hello_world

hello_world: hello_world.o
        $(LINKER) -o $@ $^ -L$(LIBRARY_DIR) -l$(PYTHON_LIB) $(SYSLIBS)

hello_world.o: hello_world.c
        $(COMPILER) $(CCOPTIONS) -I$(INCLUDE_DIR) -c $<

hello_world.c: hello_world.py
        cython --embed $<

clean:
        rm -f hello_world
        rm -f hello_world.c
        rm -f hello_world.o
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8

import palette_mandmap
from sys import argv, exit


def calc_mandelbrot(width, height, maxiter, palette):
    print("P3")
    print("{w} {h}".format(w=width, h=height))
    print("255")

    cy = -1.5
    for y in range(0, height):
        cx = -2.0
        for x in range(0, width):
            zx = 0.0
            zy = 0.0
            i = 0
            while i < maxiter:
                zx2 = zx * zx
                zy2 = zy * zy
                if zx2 + zy2 > 4.0:
                    break
                zy = 2.0 * zx * zy + cy
                zx = zx2 - zy2 + cx
                i += 1

            r = palette[i][0]
            g = palette[i][1]
            b = palette[i][2]
            print("{r} {g} {b}".format(r=r, g=g, b=b))
            cx += 3.0/width
        cy += 3.0/height


if __name__ == "__main__":
    if len(argv) < 4:
        print("usage: python mandelbrot width height maxiter")
        exit(1)

    width = int(argv[1])
    height = int(argv[2])
    maxiter = int(argv[3])
    calc_mandelbrot(width, height, maxiter, palette_mandmap.palette)
</pre>

<pre>
PYTHON=python3
COMPILER=gcc
LINKER=gcc

# GCCOPTIONS=-O9 -ffast-math
CCOPTIONS=-O9

INCLUDE_DIR:=$(shell $(PYTHON) -c "from distutils import sysconfig; print(sysconfig.get_python_inc())")
LIBRARY_DIR:=$(shell $(PYTHON) -c "from distutils import sysconfig; print(sysconfig.get_config_var('LIBDIR'))")
PYTHON_LIB:=$(shell $(PYTHON) -c "from distutils import sysconfig; print(sysconfig.get_config_var('LIBRARY')[3:-2])")
SYSLIBS:=$(shell $(PYTHON) -c "from distutils import sysconfig; print(sysconfig.get_config_var('SYSLIBS'))")


all: mandelbrot_cython

mandelbrot_cython: mandelbrot_cython.o
        $(LINKER) -o $@ $^ -L$(LIBRARY_DIR) -l$(PYTHON_LIB) $(SYSLIBS)

mandelbrot_cython.o: mandelbrot_cython.c
        $(COMPILER) $(CCOPTIONS) -I$(INCLUDE_DIR) -c $<

mandelbrot_cython.c: mandelbrot_cython.py
        cython --embed $<

clean:
        rm -f mandelbrot_cython
        rm -f mandelbrot_cython.c
        rm -f mandelbrot_cython.o
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady, které jsme si v&nbsp;dnešním článku ukázali,
naleznete na adrese <a
href="https://github.com/tisnik/rpython-examples">https://github.com/tisnik/rpython-examples</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je nutné mít
nainstalován RPython a jeho závislosti, především tedy překladač céčka,
benchmark používající Jython samozřejmě vyžaduje i tento interpret):</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Adresa</th></tr>
<tr><td> 1</td><td></td><td><a href="https://github.com/tisnik/rpython-examples/blob/master/examples/">https://github.com/tisnik/rpython-examples/blob/master/examples/</a></td></tr>
<tr><td> 2</td><td></td><td><a href="https://github.com/tisnik/rpython-examples/blob/master/examples/">https://github.com/tisnik/rpython-examples/blob/master/examples/</a></td></tr>
<tr><td> 3</td><td></td><td><a href="https://github.com/tisnik/rpython-examples/blob/master/examples/">https://github.com/tisnik/rpython-examples/blob/master/examples/</a></td></tr>
<tr><td> 4</td><td></td><td><a href="https://github.com/tisnik/rpython-examples/blob/master/examples/">https://github.com/tisnik/rpython-examples/blob/master/examples/</a></td></tr>
<tr><td> 5</td><td></td><td><a href="https://github.com/tisnik/rpython-examples/blob/master/examples/">https://github.com/tisnik/rpython-examples/blob/master/examples/</a></td></tr>
<tr><td> 6</td><td></td><td><a href="https://github.com/tisnik/rpython-examples/blob/master/examples/">https://github.com/tisnik/rpython-examples/blob/master/examples/</a></td></tr>
<tr><td> 7</td><td></td><td><a href="https://github.com/tisnik/rpython-examples/blob/master/examples/">https://github.com/tisnik/rpython-examples/blob/master/examples/</a></td></tr>
<tr><td> 8</td><td></td><td><a href="https://github.com/tisnik/rpython-examples/blob/master/examples/">https://github.com/tisnik/rpython-examples/blob/master/examples/</a></td></tr>
<tr><td> 9</td><td></td><td><a href="https://github.com/tisnik/rpython-examples/blob/master/examples/">https://github.com/tisnik/rpython-examples/blob/master/examples/</a></td></tr>
<tr><td>10</td><td></td><td><a href="https://github.com/tisnik/rpython-examples/blob/master/examples/">https://github.com/tisnik/rpython-examples/blob/master/examples/</a></td></tr>
<tr><td>11</td><td></td><td><a href="https://github.com/tisnik/rpython-examples/blob/master/examples/">https://github.com/tisnik/rpython-examples/blob/master/examples/</a></td></tr>
<tr><td>12</td><td></td><td><a href="https://github.com/tisnik/rpython-examples/blob/master/examples/">https://github.com/tisnik/rpython-examples/blob/master/examples/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Magic of RPython<br />
<a href="https://refi64.com/posts/the-magic-of-rpython.html">https://refi64.com/posts/the-magic-of-rpython.html</a>
</li>

<li>RPython: Frequently Asked Questions<br />
<a href="http://rpython.readthedocs.io/en/latest/faq.html">http://rpython.readthedocs.io/en/latest/faq.html</a>
</li>

<li>RPython’s documentation<br />
<a href="http://rpython.readthedocs.io/en/latest/index.html">http://rpython.readthedocs.io/en/latest/index.html</a>
</li>

<li>RPython (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PyPy#RPython">https://en.wikipedia.org/wiki/PyPy#RPython</a>
</li>

<li>Getting Started with RPython<br />
<a href="http://rpython.readthedocs.io/en/latest/getting-started.html">http://rpython.readthedocs.io/en/latest/getting-started.html</a>
</li>

<li>PyPy (home page)<br />
<a href="https://pypy.org/">https://pypy.org/</a>
</li>

<li>PyPy (dokumentace)<br />
<a href="http://doc.pypy.org/en/latest/">http://doc.pypy.org/en/latest/</a>
</li>

<li>Cython (home page)<br />
<a href="http://cython.org/">http://cython.org/</a>
</li>

<li>Cython (wiki)<br />
<a href="https://github.com/cython/cython/wiki">https://github.com/cython/cython/wiki</a>
</li>

<li>Cython (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Cython">https://en.wikipedia.org/wiki/Cython</a>
</li>

<li>Cython (GitHub)<br />
<a href="https://github.com/cython/cython">https://github.com/cython/cython</a>
</li>

<li>Localized Type Inference of Atomic Types in Python (2005)<br />
<a href="http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.90.3231">http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.90.3231</a>
</li>

<li>Numba<br />
<a href="http://numba.pydata.org/">http://numba.pydata.org/</a>
</li>

<li>Tutorial: Writing an Interpreter with PyPy, Part 1<br />
<a href="https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html">https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html</a>
</li>

<li>List of numerical analysis software<br />
<a href="https://en.wikipedia.org/wiki/List_of_numerical_analysis_software">https://en.wikipedia.org/wiki/List_of_numerical_analysis_software</a>
</li>

<li>Pixie: lehký skriptovací jazyk s „kouzelnými“ schopnostmi<br />
<a href="https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/">https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/</a>
</li>

<li>Programovací jazyk Pixie: funkce ze základní knihovny a použití FFI<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/">https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/</a>
</li>

<li>The future can be written in RPython now (článek z&nbsp;roku 2010)<br />
<a href="http://blog.christianperone.com/2010/05/the-future-can-be-written-in-rpython-now/">http://blog.christianperone.com/2010/05/the-future-can-be-written-in-rpython-now/</a>
</li>

<li>PyPy is the Future of Python (článek z&nbsp;roku 2010)<br />
<a href="https://alexgaynor.net/2010/may/15/pypy-future-python/">https://alexgaynor.net/2010/may/15/pypy-future-python/</a>
</li>

<li>Portal:Python programming<br />
<a href="https://en.wikipedia.org/wiki/Portal:Python_programming">https://en.wikipedia.org/wiki/Portal:Python_programming</a>
</li>

<li>Python Implementations: Compilers<br />
<a href="https://wiki.python.org/moin/PythonImplementations#Compilers">https://wiki.python.org/moin/PythonImplementations#Compilers</a>
</li>

<li>RPython Frontend and C Wrapper Generator<br />
<a href="http://www.codeforge.com/article/383293">http://www.codeforge.com/article/383293</a>
</li>

<li>PyPy’s Approach to Virtual Machine Construction<br />
<a href="https://bitbucket.org/pypy/extradoc/raw/tip/talk/dls2006/pypy-vm-construction.pdf">https://bitbucket.org/pypy/extradoc/raw/tip/talk/dls2006/pypy-vm-construction.pdf</a>
</li>

<li>Tutorial: Writing an Interpreter with PyPy, Part 1<br />
<a href="https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html">https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html</a>
</li>

<li>EmbeddingCython<br />
<a href="https://github.com/cython/cython/wiki/EmbeddingCython">https://github.com/cython/cython/wiki/EmbeddingCython</a>
</li>

<li>The Basics of Cython<br />
<a href="http://docs.cython.org/en/latest/src/tutorial/cython_tutorial.html">http://docs.cython.org/en/latest/src/tutorial/cython_tutorial.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

