<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. Instalace jazyka <strong>Hy</strong></a></p>
<p><a href="#k04">*** 4. Spuštění interpretu jazyka <strong>Hy</strong> a práce s&nbsp;interaktivní smyčkou REPL</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. Instalace jazyka <strong>clojure-py</strong></a></p>
<p><a href="#k16">*** 16. Spuštění interpretu a práce s&nbsp;interaktivní smyčkou REPL</a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Rozdílné chování oproti originálnímu jazyku Clojure</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace jazyka <strong>Hy</strong></h2>

<pre>
$ <strong>pip3 install --user hy</strong>
&nbsp;
Downloading/unpacking hy
  Downloading hy-0.14.0-py2.py3-none-any.whl (68kB): 68kB downloaded
Downloading/unpacking clint&gt;=0.4 (from hy)
  Downloading clint-0.5.1.tar.gz
  Running setup.py (path:/tmp/pip_build_tester/clint/setup.py) egg_info for package clint
&nbsp;
    warning: no files found matching '*' under directory 'docs'
Downloading/unpacking astor&gt;=0.6 (from hy)
  Downloading astor-0.6.2-py2.py3-none-any.whl
Downloading/unpacking rply&gt;=0.7.5 (from hy)
  Downloading rply-0.7.5-py2.py3-none-any.whl
Downloading/unpacking args (from clint&gt;=0.4-&gt;hy)
  Downloading args-0.1.0.tar.gz
  Running setup.py (path:/tmp/pip_build_tester/args/setup.py) egg_info for package args
&nbsp;
Downloading/unpacking appdirs (from rply&gt;=0.7.5-&gt;hy)
  Downloading appdirs-1.4.3-py2.py3-none-any.whl
Installing collected packages: hy, clint, astor, rply, args, appdirs
  Running setup.py install for clint
&nbsp;
    warning: no files found matching '*' under directory 'docs'
  Running setup.py install for args
&nbsp;
Successfully installed hy clint astor rply args appdirs
Cleaning up...
</pre>

<pre>
$ <strong>ls -l ~/.local/bin</strong>
&nbsp;
total 40
-rwxr-xr-x 1 tester tester 217 dub 24 21:21 flake8
-rwxr-xr-x 1 tester tester 218 kvě 17 21:27 hy
-rwxr-xr-x 1 tester tester 224 kvě 17 21:27 hy2py
-rwxr-xr-x 1 tester tester 224 kvě 17 21:27 hy2py3
-rwxr-xr-x 1 tester tester 218 kvě 17 21:27 hy3
-rwxr-xr-x 1 tester tester 220 kvě 17 21:27 hyc
-rwxr-xr-x 1 tester tester 220 kvě 17 21:27 hyc3
-rwxr-xr-x 1 tester tester 215 dub 24 21:21 pycodestyle
-rwxr-xr-x 1 tester tester 214 dub 24 21:21 pyflakes
-rwxr-xr-x 1 tester tester 207 dub 24 21:21 radon
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Spuštění interpretu jazyka <strong>Hy</strong> a práce s&nbsp;interaktivní smyčkou REPL</h2>

<pre>
$ <strong>hy --help</strong>
usage: hy [-h | -i cmd | -c cmd | -m module | file | -] [arg] ...
&nbsp;
optional arguments:
  -h, --help            show this help message and exit
  -c COMMAND            program passed in as a string
  -m MOD                module to run, passed in as a string
  -i ICOMMAND           program passed in as a string, then stay in REPL
  --spy                 print equivalent Python code before executing
  --repl-output-fn REPL_OUTPUT_FN
                        function for printing REPL output (e.g.,
                        hy.contrib.hy-repr.hy-repr)
  -v, --version         show program's version number and exit
  --show-tracebacks     show complete tracebacks for Hy exceptions
&nbsp;
  file         program read from script
  module       module to execute as main
  -            program read from stdin
  [arg] ...    arguments passed to program in sys.argv[1:]
</pre>

<pre>
$ <strong>hy</strong>
&nbsp;
hy 0.14.0 using CPython(default) 3.6.3 on Linux
=>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Instalace jazyka <strong>clojure-py</strong></h2>

<pre>
$ <strong>pip install --user clojure_py</strong>
&nbsp;
Collecting clojure_py
  Using cached https://files.pythonhosted.org/packages/e9/d1/77ca45d549ee5879c615eb4431db4c94b4c90cb2be6705d652efcc08e02e/clojure_py-0.2.4.tar.gz
Installing collected packages: clojure-py
  Running setup.py install for clojure-py ... done
Successfully installed clojure-py-0.2.4
You are using pip version 9.0.1, however version 10.0.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
</pre>

<pre>
$ <strong>pip3 install --user clojure_py</strong>
&nbsp;
Collecting clojure_py
  Downloading https://files.pythonhosted.org/packages/e9/d1/77ca45d549ee5879c615eb4431db4c94b4c90cb2be6705d652efcc08e02e/clojure_py-0.2.4.tar.gz (100kB)
    100% |████████████████████████████████| 102kB 995kB/s 
    Complete output from command python setup.py egg_info:
    Traceback (most recent call last):
      File "&lt;string&gt;", line 1, in &lt;module&gt;
      File "/tmp/pip-build-asotz3jt/clojure-py/setup.py", line 10, in &lt;module&gt;
        from clojure.main import VERSION
      File "/tmp/pip-build-asotz3jt/clojure-py/clojure/__init__.py", line 2, in &lt;module&gt;
        import clojure.main
      File "/tmp/pip-build-asotz3jt/clojure-py/clojure/main.py", line 68
        print s, filename
              ^
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print(print s, filename)?
&nbsp;
    ----------------------------------------
Command "python setup.py egg_info" failed with error code 1 in /tmp/pip-build-asotz3jt/clojure-py/
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Spuštění interpretu a práce s&nbsp;interaktivní smyčkou REPL</h2>

<pre>
$ <strong>clojurepy</strong>
&nbsp;
clojure-py 0.2.4
Python 2.7.14 (default, Dec 11 2017, 16:08:01) 
[GCC 7.2.1 20170915 (Red Hat 7.2.1-2)]
user=&gt;
</pre>

<pre>
user=&gt; <strong>(println 42)</strong>
42
nil
&nbsp;
user=&gt; <strong>(def x (range 10))</strong>
#'user/x
&nbsp;
user=&gt; <strong>x</strong>
(0 1 2 3 4 5 6 7 8 9)
&nbsp;
user=&gt; <strong>(conj x 10)</strong>
(10 0 1 2 3 4 5 6 7 8 9)
</pre>

<pre>
user=&gt; <strong>(doc conj)</strong>
conj[oin]. Returns a new collection with the xs
    'added'. (conj nil item) returns (item).  The 'addition' may
    happen at different 'places' depending on the concrete type.
nil
</pre>

<pre>
user=&gt; <strong>(for [n (range 0 11)] (factorial n))</strong>
(1 1 2 6 24 120 720 5040 40320 362880 3628800)
</pre>

<pre>
user=&gt; <strong>(defn factorial [n] (reduce * (range 1 (inc n))))</strong>
#'user/factorial
</pre>

<pre>
user=&gt; <strong>(factorial 42)</strong>
1405006117752879898543142606244511569936384000000000
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Zpracování sekvencí a další základní mechanismy, na nichž je Clojure postaveno</h2>

user=&gt; <strong>[1 2 3]</strong>
[1 2 3]
user=&gt; <strong>'(1 2 3)</strong>
(1 2 3)
user=&gt; <strong>{:name "Eda" :surname "Wasserfall"}</strong>
{:surname "Wasserfall", :name "Eda"}
user=&gt; <strong>(def seznam '(1 2 3 'a 'b "hello"))</strong>
#'user/seznam

user=&gt; <strong>(def vektor [1 2 3 'a 'b "hello"])</strong>
#'user/vektor
user=&gt; <strong>(def mnozina #{1 2 3})</strong>
#'user/mnozina

user=&gt; <strong>(def vektor [1 2 3 'a 'b "hello"])</strong>
#'user/vektor
user=&gt; <strong>(def mnozina #{1 2 3})</strong>
#'user/mnozina
user=&gt; <strong>(empty? [1 2 3])</strong>
false
user=&gt; <strong>(count [1 2 3])</strong>
3
user=&gt; <strong>(def seznam '(1 2 3))</strong>
#'user/seznam
user=&gt; <strong>(conj seznam 100)</strong>
(100 1 2 3)
user=&gt; <strong>(def vektor [1 2 3])</strong>
#'user/vektor
user=&gt; <strong>(conj vektor 100)</strong>
[1 2 3 100]
user=&gt; <strong>(pop [1 2 3])</strong>
[1 2]
user=&gt; <strong>(nth [1 2 3] 1)</strong>
2

user=&gt; <strong>(def a (range 1 10))</strong>
#'user/a
user=&gt; <strong>(reduce + a)</strong>
45
user=&gt; <strong>(apply + a)</strong>
45
user=&gt; <strong>(map #(* % 2) a)</strong>
(2 4 6 8 10 12 14 16 18)

<pre>
user =&gt;<strong> (doseq [n (range 1 11)] (println n (apply * (range 1 (inc n)))))</strong>
1 1
2 2
3 6
4 24
5 120
6 720
7 5040
8 40320
9 362880
10 3628800
nil
</pre>

<pre>
user =&gt;<strong> (doseq [n (range 1 11)] (println n (reduce * (range 1 (inc n)))))</strong>
1 1
2 2
3 6
4 24
5 120
6 720
7 5040
8 40320
9 362880
10 3628800
nil
</pre>

user=&gt; <strong>(def a (range 1 11))</strong>
#'user/a
user=&gt; <strong>(->> a (map #(* % 2)) (reduce +))</strong>
110



<p><a name="k18"></a></p>
<h2 id="k18">18. Rozdílné chování oproti originálnímu jazyku Clojure</h2>

user=&gt; <strong>3/7</strong>
Compiling 3/7
Traceback (most recent call last):
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/repl.py", line 117, in run_repl
    out = execute(line)
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/repl.py", line 67, in execute
    res = comp.compile(s)
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/lang/compiler.py", line 1342, in compile
    + str(type(itm)), None)
CompilerException: Compiler Exception  don't know how to compile <class 'fractions.Fraction'>

user=&gt; <strong>(filter even? [1 2 3 4])</strong>
(2 4)

user=&gt; <strong>(filter even? (map inc (range 10)))</strong>
(Traceback (most recent call last):
  File "/home/tester/.local/bin/clojurepy", line 11, in <module>
    load_entry_point('clojure-py==0.2.4', 'console_scripts', 'clojurepy')()
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/main.py", line 91, in main
    clojure.repl.run_repl(comp)
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/repl.py", line 123, in run_repl
    RT.printTo(out)
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/lang/rt.py", line 328, in printTo
    protocols.writeAsReplString(obj, writer)
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/lang/protocol.py", line 46, in __call__
    return getattr(x, self.attrname)(*args)
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/core.clj", line 796, in clojure.core/LazySeq_writeAsReplString
    (loop [s (.seq self)]
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/core.clj", line 0, in clojure.core/LazySeq_seq
    (loop [s (.seq self)]
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/core.clj", line 0, in clojure.core/LazySeq_sval
    (loop [s (.seq self)]
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/core.clj", line 1812, in clojure.core/filter304_auto_
    (when (pred (.nth c i))
AttributeError: 'ArrayChunk' object has no attribute 'nth'

user=&gt; <strong>(into {} (for [x (range 1 10)] [x (* x x)]))</strong>
Compiling into
Compiling (into, {}, (for, [x, (range, 1, 10)], [x, (*, x, x)]))
Traceback (most recent call last):
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/repl.py", line 117, in run_repl
    out = execute(line)
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/repl.py", line 67, in execute
    res = comp.compile(s)
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/lang/compiler.py", line 1315, in compile
    c.extend(self.compileForm(itm))
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/lang/compiler.py", line 1226, in compileForm
    c = self.compile(form.first())
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/lang/compiler.py", line 1313, in compile
    c.extend(self.compileSymbol(itm))
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/lang/compiler.py", line 1284, in compileSymbol
    return self.compileAccessList(sym)
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/lang/compiler.py", line 1241, in compileAccessList
    code = self.getAccessCode(sym)
  File "/home/tester/.local/lib/python2.7/site-packages/clojure/lang/compiler.py", line 1252, in getAccessCode
    " reference " + str(self.getNamesString(False)), None)
CompilerException: Compiler Exception could not resolve 'into', 'into' not found in user reference fn_1082


<p><a name="k19"></a></p>
<h2 id="k19">18. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Python becomes a platform<br />
<a href="https://khinsen.wordpress.com/2012/03/15/python-becomes-a-platform/">https://khinsen.wordpress.com/2012/03/15/python-becomes-a-platform/</a>
</li>

<li>Python becomes a platform. Thoughts on the release of clojure-py<br />
<a href="https://news.ycombinator.com/item?id=3708974">https://news.ycombinator.com/item?id=3708974</a>
</li>

<li>clojure_py na indexu PyPi<br />
<a href="https://pypi.python.org/pypi/clojure_py">https://pypi.python.org/pypi/clojure_py</a>
</li>

<li>PyClojure<br />
<a href="https://github.com/eigenhombre/PyClojure">https://github.com/eigenhombre/PyClojure</a>
</li>

<li>Hy na GitHubu<br />
<a href="https://github.com/hylang/hy">https://github.com/hylang/hy</a>
</li>

<li>Hy: The survival guide<br />
<a href="https://notes.pault.ag/hy-survival-guide/">https://notes.pault.ag/hy-survival-guide/</a>
</li>

<li>Hy běžící na monitoru terminálu společnosti Symbolics<br />
<a href="http://try-hy.appspot.com/">http://try-hy.appspot.com/</a>
</li>

<li>Welcome to Hy’s documentation!<br />
<a href="http://docs.hylang.org/en/stable/">http://docs.hylang.org/en/stable/</a>
</li>

<li>Hy na PyPi<br />
<a href="https://pypi.org/project/hy/#description">https://pypi.org/project/hy/#description</a>
</li>

<li>Getting Hy on Python<br />
<a href="https://lwn.net/Articles/596626/">https://lwn.net/Articles/596626/</a>
</li>

<li>Programming Can Be Fun with Hy<br />
<a href="https://opensourceforu.com/2014/02/programming-can-fun-hy/">https://opensourceforu.com/2014/02/programming-can-fun-hy/</a>
</li>

<li>Přednáška o projektu Hy (pětiminutový lighttalk)<br />
<a href="http://blog.pault.ag/day/2013/04/02">http://blog.pault.ag/day/2013/04/02</a>
</li>

<li>Hy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Hy">https://en.wikipedia.org/wiki/Hy</a>
</li>

<li>Clojure home page<br />
<a href="http://clojure.org/">http://clojure.org/</a>
</li>

<li>Clojure Sequences<br />
<a href="http://clojure.org/sequences">http://clojure.org/sequences</a>
</li>

<li>Clojure Data Structures<br />
<a href="http://clojure.org/data_structures">http://clojure.org/data_structures</a>
</li>

<li>Clojars:<br />
<a href="https://clojars.org/">https://clojars.org/</a>
</li>

<li>Seznam knihoven na Clojars:<br />
<a href="https://clojars.org/projects">https://clojars.org/projects</a>
</li>

<li>Clojure - Functional Programming for the JVM<br />
<a href="http://java.ociweb.com/mark/clojure/article.html">http://java.ociweb.com/mark/clojure/article.html</a>
</li>

<li>Clojure quick reference<br />
<a href="http://faustus.webatu.com/clj-quick-ref.html">http://faustus.webatu.com/clj-quick-ref.html</a>
</li>

<li>4Clojure<br />
<a href="http://www.4clojure.com/">http://www.4clojure.com/</a>
</li>

<li>ClojureDoc (rozcestník s&nbsp;dokumentací jazyka Clojure)<br />
<a href="http://clojuredocs.org/">http://clojuredocs.org/</a>
</li>

<li>SICP (The Structure and Interpretation of Computer Programs)<br />
<a href="http://mitpress.mit.edu/sicp/">http://mitpress.mit.edu/sicp/</a>
</li>

<li>Pure function<br />
<a href="http://en.wikipedia.org/wiki/Pure_function">http://en.wikipedia.org/wiki/Pure_function</a>
</li>

<li>Funkcionální programování<br />
<a href="http://cs.wikipedia.org/wiki/Funkcionální_programování">http://cs.wikipedia.org/wiki/Funkcionální_programování</a>
</li>

<li>Čistě funkcionální (datové struktury, jazyky, programování)<br />
<a href="http://cs.wikipedia.org/wiki/Čistě_funkcionální">http://cs.wikipedia.org/wiki/Čistě_funkcionální</a>
</li>

<li>Dynamic Languages Strike Back<br />
<a href="http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html">http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html</a>
</li>

<li>Scripting: Higher Level Programming for the 21st Century<br />
<a href="http://www.tcl.tk/doc/scripting.html">http://www.tcl.tk/doc/scripting.html</a>
</li>

<li>Threading macro (dokumentace k&nbsp;jazyku Clojure)<br />
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;">https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;</a>
</li>

<li>Understanding the Clojure -&gt; macro<br />
<a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/</a>
</li>

<li>Emacs LISP<br />
<a href="https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-eine-zwei-emacs/#k08">https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-eine-zwei-emacs/#k08</a>
</li>

<li>Programovací jazyk LISP a LISP machines<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lisp-a-lisp-machines/">https://www.root.cz/clanky/programovaci-jazyk-lisp-a-lisp-machines/</a>
</li>

<li>Speciální formy, lambda výrazy a makra v programovacím jazyku LISP <br />
<a href="https://www.root.cz/clanky/specialni-formy-lambda-vyrazy-a-makra-v-programovacim-jazyku-lisp/">https://www.root.cz/clanky/specialni-formy-lambda-vyrazy-a-makra-v-programovacim-jazyku-lisp/</a>
</li>

<li>Programovací jazyky používané (nejen) v SSSR (část 3 – LISP)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-nejen-v-nbsp-sssr-cast-3-ndash-lisp/">https://www.root.cz/clanky/programovaci-jazyky-pouzivane-nejen-v-nbsp-sssr-cast-3-ndash-lisp/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

