<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. Rozdíly v&nbsp;typových systémech: variance</a></p>
<p><a href="#k16">*** 16. Jak je tomu v&nbsp;Javě?</a></p>
<p><a href="#k17">*** 17. Chování Pythonu při práci se seznamy s&nbsp;typem</a></p>
<p><a href="#k18">*** 18. Použití typu <strong>Sequence</strong> namísto typu <strong>List</strong></a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

jS: TypeScript, flow (refinement invalidation)
Ruby: Sorbet
Python: Mypy

gradual type systems
= detekce pouziti spatnych typu
= neresi jine typy chyb
= podpora puvodniho stylu programovani
v JS-TS problem s undefined



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

seznamy a sekvence
odvozene typy
variance (4 moznosti)

mypy pro seznamy pouziva invarianci
covarianci pro sekvence

java/typescript pouziva kovarianci (takze behove chyby)
Go invarianci



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
$ <strong>pip3 install --user mypy</strong>
&nbsp;
Collecting mypy
  Downloading mypy-1.3.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.2 MB)
     |████████████████████████████████| 12.2 MB 779 kB/s 
Requirement already satisfied: typing-extensions&gt;=3.10 in ./.local/lib/python3.8/site-packages (from mypy) (4.4.0)
Collecting tomli&gt;=1.1.0; python_version < "3.11"
  Downloading tomli-2.0.1-py3-none-any.whl (12 kB)
Collecting mypy-extensions&gt;=1.0.0
  Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)
Installing collected packages: tomli, mypy-extensions, mypy
Successfully installed mypy-1.3.0 mypy-extensions-1.0.0 tomli-2.0.1
</pre>

<pre>
$ pip3 install --upgrade --user typing_extensions
&nbsp;
Collecting typing_extensions
  Downloading typing_extensions-4.6.3-py3-none-any.whl (31 kB)
Installing collected packages: typing-extensions
  Attempting uninstall: typing-extensions
    Found existing installation: typing-extensions 4.4.0
    Uninstalling typing-extensions-4.4.0:
      Successfully uninstalled typing-extensions-4.4.0
Successfully installed typing-extensions-4.6.3
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

nominal, structural

from typing...

Vector = List[float]
Optional[type]
Sequence
incl.string
Tuple
Tuple[int,int]
(product types)

Callable[[int,int], bool]

generics
TypeVar
T=TypeVar("T")


def first(l:List[T]) -> T:
    return l[0]


<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

$ python3 -m compileall adder1.py
Compiling 'adder1.py'...

$ python3 -m compileall adder2.py
Compiling 'adder2.py'...


__annotations__


num: Union[str, int]


import third_party # type ignore

<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
# https://stackoverflow.com/questions/11141387/given-a-python-pyc-file-is-there-a-tool-that-let-me-view-the-bytecode
# https://stackoverflow.com/users/6003870/padymko
# https://stackoverflow.com/users/5065946/powersource97

import sys
import struct
import marshal
import binascii
import time
import dis
import platform
import types

def view_pyc_file(path):
    """Read and display a content of the Python`s bytecode in a pyc-file."""

    with open(path, 'rb') as file:

        magic = file.read(4)
        bit_field = None
        timestamp = None
        hashstr = None
        size = None

        if sys.version_info.major == 3 and sys.version_info.minor &gt;= 7:
            bit_field = int.from_bytes(file.read(4), byteorder=sys.byteorder)
            if 1 & bit_field == 1:
                hashstr = file.read(8)
            else:
                timestamp = file.read(4)
                size = file.read(4)
                size = struct.unpack('I', size)[0]
        elif sys.version_info.major == 3 and sys.version_info.minor &gt;= 3:
            timestamp = file.read(4)
            size = file.read(4)
            size = struct.unpack('I', size)[0]
        else:
            timestamp = file.read(4)

        code = marshal.load(file)

    magic = binascii.hexlify(magic).decode('utf-8')
    timestamp = time.asctime(time.localtime(struct.unpack('I', timestamp)[0]))

    dis.disassemble(code)

    print('-' * 80)

    for i, const in enumerate(code.co_consts):
        print(i, "       "+str(const))

    print('-' * 80)
    print(
        'Python version: {}\nMagic code: {}\nTimestamp: {}\nSize: {}\nHash: {}\nBitfield: {}'
        .format(platform.python_version(), magic, timestamp, size, hashstr, bit_field)
    )

if __name__ == '__main__':
    view_pyc_file(sys.argv[1])
</pre>

<pre>
  1           0 LOAD_CONST               0 (<code object add at 0x7f90e76385b0, file "adder1.py", line 1>)
              2 LOAD_CONST               1 ('add')
              4 MAKE_FUNCTION            0
              6 STORE_NAME               0 (add)
              8 LOAD_CONST               2 (None)
             10 RETURN_VALUE
--------------------------------------------------------------------------------
0        <code object add at 0x7f90e76385b0, file "adder1.py", line 1>
1        add
2        None
--------------------------------------------------------------------------------
Python version: 3.8.10
Magic code: 550d0d0a
Timestamp: Thu Jun  8 15:36:13 2023
Size: 30
Hash: None
Bitfield: 0
</pre>

<pre>
  1           0 LOAD_NAME                0 (int)
              2 LOAD_NAME                0 (int)
              4 LOAD_NAME                0 (int)
              6 LOAD_CONST               0 (('a', 'b', 'return'))
              8 BUILD_CONST_KEY_MAP      3
             10 LOAD_CONST               1 (<code object add at 0x7ff3987475b0, file "adder2.py", line 1>)
             12 LOAD_CONST               2 ('add')
             14 MAKE_FUNCTION            4 (annotations)
             16 STORE_NAME               1 (add)
             18 LOAD_CONST               3 (None)
             20 RETURN_VALUE
--------------------------------------------------------------------------------
0        ('a', 'b', 'return')
1        <code object add at 0x7ff3987475b0, file "adder2.py", line 1>
2        add
3        None
--------------------------------------------------------------------------------
Python version: 3.8.10
Magic code: 550d0d0a
Timestamp: Thu Jun  8 15:36:25 2023
Size: 45
Hash: None
Bitfield: 0
</pre>

<pre>
  1           0 LOAD_NAME                0 (int)
              2 LOAD_NAME                0 (int)
              4 LOAD_NAME                0 (int)
              6 LOAD_CONST               0 (('a', 'b', 'return'))
              8 BUILD_CONST_KEY_MAP      3
             10 LOAD_CONST               1 (<code object add at 0x7f413d3d25b0, file "adder3.py", line 1>)
             12 LOAD_CONST               2 ('add')
             14 MAKE_FUNCTION            4 (annotations)
             16 STORE_NAME               1 (add)

  4          18 LOAD_NAME                2 (print)
             20 LOAD_NAME                1 (add)
             22 LOAD_CONST               3 (1)
             24 LOAD_CONST               4 (2)
             26 CALL_FUNCTION            2
             28 CALL_FUNCTION            1
             30 POP_TOP

  5          32 LOAD_NAME                2 (print)
             34 LOAD_NAME                1 (add)
             36 LOAD_CONST               3 (1)
             38 LOAD_CONST               5 (True)
             40 CALL_FUNCTION            2
             42 CALL_FUNCTION            1
             44 POP_TOP

  6          46 LOAD_NAME                2 (print)
             48 LOAD_NAME                1 (add)
             50 LOAD_CONST               3 (1)
             52 LOAD_CONST               6 (False)
             54 CALL_FUNCTION            2
             56 CALL_FUNCTION            1
             58 POP_TOP
             60 LOAD_CONST               7 (None)
             62 RETURN_VALUE
--------------------------------------------------------------------------------
0        ('a', 'b', 'return')
1        <code object add at 0x7f413d3d25b0, file "adder3.py", line 1>
2        add
3        1
4        2
5        True
6        False
7        None
--------------------------------------------------------------------------------
Python version: 3.8.10
Magic code: 550d0d0a
Timestamp: Thu Jun  8 17:13:13 2023
Size: 104
Hash: None
Bitfield: 0
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
"""
Simple checker of all JSONs in the given directory (usually repository).

usage: json_check.py [-h] [-v]

optional arguments:
  -h, --help     show this help message and exit
  -v, --verbose  make it verbose
  -n, --no-colors  disable color output
  -d DIRECTORY, --directory DIRECTORY
                        directory with JSON files to check
"""

from pathlib import Path
from json import load
from sys import exit
from os import popen
from argparse import ArgumentParser


def read_control_code(operation):
    """Try to execute tput to read control code for selected operation."""
    return popen("tput " + operation, "r").readline()


def check_jsons(verbose, directory):
    """Check all JSON files found in current directory and all subdirectories."""
    # Reset counters with number of passes and number of failures.
    passes = 0
    failures = 0

    # Find all files in current directory and subdirectories with `*.json`
    # extension. Files are found recursivelly.
    files = list(Path(directory).rglob("*.json"))

    # Iterate over all files found by previous command.
    for file in files:
        try:
            # If the file can be opened and loaded as JSON, everything is fine.
            with file.open() as fin:
                # Try to load and parse the content of JSON file.
                obj = load(fin)
                # At this point the JSON has been loaded and parsed correctly.
                if verbose is not None:
                    print("{} is valid".format(file))

                passes += 1
        except ValueError as e:
            # There are several reasons and possibilities why the file can not
            # be read as JSON, so we just print the error message taken from
            # exception object.
            print("{} is invalid".format(file))
            failures += 1
            print(e)

    # Just the counters needs to be returned because all other informations
    # about problems have been displayed already.
    return passes, failures


def display_report(passes, failures, nocolors):
    """Display report about number of passes and failures."""
    # First of all, we need to setup colors to be displayed on terminal. Colors
    # are displayed by using terminal escape control codes. When color output
    # are not enabled on command line, we can simply use empty strings in
    # output instead of real color escape codes.
    red_background = green_background = magenta_background = no_color = ""

    # If colors are enabled by command line parameter, use control sequence
    # returned by `tput` command.
    if not nocolors:
        red_background = read_control_code("setab 1")
        green_background = read_control_code("setab 2")
        magenta_background = read_control_code("setab 5")
        no_color = read_control_code("sgr0")

    # There are four possible outcomes of JSON check:
    # 1. no JSON files has been found
    # 2. all files are ok
    # 3. none of JSON files can be read and parsed
    # 4. some files can be read and parsed, some can not
    if failures == 0:
        # If there are no failures, then check if any JSON file has been found at all.
        if passes == 0:
            print(
                "{}[WARN]{}: no JSON files detected".format(
                    magenta_background, no_color
                )
            )
        else:
            print(
                "{}[OK]{}: all JSONs have proper format".format(
                    green_background, no_color
                )
            )
    else:
        print("{}[FAIL]{}: invalid JSON(s) detected".format(red_background, no_color))

    # Print just number of passes and failures at the end, as this information
    # can be processed on CI.
    print("{} passes".format(passes))
    print("{} failures".format(failures))


def main():
    """Entry point to this tool."""
    # First of all, we need to specify all command line flags that are
    # recognized by this tool.
    parser = ArgumentParser()
    parser.add_argument(
        "-v",
        "--verbose",
        dest="verbose",
        help="make it verbose",
        action="store_true",
        default=None,
    )
    parser.add_argument(
        "-n",
        "--no-colors",
        dest="nocolors",
        help="disable color output",
        action="store_true",
        default=None,
    )
    parser.add_argument(
        "-d",
        "--directory",
        dest="directory",
        help="directory with JSON files to check",
        action="store",
        default=".",
    )

    # Now it is time to parse flags, check the actual content of command line
    # and fill in the object stored in variable named `args`.
    args = parser.parse_args()

    # Check all JSON files, display problems, and get counters with number of
    # passes and failures.
    passes, failures = check_jsons(args.verbose, args.directory)

    # Display detailed report and summary as well.
    display_report(passes, failures, args.nocolors)

    # If any error is found, return with exit code check to non-zero value.
    if failures > 0:
        exit(1)


# If this script is started from command line, run the `main` function
# which represents entry point to the processing.
if __name__ == "__main__":
    """Entry point to this tool."""
    main()
</pre>


<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>


ccx_upgrades_data_eng/auth.py:7: error: Library stubs not installed for "requests"  [import]
ccx_upgrades_data_eng/auth.py:7: note: Hint: "python3 -m pip install types-requests"
ccx_upgrades_data_eng/auth.py:8: error: Library stubs not installed for "oauthlib.oauth2"  [import]
ccx_upgrades_data_eng/auth.py:8: note: Hint: "python3 -m pip install types-oauthlib"
ccx_upgrades_data_eng/auth.py:8: note: (or run "mypy --install-types" to install all missing stub packages)


<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Rozdíly v&nbsp;typových systémech: variance</h2>

<p>Typ T je podtypem typu U tehdy, když ve všech místech kódu, kde je očekávána hodnota typu U, můžeme použít hodnotu typu T.</p>

<p>Variance určuje, jak se toto pravidlo uplatní například u polí, resp.&nbsp;seznamů List[T] versus List[U], map, funkcí atd.</p>

<p>Existují čtyři varianty:</p>

<ol>
<li>Covariance</li>
<li>Contravariance</li>
<li>Invariance</li>
<li>Bivariance</li>
</ol>

<p><div class="rs-tip-major">Poznámka: původní termíny</div></p>

Covariance
Hruška je podtypem typu Ovoce
=> List[Hruška] je podtypem typu List[Ovoce]
funkce akceptující List[Ovoce] bude akceptovat List[Hruška]

Contravariance
Hruška je podtypem typu Ovoce
=> List[Ovoce] je podtypem typu List[Hruška]
funkce akceptující List[Hruška] bude akceptovat List[Ovoce]

Invariance
Hruška je podtypem typu Ovoce
=> List[Ovoce] nemá vztah k List[Hruška]
(nelze zaměňovat)

Bivariance
Hruška je podtypem typu Ovoce
=>  List[Hruška] je podtypem typu List[Ovoce]
a současně List[Ovoce] je podtypem typu List[Hruška]
(jsou při volání zaměnitelné)

<p><div class="rs-tip-major">Poznámka: divné</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Jak je tomu v&nbsp;Javě?</h2>

<pre>
class Ovoce {
}

class Hruska extends Ovoce {
    public String toString() {
        return "Hruska";
    }
}

class Jablko extends Ovoce {
    public String toString() {
        return "Jablko";
    }
}

public class Variance1 {
    public static void smichej(Ovoce[] kosik) {
        kosik[0] = new Hruska();
        kosik[1] = new Jablko();
    }

    public static void main(String[] args) {
        Ovoce[] kosik = new Ovoce[2];
        smichej(kosik);

        for (Ovoce ovoce:kosik) {
            System.out.println(ovoce);
        }
    }
}
</pre>

<pre>
class Ovoce {
}

class Hruska extends Ovoce {
    public String toString() {
        return "Hruska";
    }
}

class Jablko extends Ovoce {
    public String toString() {
        return "Jablko";
    }
}

public class Variance2 {
    public static void smichej(Ovoce[] kosik) {
        kosik[0] = new Hruska();
        kosik[1] = new Jablko();
    }

    public static void main(String[] args) {
        Ovoce[] kosik = new Hruska[2];
        smichej(kosik);

        for (Ovoce ovoce:kosik) {
            System.out.println(ovoce);
        }
    }
}
</pre>

<pre>
Exception in thread "main" java.lang.ArrayStoreException: Jablko
        at Variance2.smichej(Variance2.java:19)
        at Variance2.main(Variance2.java:24)

</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Chování Pythonu při práci se seznamy s&nbsp;typem</h2>

<pre>
from typing import List


class Ovoce:
    pass


class Hruska(Ovoce):
    def __repr__(self):
        return "Hruska"


class Jablko(Ovoce):
    def __repr__(self):
        return "Jablko"


def smichej(kosik : List[Ovoce]):
    kosik.append(Hruska())
    kosik.append(Jablko())


kosik : List[Ovoce] = []

smichej(kosik)

for ovoce in kosik:
    print(ovoce)
</pre>

<pre>
from typing import List


class Ovoce:
    pass


class Hruska(Ovoce):
    def __repr__(self):
        return "Hruska"


class Jablko(Ovoce):
    def __repr__(self):
        return "Jablko"


def smichej(kosik : List[Ovoce]):
    kosik.append(Hruska())
    kosik.append(Jablko())


kosik : List[Hruska] = []

smichej(kosik)

for ovoce in kosik:
    print(ovoce)
</pre>

<pre>
from typing import List


class Ovoce:
    pass


class Hruska(Ovoce):
    def __repr__(self):
        return "Hruska"


class Jablko(Ovoce):
    def __repr__(self):
        return "Jablko"


def tiskni(kosik : List[Ovoce]):
    for ovoce in kosik:
        print(ovoce)


kosik : List[Hruska] = []

tiskni(kosik)
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Použití typu <strong>Sequence</strong> namísto typu <strong>List</strong></h2>

<pre>
from typing import Sequence


class Ovoce:
    pass


class Hruska(Ovoce):
    def __repr__(self):
        return "Hruska"


class Jablko(Ovoce):
    def __repr__(self):
        return "Jablko"


def tiskni(kosik : Sequence[Ovoce]):
    for ovoce in kosik:
        print(ovoce)


kosik : Sequence[Hruska] = []

tiskni(kosik)
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty, které jsme si v&nbsp;dnešním článku ukázali,
naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je nutné mít
nainstalován balíček <i>mypy</i>):</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>17</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>18</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>19</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>20</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>21</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>22</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
<tr><td>23</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/">https://github.com/tisnik/most-popular-python-libs/blob/master/mypy/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>mypy homepage<br />
<a href="https://www.mypy-lang.org/">https://www.mypy-lang.org/</a>
</li>

<li>mypy documentation<br />
<a href="https://mypy.readthedocs.io/en/stable/">https://mypy.readthedocs.io/en/stable/</a>
</li>

<li>Mypy na PyPi Optional static typing for Python<br />
<a href="https://pypi.org/project/mypy/">https://pypi.org/project/mypy/</a>
</li>

<li>5 Reasons Why You Should Use Type Hints In Python<br />
<a href="https://www.youtube.com/watch?v=dgBCEB2jVU0">https://www.youtube.com/watch?v=dgBCEB2jVU0</a>
</li>

<li>Python Typing &ndash; Type Hints &amp; Annotations<br />
<a href="https://www.youtube.com/watch?v=QORvB-_mbZ0">https://www.youtube.com/watch?v=QORvB-_mbZ0</a>
</li>

<li>What Problems Can TypeScript Solve?<br />
<a href="https://www.typescriptlang.org/why-create-typescript">https://www.typescriptlang.org/why-create-typescript</a>
</li>

<li>How to find code that is missing type annotations?<br />
<a href="https://stackoverflow.com/questions/59898490/how-to-find-code-that-is-missing-type-annotations">https://stackoverflow.com/questions/59898490/how-to-find-code-that-is-missing-type-annotations</a>
</li>

<li>Do type annotations in Python enforce static type checking?<br />
<a href="https://stackoverflow.com/questions/54734029/do-type-annotations-in-python-enforce-static-type-checking">https://stackoverflow.com/questions/54734029/do-type-annotations-in-python-enforce-static-type-checking</a>
</li>

<li>Understanding type annotation in Python<br />
<a href="https://blog.logrocket.com/understanding-type-annotation-python/">https://blog.logrocket.com/understanding-type-annotation-python/</a>
</li>

<li>Static type checking with Mypy — Perfect Python<br />
<a href="https://www.youtube.com/watch?v=9gNnhNxra3E">https://www.youtube.com/watch?v=9gNnhNxra3E</a>
</li>

<li>Static Type Checker for Python<br />
<a href="https://github.com/microsoft/pyright">https://github.com/microsoft/pyright</a>
</li>

<li>Differences Between Pyright and Mypy<br />
<a href="https://github.com/microsoft/pyright/blob/main/docs/mypy-comparison.md">https://github.com/microsoft/pyright/blob/main/docs/mypy-comparison.md</a>
</li>

<li>4 Python type checkers to keep your code clean<br />
<a href="https://www.infoworld.com/article/3575079/4-python-type-checkers-to-keep-your-code-clean.html">https://www.infoworld.com/article/3575079/4-python-type-checkers-to-keep-your-code-clean.html</a>
</li>

<li>Pyre: A performant type-checker for Python 3<br />
<a href="https://pyre-check.org/">https://pyre-check.org/</a>
</li>

<li>"Typing the Untyped: Soundness in Gradual Type Systems" by Ben Weissmann<br />
<a href="https://www.youtube.com/watch?v=uJHD2xyv7xo">https://www.youtube.com/watch?v=uJHD2xyv7xo</a>
</li>

<li>Covariance and contravariance (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)">https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)</a>
</li>

<li>Functional Programming: Type Systems<br />
<a href="https://www.youtube.com/watch?v=hy1wjkcIBCU">https://www.youtube.com/watch?v=hy1wjkcIBCU</a>
</li>

<li>A Type System From Scratch – Robert Widmann<br />
<a href="https://www.youtube.com/watch?v=IbjoA5xVUq0">https://www.youtube.com/watch?v=IbjoA5xVUq0</a>
</li>

<li>"Type Systems - The Good, Bad and Ugly" by Paul Snively and Amanda Laucher<br />
<a href="https://www.youtube.com/watch?v=SWTWkYbcWU0">https://www.youtube.com/watch?v=SWTWkYbcWU0</a>
</li>

<li>Type Systems: Covariance, Contravariance, Bivariance, and Invariance explained<br />
<a href="https://medium.com/@thejameskyle/type-systems-covariance-contravariance-bivariance-and-invariance-explained-35f43d1110f8">https://medium.com/@thejameskyle/type-systems-covariance-contravariance-bivariance-and-invariance-explained-35f43d1110f8</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

