<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Krátké ohlédnutí do minulosti: Python 1, 2 a 3</a></p>
<p><a href="#k03">*** 3. Novinky představené v&nbsp;Pythonu 3.14</a></p>
<p><a href="#k04">4. Praktická část</a></p>
<p><a href="#k05">5. Instalace Pythonu 3.14 s&nbsp;využitím nástrojů <strong>pdm</strong> nebo <strong>uv</strong></a></p>
<p><a href="#k06">6. Překlad Pythonu 3.14 ze zdrojových kódů</a></p>
<p><a href="#k07">7. Barevné zvýraznění REPLu interpretru jazyka Python</a></p>
<p><a href="#k08">8. Barevné zvýraznění nápovědy modulu <strong>argparse</strong></a></p>
<p><a href="#k09">9. Barevné zvýraznění výstupu generovaného standardním modulem <strong>unittest</strong></a></p>
<p><a href="#k10">10. Vylepšená nápověda při nesprávném zápisu klíčového slova nebo identifikátoru</a></p>
<p><a href="#k11">11. Vylepšení syntaxe a sémantiky jazyka Python</a></p>
<p><a href="#k12">12. Zjednodušení zápisu zachycení většího množství výjimek v&nbsp;jediném bloku <strong>except</strong></a></p>
<p><a href="#k13">13. Kdy je možné zapsat typy výjimek bez kulatých závorek?</a></p>
<p><a href="#k14">14. Detekce explicitního výskoku z&nbsp;bloku <strong>finally</strong></a></p>
<p><a href="#k15">15. Motivace a ukázky kódu</a></p>
<p><a href="#k16">*** 16. Podpora pro t-řetězce</a></p>
<p><a href="#k17">*** 17. Ukázky rozdílů mezi f-řetězci a t-řetězci</a></p>
<p><a href="#k18">18. Obsah navazujícího článku</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Krátké ohlédnutí do minulosti: Python 1, 2 a 3</h2>

První stabilní (zejména ve smyslu již zmíněné _sémantiky_) verze programovacího jazyka Python byla vydána v&nbsp;roce 1994 a verze 1.x byly postupně vydávány až do roku 2001 (!), v&nbsp;němž vyšla poslední jedničková verze 1.6.1, která celou řadu Python 1 uzavřela. V&nbsp;Pythonu 1 ještě pochopitelně nenalezneme všechny vlastnosti, které známe ze stále ještě částečně rozšířeného Pythonu 2 nebo Pythonu 3 (který dnes Python 2 postupně nahrazuje).

Například řetězce byly v&nbsp;Pythonu 1 čistě osmibitové (ASCII), zatímco už v&nbsp;Pythonu 2 bylo možné použít Unicode řetězce. Dále v&nbsp;Pythonu 1 nebyla podporována takzvaná _generátorová notace_ a od ní odvozené konstrukce pro inicializaci seznamů, množin a slovníků. Taktéž ale neexistovaly ani operátory spojené s&nbsp;operací přiřazení, tedy například operátor `+=`, `|=` apod. Tyto varianty operátorů byly přidány až do Pythonu 2; inspirací byly v&nbsp;této oblasti pochopitelně především céčkové jazyky. A konečně, v&nbsp;Pythonu 1 neměly řetězce žádné metody, například `string.startswith` atd. &ndash; i tato funkcionalita byla přidána až v&nbsp;Pythonu 2.

V&nbsp;následující tabulce jsou vypsány všechny oficiálně vydané verze Pythonu 1:

<table>
<tr><th>Verze Pythonu</th><th>Datum vydání této verze</th></tr>
<tr><td>1.0.0</td><td>26. ledna 1994</td></tr>
<tr><td>1.0.2</td><td>15. února 1994</td></tr>
<tr><td>1.0.3</td><td>4. května 1994</td></tr>
<tr><td>1.0.4</td><td>14. července, 1994</td></tr>
<tr><td>1.1  </td><td>11. října 1994</td></tr>
<tr><td>1.1.1</td><td>10. listopadu 1994</td></tr>
<tr><td>1.2  </td><td>13. dubna 1995</td></tr>
<tr><td>1.3  </td><td>13. října 1995</td></tr>
<tr><td>1.4  </td><td>25. října 1996</td></tr>
<tr><td>1.5  </td><td>3. ledna 1998</td></tr>
<tr><td>1.5.1</td><td>31. října 1998</td></tr>
<tr><td>1.5.2</td><td>13. dubna 1999</td></tr>
<tr><td>1.6  </td><td>5. září 2000</td></tr>
<tr><td>1.6.1</td><td>25. února 2001</td></tr>
</table>

Poznámka: v&nbsp;současnosti, kdy verze nějakého frameworku nebo knihovny určené pro ekosystém jazyka JavaScript vydaná před dvěma týdny je mnohdy považována za zoufale zastaralou, se to může zdát zvláštní, ale stále se můžeme ve specifických případech setkat s&nbsp;použitím Pythonu verze 1. Konkrétně jsem viděl použití Pythonu 1.5.2 a 1.6.1. Ostatně není bez zajímavosti, že tyto verze jsou dostupné ve formě zdrojových kódů a jsou stále přeložitelné i na současných verzích Linuxu či systému Microsoft Windows (i když pro nové projekty vřele doporučuji používat Python 3).
Vydání Pythonu 2.0 datujeme na 16. říjen 2000. Python 2 byl velmi úspěšným projektem, který do značné míry zajistil Pythonu místo na samotném vrcholu popularity programovacích jazyků. Ovšem již v&nbsp;roce 2008 vyšel Python 3.0 (založený na PEP 3000, což bylo někdy spojováno do označení &bdquo;Python 3000&ldquo;), který je s&nbsp;verzí 2 částečně nekompatibilní. A právě popularita a velké rozšíření Pythonu 2 a jeho balíčků na jedné straně a nekompatibilita Pythonu 3 na straně druhé zapříčinila více než desetileté schizma světa Pythonu, které je teprve postupně napravováno s&nbsp;tím, jak se stále více balíčků a aplikací portuje na Python 3 (a v&nbsp;některých oblastech ani zdaleka není ukončeno, nicméně všechny nejdůležitější knihovny jsou již nabízeny buď výhradně pro Python 3 nebo jak pro Python 2, tak i pro Python 3).

Poznámka: na druhou stranu je nutné poznamenat, že se přechod na Python 3 v&nbsp;mnoha oblastech podařil a to v&nbsp;mnoha případech relativně snadno. Nenastala tedy taková patová situace, jako v&nbsp;případě Perlu 5 vs. Perl 6 (v&nbsp;současnosti Raku).

Opět si pochopitelně vypíšeme data vydání různých verzí Pythonu 2 (bez &bdquo;setinkových&ldquo; vydání:

| Verze | Datum vydání       |
|-------|--------------------|
| 2.0   | 16. října 2000     |
| 2.1   | 17. dubna 2001     |
| 2.2   | 21. prosince 2001  |
| 2.3   | 29. července 2003  |
| 2.4   | 30. listopadu 2004 |
| 2.5   | 16. září 2006      |
| 2.6   | 1. října 2008      |
| 2.7   | 3. července 2010   |

Žádná z&nbsp;těchto verzí Pythonu již není oficiálně podporována a doporučuje se, aby všechny nové projekty vznikaly již pro Python 3.
Python 3.0, tedy první verze Pythonu řady 3, byla vydána v&nbsp;prosinci 2008. Za zmínku stojí &bdquo;překryv&ldquo; v&nbsp;současném vydávání Pythonu 2.x a 3.x:

| Verze | Datum vydání       |
|-------|--------------------|
| 3.0   | 3. prosince 2008   |
| 3.1   | 27. června 2009    |
| 3.2   | 20. února 2011     |
| 3.3   | 29. září 2012      |
| 3.4   | 16. března 2014    |
| 3.5   | 13. září 2015      |
| 3.6   | 23. prosince 2016  |
| 3.7   | 27. června 2018    |
| 3.8   | 14. října 2019     |
| 3.9   | 5. října 2020      |
| 3.10  | 4. října 2021      |
| 3.11  | 24. října 2022     |
| 3.12  | 2. října 2023      |
 2024-10-07
  2025-10-07

Povšimněte si velké pravidelnosti ve vydávání verzí, ke které došlo od verze 3.8. Příští plánovaná verze bude 3.13 a vyjít by měla letos, a to opět v&nbsp;říjnu.



<p><a name="k03"></a></p>
<h2 id="k03">3. Novinky představené v&nbsp;Pythonu 3.14</h2>

<p></p>

<table>
<tr><th></th><th></th></tr>
<tr><td></td><td></td></tr>
</table>



<p><a name="k04"></a></p>
<h2 id="k04">4. Praktická část</h2>

<p>Ve druhé části dnešního článku si některé <a href="#k03">výše zmíněné</a>
novinky představené v&nbsp;Pythonu 3.14 ukážeme prakticky. Nejdříve si řekneme,
jakým způsobem je vlastně možné Python 3.14 nainstalovat v&nbsp;případě, že
nejsou k&nbsp;dispozici oficiální balíčky pro vaši distribuci Linuxu (a to
většinou v&nbsp;době psaní článku &ndash; 10.10. &ndash; ještě nejsou). Dále si
ukážeme vylepšení spočívající v&nbsp;obarvení různých typů výstupů, vylepšená
chybová hlášení při nalezení klíčových slov a identifikátorů, u nichž došlo
k&nbsp;přepisu (chybějící znak atd.). A posléze se budeme věnovat těm novinkám,
které byly představeny a popsány v&nbsp;PEP-758 (zjednodušení zápisu zachycení
většího množství výjimek), PEP-765 (detekce výskoku z&nbsp;bloku
<strong>finally</strong>) a PEP-750 (t-řetězce). Vylepšení a zrychlení
samotného interpretru (alternativní provádění bajtkódu, vylepšení noGILu atd.)
však budou vzhledem k&nbsp;velkému rozsahu změn popsána až v&nbsp;navazujícím
článku.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Instalace Pythonu 3.14 s&nbsp;využitím nástrojů <strong>pdm</strong> nebo <strong>uv</strong></h2>

<p>Python 3.14 je možné nainstalovat několika způsoby. Nejjednodušší je situace
v&nbsp;případě, že je tato verze Pythonu dostupná přímo v&nbsp;balíčcích vámi
používané distribuce Linuxu. V&nbsp;takovém (ideálním) případě postačuje použít
<strong>apt</strong>, <strong>dnf</strong> atd. a popř.&nbsp;si upravit
<i>alternatives</i>.</p>

<p>Pokud Python 3.14 dostupný není, můžeme se ho pokusit nainstalovat
s&nbsp;využitím nástrojů <strong>pdm</strong> nebo <strong>uv</strong>, které
Python zvolené verze (nebo verzí) dokážou pro uživatele doinstalovat, a to bez
nutnosti mít k&nbsp;dispozici administrátorská práva. Ukažme si celý postup při
použití balíčku <strong>uv</strong>.</p>

<p>Zjištění, které verze Pythonu jsou již nainstalovány:</p>

<pre>
$ <strong>uv python list</strong>
&nbsp;
cpython-3.13.3-linux-x86_64-gnu     /usr/bin/python3.13
cpython-3.12.10-linux-x86_64-gnu    /usr/bin/python3.12
cpython-3.12.10-linux-x86_64-gnu    /usr/bin/python3 -&gt; python3.12
cpython-3.12.10-linux-x86_64-gnu    /usr/bin/python -&gt; ./python3
cpython-3.11.12-linux-x86_64-gnu    /usr/bin/python3.11
</pre>

<p>Instalace Pythonu 3.14:</p>

<pre>
$ <strong>uv python install 3.14</strong>
&nbsp;
Installed Python 3.14.0rc2 in 3.74s
 + cpython-3.14.0rc2-linux-x86_64-gnu (python3.14)
</pre>

<p>Ve skutečnosti se nemusí nainstalovat oficiální verze 3.14, ale typicky se
nainstaluje verze starší!</p>

<p>Kontrola, zda došlo k&nbsp;instalaci a jakou verzi Pythonu jsme vlastně
nainstalovali:</p>

<pre>
$ <strong>whereis python3.14</strong>
&nbsp;
python3.14: /home/ptisnovs/.local/bin/python3.14
&nbsp;
&nbsp;
&nbsp;
$ <strong>uv run python3.14 --version</strong>
&nbsp;
Python 3.14.0rc2
&nbsp;
&nbsp;
&nbsp;
$ <strong>uv run python3.14</strong>
&nbsp;
Python 3.14.0rc2 (main, Aug 18 2025, 19:19:22) [Clang 20.1.4 ] on linux
Type "help", "copyright", "credits" or "license" for more information.
</pre>

<p>V&nbsp;adresáři <strong>/home/${USER}/.local/bin/python3.14</strong> by měly
být uloženy následující soubory:</p>

<pre>
$ <strong>ls -lah</strong>
total 30M
drwxr-xr-x. 1 ptisnovs ptisnovs  192 Oct 10 13:04 .
drwxr-xr-x. 1 ptisnovs ptisnovs   36 Oct 10 13:04 ..
lrwxrwxrwx. 1 ptisnovs ptisnovs    8 Oct 10 13:04 idle3 -&gt; idle3.14
-rwxr-xr-x. 1 ptisnovs ptisnovs  156 Oct 10 13:04 idle3.14
-rwxr-xr-x. 1 ptisnovs ptisnovs  286 Oct 10 13:04 pip
-rwxr-xr-x. 1 ptisnovs ptisnovs  286 Oct 10 13:04 pip3
-rwxr-xr-x. 1 ptisnovs ptisnovs  286 Oct 10 13:04 pip3.14
lrwxrwxrwx. 1 ptisnovs ptisnovs    9 Oct 10 13:04 pydoc3 -&gt; pydoc3.14
-rwxr-xr-x. 1 ptisnovs ptisnovs  141 Oct 10 13:04 pydoc3.14
lrwxrwxrwx. 1 ptisnovs ptisnovs   10 Oct 10 13:04 python -&gt; python3.14
lrwxrwxrwx. 1 ptisnovs ptisnovs   10 Oct 10 13:04 python3 -&gt; python3.14
-rwxr-xr-x. 1 ptisnovs ptisnovs  30M Oct 10 13:04 python3.14
-rwxr-xr-x. 1 ptisnovs ptisnovs 3.2K Oct 10 13:04 python3.14-config
lrwxrwxrwx. 1 ptisnovs ptisnovs   17 Oct 10 13:04 python3-config -&gt; python3.14-config
</pre>

<p><div class="rs-tip-major">Poznámka: ještě 10.&nbsp;10.&nbsp;2025 nástroj
<strong>uv</strong> nenainstaloval nový oficiálně vydaný Python 3.14.0, ale
jeho &bdquo;předverzi&ldquo; RC2. Instalaci oficiálně vydané verze však lze
provést ze zdrojových kódů &ndash; viz <a href="#k06">navazující
kapitolu</a>.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Překlad Pythonu 3.14 ze zdrojových kódů</h2>

<p>Pokud si chcete vyzkoušet stabilní a oficiálně vydaný Python 3.14, postačuje
si ze stránek <a
href="https://www.python.org/downloads/">https://www.python.org/downloads/</a>
stáhnout archiv (zkomprimovaný tarball), ten rozbalit a použít klasickou
kombinaci příkazů (je nutné mít nainstalován překladač céčka, včetně jeho sady
nástrojů, a navíc i nástroj <strong>make</strong>):</p>

<pre>
$ <strong>cd Python-3.14.0</strong>
$ <strong>./configure</strong>
$ <strong>make</strong>
</pre>

<p>Průběh překladu (jen krátká ukázka):</p>

<pre>
...
...
...
gcc  -fno-strict-overflow -Wsign-compare -DNDEBUG -g -O3 -Wall    -std=c11 -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -Wstrict-prototypes -Werror=implicit-function-declaration -fvisibility=hidden  -I./Include/internal -I./Include/internal/mimalloc  -I. -I./Include    -fPIC -c ./Modules/_testcapi/config.c -o Modules/_testcapi/config.o
gcc  -fno-strict-overflow -Wsign-compare -DNDEBUG -g -O3 -Wall    -std=c11 -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -Wstrict-prototypes -Werror=implicit-function-declaration -fvisibility=hidden  -I./Include/internal -I./Include/internal/mimalloc  -I. -I./Include    -fPIC -c ./Modules/_testcapi/import.c -o Modules/_testcapi/import.o
gcc  -fno-strict-overflow -Wsign-compare -DNDEBUG -g -O3 -Wall    -std=c11 -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -Wstrict-prototypes -Werror=implicit-function-declaration -fvisibility=hidden  -I./Include/internal -I./Include/internal/mimalloc  -I. -I./Include    -fPIC -c ./Modules/_testcapi/frame.c -o Modules/_testcapi/frame.o
gcc  -fno-strict-overflow -Wsign-compare -DNDEBUG -g -O3 -Wall    -std=c11 -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -Wstrict-prototypes -Werror=implicit-function-declaration -fvisibility=hidden  -I./Include/internal -I./Include/internal/mimalloc  -I. -I./Include    -fPIC -c ./Modules/_testcapi/type.c -o Modules/_testcapi/type.o
&nbsp;
sed -e "s,/usr/bin/env python3,/usr/local/bin/python3.14," &lt; ./Tools/scripts/idle3 &gt; build/scripts-3.14/idle3.14
sed -e "s,/usr/bin/env python3,/usr/local/bin/python3.14," &lt; ./Tools/scripts/pydoc3 &gt; build/scripts-3.14/pydoc3.14
sed -e "s,@EXENAME@,/usr/local/bin/python3.14," &lt; ./Misc/python-config.in &gt;python-config.py
LC_ALL=C sed -e 's,\$(\([A-Za-z0-9_]*\)),\$\{\1\},g' &lt; Misc/python-config.sh &gt;python-config
The following modules are *disabled* in configure script:
_sqlite3
&nbsp;
The necessary bits to build these optional modules were not found:
_dbm                  _gdbm                 _tkinter
_uuid                 readline
To find the necessary bits, look in configure.ac and config.log.
&nbsp;
Checked 114 modules (36 built-in, 71 shared, 1 n/a on linux-x86_64, 1 disabled, 5 missing, 0 failed on import)
./python -E ./Tools/build/generate-build-details.py `cat pybuilddir.txt`/build-details.json
</pre>

<p>Výsledkem je spustitelný soubor <strong>python</strong>, který je již pěkný
bumbrlíček (Python 1 se vešel na disketu):</p>

<pre>
$ <strong>ls -lah python </strong>
&nbsp;
-rwxr-xr-x. 1 ptisnovs ptisnovs 33M Oct 10 13:26 python
</pre>

<p><div class="rs-tip-major">Poznámka: z&nbsp;vypsaných informací je patrné, že
se přeložil &bdquo;pouze&ldquo; interpret Pythonu a nikoli například IDLE atd.
To nám však nebude vůbec vadit.</div></p>

<p>Po překladu je možné Python nainstalovat příkazem:</p>

<pre>
$ <strong>sudo make install</strong>
</pre>

<p>popř.&nbsp;je možné pouze symlinkovat výsledný spustitelný soubor
<strong>python</strong> do <strong>~/bin/</strong> atd. (podle nastavení
cest).</p>

<p>Kontrola verze Pythonu (zde konkrétně příkaz spouštím z&nbsp;adresáře, ve
kterém byl proveden překlad):</p>

<pre>
$ <strong>./python --version</strong>
&nbsp;
Python 3.14.0
</pre>

<p>Spuštění interpretru Pythonu:</p>

<pre>
$ <strong>./python</strong>
&nbsp;
Python 3.14.0 (main, Oct 10 2025, 13:26:39) [GCC 14.2.1 20240912 (Red Hat 14.2.1-3)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Barevné zvýraznění REPLu interpretru jazyka Python</h2>

<p>Nejdříve se podívejme na změny a vylepšení, které jsou patrné na první
pohled. Už při prvním spuštění interaktivní smyčky (<i>REPL &ndash; Read Eval
Print Loop</i>) interpretru Pythonu zjistíme, že je nyní celé prostředí
&bdquo;barevnější&ldquo; a začíná tak do jisté míry připomínat populární <a
href="https://www.root.cz/clanky/ipython-jedno-z-nejpropracova-nejsich-interaktivnich-prostredi-pro-praci-s-pythonem/">IPython</a>.
Pro tuto novou vlastnost platí více než jinde, že jeden obrázek vydá za stovky
slov, takže si pouze ukažme, jak vlastně nyní vypadá typické
&bdquo;sezení&ldquo; s&nbsp;REPLem (interaktivním prostředím) Pythonu:</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 720px"><a href="https://www.root.cz/obrazek/1232172/"><img src="https://i.iinfo.cz/images/385/python-3-14-1-large.png" class="image-1232172" width="720" height="513" data-prev-filename="https://i.iinfo.cz/images/385/python-3-14-1-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/385/python-3-14-1-prev.webp" data-prev-width="370" data-prev-height="264" data-large-filename="https://i.iinfo.cz/images/385/python-3-14-1-large.png" data-large-filename-webp="https://i.iinfo.cz/images/385/python-3-14-1-large.webp" data-large-width="720" data-large-height="513" alt="Obrázek 1: Barevné zvýraznění REPLu Pythonu 3.14" data-description="Obrázek 1: Barevné zvýraznění REPLu Pythonu 3.14" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 720px" /></a><p>Obrázek 1: Barevné zvýraznění REPLu Pythonu 3.14<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>

<p><div class="rs-tip-major">Poznámka: na druhou stranu je však pochopitelně
stále možné <i>IPython</i> používat, protože nabízí pravděpodobně nejlepší
interaktivní smyčku (REPL) pro Python, která je v&nbsp;současnosti
k&nbsp;dispozici.</div></p>

<p>Z&nbsp;vývoje, který můžeme v&nbsp;posledních letech sledovat, to vypadá, že
terminálové aplikace zažívají vzestup. Možná za to může velmi dobrá podpora pro
barevný výstup v&nbsp;moderních emulátorech terminálu, podpora Unicode znaků a
taktéž existence nástrojů typu <strong>tmux</strong>.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Barevné zvýraznění nápovědy modulu <strong>argparse</strong></h2>

<p>Došlo i k&nbsp;vylepšení standardního modulu <strong>argparse</strong>,
který se používá pro definici přepínačů na příkazovém řádku i pro zpracování
zadaného příkazového řádku. Tento modul podporuje i přepínače
<strong>-h</strong> a <strong>--help</strong>, které zobrazí automaticky
generovanou nápovědu (<strong>argparse</strong> zná všechny přepínače i jejich
popis). A tato nápověda je nově zobrazena s&nbsp;obarveným textem, stejně jako
krátká nápověda <i>Usage</i> zobrazená tehdy, pokud uživatel zadá neplatný
přepínač.</p>

<p>Tato změna se dotkne všech aplikací, které se spouští z&nbsp;příkazového
řádku a které modul <strong>argparse</strong> používají. Ukažme si to na
jednoduchém příkladu, ve kterém je definováno několik přepínačů s&nbsp;jejich
popisem, datovým typem i výchozí hodnotou:</p>

<pre>
from argparse import ArgumentParser
&nbsp;
&nbsp;
def <strong>main</strong>():
    parser = ArgumentParser()
    parser.add_argument(
        "-v",
        "--verbose",
        dest="verbose",
        help="make it verbose",
        action="store_true",
        default=None,
    )
    parser.add_argument(
        "-n",
        "--no-colors",
        dest="nocolors",
        help="disable color output",
        action="store_true",
        default=None,
    )
    parser.add_argument(
        "-d",
        "--directory",
        dest="directory",
        help="directory with JSON files to check",
        action="store",
        default=".",
    )
    parser.add_argument(
        "--timeout",
        type=int,
        default=30,
        help="Request timeout in seconds (default: 30).",
    )
&nbsp;
    args = parser.parse_args()
&nbsp;
    print(args)
&nbsp;
&nbsp;
if __name__ == "__main__":
    main()
</pre>

<p>Porovnejme si zobrazení nápovědy v&nbsp;Pythonu 3.13 a Pythonu 3.14:</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 720px"><a href="https://www.root.cz/obrazek/1232175/"><img src="https://i.iinfo.cz/images/385/python-3-14-2-large.png" class="image-1232175" width="720" height="305" data-prev-filename="https://i.iinfo.cz/images/385/python-3-14-2-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/385/python-3-14-2-prev.webp" data-prev-width="370" data-prev-height="157" data-large-filename="https://i.iinfo.cz/images/385/python-3-14-2-large.png" data-large-filename-webp="https://i.iinfo.cz/images/385/python-3-14-2-large.webp" data-large-width="720" data-large-height="305" alt="Obrázek 2: Nápověda s&nbsp;přepínači aplikace, zobrazeno Pythonem 3.13." data-description="Obrázek 2: Nápověda s&nbsp;přepínači aplikace, zobrazeno Pythonem 3.13." title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 720px" /></a><p>Obrázek 2: Nápověda s&nbsp;přepínači aplikace, zobrazeno Pythonem 3.13.<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>

<p>Při použití interpretru Pythonu 3.14 se bude skript chovat odlišně:</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 720px"><a href="https://www.root.cz/obrazek/1232178/"><img src="https://i.iinfo.cz/images/385/python-3-14-3-large.png" class="image-1232178" width="720" height="291" data-prev-filename="https://i.iinfo.cz/images/385/python-3-14-3-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/385/python-3-14-3-prev.webp" data-prev-width="370" data-prev-height="150" data-large-filename="https://i.iinfo.cz/images/385/python-3-14-3-large.png" data-large-filename-webp="https://i.iinfo.cz/images/385/python-3-14-3-large.webp" data-large-width="720" data-large-height="291" alt="Obrázek 3: Nápověda s&nbsp;přepínači aplikace, zobrazeno Pythonem 3.14." data-description="Obrázek 3: Nápověda s&nbsp;přepínači aplikace, zobrazeno Pythonem 3.14." title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 720px" /></a><p>Obrázek 3: Nápověda s&nbsp;přepínači aplikace, zobrazeno Pythonem 3.14.<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>



<p><a name="k09"></a></p>
<h2 id="k09">9. Barevné zvýraznění výstupu generovaného standardním modulem <strong>unittest</strong></h2>

<p>Barevně jsou zvýrazněny i výsledky jednotkových testů, ovšem za předpokladu,
že se pro jejich definici použije standardní modul <strong>unittest</strong>
(změna interpretru Pythonu pochopitelně nemá podobný vliv na moduly třetích
stran, například na modul <strong>pytest</strong>). Opět se podívejme na
jednoduchý příklad. Tentokrát se bude jednat o výpočet množiny prvočísel až do
zadaného limitu. Algoritmus výpočtu vypadá následovně (a je nyní jedno, že může
být optimalizován):</p>

<pre>
<i>"""Výpočet seznamu prvočísel až do zadaného limitu."""</i>
&nbsp;
<i># originální kód lze nalézt na adrese:</i>
<i># http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Odds-only_version_of_the_array_sieve_above</i>
&nbsp;
&nbsp;
def <strong>primes2</strong>(limit):
    <i>"""Výpočet seznamu prvočísel až do zadaného limitu."""</i>
    <i># okrajový případ</i>
    if limit &lt; 2:
        return []
&nbsp;
    <i># druhý případ - 2 je speciálním prvočíslem</i>
    if limit &lt; 3:
        return [2]
&nbsp;
    lmtbf = (limit - 3) // 2
&nbsp;
    <i># naplnění tabulky, která se bude prosívat</i>
    buf = [True] * (lmtbf + 1)
&nbsp;
    <i># vlastní prosívání</i>
    for i in range((int(limit ** 0.5) - 3) // 2 + 1):
        if buf[i]:
            p = i + i + 3
            s = p * (i + 1) + i
            buf[s::p] = [False] * ((lmtbf - s) // p + 1)
&nbsp;
    <i># vytvoření seznamu prvočísel</i>
    return [2] + [i + i + 3 for i, v in enumerate(buf) if v]
</pre>

<p>Jednotkové testy vytvořené s&nbsp;využitím standardního modulu
<strong>unittest</strong> vypadají následovně. Jeden z&nbsp;testů je napsán
takovým způsobem, aby nahlásil chybu:</p>

<pre>
<i>"""Implementace jednotkových testů."""</i>
&nbsp;
import unittest
&nbsp;
from primes import primes2
&nbsp;
&nbsp;
class <strong>TestStringMethods</strong>(unittest.TestCase):
    def <strong>test_primes_10</strong>(self):
        <i>"""Otestování výpočtu seznamu prvočísel až do limitu 10."""</i>
        <i># získat seznam prvočísel až do limitu 10</i>
        p = primes2(10)
        <i># testy lze dále rozšiřovat</i>
        assert 2 in p
        assert 10 not in p
&nbsp;
    def <strong>test_primes_100000</strong>(self):
        <i>"""Otestování výpočtu seznamu prvočísel až do limitu 100000."""</i>
        <i># získat seznam prvočísel až do limitu 100000</i>
        p = primes2(100000)
        <i># testy lze dále rozšiřovat</i>
        assert 2 in p
        assert 10 not in p
        <i># hodnoty získány ze seznamu:</i>
        <i># https://primes.utm.edu/lists/small/10000.txt</i>
        assert 99989 in p
        assert 99991 in p
&nbsp;
    def <strong>test_primes_0</strong>(self):
        <i>"""Otestování výpočtu seznamu prvočísel do limitu 0."""</i>
        p = primes2(0)
        <i># otestujeme, zda je sekvence prázdná (není zcela přesné)</i>
        assert not p
&nbsp;
    def <strong>test_primes_should_fail</strong>(self):
        <i>"""Otestování výpočtu seznamu prvočísel do limitu 2."""</i>
        p = primes2(2)
        assert p == [1, 2, 3]
&nbsp;
    def <strong>test_primes_2</strong>(self):
        <i>"""Otestování výpočtu seznamu prvočísel do limitu 2."""</i>
        p = primes2(2)
        <i># otestujeme, zda sekvence obsahuje pouze hodnotu 2</i>
        assert 2 in p
        assert p == [2]
&nbsp;
&nbsp;
if __name__ == "__main__":
    unittest.main()
</pre>

<p>Při spuštění testů starší verzí interpretru Pythonu se zobrazí tyto
výsledky:</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 720px"><a href="https://www.root.cz/obrazek/1232181/"><img src="https://i.iinfo.cz/images/385/python-3-14-4-large.png" class="image-1232181" width="720" height="285" data-prev-filename="https://i.iinfo.cz/images/385/python-3-14-4-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/385/python-3-14-4-prev.webp" data-prev-width="370" data-prev-height="146" data-large-filename="https://i.iinfo.cz/images/385/python-3-14-4-large.png" data-large-filename-webp="https://i.iinfo.cz/images/385/python-3-14-4-large.webp" data-large-width="720" data-large-height="285" alt="Obrázek 4: Výsledky jednotkových testů vypsané Pythonem 3.13." data-description="Obrázek 4: Výsledky jednotkových testů vypsané Pythonem 3.13." title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 720px" /></a><p>Obrázek 4: Výsledky jednotkových testů vypsané Pythonem 3.13.<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>

<p>Naopak Python 3.14 zobrazí výsledky barevně odlišené:</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 720px"><a href="https://www.root.cz/obrazek/1232184/"><img src="https://i.iinfo.cz/images/385/python-3-14-5-large.png" class="image-1232184" width="720" height="285" data-prev-filename="https://i.iinfo.cz/images/385/python-3-14-5-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/385/python-3-14-5-prev.webp" data-prev-width="370" data-prev-height="146" data-large-filename="https://i.iinfo.cz/images/385/python-3-14-5-large.png" data-large-filename-webp="https://i.iinfo.cz/images/385/python-3-14-5-large.webp" data-large-width="720" data-large-height="285" alt="Obrázek 5: Výsledky jednotkových testů vypsané Pythonem 3.14." data-description="Obrázek 5: Výsledky jednotkových testů vypsané Pythonem 3.14." title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 720px" /></a><p>Obrázek 5: Výsledky jednotkových testů vypsané Pythonem 3.14.<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vylepšená nápověda při nesprávném zápisu klíčového slova nebo identifikátoru</h2>

<p>Vylepšila se i nápověda zobrazená interpretrem programovacího jazyka Python
při nalezení nesprávného zápisu klíčového slova nebo identifikátoru. Nyní se
interpret snaží najít podobné (korektní) slovo, což je funkce, s&nbsp;níž se
můžeme setkat stále častěji (BASH atd.), protože se rozhraní příkazového řádku
neustále přibližuje lidským požadavkům.</p>

<p>Příklad nesprávného zápisu jména standardní funkce a reakce interpretru:</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 720px"><a href="https://www.root.cz/obrazek/1232187/"><img src="https://i.iinfo.cz/images/385/python-3-14-6-large.png" class="image-1232187" width="720" height="240" data-prev-filename="https://i.iinfo.cz/images/385/python-3-14-6-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/385/python-3-14-6-prev.webp" data-prev-width="370" data-prev-height="123" data-large-filename="https://i.iinfo.cz/images/385/python-3-14-6-large.png" data-large-filename-webp="https://i.iinfo.cz/images/385/python-3-14-6-large.webp" data-large-width="720" data-large-height="240" alt="Obrázek 6: Chybové hlášení a nápověda s&nbsp;navrhnovanou opravou." data-description="Obrázek 6: Chybové hlášení a nápověda s&nbsp;navrhnovanou opravou." title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 720px" /></a><p>Obrázek 6: Chybové hlášení a nápověda s&nbsp;navrhnovanou opravou.<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>

<p>Ukažme si některé další příklady nesprávného zápisu a reakce
interpretru:</p>

<pre>
<strong>clss</strong> Address(BaseModel):
    street: str
    house_number: int
    city: str
</pre>

<p>Detekce nekorektně zapsaného klíčového slova <strong>class</strong>:</p>

<pre>
  File "/home/ptisnovs/src/most-popular-python-libs/python3.14/syntax_error_1.py", line 1
    clss Address(BaseModel):
    ^^^^
SyntaxError: invalid syntax. <strong>Did you mean 'class'?</strong>
</pre>

<p>Druhý příklad:</p>

<pre>
for i in <strong>ranger</strong>(10):
    print(i)
</pre>

<p>Detekce nesprávně zapsané standardní funkce <strong>range</strong>:</p>

<pre>
Traceback (most recent call last):
  File "/home/ptisnovs/src/most-popular-python-libs/python3.14/syntax_error_2.py", line 1, in <module>
    for i in ranger(10):
             ^^^^^^
NameError: name 'ranger' is not defined. <strong>Did you mean: 'range'?</strong>
</pre>

<p>Třetí příklad:</p>

<pre>
for i in range(10):
    <strong>println</strong>(i)
</pre>

<p>Detekce nesprávně zapsané standardní funkce <strong>print</strong>:</p>

<pre>
Traceback (most recent call last):
  File "/home/ptisnovs/src/most-popular-python-libs/python3.14/syntax_error_3.py", line 2, in <module>
    println(i)
    ^^^^^^^
NameError: name 'println' is not defined. <strong>Did you mean: 'print'?</strong>
</pre>

<p>Čtvrtý příklad:</p>

<pre>
def test_fn():
    for x in range(10):
        try:
            y = 1 / x
            print(f"{x:2}  {y:4.2f}")
        except ZeroDivisionError:
            print(f"{x:2}  divide by zero")
        <strong>finale</strong>:
            pass
&nbsp;
&nbsp;
test_fn()
</pre>

<p>Detekce nesprávně zapsaného klíčového slova <strong>finally</strong>:</p>

<pre>
  File "/home/ptisnovs/src/most-popular-python-libs/python3.14/syntax_error_4.py", line 8
    finale:
    ^^^^^^
SyntaxError: invalid syntax. <strong>Did you mean 'finally'?</strong>
</pre>

<p>Pátý příklad:</p>

<pre>
i = 0
<strong>whale</strong> i &lt; 10:
    i += 1
    print(i)
</pre>

<p>Detekce nesprávně zapsaného klíčového slova <strong>while</strong>:</p>

<pre>
  File "/home/ptisnovs/src/most-popular-python-libs/python3.14/syntax_error_5.py", line 2
    whale i &lt; 10:
    ^^^^^
SyntaxError: invalid syntax. <strong>Did you mean 'while'?</strong>
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vylepšení syntaxe a sémantiky jazyka Python</h2>

<p>Všechny nové vlastnosti Pythonu 3.14, s&nbsp;nimiž jsme se až doposud
v&nbsp;tomto článku setkali, se vlastně týkaly vylepšení rozhraní mezi
vývojářem na straně jedné a interpretrem na straně druhé. Ovšem do Pythonu 3.14
byly přidány nové více či méně užitečné vlastnosti i do samotného jazyka
Python, tj.&nbsp;do jeho syntaxe a sémantiky. Tyto nové vlastnosti sice nejsou
tak revoluční, jako tomu bylo v&nbsp;některých předchozích verzích Pythonu
(přidání typových informací, konstrukce pro pattern matching, podpora pro
asynchronní programování atd.), ovšem i tak stojí za zmínku i za ukázky.</p>

<p><div class="rs-tip-major">Poznámka: postupné změny prováděné v&nbsp;syntaxi
a sémantice Pythonu sice znamenají, že se vývojáři musí každý rok (ne častěji)
naučit několik nových postupů, na druhou stranu to však udržuje jazyk živý o
otevřený novým myšlenkám a inspiracím (třeba i z&nbsp;jiných jazyků) &ndash;
nestává se z&nbsp;něho živoucí fosilie.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zjednodušení zápisu zachycení většího množství výjimek v&nbsp;jediném bloku <strong>except</strong></h2>

<p>První, i když relativně malé vylepšení jazyka Python, spočívá v&nbsp;tom, že
pokud se v&nbsp;nějakém bloku <strong>except</strong> zachytává větší množství
výjimek (resp.&nbsp;přesněji řečeno výjimek několika typů), není nutné typy
těchto výjimek umístit do kulatých závorek. Toto vylepšení, které je popsáno
v&nbsp;<a href="https://peps.python.org/pep-0758/">PEP 758 – Allow except and
except* expressions without parentheses</a>, je plně dopředně kompatibilní
s&nbsp;předchozími verzemi programovacího jazyka Python, protože je stále možné
(a někdy i nutné &ndash; viz dále) výjimky do kulatých závorek zapisovat (ovšem
zdrojové kódy využívající tento zápis pochopitelně nebudou přijaty staršími
překladači ani interpretry).</p>

<p>Připomeňme si, jak je možné v&nbsp;jediném bloku <strong>except</strong>
zachytit více výjimek:</p>

<pre>
try:
    with open("pep-758-motivation.py", "r") as fin:
        content = fin.read()
    with open("bar", "w") as fout:
        fout.write(content)
except <strong>(FileNotFoundError, PermissionError, IsADirectoryError, IOError)</strong>:
    print("File handling exception")
</pre>

<p>popř.&nbsp;můžeme uložit objekt nesoucí informaci o výjimce do lokální
proměnné nazývané idiomaticky <strong>e</strong> s&nbsp;využitím konstrukce
<strong>as e</strong>:</p>

<pre>
try:
    with open("pep-758-motivation.py", "r") as fin:
        content = fin.read()
    with open("bar", "w") as fout:
        fout.write(content)
except <strong>(FileNotFoundError, PermissionError, IsADirectoryError, IOError) as e</strong>:
    print(type(e))
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Kdy je možné zapsat typy výjimek bez kulatých závorek?</h2>

<p>První z&nbsp;demonstračních příkladů, které byly uvedeny <a
href="#k12">v&nbsp;předchozí kapitole</a>, je nyní možné zapsat zkráceným
způsobem, tj.&nbsp;typy výjimek nemusí být vloženy do kulatých závorek:</p>

<pre>
try:
    with open("pep-758-motivation.py", "r") as fin:
        content = fin.read()
    with open("bar", "w") as fout:
        fout.write(content)
except <strong>FileNotFoundError, PermissionError, IsADirectoryError, IOError</strong>:
    print("File handling exception")
</pre>

<p>Důležité je ovšem vědět, že tento nový způsob zápisu se <i>nemůže</i> použít
v&nbsp;případě, kdy je použita konstrukce <strong>except ... as ...</strong>.
Pokud se o toto zjednodušení pokusíme, bude interpret programovacího jazyka
Python 3.14 hlásit chyby syntaxe (a nutno dodat, že tato konstrukce se
pravděpodobně používá mnohem častěji, než pouhé zachycení výjimek):</p>

<pre>
try:
    with open("pep-758-motivation.py", "r") as fin:
        content = fin.read()
    with open("bar", "w") as fout:
        fout.write(content)
except <strong>FileNotFoundError, PermissionError, IsADirectoryError, IOError as e</strong>:
    print(type(e))
</pre>

<p>Informace o syntaktické chybě nalezené překladačem bude vypadat takto:</p>

<pre>
  File "/home/ptisnovs/src/most-popular-python-libs/python3.14/pep-758-usage-as.py", line 6
    except FileNotFoundError, PermissionError, IsADirectoryError, IOError as e:
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SyntaxError: multiple exception types must be parenthesized when using 'as'
</pre>

<p><div class="rs-tip-major">Poznámka: přesněji řečeno se informace o chybě
vypíše s&nbsp;barevným rozlišením jednotlivých částí chyby, což jsme si již
ostatně řekli i ukázali v&nbsp;předchozích kapitolách.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Detekce explicitního výskoku z&nbsp;bloku <strong>finally</strong></h2>

<p>Interpretry a překladače všech starších verzí programovacího jazyka Python
umožňovaly, aby se v&nbsp;bloku <strong>finally</strong> (ten se provede
nezávisle na tom, zda je vyhozena a následně zachycena výjimka či nikoli)
používaly jazykové konstrukce umožňující výskok (opuštění) bloků
<strong>try-except-finally</strong>. Mezi takové konstrukce patří
<strong>return</strong>, <strong>break</strong>, ale i
<strong>continue</strong>. Jak si uvedeme v&nbsp;navazující kapitole, byla tato
kombinace <strong>finally+return</strong> atd. sice po syntaktické stránce
korektní, ovšem typicky se jedná o logickou chybu v&nbsp;návrhu programu.
Z&nbsp;tohoto důvodu Python 3.14 v&nbsp;takových případech detekuje a hlásí
varování o nekorektní syntaxi (tj.&nbsp;logická chyba byla <i>ponížena</i> na
pouhé varování, ovšem je to lepší, než původní ignorování této situace).</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Motivace a ukázky kódu</h2>

<p>Podívejme se nyní na nové chování interpretru Pythonu. Začneme příkladem, ve
kterém se vyskakuje z&nbsp;bloku <strong>finally</strong> příkazem
<strong>return</strong>, což konkrétně v&nbsp;tomto případě vlastně nijak
nevadí:</p>

<pre>
def <strong>test_fn</strong>():
    try:
        with open("pep-758-motivation.py", "r") as fin:
            content = fin.read()
        with open("bar", "w") as fout:
            fout.write(content)
    except (FileNotFoundError, PermissionError, IsADirectoryError, IOError) as e:
        print(type(e))
    <strong>finally:</strong>
        <strong>return</strong>
&nbsp;
&nbsp;
test_fn()
</pre>

<p>Reakce interpretru:</p>

<pre>
/home/ptisnovs/src/most-popular-python-libs/python3.14/pep-765-motivation-1.py:10:
<strong>SyntaxWarning: 'return' in a 'finally' block</strong>
  return
&lt;class 'FileNotFoundError'&gt;
</pre>

<p>Korektní příklad výpočtu tabulky převrácených hodnot. Nyní je blok
<strong>finally</strong> prázdný resp.&nbsp;přesněji řečeno neobsahuje příkaz
pro výskok:</p>

<pre>
def <strong>test_fn</strong>():
    for x in range(10):
        try:
            y = 1 / x
            print(f"{x:2}  {y:4.2f}")
        except ZeroDivisionError:
            print(f"{x:2}  divide by zero")
        <strong>finally:</strong>
            <strong>pass</strong>
&nbsp;
&nbsp;
test_fn()
</pre>

<p>Výsledky:</p>

<pre>
 0  divide by zero
 1  1.00
 2  0.50
 3  0.33
 4  0.25
 5  0.20
 6  0.17
 7  0.14
 8  0.12
 9  0.11
</pre>

<p>Předchozí příklad, ovšem s&nbsp;explicitním výskokem:</p>

<pre>
def <strong>test_fn</strong>():
    for x in range(10):
        try:
            y = 1 / x
            print(f"{x:2}  {y:4.2f}")
        except ZeroDivisionError:
            print(f"{x:2}  divide by zero")
        <strong>finally:</strong>
            <strong>return</strong>
&nbsp;
&nbsp;
test_fn()
</pre>

<p>Zobrazí se varování interpretru a současně se vypočte a zobrazí jediná
hodnota &ndash; poté je výpočet ukončen příkazem <strong>return</strong>:</p>

<pre>
/home/ptisnovs/src/most-popular-python-libs/python3.14/pep-765-motivation-3.py:9:
<strong>SyntaxWarning: 'return' in a 'finally' block</strong>
  return
 0  divide by zero
</pre>

<p>Podobný příklad, ale upravený do takové podoby, že se namísto
<strong>return</strong> použije <strong>continue</strong>:</p>

<pre>
def <strong>test_fn</strong>():
    for x in range(10):
        try:
            y = 1 / x
            print(f"{x:2}  {y:4.2f}")
        except ZeroDivisionError:
            print(f"{x:2}  divide by zero")
        <strong>finally:</strong>
            <strong>continue</strong>
&nbsp;
&nbsp;
test_fn()
</pre>

<p>Opět se zobrazí varování (jedenkrát) a poté proběhne výpočet:</p>

<pre>
/home/ptisnovs/src/most-popular-python-libs/python3.14/pep-765-motivation-4.py:9:
<strong>SyntaxWarning: 'continue' in a 'finally' block</strong>
  continue
 0  divide by zero
 1  1.00
 2  0.50
 3  0.33
 4  0.25
 5  0.20
 6  0.17
 7  0.14
 8  0.12
 9  0.11
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Podpora pro t-řetězce</h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Ukázky rozdílů mezi f-řetězci a t-řetězci</h2>

<p></p>

<pre>
a = 1
b = 2
&nbsp;
s = f"{a}+{b}={a+b}"
print(s)
print(type(s))
</pre>

<p></p>

<pre>
</pre>

<p></p>

<pre>
a = 1
b = 2
&nbsp;
s = t"{a}+{b}={a+b}"
print(s)
print(type(s))
</pre>

<p></p>

<pre>
</pre>

<p></p>

<pre>
x = "hello world!"
&nbsp;
s = f"Důležitá zpráva pro vás: '{x.capitalize()}'"
print(s)
print(type(s))
</pre>

<p></p>

<pre>
</pre>

<p></p>

<pre>
x = "hello world!"
&nbsp;
s = t"Důležitá zpráva pro vás: '{x.capitalize()}'"
print(s)
print(type(s))
</pre>

<p></p>

<pre>
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah navazujícího článku</h2>

<p>Python 3.14 ve skutečnosti přináší ještě více změn. Ty se týkají například
vylepšení běhu interpretru se zakázaným GILem (<i>Global Interpreter Lock</i>),
možnosti připojení debuggeru k&nbsp;již běžícímu Pythonovskému procesu,
vylepšení automatického správce paměti (<i>Garbage Collector</i>) a dokonce i
nového režimu interpretace bajtkódu Pythonu, což by mělo zvýšit jeho rychlost.
Těmito technologiemi se budeme zabývat v&nbsp;samostatném článku, protože
některé z&nbsp;nich vyžadují relativně dlouhý technický popis. Nicméně všechny
zmíněné technologie (až na možnost připojení debuggeru k&nbsp;běžícímu procesu)
vedou k&nbsp;měřitelnému zrychlení interpretru Pythonu.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady vytvořené pro Python verze 3.14 a popsané
v&nbsp;dnešním článku najdete v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs/">https://github.com/tisnik/most-popular-python-libs/</a>.
Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>argparse_test.py</td><td>skript s&nbsp;definicí přepínačů použitelných na příkazovém řádku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/argparse_test.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/argparse_test.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 2</td><td>syntax_error_1.py</td><td>skript obsahující syntaktické chyby: chybějící či naopak přebývající písmeno v&nbsp;klíčovém slovu nebo identifikátoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/syntax_error_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/syntax_error_1.py</a></td></tr>
<tr><td> 2</td><td>syntax_error_2.py</td><td>skript obsahující syntaktické chyby: chybějící či naopak přebývající písmeno v&nbsp;klíčovém slovu nebo identifikátoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/syntax_error_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/syntax_error_2.py</a></td></tr>
<tr><td> 3</td><td>syntax_error_3.py</td><td>skript obsahující syntaktické chyby: chybějící či naopak přebývající písmeno v&nbsp;klíčovém slovu nebo identifikátoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/syntax_error_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/syntax_error_3.py</a></td></tr>
<tr><td> 4</td><td>syntax_error_4.py</td><td>skript obsahující syntaktické chyby: chybějící či naopak přebývající písmeno v&nbsp;klíčovém slovu nebo identifikátoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/syntax_error_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/syntax_error_4.py</a></td></tr>
<tr><td> 5</td><td>syntax_error_5.py</td><td>skript obsahující syntaktické chyby: chybějící či naopak přebývající písmeno v&nbsp;klíčovém slovu nebo identifikátoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/syntax_error_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/syntax_error_5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>primes.py</td><td>realizace výpočtu prvočísel</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/primes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/primes.py</a></td></tr>
<tr><td> 7</td><td>test_primes.py</td><td>jednotkové testy pro modul <strong>primes.py</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/test_primes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/test_primes.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>pep-758-motivation-1.py</td><td>zachycení většího množství výjimek v&nbsp;bloku <strong>except</strong> &ndash; motivační příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-758-motivation-1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-758-motivation-1.py</a></td></tr>
<tr><td> 9</td><td>pep-758-motivation-2.py</td><td>zachycení většího množství výjimek v&nbsp;bloku <strong>except</strong> &ndash; motivační příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-758-motivation-2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-758-motivation-2.py</a></td></tr>
<tr><td>10</td><td>pep-758-usage.py</td><td>nový způsob zachycení výjimek definovaný v&nbsp;PEP-758</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-758-usage.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-758-usage.py</a></td></tr>
<tr><td>11</td><td>pep-758-usage-as.py</td><td>klauzule <strong>as</strong> a nový způsob zachycení výjimek definovaný v&nbsp;PEP-758</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-758-usage-as.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-758-usage-as.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td>pep-765-motivation-1.py</td><td>detekce opuštění bloku <strong>finally</strong>, první demonstrační příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-765-motivation-1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-765-motivation-1.py</a></td></tr>
<tr><td>13</td><td>pep-765-motivation-2.py</td><td>detekce opuštění bloku <strong>finally</strong>, druhý demonstrační příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-765-motivation-2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-765-motivation-2.py</a></td></tr>
<tr><td>14</td><td>pep-765-motivation-3.py</td><td>detekce opuštění bloku <strong>finally</strong>, třetí demonstrační příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-765-motivation-3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-765-motivation-3.py</a></td></tr>
<tr><td>15</td><td>pep-765-motivation-4.py</td><td>detekce opuštění bloku <strong>finally</strong>, čtvrtý demonstrační příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-765-motivation-4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/pep-765-motivation-4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>f-string-1.py</td><td>rozdíl mezi f-řetězci a t-řetězci, první demonstrační příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/f-string-1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/f-string-1.py</a></td></tr>
<tr><td>17</td><td>t-string-1.py</td><td>rozdíl mezi f-řetězci a t-řetězci, první demonstrační příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/t-string-1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/t-string-1.py</a></td></tr>
<tr><td>18</td><td>f-string-2.py</td><td>rozdíl mezi f-řetězci a t-řetězci, druhý demonstrační příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/f-string-2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/f-string-2.py</a></td></tr>
<tr><td>19</td><td>t-string-2.py</td><td>rozdíl mezi f-řetězci a t-řetězci, druhý demonstrační příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/t-string-2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/python3.14/t-string-2.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Python 3.14.0<br />
<a href="https://test.python.org/downloads/release/python-3140/">https://test.python.org/downloads/release/python-3140/</a>
</li>

<li>PEP 765 – Disallow return/break/continue that exit a finally block<br />
<a href="https://peps.python.org/pep-0765/">https://peps.python.org/pep-0765/</a>
</li>

<li>PEP 758 – Allow except and except* expressions without parentheses<br />
<a href="https://peps.python.org/pep-0758/">https://peps.python.org/pep-0758/</a>
</li>

<li>What’s new in Python 3.14 (official)<br />
<a href="https://docs.python.org/3/whatsnew/3.14.html">https://docs.python.org/3/whatsnew/3.14.html</a>
</li>

<li>What’s New In Python 3.13 (official)<br />
<a href="https://docs.python.org/3/whatsnew/3.13.html">https://docs.python.org/3/whatsnew/3.13.html</a>
</li>

<li>What’s New In Python 3.12 (official)<br />
<a href="https://docs.python.org/3/whatsnew/3.12.html">https://docs.python.org/3/whatsnew/3.12.html</a>
</li>

<li>What’s New In Python 3.11 (official)<br />
<a href="https://docs.python.org/3/whatsnew/3.11.html">https://docs.python.org/3/whatsnew/3.11.html</a>
</li>

<li>What’s New In Python 3.12<br />
<a href="https://dev.to/mahiuddindev/python-312-4n43">https://dev.to/mahiuddindev/python-312-4n43</a></li>

<li>PEP 698 – Override Decorator for Static Typing<br />
<a href="https://peps.python.org/pep-0698/">https://peps.python.org/pep-0698/</a>
</li>

<li>PEP 484 -- Type Hints<br />
<a href="https://www.python.org/dev/peps/pep-0484/">https://www.python.org/dev/peps/pep-0484/</a>
</li>

<li>What’s New In Python 3.5<br />
<a href="https://docs.python.org/3.5/whatsnew/3.5.html">https://docs.python.org/3.5/whatsnew/3.5.html</a>
</li>

<li>26.1. typing — Support for type hints<br />
<a href="https://docs.python.org/3.5/library/typing.html#module-typing">https://docs.python.org/3.5/library/typing.html#module-typing</a>
</li>

<li>Type Hints - Guido van Rossum - PyCon 2015 (youtube)<br />
<a href="https://www.youtube.com/watch?v=2wDvzy6Hgxg">https://www.youtube.com/watch?v=2wDvzy6Hgxg</a>
</li>

<li>Python 3.5 is on its way<br />
<a href="https://lwn.net/Articles/650904/">https://lwn.net/Articles/650904/</a>
</li>

<li>Type hints<br />
<a href="https://lwn.net/Articles/640359/">https://lwn.net/Articles/640359/</a>
</li>

<li>Stránka projektu PDM<br />
<a href="https://pdm.fming.dev/latest/">https://pdm.fming.dev/latest/</a>
</li>

<li>PDF na GitHubu<br />
<a href="https://github.com/pdm-project/pdm">https://github.com/pdm-project/pdm</a>
</li>

<li>PEP 582 &ndash; Python local packages directory<br />
<a href="https://peps.python.org/pep-0582/">https://peps.python.org/pep-0582/</a>
</li>

<li>PDM na PyPi<br />
<a href="https://pypi.org/project/pdm/">https://pypi.org/project/pdm/</a>
</li>

<li>Which Python package manager should you use?<br />
<a href="https://towardsdatascience.com/which-python-package-manager-should-you-use-d0fd0789a250">https://towardsdatascience.com/which-python-package-manager-should-you-use-d0fd0789a250</a>
</li>

<li>How to Use PDM to Manage Python Dependencies without a Virtual Environment<br />
<a href="https://www.youtube.com/watch?v=qOIWNSTYfcc">https://www.youtube.com/watch?v=qOIWNSTYfcc</a>
</li>

<li>What are the best Python package managers?<br />
<a href="https://www.slant.co/topics/2666/~best-python-package-managers">https://www.slant.co/topics/2666/~best-python-package-managers</a>
</li>

<li>PEP 621 &ndash; Storing project metadata in pyproject.toml<br />
<a href="https://peps.python.org/pep-0621/">https://peps.python.org/pep-0621/</a>
</li>

<li>Pick a Python Lockfile and Improve Security<br />
<a href="https://blog.phylum.io/pick-a-python-lockfile-and-improve-security/">https://blog.phylum.io/pick-a-python-lockfile-and-improve-security/</a>
</li>

<li>PyPA specifications<br />
<a href="https://packaging.python.org/en/latest/specifications/">https://packaging.python.org/en/latest/specifications/</a>
</li>

<li>Creation of virtual environments<br />
<a href="https://docs.python.org/3/library/venv.html">https://docs.python.org/3/library/venv.html</a>
</a>

<li>How to Use virtualenv in Python<br />
<a href="https://learnpython.com/blog/how-to-use-virtualenv-python/">https://learnpython.com/blog/how-to-use-virtualenv-python/</a>
</a>

<li>Python Virtual Environments: A Primer<br />
<a href="https://realpython.com/python-virtual-environments-a-primer/">https://realpython.com/python-virtual-environments-a-primer/</a>
</a>

<li>virtualenv Cheatsheet<br />
<a href="https://aaronlelevier.github.io/virtualenv-cheatsheet/">https://aaronlelevier.github.io/virtualenv-cheatsheet/</a>
</a>

<li>Installing Python Modules<br />
<a href="https://docs.python.org/3/installing/index.html">https://docs.python.org/3/installing/index.html</a>
</a>

<li>Python: The Documentary | An origin story<br />
<a href="https://www.youtube.com/watch?v=GfH4QL4VqJ0">https://www.youtube.com/watch?v=GfH4QL4VqJ0</a>
</li>

<li>History of Python<br />
<a href="https://en.wikipedia.org/wiki/History_of_Python">https://en.wikipedia.org/wiki/History_of_Python</a>
</li>

<li>History of Python<br />
<a href="https://www.geeksforgeeks.org/python/history-of-python/">https://www.geeksforgeeks.org/python/history-of-python/</a>
</li>

<li>IPython: jedno z nejpropracovanějších interaktivních prostředí pro práci s&nbsp;Pythonem<br />
<a href="https://www.root.cz/clanky/ipython-jedno-z-nejpropracova-nejsich-interaktivnich-prostredi-pro-praci-s-pythonem/">https://www.root.cz/clanky/ipython-jedno-z-nejpropracova-nejsich-interaktivnich-prostredi-pro-praci-s-pythonem/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

