<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<pre>
#!/usr/bin/python
# vim: set fileencoding=utf-8

from libcst import parse_module, CSTVisitor


class Visitor(CSTVisitor):
    def __init__(self):
        self.nest_level = 0

    def on_visit(self, node):
        indent = " " * self.nest_level * 2
        print(indent, node.__class__.__name__)
        self.nest_level += 1
        return True

    def on_leave(self, node):
        self.nest_level -= 1


    expression = "1 + 2 * 3 - 4 / 5"

parsed = parse_module(expression)
visitor = Visitor()
parsed.visit(visitor)
</pre>

<pre>
 Module
   SimpleStatementLine
     Expr
       BinaryOperation
         BinaryOperation
           Integer
           Add
             SimpleWhitespace
             SimpleWhitespace
           BinaryOperation
             Integer
             Multiply
               SimpleWhitespace
               SimpleWhitespace
             Integer
         Subtract
           SimpleWhitespace
           SimpleWhitespace
         BinaryOperation
           Integer
           Divide
             SimpleWhitespace
             SimpleWhitespace
           Integer
     TrailingWhitespace
       SimpleWhitespace
       Newline
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
#!/usr/bin/python
# vim: set fileencoding=utf-8

from libcst import parse_module, CSTVisitor


class Visitor(CSTVisitor):
    def __init__(self):
        self.nest_level = 0

    def on_visit(self, node):
        indent = " " * self.nest_level * 2
        print(indent, node.__class__.__name__)
        self.nest_level += 1
        return True

    def on_leave(self, node):
        self.nest_level -= 1

    def on_visit_attribute(self, node, attribute):
        indent = " " * (self.nest_level + 1) * 2
        print(indent, "-> attribute", attribute)

    def on_leave_attribute(self, node, attribute):
        pass


expression = "1 + 2 * 3 - 4 / 5"

parsed = parse_module(expression)
visitor = Visitor()
parsed.visit(visitor)
</pre>

<pre>
 Module
     -> attribute header
     -> attribute body
   SimpleStatementLine
       -> attribute leading_lines
       -> attribute body
     Expr
         -> attribute value
       BinaryOperation
           -> attribute lpar
           -> attribute left
         BinaryOperation
             -> attribute lpar
             -> attribute left
           Integer
               -> attribute lpar
               -> attribute rpar
             -> attribute operator
           Add
               -> attribute whitespace_before
             SimpleWhitespace
               -> attribute whitespace_after
             SimpleWhitespace
             -> attribute right
           BinaryOperation
               -> attribute lpar
               -> attribute left
             Integer
                 -> attribute lpar
                 -> attribute rpar
               -> attribute operator
             Multiply
                 -> attribute whitespace_before
               SimpleWhitespace
                 -> attribute whitespace_after
               SimpleWhitespace
               -> attribute right
             Integer
                 -> attribute lpar
                 -> attribute rpar
               -> attribute rpar
             -> attribute rpar
           -> attribute operator
         Subtract
             -> attribute whitespace_before
           SimpleWhitespace
             -> attribute whitespace_after
           SimpleWhitespace
           -> attribute right
         BinaryOperation
             -> attribute lpar
             -> attribute left
           Integer
               -> attribute lpar
               -> attribute rpar
             -> attribute operator
           Divide
               -> attribute whitespace_before
             SimpleWhitespace
               -> attribute whitespace_after
             SimpleWhitespace
             -> attribute right
           Integer
               -> attribute lpar
               -> attribute rpar
             -> attribute rpar
           -> attribute rpar
         -> attribute semicolon
       -> attribute trailing_whitespace
     TrailingWhitespace
         -> attribute whitespace
       SimpleWhitespace
         -> attribute comment
         -> attribute newline
       Newline
     -> attribute footer
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
#!/usr/bin/python
# vim: set fileencoding=utf-8

from libcst import parse_module, CSTVisitor


class Visitor(CSTVisitor):
    def __init__(self):
        self.nest_level = 0

    def on_visit(self, node):
        indent = " " * self.nest_level * 2
        print(indent, node.__class__.__name__)
        self.nest_level += 1
        return True

    def on_leave(self, node):
        self.nest_level -= 1

    def on_visit_attribute(self, node, attribute):
        indent = " " * (self.nest_level + 1) * 2
        print(indent, "-> attribute", attribute)

    def on_leave_attribute(self, node, attribute):
        pass


expression = "1 + 2 * 3 - 4 / 5"

parsed = parse_module(expression)
visitor = Visitor()
parsed.visit(visitor)

print()
print("-" * 60)
print(parsed.code)
</pre>

<pre>
 Module
     -> attribute header
     -> attribute body
   SimpleStatementLine
       -> attribute leading_lines
       -> attribute body
     Expr
         -> attribute value
       BinaryOperation
           -> attribute lpar
           -> attribute left
         BinaryOperation
             -> attribute lpar
             -> attribute left
           Integer
               -> attribute lpar
               -> attribute rpar
             -> attribute operator
           Add
               -> attribute whitespace_before
             SimpleWhitespace
               -> attribute whitespace_after
             SimpleWhitespace
             -> attribute right
           BinaryOperation
               -> attribute lpar
               -> attribute left
             Integer
                 -> attribute lpar
                 -> attribute rpar
               -> attribute operator
             Multiply
                 -> attribute whitespace_before
               SimpleWhitespace
                 -> attribute whitespace_after
               SimpleWhitespace
               -> attribute right
             Integer
                 -> attribute lpar
                 -> attribute rpar
               -> attribute rpar
             -> attribute rpar
           -> attribute operator
         Subtract
             -> attribute whitespace_before
           SimpleWhitespace
             -> attribute whitespace_after
           SimpleWhitespace
           -> attribute right
         BinaryOperation
             -> attribute lpar
             -> attribute left
           Integer
               -> attribute lpar
               -> attribute rpar
             -> attribute operator
           Divide
               -> attribute whitespace_before
             SimpleWhitespace
               -> attribute whitespace_after
             SimpleWhitespace
             -> attribute right
           Integer
               -> attribute lpar
               -> attribute rpar
             -> attribute rpar
           -> attribute rpar
         -> attribute semicolon
       -> attribute trailing_whitespace
     TrailingWhitespace
         -> attribute whitespace
       SimpleWhitespace
         -> attribute comment
         -> attribute newline
       Newline
     -> attribute footer

------------------------------------------------------------
1 + 2 * 3 - 4 / 5
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
#!/usr/bin/python
# vim: set fileencoding=utf-8

from libcst import parse_module, CSTTransformer


class Transformer(CSTTransformer):
    def __init__(self):
        self.nest_level = 0

    def on_visit(self, node):
        indent = " " * self.nest_level * 2
        print(indent, node.__class__.__name__)
        self.nest_level += 1
        return True

    def on_leave(self, original_node, updated_node):
        self.nest_level -= 1
        return original_node

    def on_visit_attribute(self, node, attribute):
        indent = " " * (self.nest_level + 1) * 2
        print(indent, "-> attribute", attribute)

    def on_leave_attribute(self, node, attribute):
        pass


expression = "1 + 2 * 3 - 4 / 5"

parsed = parse_module(expression)
transformer = Transformer()
transformed = parsed.visit(transformer)

print()
print("-" * 60)
print(transformed.code)
</pre>

<pre>
 Module
     -> attribute header
     -> attribute body
   SimpleStatementLine
       -> attribute leading_lines
       -> attribute body
     Expr
         -> attribute value
       BinaryOperation
           -> attribute lpar
           -> attribute left
         BinaryOperation
             -> attribute lpar
             -> attribute left
           Integer
               -> attribute lpar
               -> attribute rpar
             -> attribute operator
           Add
               -> attribute whitespace_before
             SimpleWhitespace
               -> attribute whitespace_after
             SimpleWhitespace
             -> attribute right
           BinaryOperation
               -> attribute lpar
               -> attribute left
             Integer
                 -> attribute lpar
                 -> attribute rpar
               -> attribute operator
             Multiply
                 -> attribute whitespace_before
               SimpleWhitespace
                 -> attribute whitespace_after
               SimpleWhitespace
               -> attribute right
             Integer
                 -> attribute lpar
                 -> attribute rpar
               -> attribute rpar
             -> attribute rpar
           -> attribute operator
         Subtract
             -> attribute whitespace_before
           SimpleWhitespace
             -> attribute whitespace_after
           SimpleWhitespace
           -> attribute right
         BinaryOperation
             -> attribute lpar
             -> attribute left
           Integer
               -> attribute lpar
               -> attribute rpar
             -> attribute operator
           Divide
               -> attribute whitespace_before
             SimpleWhitespace
               -> attribute whitespace_after
             SimpleWhitespace
             -> attribute right
           Integer
               -> attribute lpar
               -> attribute rpar
             -> attribute rpar
           -> attribute rpar
         -> attribute semicolon
       -> attribute trailing_whitespace
     TrailingWhitespace
         -> attribute whitespace
       SimpleWhitespace
         -> attribute comment
         -> attribute newline
       Newline
     -> attribute footer

------------------------------------------------------------
1 + 2 * 3 - 4 / 5
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
#!/usr/bin/python
# vim: set fileencoding=utf-8

from libcst import parse_module, CSTTransformer
from libcst import SimpleWhitespace, Name


class Transformer(CSTTransformer):
    def __init__(self):
        pass

    def on_visit(self, node):
        print(node.__class__.__name__)
        return True

    def leave_Name(self, original_node, updated_node):
        if original_node.value == "foo":
            print("Renaming 'foo' to 'bar'")
            return updated_node.with_changes(value="bar")
        return original_node

    def on_visit_attribute(self, node, attribute):
        print("-> attribute", attribute)

    def on_leave_attribute(self, node, attribute):
        pass


expression = "1 + foo * 3 - 4 / foo"

parsed = parse_module(expression)
transformer = Transformer()
transformed = parsed.visit(transformer)

print()
print("-" * 60)
print(parsed.code)
print(transformed.code)
</pre>

<pre>
Module
-> attribute header
-> attribute body
SimpleStatementLine
-> attribute leading_lines
-> attribute body
Expr
-> attribute value
BinaryOperation
-> attribute lpar
-> attribute left
BinaryOperation
-> attribute lpar
-> attribute left
Integer
-> attribute lpar
-> attribute rpar
-> attribute operator
Add
-> attribute whitespace_before
SimpleWhitespace
-> attribute whitespace_after
SimpleWhitespace
-> attribute right
BinaryOperation
-> attribute lpar
-> attribute left
Name
-> attribute lpar
-> attribute rpar
Renaming 'foo' to 'bar'
-> attribute operator
Multiply
-> attribute whitespace_before
SimpleWhitespace
-> attribute whitespace_after
SimpleWhitespace
-> attribute right
Integer
-> attribute lpar
-> attribute rpar
-> attribute rpar
-> attribute rpar
-> attribute operator
Subtract
-> attribute whitespace_before
SimpleWhitespace
-> attribute whitespace_after
SimpleWhitespace
-> attribute right
BinaryOperation
-> attribute lpar
-> attribute left
Integer
-> attribute lpar
-> attribute rpar
-> attribute operator
Divide
-> attribute whitespace_before
SimpleWhitespace
-> attribute whitespace_after
SimpleWhitespace
-> attribute right
Name
-> attribute lpar
-> attribute rpar
Renaming 'foo' to 'bar'
-> attribute rpar
-> attribute rpar
-> attribute semicolon
-> attribute trailing_whitespace
TrailingWhitespace
-> attribute whitespace
SimpleWhitespace
-> attribute comment
-> attribute newline
Newline
-> attribute footer

------------------------------------------------------------
1 + foo * 3 - 4 / foo
1 + bar * 3 - 4 / bar
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
#!/usr/bin/python
# vim: set fileencoding=utf-8

from libcst import parse_module, CSTTransformer
from libcst import SimpleWhitespace, Name
from difflib import unified_diff


class Transformer(CSTTransformer):
    def __init__(self):
        pass

    def on_visit(self, node):
        print(node.__class__.__name__)
        return True

    def leave_Name(self, original_node, updated_node):
        if original_node.value == "foo":
            print("Renaming 'foo' to 'bar'")
            return updated_node.with_changes(value="bar")
        return original_node

    def on_visit_attribute(self, node, attribute):
        print("-> attribute", attribute)

    def on_leave_attribute(self, node, attribute):
        pass


expression = "1 + foo * 3 - 4 / foo\n"

parsed = parse_module(expression)
transformer = Transformer()
transformed = parsed.visit(transformer)

print()
print("-" * 60)
print(parsed.code)
print(transformed.code)

diff = "".join(unified_diff(parsed.code.splitlines(1), transformed.code.splitlines(1)))
print(diff)
</pre>

<pre>
Module
-> attribute header
-> attribute body
SimpleStatementLine
-> attribute leading_lines
-> attribute body
Expr
-> attribute value
BinaryOperation
-> attribute lpar
-> attribute left
BinaryOperation
-> attribute lpar
-> attribute left
Integer
-> attribute lpar
-> attribute rpar
-> attribute operator
Add
-> attribute whitespace_before
SimpleWhitespace
-> attribute whitespace_after
SimpleWhitespace
-> attribute right
BinaryOperation
-> attribute lpar
-> attribute left
Name
-> attribute lpar
-> attribute rpar
Renaming 'foo' to 'bar'
-> attribute operator
Multiply
-> attribute whitespace_before
SimpleWhitespace
-> attribute whitespace_after
SimpleWhitespace
-> attribute right
Integer
-> attribute lpar
-> attribute rpar
-> attribute rpar
-> attribute rpar
-> attribute operator
Subtract
-> attribute whitespace_before
SimpleWhitespace
-> attribute whitespace_after
SimpleWhitespace
-> attribute right
BinaryOperation
-> attribute lpar
-> attribute left
Integer
-> attribute lpar
-> attribute rpar
-> attribute operator
Divide
-> attribute whitespace_before
SimpleWhitespace
-> attribute whitespace_after
SimpleWhitespace
-> attribute right
Name
-> attribute lpar
-> attribute rpar
Renaming 'foo' to 'bar'
-> attribute rpar
-> attribute rpar
-> attribute semicolon
-> attribute trailing_whitespace
TrailingWhitespace
-> attribute whitespace
SimpleWhitespace
-> attribute comment
-> attribute newline
Newline
-> attribute footer

------------------------------------------------------------
1 + foo * 3 - 4 / foo

1 + bar * 3 - 4 / bar

--- 
+++ 
@@ -1 +1 @@
-1 + foo * 3 - 4 / foo
+1 + bar * 3 - 4 / bar
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
#!/usr/bin/python
# vim: set fileencoding=utf-8

from libcst import parse_module, CSTTransformer
from libcst import SimpleWhitespace, Name
from difflib import unified_diff


class SymbolRenamer(CSTTransformer):
    def __init__(self, orig_name, new_name):
        self.orig_name = orig_name
        self.new_name = new_name

    def on_visit(self, node):
        print(node.__class__.__name__)
        return True

    def leave_Name(self, original_node, updated_node):
        if original_node.value == self.orig_name:
            print(f"Renaming '{self.orig_name}' to '{self.new_name}'")
            return updated_node.with_changes(value=self.new_name)
        return original_node

    def on_visit_attribute(self, node, attribute):
        print("-> attribute", attribute)

    def on_leave_attribute(self, node, attribute):
        pass


expression = "1 + foo * 3 - 4 / bar\n"

parsed = parse_module(expression)
transformer = SymbolRenamer("foo", "baz")
transformed = parsed.visit(transformer)

print()
print("-" * 60)
print(parsed.code)
print(transformed.code)

diff = "".join(unified_diff(parsed.code.splitlines(1), transformed.code.splitlines(1)))
print(diff)
</pre>

<pre>
Module
-> attribute header
-> attribute body
SimpleStatementLine
-> attribute leading_lines
-> attribute body
Expr
-> attribute value
BinaryOperation
-> attribute lpar
-> attribute left
BinaryOperation
-> attribute lpar
-> attribute left
Integer
-> attribute lpar
-> attribute rpar
-> attribute operator
Add
-> attribute whitespace_before
SimpleWhitespace
-> attribute whitespace_after
SimpleWhitespace
-> attribute right
BinaryOperation
-> attribute lpar
-> attribute left
Name
-> attribute lpar
-> attribute rpar
Renaming 'foo' to 'baz'
-> attribute operator
Multiply
-> attribute whitespace_before
SimpleWhitespace
-> attribute whitespace_after
SimpleWhitespace
-> attribute right
Integer
-> attribute lpar
-> attribute rpar
-> attribute rpar
-> attribute rpar
-> attribute operator
Subtract
-> attribute whitespace_before
SimpleWhitespace
-> attribute whitespace_after
SimpleWhitespace
-> attribute right
BinaryOperation
-> attribute lpar
-> attribute left
Integer
-> attribute lpar
-> attribute rpar
-> attribute operator
Divide
-> attribute whitespace_before
SimpleWhitespace
-> attribute whitespace_after
SimpleWhitespace
-> attribute right
Name
-> attribute lpar
-> attribute rpar
-> attribute rpar
-> attribute rpar
-> attribute semicolon
-> attribute trailing_whitespace
TrailingWhitespace
-> attribute whitespace
SimpleWhitespace
-> attribute comment
-> attribute newline
Newline
-> attribute footer

------------------------------------------------------------
1 + foo * 3 - 4 / bar

1 + baz * 3 - 4 / bar

--- 
+++ 
@@ -1 +1 @@
-1 + foo * 3 - 4 / bar
+1 + baz * 3 - 4 / bar
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
#!/usr/bin/python
# vim: set fileencoding=utf-8

from libcst import parse_module, CSTTransformer
from libcst import SimpleWhitespace, Name
from libcst import Multiply, Divide
from difflib import unified_diff


class BinaryOpReplacer(CSTTransformer):
    def __init__(self):
        pass

    def on_visit(self, node):
        print(node.__class__.__name__)
        return True

    def leave_Multiply(self, original_node, updated_node):
        print("Replacing multiply by divide")
        return Divide()

    def leave_Divide(self, original_node, updated_node):
        print("Replacing divide by multiply")
        return Multiply()

    def on_visit_attribute(self, node, attribute):
        print("-> attribute", attribute)

    def on_leave_attribute(self, node, attribute):
        pass


expression = "1 + 2 * 3 - 4 / 5\n"

parsed = parse_module(expression)
transformer = BinaryOpReplacer()
transformed = parsed.visit(transformer)

print()
print("-" * 60)
print(parsed.code)
print(transformed.code)

diff = "".join(unified_diff(parsed.code.splitlines(1), transformed.code.splitlines(1)))
print(diff)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů
určených pro programovací jazyk Python 3 a knihovnu <i>libcst</i> byly
uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>parse_constant_1.py</td><td>parsing kódu obsahujícího celočíselnou konstantu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_constant_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_constant_1.py</a></td></tr>
<tr><td> 2</td><td>parse_constant_2.py</td><td>parsing kódu obsahujícího celočíselnou konstantu s&nbsp;podtržítkem ve funkci oddělovače řádů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_constant_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_constant_2.py</a></td></tr>
<tr><td> 3</td><td>parse_constant_3.py</td><td>parsing kódu obsahujícího logickou konstantu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_constant_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_constant_3.py</a></td></tr>
<tr><td> 4</td><td>parse_constant_4.py</td><td>parsing kódu obsahujícího řetězcový literál</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_constant_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_constant_4.py</a></td></tr>
<tr><td> 5</td><td>parse_constant_5.py</td><td>parsing kódu obsahujícího komplexní číslo</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_constant_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_constant_5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>parse_expression_1.py</td><td>parsing jednoduchého aritmetického výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_expression_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_expression_1.py</a></td></tr>
<tr><td> 7</td><td>parse_expression_2.py</td><td>parsing jednoduchého aritmetického výrazu s&nbsp;mezerami mezi operandy a operátorem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_expression_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_expression_2.py</a></td></tr>
<tr><td> 8</td><td>parse_expression_3.py</td><td>parsing výrazu, před nímž je zapsána mezera</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_expression_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_expression_3.py</a></td></tr>
<tr><td> 9</td><td>parse_expression_4.py</td><td>parsing složitějšího aritmetického výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_expression_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_expression_4.py</a></td></tr>
<tr><td>10</td><td>parse_expression_5.py</td><td>výraz obalený závorkami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_expression_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_expression_5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>parse_module_1.py</td><td>parsing celého modulu, který obsahuje jediný výraz, první příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_module_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_module_1.py</a></td></tr>
<tr><td>12</td><td>parse_module_2.py</td><td>parsing celého modulu, který obsahuje jediný výraz, druhý příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_module_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_module_2.py</a></td></tr>
<tr><td>13</td><td>parse_module_3.py</td><td>parsing celého modulu, který obsahuje jediný výraz, třetí příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_module_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_module_3.py</a></td></tr>
<tr><td>14</td><td>parse_module_4.py</td><td>parsing celého modulu s&nbsp;definicí funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_module_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/parse_module_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>traverse_code_1.py</td><td>průchod CST stromem, nejjednodušší řešení</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/traverse_code_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/traverse_code_1.py</a></td></tr>
<tr><td>16</td><td>traverse_code_2.py</td><td>průchod CST stromem, vizualizace zanoření uzlů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/traverse_code_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/traverse_code_2.py</a></td></tr>
<tr><td>17</td><td>traverse_code_3.py</td><td>průchod CST stromem, test na typ uzlů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/traverse_code_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/traverse_code_3.py</a></td></tr>
<tr><td>18</td><td>traverse_code_4.py</td><td>průchod CST stromem, filtrace uzlů podle jejich typu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/traverse_code_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/traverse_code_4.py</a></td></tr>
<tr><td>19</td><td>traverse_code_5.py</td><td>průchod CST stromem, ještě výraznější filtrace uzlů podle jejich typu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/traverse_code_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/traverse_code_5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>20</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/</a></td></tr>
<tr><td>21</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/</a></td></tr>
<tr><td>22</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cst/">https://github.com/tisnik/most-popular-python-libs/blob/master/cst/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Lexikální a syntaktická analýza zdrojových kódů programovacího jazyka Python<br />
<a href="https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-programovaciho-jazyka-python/">https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-programovaciho-jazyka-python/</a>
</li>

<li>Lexikální a syntaktická analýza zdrojových kódů programovacího jazyka Python (2.část)<br />
<a href="https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-programovaciho-jazyka-python-2-cast/">https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-programovaciho-jazyka-python-2-cast/</a>
</li>

<li>Lexikální a syntaktická analýza zdrojových kódů programovacího jazyka Python (3.část)<br />
<a href="https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-programovaciho-jazyka-python-3-cast/">https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-programovaciho-jazyka-python-3-cast/</a>
</li>

<li>Lexikální a syntaktická analýza zdrojových kódů jazyka Python (4.část)<br />
<a href="https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-jazyka-python-4-cast/">https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-jazyka-python-4-cast/</a>
</li>

<li>LibCST &ndash; dokumentace<br />
<a href="https://libcst.readthedocs.io/en/latest/index.html">https://libcst.readthedocs.io/en/latest/index.html</a>
</li>

<li>libCST na PyPi<br />
<a href="https://pypi.org/project/libcst/">https://pypi.org/project/libcst/</a>
</li>

<li>libCST na GitHubu<br />
<a href="https://github.com/Instagram/LibCST">https://github.com/Instagram/LibCST</a>
</li>

<li>Inside The Python Virtual Machine<br />
<a href="https://leanpub.com/insidethepythonvirtualmachine">https://leanpub.com/insidethepythonvirtualmachine</a>
</li>

<li>module-py_compile<br />
<a href="https://docs.python.org/3.8/library/py_compile.html">https://docs.python.org/3.8/library/py_compile.html</a>
</li>

<li>Given a python .pyc file, is there a tool that let me view the bytecode?<br />
<a href="https://stackoverflow.com/questions/11141387/given-a-python-pyc-file-is-there-a-tool-that-let-me-view-the-bytecode">https://stackoverflow.com/questions/11141387/given-a-python-pyc-file-is-there-a-tool-that-let-me-view-the-bytecode</a>
</li>

<li>The structure of .pyc files<br />
<a href="https://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html">https://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html</a>
</li>

<li>Python Bytecode: Fun With Dis<br />
<a href="http://akaptur.github.io/blog/2013/08/14/python-bytecode-fun-with-dis/">http://akaptur.github.io/blog/2013/08/14/python-bytecode-fun-with-dis/</a>
</li>

<li>Python's Innards: Hello, ceval.c!<br />
<a href="http://tech.blog.aknin.name/category/my-projects/pythons-innards/">http://tech.blog.aknin.name/category/my-projects/pythons-innards/</a>
</li>

<li>Byterun<br />
<a href="https://github.com/nedbat/byterun">https://github.com/nedbat/byterun</a>
</li>

<li>Python Byte Code Instructions<br />
<a href="http://document.ihg.uni-duisburg.de/Documentation/Python/lib/node56.html">http://document.ihg.uni-duisburg.de/Documentation/Python/lib/node56.html</a>
</li>

<li>Python Byte Code Instructions<br />
<a href="https://docs.python.org/3.2/library/dis.html#python-bytecode-instructions">https://docs.python.org/3.2/library/dis.html#python-bytecode-instructions</a>
</li>

<li>dis - Python module<br />
<a href="https://docs.python.org/2/library/dis.html">https://docs.python.org/2/library/dis.html</a>
</li>

<li>Comparison of Python virtual machines<br />
<a href="http://polishlinux.org/apps/cli/comparison-of-python-virtual-machines/">http://polishlinux.org/apps/cli/comparison-of-python-virtual-machines/</a>
</li>

<li>O-code<br />
<a href="http://en.wikipedia.org/wiki/O-code_machine">http://en.wikipedia.org/wiki/O-code_machine</a>
</li>

<li>Abstract syntax tree<br />
<a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">https://en.wikipedia.org/wiki/Abstract_syntax_tree</a>
</li>

<li>Lexical analysis<br />
<a href="https://en.wikipedia.org/wiki/Lexical_analysis">https://en.wikipedia.org/wiki/Lexical_analysis</a>
</li>

<li>Parser<br />
<a href="https://en.wikipedia.org/wiki/Parsing#Parser">https://en.wikipedia.org/wiki/Parsing#Parser</a>
</li>

<li>Parse tree<br />
<a href="https://en.wikipedia.org/wiki/Parse_tree">https://en.wikipedia.org/wiki/Parse_tree</a>
</li>

<li>Derivační strom<br />
<a href="https://cs.wikipedia.org/wiki/Deriva%C4%8Dn%C3%AD_strom">https://cs.wikipedia.org/wiki/Deriva%C4%8Dn%C3%AD_strom</a>
</li>

<li>Python doc: ast — Abstract Syntax Trees<br />
<a href="https://docs.python.org/3/library/ast.html">https://docs.python.org/3/library/ast.html</a>
</li>

<li>Python doc: tokenize — Tokenizer for Python source<br />
<a href="https://docs.python.org/3/library/tokenize.html">https://docs.python.org/3/library/tokenize.html</a>
</li>

<li>SymbolTable<br />
<a href="https://docs.python.org/3.8/library/symtable.html">https://docs.python.org/3.8/library/symtable.html</a>
</li>

<li>5 Amazing Python AST Module Examples<br />
<a href="https://www.pythonpool.com/python-ast/">https://www.pythonpool.com/python-ast/</a>
</li>

<li>Intro to Python ast Module<br />
<a href="https://medium.com/@wshanshan/intro-to-python-ast-module-bbd22cd505f7">https://medium.com/@wshanshan/intro-to-python-ast-module-bbd22cd505f7</a>
</li>

<li>Golang AST Package<br />
<a href="https://golangdocs.com/golang-ast-package">https://golangdocs.com/golang-ast-package</a>
</li>

<li>AP8, IN8 Regulární jazyky<br />
<a href="http://statnice.dqd.cz/home:inf:ap8">http://statnice.dqd.cz/home:inf:ap8</a>
</li>

<li>AP9, IN9 Konečné automaty<br />
<a href="http://statnice.dqd.cz/home:inf:ap9">http://statnice.dqd.cz/home:inf:ap9</a>
</li>

<li>AP10, IN10 Bezkontextové jazyky<br />
<a href="http://statnice.dqd.cz/home:inf:ap10">http://statnice.dqd.cz/home:inf:ap10</a>
</li>

<li>AP11, IN11 Zásobníkové automaty, Syntaktická analýza<br />
<a href="http://statnice.dqd.cz/home:inf:ap11">http://statnice.dqd.cz/home:inf:ap11</a>
</li>

<li>Introduction to YACC<br />
<a href="https://www.geeksforgeeks.org/introduction-to-yacc/">https://www.geeksforgeeks.org/introduction-to-yacc/</a>
</li>

<li>Introduction of Lexical Analysis<br />
<a href="https://www.geeksforgeeks.org/introduction-of-lexical-analysis/?ref=lbp">https://www.geeksforgeeks.org/introduction-of-lexical-analysis/?ref=lbp</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Pygments - Python syntax highlighter<br />
<a href="http://pygments.org/">http://pygments.org/</a>
</li>

<li>Pygments (dokumentace)<br />
<a href="http://pygments.org/docs/">http://pygments.org/docs/</a>
</li>

<li>Write your own filter<br />
<a href="http://pygments.org/docs/filterdevelopment/">http://pygments.org/docs/filterdevelopment/</a>
</li>

<li>Write your own lexer<br />
<a href="http://pygments.org/docs/lexerdevelopment/">http://pygments.org/docs/lexerdevelopment/</a>
</li>

<li>Write your own formatter<br />
<a href="http://pygments.org/docs/formatterdevelopment/">http://pygments.org/docs/formatterdevelopment/</a>
</li>

<li>Jazyky podporované knihovnou Pygments<br />
<a href="http://pygments.org/languages/">http://pygments.org/languages/</a>
</li>

<li>Pygments FAQ<br />
<a href="http://pygments.org/faq/">http://pygments.org/faq/</a>
</li>

<li>Compiler Construction/Lexical analysis<br />
<a href="https://en.wikibooks.org/wiki/Compiler_Construction/Lexical_analysis">https://en.wikibooks.org/wiki/Compiler_Construction/Lexical_analysis</a>
</li>

<li>Compiler Design - Lexical Analysis<br />
<a href="https://www.tutorialspoint.com/compiler_design/compiler_design_lexical_analysis.htm">https://www.tutorialspoint.com/compiler_design/compiler_design_lexical_analysis.htm</a>
</li>

<li>Lexical Analysis - An Intro<br />
<a href="https://www.scribd.com/document/383765692/Lexical-Analysis">https://www.scribd.com/document/383765692/Lexical-Analysis</a>
</li>

<li>Python AST Visualizer<br />
<a href="https://github.com/pombredanne/python-ast-visualizer">https://github.com/pombredanne/python-ast-visualizer</a>
</li>

<li>What is an Abstract Syntax Tree<br />
<a href="https://blog.bitsrc.io/what-is-an-abstract-syntax-tree-7502b71bde27">https://blog.bitsrc.io/what-is-an-abstract-syntax-tree-7502b71bde27</a>
</li>

<li>Why is AST so important<br />
<a href="https://medium.com/@obernardovieira/why-is-ast-so-important-b1e7d6c29260">https://medium.com/@obernardovieira/why-is-ast-so-important-b1e7d6c29260</a>
</li>

<li>Emily Morehouse-Valcarcel - The AST and Me - PyCon 2018<br />
<a href="https://www.youtube.com/watch?v=XhWvz4dK4ng">https://www.youtube.com/watch?v=XhWvz4dK4ng</a>
</li>

<li>Python AST Parsing and Custom Linting<br />
<a href="https://www.youtube.com/watch?v=OjPT15y2EpE">https://www.youtube.com/watch?v=OjPT15y2EpE</a>
</li>

<li>Chase Stevens - Exploring the Python AST Ecosystem<br />
<a href="https://www.youtube.com/watch?v=Yq3wTWkoaYY">https://www.youtube.com/watch?v=Yq3wTWkoaYY</a>
</li>

<li>Full Grammar specification<br />
<a href="https://docs.python.org/3/reference/grammar.html">https://docs.python.org/3/reference/grammar.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>
