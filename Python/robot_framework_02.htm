<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Univerzální testovací nástroj Robot Framework a BDD testy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Univerzální testovací nástroj Robot Framework a BDD testy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhém článku o nástroji nazvaném Robot Framework si ukážeme některé další možnosti, které lze využít při psaní testovacích scénářů. Zmíníme se mj.&nbsp;i o použití Robot Frameworku při psaní BDD testů, pro něž se běžně používá jazyk Gherkin.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Univerzální testovací nástroj Robot Framework a BDD testy</a></p>
<p><a href="#k02">*** 2. Zápis testovacích scénářů</a></p>
<p><a href="#k03">*** 3. Atributy objektů použitých pro implementaci kroků testů</a></p>
<p><a href="#k04">*** 4. Platnost objektů vytvářených nástrojem Robot Framework</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. Jazyk Gherkin</a></p>
<p><a href="#k13">*** 13. Využití Robot Frameworku ve funkci nadmnožiny jazyka Gherkin</a></p>
<p><a href="#k14">*** 14. BDD testy řízené tabulkami</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Univerzální testovací nástroj Robot Framework a BDD testy</h2>

<p><a href="">Na úvodní článek</a>, v&nbsp;němž jsme se seznámili s&nbsp;některými základními koncepty, na nichž je postaven nástroj <i>Robot Framework</i>, dnes navážeme. Představíme si některé další možnosti, které je možné využít při psaní testovacích scénářů. Zmíníme se mj.&nbsp;i o použití Robot Frameworku při psaní BDD testů, pro něž se běžně používá doménově specifický jazyk (DSL) nazvaný Gherkin. Implementaci jednotlivých kroků testů postavíme opět na <a href="">programovacím jazyku Python</a>, protože se jedná o primární jazyk, pro nějž je Robot Framework určen.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Zápis testovacích scénářů</h2>

<p>Připomeňme si, jak vypadal poslední (funkční) test, s&nbsp;nímž jsme se seznámili v&nbsp;samotném závěru předchozího článku. Jednalo se o velmi jednoduchý test, který zjišťoval, zda se provádí korektně operace součtu v&nbsp;programovacím jazyku Python. Jedná se tedy o pouhý demonstrační příklad zvolený z&nbsp;toho důvodu, že je dostatečně jednoduchý a přehledný. Jednotlivé kroky testů, z&nbsp;nichž se skládá testovací scénář, jsou zapsány pomocí klíčových slov (<i>keywords</i>) a jejich parametrů, přičemž klíčová slova i jednotlivé parametry od sebe musí být odděleny minimálně dvěma mezerami (protože samotné klíčové slovo je obecně tvořeno několika slovy oddělenými od sebe jedinou mezerou). Samotný testovací scénář byl zapsán následujícím způsobem:</p>

<pre>
*** Settings ***
Library         Test16.py
&nbsp;
*** Test Cases ***
Adder #1
    Add  1  2
    Result should be  3
&nbsp;
Adder #2
    Add  0  0
    Result should be  0
&nbsp;
Adder #3
    Add  1  -1
    Result should be  0
</pre>

<p>Alternativně je možné použít odlišný způsob zápisu, v&nbsp;němž se explicitně oddělují jednotlivé sloupce tabulky pomocí znaku &bdquo;|&ldquo;. Právě na tomto zápisu je patrné oddělení klíčových slov od jejich parametrů:</p>

<pre>
| *** Settings ***   |                  |   |
| Library            | Test16.py        |   |
|                    |                  |   |
| *** Test Cases *** |                  |   |
| Adder #1           |                  |   |
|                    | Add              | 1 | 2
|                    | Result should be | 3 |
|                    |                  |   |
| Adder #2           |                  |   |
|                    | Add              | 0 | 0
|                    | Result should be | 0 |
|                    |                  |   |
| Adder #3           |                  |   |
|                    | Add              | 1 | -1
|                    | Result should be | 0 |
</pre>

<p>Ve skutečnosti je však možné</p>

<pre>
| *** Settings ***   |                  |   |
| Library            | Test16.py        |   |
&nbsp;
| *** Test Cases *** |                  |   |
| Adder #1           |                  |   |
|                    | Add              | 1 | 2
|                    | Result should be | 3 |
|                    | Add              | 2 | 3
|                    | Result should be | 5 |
|                    | Add              | 4 | 5
|                    | Result should be | 9 |
&nbsp;
| Adder #2           |                  |   |
|                    | Add              | 0 | 0
|                    | Result should be | 0 |
&nbsp;
| Adder #3           |                  |   |
|                    | Add              | 1 | -1
|                    | Result should be | 0 |
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Atributy objektů použitých pro implementaci kroků testů</h2>

<p>Jednotlivé kroky testů, které jsou ve scénáři reprezentovány klíčovými slovy &bdquo;Add&ldquo; a &bdquo;Result should be&ldquo;, byly deklarovány jako metody třídy <strong>Test16</strong>. Jméno této třídy musí odpovídat jménu souboru, v&nbsp;němž je zdrojový kód třídy uložen; pokud by tomu tak nebylo, je nutné změnit parametr <strong>Library</strong> tak, aby obsahoval jak jméno souboru, tak i jméno třídy. Samotná implementace této třídy může vypadat takto:</p>

<pre>
class <strong>Test16</strong>:
    def <strong>__init__</strong>(self):
        print("INIT")
&nbsp;
    def <strong>add</strong>(self, x, y):
        self.result = int(x) + int(y)
&nbsp;
    def <strong>result_should_be</strong>(self, expected):
        assert self.result == int(expected), "{} != {}".format(self.result, expected)
</pre>

<p>Tento test si připomínáme z&nbsp;jednoho důvodu &ndash; můžeme si na jeho příkladu vysvětlit, jakým způsobem se pracuje s&nbsp;atributy objektů použitých pro implementaci jednotlivých kroků testů. Náš test pracuje s&nbsp;jediným atributem nazvaným <strong>result</strong>, který reprezentuje stav objektu typu <strong>Test16</strong>. Tento atribut je nastavován v&nbsp;metodě <strong>add</strong> a tedy v&nbsp;klíčovém slově &bdquo;Add&ldquo;; přistupujeme k&nbsp;němu v&nbsp;metodě <strong>result_should_be</strong>, tedy na straně testů v&nbsp;klíčovém slově &bdquo;Result should be&ldquo;. Bude nám tedy dostačovat, aby byl atribut platný mezi zavoláním těchto dvou metod v&nbsp;rámci jednoho test case.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Platnost objektů vytvářených nástrojem Robot Framework</h2>

<p></p>

<pre>
| *** Settings ***   |                             |   |
| Library            | Accumulator1.py             |   |
|                    |                             |   |
| *** Test Cases *** |                             |   |
| Initial value      |                             |   |
|                    | Accumulator value should be | 0 |
|                    |                             |   |
| Adder #1           | Add value                   | 1 |
|                    | Accumulator value should be | 1 |
|                    | Add value                   | 2 |
|                    | Accumulator value should be | 3 |
</pre>

<pre>
class Accumulator1:
    def __init__(self):
        print("INIT")
        self.result = 0

    def add_value(self, value):
        self.result += int(value)

    def accumulator_value_should_be(self, expected):
        assert self.result == int(expected), "{} != {}".format(self.result, expected)
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
| *** Settings ***   |                             |   |
| Library            | Accumulator2.py             |   |
|                    |                             |   |
| *** Test Cases *** |                             |   |
| Initial value      |                             |   |
|                    | Accumulator value should be | 0 |
|                    |                             |   |
| Adder #1           | Add value                   | 1 |
|                    | Accumulator value should be | 1 |
|                    |                             |   |
| Adder #2           | Add value                   | 2 |
|                    | Accumulator value should be | 3 |
</pre>

<pre>
class Accumulator2:
    def __init__(self):
        print("INIT")
        self.result = 0

    def add_value(self, value):
        self.result += int(value)

    def accumulator_value_should_be(self, expected):
        assert self.result == int(expected), "{} != {}".format(self.result, expected)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>


<pre>
| *** Settings ***   |                             |   |
| Library            | Accumulator3.py             |   |
|                    |                             |   |
| *** Test Cases *** |                             |   |
| Initial value      |                             |   |
|                    | Accumulator value should be | 0 |
|                    |                             |   |
| Adder #1           | Add value                   | 1 |
|                    | Accumulator value should be | 1 |
|                    |                             |   |
| Adder #2           | Add value                   | 2 |
|                    | Accumulator value should be | 3 |
</pre>

<pre>
class Accumulator3:

    ROBOT_LIBRARY_SCOPE = 'TEST SUITE'

    def __init__(self):
        print("INIT")
        self.result = 0

    def add_value(self, value):
        self.result += int(value)

    def accumulator_value_should_be(self, expected):
        assert self.result == int(expected), "{} != {}".format(self.result, expected)
</pre>


<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
| *** Settings ***   |                             |   |
| Library            | Accumulator4.py             |   |
|                    |                             |   |
| *** Test Cases *** |                             |   |
| Initial value      |                             |   |
|                    | Accumulator value should be | 0 |
|                    |                             |   |
| Adder #1           | Add value                   | 1 |
|                    | Accumulator value should be | 1 |
|                    |                             |   |
| Adder #2           | Add value                   | 2 |
|                    | Accumulator value should be | 3 |
</pre>

<pre>
class Accumulator4:

    ROBOT_LIBRARY_SCOPE = 'GLOBAL'

    def __init__(self):
        print("INIT")
        self.result = 0

    def add_value(self, value):
        self.result += int(value)

    def accumulator_value_should_be(self, expected):
        assert self.result == int(expected), "{} != {}".format(self.result, expected)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
| *** Settings ***   |                             |   |
| Library            | Accumulator5.py             |   |
| Test setup         | Setup method                | 0 |
| Test teardown      | Teardown method             |   |
|                    |                             |   |
| *** Test Cases *** |                             |   |
| Initial value      |                             |   |
|                    | Accumulator value should be | 0 |
|                    |                             |   |
| Adder #1           | Add value                   | 1 |
|                    | Accumulator value should be | 1 |
|                    |                             |   |
| Adder #2           | Add value                   | 2 |
|                    | Accumulator value should be | 3 |
</pre>

<pre>
class Accumulator5:

    ROBOT_LIBRARY_SCOPE = 'GLOBAL'

    def __init__(self):
        print("INIT")
        self.result = None

    def setup_method(self, value):
        self.result = int(value)

    def teardown_method(self):
        pass

    def add_value(self, value):
        self.result += int(value)

    def accumulator_value_should_be(self, expected):
        assert self.result == int(expected), "{} != {}".format(self.result, expected)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
| *** Settings ***   |                             |      |
| Library            | Accumulator6.py             |      |
| Test setup         | Setup method                | 0    |
| Test teardown      | Teardown method             |      |
|                    |                             |      |
| *** Test Cases *** |                             |      |
| Initial value      |                             |      |
|                    | Accumulator value should be | 0    |
|                    |                             |      |
| Adder #1           | Add value                   | 1    |
|                    | Accumulator value should be | 1    |
|                    |                             |      |
| Adder #2           | [Setup]                     | NONE |
|                    | Add value                   | 2    |
|                    | Accumulator value should be | 3    |
|                    |                             |      |
| Adder #3           |                             |      |
|                    | Add value                   | 2    |
|                    | Accumulator value should be | 5    |
</pre>

<pre>
class Accumulator6:

    ROBOT_LIBRARY_SCOPE = 'GLOBAL'

    def __init__(self):
        print("INIT")
        self.result = None

    def setup_method(self, value):
        self.result = int(value)

    def teardown_method(self):
        pass

    def add_value(self, value):
        self.result += int(value)

    def accumulator_value_should_be(self, expected):
        assert self.result == int(expected), "{} != {}".format(self.result, expected)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
| *** Settings ***   |                             |             |             |
| Library            | Accumulator6.py             |             |             |
| Test template      | Accumulate                  |             |             |
| Test setup         | Setup method                | 0           |             |
| Test teardown      | Teardown method             |             |             |
|                    |                             |             |             |
| *** Test Cases *** | Value                       | Expected    |             |
| Test1              | 0                           | 0           |             |
|                    | 1                           | 1           |             |
|                    | 10                          | 11          |             |
|                    | -10                         | 1           |             |
|                    | 1                           | 2           |             |
|                    | 1                           | 3           |             |
|                    |                             |             |             |
| *** Keywords ***   |                             |             |             |
| Accumulate         |                             |             |             |
|                    | [Arguments]                 | ${value}    | ${expected} |
|                    | Add value                   | ${value}    |             |
|                    | Accumulator value should be | ${expected} |             |
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
*** Settings ***
Library             Accumulator6.py
Test template       Accumulate
Test setup          Setup method  0
Test teardown       Teardown method

*** Test Cases ***  Value      Expected
Test1               0          0
                    1          1
                    10         11
                    -10        1
                    1          2
                    1          3

*** Keywords ***
Accumulate
                    [Arguments]                  ${value}     ${expected}
                    Add value                    ${value}
                    Accumulator value should be  ${expected}
</pre>


<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p>Testovací scénář vytvořený v&nbsp;Gherkinu může vypadat následovně:</p>

<a href="https://www.root.cz/obrazek/324266/"><img src="https://i.iinfo.cz/images/634/clojure-cucumber-1-prev.png" class="image-324266" alt="&#160;" width="370" height="198" /></a>
<p><i>Obrázek 5: Ukázka scénářů napsaných v&nbsp;jazyce Gherkin.</i></p>

<p>Zvýrazněna jsou klíčová slova uvozující jednotlivé kroky testu. Ostatní
slova a číslice ve větách jsou buď pevně daná (svázaná s&nbsp;konkrétním
krokem), nebo se jedná o proměnné. Ve scénáři je i tabulka, jejíž obsah se
řádek po řádku postupně stává obsahem jednotlivých kroků testu (obsahem tabulky
se nahrazují slova umístěná do ostrých závorek).</p>

<p><div class="rs-tip-major">Poznámka: jazyk Gherkin existuje v&nbsp;různých
jazykových mutacích, my se však budeme držet jeho originální anglické
varianty.</div></p>

<p>Jednotlivé kroky testu napsané v&nbsp;jazyce Gherkin je samozřejmě nutné
nějakým způsobem implementovat. A přesně pro tento účel použijeme výše zmíněný
framework <i>godog</i>, který dokáže přečíst skript (přesněji řečeno
<i>testovací scénář</i>) napsaný v&nbsp;Gherkinu a navrhnout na jeho základě
strukturu implementace testů pro jazyk Go. Následně <i>godog</i> dokáže testy
spustit a vyhodnotit jejich výsledky. Alternativně je možné BDD testy zahrnout
do testů jednotkových a spouštět je jediným příkazem.</p>

<p>S&nbsp;jazykem Gherkin a se způsobem jeho použití jsme se již na stránkách
Rootu několikrát setkali, protože jsme si ukázali implementaci Gherkinu jak pro
programovací jazyk <a
href="https://www.root.cz/vyhledavani/?qs=clojure">Clojure</a>, tak i pro <a
href="https://www.root.cz/n/python/">Python</a>. Podrobnější informace o těchto
implementacích naleznete v&nbsp;následujících článcích:</p>

<ol>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure (2)<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (druhá část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (závěrečná část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/</a>
</li>

</ol>

<pre>
*** Settings ***
Library             Accumulator6.py
Test setup          Setup method  0
Test teardown       Teardown method

*** Test Cases ***
Accumulate
    Given accumulator has been zeroed
    When I add "1" to accumulator
    Then the accumulated value should be "1"
    When I add "1" to accumulator
    Then the accumulated value should be "2"
    When I add "-10" to accumulator
    Then the accumulated value should be "-8"

*** Keywords ***
Accumulator has been zeroed
    log  accumulator init

I add "${value}" to accumulator
    Add value  ${value}

Then the accumulated value should be "${expected}"
    Accumulator value should be  ${expected}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
*** Settings ***
Library             Accumulator6.py
Test setup          Setup method  0
Test teardown       Teardown method

*** Test Cases ***
Accumulate
    Given accumulator has been zeroed
    When I add "1" to accumulator
     And I add "1" to accumulator
     And I add "-10" to accumulator
    Then the accumulated value should be "-8"

*** Keywords ***
Accumulator has been zeroed
    log  accumulator init

I add "${value}" to accumulator
    Add value  ${value}

Then the accumulated value should be "${expected}"
    Accumulator value should be  ${expected}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/robot-framework-examples">https://github.com/tisnik/robot-framework-examples</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář, můžete namísto toho použít odkazy na jednotlivé příklady, které
naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránka projektu Robot Framework<br />
<a href="https://robotframework.org/">https://robotframework.org/</a>
</li>

<li>GitHub repositář Robot Frameworku<br />
<a href="https://github.com/robotframework/robotframework">https://github.com/robotframework/robotframework</a>
</li>

<li>Robot Framework (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Robot_Framework">https://en.wikipedia.org/wiki/Robot_Framework</a>
</li>

<li>Tutoriál Robot Frameworku<br />
<a href="http://www.robotframeworktutorial.com/">http://www.robotframeworktutorial.com/</a>
</li>

<li>Robot Framework Documentation<br />
<a href="https://robotframework.org/robotframework/">https://robotframework.org/robotframework/</a>
</li>

<li>Robot Framework Introduction<br />
<a href="https://blog.testproject.io/2016/11/22/robot-framework-introduction/">https://blog.testproject.io/2016/11/22/robot-framework-introduction/</a>
</li>

<li>robotframework 3.1.2 na PyPi<br />
<a href="https://pypi.org/project/robotframework/">https://pypi.org/project/robotframework/</a>
</li>

<li>Robot Framework demo (GitHub)<br />
<a href="https://github.com/robotframework/RobotDemo">https://github.com/robotframework/RobotDemo</a>
</li>

<li>Robot Framework web testing demo using SeleniumLibrary<br />
<a href="https://github.com/robotframework/WebDemo">https://github.com/robotframework/WebDemo</a>
</li>

<li>Robot Framework for Mobile Test Automation Demo<br />
<a href="https://www.youtube.com/watch?v=06LsU08slP8">https://www.youtube.com/watch?v=06LsU08slP8</a>
</li>

<li>Selenium<br />
<a href="https://selenium.dev/">https://selenium.dev/</a>
</li>

<li>SeleniumLibrary<br />
<a href="https://robotframework.org/">https://robotframework.org/</a>
</li>

<li>The Practical Test Pyramid<br />
<a href="https://martinfowler.com/articles/practical-test-pyramid.html">https://martinfowler.com/articles/practical-test-pyramid.html</a>
</li>

<li>Acceptance Tests and the Testing Pyramid<br />
<a href="http://www.blog.acceptancetestdrivendevelopment.com/acceptance-tests-and-the-testing-pyramid/">http://www.blog.acceptancetestdrivendevelopment.com/acceptance-tests-and-the-testing-pyramid/</a>
</li>

<li>Programovací jazyk Clojure – testování s využitím knihovny Expectations<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/">https://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/</a>
</li>

<li>Programovací jazyk Clojure – některé užitečné triky použitelné (nejenom) v testech<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/">https://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/</a>
</li>

<li>Tab-separated values<br />
<a href="https://en.wikipedia.org/wiki/Tab-separated_values">https://en.wikipedia.org/wiki/Tab-separated_values</a>
</li>

<li>A quick guide about Python implementations<br />
<a href="https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321">https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321</a>
</li>

<li>Python 2.7 will retire in...<br />
<a href="https://pythonclock.org/">https://pythonclock.org/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

