<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Univerzální testovací nástroj Robot Framework a BDD testy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Univerzální testovací nástroj Robot Framework a BDD testy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhém článku o nástroji nazvaném Robot Framework si ukážeme některé další možnosti, které lze využít při psaní testovacích scénářů. Zmíníme se mj.&nbsp;i o použití Robot Frameworku při tvorbě BDD testů, pro něž se běžně používá jazyk Gherkin.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Univerzální testovací nástroj Robot Framework a BDD testy</a></p>
<p><a href="#k02">2. Zápis testovacích scénářů</a></p>
<p><a href="#k03">3. Atributy objektů použitých pro implementaci kroků testů</a></p>
<p><a href="#k04">4. Platnost objektů vytvářených nástrojem Robot Framework</a></p>
<p><a href="#k05">5. Uchování hodnoty akumulátoru mezi jednotlivými testy</a></p>
<p><a href="#k06">6. Použití deklarace <strong>ROBOT_LIBRARY_SCOPE</strong></a></p>
<p><a href="#k07">7. Globální oblast platnosti objektu</a></p>
<p><a href="#k08">8. Podpora operací typu <strong>setup</strong> a <strong>teardown</strong></a></p>
<p><a href="#k09">9. Explicitní zákaz operace typu <strong>setup</strong> nebo <strong>teardown</strong></a></p>
<p><a href="#k10">10. Testy řízené tabulkami</a></p>
<p><a href="#k11">11. Celý testovací scénář založený na tabulce</a></p>
<p><a href="#k12">12. Alternativní zápis testovacího scénáře</a></p>
<p><a href="#k13">13. Jazyk Gherkin</a></p>
<p><a href="#k14">14. Využití Robot Frameworku ve funkci nadmnožiny jazyka Gherkin</a></p>
<p><a href="#k15">15. Praktický příklad: test třídy <strong>Accumulator6</strong></a></p>
<p><a href="#k16">16. Použití spojky <strong>and</strong></a></p>
<p><a href="#k17">17. BDD testy řízené tabulkou</a></p>
<p><a href="#k18">18. Vylepšení předchozího příkladu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Univerzální testovací nástroj Robot Framework a BDD testy</h2>

<p><a
href="https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework/">Na
úvodní článek</a>, v&nbsp;němž jsme se seznámili s&nbsp;některými základními
koncepty, na nichž je postaven nástroj <i>Robot Framework</i>, dnes navážeme.
Představíme si některé další možnosti, které je možné využít při psaní
testovacích scénářů, zejména tvorbu testů založených na tabulkách se vstupními
daty a očekávanými výsledky. Zmíníme se mj.&nbsp;i o použití Robot Frameworku
při psaní BDD testů, pro něž se běžně používá spíše doménově specifický jazyk
(<i>DSL &ndash; Domain Specific Language</i>) nazvaný <a
href="https://cucumber.io/docs/gherkin/">Gherkin</a>. Implementaci jednotlivých
kroků testů postavíme opět na <a
href="https://www.root.cz/n/python/">programovacím jazyku Python</a>, protože
se jedná o primární jazyk, pro nějž je Robot Framework určen (druhým
podporovaným jazykem je Java, ovšem Python se v&nbsp;této oblasti s&nbsp;velkou
pravděpodobností používá mnohem častěji).</p>

<a href="https://www.root.cz/obrazek/398485/"><img src="https://i.iinfo.cz/images/555/robot-framework-01-2-prev.png" class="image-398485" alt="&#160;" width="365" height="270" /></a>
<p><i>Obrázek 1: Příklad vygenerované HTML stránky s&nbsp;výsledky testů
vytvořených a spuštěných v&nbsp;Robot Frameworku.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Zápis testovacích scénářů</h2>

<p>Připomeňme si ve stručnosti, jak vypadal poslední (plně funkční) test,
s&nbsp;nímž jsme se seznámili v&nbsp;samotném závěru předchozího článku.
Jednalo se o velmi jednoduchý test, který zjišťoval, zda se provádí korektně
aritmetická (celočíselná) operace součtu v&nbsp;programovacím jazyku Python.
Jedná se tedy o pouhý demonstrační příklad zvolený z&nbsp;toho důvodu, že je
dostatečně jednoduchý a přehledný (v&nbsp;praxi by se spíše testovala minimálně
celá třída). Jednotlivé kroky testů, z&nbsp;nichž se skládá testovací scénář,
jsou zapsány s&nbsp;využitím takzvaných klíčových slov (<i>keywords</i>) a
jejich parametrů, přičemž klíčová slova i jednotlivé parametry od sebe musí být
odděleny minimálně dvěma mezerami nebo znakem Tab (protože samotné klíčové
slovo je obecně tvořeno několika slovy oddělenými od sebe jedinou mezerou,
takže je nutné rozlišit hranici slova od běžných mezer).</p>

<p>Samotný testovací scénář prezentovaný minule byl zapsán následujícím
způsobem:</p>

<pre>
*** Settings ***
Library         Test16.py
&nbsp;
*** Test Cases ***
Adder #1
    Add  1  2
    Result should be  3
&nbsp;
Adder #2
    Add  0  0
    Result should be  0
&nbsp;
Adder #3
    Add  1  -1
    Result should be  0
</pre>

<p>S&nbsp;výsledkem po spuštění celého scénáře příkazem
<strong>robot</strong>:</p>

<pre>
$ <strong>robot test16.robot</strong>
&nbsp;
==============================================================================
Test16                                                                        
==============================================================================
Adder #1                                                              | PASS |
------------------------------------------------------------------------------
Adder #2                                                              | PASS |
------------------------------------------------------------------------------
Adder #3                                                              | PASS |
------------------------------------------------------------------------------
Test16                                                                | PASS |
3 critical tests, 3 passed, 0 failed
3 tests total, 3 passed, 0 failed
==============================================================================
Output:  /home/tester/src/Python/robot-framework-examples/article_01/output.xml
Log:     /home/tester/src/Python/robot-framework-examples/article_01/log.html
Report:  /home/tester/src/Python/robot-framework-examples/article_01/report.html
</pre>

<p>Alternativně je možné v&nbsp;případě potřeby použít odlišný způsob zápisu,
v&nbsp;němž se explicitně oddělují jednotlivé sloupce tabulky pomocí znaku
&bdquo;|&ldquo;. Právě na tomto zápisu je velmi dobře patrné oddělení klíčových
slov od jejich parametrů i rozdělení jednotlivých parametrů do samostatných
sloupců:</p>

<pre>
| *** Settings ***   |                  |   |
| Library            | Test16.py        |   |
|                    |                  |   |
| *** Test Cases *** |                  |   |
| Adder #1           |                  |   |
|                    | Add              | 1 | 2
|                    | Result should be | 3 |
|                    |                  |   |
| Adder #2           |                  |   |
|                    | Add              | 0 | 0
|                    | Result should be | 0 |
|                    |                  |   |
| Adder #3           |                  |   |
|                    | Add              | 1 | -1
|                    | Result should be | 0 |
</pre>

<p>Ve skutečnosti je však možné tabulku dále rozdělit na menší části oddělené
jedním či větším množstvím prázdných řádků, což může zvýšit čitelnost:</p>

<pre>
| *** Settings ***   |                  |   |
| Library            | Test16.py        |   |
&nbsp;
| *** Test Cases *** |                  |   |
| Adder #1           |                  |   |
|                    | Add              | 1 | 2
|                    | Result should be | 3 |
|                    | Add              | 2 | 3
|                    | Result should be | 5 |
|                    | Add              | 4 | 5
|                    | Result should be | 9 |
&nbsp;
| Adder #2           |                  |   |
|                    | Add              | 0 | 0
|                    | Result should be | 0 |
&nbsp;
| Adder #3           |                  |   |
|                    | Add              | 1 | -1
|                    | Result should be | 0 |
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Atributy objektů použitých pro implementaci kroků testů</h2>

<p>Jednotlivé kroky testů, které jsou v&nbsp;testovacím scénáři reprezentovány
klíčovými slovy &bdquo;Add&ldquo; a &bdquo;Result should be&ldquo;, byly
implementovány ve formě běžných metod třídy <strong>Test16</strong>. Jméno této
třídy přitom musí odpovídat jménu souboru, v&nbsp;němž je zdrojový kód třídy
uložen (což do značné míry odpovídá konvencím programovacího jazyka Java
v&nbsp;případě veřejných tříd). Pokud by tomu tak nebylo, je nutné změnit
parametr <strong>Library</strong> takovým způsobem, aby obsahoval jak jméno
souboru, tak i jméno třídy. Samotná implementace této třídy může vypadat
následovně:</p>

<pre>
class <strong>Test16</strong>:
    def <strong>__init__</strong>(self):
        print("INIT")
&nbsp;
    def <strong>add</strong>(self, x, y):
        self.result = int(x) + int(y)
&nbsp;
    def <strong>result_should_be</strong>(self, expected):
        assert self.result == int(expected), "{} != {}".format(self.result, expected)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že klíčová slova jsou
realizována &bdquo;běžnými&ldquo; metodami, tedy nikoli metodami statickými či
třídními. Jejich prvním parametrem je tedy <strong>self</strong>, jenž je
předáván automaticky (nepíše se do testovacího scénáře).</div></p>

<p>Tento test si připomínáme z&nbsp;jednoho důvodu &ndash; můžeme si na jeho
příkladu vysvětlit, jakým způsobem se pracuje s&nbsp;atributy objektů použitých
pro implementaci jednotlivých kroků testů. Náš test pracuje s&nbsp;jediným
atributem nazvaným <strong>result</strong>, který reprezentuje stav objektu
typu <strong>Test16</strong>. Tento atribut je nastavován v&nbsp;metodě
<strong>add</strong> a tedy (z&nbsp;pohledu testera) v&nbsp;klíčovém slově
&bdquo;Add&ldquo;; přistupujeme k&nbsp;němu v&nbsp;metodě
<strong>result_should_be</strong>, tedy na straně testů v&nbsp;klíčovém slově
&bdquo;Result should be&ldquo;. Bude nám tedy dostačovat, aby byl atribut
platný mezi zavoláním těchto dvou metod v&nbsp;rámci jednoho test case.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Platnost objektů vytvářených nástrojem Robot Framework</h2>

<p>Ve výchozím nastavení jsou objekty (v&nbsp;předchozím příkladu instance
třídy <strong>Test16</strong>) vytvořeny pro každý test case. Mezi jednotlivými
test casy tedy není možné sdílet stav, pokud se samozřejmě neuchýlíme
k&nbsp;použití globálních proměnných atd. Toto chování je většinou plně
vyhovující a umožňuje nám psát například následující testovací scénáře, které
počítají s&nbsp;tím, že výchozí hodnota akumulátoru bude na začátku každého
test case vynulována:</p>

<pre>
| *** Settings ***   |                             |   |
| Library            | Accumulator1.py             |   |
|                    |                             |   |
| *** Test Cases *** |                             |   |
| Initial value      |                             |   |
|                    | Accumulator value should be | 0 |
|                    |                             |   |
| Adder #1           | Add value                   | 1 |
|                    | Accumulator value should be | 1 |
|                    | Add value                   | 2 |
|                    | Accumulator value should be | 3 |
</pre>

<p>Implementace třídy <strong>Accumulator</strong> využívá toho, že pro každý
test case je vytvořen nový objekt a je tudíž možné hodnotu akumulátoru
inicializovat přímo v&nbsp;konstruktoru. Deklarace obou metod realizujících
klíčová slova je již triviální:</p>

<pre>
class <strong>Accumulator1</strong>:
    def <strong>__init__</strong>(self):
        print("INIT")
        self.result = 0
&nbsp;
    def <strong>add_value</strong>(self, value):
        self.result += int(value)
&nbsp;
    def <strong>accumulator_value_should_be</strong>(self, expected):
        assert self.result == int(expected), "{} != {}".format(self.result, expected)
</pre>

<p>Tento testovací scénář se dvěma testy je plně funkční, o čemž se můžeme
snadno přesvědčit:</p>

<pre>
$ <strong>robot test01.robot</strong>
&nbsp;
==============================================================================
Test01                                                                        
==============================================================================
Initial value                                                         | PASS |
------------------------------------------------------------------------------
Adder #1                                                              | PASS |
------------------------------------------------------------------------------
Test01                                                                | PASS |
2 critical tests, 2 passed, 0 failed
2 tests total, 2 passed, 0 failed
==============================================================================
Output:  /home/tester/src/Python/robot-framework-examples/article_02/output.xml
Log:     /home/tester/src/Python/robot-framework-examples/article_02/log.html
Report:  /home/tester/src/Python/robot-framework-examples/article_02/report.html
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Uchování hodnoty akumulátoru mezi jednotlivými testy</h2>

<p>V&nbsp;některých případech &ndash; i když jich nebude v&nbsp;praxi velmi
mnoho &ndash; by bylo vhodné, aby se hodnota akumulátoru zapamatovala a zůstala
zachována i mezi jednotlivými testy. Umožnilo by nám to zapsat například
následující testovací scénář, který k&nbsp;akumulátoru postupně přičítá další
hodnoty a přitom sleduje mezivýsledky:</p>

<pre>
| *** Settings ***   |                             |   |
| Library            | Accumulator2.py             |   |
|                    |                             |   |
| *** Test Cases *** |                             |   |
| Initial value      |                             |   |
|                    | Accumulator value should be | 0 |
|                    |                             |   |
| Adder #1           | Add value                   | 1 |
|                    | Accumulator value should be | 1 |
|                    |                             |   |
| Adder #2           | Add value                   | 2 |
|                    | Accumulator value should be | 3 |
</pre>

<p>V&nbsp;případě, že nezměníme implementaci třídy
<strong>Accumulator2</strong>, nebude takto zapsaný scénář proveden
korektně:</p>

<pre>
class <strong>Accumulator2</strong>:
    def <strong>__init__</strong>(self):
        print("INIT")
        self.result = 0
&nbsp;
    def <strong>add_value</strong>(self, value):
        self.result += int(value)
&nbsp;
    def <strong>accumulator_value_should_be</strong>(self, expected):
        assert self.result == int(expected), "{} != {}".format(self.result, expected)
</pre>

<p>Samozřejmě si opět můžeme odzkoušet, jak se bude testovací scénář chovat po
jeho spuštění v&nbsp;Robot Frameworku:</p>

<pre>
$ <strong>robot test02.robot</strong>
&nbsp;
==============================================================================
Test02                                                                        
==============================================================================
Initial value                                                         | PASS |
------------------------------------------------------------------------------
Adder #1                                                              | PASS |
------------------------------------------------------------------------------
Adder #2                                                              | FAIL |
2 != 3
------------------------------------------------------------------------------
Test02                                                                | FAIL |
3 critical tests, 2 passed, 1 failed
3 tests total, 2 passed, 1 failed
==============================================================================
Output:  /home/tester/src/Python/robot-framework-examples/article_02/output.xml
Log:     /home/tester/src/Python/robot-framework-examples/article_02/log.html
Report:  /home/tester/src/Python/robot-framework-examples/article_02/report.html
</pre>

<p><div class="rs-tip-major">Poznámka: chybové hlášení znamená, že po přičtení
dvojky k&nbsp;obsahu akumulátoru (ten je nulový) bude jeho novou hodnotou
pochopitelně taktéž dvojka a nikoli hodnota 3.</div></p>

<p>Toto chování je očekávatelné, protože pro každý test case byla vytvořena
nová instance třídy <strong>Accumulator2</strong> a tím pádem došlo i
k&nbsp;inicializaci výchozí hodnoty akumulátoru.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Použití deklarace <strong>ROBOT_LIBRARY_SCOPE</strong></h2>

<p>Existuje však možnost, jak zajistit, aby se hodnota akumulátoru zachovala i
mezi jednotlivými test casy. Můžeme totiž určit, že nějaký zvolený objekt
(v&nbsp;našem případě instance třídy <strong>Accumulator3</strong> bude
zkonstruován jen jedenkrát a bude platný pro celý testovací scénář. Stačí
k&nbsp;tomu maličkost &ndash; deklarovat třídní atribut nazvaný
<strong>ROBOT_LIBRARY_SCOPE</strong> a nastavit ho na řetězec &bdquo;TEST
SUITE&ldquo;. Povšimněte si, že není nutné provádět žádné importy dalších
knihoven, což by bylo zapotřebí například v&nbsp;případě, že by Robot Framework
používal anotace atd.:</p>

<pre>
class <strong>Accumulator3</strong>:
&nbsp;
    ROBOT_LIBRARY_SCOPE = 'TEST SUITE'
&nbsp;
    def <strong>__init__</strong>(self):
        print("INIT")
        self.result = 0
&nbsp;
    def <strong>add_value</strong>(self, value):
        self.result += int(value)
&nbsp;
    def <strong>accumulator_value_should_be</strong>(self, expected):
        assert self.result == int(expected), "{} != {}".format(self.result, expected)
</pre>

<p>Samotný zápis testovacího scénáře se prakticky nezmění, pochopitelně až na
nutnost specifikace jiné knihovny s&nbsp;implementací klíčových slov:</p>

<pre>
| *** Settings ***   |                             |   |
| Library            | Accumulator3.py             |   |
|                    |                             |   |
| *** Test Cases *** |                             |   |
| Initial value      |                             |   |
|                    | Accumulator value should be | 0 |
|                    |                             |   |
| Adder #1           | Add value                   | 1 |
|                    | Accumulator value should be | 1 |
|                    |                             |   |
| Adder #2           | Add value                   | 2 |
|                    | Accumulator value should be | 3 |
</pre>

<p>Nyní ovšem celý testovací scénář proběhne v&nbsp;pořádku, což si ověříme na
dalším výpisu:</p>

<pre>
$ <strong>robot test03.robot</strong>
&nbsp;
==============================================================================
Test03                                                                        
==============================================================================
Initial value                                                         | PASS |
------------------------------------------------------------------------------
Adder #1                                                              | PASS |
------------------------------------------------------------------------------
Adder #2                                                              | PASS |
------------------------------------------------------------------------------
Test03                                                                | PASS |
3 critical tests, 3 passed, 0 failed
3 tests total, 3 passed, 0 failed
==============================================================================
Output:  /home/tester/src/Python/robot-framework-examples/article_02/output.xml
Log:     /home/tester/src/Python/robot-framework-examples/article_02/log.html
Report:  /home/tester/src/Python/robot-framework-examples/article_02/report.html
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Globální oblast platnosti objektu</h2>

<p>Existuje ještě jedna možnost specifikace platnosti objektu (tedy instance
nějaké třídy vytvořené samotným Robot Frameworkem). Můžeme totiž nastavit, že
objekt bude globálně platný a tedy bude existovat napříč všemi testovacími
scénáři, které budou spuštěny. Postačuje definovat třídní atribut
<strong>ROBOT_LIBRARY_SCOPE</strong> a nastavit ho na řetězec
&bdquo;GLOBAL&ldquo; tak, jak je to ukázáno v&nbsp;dnešním čtvrtém
demonstračním příkladu:</p>

<pre>
class Accumulator4:
&nbsp;
    <strong>ROBOT_LIBRARY_SCOPE = 'GLOBAL'</strong>
&nbsp;
    def <strong>__init__</strong>(self):
        print("INIT")
        self.result = 0
&nbsp;
    def <strong>add_value</strong>(self, value):
        self.result += int(value)
&nbsp;
    def <strong>accumulator_value_should_be</strong>(self, expected):
        assert self.result == int(expected), "{} != {}".format(self.result, expected)
</pre>

<p>Chování si můžeme ověřit na tomto testovacím scénáři:</p>

<pre>
| *** Settings ***   |                             |   |
| Library            | Accumulator4.py             |   |
|                    |                             |   |
| *** Test Cases *** |                             |   |
| Initial value      |                             |   |
|                    | Accumulator value should be | 0 |
|                    |                             |   |
| Adder #1           | Add value                   | 1 |
|                    | Accumulator value should be | 1 |
|                    |                             |   |
| Adder #2           | Add value                   | 2 |
|                    | Accumulator value should be | 3 |
</pre>

<p>S&nbsp;očekávaným výsledkem:</p>

<pre>
$ <strong>robot test04.robot</strong>
&nbsp;
==============================================================================
Test04                                                                        
==============================================================================
Initial value                                                         | PASS |
------------------------------------------------------------------------------
Adder #1                                                              | PASS |
------------------------------------------------------------------------------
Adder #2                                                              | PASS |
------------------------------------------------------------------------------
Test04                                                                | PASS |
3 critical tests, 3 passed, 0 failed
3 tests total, 3 passed, 0 failed
==============================================================================
Output:  /home/tester/src/Python/robot-framework-examples/article_02/output.xml
Log:     /home/tester/src/Python/robot-framework-examples/article_02/log.html
Report:  /home/tester/src/Python/robot-framework-examples/article_02/report.html
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Podpora operací typu <strong>setup</strong> a <strong>teardown</strong></h2>

<p>V&nbsp;prakticky všech knihovnách a frameworcích určených pro tvorbu a
spouštění různých typů testů se setkáme s&nbsp;možností specifikace operací,
které se mají provést před každým testem popř.&nbsp;naopak po doběhnutí testu.
Většinou jsou tyto operace definovány ve funkcích nebo metodách nazvaných
<strong>setup</strong> a <strong>teardown</strong>. V&nbsp;Robot Frameworku
tuto možnost máme taky, přičemž se operace typu <i>setup</i> a <i>teardown</i>
definují v&nbsp;sekci <i>Settings</i>, tedy na začátku testovacího scénáře.
Tyto operace lze implementovat libovolným slovem (<i>keyword</i>), přičemž tato
slova mohou mít i parametry, pokud je to vyžadováno.</p>

<p>V&nbsp;dalším demonstračním příkladu pro operaci <i>setup</i> použijeme
klíčové slovo <strong>Setup method</strong> s&nbsp;parametrem 0 a pro operaci
<i>teardown</i> použijeme klíčové slovo <strong>Teardown method</strong>,
tentokrát bez parametrů:</p>

<pre>
| *** Settings ***   |                             |   |
| Library            | Accumulator5.py             |   |
| <strong>Test setup</strong>         | <strong>Setup method</strong>                | 0 |
| <strong>Test teardown</strong>      | <strong>Teardown method</strong>             |   |
|                    |                             |   |
| *** Test Cases *** |                             |   |
| Initial value      |                             |   |
|                    | Accumulator value should be | 0 |
|                    |                             |   |
| Adder #1           | Add value                   | 1 |
|                    | Accumulator value should be | 1 |
|                    |                             |   |
| Adder #2           | Add value                   | 2 |
|                    | Accumulator value should be | 3 |
</pre>

<p>Implementace obou výše zmíněných klíčových slov se ve skutečnosti žádným
způsobem neliší od implementací slov jiných &ndash; bude se jednat o běžné
metody třídy <strong>Accumulator5</strong>:</p>

<pre>
class <strong>Accumulator5</strong>:
&nbsp;
    ROBOT_LIBRARY_SCOPE = 'GLOBAL'
&nbsp;
    def <strong>__init__</strong>(self):
        print("INIT")
        self.result = None
&nbsp;
    def <strong>setup_method</strong>(self, value):
        self.result = int(value)
&nbsp;
    def <strong>teardown_method</strong>(self):
        pass
&nbsp;
    def <strong>add_value</strong>(self, value):
        self.result += int(value)
&nbsp;
    def <strong>accumulator_value_should_be</strong>(self, expected):
        assert self.result == int(expected), "{} != {}".format(self.result, expected)
</pre>

<p>Na začátku každého testu (přesněji test casu) se inicializuje atribut
<strong>result</strong> na nulovou hodnotu, takže je zřejmé, že tentokrát budou
později spuštěné testy havarovat, a to i přesto, že je hodnota tohoto atributu
zachována i mezi jednotlivými testy (ve skutečnosti je sice hodnota zachována,
ale na začátku testu je atribut explicitně vynulován):</p>

<pre>
$ <strong>robot test05.robot</strong>
&nbsp;
==============================================================================
Test05                                                                        
==============================================================================
Initial value                                                         | PASS |
------------------------------------------------------------------------------
Adder #1                                                              | PASS |
------------------------------------------------------------------------------
Adder #2                                                              | FAIL |
2 != 3
------------------------------------------------------------------------------
Test05                                                                | FAIL |
3 critical tests, 2 passed, 1 failed
3 tests total, 2 passed, 1 failed
==============================================================================
Output:  /home/tester/src/Python/robot-framework-examples/article_02/output.xml
Log:     /home/tester/src/Python/robot-framework-examples/article_02/log.html
Report:  /home/tester/src/Python/robot-framework-examples/article_02/report.html
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Explicitní zákaz operace typu <strong>setup</strong> nebo <strong>teardown</strong></h2>

<p>V&nbsp;některých situacích budeme potřebovat, aby se operace typu
<strong>setup</strong> nebo <strong>teardown</strong> vůbec neprovedly, nebo
aby se sice provedly, ale s&nbsp;jinými parametry. I tohoto chování je možné
v&nbsp;Robot Frameworku dosáhnout, a to tímto zápisem:</p>

<pre>
| Adder #2           | <strong>[Setup]</strong>                     | <strong>NONE</strong> |
|                    | Add value                   | 2    |
|                    | Accumulator value should be | 3    |
</pre>

<p>Výše uvedený zvýrazněný řádek zakazoval pro jeden konkrétní test (Adder #2)
provedení operace typu <strong>setup</strong>. Tímto způsobem můžeme mnohdy i
dosti zásadním způsobem ovlivnit spouštění jednotlivých testů
popř.&nbsp;modifikovat jejich kontext (tedy prostředí, v&nbsp;jakém se testy
spouští):</p>

<pre>
| *** Settings ***   |                             |      |
| Library            | Accumulator6.py             |      |
| Test setup         | Setup method                | 0    |
| Test teardown      | Teardown method             |      |
|                    |                             |      |
| *** Test Cases *** |                             |      |
| Initial value      |                             |      |
|                    | Accumulator value should be | 0    |
|                    |                             |      |
| Adder #1           | Add value                   | 1    |
|                    | Accumulator value should be | 1    |
|                    |                             |      |
| Adder #2           | [Setup]                     | NONE |
|                    | Add value                   | 2    |
|                    | Accumulator value should be | 3    |
|                    |                             |      |
| Adder #3           |                             |      |
|                    | Add value                   | 2    |
|                    | Accumulator value should be | 5    |
</pre>

<p>Implementace knihovny <strong>Accumulator6</strong> může zůstat stejná, jako
tomu bylo v&nbsp;knihovně <strong>Accumulator5</strong>, tedy:</p>

<pre>
class <strong>Accumulator6</strong>:
&nbsp;
    ROBOT_LIBRARY_SCOPE = 'GLOBAL'
&nbsp;
    def <strong>__init__</strong>(self):
        print("INIT")
        self.result = None
&nbsp;
    def <strong>setup_method</strong>(self, value):
        self.result = int(value)
&nbsp;
    def <strong>teardown_method</strong>(self):
        pass
&nbsp;
    def <strong>add_value</strong>(self, value):
        self.result += int(value)
&nbsp;
    def <strong>accumulator_value_should_be</strong>(self, expected):
        assert self.result == int(expected), "{} != {}".format(self.result, expected)
</pre>

<p>Nyní by první tři testy měly proběhnout korektně; zhavarovat by měl až test
čtvrtý:</p>

<pre>
$ <strong>robot test06.robot</strong>
&nbsp;
==============================================================================
Test06                                                                        
==============================================================================
Initial value                                                         | PASS |
------------------------------------------------------------------------------
Adder #1                                                              | PASS |
------------------------------------------------------------------------------
Adder #2                                                              | PASS |
------------------------------------------------------------------------------
Adder #3                                                              | FAIL |
2 != 5
------------------------------------------------------------------------------
Test06                                                                | FAIL |
4 critical tests, 3 passed, 1 failed
4 tests total, 3 passed, 1 failed
==============================================================================
Output:  /home/tester/src/Python/robot-framework-examples/article_02/output.xml
Log:     /home/tester/src/Python/robot-framework-examples/article_02/log.html
Report:  /home/tester/src/Python/robot-framework-examples/article_02/report.html
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Testy řízené tabulkami</h2>

<p>Jedna z&nbsp;předností nástroje Robot Framework spočívá v&nbsp;tom, že
umožňuje tvořit testy řízené tabulkami. Jedná se o možnost zapsat nějaké
vstupní hodnoty (parametry) a očekávané výsledky pro tyto vstupní hodnoty
formou nějaké tabulky. V&nbsp;našem konkrétním případě, pokud budeme chtít
testovat implementaci třídy s&nbsp;akumulátorem, je možné použít například
tento zápis:</p>

<pre>
| *** Test Cases *** | Value    | Expected |
| Test1              | 0        | 0        |
|                    | 1        | 1        |
|                    | 10       | 11       |
|                    | -10      | 1        |
|                    | 1        | 2        |
|                    | 1        | 3        |
</pre>

<p>Ve sloupci <strong>Value</strong> je uložena hodnota přičítaná do
akumulátoru, ve sloupci <strong>Expected</strong> pak očekávaná (výsledná)
hodnota uložená v&nbsp;akumulátoru.</p>

<p>To ovšem pochopitelně není vše, protože je nutné Robot Frameworku oznámit,
jakým způsobem se mají hodnoty zapsané do tabulky namapovat na konkrétní
klíčová slova neboli kroky testu. To můžeme provést v&nbsp;sekci Keywords (i
když existují i další možnosti), a to následujícím způsobem, který zaručí, že
se každý řádek předchozí tabulky s&nbsp;testem přepíše na dvojici klíčových
slov <strong>Add value</strong> a <strong>Accumulator value should
be</strong>:</p>

<pre>
| *** Keywords ***   |                             |             |             |
| Accumulate         |                             |             |             |
|                    | [Arguments]                 | ${value}    | ${expected} |
|                    | Add value                   | ${value}    |             |
|                    | Accumulator value should be | ${expected} |             |
</pre>

<p><div class="rs-tip-major">Poznámka: zápisem <strong>${value}</strong> a
<strong>${expected}</strong> se specifikují proměnné spravované přímo Robot
Frameworkem.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Celý testovací scénář založený na tabulce</h2>

<p>Ukažme si nyní, jak by mohl vypadat test třídy <strong>Accumulator</strong>
(přesněji řečeno její šesté iterace <strong>Accumulator6</strong>) přepsaný do
formátu, v&nbsp;němž se bude využívat tabulka se vstupními parametry a
očekávanými výsledky testů. Tabulka bude mít dva sloupce nazvané
<strong>Value</strong> a <strong>Expected</strong>, přičemž každý řádek této
tabulky bude expandován do dvou kroků testu způsobem, který jsme si popsali
v&nbsp;předchozí kapitole:</p>

<pre>
| *** Settings ***   |                             |             |             |
| Library            | Accumulator6.py             |             |             |
| Test template      | Accumulate                  |             |             |
| Test setup         | Setup method                | 0           |             |
| Test teardown      | Teardown method             |             |             |
|                    |                             |             |             |
| *** Test Cases *** | Value                       | Expected    |             |
| Test1              | 0                           | 0           |             |
|                    | 1                           | 1           |             |
|                    | 10                          | 11          |             |
|                    | -10                         | 1           |             |
|                    | 1                           | 2           |             |
|                    | 1                           | 3           |             |
|                    |                             |             |             |
| *** Keywords ***   |                             |             |             |
| Accumulate         |                             |             |             |
|                    | [Arguments]                 | ${value}    | ${expected} |
|                    | Add value                   | ${value}    |             |
|                    | Accumulator value should be | ${expected} |             |
</pre>

<p>Po spuštění tohoto testu by měly všechny kroky testovacího scénáře
proběhnout korektně (bez pádu):</p>

<pre>
$ <strong>robot test07.robot</strong>
&nbsp;
==============================================================================
Test07                                                                        
==============================================================================
Test1                                                                 | PASS |
------------------------------------------------------------------------------
Test07                                                                | PASS |
1 critical test, 1 passed, 0 failed
1 test total, 1 passed, 0 failed
==============================================================================
Output:  /home/tester/src/Python/robot-framework-examples/article_02/output.xml
Log:     /home/tester/src/Python/robot-framework-examples/article_02/log.html
Report:  /home/tester/src/Python/robot-framework-examples/article_02/report.html
</pre>

<p><div class="rs-tip-major">Poznámka: opět platí, že testovací scénář lze
rozdělit na několik tabulek a použít odlišný, i když sémanticky ekvivalentní
zápis:</div></p>

<pre>
| *** Settings ***   |                   |    |
| Library            | Accumulator6.py   |    |
| Test template      | Accumulate        |    |
| Test setup         | Setup method      | 0  |
| Test teardown      | Teardown method   |    |
&nbsp;
| *** Test Cases *** | Value             | Expected    |
| Test1              | 0                 | 0           |
|                    | 1                 | 1           |
|                    | 10                | 11          |
|                    | -10               | 1           |
|                    | 1                 | 2           |
|                    | 1                 | 3           |
&nbsp;
| *** Keywords ***   |                             |             |             |
| Accumulate         |                             |             |             |
|                    | [Arguments]                 | ${value}    | ${expected} |
|                    | Add value                   | ${value}    |             |
|                    | Accumulator value should be | ${expected} |             |
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Alternativní zápis testovacího scénáře</h2>

<p>Předchozí testovací scénář můžeme zapsat i nepatrně odlišným způsobem.
Nemusí se totiž jednat o tabulku se sloupci oddělenými znakem &bdquo;|&ldquo;,
ale o použití mezer (či sady mezer) pro oddělení jednotlivých sloupců dvou
tabulek (<i>Test Cases</i> a <i>Keywords</i>):</p>

<pre>
*** Settings ***
Library             Accumulator6.py
Test template       Accumulate
Test setup          Setup method  0
Test teardown       Teardown method
&nbsp;
*** Test Cases ***  Value      Expected
Test1               0          0
                    1          1
                    10         11
                    -10        1
                    1          2
                    1          3
&nbsp;
*** Keywords ***
Accumulate
                    [Arguments]                  ${value}     ${expected}
                    Add value                    ${value}
                    Accumulator value should be  ${expected}
</pre>

<p>I přes odlišný způsob zápisu testovacího scénáře bude výsledek totožný
s&nbsp;předchozím testem:</p>

<pre>
==============================================================================
Test08                                                                        
==============================================================================
Test1                                                                 | PASS |
------------------------------------------------------------------------------
Test08                                                                | PASS |
1 critical test, 1 passed, 0 failed
1 test total, 1 passed, 0 failed
==============================================================================
Output:  /home/tester/src/Python/robot-framework-examples/article_02/output.xml
Log:     /home/tester/src/Python/robot-framework-examples/article_02/log.html
Report:  /home/tester/src/Python/robot-framework-examples/article_02/report.html
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Jazyk Gkerkin</h2>

<p>Dalším tématem, kterým se dnes budeme zabývat, je tvorba BDD
(<i>behavior</i>) testů, neboli testů zjišťujících, zda se testovaný systém
chová podle popsaných předpokladů. Tyto testy lze vytvářet různým způsobem,
ovšem v&nbsp;této oblasti se velmi často setkáme s&nbsp;použitím doménově
specifického jazyka nazvaného <a
href="https://cucumber.io/docs/gherkin/">Gherkin</a>. Tento jazyk odstiňuje
autora testů od vlastní implementace systému i od programovacího jazyka (či
jazyků), v&nbsp;nichž je systém vytvořen. Ostatně v&nbsp;Gherkinu lze popsat
očekávané chování prakticky jakéhokoli systému, který dokonce nemusí mít nic
společného s&nbsp;IT. Testovací scénář vytvořený v&nbsp;Gherkinu může vypadat
následovně:</p>

<a href="https://www.root.cz/obrazek/324266/"><img src="https://i.iinfo.cz/images/634/clojure-cucumber-1-prev.png" class="image-324266" alt="&#160;" width="370" height="198" /></a>
<p><i>Obrázek 2: Ukázka scénářů napsaných v&nbsp;jazyce Gherkin.</i></p>

<p>Na předchozím screenshotu jsou zvýrazněna klíčová slova uvozující jednotlivé
kroky testu. Ostatní slova a číslice ve větách jsou buď pevně daná (svázaná
s&nbsp;konkrétním krokem), nebo se jedná o proměnné. Ve scénáři je i tabulka,
jejíž obsah se řádek po řádku postupně stává obsahem jednotlivých kroků testu
(obsahem tabulky se nahrazují slova umístěná do ostrých závorek).</p>

<p><div class="rs-tip-major">Poznámka: jazyk Gherkin existuje v&nbsp;různých
jazykových mutacích, my se však budeme držet jeho originální anglické varianty.
Ostatně mnoho knihoven, které Gherkin podporují, pracuje pouze s&nbsp;anglickou
variantou.</div></p>

<p>Jednotlivé kroky testu napsané v&nbsp;jazyce Gherkin je samozřejmě nutné
nějakým způsobem implementovat. Způsob, jakým lze implementaci zařídit
v&nbsp;nástroji Robot Framework, bude popsán v&nbsp;navazujících
kapitolách.</p>

<p>S&nbsp;jazykem Gherkin a se způsobem jeho použití jsme se již na stránkách
Rootu několikrát setkali, protože jsme si ukázali implementaci Gherkinu jak pro
programovací jazyk <a
href="https://www.root.cz/vyhledavani/?qs=clojure">Clojure</a>, tak i pro <a
href="https://www.root.cz/n/python/">Python</a> a dokonce i <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">pro jazyk Go</a>.
Podrobnější informace o těchto implementacích naleznete v&nbsp;následujících
článcích:</p>

<ol>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure (2)<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (druhá část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (závěrečná část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/</a>
</li>

<li>Tvorba BDD testů s využitím jazyka Go a nástroje godog<br />
<a href="https://www.root.cz/clanky/tvorba-bdd-testu-s-vyuzitim-jazyka-go-a-nastroje-godog/">https://www.root.cz/clanky/tvorba-bdd-testu-s-vyuzitim-jazyka-go-a-nastroje-godog/</a>
</li>

</ol>



<p><a name="k14"></a></p>
<h2 id="k14">14. Využití Robot Frameworku ve funkci nadmnožiny jazyka Gherkin</h2>

<p>Testovací scénář pro třídu <strong>Accumulator6</strong> lze přepsat do
podoby BDD testů, a to jazykem, který připomíná Gherkin. Ústřední část bude
vypadat následovně:</p>

<pre>
*** Test Cases ***
Accumulate
    Given accumulator has been zeroed
    When I add "1" to accumulator
    Then the accumulated value should be "1"
    When I add "1" to accumulator
    Then the accumulated value should be "2"
    When I add "-10" to accumulator
    Then the accumulated value should be "-8"
</pre>

<p>Ovšem podobně jako u předchozích testů řízených tabulkami je i zde nutné
specifikovat klíčová slova za &bdquo;Given&ldquo;, &bdquo;When&ldquo; a
&bdquo;Then&ldquo;, a to konkrétně v&nbsp;sekci <strong>Keywords</strong>:</p>

<pre>
*** Keywords ***
Accumulator has been zeroed
    log  accumulator init
&nbsp;
I add "${value}" to accumulator
    Add value  ${value}
&nbsp;
Then the accumulated value should be "${expected}"
    Accumulator value should be  ${expected}
</pre>

<p>Tímto způsobem vytvořenou kostru testů již můžeme použít v&nbsp;reálném
testovacím scénáři.</p>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že v&nbsp;implementaci
klíčových slov se nepoužívají první slova z&nbsp;BDD testů, tedy
&bdquo;Given&ldquo;, &bdquo;When&ldquo; a &bdquo;Then&ldquo;.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Praktický příklad: test třídy <strong>Accumulator6</strong></h2>

<p>Předchozí testy třídy s&nbsp;implementací jednoduchého akumulátoru je možné
přepsat do formy BDD připomínající (ve vlastní části s&nbsp;popisem testů)
jazyk Gherkin. Výsledek, a to plně funkční, může vypadat například takto:</p>

<pre>
*** Settings ***
Library             Accumulator6.py
Test setup          Setup method  0
Test teardown       Teardown method
&nbsp;
*** Test Cases ***
Accumulate
    Given accumulator has been zeroed
    When I add "1" to accumulator
    Then the accumulated value should be "1"
    When I add "1" to accumulator
    Then the accumulated value should be "2"
    When I add "-10" to accumulator
    Then the accumulated value should be "-8"
&nbsp;
*** Keywords ***
Accumulator has been zeroed
    log  accumulator init
&nbsp;
I add "${value}" to accumulator
    Add value  ${value}
&nbsp;
Then the accumulated value should be "${expected}"
    Accumulator value should be  ${expected}
</pre>

<p>Tento testovací scénář je plně funkční:</p>

<pre>
==============================================================================
Test09                                                                        
==============================================================================
Accumulate                                                            | PASS |
------------------------------------------------------------------------------
Test09                                                                | PASS |
1 critical test, 1 passed, 0 failed
1 test total, 1 passed, 0 failed
==============================================================================
Output:  /home/tester/src/Python/robot-framework-examples/article_02/output.xml
Log:     /home/tester/src/Python/robot-framework-examples/article_02/log.html
Report:  /home/tester/src/Python/robot-framework-examples/article_02/report.html
</pre>

<a href="https://www.root.cz/obrazek/399420/"><img src="https://i.iinfo.cz/images/321/robot-framework-02-1-prev.png" class="image-399420" alt="&#160;" width="280" height="270" /></a>
<p><i>Obrázek 3: Výsledky běhu BDD testů.</i></p>

<a href="https://www.root.cz/obrazek/399421/"><img src="https://i.iinfo.cz/images/321/robot-framework-02-2-prev.png" class="image-399421" alt="&#160;" width="342" height="270" /></a>
<p><i>Obrázek 4: Ve výpisu jednotlivých kroků vidíme, jak se věty z&nbsp;BDD
testů namapovaly na konkrétní klíčová slova.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Použití spojky <strong>and</strong></h2>

<p>V&nbsp;BDD testech je dobrým zvykem nahrazovat sekvenci vět začínajících
stejným slovem &bdquo;When&ldquo; či &bdquo;Then&ldquo;:</p>

<pre>
<strong>When</strong> I add "1" to accumulator
<strong>When</strong> I add "1" to accumulator
<strong>When</strong> I add "-10" to accumulator
<strong>Then</strong> the accumulated value should be "-8"
</pre>

<p>spojkou <strong>And</strong>, která je čitelnější:</p>

<pre>
<strong>When</strong> I add "1" to accumulator
<strong> And</strong> I add "1" to accumulator
<strong> And</strong> I add "-10" to accumulator
<strong>Then</strong> the accumulated value should be "-8"
</pre>

<p>I tato vlastnost je v&nbsp;Robot Frameworku podporována, takže můžeme psát:</p>

<pre>
*** Settings ***
Library             Accumulator6.py
Test setup          Setup method  0
Test teardown       Teardown method
&nbsp;
*** Test Cases ***
Accumulate
    Given accumulator has been zeroed
    When I add "1" to accumulator
     And I add "1" to accumulator
     And I add "-10" to accumulator
    Then the accumulated value should be "-8"
&nbsp;
*** Keywords ***
Accumulator has been zeroed
    log  accumulator init
&nbsp;
I add "${value}" to accumulator
    Add value  ${value}
&nbsp;
Then the accumulated value should be "${expected}"
    Accumulator value should be  ${expected}
</pre>

<p>Výsledek takto upraveného testovacího scénáře:</p>

<pre>
==============================================================================
Test10                                                                        
==============================================================================
Accumulate                                                            | PASS |
------------------------------------------------------------------------------
Test10                                                                | PASS |
1 critical test, 1 passed, 0 failed
1 test total, 1 passed, 0 failed
==============================================================================
Output:  /home/tester/src/Python/robot-framework-examples/article_02/output.xml
Log:     /home/tester/src/Python/robot-framework-examples/article_02/log.html
Report:  /home/tester/src/Python/robot-framework-examples/article_02/report.html
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. BDD testy řízené tabulkou</h2>

<p>I BDD testy je možné řídit tabulkami. Zde se ovšem setkáme s&nbsp;určitým
zkomplikováním testů, protože je nutné použít dvojího mapování klíčových slov.
Nejdříve se z&nbsp;tabulky vytvoří jednotlivé kroky testu, které jsou ovšem
popsány v&nbsp;jazyku Gherkin. A následně se věty z&nbsp;Gherkinu mapují na
nová uživatelsky definovaná klíčová slova. Výsledek může vypadat
následovně:</p>

<pre>
*** Settings ***
Library             Accumulator6.py
Test setup          Setup method  0
Test teardown       Teardown method
Test template       Accumulator operation
&nbsp;
*** Test Cases ***     Value  Expected
Accumulator operation  1      1
Accumulator operation  2      2
&nbsp;
*** Keywords ***
Accumulator operation
                    [Arguments]  ${value}  ${expected}
                    Given accumulator has been zeroed
                    When I add ${value} to accumulator
                    Then the accumulated value should be ${expected}
&nbsp;
Accumulator has been zeroed
    log  accumulator init
&nbsp;
I add ${value} to accumulator
    Add value  ${value}
&nbsp;
Then the accumulated value should be ${expected}
    Accumulator value should be  ${expected}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Vylepšení předchozího příkladu</h2>

<p>Předchozí příklad lze vylepšit a učinit více čitelným. Nejdříve zapíšeme
vlastní testovací scénář, tj.&nbsp;BDD část s&nbsp;tabulkou, a posléze tu méně
důležitou část, tedy mapování vět v&nbsp;BDD/Gherkinu na konkrétní klíčová
slova:</p>

<pre>
*** Settings ***
Library             Accumulator6.py
Test setup          Setup method  0
Test teardown       Teardown method
Test template       Accumulator operation
&nbsp;
*** Keywords ***
Accumulator operation
                    [Arguments]  ${value}  ${expected}
                    Given accumulator has been zeroed
                    When I add ${value} to accumulator
                    Then the accumulated value Should Be ${expected}
&nbsp;
*** Test Cases ***     Value  Expected
Accumulator operation  1      1
Accumulator operation  10     10
&nbsp;
&nbsp;
&nbsp;
*** Keywords ***
Accumulator has been zeroed
    log  accumulator init
&nbsp;
I add ${value} to accumulator
    Add value  ${value}
&nbsp;
Then the accumulated value should be ${expected}
    Accumulator value should be  ${expected}
</pre>

<p><div class="rs-tip-major">Poznámka: na posledních dvou příkladech je patrná
velká flexibilita Robot Frameworku.</div></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/robot-framework-examples">https://github.com/tisnik/robot-framework-examples</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář, můžete namísto toho použít odkazy na jednotlivé příklady, které
naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>test01.robot</td><td>první test akumulátoru implementovaného ve třídě Accumulator1</td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test01.robot">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test01.robot</a></td></tr>
<tr><td> 2</td><td>Accumulator1.py</td><td>první implementace akumulátoru</td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/Accumulator1.py">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/Accumulator1.py</a></td></tr>
<tr><td> 3</td><td>test02.robot</td><td>několik na sobě nezávislých testů</td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test02.robot">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test02.robot</a></td></tr>
<tr><td> 4</td><td>Accumulator2.py</td><td>druhá implementace akumulátoru</td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/Accumulator2.py">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/Accumulator2.py</a></td></tr>
<tr><td> 5</td><td>test03.robot</td><td>několik navzájem závislých testů</td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test03.robot">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test03.robot</a></td></tr>
<tr><td> 6</td><td>Accumulator3.py</td><td>změna rozsahu platnosti objektu s&nbsp;akumulátorem</td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/Accumulator3.py">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/Accumulator3.py</a></td></tr>
<tr><td> 7</td><td>test04.robot</td><td>několik navzájem závislých testů</td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test04.robot">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test04.robot</a></td></tr>
<tr><td> 8</td><td>Accumulator4.py</td><td>změna rozsahu platnosti objektu s&nbsp;akumulátorem</td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/Accumulator4.py">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/Accumulator4.py</a></td></tr>
<tr><td> 9</td><td>test05.robot</td><td>použití <i>setup</i> a <i>teardown</i></td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test05.robot">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test05.robot</a></td></tr>
<tr><td>10</td><td>Accumulator5.py</td><td>implementace metod <strong>setup</strong> a <strong>teardown</strong></td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/Accumulator5.py">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/Accumulator5.py</a></td></tr>
<tr><td>11</td><td>test06.robot</td><td>zákaz <i>setup</i> ve zvoleném testu</td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test06.robot">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test06.robot</a></td></tr>
<tr><td>12</td><td>Accumulator6.py</td><td>implementace metod <strong>setup</strong> a <strong>teardown</strong></td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/Accumulator6.py">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/Accumulator6.py</a></td></tr>
<tr><td>13</td><td>test07.robot</td><td>testy řízené tabulkami</td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test07.robot">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test07.robot</a></td></tr>
<tr><td>14</td><td>test08.robot</td><td>testy řízené tabulkami</td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test08.robot">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test08.robot</a></td></tr>
<tr><td>15</td><td>test09.robot</td><td>jednoduchý BDD test</td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test09.robot">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test09.robot</a></td></tr>
<tr><td>16</td><td>test10.robot</td><td>jednoduchý BDD test se spojkou &bdquo;and&ldquo;</td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test10.robot">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test10.robot</a></td></tr>
<tr><td>17</td><td>test11.robot</td><td>BDD testy řízené tabulkami</td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test11.robot">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test11.robot</a></td></tr>
<tr><td>18</td><td>test12.robot</td><td>vylepšení předchozího příkladu</td><td><a href="https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test12.robot">https://github.com/tisnik/robot-framework-examples/blob/master/article_02/test12.robot</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránka projektu Robot Framework<br />
<a href="https://robotframework.org/">https://robotframework.org/</a>
</li>

<li>GitHub repositář Robot Frameworku<br />
<a href="https://github.com/robotframework/robotframework">https://github.com/robotframework/robotframework</a>
</li>

<li>Robot Framework (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Robot_Framework">https://en.wikipedia.org/wiki/Robot_Framework</a>
</li>

<li>Tutoriál Robot Frameworku<br />
<a href="http://www.robotframeworktutorial.com/">http://www.robotframeworktutorial.com/</a>
</li>

<li>Robot Framework Documentation<br />
<a href="https://robotframework.org/robotframework/">https://robotframework.org/robotframework/</a>
</li>

<li>Robot Framework Introduction<br />
<a href="https://blog.testproject.io/2016/11/22/robot-framework-introduction/">https://blog.testproject.io/2016/11/22/robot-framework-introduction/</a>
</li>

<li>robotframework 3.1.2 na PyPi<br />
<a href="https://pypi.org/project/robotframework/">https://pypi.org/project/robotframework/</a>
</li>

<li>Robot Framework demo (GitHub)<br />
<a href="https://github.com/robotframework/RobotDemo">https://github.com/robotframework/RobotDemo</a>
</li>

<li>Robot Framework web testing demo using SeleniumLibrary<br />
<a href="https://github.com/robotframework/WebDemo">https://github.com/robotframework/WebDemo</a>
</li>

<li>Robot Framework for Mobile Test Automation Demo<br />
<a href="https://www.youtube.com/watch?v=06LsU08slP8">https://www.youtube.com/watch?v=06LsU08slP8</a>
</li>

<li>Gherkin<br />
<a href="https://cucumber.io/docs/gherkin/">https://cucumber.io/docs/gherkin/</a>
</li>

<li>Selenium<br />
<a href="https://selenium.dev/">https://selenium.dev/</a>
</li>

<li>SeleniumLibrary<br />
<a href="https://robotframework.org/">https://robotframework.org/</a>
</li>

<li>The Practical Test Pyramid<br />
<a href="https://martinfowler.com/articles/practical-test-pyramid.html">https://martinfowler.com/articles/practical-test-pyramid.html</a>
</li>

<li>Acceptance Tests and the Testing Pyramid<br />
<a href="http://www.blog.acceptancetestdrivendevelopment.com/acceptance-tests-and-the-testing-pyramid/">http://www.blog.acceptancetestdrivendevelopment.com/acceptance-tests-and-the-testing-pyramid/</a>
</li>

<li>Programovací jazyk Clojure – testování s využitím knihovny Expectations<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/">https://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/</a>
</li>

<li>Programovací jazyk Clojure – některé užitečné triky použitelné (nejenom) v testech<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/">https://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/</a>
</li>

<li>Tab-separated values<br />
<a href="https://en.wikipedia.org/wiki/Tab-separated_values">https://en.wikipedia.org/wiki/Tab-separated_values</a>
</li>

<li>A quick guide about Python implementations<br />
<a href="https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321">https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321</a>
</li>

<li>Python 2.7 will retire in...<br />
<a href="https://pythonclock.org/">https://pythonclock.org/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

