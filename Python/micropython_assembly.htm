<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. Mikrořadiče Cortex-M</a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Cortex-M0 a ostatní architektury a čipy ARM</h2>

<p>Mikroprocesory a mikrořadiče ARM za sebou mají dlouhou dobu vývoje, takže není divu, že postupně vznikaly různé generace těchto čipů, které se odlišovaly jak svým výpočetním výkonem, tak i různými změnami v&nbsp;instrukční sadě, uspořádáním cache, počtem řezů (pipeline), použitými submoduly (hardwarová násobička, dělička, jednotka pro SIMD operace) atd. Čipy ARM je možné rozlišit podle architektury, přičemž základní dělení je naznačeno v&nbsp;následující tabulce:</p> 

<table>
<tr><th>#</th><th>Architektura</th><th>Adresová/datová sběrnice</th><th>Jádro</th><th>Poznámka/profil (u Cortex)</th></tr>
<tr><td>1</td><td>ARMv1   </td><td>26/32 bitů</td><td>ARM1</td><td>první implementace, technologické demo</td></tr>
<tr><td>2</td><td>ARMv2   </td><td>26/32 bitů</td><td>ARM2, ARM3</td><td>přidána HW násobička a MMU</td></tr>
<tr><td>3</td><td>ARMv3   </td><td>26/32 bitů</td><td>ARM6, ARM7</td><td></td></tr>
<tr><td>4</td><td>ARMv4   </td><td>26/32 bitů</td><td>ARM8</td><td>patří sem mj.&nbsp;i řada čipů StrongARM</td></tr>
<tr><td>5</td><td>ARMv5   </td><td>32 bitů   </td><td>ARM7EJ, ARM9E, ARM10E</td><td>lze najít ve starších zařízeních</td></tr>
<tr><td>6</td><td>ARMv6   </td><td>32 bitů   </td><td>ARM11</td><td>dodnes používaná jádra</td></tr>
<tr><td>7</td><td>ARMv6-M </td><td>32 bitů   </td><td>Cortex-M0, Cortex-M0+, Cortex-M1</td><td>mikrořadiče (M v&nbsp;názvu)</td></tr>
<tr><td>8</td><td>ARMv7-M </td><td>32 bitů   </td><td>Cortex-M3</td><td>mikrořadiče (M v&nbsp;názvu)</td></tr>
<tr><td>9</td><td>ARMv7E-M</td><td>32 bitů   </td><td>Cortex-M4, Cortex-M7</td><td>mikrořadiče (M v&nbsp;názvu)</td></tr>
<tr><td>10</td><td>ARMv7-R </td><td>32 bitů   </td><td>Cortex-R4, Cortex-R5, Cortex-R7</td><td>realtime aplikace</td></tr>
<tr><td>11</td><td>ARMv7-A </td><td>32 bitů   </td><td>Cortex-A5, Cortex-A7, Cortex-A8, Cortex-A9, Cortex-A12, Cortex-A15, Cortex-A17</td><td>smartphony atd.</td></tr>
<tr><td>12</td><td>ARMv8-A </td><td>32/64 bitů</td><td>Cortex-A53, A57 a A72</td><td>smartphony atd.</td></tr>
</table>

<img src="http://i.iinfo.cz/images/188/arm1.jpg" class="image-222275" alt="&#160;" height="220" width="220" />
<p><i>Obrázek 3: Čipy StrongARM založené na architektuře ARMv4 byly
v&nbsp;minulosti velmi oblíbené. Zajímavé je, že původně tyto čipy vyvinula
společnost Digital Equipment Corporation ve spolupráci s&nbsp;firmou ARM a
později byla tato technologie prodána Intelu.</i></p>

<p>Poznámky:</p>

<ul>

<li>U čipů prvních dvou architektur ARMv1 a ARMv2 nebyly použity cache (ani
paměťová ani datová), ovšem i samotné CPU byly relativně pomalé (hodinová
frekvence 8MHz), takže se tehdy nejednalo o úzké hrdlo systému.</li>

<li>Můžeme zde vidět dělení na &bdquo;klasická&ldquo; jádra a
&bdquo;Cortex&ldquo; jádra.</li>

<li>V&nbsp;nových elektronických zařízeních se již s&nbsp;prvními čtyřmi
generacemi čipů většinou nesetkáme.</li>

<li>ARM11 je (poněkud zjednodušeně řečeno) poslední doposud masově používané
&bdquo;klasické&ldquo; jádro a současně i základ pro velké množství čipů
používaných v&nbsp;různých mobilních zařízeních.</li>

<li>Nové mikroprocesory a mikrořadiče ARM jsou děleny do třech skupin:
<u>A</u>pplication, <u>R</u>ealtime, <u>M</u>icrocontroller (název první
skupiny pravděpodobně vznikl ze snahy o její &bdquo;napasování&ldquo; na
zkratku ARM).</li>

<li>Populární mikropočítač Raspberry používá čip s&nbsp;mikroarchitekturou
ARM1176JZF-S, kde prefix ARM1176 značí třetí typ jádra ARM11.</li>

<li>Právě ARM11 se některými svými vlastnostmi blíží čipům Cortex-M0 a
Cortex-M0+, jimiž se dnes budeme zabývat (ARM11 je však určen pro výkonnější
aplikace, opět si připomeňme Raspberry a podobná zařízení).</li>

</ul>

<img src="http://i.iinfo.cz/images/566/arm2.jpg" class="image-222276" alt="&#160;" height="394" width="350" />
<p><i>Obrázek 4: Dnes již historický kousek: osobní mikropočítač vybavený
mikroprocesorem s&nbsp;architekturou ARM.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Mikrořadiče Cortex-M</h2>

<p>Již při letmém pohledu na druhou polovinu tabulky, kterou jsme si ukázali <a href="#k02">v&nbsp;předchozí kapitole</a>, je patrné, že novější architektury ARM tvoří základ pro jádra třech navzájem odlišných typů čipů. Jedná se o řadu <i>Cortex-M</i>, kde nalezneme jádra určená především pro použití v&nbsp;mikrořadičích (s&nbsp;různým výpočetním výkonem a energetickými nároky), dále pak o řadu <i>Cortex-R</i> určenou pro realtime aplikace (tato jádra jsou mnohdy vybavena instrukcemi typu SIMD) a konečně o řadu <i>Cortex-A</i>, kam patří jak relativně málo výkonné čipy použitelné například v&nbsp;set-top boxech, tak i čipy určené pro servery apod. (tato jádra jsou mnohdy vybavena i matematickým koprocesorem, podporou pro kooperaci většího množství jader, podporou pro adresování až jednoho terabajtu RAM atd.). Pojďme se nyní zaměřit na řadu <i>Cortex-M</i>, tedy na rodinu jader určených pro různě výkonné mikrořadiče:</p>

<table>
<tr><th>#</th><th>Jádro     </th><th>Architektura ARM</th><th>Architektura CPU/MCU</th><th>MPU</th></tr>
<tr><td>1</td><td>Cortex-M0 </td><td>ARMv6-M</td><td>Von Neumann</td><td>ne</td></tr>
<tr><td>2</td><td>Cortex-M0+</td><td>ARMv6-M</td><td>Von Neumann</td><td>volitelná</td></tr>
<tr><td>3</td><td>Cortex-M1 </td><td>ARMv6-M</td><td>Von Neumann</td><td>ne</td></tr>
<tr><td>4</td><td>Cortex-M3 </td><td>ARMv7-M</td><td>Harvardská</td><td>volitelná</td></tr>
<tr><td>5</td><td>Cortex-M4 </td><td>ARMv7E-M</td><td>Harvardská</td><td>volitelná</td></tr>
<tr><td>6</td><td>Cortex-M7 </td><td>ARMv7E-M</td><td>Harvardská</td><td>volitelná</td></tr>
</table>

<p>Vidíme, že do řady <i>Cortex-M</i> spadá celkem šest odlišných typů jader, která jsou založena na architektuře ARMv6-M, ARMv7-M či ARMv7E-M. Důležité je si uvědomit, že každá z&nbsp;těchto architektur má odlišné vlastnosti a obecně i jinou instrukční sadu, z&nbsp;čehož také vyplývá, že například mikrořadiče postavené na jádru <i>Cortex-M3</i> nebudou binárně kompatibilní s&nbsp;mikrořadiči s&nbsp;jádrem <i>Cortex-M0</i> atd. To však v&nbsp;dnešní době nepředstavuje závažný problém, minimálně ne tak velký, jako je tomu na platformě Wintel.</p>

<p><div class="rs-tip-major">Poznámka: MPU zde má skutečně význam jednotky pro ochranu vybraných oblastí
(regionů) paměti. Nejedná se o jednotku zajišťující virtualizaci paměti (někdy
se totiž tyto dvě funkce realizují společně).</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p>Podívejme se nyní podrobněji na to, co mají jednotlivá jádra z&nbsp;řady <i>Cortex-M</i> společného a čím se od sebe odlišují. Asi nejdůležitější společnou vlastností je, že <i>Cortex-M</i> nepodporuje původní 32bitovou RISCovou instrukční sady (zde označovanou A32). Namísto toho je podporována instrukční sada <i>Thumb</i> a u některých jader i <i>Thumb-2</i>. Jednodušší jádra nemají hardwarovou děličku ani modul pro DSP operace. Všechny tyto vlastnosti jsou přehledně vypsány v&nbsp;další tabulce:</p>

<table>
<tr><th>#</th><th>Jádro     </th><th>Dělička</th><th>DSP</th><th>A32</th><th>Thumb</th><th>Thumb-2</th></tr>
<tr><td>1</td><td>Cortex-M0 </td><td>ne </td><td>ne </td><td>ne</td><td>kromě 3 instrukcí</td><td>částečně</td></tr>
<tr><td>2</td><td>Cortex-M0+</td><td>ne </td><td>ne </td><td>ne</td><td>kromě 3 instrukcí</td><td>částečně</td></tr>
<tr><td>3</td><td>Cortex-M1 </td><td>ne </td><td>ne </td><td>ne</td><td>kromě 3 instrukcí</td><td>částečně</td></tr>
<tr><td>4</td><td>Cortex-M3 </td><td>ano</td><td>ne </td><td>ne</td><td>kompletně</td><td>kompletně</td></tr>
<tr><td>5</td><td>Cortex-M4 </td><td>ano</td><td>ano</td><td>ne</td><td>kompletně</td><td>kompletně</td></tr>
<tr><td>6</td><td>Cortex-M7 </td><td>ano</td><td>ano</td><td>ne</td><td>kompletně</td><td>kompletně</td></tr>
</table>

<p>Jak je tomu se vzájemnou binární kompatibilitou? Program přeložený pro Cortex-M0 či Cortex-M0+ bude možné provozovat i na vyšších jádrech bez nutnosti jeho modifikace (za předpokladu volby stejného pořadí bajtů &ndash; little či big endian). Podobně kód pro Cortex-M3 lze spustit na čipech s&nbsp;jádrem Cortex-M4 či Cortex-M7. Žádný z&nbsp;těchto čipů pochopitelně nedokáže pracovat s&nbsp;kódem používajícím instrukce A32 či s&nbsp;kódem, který používá například rozšíření Neon (SIMD), Jazelle (Java bajtkód), ThumbEE (dtto) atd.</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti se binární kompatibilita ve světě ARMu příliš neřeší, už jen kvůli současné existenci 32bitové i 64bitové architektury atd.</div></p>

<a href="http://www.root.cz/obrazek/222278/"><img src="http://i.iinfo.cz/images/61/arm4-prev.jpg" class="image-222278" alt="&#160;" height="262" width="370" /></a>
<p><i>Obrázek 6: Čipy s&nbsp;jádrem ARM nalezneme i v&nbsp;některých herních
konzolích.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Mikrořadiče Cortex-M0 a Cortex-M0+</h2>

<p>Jádro <i>Cortex-M0</i> tvoří základ pro čipy, u nichž je žádoucí dosáhnout co nejnižší výrobní ceny, malých rozměrů a malého příkonu (s&nbsp;tím samozřejmě souvisí i příslušně nízký výpočetní výkon). Tato jádra by měla postupně nahrazovat některé aplikace, v&nbsp;nichž se nyní používají osmibitové mikrořadiče. Malé plochy čipu se skutečně podařilo dosáhnout, protože nejmenší vyráběný integrovaný obvod s&nbsp;jádrem <i>Cortex-M0</i> má plochu přibližně 1,6&times;2 mm. I spotřeba je velmi nízká, protože dosahuje 12.5µW na každý MHz při použití napětí 1,2V a 64µW na každý MHz při napětí 1,8V (teoreticky roste spotřeba s&nbsp;hodinovou frekvencí lineárně a s&nbsp;napětím kvadraticky, mimochodem hodinová frekvence těchto jader dosahuje podle provedení až několika desítek až stovek MHz, typicky 48 MHz, 80 MHz či 120 MHz).  Toto jádro je naprogramované ve Verilogu a po technologické stránce je zajímavé tím, že se interně používá pipeline se třemi řezy, na rozdíl od jádra <i>Cortex-M0+</i> popsaného v&nbsp;navazujícím textu.</p>

<img src="http://i.iinfo.cz/images/47/arm5.jpg" class="image-222279" alt="&#160;" height="234" width="390" />
<p><i>Obrázek 7: Čipy XMC4000 založené na jádru Cortex-M0.<br />
Autor původní fotky: Davewave88.</i></p>

<p>Vzhledem k&nbsp;tomu, že jádra <i>Cortex-M0</i> jsou používána v&nbsp;aplikacích, kde se požaduje velmi nízký příkon CPU (například různá zařízení s&nbsp;baterií či monočlánkem), podporují tyto čipy hned několik režimů &bdquo;uspání&ldquo; (<i>sleep mode</i>). V&nbsp;základním režimu <i>sleep</i> se jednoduše sníží hodinová frekvence až na 0 Hz, ovšem kromě toho lze použít i režim nazvaný <i>deep sleep</i>, při jehož aktivaci se od napájení odpojí i flash paměť atd. Při práci s&nbsp;různými režimy CPU slouží i instrukce <strong>WFI</strong> (<i>Wait For Interrupt</i>) a <strong>WFE</strong> a (<i>Wait for Event</i>). První instrukce čeká na vznik výjimky, přerušení či signálu od debuggeru, druhá instrukce pak na nemaskovanou výjimku, událost přijatou od některého koprocesoru či opět na signál od debuggeru.</p>

<p>O tom, že jádro <i>Cortex-M0</i> je skutečně navrženo takovým způsobem, aby mohlo spotřebou energie a částečně i cenou soutěžit s&nbsp;jednoduššími a levnějšími mikrořadiči, svědčí i způsob vyřešení násobičky. V&nbsp;instrukční sadě Thumb nalezneme mj.&nbsp;i instrukci MULS určenou pro násobení dvou 32bitových operandů, přičemž výsledek je taktéž 32bitový (zapamatuje se jen spodních 32bitů výsledku). Při implementaci mikroprocesoru je možné zvolit, jakým typem násobičky se tato instrukce bude provádět. Pokud se má jednat o výkonnější čip (a aplikace násobení skutečně využije), může se použít rychlá násobička, která celou operaci dokáže provést v&nbsp;jediném taktu (samozřejmě se měření provádí při postupně zaplňované pipeline). Pokud se ovšem má jednat o levnější a méně výkonný čip, lze násobení implementovat po krocích (sčítání+bitové posuny), což sice trvá celých 32 taktů, ovšem potřebná plocha čipu a i energetická náročnost je mnohem menší, než v&nbsp;případě jednocyklové násobičky.</p>

<img src="http://i.iinfo.cz/images/610/arm7.jpg" class="image-222281" alt="&#160;" height="344" width="390" />
<p><i>Obrázek 9: Mezi další čipy založené na jádru Cortex-M0 patří integrované
obvody STM32 F0.</i></p>

<p>Na mikrořadiče <i>Cortex-M0+</i> se můžeme dívat jako na vylepšení původních jader <i>Cortex-M0</i>. Interně se ovšem jedná o odlišně navržená jádra, protože <i>Cortex-M0+</i> obsahuje pipeline pouze se dvěma řezy a nikoli s&nbsp;řezy třemi (vlastně se tak vracíme na samotný začátek platformy ARM). Co je však pro případné uživatele důležitější &ndash; i díky zmenšenému počtu řezů pipeline se podařilo dále snížit spotřebu a přitom zachovat obousměrnou kompatibilitu s&nbsp;původními jádry <i>Cortex-M0</i>. Spotřeba klesá až na hodnoty 9.8µW na MHz, takže tato jádra mohou nalézt uplatnění i v&nbsp;tak (prozatím) veskrze zbytečných zařízeních, jako jsou chytré hodinky :-) apod.  Opět je možné si zvolit způsob implementace násobičky (rychlá versus energeticky nenáročná) a nově i to, zda se má použít jednotka MPU. Čipů s&nbsp;tímto jádrem existuje celá řada, například je vyrábí firmy Atmel, Freescale, STMicroelectronics či NXP Semiconductors.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instrukční sada mikrořadičů Cortex-M0+</h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>MCU market turns to 32-bits and ARM<br />
<a href="http://www.eetimes.com/document.asp?doc_id=1280803">http://www.eetimes.com/document.asp?doc_id=1280803</a>
</li>

<li>Cortex-M0 Processor (ARM Holdings)<br />
<a href="http://www.arm.com/products/processors/cortex-m/cortex-m0.php">http://www.arm.com/products/processors/cortex-m/cortex-m0.php</a>
</li>

<li>Cortex-M0+ Processor (ARM Holdings)<br />
<a href="http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php">http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php</a>
</li>

<li>ARM Processors in a Mixed Signal World<br />
<a href="http://www.eeweb.com/blog/arm/arm-processors-in-a-mixed-signal-world">http://www.eeweb.com/blog/arm/arm-processors-in-a-mixed-signal-world</a>
</li>

<li>ARM Architecture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_architecture">https://en.wikipedia.org/wiki/ARM_architecture</a>
</li>

<li>Cortex-M0 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_Cortex-M0">https://en.wikipedia.org/wiki/ARM_Cortex-M0</a>
</li>

<li>Cortex-M0+ (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M0.2B">https://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M0.2B</a>
</li>

<li>Improving ARM Code Density and Performance<br />
<a href="New Thumb Extensions to the ARM Architecture Richard Phelan">New Thumb Extensions to the ARM Architecture Richard Phelan</a>
</li>

<li>The ARM Processor Architecture<br />
<a href="http://www.arm.com/products/processors/technologies/instruction-set-architectures.php">http://www.arm.com/products/processors/technologies/instruction-set-architectures.php</a>
</li>

<li>Thumb-2 instruction set<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0344c/Beiiegaf.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0344c/Beiiegaf.html</a>
</li>

<li>Introduction to ARM thumb<br />
<a href="http://www.eetimes.com/discussion/other/4024632/Introduction-to-ARM-thumb">http://www.eetimes.com/discussion/other/4024632/Introduction-to-ARM-thumb</a>
</li>

<li>ARM, Thumb, and ThumbEE instruction sets<br />
<a href="http://www.keil.com/support/man/docs/armasm/armasm_CEGBEIJB.htm">http://www.keil.com/support/man/docs/armasm/armasm_CEGBEIJB.htm</a>
</li>

<li>An Introduction to ARM Assembly Language<br />
<a href="http://dev.emcelettronica.com/introduction-to-arm-assembly-language">http://dev.emcelettronica.com/introduction-to-arm-assembly-language</a>
</li>

<li>Processors - ARM<br />
<a href="http://www.arm.com/products/processors/index.php">http://www.arm.com/products/processors/index.php</a>
</li>

<li>The ARM Instruction Set<br />
<a href="http://simplemachines.it/doc/arm_inst.pdf">http://simplemachines.it/doc/arm_inst.pdf</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

