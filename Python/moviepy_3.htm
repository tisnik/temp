<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Použití MoviePy společně Matplotlibem pro tvorbu animovaných grafů (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Použití MoviePy společně Matplotlibem pro tvorbu animovaných grafů (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části článku o knihovně MoviePy dokončíme téma, kterému jsme se věnovali minule. Ukážeme si, jak lze s využitím knihoven MoviePy + Matplotlib vytvořit animované průběhy funkcí využitelné mj. i při výuce. Také se seznámíme s modulem Animation.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Použití MoviePy společně Matplotlibem pro tvorbu animovaných grafů (dokončení)</a></p>
<p><a href="#k02">*** 2. Lorenzův atraktor</a></p>
<p><a href="#k03">*** 3. Zobrazení Lorenzova atraktoru (statický graf)</a></p>
<p><a href="#k04">*** 4. Animace Lorenzova atraktoru</a></p>
<p><a href="#k05">*** 5. Zobrazení dvou atraktorů s&nbsp;různými počátečními podmínkami</a></p>
<p><a href="#k06">*** 6. Aproximace funkcí Taylorovým polynomem</a></p>
<p><a href="#k07">*** 7. Skript pro vykreslení sinusovky aproximované Taylorovým polynomem</a></p>
<p><a href="#k08">*** 8. Animace vlivu postupného přidávání členů do Taylorova polynomu na tvar aproximované funkce (sinusovky)</a></p>
<p><a href="#k09">*** 9. Reprezentace periodického průběhu pomocí funkcí sin a cos (Fourierova řada)</a></p>
<p><a href="#k10">*** 10. Statický graf &ndash; rekonstrukce obdélníkového signálu</a></p>
<p><a href="#k11">*** 11. Animace postupného zvyšování členů ve Fourierově řadě</a></p>
<p><a href="#k12">*** 12. Problematika vykreslení komplexních funkcí</a></p>
<p><a href="#k13">*** 13. Obarvení komplexních hodnot</a></p>
<p><a href="#k14">*** 14. Zobrazení 2D grafu s&nbsp;komplexní funkcí</a></p>
<p><a href="#k15">*** 15. Ukázky vytvořených grafů s&nbsp;komplexními funkcemi</a></p>
<p><a href="#k16">*** 16. Animace v&nbsp;grafech zobrazujících komplexní funkce</a></p>
<p><a href="#k17">*** 17. Vylepšení předchozího příkladu</a></p>
<p><a href="#k18">*** 18. Modul <strong>Animation</strong> dostupný v&nbsp;knihovně Matplotlib</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Použití MoviePy společně Matplotlibem pro tvorbu animovaných grafů (dokončení)</h2>

<p>Ve třetím článku o knihovně MoviePy se opět budeme zabývat způsobem kombinace MoviePy s&nbsp;Matplotlibem při tvorbě animovaných grafů, které je možné využít například při výuce. Z&nbsp;tohoto důvodu si ukážeme i některé poměrně typické příklady používané při výuce &ndash; aproximace průběhu funkce Taylorovým polynomem, reprezentace periodické funkce Fourierovou řadou, vykreslení komplexních funkcí atd.</p>

<p>V&nbsp;závěru dnešního článku se seznámíme s&nbsp;modulem <strong>Animation</strong>, který je dostupný přímo v&nbsp;Matplotlibu. Tento modul umožňuje vytváření animací bez použití knihovny MoviePy.</p>

<a href="https://www.root.cz/obrazek/328090/"><img src="https://i.iinfo.cz/images/464/matplotlib-previews-19-prev.png" class="image-328090" alt="&#160;" width="358" height="270" /></a>
<p><i>Obrázek 1: Spirála vykreslená předchozím demonstračním příkladem popsaným
minule.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Lorenzův atraktor</h2>

<p>Poměrně vděčným příkladem funkce zobrazené v&nbsp;3D prostoru je dynamický
systém s&nbsp;takzvaným <i>podivným atraktorem</i>, který je nazvaný
<i>Lorenzův atraktor</i> podle svého objevitele. Tento systém sestávající ze
tří dynamických rovnic použil <a
href="https://en.wikipedia.org/wiki/Edward_Norton_Lorenz">Edward Lorenz</a>
v&nbsp;roce 1963 při simulaci vývoje počasí (resp.&nbsp;ve velmi zjednodušeném
modelu počasí). Na tomto systému byla také numericky a analyticky ověřena velká
citlivost na počáteční podmínky (někdy také nazývaná &bdquo;motýlí efekt&ldquo;
neboli &bdquo;butterfly effect&ldquo;). Pro upřesnění je však nutné říci, že
při simulaci na počítači vlastně získáme atraktor, jenž je periodický. Je to
z&nbsp;toho důvodu, že pro zobrazení číselných hodnot je použito konečného
počtu bitů, z&nbsp;toho nutně vyplývá, že se po určitém počtu kroků (který je
však obrovský, takže tento jev mnohdy nezaregistrujeme) začne dráha Lorenzova
atraktoru překrývat. V&nbsp;matematicky přesném modelu však tato situace
nenastane, každá smyčka funkce bude mít unikátní tvar a dráhy se nebudou
překrývat, pouze protínat. Diferenciální rovnice Lorenzova atraktoru mají po
převodu na diferenční tvar následující formát:</p>

<pre>
dx/dt = &sigma; (y-x)
dy/dt = x(&rho; - z) - y
dz/dt = xy - &Beta;z
</pre>

<p>Takže pro iterativní (samozřejmě že nepřesný) výpočet můžeme pracovat
s&nbsp;následujícími vztahy, které pro dostatečně malé <i>dt</i> vedou
k&nbsp;výpočtu bodů ležících na Lorenzově atraktoru:</p>

<pre>
x<sub>n+1</sub>=x<sub>n</sub>+(&sigma; (y-x)) dt
y<sub>n+1</sub>=y<sub>n</sub>+(x(&rho; - z) - y) dt
z<sub>n+1</sub>=z<sub>n</sub>+(xy - &Beta;z) dt
</pre>

<p>Podívejme se nyní na jeden ze způsobů implementace této funkce:</p>

<pre>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s*(y - x)
    y_dot = r*x - y - x*z
    z_dot = x*y - b*z
    return x_dot, y_dot, z_dot
</pre>

<p>A výpočtu sekvence bodů ležících na atraktoru:</p>

<pre>
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0., 1., 1.05)
&nbsp;
<i># vlastní výpočet atraktoru (resp. bodů na něm ležících)</i>
for i in range(n-1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i+1] = x[i] + x_dot * dt
    y[i+1] = y[i] + y_dot * dt
    z[i+1] = z[i] + z_dot * dt
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zobrazení Lorenzova atraktoru (statický graf)</h2>

<p>Vlastní zobrazení pak probíhá naprosto stejným způsobem, jako tomu bylo <a
href="https://www.root.cz/clanky/pouziti-moviepy-spolecne-s-matplotlibem-pro-tvorbu-animovanych-grafu/#k18">v&nbsp;předchozím
demonstračním příkladu</a> se spirálou:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># Knihovny Numpy a matplotlib</i>
<i>#</i>
<i># - Lorenzův atraktor</i>
&nbsp;
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s*(y - x)
    y_dot = r*x - y - x*z
    z_dot = x*y - b*z
    return x_dot, y_dot, z_dot
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 10000
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0., 1., 1.05)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n-1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i+1] = x[i] + x_dot * dt
    y[i+1] = y[i] + y_dot * dt
    z[i+1] = z[i] + z_dot * dt
&nbsp;
fig = plt.figure()
ax = fig.gca(projection='3d')
&nbsp;
<i># vykreslení grafu</i>
ax.plot(x, y, z)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek X: Lorenzův atraktor vykreslený předchozím demonstračním
příkladem.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Animace Lorenzova atraktoru</h2>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># Knihovny Numpy a matplotlib</i>
<i>#</i>
<i># - Lorenzův atraktor</i>
&nbsp;
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np
from moviepy.editor import VideoClip
from moviepy.video.io.bindings import mplfig_to_npimage
&nbsp;
&nbsp;
<i># parametry obrázků / rámců</i>
WIDTH = 400
HEIGHT = 300
DPI = 100
&nbsp;
<i># parametry animace</i>
DURATION = 16
FPS = 8
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def lorenz(x, y, z, s=10, r=28, b=2.667):
    x_dot = s*(y - x)
    y_dot = r*x - y - x*z
    z_dot = x*y - b*z
    return x_dot, y_dot, z_dot
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
&nbsp;
fig = plt.figure(figsize=(1.0 * WIDTH / DPI, 1.0 * HEIGHT / DPI), dpi=DPI)
axis = fig.add_subplot(111, projection="3d")
&nbsp;
max = 0
&nbsp;
def make_frame(t):
    axis.clear()
&nbsp;
    global max
&nbsp;
    <i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
    n = 10 + max * 10
&nbsp;
    max += 1
&nbsp;
    <i># prozatím prázdné pole připravené pro výpočet</i>
    x = np.zeros((n,))
    y = np.zeros((n,))
    z = np.zeros((n,))
&nbsp;
    <i># počáteční hodnoty</i>
    x[0], y[0], z[0] = (0., 1., 1.05)
&nbsp;
    <i># vlastní výpočet atraktoru</i>
    for i in range(n-1):
        x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
        x[i+1] = x[i] + x_dot * dt
        y[i+1] = y[i] + y_dot * dt
        z[i+1] = z[i] + z_dot * dt
&nbsp;
    ax = fig.gca(projection='3d')
&nbsp;
    ax.set_axis_off()
&nbsp;
    ax.plot(x, y, z)
&nbsp;
    <i># konverze na objekt typu "frame"</i>
    return mplfig_to_npimage(fig)
&nbsp;
&nbsp;
animation = VideoClip(make_frame, duration=DURATION)
<i># animation.write_gif('lorenz1.gif', fps=FPS)</i>
animation.write_videofile('lorenz1.ogv', fps=FPS, progress_bar=True)
</pre>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># Knihovny Numpy a matplotlib</i>
<i>#</i>
<i># - Lorenzův atraktor</i>
&nbsp;
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np
from moviepy.editor import VideoClip
from moviepy.video.io.bindings import mplfig_to_npimage
&nbsp;
&nbsp;
<i># parametry obrázků / rámců</i>
WIDTH = 600
HEIGHT = 450
DPI = 100
&nbsp;
<i># parametry animace</i>
DURATION = 16
FPS = 16
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def lorenz(x, y, z, s=10, r=28, b=2.667):
    x_dot = s*(y - x)
    y_dot = r*x - y - x*z
    z_dot = x*y - b*z
    return x_dot, y_dot, z_dot
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
&nbsp;
fig = plt.figure(figsize=(1.0 * WIDTH / DPI, 1.0 * HEIGHT / DPI), dpi=DPI)
axis = fig.add_subplot(111, projection="3d")
&nbsp;
max = 0
&nbsp;
def make_frame(t):
    axis.clear()
&nbsp;
    global max
&nbsp;
    <i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
    n = 10 + max * 10
&nbsp;
    max += 1
&nbsp;
    <i># prozatím prázdné pole připravené pro výpočet</i>
    x = np.zeros((n,))
    y = np.zeros((n,))
    z = np.zeros((n,))
&nbsp;
    <i># počáteční hodnoty</i>
    x[0], y[0], z[0] = (0., 1., 1.05)
&nbsp;
    <i># vlastní výpočet atraktoru</i>
    for i in range(n-1):
        x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
        x[i+1] = x[i] + x_dot * dt
        y[i+1] = y[i] + y_dot * dt
        z[i+1] = z[i] + z_dot * dt
&nbsp;
    ax = fig.gca(projection='3d')
&nbsp;
    <i># rozměry grafu ve směru osy x</i>
    ax.set_xlim(-35, 35)
&nbsp;
    <i># rozměry grafu ve směru osy y</i>
    ax.set_ylim(-35, 35)
&nbsp;
    <i># rozměry grafu ve směru osy z</i>
    ax.set_zlim(0, 50)
&nbsp;
    ax.plot(x, y, z)
&nbsp;
    <i># konverze na objekt typu "frame"</i>
    return mplfig_to_npimage(fig)
&nbsp;
&nbsp;
animation = VideoClip(make_frame, duration=DURATION)
<i># animation.write_gif('lorenz2.gif', fps=FPS)</i>
animation.write_videofile('lorenz2.ogv', fps=FPS, progress_bar=True, bitrate="800000")
</pre>


<p><a name="k05"></a></p>
<h2 id="k05">5. Zobrazení dvou atraktorů s&nbsp;různými počátečními podmínkami</h2>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># Knihovny Numpy a matplotlib</i>
<i>#</i>
<i># - Lorenzův atraktor</i>
&nbsp;
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np
from moviepy.editor import VideoClip
from moviepy.video.io.bindings import mplfig_to_npimage
&nbsp;
&nbsp;
<i># parametry obrázků / rámců</i>
WIDTH = 600
HEIGHT = 450
DPI = 100
&nbsp;
<i># parametry animace</i>
DURATION = 10
FPS = 20
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def lorenz(x, y, z, s=10, r=28, b=2.667):
    x_dot = s*(y - x)
    y_dot = r*x - y - x*z
    z_dot = x*y - b*z
    return x_dot, y_dot, z_dot
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
&nbsp;
fig = plt.figure(figsize=(1.0 * WIDTH / DPI, 1.0 * HEIGHT / DPI), dpi=DPI)
axis = fig.add_subplot(111, projection="3d")
&nbsp;
max = 0
&nbsp;
&nbsp;
def draw_attractor(ax, n, x0, y0, z0):
    <i># prozatím prázdné pole připravené pro výpočet</i>
    x = np.zeros((n,))
    y = np.zeros((n,))
    z = np.zeros((n,))
&nbsp;
    <i># počáteční hodnoty</i>
    x[0], y[0], z[0] = x0, y0, z0
&nbsp;
    <i># vlastní výpočet atraktoru</i>
    for i in range(n-1):
        x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
        x[i+1] = x[i] + x_dot * dt
        y[i+1] = y[i] + y_dot * dt
        z[i+1] = z[i] + z_dot * dt
&nbsp;
    ax.plot(x, y, z)
&nbsp;
&nbsp;
def make_frame(t):
    axis.clear()
&nbsp;
    global max
&nbsp;
    <i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
    n = 10 + max * 10
&nbsp;
    ax = fig.gca(projection='3d')
    max += 1
&nbsp;
    <i># rozměry grafu ve směru osy x</i>
    ax.set_xlim(-30, 30)
&nbsp;
    <i># rozměry grafu ve směru osy y</i>
    ax.set_ylim(-30, 30)
&nbsp;
    <i># rozměry grafu ve směru osy z</i>
    ax.set_zlim(0, 50)
&nbsp;
    draw_attractor(ax, n, 0.0, 1.0, 0.95)
    draw_attractor(ax, n, 0.0, 1.0, 1.25)
&nbsp;
    <i># konverze na objekt typu "frame"</i>
    return mplfig_to_npimage(fig)
&nbsp;
&nbsp;
animation = VideoClip(make_frame, duration=DURATION)
<i># animation.write_gif('lorenz2.gif', fps=FPS)</i>
animation.write_videofile('lorenz3.ogv', fps=FPS, progress_bar=True, bitrate="800000")
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Aproximace funkcí Taylorovým polynomem</h2>

<p>Oblíbeným </p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Skript pro vykreslení sinusovky aproximované Taylorovým polynomem</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
def <strong>taylor_series</strong>(x, order):
    <i>"""Výpočet aproximace hodnoty funkce pomocí Taylorovy řady."""</i>
    a = x
    sum = a
    for i in range(1, order):
        a *= -1 * x**2 / ((2 * i) * (2 * i + 1))
        sum += a
    return sum
&nbsp;
&nbsp;
<i># průběh nezávislé proměnné x</i>
<i># (hodnoty na x-ové ose)</i>
x = np.linspace(-20, 20, 500)
&nbsp;
<i># funkce kterou aproximujeme</i>
y = np.sin(x)
&nbsp;
<i># vykreslení původní funkce</i>
plt.plot(x, y, label='sin(x)')
&nbsp;
ys = np.vectorize(taylor_series)
&nbsp;
<i># aproximace</i>
N = 10
&nbsp;
for order in range(1, N+1):
    approx = ys(x, order)
    plt.plot(x, approx, label='order {o}'.format(o=order))
&nbsp;
<i># limity na ose y</i>
plt.ylim([-3, 3])
&nbsp;
<i># legenda grafu</i>
plt.legend()
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Animace vlivu postupného přidávání členů do Taylorova polynomu na tvar aproximované funkce (sinusovky)</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i># Knihovny Numpy a matplotlib</i>
<i>#</i>
<i># Demonstrační příklad:</i>
<i># - vykreslení postupné aproximace funkce sin</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
from moviepy.editor import VideoClip
from moviepy.video.io.bindings import mplfig_to_npimage
&nbsp;
&nbsp;
<i># parametry animace</i>
DURATION = 20
FPS = 0.8
&nbsp;
&nbsp;
def <strong>taylor_series</strong>(x, order):
    <i>u"""Výpočet aproximace hodnoty funkce pomocí Taylorovy řady."""</i>
    a = x
    sum = a
    for i in range(1, order):
        a *= -1 * x**2 / ((2 * i) * (2 * i + 1))
        sum += a
    return sum
&nbsp;
&nbsp;
<i># průběh nezávislé proměnné x</i>
<i># (hodnoty na x-ové ose)</i>
x = np.linspace(-20, 20, 500)
&nbsp;
<i># funkce kterou aproximujeme</i>
y = np.sin(x)
&nbsp;
ys = np.vectorize(taylor_series)
&nbsp;
<i># vytvoření objektu reprezentujícího průběh funkce</i>
fig, axis = plt.subplots()
&nbsp;
<i># zde začínáme od nuly!</i>
<i># viz: https://github.com/Zulko/moviepy/issues/155</i>
order = 0
&nbsp;
&nbsp;
def <strong>make_frame</strong>(t):
    axis.clear()
&nbsp;
    <i># vykreslení původní funkce</i>
    axis.plot(x, y, label='sin(x)')
&nbsp;
    <i># aproximace</i>
    global order
    approx = ys(x, order)
&nbsp;
    axis.plot(x, approx, label='order {o}'.format(o=order))
    order += 1
&nbsp;
    <i># limity na ose y</i>
    axis.set_ylim([-3, 3])
    axis.legend()
&nbsp;
    <i># konverze na objekt typu "frame"</i>
    return mplfig_to_npimage(fig)
&nbsp;
&nbsp;
animation = VideoClip(make_frame, duration=DURATION)
animation.write_gif('taylor_sinus.gif', fps=FPS)
<i># animation.write_videofile('taylor_sinus.ogv', fps=FPS)</i>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Reprezentace periodického průběhu pomocí funkcí sin a cos (Fourierova řada)</h2>

<p></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Statický graf &ndash; rekonstrukce obdélníkového signálu</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
def <strong>fourier_serie</strong>(x, order):
    sum = 0
    for i in range(0, order):
        n = 2 * i + 1
        a = np.sin(x * n) / n
        sum += a
    return sum
&nbsp;
&nbsp;
<i># průběh nezávislé proměnné x</i>
<i># (hodnoty na x-ové ose)</i>
x = np.linspace(-4, 4, 500)
&nbsp;
<i># funkce kterou aproximujeme</i>
y = np.sin(x)
&nbsp;
ys = np.vectorize(fourier_serie)
&nbsp;
<i># Fourierova syntéza</i>
N = 4
&nbsp;
for order in range(1, N+1):
    approx = ys(x, order)
    plt.plot(x, approx, label='order {o}'.format(o=order))
&nbsp;
<i># limity na ose y</i>
plt.ylim([-1, 1])
&nbsp;
<i># legenda grafu</i>
plt.legend()
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Animace postupného zvyšování členů ve Fourierově řadě</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i># Knihovny Numpy a matplotlib</i>
<i>#</i>
<i># Demonstrační příklad:</i>
<i># - vykreslení rozkladu obdélníkového signálu na sinusové průběhy</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
from moviepy.editor import VideoClip
from moviepy.video.io.bindings import mplfig_to_npimage
&nbsp;
&nbsp;
<i># parametry animace</i>
DURATION = 20
FPS = 0.8
&nbsp;
&nbsp;
def <strong>fourier_serie</strong>(x, order):
    sum = 0
    for i in range(0, order):
        n = 2 * i + 1
        a = np.sin(x * n) / n
        sum += a
    return sum
&nbsp;
&nbsp;
<i># průběh nezávislé proměnné x</i>
<i># (hodnoty na x-ové ose)</i>
x = np.linspace(-4, 4, 500)
&nbsp;
<i># funkce kterou aproximujeme</i>
y = np.sin(x)
&nbsp;
ys = np.vectorize(fourier_serie)
&nbsp;
<i># vytvoření objektu reprezentujícího průběh funkce</i>
fig, axis = plt.subplots()
&nbsp;
<i># zde začínáme od nuly!</i>
<i># viz: https://github.com/Zulko/moviepy/issues/155</i>
order = 0
&nbsp;
def <strong>make_frame</strong>(t):
    axis.clear()
&nbsp;
    <i># Fourierova syntéza</i>
    global order
    approx = ys(x, order)
&nbsp;
    axis.plot(x, approx, label='order {o}'.format(o=order))
    order += 1
&nbsp;
    <i># limity na ose y</i>
    axis.set_ylim([-1, 1])
    axis.legend()
&nbsp;
    <i># konverze na objekt typu "frame"</i>
    return mplfig_to_npimage(fig)
&nbsp;
&nbsp;
animation = VideoClip(make_frame, duration=DURATION)
animation.write_gif('fourier_square_wave.gif', fps=FPS)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Problematika vykreslení komplexních funkcí</h2>

<p>V&nbsp;této kapitole se alespoň ve stručnosti seznámíme s&nbsp;problematikou vykreslování komplexních funkcí. Současná verze knihovny Matplotlib sice neobsahuje přímou podporu pro tvorbu 3D grafů zobrazujících komplexní funkce tak, jako je tomu v&nbsp;dalších nástrojích (například v&nbsp;Matlabu), ovšem i přesto je možné s&nbsp;komplexními funkcemi poměrně dobře pracovat a zobrazovat je &ndash; a to jak v&nbsp;2D grafu, tak i v&nbsp;grafu trojrozměrném (obě řešení mají své přednosti a zápory).</p>

<p>Nejjednodušší je zobrazení 2D grafu s&nbsp;&bdquo;průběhem&ldquo; komplexní funkce. Princip je poměrně jednoduchý. Vstupem je matice komplexních čísel, které by při zobrazení v&nbsp;komplexní rovině tvořily mřížku. Čím hustší je mřížka, tím přesnější samozřejmě bude výsledný graf, ovšem i doba výpočtu se prodlouží (což bude patrné především při tvorbě animací). Následně je na každé komplexní číslo na vstupu aplikovaná vybraná funkce, přičemž výsledkem je nové komplexní číslo <strong>z</strong>. A právě sérii těchto čísel budeme chtít nějakým způsobem vizualizovat. V&nbsp;2D grafu je vizualizace založena na převodu hodnoty komplexního čísla na barevný kód, tj.&nbsp;vlastně na aplikaci další funkce z &rarr; RGB.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Obarvení komplexních hodnot</h2>

<pre>
def <strong>to_polar_form</strong>(z):
    <i>"""Prevod komplexniho cisla na goniometricky tvar."""</i>
    r = np.abs(z)
    phi = np.angle(z) 
    return r, phi
&nbsp;
&nbsp;
def <strong>polar_to_hls</strong>(r, phi):
    <i>"""Prevod na HLS."""</i>
    h = (phi + pi)  / (2 * pi) + 0.5
    l = 1.0 - 1.0/(1.0 + r**0.3)
    s = 0.8
    return h, l, s
&nbsp;
&nbsp;
def <strong>colorize</strong>(z):
    <i>"""Funkce pro prevod complex -&gt; HLS -&gt; RGB."""</i>
    r, phi = to_polar_form(z)
&nbsp;
    h, l, s = polar_to_hls(r, phi)
&nbsp;
    <i># prevod na n-tici</i>
    c = np.vectorize(hls_to_rgb) (h,l,s)
&nbsp;
    <i># zmena tvaru z (3,n,m) na (n,m,3)</i>
    c = np.array(c)
    c = c.swapaxes(0,2) 
    return c
</pre>


<p><a name="k14"></a></p>
<h2 id="k14">14. Zobrazení 2D grafu s&nbsp;komplexní funkcí</h2>

<p></p>

<pre>
import numpy as np
from numpy import pi
import pylab as plt
from colorsys import hls_to_rgb
&nbsp;
&nbsp;
<i># viz https://stackoverflow.com/a/20958684</i>
&nbsp;
&nbsp;
def <strong>to_polar_form</strong>(z):
    <i>"""Prevod komplexniho cisla na goniometricky tvar."""</i>
    r = np.abs(z)
    phi = np.angle(z) 
    return r, phi
&nbsp;
&nbsp;
def <strong>polar_to_hls</strong>(r, phi):
    <i>"""Prevod na HLS."""</i>
    h = (phi + pi)  / (2 * pi) + 0.5
    l = 1.0 - 1.0/(1.0 + r**0.3)
    s = 0.8
    return h, l, s
&nbsp;
&nbsp;
def <strong>colorize</strong>(z):
    <i>"""Funkce pro prevod complex -&gt; HLS -&gt; RGB."""</i>
    r, phi = to_polar_form(z)
&nbsp;
    h, l, s = polar_to_hls(r, phi)
&nbsp;
    <i># prevod na n-tici</i>
    c = np.vectorize(hls_to_rgb) (h,l,s)
&nbsp;
    <i># zmena tvaru z (3,n,m) na (n,m,3)</i>
    c = np.array(c)
    c = c.swapaxes(0,2) 
    return c
&nbsp;
&nbsp;
<i># rozmery mrizky</i>
N=1000
&nbsp;
<i># mrizka realnych cisel</i>
x, y = np.ogrid[-5:5:N*1j, -5:5:N*1j]
&nbsp;
<i># prevod na komplexni cisla</i>
z = x + 1j*y
&nbsp;
<i># w = 1/(z+1j)**2 + 1/(z-2)**2</i>
w = np.sin(z**2)
&nbsp;
<i># obarveni vysledku</i>
img = colorize(w)
&nbsp;
<i># vykresleni grafu</i>
plt.imshow(img)
plt.show()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Ukázky vytvořených grafů s&nbsp;komplexními funkcemi</h2>

<p>Podívejme se nyní na několik grafů zobrazujících &bdquo;průběh&ldquo;
komplexních funkcí. U každého grafu je zapsáno, o jakou funkci se jedná.</p>

*** image ***
<p><i>Obrázek :</i></p>

*** image ***
<p><i>Obrázek :</i></p>

*** image ***
<p><i>Obrázek :</i></p>

*** image ***
<p><i>Obrázek :</i></p>

*** image ***
<p><i>Obrázek :</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Animace v&nbsp;grafech zobrazujících komplexní funkce</h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
from numpy import pi
import pylab as plt
from colorsys import hls_to_rgb
from moviepy.editor import VideoClip
from moviepy.video.io.bindings import mplfig_to_npimage
&nbsp;
&nbsp;
<i># viz https://stackoverflow.com/a/20958684</i>
&nbsp;
&nbsp;
def to_polar_form(z):
    """Prevod komplexniho cisla na goniometricky tvar."""
    r = np.abs(z)
    phi = np.angle(z) 
    return r, phi
&nbsp;
&nbsp;
def polar_to_hls(r, phi):
    """Prevod na HLS."""
    h = (phi + pi)  / (2 * pi) + 0.5
    l = 1.0 - 1.0/(1.0 + r**0.3)
    s = 0.8
    return h, l, s
&nbsp;
&nbsp;
def colorize(z):
    """Funkce pro prevod complex -> HLS -> RGB."""
    r, phi = to_polar_form(z)
&nbsp;
    h, l, s = polar_to_hls(r, phi)
&nbsp;
    <i># prevod na n-tici</i>
    c = np.vectorize(hls_to_rgb) (h,l,s)
&nbsp;
    <i># zmena tvaru z (3,n,m) na (n,m,3)</i>
    c = np.array(c)
    c = c.swapaxes(0,2) 
    return c
&nbsp;
&nbsp;
<i># parametry animace</i>
DURATION = 10
FPS = 12
&nbsp;
<i># rozmery mrizky</i>
N=1000
&nbsp;
<i># mrizka realnych cisel</i>
x, y = np.ogrid[-4:4:N*1j, -4:4:N*1j]
&nbsp;
<i># prevod na komplexni cisla</i>
z = x + 1j*y
&nbsp;
&nbsp;
def make_frame(t):
    offset = 4 * t / DURATION - 2
    print(offset)
&nbsp;
    w = 1/(z+2j)**2 + 1/(z-offset)**2
    img = colorize(w)
&nbsp;
    fig = plt.figure(figsize=(20,20))
&nbsp;
    plt.subplot(111)
&nbsp;
    subplot = fig.add_subplot(111)
&nbsp;
    subplot.imshow(img)
&nbsp;
    <i># konverze na objekt typu "frame"</i>
    return mplfig_to_npimage(fig)
&nbsp;
&nbsp;
animation = VideoClip(make_frame, duration=DURATION)
animation.write_videofile('complex.ogv', fps=FPS, progress_bar=False, bitrate="800000")
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Vylepšení předchozího příkladu</h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
from numpy import pi
import pylab as plt
from colorsys import hls_to_rgb
from moviepy.editor import VideoClip
from moviepy.video.io.bindings import mplfig_to_npimage
&nbsp;
&nbsp;
<i># viz https://stackoverflow.com/a/20958684</i>
&nbsp;
&nbsp;
def to_polar_form(z):
    """Prevod komplexniho cisla na goniometricky tvar."""
    r = np.abs(z)
    phi = np.angle(z) 
    return r, phi
&nbsp;
&nbsp;
def polar_to_hls(r, phi):
    """Prevod na HLS."""
    h = (phi + pi)  / (2 * pi) + 0.5
    l = 1.0 - 1.0/(1.0 + r**0.3)
    s = 0.8
    return h, l, s
&nbsp;
&nbsp;
def colorize(z):
    """Funkce pro prevod complex -> HLS -> RGB."""
    r, phi = to_polar_form(z)
&nbsp;
    h, l, s = polar_to_hls(r, phi)
&nbsp;
    <i># prevod na n-tici</i>
    c = np.vectorize(hls_to_rgb) (h,l,s)
&nbsp;
    <i># zmena tvaru z (3,n,m) na (n,m,3)</i>
    c = np.array(c)
    c = c.swapaxes(0,2) 
    return c
&nbsp;
&nbsp;
<i># parametry animace</i>
DURATION = 10
FPS = 12
&nbsp;
<i># rozmery mrizky</i>
N=1000
&nbsp;
<i># mrizka realnych cisel</i>
x, y = np.ogrid[-4:4:N*1j, -4:4:N*1j]
&nbsp;
<i># prevod na komplexni cisla</i>
z = x + 1j*y
&nbsp;
&nbsp;
def make_frame(t):
    offset = 4 * t / DURATION - 2
    print(offset)
&nbsp;
    w = 1/(z+2j)**2 + 1/(z-offset)**2
    img = colorize(w)
&nbsp;
    fig = plt.figure(figsize=(20,20))
&nbsp;
    plt.subplot(111)
&nbsp;
    subplot = fig.add_subplot(111)
&nbsp;
    subplot.imshow(img)
&nbsp;
    <i># konverze na objekt typu "frame"</i>
    return mplfig_to_npimage(fig)
&nbsp;
&nbsp;
animation = VideoClip(make_frame, duration=DURATION)
animation.write_videofile('complex.ogv', fps=FPS, progress_bar=False, bitrate="800000")
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Modul <strong>Animation</strong> dostupný v&nbsp;knihovně Matplotlib</h2>

<p>Prozatím jsme se zabývali především použitím knihovny <i>Matplotlib</i> společně s&nbsp;knihovnou <i>MoviePy</i>, přičemž knihovna Matplotlib sloužila k&nbsp;vytvoření snímků s&nbsp;2D či 3D grafy a knihovna MoviePy z&nbsp;těchto snímků vytvářela buď animovaný GIF nebo plnohodnotné video používající zvolený kodek. Ve skutečnosti však v&nbsp;některých případech vůbec nemusíme knihovnu <i>MoviePy</i> použít, protože přímo v&nbsp;novějších verzích Matplotlibu existuje modul nazvaný <strong>Animation</strong>. Jméno tohoto modulu napovídá k&nbsp;čemu slouží &ndash; skutečně je možné s&nbsp;jeho využitím vytvářet různé animované grafy. V&nbsp;následujícím textu se seznámíme se základy použití tohoto modulu (i když osobně preferuji použití <i>MoviePy</i>, které je univerzálnější).</p>


<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
Python 3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/moviepy-examples">https://github.com/tisnik/moviepy-examples</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, stále doslova několik kilobajtů), můžete namísto toho použít odkazy
na jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Demonstrační příklad</th><th>Cesta</th></tr>
<tr><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/">https://github.com/tisnik/moviepy-examples/blob/master/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/">https://github.com/tisnik/moviepy-examples/blob/master/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/">https://github.com/tisnik/moviepy-examples/blob/master/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/">https://github.com/tisnik/moviepy-examples/blob/master/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/">https://github.com/tisnik/moviepy-examples/blob/master/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/">https://github.com/tisnik/moviepy-examples/blob/master/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/">https://github.com/tisnik/moviepy-examples/blob/master/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/">https://github.com/tisnik/moviepy-examples/blob/master/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>MoviePy 0.2.3.3 na PyPi<br />
<a href="https://pypi.org/project/moviepy/">https://pypi.org/project/moviepy/</a>
</li>

<li>MoviePy na GitHubu<br />
<a href="https://github.com/Zulko/moviepy">https://github.com/Zulko/moviepy</a>
</li>

<li>MoviePy - dokumentace<br />
<a href="http://zulko.github.io/moviepy/">http://zulko.github.io/moviepy/</a>
</li>

<li>MoviePy - galerie<br />
<a href="http://zulko.github.io/moviepy/gallery.html">http://zulko.github.io/moviepy/gallery.html</a>
</li>

<li>Data Animations With Python and MoviePy<br />
<a href="https://zulko.github.io/blog/2014/11/29/data-animations-with-python-and-moviepy/">https://zulko.github.io/blog/2014/11/29/data-animations-with-python-and-moviepy/</a>
</li>

<li>Porovnání formátů Ogg Theora a H.264<br />
<a href="https://www.root.cz/zpravicky/porovnani-formatu-ogg-theora-a-h-264/">https://www.root.cz/zpravicky/porovnani-formatu-ogg-theora-a-h-264/</a>
</li>

<li>Případ GIF<br />
<a href="https://www.root.cz/clanky/pripad-gif/">https://www.root.cz/clanky/pripad-gif/</a>
</li>

<li>Pravda a mýty o GIFu<br />
<a href="https://www.root.cz/clanky/pravda-a-myty-o-gifu/">https://www.root.cz/clanky/pravda-a-myty-o-gifu/</a>
</li>

<li>Anatomie grafického formátu GIF<br />
<a href="https://www.root.cz/clanky/anatomie-grafickeho-formatu-gif/">https://www.root.cz/clanky/anatomie-grafickeho-formatu-gif/</a>
</li>

<li>GIF: animace a konkurence<br />
<a href="https://www.root.cz/clanky/gif-animace-a-konkurence/">https://www.root.cz/clanky/gif-animace-a-konkurence/</a>
</li>

<li>Two python modules : MoviePy and images2gif – part 001<br />
<a href="http://free-tutorials.org/two-python-modules-moviepy-and-images2gif-part-001/">http://free-tutorials.org/two-python-modules-moviepy-and-images2gif-part-001/</a>
</li>

<li>images2gif<br />
<a href="https://pypi.org/project/images2gif/">https://pypi.org/project/images2gif/</a>
</li>

<li>Making GIFs from video files with Python<br />
<a href="https://www.devbattles.com/en/sand/post-345-Making+GIFs+From+Video+Files+With+Python">https://www.devbattles.com/en/sand/post-345-Making+GIFs+From+Video+Files+With+Python</a>
</li>

<li>GIF89a specification<br />
<a href="https://www.w3.org/Graphics/GIF/spec-gif89a.txt">https://www.w3.org/Graphics/GIF/spec-gif89a.txt</a>
</li>

<li>MPEG-4 Part 14<br />
<a href="https://en.wikipedia.org/wiki/MPEG-4_Part_14">https://en.wikipedia.org/wiki/MPEG-4_Part_14</a>
</li>

<li>Theora video compression<br />
<a href="https://www.theora.org/">https://www.theora.org/</a>
</li>

<li>Theora<br />
<a href="https://en.wikipedia.org/wiki/Theora">https://en.wikipedia.org/wiki/Theora</a>
</li>

<li>NumPy<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>numpy 1.14.2 (on PyPi)<br />
<a href="https://pypi.org/project/numpy/">https://pypi.org/project/numpy/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy (2.část)<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy-2-cast/">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy-2-cast/</a>
</li>

<li>Non-linear editing system<br />
<a href="https://en.wikipedia.org/wiki/Non-linear_editing_system">https://en.wikipedia.org/wiki/Non-linear_editing_system</a>
</li>

<li>Lorenzův atraktor<br />
<a href="http://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03">http://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Lorenz system<br />
<a href="https://en.wikipedia.org/wiki/Lorenz_system">https://en.wikipedia.org/wiki/Lorenz_system</a>
</li>

<li>Customising contour plots in matplotlib<br />
<a href="https://philbull.wordpress.com/2012/12/27/customising-contour-plots-in-matplotlib/">https://philbull.wordpress.com/2012/12/27/customising-contour-plots-in-matplotlib/</a>
</li>

<li>Graphics with Matplotlib<br />
<a href="http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html">http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html</a>
</li>

<li>Systémy lineárních rovnic<br />
<a href="http://www.matematika.cz/systemy-linearnich-rovnic">http://www.matematika.cz/systemy-linearnich-rovnic</a>
</li>

<li>NumPy Home Page<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>NumPy v1.10 Manual<br />
<a href="http://docs.scipy.org/doc/numpy/index.html">http://docs.scipy.org/doc/numpy/index.html</a>
</li>

<li>NumPy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NumPy">https://en.wikipedia.org/wiki/NumPy</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>The cell magics in IPython<br />
<a href="http://nbviewer.jupyter.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb">http://nbviewer.jupyter.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb</a>
</li>

<li>Taylorův polynom<br />
<a href="https://algoritmy.net/article/1576/Tayloruv-polynom">https://algoritmy.net/article/1576/Tayloruv-polynom</a>
</li>

<li>Taylor series<br />
<a href="https://en.wikipedia.org/wiki/Taylor_series">https://en.wikipedia.org/wiki/Taylor_series</a>
</li>

<li>Taylor Series Approximation to Cosine<br />
<a href="https://www.cut-the-knot.org/Curriculum/Calculus/TaylorSeries.shtml">https://www.cut-the-knot.org/Curriculum/Calculus/TaylorSeries.shtml</a>
</li>

<li>Fourier series<br />
<a href="https://en.wikipedia.org/wiki/Fourier_series">https://en.wikipedia.org/wiki/Fourier_series</a>
</li>

<li>mpmath<br />
<a href="http://mpmath.org/">http://mpmath.org/</a>
</li>

<li>Gallery of mathematical functions<br />
<a href="http://mpmath.org/gallery/">http://mpmath.org/gallery/</a>
</li>

<li>3D visualization of complex functions with matplotlib<br />
<a href="http://fredrikj.net/blog/2009/08/3d-visualization-of-complex-functions-with-matplotlib/">http://fredrikj.net/blog/2009/08/3d-visualization-of-complex-functions-with-matplotlib/</a>
</li>

<li>Animating the Lorenz System in 3D<br />
<a href="https://jakevdp.github.io/blog/2013/02/16/animating-the-lorentz-system-in-3d/">https://jakevdp.github.io/blog/2013/02/16/animating-the-lorentz-system-in-3d/</a>
</li>

<li>Lorenz example<br />
<a href="http://docs.enthought.com/mayavi/mayavi/auto/example_lorenz.html">http://docs.enthought.com/mayavi/mayavi/auto/example_lorenz.html</a>
</li>

<li>Color Graphs of Complex Functions<br />
<a href="http://fs2.american.edu/lcrone/www/ComplexPlot.html">http://fs2.american.edu/lcrone/www/ComplexPlot.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

