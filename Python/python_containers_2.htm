<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Kontejnery v Pythonu: zdaleka nejde jen o n-tice, seznamy, množiny a slovníky (2)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Kontejnery v Pythonu: zdaleka nejde jen o n-tice, seznamy, množiny a slovníky (2)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Kontejner Counter ze standardní knihovny</a></p>
<p><a href="#k02">2. Konstrukce kontejneru Counter</a></p>
<p><a href="#k03">3. Inicializace počitadel prvků</a></p>
<p><a href="#k04">4. Spojení kontejnerů typu Counter, rozdíl mezi obsahem dvou kontejnerů</a></p>
<p><a href="#k05">5. Výpočet frekvence slov v&nbsp;textu s&nbsp;využitím kontejneru <strong>Counter</strong></a></p>
<p><a href="#k06">6. Výpočet frekvence znaků v&nbsp;textu</a></p>
<p><a href="#k07">7. Převod hodnot z&nbsp;kontejneru <strong>Counter</strong> do seznamu a slovníku</a></p>
<p><a href="#k08">8. Multimnožiny</a></p>
<p><a href="#k09">9. Instalace balíčku <strong>multiset</strong></a></p>
<p><a href="#k10">10. Konstrukce kontejneru Multiset</a></p>
<p><a href="#k11">11. Specifikace počtu shodných prvků při konstrukci multimnožiny</a></p>
<p><a href="#k12">12. Převod mezi kontejnerem Counter a multimnožinou</a></p>
<p><a href="#k13">13. Spojení multimnožin, multimnožina vzniklá opakováním jiné multimnožiny</a></p>
<p><a href="#k14">14. Operace <strong>update</strong> a <strong>combine</strong></a></p>
<p><a href="#k15">15. Multimnožiny a multimnožinové operace</a></p>
<p><a href="#k16">16. Multislovníky</a></p>
<p><a href="#k17">17. Instalace balíčku <strong>multidict</strong></a></p>
<p><a href="#k18">*** 18. Základní operace s&nbsp;multislovníky</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Kontejner Counter ze standardní knihovny</h2>

<p>Velmi užitečným, i když poněkud méně známým kontejnerem, který můžeme nalézt
ve standardní knihovně Pythonu, je kontejner nazvaný <strong>Counter</strong>.
Pro každý prvek uložený v&nbsp;tomto kontejneru se kromě hodnoty prvku navíc
pamatuje i počet opakování prvku, takže na <strong>Counter</strong> můžeme
pohlížet jako na specializovaný slovník, v&nbsp;němž jsou prvky uloženy ve
formě klíčů a hodnoty obsahují počet opakování daného prvku. Kontejner
<strong>Counter</strong> ovšem navíc nabízí i metody určené pro zpracování
počtu opakování prvku, jak to ostatně uvidíme i na demonstračních příkladech,
které budou ukázány v&nbsp;navazujících kapitolách.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;některých zdrojových kódech se
můžeme setkat s&nbsp;tím, že se namísto kontejneru <strong>Counter</strong>
používá běžný slovník. To ovšem nemusí být nejvhodnější řešení, protože už jen
tím, že ve skriptu použijeme <strong>Counter</strong> se potenciálním čtenářům
dává jasně najevo, jaká bude <i>sémantika</i> právě vytvořeného
kontejneru.</div></p>

<p>O tom, že je <strong>Counter</strong> skutečně kontejnerem, se můžeme
přesvědčit velmi snadno testem na existenci metody
<strong>__contains__</strong>:</p>

<pre>
&gt;&gt;&gt; <strong>from collections import Counter</strong>
&nbsp;
&gt;&gt;&gt; <strong>dir(Counter)</strong>
['__add__', '__and__', '__class__', '__class_getitem__', '<u>__contains__</u>',
'__delattr__', '__delitem__', '__dict__', '__dir__', '__doc__', '__eq__',
'__format__', '__ge__', '__getattribute__', '__getitem__', '__getstate__',
'__gt__', '__hash__', '__iadd__', '__iand__', '__init__', '__init_subclass__',
'__ior__', '__isub__', '__iter__', '__le__', '__len__', '__lt__',
'__missing__', '__module__', '__ne__', '__neg__', '__new__', '__or__',
'__pos__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__',
'__ror__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__sub__',
'__subclasshook__', '__weakref__', '_keep_positive', 'clear', 'copy',
'elements', 'fromkeys', 'get', 'items', 'keys', 'most_common', 'pop',
'popitem', 'setdefault', 'subtract', 'total', 'update', 'values']
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Konstrukce kontejneru Counter</h2>

<p>Konstrukce kontejneru <strong>Counter</strong> je snadná. V&nbsp;případě, že
má být tento kontejner na začátku prázdný, postačuje zavolat konstruktor
<strong>Counter</strong> bez parametrů:</p>

<pre>
from collections import Counter
&nbsp;
c = Counter()
print(c)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_01.py</a></div></p>

<p>Výsledek získaný po spuštění dnešního prvního demonstračního skriptu:</p>

<pre>
Counter()
</pre>

<p>Do kontejneru <strong>Counter</strong> je ovšem možné již při jeho
konstrukci vložit nějaké prvky. Je například umožněno předat seznam těchto
prvků, a to následujícím způsobem:</p>

<pre>
from collections import Counter
&nbsp;
c = Counter(["foo", "bar", "baz"])
print(c)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_02.py</a></div></p>

<p>Výsledek bude v&nbsp;tomto případě vypadat následovně. Povšimněte si, že
počitadlo u každého prvku je nastaveno na jedničku a nikoli na nulu (to lze
ovšem změnit):</p>

<pre>
Counter({'foo': 1, 'bar': 1, 'baz': 1})
</pre>

<p>Podobným způsobem můžeme konstruktoru <strong>Counter</strong> předat i
n-tici (<i>tuple</i>) či množinu (<i>set</i>) prvků tak, jak je to ukázáno na
následující dvojici demonstračních příkladů. V&nbsp;případě předání n-tice je
nutné kulaté závorky zdvojit, protože vnější dvojice závorek představuje volání
funkce a vnitřní dvojice definici n-tice:</p>

<pre>
from collections import Counter
&nbsp;
c = Counter(("foo", "bar", "baz"))
print(c)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_03.py</a></div></p>

<p>Výsledek:</p>

<pre>
Counter({'foo': 1, 'bar': 1, 'baz': 1})
</pre>

<p>Předání množiny do konstruktoru:</p>

<pre>
from collections import Counter
&nbsp;
c = Counter({"foo", "bar", "baz"})
print(c)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_04.py</a></div></p>

<p>Výsledek:</p>

<pre>
Counter({'foo': 1, 'baz': 1, 'bar': 1})
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Inicializace počitadel prvků</h2>

<p>A konečně můžeme kontejner <strong>Counter</strong> inicializovat tak, že mu
předáme slovník, který obsahuje předvyplněné čítače prvků. Volání tedy
v&nbsp;takovém případě vypadá následovně:</p>

<pre>
from collections import Counter
&nbsp;
c = Counter({"foo": 0, "bar": 1, "baz": 2})
print(c)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_05.py</a></div></p>

<p>Výsledkem bude naplněný kontejner:</p>

<pre>
Counter({'baz': 2, 'bar': 1, 'foo': 0})
</pre>

<p>Sice je možné předat slovník, který kromě celočíselných údajů obsahuje
hodnoty jiného typu, ovšem v&nbsp;takovém případě nebudou plně funkční další
operace, s&nbsp;nimiž se seznámíme v&nbsp;navazujícím textu.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Spojení kontejnerů typu Counter, rozdíl mezi obsahem dvou kontejnerů</h2>

<p>Dva kontejnery typu <strong>Counter</strong> lze spojit s&nbsp;využitím
standardního (přetíženého) operátoru &bdquo;+&ldquo;. Výsledkem bude nový
kontejner stejného typu, který bude obsahovat prvky z&nbsp;obou kontejnerů i
jejich čítače. Pokud nějaký prvek existuje v&nbsp;obou zdrojových kontejnerech,
jsou jeho čítače sečteny, což je ostatně patrné i z&nbsp;následujícího
zdrojového kódu:</p>

<pre>
from collections import Counter
&nbsp;
c1 = Counter({"foo": 0, "bar": 1, "baz": 2})
print(c1)
&nbsp;
c2 = Counter(["foo", "bar", "baz", "baf"])
print(c2)
&nbsp;
c3 = c1 + c2
print(c3)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_06.py</a></div></p>

<p>Podívejme se nyní na výsledky vypsané tímto demonstračním příkladem. Na
třetím řádku je obsah výsledného kontejneru <strong>Counter</strong>, který
bude obsahovat prvky z&nbsp;obou zdrojových kontejnerů. A počty opakování jsou
získány sečtením původních čítačů:</p>

<pre>
Counter({'baz': 2, 'bar': 1, 'foo': 0})
Counter({'foo': 1, 'bar': 1, 'baz': 1, 'baf': 1})
Counter({'baz': 3, 'bar': 2, 'foo': 1, 'baf': 1})
</pre>

<p>Podobně od sebe můžeme dva kontejnery typu <strong>Counter</strong>
&bdquo;odečíst&ldquo;, což se provádí standardním přetíženým operátorem
&bdquo;-&ldquo;:</p>

<pre>
from collections import Counter
&nbsp;
c1 = Counter({"foo": 0, "bar": 1, "baz": 2})
print(c1)
&nbsp;
c2 = Counter(["foo", "bar", "baz", "baf"])
print(c2)
&nbsp;
c3 = c1 - c2
print(c3)
&nbsp;
c4 = c2 - c1
print(c4)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_07.py</a></div></p>

<p>Opět se podívejme na výsledky, které jsme získali po spuštění předchozího
skriptu. Nejprve jsou vypsány oba zdrojové kontejnery a poté výsledek jejich
rozdílu, přičemž operace &bdquo;-&ldquo; není komutativní, takže výsledky na
posledních dvou řádcích budou odlišné. Zajímavé je, že pokud čítač nějakého
prvku dosáhne záporné hodnoty, nebude do výsledného kontejneru vůbec vložen. A
pokud prvek existuje jen v&nbsp;menšiteli, taktéž není do výsledného kontejneru
vložen (měl by záporný čítač):</p>

<pre>
Counter({'baz': 2, 'bar': 1, 'foo': 0})
Counter({'foo': 1, 'bar': 1, 'baz': 1, 'baf': 1})
Counter({'baz': 1})
Counter({'foo': 1, 'baf': 1})
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Výpočet frekvence slov v&nbsp;textu s&nbsp;využitím kontejneru <strong>Counter</strong></h2>

<p>Změna počitadla prvku (hodnoty) se provádí metodou <strong>update</strong>,
které se v&nbsp;tom nejjednodušším případě předává seznam (resp.&nbsp;přesněji
řečeno sekvence) s&nbsp;hodnotami prvků. Čítač takového prvku se zvýší o
jedničku a pro původně neexistující prvek se nastaví na jedničku. Kontejnery
<strong>Counter</strong> navíc nabízí uživatelům i užitečné metody
<strong>total</strong> a <strong>most_common</strong>. Metoda
<strong>total</strong> vrátí součet všech čítačů a metoda
<strong>most_common</strong> slouží pro získání <i>n</i> prvků
s&nbsp;nejvyššími hodnotami čítačů, které jsou navíc seřazeny podle těchto
hodnot.</p>

<p>Toho můžeme využít například pro zjištění četnosti slov v&nbsp;nějakém
textovém dokumentu. Implementace skriptu pro získání této statistiky může
vypadat následovně:</p>

<pre>
from collections import Counter
&nbsp;
c = Counter()
print(c)
&nbsp;
sentences = """
Počátek každodenní práce na poli formování pozice vyžaduje návrh a realizaci
směru progresivního rozvoje. Na druhé straně rámec stavu a vývoje postavení
vyžadují nalezení a jednoznačné upřesnění systému masové účasti. Vzájemné
postavení organizačních autorit stejně jako stabilní a kvantitativní vzrůst a
sféra naší aktivity napomáhá přípravě a realizaci nových návrhů. Stejně tak
stálé, informačně-propagandistické zabezpečení naší práce jednoznačně
předurčuje implementaci odpovídajících podmínek aktivizace. Nesmíme však
zapomínat, že konzultace se širokým aktivem vyzaduje rozšiřování logistických
prostředků a forem působení. Ideové úvahy nejvyššího řádu a rovněž upřesnění a
rozvoj struktur přetváří strukturu vedení dalších směrů rozvoje. Tímto způsobem
komplexní analýza našich možností od nás vyžaduje analýzy systému výchovy
pracovníků odpovídajících aktuálním potřebám. Závažnost těchto problémů je
natolik zřejmá, že nový model organizační činnosti zvyšuje potřebu aplikace
modelu rozvoje. Pestré a bohaté zkušenosti jasně říkají, že další rozvoj
různých forem činnosti představuje pozoruhodný experiment prověrky možnosti
nasazení veškerých dostupných prostředků. Každodenní praxe nám potvrzuje, že
počátek každodenní práce na poli formování pozice ve značné míře podmiňuje
vytvoření tvorby nových zdrojů.
"""
&nbsp;
words = sentences.split()
for word in words:
    c.update([word])
&nbsp;
print(c.total())
&nbsp;
for word in c.most_common(10):
    print(word[0], word[1])
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_09.py</a></div></p>

<p>Tento skript vypíše na začátku prázdný <strong>Counter</strong> a na řádku
dalším pak součet všech čítačů slov. To znamená, že předaný dokument obsahuje
167 slov. A na následujících řádcích jsou vypsána jednotlivá slova a jejich
četnosti. Povšimněte si, že ve skutečnosti není výsledek dokonalý, protože
neodstraňujeme tečky, čárky atd.:</p>

<pre>
Counter()
167
a 10
že 4
práce 3
rozvoje. 3
každodenní 2
na 2
poli 2
formování 2
pozice 2
vyžaduje 2
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Výpočet frekvence znaků v&nbsp;textu</h2>

<p>V&nbsp;předchozím demonstračním příkladu se čítače slov zvyšovaly
v&nbsp;programové smyčce, ve které se volala metoda <strong>update</strong> a
té se předával jednoprvkový seznam se slovy:</p>

<pre>
for word in words:
    c.update([word])
</pre>

<p>Pokusme se nyní zjistit, co se stane v&nbsp;případě, že namísto seznamu
přímo předáme hodnotu uloženou v&nbsp;proměnné <strong>word</strong>, což je
řetězec:</p>

<pre>
from collections import Counter
&nbsp;
c = Counter()
print(c)
&nbsp;
sentences = """
Počátek každodenní práce na poli formování pozice vyžaduje návrh a realizaci
směru progresivního rozvoje. Na druhé straně rámec stavu a vývoje postavení
vyžadují nalezení a jednoznačné upřesnění systému masové účasti. Vzájemné
postavení organizačních autorit stejně jako stabilní a kvantitativní vzrůst a
sféra naší aktivity napomáhá přípravě a realizaci nových návrhů. Stejně tak
stálé, informačně-propagandistické zabezpečení naší práce jednoznačně
předurčuje implementaci odpovídajících podmínek aktivizace. Nesmíme však
zapomínat, že konzultace se širokým aktivem vyzaduje rozšiřování logistických
prostředků a forem působení. Ideové úvahy nejvyššího řádu a rovněž upřesnění a
rozvoj struktur přetváří strukturu vedení dalších směrů rozvoje. Tímto způsobem
komplexní analýza našich možností od nás vyžaduje analýzy systému výchovy
pracovníků odpovídajících aktuálním potřebám. Závažnost těchto problémů je
natolik zřejmá, že nový model organizační činnosti zvyšuje potřebu aplikace
modelu rozvoje. Pestré a bohaté zkušenosti jasně říkají, že další rozvoj
různých forem činnosti představuje pozoruhodný experiment prověrky možnosti
nasazení veškerých dostupných prostředků. Každodenní praxe nám potvrzuje, že
počátek každodenní práce na poli formování pozice ve značné míře podmiňuje
vytvoření tvorby nových zdrojů.
"""
&nbsp;
words = sentences.split()
for word in words:
    c.update(word)
&nbsp;
print(c.total())
&nbsp;
for word in c.most_common(10):
    print(word[0], word[1])
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_08.py</a></div></p>

<p>Vzhledem k&nbsp;tomu, že řetězce jsou v&nbsp;Pythonu taktéž považovány za
<i>sekvence</i>, bude výsledek odlišný, protože získáme počet znaků a četnost
použití jednotlivých znaků (což je taktéž zajímavá statistika &ndash; například
vysoký výskyt &bdquo;o&ldquo; je možná neobvyklý):</p>

<pre>
Counter()
1152
o 92
e 86
a 86
n 84
t 57
r 54
v 53
í 46
p 44
s 42
</pre>

<p>To ovšem znamená, že vůbec nepotřebujeme programovou smyčku a můžeme celý
skript pro zjištění frekvence <i>slov</i> přepsat do mnohem kratší podoby:</p>

<pre>
from collections import Counter
&nbsp;
c = Counter()
print(c)
&nbsp;
sentences = """
...
...
...
"""
&nbsp;
words = sentences.split()
c.update(words)
&nbsp;
print(c.total())
&nbsp;
for word in c.most_common(10):
    print(word[0], word[1])
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_11.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_11.py</a></div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Převod hodnot z&nbsp;kontejneru <strong>Counter</strong> do seznamu a slovníku</h2>

<p>Na závěr první části článku si ukažme způsob převodu kontejneru typu
<strong>Counter</strong> na běžné seznamy nebo slovníky. Zajímat nás
pochopitelně bude nejenom to, jestli je převod vůbec možný, ale i to, co je
výsledkem takové konverze:</p>

<pre>
from collections import Counter
&nbsp;
c = Counter()
print(c)
&nbsp;
sentences = """
Počátek každodenní práce na poli formování pozice vyžaduje návrh a realizaci
směru progresivního rozvoje. Na druhé straně rámec stavu a vývoje postavení
vyžadují nalezení a jednoznačné upřesnění systému masové účasti. Vzájemné
postavení organizačních autorit stejně jako stabilní a kvantitativní vzrůst a
sféra naší aktivity napomáhá přípravě a realizaci nových návrhů. Stejně tak
stálé, informačně-propagandistické zabezpečení naší práce jednoznačně
předurčuje implementaci odpovídajících podmínek aktivizace. Nesmíme však
zapomínat, že konzultace se širokým aktivem vyzaduje rozšiřování logistických
prostředků a forem působení. Ideové úvahy nejvyššího řádu a rovněž upřesnění a
rozvoj struktur přetváří strukturu vedení dalších směrů rozvoje. Tímto způsobem
komplexní analýza našich možností od nás vyžaduje analýzy systému výchovy
pracovníků odpovídajících aktuálním potřebám. Závažnost těchto problémů je
natolik zřejmá, že nový model organizační činnosti zvyšuje potřebu aplikace
modelu rozvoje. Pestré a bohaté zkušenosti jasně říkají, že další rozvoj
různých forem činnosti představuje pozoruhodný experiment prověrky možnosti
nasazení veškerých dostupných prostředků. Každodenní praxe nám potvrzuje, že
počátek každodenní práce na poli formování pozice ve značné míře podmiňuje
vytvoření tvorby nových zdrojů.
"""
&nbsp;
words = sentences.split()
for word in words:
    c.update([word])
&nbsp;
print(list(c))
print()
print(dict(c))
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_10.py</a></div></p>

<p>Převodem na seznam získáme pouze seznam všech prvků a nikoli jejich čítače:</p>

<pre>
['Počátek', 'každodenní', 'práce', 'na', 'poli', 'formování', 'pozice',
'vyžaduje', 'návrh', 'a', 'realizaci', 'směru', 'progresivního', 'rozvoje.',
'Na', 'druhé', 'straně', 'rámec', 'stavu', 'vývoje', 'postavení', 'vyžadují',
'nalezení', 'jednoznačné', 'upřesnění', 'systému', 'masové', 'účasti.',
'Vzájemné', 'organizačních', 'autorit', 'stejně', 'jako', 'stabilní',
'kvantitativní', 'vzrůst', 'sféra', 'naší', 'aktivity', 'napomáhá', 'přípravě',
'nových', 'návrhů.', 'Stejně', 'tak', 'stálé,', 'informačně-propagandistické',
'zabezpečení', 'jednoznačně', 'předurčuje', 'implementaci', 'odpovídajících',
'podmínek', 'aktivizace.', 'Nesmíme', 'však', 'zapomínat,', 'že', 'konzultace',
'se', 'širokým', 'aktivem', 'vyzaduje', 'rozšiřování', 'logistických',
'prostředků', 'forem', 'působení.', 'Ideové', 'úvahy', 'nejvyššího', 'řádu',
'rovněž', 'rozvoj', 'struktur', 'přetváří', 'strukturu', 'vedení', 'dalších',
'směrů', 'Tímto', 'způsobem', 'komplexní', 'analýza', 'našich', 'možností',
'od', 'nás', 'analýzy', 'výchovy', 'pracovníků', 'aktuálním', 'potřebám.',
'Závažnost', 'těchto', 'problémů', 'je', 'natolik', 'zřejmá,', 'nový', 'model',
'organizační', 'činnosti', 'zvyšuje', 'potřebu', 'aplikace', 'modelu',
'Pestré', 'bohaté', 'zkušenosti', 'jasně', 'říkají,', 'další', 'různých',
'představuje', 'pozoruhodný', 'experiment', 'prověrky', 'možnosti', 'nasazení',
'veškerých', 'dostupných', 'prostředků.', 'Každodenní', 'praxe', 'nám',
'potvrzuje,', 'počátek', 've', 'značné', 'míře', 'podmiňuje', 'vytvoření',
'tvorby', 'zdrojů.']
</pre>

<p>Naproti tomu převod na slovník vrací prvky ve formě klíčů a hodnotami jsou
jednotlivé čítače:</p>

<pre>
{'Počátek': 1, 'každodenní': 2, 'práce': 3, 'na': 2, 'poli': 2, 'formování': 2,
'pozice': 2, 'vyžaduje': 2, 'návrh': 1, 'a': 10, 'realizaci': 2, 'směru': 1,
'progresivního': 1, 'rozvoje.': 3, 'Na': 1, 'druhé': 1, 'straně': 1, 'rámec':
1, 'stavu': 1, 'vývoje': 1, 'postavení': 2, 'vyžadují': 1, 'nalezení': 1,
'jednoznačné': 1, 'upřesnění': 2, 'systému': 2, 'masové': 1, 'účasti.': 1,
'Vzájemné': 1, 'organizačních': 1, 'autorit': 1, 'stejně': 1, 'jako': 1,
'stabilní': 1, 'kvantitativní': 1, 'vzrůst': 1, 'sféra': 1, 'naší': 2,
'aktivity': 1, 'napomáhá': 1, 'přípravě': 1, 'nových': 2, 'návrhů.': 1,
'Stejně': 1, 'tak': 1, 'stálé,': 1, 'informačně-propagandistické': 1,
'zabezpečení': 1, 'jednoznačně': 1, 'předurčuje': 1, 'implementaci': 1,
'odpovídajících': 2, 'podmínek': 1, 'aktivizace.': 1, 'Nesmíme': 1, 'však': 1,
'zapomínat,': 1, 'že': 4, 'konzultace': 1, 'se': 1, 'širokým': 1, 'aktivem': 1,
'vyzaduje': 1, 'rozšiřování': 1, 'logistických': 1, 'prostředků': 1, 'forem':
2, 'působení.': 1, 'Ideové': 1, 'úvahy': 1, 'nejvyššího': 1, 'řádu': 1,
'rovněž': 1, 'rozvoj': 2, 'struktur': 1, 'přetváří': 1, 'strukturu': 1,
'vedení': 1, 'dalších': 1, 'směrů': 1, 'Tímto': 1, 'způsobem': 1, 'komplexní':
1, 'analýza': 1, 'našich': 1, 'možností': 1, 'od': 1, 'nás': 1, 'analýzy': 1,
'výchovy': 1, 'pracovníků': 1, 'aktuálním': 1, 'potřebám.': 1, 'Závažnost': 1,
'těchto': 1, 'problémů': 1, 'je': 1, 'natolik': 1, 'zřejmá,': 1, 'nový': 1,
'model': 1, 'organizační': 1, 'činnosti': 2, 'zvyšuje': 1, 'potřebu': 1,
'aplikace': 1, 'modelu': 1, 'Pestré': 1, 'bohaté': 1, 'zkušenosti': 1, 'jasně':
1, 'říkají,': 1, 'další': 1, 'různých': 1, 'představuje': 1, 'pozoruhodný': 1,
'experiment': 1, 'prověrky': 1, 'možnosti': 1, 'nasazení': 1, 'veškerých': 1,
'dostupných': 1, 'prostředků.': 1, 'Každodenní': 1, 'praxe': 1, 'nám': 1,
'potvrzuje,': 1, 'počátek': 1, 've': 1, 'značné': 1, 'míře': 1, 'podmiňuje': 1,
'vytvoření': 1, 'tvorby': 1, 'zdrojů.': 1}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Multimnožiny</h2>

<p>Dalším typem kontejneru, se kterým se v&nbsp;dnešním článku seznámíme, jsou
<i>multimnožiny</i> neboli <i>multiset</i> popř.&nbsp;taktéž <i>bag</i>. Jedná
se o kontejner, který nabízí podobné operace jako běžné množiny (sjednocení,
průnik, diference, ...), ovšem oproti klasickým množinám umožňuje, aby
multimnožina obsahovala některý prvek vícekrát &ndash; není tedy zaručena
unikátnost prvků. Mohlo by se zdát, že multimnožina je totéž, co již výše
popsaný kontejner <strong>Counter</strong>, ale není tomu tak. Pokud do čítače
vložíme dva prvky &bdquo;foo&ldquo;, bude výsledkem čítač obsahující
&bdquo;foo:2&ldquo;, zatímco multimnožina bude obsahovat {&bdquo;foo&ldquo;,
&bdquo;foo&ldquo;}.</p>

<p><div class="rs-tip-major">Poznámka: opět se poměrně často můžeme setkat
s&nbsp;tím, že se ve zdrojových kódech prakticky znovuimplementují multimnožiny
(resp.&nbsp;jejich vlastnosti a operace) a to s&nbsp;využitím klasických
seznamů. Ze sémantického hlediska je však lepší použít přímo typ
<strong>multiset</strong>.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Instalace balíčku <strong>multiset</strong></h2>

<p>Multimnožiny jsou implementovány v&nbsp;balíčku <strong>multiset</strong>,
který je velmi malý a nemá žádné další tranzitivní závislosti:</p>

<pre>
$ <strong>pip3 install multiset</strong>
</pre>

<p>Průběh instalace (nainstaluje se jen několik kilobajtů závislostí):</p>

<pre>
Collecting multiset
  Downloading multiset-3.1.0-py2.py3-none-any.whl (11 kB)
Installing collected packages: multiset
Successfully installed multiset-3.1.0
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Konstrukce kontejneru Multiset</h2>

<p>Podobně jako v&nbsp;případě kontejneru typu <strong>Counter</strong> si
nejdříve ukážeme, jakým způsobem se multimnožina konstruuje. V&nbsp;tom
nejjednodušším případě se konstruktoru <strong>Multiset</strong> nepředá žádný
parametr a multimnožina tedy bude prázdná:</p>

<pre>
from multiset import Multiset
&nbsp;
m = Multiset()
print(m)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_01.py</a></div></p>

<p>Výsledek:</p>

<pre>
{}
</pre>

<p>Multimnožině můžeme předat seznam, který dokonce (logicky) může obsahovat
opakující se prvky:</p>

<pre>
from multiset import Multiset
&nbsp;
m = Multiset(["foo", "bar", "baz"])
print(m)
&nbsp;
m2 = Multiset(["foo", "foo", "foo", "bar", "bar", "baz"])
print(m2)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_02.py</a></div></p>

<p>Nyní je z&nbsp;vypsaných zpráv patrné, že multimnožina skutečně může
obsahovat opakující se prvky a tudíž prvky nejsou unikátní (což někdy může
vadit, jindy ne):</p>

<pre>
{foo, bar, baz}
{foo, foo, foo, bar, bar, baz}
</pre>

<p>Podobně můžeme konstruktoru multimnožiny předat n-tici, opět s&nbsp;možností
opakování prvků:</p>

<pre>
from multiset import Multiset
&nbsp;
m = Multiset(("foo", "bar", "baz"))
print(m)
&nbsp;
m2 = Multiset(("foo", "foo", "foo", "bar", "bar", "baz"))
print(m2)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_03.py</a></div></p>

<p>Výsledky budou v&nbsp;tomto případě totožné s&nbsp;předchozím demonstračním
příkladem:</p>

<pre>
{foo, bar, baz}
{foo, foo, foo, bar, bar, baz}
</pre>

<p>Konstrukce multimnožiny z&nbsp;běžné množiny (zde je tedy zaručeno, že se
prvky nebudou opakovat, protože to běžná množina neumožňuje):</p>

<pre>
from multiset import Multiset
&nbsp;
m = Multiset({"foo", "bar", "baz"})
print(m)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_04.py</a></div></p>

<p>Výsledek:</p>

<pre>
{foo, bar, baz}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Specifikace počtu shodných prvků při konstrukci multimnožiny</h2>

<p>Pokud multimnožinu zkonstruujeme tak, že jí do konstruktoru předáme slovník,
je tímto způsobem možné specifikovat opakování prvků v&nbsp;multimnožině:</p>

<pre>
from multiset import Multiset
&nbsp;
m = Multiset({"foo": 0, "bar": 1, "baz": 2, "baf": 3})
print(m)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_05.py</a></div></p>

<p>V&nbsp;tomto případě bude výsledkem multimnožina, ve které <i>nebude</i>
obsažen prvek &bdquo;foo&ldquo;, ale například prvek &bdquo;baf&ldquo; zde bude
naopak obsažen celkem třikrát:</p>

<pre>
{bar, baz, baz, baf, baf, baf}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Převod mezi kontejnerem Counter a multimnožinou</h2>

<p>A pro úplnost si ukažme konstrukci multimnožiny z&nbsp;kontejneru
<strong>Counter</strong> popsaného v&nbsp;předchozích kapitolách. Nejprve
naplníme kontejner <strong>Counter</strong> a posléze ho předáme konstruktoru
třídy <strong>Multiset</strong>:</p>

<pre>
from multiset import Multiset
from collections import Counter
&nbsp;
c = Counter()
&nbsp;
sentences = """
Počátek každodenní práce na poli formování pozice vyžaduje návrh a realizaci
směru progresivního rozvoje. Na druhé straně rámec stavu a vývoje postavení
vyžadují nalezení a jednoznačné upřesnění systému masové účasti. Vzájemné
postavení organizačních autorit stejně jako stabilní a kvantitativní vzrůst a
sféra naší aktivity napomáhá přípravě a realizaci nových návrhů. Stejně tak
stálé, informačně-propagandistické zabezpečení naší práce jednoznačně
předurčuje implementaci odpovídajících podmínek aktivizace. Nesmíme však
zapomínat, že konzultace se širokým aktivem vyzaduje rozšiřování logistických
prostředků a forem působení. Ideové úvahy nejvyššího řádu a rovněž upřesnění a
rozvoj struktur přetváří strukturu vedení dalších směrů rozvoje. Tímto způsobem
komplexní analýza našich možností od nás vyžaduje analýzy systému výchovy
pracovníků odpovídajících aktuálním potřebám. Závažnost těchto problémů je
natolik zřejmá, že nový model organizační činnosti zvyšuje potřebu aplikace
modelu rozvoje. Pestré a bohaté zkušenosti jasně říkají, že další rozvoj
různých forem činnosti představuje pozoruhodný experiment prověrky možnosti
nasazení veškerých dostupných prostředků. Každodenní praxe nám potvrzuje, že
počátek každodenní práce na poli formování pozice ve značné míře podmiňuje
vytvoření tvorby nových zdrojů.
"""
&nbsp;
words = sentences.split()
c.update(words)
&nbsp;
m = Multiset(c)
print(m)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_12.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_12.py</a></div></p>

<p>Výsledkem bude multimnožina s&nbsp;opakujícími se prvky. Na pořadí prvků
ovšem v&nbsp;naprosté většině případů nezáleží:</p>

<pre>
{Počátek, každodenní, každodenní, práce, práce, práce, na, na, poli, poli,
formování, formování, pozice, pozice, vyžaduje, vyžaduje, návrh, a, a, a, a, a,
a, a, a, a, a, realizaci, realizaci, směru, progresivního, rozvoje., rozvoje.,
rozvoje., Na, druhé, straně, rámec, stavu, vývoje, postavení, postavení,
vyžadují, nalezení, jednoznačné, upřesnění, upřesnění, systému, systému,
masové, účasti., Vzájemné, organizačních, autorit, stejně, jako, stabilní,
kvantitativní, vzrůst, sféra, naší, naší, aktivity, napomáhá, přípravě, nových,
nových, návrhů., Stejně, tak, stálé,, informačně-propagandistické, zabezpečení,
jednoznačně, předurčuje, implementaci, odpovídajících, odpovídajících,
podmínek, aktivizace., Nesmíme, však, zapomínat,, že, že, že, že, konzultace,
se, širokým, aktivem, vyzaduje, rozšiřování, logistických, prostředků, forem,
forem, působení., Ideové, úvahy, nejvyššího, řádu, rovněž, rozvoj, rozvoj,
struktur, přetváří, strukturu, vedení, dalších, směrů, Tímto, způsobem,
komplexní, analýza, našich, možností, od, nás, analýzy, výchovy, pracovníků,
aktuálním, potřebám., Závažnost, těchto, problémů, je, natolik, zřejmá,, nový,
model, organizační, činnosti, činnosti, zvyšuje, potřebu, aplikace, modelu,
Pestré, bohaté, zkušenosti, jasně, říkají,, další, různých, představuje,
pozoruhodný, experiment, prověrky, možnosti, nasazení, veškerých, dostupných,
prostředků., Každodenní, praxe, nám, potvrzuje,, počátek, ve, značné, míře,
podmiňuje, vytvoření, tvorby, zdrojů.}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Spojení multimnožin, multimnožina vzniklá opakováním jiné multimnožiny</h2>

<p>Multimnožiny je možné v&nbsp;případě potřeby spojit, a to opět
s&nbsp;využitím přetíženého operátoru &bdquo;+&ldquo;, podobně jako u většiny
již popsaných kontejnerů (s&nbsp;výjimkou klasických slovníků). Při spojení se
pochopitelně berou v&nbsp;úvahu i opakující se prvky:</p>

<pre>
from multiset import Multiset
&nbsp;
m1 = Multiset(["foo", "bar", "baz", "baf", "xyzzy"])
print(m1)
&nbsp;
m2 = Multiset({"foo": 0, "bar": 1, "baz": 2, "baf": 3})
print(m2)
&nbsp;
m3 = m1 + m2
print(m3)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_06.py</a></div></p>

<p>Po spuštění tohoto skriptu se nejprve vypíše obsah původních multimnožin a
následně i výsledek jejich spojení:</p>

<pre>
{foo, bar, baz, baf, xyzzy}
{bar, baz, baz, baf, baf, baf}
{foo, bar, bar, baz, baz, baz, baf, baf, baf, baf, xyzzy}
</pre>

<p>Přetíženým operátorem * lze zajistit vytvoření nové multimnožiny stejně,
jako bychom toho dosáhli opakovaným použitím operátoru +. Opět se pochopitelně
berou v&nbsp;úvahu opakující se prvky (budou se opakovat minimálně n-krát):</p>

<pre>
from multiset import Multiset
&nbsp;
m1 = Multiset(["foo", "bar", "baz", "baf", "xyzzy"])
print(m1)
&nbsp;
m2 = m1 * 3
print(m2)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_11.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_11.py</a></div></p>

<p>Opět platí, že se nejprve vypíše původní multimnožina a posléze multimnožina
po aplikaci operace &bdquo;opakování n-krát&ldquo;:</p>

<pre>
{foo, bar, baz, baf, xyzzy}
{foo, foo, foo, bar, bar, bar, baz, baz, baz, baf, baf, baf, xyzzy, xyzzy, xyzzy}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Operace <strong>update</strong> a <strong>combine</strong></h2>

<p>Operací (metodou) <strong>update</strong> lze zajistit přidání nového prvku
či prvků do multimnožiny, a to i v&nbsp;případě, že takový prvek/prvky již
v&nbsp;množině existují:</p>

<pre>
from multiset import Multiset
&nbsp;
m = Multiset({"foo": 0, "bar": 1, "baz": 2, "baf": 3})
print(m)
&nbsp;
m.update(["foo"])
print(m)
&nbsp;
m.update(["bar"])
print(m)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_07.py</a></div></p>

<p>Povšimněte si, jak se postupně do multimnožiny přidávají další a další
prvky:</p>

<pre>
{bar, baz, baz, baf, baf, baf}
{bar, baz, baz, baf, baf, baf, foo}
{bar, bar, baz, baz, baf, baf, baf, foo}
</pre>

<p><div class="rs-tip-major">Poznámka: tato operace modifikuje původní
množinu.</div></p>

<p>Naproti tomu metoda nazvaná <strong>combine</strong> dokáže zkombinovat více
multimnožin a vytvořit multimnožinu novou. V&nbsp;našem konkrétním příkladu
bude tedy nejpodstatnější rozdíl spočívat v&nbsp;tom, že
<strong>combine</strong> <i>vrací</i> novou množinu, zatímco
<strong>update</strong> <i>modifikuje</i> množinu původní:</p>

<pre>
from multiset import Multiset
&nbsp;
m = Multiset({"foo": 0, "bar": 1, "baz": 2, "baf": 3})
print(m)
&nbsp;
m2 = m.combine(["foo"])
print(m2)
&nbsp;
m3 = m.combine(["bar"])
print(m3)
&nbsp;
m4 = m.combine(["xyzzy"])
print(m4)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_08.py</a></div></p>

<p>A takto vypadají multimnožiny <strong>m</strong>, <strong>m2</strong>,
<strong>m3</strong> a <strong>m4</strong>:</p>

<pre>
{bar, baz, baz, baf, baf, baf}
{bar, baz, baz, baf, baf, baf, foo}
{bar, bar, baz, baz, baf, baf, baf}
{bar, baz, baz, baf, baf, baf, xyzzy}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Multimnožiny a multimnožinové operace</h2>

<p>Až prozatím se multimnožiny vlastně chovaly podobně jako běžné seznamy.
Ovšem navíc je nad nimi možné provádět &bdquo;multimnožinové&ldquo; operace,
což jsou obdoby klasických množinových operací sjednocení, průniku, diference a
symetrické diference. Podívejme se nejdříve na případ, kdy multimnožiny
obsahují pouze unikátní prvky:</p>

<pre>
from multiset import Multiset
&nbsp;
m1 = Multiset(["a", "b", "c", "d"])
m2 = Multiset(["c", "d", "e", "f"])
&nbsp;
print(m1)
print(m2)
print(m1 | m2)
print(m1 &amp; m2)
print(m1 - m2)
print(m1 ^ m2)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_09.py</a></div></p>

<p>Výsledky (s&nbsp;dopsanými poznámkami):</p>

<pre>
{a, b, c, d}         ; m1
{c, d, e, f}         ; m2
{a, b, c, d, e, f}   ; sjednocení
{c, d}               ; průnik
{a, b}               ; diference
{f, e, a, b}         ; symetrická diference
</pre>

<p>A nyní si ukažme tyto operace nad multimnožinami, ve kterých se prvky
opakují:</p>

<pre>
from multiset import Multiset
&nbsp;
m1 = Multiset(["a", "a", "b", "b", "c", "c", "d", "d"])
m2 = Multiset(["c", "c", "d", "d", "e", "e", "f", "f"])
&nbsp;
print(m1)
print(m2)
print(m1 | m2)
print(m1 &amp; m2)
print(m1 - m2)
print(m1 ^ m2)
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_10.py</a></div></p>

<p>Výsledky s&nbsp;dopsanými poznámkami:</p>

<pre>
{a, a, b, b, c, c, d, d}              ; m1
{c, c, d, d, e, e, f, f}              ; m2
{a, a, b, b, c, c, d, d, e, e, f, f}  ; sjednocení
{c, c, d, d}                          ; průnik
{a, a, b, b}                          ; diference
{b, b, a, a, f, f, e, e}              ; symetrická diference
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Multislovníky</h2>

<p>S&nbsp;multimnožinou do určité míry souvisí i další nestandardní typ
kontejneru, který se nazývá multislovník (<i>multidict</i>). Tento kontejner se
liší od běžných slovníků, v&nbsp;nichž je zaručena jednoznačnost klíčů, což
znamená, že klíč lze použít ve formě <i>selektoru</i> jediné hodnoty
(popř.&nbsp;samozřejmě klíč resp.&nbsp;dvojice klíč+hodnota vůbec nemusí ve
slovníku existovat). V&nbsp;multislovnících je tomu ovšem jinak, protože může
existovat větší množství dvojic klíč+hodnota se stejným klíčem.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Instalace balíčku <strong>multidict</strong></h2>

<p>Multislovník je implementovaný v&nbsp;balíčku nazvaném
<strong>multidict</strong>, který je opět nutné nejdříve nainstalovat:</p>

<pre>
$ <strong>pip3 install multidict</strong>
</pre>

<p>Tento balíček opět nemá žádné další závislosti, což je patrné
z&nbsp;následujícího výpisu průběhu instalace:</p>

<pre>
Defaulting to user installation because normal site-packages is not writeable
Collecting multidict
  Downloading multidict-6.0.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (128 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 128.7/128.7 kB 1.4 MB/s eta 0:00:00
Installing collected packages: multidict
Successfully installed multidict-6.0.5
</pre>

<pre>
$ <strong>pip3 install python-bidi</strong>
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Základní operace s&nbsp;multislovníky</h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 byly uloženy do Git repositáře dostupného na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Odkazy na jednotlivé příklady jsou vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>std_tuple_01.py</td><td>konstrukce n-tic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_tuple_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_tuple_01.py</a></td></tr>
<tr><td> 2</td><td>std_tuple_02.py</td><td>spojování n-tic operátorem +</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_tuple_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_tuple_02.py</a></td></tr>
<tr><td> 3</td><td>std_tuple_03.py</td><td>opakování obsahu n-tice operátorem *</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_tuple_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_tuple_03.py</a></td></tr>
<tr><td> 4</td><td>std_tuple_04.py</td><td>operátor <strong>in</strong> a n-tice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_tuple_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_tuple_04.py</a></td></tr>
<tr><td> 5</td><td>std_tuple_05.py</td><td>generátorová notace a n-tice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_tuple_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_tuple_05.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>std_list_01.py</td><td>konstrukce seznamů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_list_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_list_01.py</a></td></tr>
<tr><td> 7</td><td>std_list_02.py</td><td>spojování seznamů operátorem +</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_list_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_list_02.py</a></td></tr>
<tr><td> 8</td><td>std_list_03.py</td><td>opakování obsahu seznamu operátorem *</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_list_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_list_03.py</a></td></tr>
<tr><td> 9</td><td>std_list_04.py</td><td>řazení prvků seznamu: funkcionální a imperativní přístup</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_list_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_list_04.py</a></td></tr>
<tr><td>10</td><td>std_list_05.py</td><td>otočení prvků v&nbsp;seznamu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_list_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_list_05.py</a></td></tr>
<tr><td>11</td><td>std_list_06.py</td><td>generátorová notace seznamů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_list_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_list_06.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td>std_set_01.py</td><td>konstrukce množin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_set_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_set_01.py</a></td></tr>
<tr><td>13</td><td>std_set_02.py</td><td>operace nad množinami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_set_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_set_02.py</a></td></tr>
<tr><td>14</td><td>std_set_03.py</td><td>operace nad množinami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_set_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_set_03.py</a></td></tr>
<tr><td>15</td><td>std_set_04.py</td><td>rozdíl mezi operacemi <strong>discard</strong> a <strong>remove</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_set_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_set_04.py</a></td></tr>
<tr><td>16</td><td>std_set_05.py</td><td>generátorová notace množin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_set_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_set_05.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>std_dict_01.py</td><td>konstrukce slovníků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_dict_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_dict_01.py</a></td></tr>
<tr><td>18</td><td>std_dict_02.py</td><td>selektory, operace <strong>del</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_dict_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_dict_02.py</a></td></tr>
<tr><td>19</td><td>std_dict_03.py</td><td>chování v&nbsp;případě, že mazaný prvek ve slovníku neexistuje</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_dict_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_dict_03.py</a></td></tr>
<tr><td>20</td><td>std_dict_04.py</td><td>spojení dvou slovníků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_dict_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_dict_04.py</a></td></tr>
<tr><td>21</td><td>std_dict_05.py</td><td>generátorová notace slovníků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_dict_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_dict_05.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>22</td><td>std_deque_01.py</td><td>konstrukce obousměrné fronty ze seznamu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_01.py</a></td></tr>
<tr><td>23</td><td>std_deque_02.py</td><td>konstrukce obousměrné fronty z&nbsp;n-tice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_02.py</a></td></tr>
<tr><td>24</td><td>std_deque_03.py</td><td>konstrukce obousměrné fronty z&nbsp;množiny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_03.py</a></td></tr>
<tr><td>25</td><td>std_deque_04.py</td><td>operace <strong>append</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_04.py</a></td></tr>
<tr><td>26</td><td>std_deque_05.py</td><td>operace <strong>appendleft</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_05.py</a></td></tr>
<tr><td>27</td><td>std_deque_06.py</td><td>operace <strong>insert</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_06.py</a></td></tr>
<tr><td>28</td><td>std_deque_07.py</td><td>operace <strong>pop</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_07.py</a></td></tr>
<tr><td>29</td><td>std_deque_08.py</td><td>operace <strong>popleft</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_08.py</a></td></tr>
<tr><td>30</td><td>std_deque_09.py</td><td>otočení prvků ve frontě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_09.py</a></td></tr>
<tr><td>31</td><td>std_deque_10.py</td><td>rotace prvků ve frontě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/std_deque_10.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>32</td><td>box_01.py</td><td>konstrukce boxu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_01.py</a></td></tr>
<tr><td>33</td><td>box_02.py</td><td>přístup k&nbsp;prvkům boxu přes klíč i atribut</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_02.py</a></td></tr>
<tr><td>34</td><td>box_03.py</td><td>chování při pokusu o přístup k&nbsp;neexistující hodnotě přes klíč</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_03.py</a></td></tr>
<tr><td>35</td><td>box_04.py</td><td>chování při pokusu o přístup k&nbsp;neexistující hodnotě přes atribut</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_04.py</a></td></tr>
<tr><td>36</td><td>box_05.py</td><td>chování při použití klíčů, které nejsou platnými názvy atributů v&nbsp;Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_05.py</a></td></tr>
<tr><td>37</td><td>box_06.py</td><td>náhrada nekorektních názvů klíčů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_06.py</a></td></tr>
<tr><td>38</td><td>box_07.py</td><td>explicitní prefix u nekorektních názvů klíčů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_07.py</a></td></tr>
<tr><td>39</td><td>box_08.py</td><td>načtení datového souboru, přístup k&nbsp;prvkům přes klíče i atributy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_08.py</a></td></tr>
<tr><td>40</td><td>box_09.py</td><td>využití klíče s&nbsp;tečkami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_09.py</a></td></tr>
<tr><td>41</td><td>box_10.py</td><td>iterace přes prvky uložené do boxu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/box_10.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>42</td><td>openapi.json</td><td>datový soubor používaný v&nbsp;některých demonstračních příkladech</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/openapi.json">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/openapi.json</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>counter_01.py</td><td>konstrukce prázdného kontejneru Counter</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_01.py</a></td></tr>
<tr><td>44</td><td>counter_02.py</td><td>konstrukce kontejneru Counter ze seznamu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_02.py</a></td></tr>
<tr><td>45</td><td>counter_03.py</td><td>konstrukce kontejneru Counter z&nbsp;n-tice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_03.py</a></td></tr>
<tr><td>46</td><td>counter_04.py</td><td>konstrukce kontejneru Counter z&nbsp;množiny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_04.py</a></td></tr>
<tr><td>47</td><td>counter_05.py</td><td>konstrukce kontejneru Counter ze slovníku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_05.py</a></td></tr>
<tr><td>48</td><td>counter_06.py</td><td>spojení dvou kontejnerů Counter</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_06.py</a></td></tr>
<tr><td>49</td><td>counter_07.py</td><td>rozdíl čítačů ze dvou kontejnerů Counter</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_07.py</a></td></tr>
<tr><td>50</td><td>counter_08.py</td><td>výpočet frekvence znaků v&nbsp;textu, využití programové smyčky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_08.py</a></td></tr>
<tr><td>51</td><td>counter_09.py</td><td>výpočet frekvence slov v&nbsp;textu, využití programové smyčky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_09.py</a></td></tr>
<tr><td>52</td><td>counter_10.py</td><td>převod kontejneru <strong>Counter</strong> na seznam a slovník</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_10.py</a></td></tr>
<tr><td>53</td><td>counter_11.py</td><td>výpočet frekvence slov v&nbsp;textu, zjednodušená varianta</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_11.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/counter_11.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>54</td><td>multiset_01.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_01.py</a></td></tr>
<tr><td>55</td><td>multiset_02.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_02.py</a></td></tr>
<tr><td>56</td><td>multiset_03.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_03.py</a></td></tr>
<tr><td>57</td><td>multiset_04.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_04.py</a></td></tr>
<tr><td>58</td><td>multiset_05.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_05.py</a></td></tr>
<tr><td>59</td><td>multiset_06.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_06.py</a></td></tr>
<tr><td>60</td><td>multiset_07.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_07.py</a></td></tr>
<tr><td>61</td><td>multiset_08.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_08.py</a></td></tr>
<tr><td>62</td><td>multiset_09.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_09.py</a></td></tr>
<tr><td>63</td><td>multiset_10.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/multiset_10.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>64</td><td>_01.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_01.py</a></td></tr>
<tr><td>65</td><td>_02.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_02.py</a></td></tr>
<tr><td>66</td><td>_03.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_03.py</a></td></tr>
<tr><td>67</td><td>_04.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_04.py</a></td></tr>
<tr><td>68</td><td>_05.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_05.py</a></td></tr>
<tr><td>69</td><td>_06.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_06.py</a></td></tr>
<tr><td>70</td><td>_07.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_07.py</a></td></tr>
<tr><td>71</td><td>_08.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_08.py</a></td></tr>
<tr><td>72</td><td>_09.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_09.py</a></td></tr>
<tr><td>73</td><td>_10.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/containers/_10.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>collections &ndash; Container datatypes<br />
<a href="https://docs.python.org/3/library/collections.html">https://docs.python.org/3/library/collections.html</a>
</li>

<li>Counting With Python's Counter (Overview) - Real Python<br />
<a href="https://realpython.com/lessons/counting-python-counter-overview/">https://realpython.com/lessons/counting-python-counter-overview/</a>
</li>

<li>Python Counter: Learn the Easiest Way of Counting Objects in Python<br />
<a href="https://towardsdatascience.com/python-counter-learn-the-easiest-way-of-counting-objects-in-python-9165d15ea893">https://towardsdatascience.com/python-counter-learn-the-easiest-way-of-counting-objects-in-python-9165d15ea893</a>
</li>

<li>Balíček multidict na PyPi<br />
<a href="https://pypi.org/project/multidict/">https://pypi.org/project/multidict/</a>
</li>

<li>Balíček multiset na PyPi<br />
<a href="https://pypi.org/project/multiset/">https://pypi.org/project/multiset/</a>
</li>

<li>Repositář balíčku multidict<br />
<a href="https://github.com/aio-libs/multidict">https://github.com/aio-libs/multidict</a>
</li>

<li>Repositář balíčku bidict<br />
<a href="https://github.com/jab/bidict">https://github.com/jab/bidict</a>
</li>

<li>Dokumentace k&nbsp;balíčku bidict<br />
<a href="https://bidict.readthedocs.io/en/main/">https://bidict.readthedocs.io/en/main/</a>
</li>

<li>Repositář balíčku DottedDict<br />
<a href="https://github.com/carlosescri/DottedDict">https://github.com/carlosescri/DottedDict</a>
</li>

<li>Repositář balíčku Box<br />
<a href="https://github.com/cdgriffith/Box">https://github.com/cdgriffith/Box</a>
</li>

<li>Wiki (dokumentace) balíčku Box<br />
<a href="https://github.com/cdgriffith/Box/wiki">https://github.com/cdgriffith/Box/wiki</a>
</li>

<li>Persistent data structure<br />
<a href="https://en.wikipedia.org/wiki/Persistent_data_structure">https://en.wikipedia.org/wiki/Persistent_data_structure</a>
</li>

<li>Collections (Python)<br />
<a href="https://docs.python.org/3/library/collections.abc.html">https://docs.python.org/3/library/collections.abc.html</a>
</li>

<li>Seriál Programovací jazyk Lua<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-lua/">https://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Operátory a asociativní pole v&nbsp;jazyku Lua<br />
<a href="https://www.root.cz/clanky/operatory-a-asociativni-pole-v-jazyku-lua/">https://www.root.cz/clanky/operatory-a-asociativni-pole-v-jazyku-lua/</a>
</li>

<li>Python MultiDict Example: Map a Key to Multiple Values<br />
<a href="https://howtodoinjava.com/python-datatypes/python-multidict-examples/">https://howtodoinjava.com/python-datatypes/python-multidict-examples/</a>
</li>

<li>Immutable object<br />
<a href="https://en.wikipedia.org/wiki/Immutable_object">https://en.wikipedia.org/wiki/Immutable_object</a>
</li>

<li>pyrsistent na PyPi<br />
<a href="https://pypi.org/project/pyrsistent/">https://pypi.org/project/pyrsistent/</a>
</li>

<li>pyrsistent na GitHubu<br />
<a href="https://github.com/tobgu/pyrsistent">https://github.com/tobgu/pyrsistent</a>
</li>

<li>Dokumentace knihovny pyrsistent<br />
<a href="https://pyrsistent.readthedocs.io/en/latest/index.html">https://pyrsistent.readthedocs.io/en/latest/index.html</a>
</li>

<li>pyrthon na GitHubu<br />
<a href="https://github.com/tobgu/pyrthon/">https://github.com/tobgu/pyrthon/</a>
</li>

<li>Mori na GitHubu<br />
<a href="https://github.com/swannodette/mori">https://github.com/swannodette/mori</a>
</li>

<li>Mori: popis API (dokumentace)<br />
<a href="http://swannodette.github.io/mori/">http://swannodette.github.io/mori/</a>
</li>

<li>Mori: Benchmarking<br />
<a href="https://github.com/swannodette/mori/wiki/Benchmarking">https://github.com/swannodette/mori/wiki/Benchmarking</a>
</li>

<li>Functional data structures in JavaScript with Mori<br />
<a href="http://sitr.us/2013/11/04/functional-data-structures.html">http://sitr.us/2013/11/04/functional-data-structures.html</a>
</li>

<li>Immutable.js<br />
<a href="https://facebook.github.io/immutable-js/">https://facebook.github.io/immutable-js/</a>
</li>

<li>Understanding Clojure's Persistent Vectors, pt. 1<br />
<a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1">http://hypirion.com/musings/understanding-persistent-vector-pt-1</a>
</li>

<li>Hash array mapped trie (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Hash_array_mapped_trie">https://en.wikipedia.org/wiki/Hash_array_mapped_trie</a>
</li>

<li>Java theory and practice: To mutate or not to mutate?<br />
<a href="http://www.ibm.com/developerworks/java/library/j-jtp02183/index.html">http://www.ibm.com/developerworks/java/library/j-jtp02183/index.html</a>
</li>

<li>Efficient persistent (immutable) data structures<br />
<a href="https://persistent.codeplex.com/">https://persistent.codeplex.com/</a>
</li>

<li>Clojure (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Clojure">http://en.wikipedia.org/wiki/Clojure</a>
</li>

<li>Clojure (Wikipedia CS)<br />
<a href="http://cs.wikipedia.org/wiki/Clojure">http://cs.wikipedia.org/wiki/Clojure</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

