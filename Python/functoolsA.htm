<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Funkcionální programování v Pythonu s využitím knihovny Toolz (3. část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Funkcionální programování v Pythonu s využitím knihovny Toolz (3. část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Funkcionální programování v&nbsp;Pythonu s&nbsp;využitím knihovny Toolz (3. část)</a></p>
<p><a href="#k02">*** 2. Curryfikace (currying)</a></p>
<p><a href="#k03">*** 3. Operace <strong>curry</strong> zapisovaná formou konstrukce objektu</a></p>
<p><a href="#k04">*** 4. Operace <strong>curry</strong> zapisovaná formou dekorátoru</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Funkcionální programování v&nbsp;Pythonu s&nbsp;využitím knihovny Toolz (3. část)</h2>

<p>V&nbsp;pořadí již třetím článku o funkcionální knihovně <i>Toolz</i> již
opustíme funkce, které jsou určené pro zpracování sekvencí. Namísto toho se
zaměříme na mnohem zajímavější oblast, konkrétně na problematiku transformaci
funkcí, na takzvaný <i>currying</i> (curifikaci), taktéž na částečné
vyhodnocení funkcí atd.  Jedná se o techniky, které jsme mohli vidět (i když
v&nbsp;poněkud odlišné podobě) i v&nbsp;knihovně <i>funcy</i>. Knihovna
<i>Toolz</i> ovšem nabízí ucelenější a dobře propojené API k&nbsp;těmto
funkcionálním technikám; navíc je některé dále popsané operace zapsat formou
dekorátoru, což je ve výsledku velmi čitelné řešení (jak ostatně uvidíme
v&nbsp;demonstračních příkladech).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Curryfikace (currying)</h2>

<p>Pod termínem <i>curryfikace (currying)</i> se v&nbsp;teorii programovacích
jazyků (ovšem i obecně v&nbsp;matematice) označuje proces, jímž se transformuje
funkce, která má více než jeden parametr, do řady vložených funkcí, přičemž
každá z&nbsp;nich má jen jediný parametr (jen na okraj &ndash; čistou funkci
bez parametrů lze nahradit konstantou). Curryfikaci si můžeme představit jako
postupnou transformaci funkce s&nbsp;<i>n</i> parametry na jinak zkonstruovanou
funkci s&nbsp;<i>n-1</i> parametry atd.&nbsp;až rekurzivně dojdeme
k&nbsp;funkci s&nbsp;jediným parametrem:</p>

<pre>
x = f(a,b,c) &rarr;
    h = g(a)
    i = h(b)
    x = i(c)
</pre>

<p>Nebo lze prakticky totéž zapsat na jediném řádku:</p>

<pre>
x = f(a,b,c) &rarr; g(a)(b)(c)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že funkce
<strong>g</strong> a <strong>h</strong> musí v&nbsp;tomto případě vracet jinou
funkci.</div></p>

<p>To zní sice velmi složitě, ale v&nbsp;praxi je (například
v&nbsp;programovacím jazyku ML, ale i v&nbsp;některých dalších programovacích
jazycích) proces curryfikace realizován z&nbsp;pohledu programátora automaticky
již samotným zápisem funkce s&nbsp;větším množstvím parametrů. To nám umožňuje
realizovat <i>částečné vyhodnocení funkce</i> (<i>partial application)</i>,
konkrétně zavoláním nějaké funkce (například funkce akceptující dva parametry)
ve skutečnosti pouze s&nbsp;jediným parametrem.</p>

<p>Jenže otázkou je, co má být výsledkem volání takové funkce? Určitě ne
výsledek implementované operace, protože nám chybí jeden parametr pro to, aby
byl výsledek vypočten a vrácen volajícím kódu. Ovšem můžeme provést částečný
výpočet dosazením (jediného) předaného parametru a výsledek &ndash; tento
částečný výpočet &ndash; vrátit. Výsledkem je tedy obecně částečně aplikovaná
funkce (tedy například funkce, které byly v&nbsp;předchozím příkladu označeny
symboly <strong>g</strong> a <strong>h</strong>). Jedná se o jeden ze způsobů,
jak programově (tedy přímo za běhu aplikace) vytvářet nové funkce.</p>

<p><div class="rs-tip-major">Poznámka: curryfikace/currying se tedy ve
skutečnosti poněkud liší od tvorby částečně aplikovaných funkcí (i když se
mnohdy oba termíny zaměňují, nebo používají současně).</div></p>

<p><div class="rs-tip-major">Poznámka<sup>2</sup>: název <i>currying</i> je
odvozen od jména známého matematika Haskella Curryho, po kterém je ostatně
pojmenován i další programovací jazyk Haskell (ten se s&nbsp;výše zmíněným
jazykem ML v&nbsp;mnoha ohledech podobá, právě i v&nbsp;kontextu curryingu a
s&nbsp;ním souvisejícím faktem, že funkce akceptují jeden parametr). Ve
skutečnosti však Haskell tento proces nevymyslel. Za původní myšlenkou tohoto
procesu stojí Moses Schönfinkel, takže se uvažovalo, že se tento proces bude
nazývat &bdquo;Schönfinkelisation&ldquo;. To by bylo asi férovější, ovšem
uznejte sami, že se nejedná o tak snadno zapamatovatelný název, jakým je
currying.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Operace <strong>curry</strong> zapisovaná formou konstrukce objektu</h2>

<pre>
from toolz import curry
&nbsp;
&nbsp;
def <strong>add</strong>(x, y):
    return x + y
&nbsp;
&nbsp;
curried = curry(add)
&nbsp;
print(curried)
print(curried(1))
print(curried(1)(2))  <i># pozor na umístění závorek!</i>
</pre>

<pre>
&lt;function add at 0x7f58fe917920&gt;
&lt;function add at 0x7f58fe917920&gt;
3
</pre>

<pre>
from toolz import curry
&nbsp;
&nbsp;
def <strong>add3</strong>(x, y, z):
    return x + y + z
&nbsp;
&nbsp;
curried = curry(add3)
&nbsp;
print(curried)
print(curried(1))
print(curried(1)(2))      <i># pozor na umístění závorek!</i>
print(curried(1)(2)(3))   <i># pozor na umístění závorek!</i>
</pre>

<pre>
&lt;function add3 at 0x7fc8530f7920&gt;
&lt;function add3 at 0x7fc8530f7920&gt;
&lt;function add3 at 0x7fc8530f7920&gt;
6
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Operace <strong>curry</strong> zapisovaná formou dekorátoru</h2>

<pre>
from toolz import curry


@curry
def add(x, y):
    return x + y


print(add)
print(add(1))
print(add(1)(2))  # pozor na umístění závorek!
</pre>

<pre>
</pre>

<pre>
from toolz import curry


@curry
def add3(x, y, z):
    return x + y + z


print(add3)
print(add3(1))
print(add3(1)(2))      # pozor na umístění závorek!
print(add3(1)(2)(3))   # pozor na umístění závorek!
</pre>

<pre>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty, které jsme si prozatím v&nbsp;tomto seriálu
ukázali, naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je nutné mít
nainstalovánu některou z&nbsp;podporovaných verzí Pythonu 3, a pro dnešní
příklady i výše zmíněnou knihovnu <strong>funcy</strong>):</p>

<table>
<tr><th>  #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>  1</td><td>binary_operator.py</td><td>ukázka funkce vyššího řádu, která jako parametr akceptuje jinou funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator.py</a></td></tr>
<tr><td>  2</td><td>get_operator_1.py</td><td>ukázka funkce vyššího řádu, která vrací jinou funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_1.py</a></td></tr>
<tr><td>  3</td><td>get_operator_2.py</td><td>ukázka funkce vyššího řádu, která vrací jinou funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_2.py</a></td></tr>
<tr><td>  4</td><td>standard_operators.py</td><td>použití standardních operátorů přepsaných do formy funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/standard_operators.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/standard_operators.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>  5</td><td>binary_operator_types.py</td><td>varianta příkladu <strong>binary_operator.py</strong> s&nbsp;plnými typovými deklaracemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator_types.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator_types.py</a></td></tr>
<tr><td>  6</td><td>get_operator_types.py</td><td>varianta příkladu <strong>get_operator_2.py</strong> s&nbsp;plnými typovými deklaracemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_types.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_types.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>  7</td><td>map_1.py</td><td>příklad použití funkce <strong>map</strong>: výpočet délky všech slov v&nbsp;textu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_1.py</a></td></tr>
<tr><td>  8</td><td>map_2.py</td><td>příklad použití funkce <strong>map</strong>: výpočet absolutní hodnoty všech členů posloupnosti</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_2.py</a></td></tr>
<tr><td>  9</td><td>map_3.py</td><td>příklad použití funkce <strong>map</strong>: aplikace vlastní pojmenované funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_3.py</a></td></tr>
<tr><td> 10</td><td>map_4.py</td><td>příklad použití funkce <strong>map</strong>: aplikace vlastního lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>


<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Getting started with functional programming in Python using the toolz library<br />
<a href="https://opensource.com/article/18/10/functional-programming-python-toolz">https://opensource.com/article/18/10/functional-programming-python-toolz</a>
</li>

<li>Toolz module in Python<br />
<a href="https://www.geeksforgeeks.org/toolz-module-in-python/">https://www.geeksforgeeks.org/toolz-module-in-python/</a>
</li>

<li>functools — Higher-order functions and operations on callable objects<br />
<a href="https://docs.python.org/3/library/functools.html">https://docs.python.org/3/library/functools.html</a>
</li>

<li>Functional Programming HOWTO<br />
<a href="https://docs.python.org/3/howto/functional.html">https://docs.python.org/3/howto/functional.html</a>
</li>

<li>Functional Programming in Python: When and How to Use It<br />
<a href="https://realpython.com/python-functional-programming/">https://realpython.com/python-functional-programming/</a>
</li>

<li>Functional Programming With Python<br />
<a href="https://realpython.com/learning-paths/functional-programming/">https://realpython.com/learning-paths/functional-programming/</a>
</li>

<li>Awesome Functional Python<br />
<a href="https://github.com/sfermigier/awesome-functional-python">https://github.com/sfermigier/awesome-functional-python</a>
</li>

<li>Currying<br />
<a href="https://en.wikipedia.org/wiki/Currying">https://en.wikipedia.org/wiki/Currying</a>
</li>

<li>Currying in Python &ndash; A Beginner’s Introduction<br />
<a href="https://www.askpython.com/python/examples/currying-in-python">https://www.askpython.com/python/examples/currying-in-python</a>
</li>

<li>Fundamental Concepts in Programming Languages<br />
<a href="https://en.wikipedia.org/wiki/Fundamental_Concepts_in_Programming_Languages">https://en.wikipedia.org/wiki/Fundamental_Concepts_in_Programming_Languages</a>
</li>

<li>When should I use function currying?<br />
<a href="https://stackoverflow.com/questions/24881604/when-should-i-use-function-currying">https://stackoverflow.com/questions/24881604/when-should-i-use-function-currying</a>
</li>

<li>Toolz<br />
<a href="https://github.com/pytoolz/toolz/tree/master">https://github.com/pytoolz/toolz/tree/master</a>
</li>

<li>Coconut: funkcionální jazyk s pattern matchingem kompatibilní s&nbsp;Pythonem<br />
<a href="https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/">https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/</a>
</li>

<li>A HITCHHIKER'S GUIDE TO functools<br />
<a href="https://ep2021.europython.eu/media/conference/slides/a-hitchhikers-guide-to-functools.pdf">https://ep2021.europython.eu/media/conference/slides/a-hitchhikers-guide-to-functools.pdf</a>
</li>

<li>Coconut aneb funkcionální nadstavba nad Pythonem (2.část)<br />
<a href="https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/">https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/</a>
</li>

<li>Knihovny pro zpracování posloupností (sekvencí) v&nbsp;Pythonu<br />
<a href="https://www.root.cz/clanky/knihovny-pro-zpracovani-posloupnosti-sekvenci-v-pythonu/">https://www.root.cz/clanky/knihovny-pro-zpracovani-posloupnosti-sekvenci-v-pythonu/</a>
</li>

<li>clj - repositář s knihovnou<br />
<a href="https://github.com/bfontaine/clj">https://github.com/bfontaine/clj</a>
</li>

<li>clj 0.1.0 &ndash; stránka na PyPi<br />
<a href="https://pypi.python.org/pypi/clj/0.1.0">https://pypi.python.org/pypi/clj/0.1.0</a>
</li>

<li>Clojure aneb jazyk umožňující tvorbu bezpečných vícevláknových aplikací pro JVM (4.část - kolekce, sekvence a lazy sekvence) <br />
<a href="https://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">https://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure a bezpečné aplikace pro JVM: sekvence, lazy sekvence a paralelní programy <br />
<a href="https://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">https://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Coconut: Simple, elegant, Pythonic functional programming<br />
<a href="http://coconut-lang.org/">http://coconut-lang.org/</a>
</li>

<li>coconut (Python package index)<br />
<a href="https://pypi.python.org/pypi/coconut/">https://pypi.python.org/pypi/coconut/</a>
</li>

<li>Coconut Tutorial<br />
<a href="http://coconut.readthedocs.io/en/master/HELP.html">http://coconut.readthedocs.io/en/master/HELP.html</a>
</li>

<li>Coconut FAQ<br />
<a href="http://coconut.readthedocs.io/en/master/FAQ.html">http://coconut.readthedocs.io/en/master/FAQ.html</a>
</li>

<li>Coconut Documentation<br />
<a href="http://coconut.readthedocs.io/en/master/DOCS.html">http://coconut.readthedocs.io/en/master/DOCS.html</a>
</li>

<li>Coconut na Redditu<br />
<a href="https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/">https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/</a>
</li>

<li>Repositář na GitHubu<br />
<a href="https://github.com/evhub/coconut">https://github.com/evhub/coconut</a>
</li>

<li>Object-Oriented Programming — The Trillion Dollar Disaster<br />
<a href="https://betterprogramming.pub/object-oriented-programming-the-trillion-dollar-disaster-92a4b666c7c7">https://betterprogramming.pub/object-oriented-programming-the-trillion-dollar-disaster-92a4b666c7c7</a>
</li>

<li>Goodbye, Object Oriented Programming<br />
<a href="https://cscalfani.medium.com/goodbye-object-oriented-programming-a59cda4c0e53">https://cscalfani.medium.com/goodbye-object-oriented-programming-a59cda4c0e53</a>
</li>

<li>So You Want to be a Functional Programmer (Part 1)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536</a>
</li>

<li>So You Want to be a Functional Programmer (Part 2)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a</a>
</li>

<li>So You Want to be a Functional Programmer (Part 3)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

