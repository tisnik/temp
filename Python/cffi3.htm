<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Propojení Pythonu s nativními knihovnami s využitím balíčku cffi (3)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Propojení Pythonu s nativními knihovnami s využitím balíčku cffi (3)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části článku o propojení Pythonu s nativními knihovnami s využitím balíčku cffi se budeme zabývat tím, jakým způsobem je možné do funkce naprogramované v jazyku C předat pole s prvky různých typů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Předávání polí mezi skriptem napsaným v&nbsp;Pythonu a knihovnou naprogramovanou v&nbsp;jazyku C</a></p>
<p><a href="#k02">2. Funkce naprogramovaná v&nbsp;jazyku C, která akceptuje pole prvků typu <strong>float</strong></a></p>
<p><a href="#k03">3. Konstrukce pole na straně Pythonu s&nbsp;jeho předáním do céčkovské funkce</a></p>
<p><a href="#k04">4. Překlad a spuštění dnešního prvního demonstračního příkladu</a></p>
<p><a href="#k05">5. Nastavení hodnot prvků pole</a></p>
<p><a href="#k06">6. Výsledek při spuštění druhého skriptu</a></p>
<p><a href="#k07">7. Inicializace prvků pole přímo v&nbsp;konstruktoru</a></p>
<p><a href="#k08">8. Mezní případ &ndash; pole s&nbsp;nulovým počtem prvků</a></p>
<p><a href="#k09">9. Zpracování pole struktur v&nbsp;jazyku C</a></p>
<p><a href="#k10">10. Inicializace pole struktur v&nbsp;Pythonu</a></p>
<p><a href="#k11">11. Výsledek získaný po spuštění skriptu</a></p>
<p><a href="#k12">12. Dvourozměrná pole</a></p>
<p><a href="#k13">13. Funkce naprogramovaná v&nbsp;C, která akceptuje jednu formu dvourozměrných polí</a></p>
<p><a href="#k14">14. Konstrukce dvourozměrného pole v&nbsp;Pythonu s&nbsp;předáním tohoto pole do céčkovské funkce</a></p>
<p><a href="#k15">15. Výsledek získaný po spuštění skriptů</a></p>
<p><a href="#k16">16. Dvourozměrná pole s&nbsp;proměnným počtem řádků</a></p>
<p><a href="#k17">17. Obsah čtvrté části článku</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Předávání polí mezi skriptem napsaným v&nbsp;Pythonu a knihovnou naprogramovanou v&nbsp;jazyku C</h2>

<p>Na úvodní dva články [<a
href="https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-cffi/">1</a>][<a
href="https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-cffi-2/">2</a>]
o propojení skriptů či celých aplikací naprogramovaných <a
href="https://www.root.cz/n/python/">v&nbsp;Pythonu</a> s&nbsp;nativními
knihovnami (typicky naprogramovanými v&nbsp;jazyku C) s&nbsp;využitím balíčku
<i>cffi</i> dnes navážeme. Popíšeme si, jak se do (nativních) céčkovských
funkcí předávají pole.</p>

<a href="https://www.root.cz/obrazek/1092946/"><img src="https://i.iinfo.cz/images/85/c-prev.png" class="image-1092946" data-prev-filename="https://i.iinfo.cz/images/85/c-prev.png" data-prev-width="192" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/85/c-large.png" data-large-width="374" data-large-height="525" alt="&#160;" title="Autor: Prentice Hall, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="192" height="270" /></a>
<p><i>Obrázek 1: Podle <a href="https://www.tiobe.com/tiobe-index/">Tiobe</a>
jsou Python a C v&nbsp;současnosti nejaktivněji používané programovací jazyky
(i když je statistika pochopitelně značně zkreslena tím, že některé starší či
proprietární jazyky jsou využívány spíše uzavřenějšími komunitami).</i></p>

<p>Připomeňme si, že pole jsou v&nbsp;jazyku C jediným datovým typem, který se
předává odkazem (referencí, tedy přes ukazatel) a nikoli hodnotnou. Navíc lze
předpokládat, že pole mohou být rozsáhlá, což znamená, že jejich reprezentace
na straně Pythonu by v&nbsp;ideálním případě měla být shodná s&nbsp;céčkovou
reprezentací, aby například nebylo nutné konvertovat miliony prvků (u
skalárních datových typů, například <strong>int</strong> či
<strong>float</strong> by to nepředstavovalo větší problém). Taktéž by bylo
vhodné, aby se s&nbsp;prvky pole dalo na straně Pythonu vhodným způsobem
pracovat, ideálně podobně, jako s&nbsp;prvky n-tic nebo seznamů. Všechny tyto
požadavky knihovny <i>cffi</i> splňuje.</p> 



<p><a name="k02"></a></p>
<h2 id="k02">2. Funkce naprogramovaná v&nbsp;jazyku C, která akceptuje pole prvků typu <strong>float</strong></h2>

<p>V&nbsp;této kapitole si ukážeme, jak by mohla vypadat jednoduchá funkce
naprogramovaná v&nbsp;jazyku C, která akceptuje pole prvků typu
<strong>float</strong>. Pole v&nbsp;céčku jsou vlastně &bdquo;pouhé&ldquo;
paměťové bloky, v&nbsp;nichž jsou za sebou (tedy bez výplní) uloženy hodnoty
jednotlivých prvků. Žádné další informace pole neobsahuje, což znamená, že
například délku pole (tedy počet prvků) musíme předat ve zvláštním parametru
popř.&nbsp;mít v&nbsp;poli nějaký prvek se speciální hodnotou tvořící zarážku
(tak je tomu u polí znaků = řetězců).</p>

<p>Z&nbsp;tohoto důvodu funkce, která bude tisknout obsah pole, bude mít
následující prototyp (hlavičku):</p>

<pre>
void <strong>print_array</strong>(float array[], int items);
</pre>

<p><div class="rs-tip-major">Poznámka: připomeňme si, že pole se v&nbsp;céčku
předává odkazem, nikoli hodnotou.</div></p>

<p>Samotná implementace funkce, která vytiskne obsah pole typu
<strong>float[]</strong>, může vypadat například takto:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
#include "array_printer.h"
&nbsp;
extern void <strong>print_array</strong>(float array[], int items)
{
    int i;
    for (i=0; i&lt;items; i++) {
        printf("array item %d = %f\n", i, array[i]);
    }
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Konstrukce pole na straně Pythonu s&nbsp;jeho předáním do céčkovské funkce</h2>

<p>Nyní je nutné na straně Pythonu vytvořit pole s&nbsp;prvky typu
<strong>float</strong>. Při použití knihovny <i>cffi</i> je to až překvapivě
snadné, protože takové pole se vytvoří příkazem:</p>

<pre>
array = ffi.new("float[10]")
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti se nevrátí přímo céčkové
pole, ale objekt, který toto pole i s&nbsp;dalšími informacemi obsahuje. Jak
uvidíme dále, je díky použití tohoto přístupu snadné s&nbsp;obsahem pole
pracovat jak na straně Pythonu, tak i na straně programovacího jazyka
C.</div></p>

<p>Další postup je snadný &ndash; načteme dynamicky linkovanou knihovnu,
zaregistrujeme prototyp (hlavičku) volané céčkové funkce a následně tuto funkci
zavoláme:</p>

<pre>
ffi.cdef(load_header("array_printer.h"))
&nbsp;
array = ffi.new("float[10]")
&nbsp;
printer.print_array(array, len(array))
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že díky tomu, že
<strong>array</strong> je pythonovským objektem, můžeme délku pole získat
snadno standardní funkcí <strong>len</strong>.</div></p>

<p>Úplný tvar výsledného pythonovského skriptu vypadá následovně:</p>

<pre>
import pathlib
&nbsp;
from cffi import FFI
&nbsp;
ffi = FFI()
&nbsp;
def <strong>load_header</strong>(filename):
    directory = pathlib.Path().absolute()
    header = directory / filename
    with open(header) as fin:
        return fin.read()
&nbsp;
&nbsp;
def <strong>load_library</strong>(library_name):
    return ffi.dlopen(library_name)
&nbsp;
&nbsp;
ffi.cdef(load_header("array_printer.h"))
&nbsp;
array = ffi.new("float[10]")
&nbsp;
printer = load_library("libaprinter.so")
printer.print_array(array, len(array))
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Překlad a spuštění dnešního prvního demonstračního příkladu</h2>

<p>Céčkovou část <a href="#k02">ze druhé kapitoly</a> přeložíme do dynamicky
linkované knihovny takto:</p>

<pre>
$ <strong>gcc -Wall -ansi -c -fPIC array_printer.c -o array_printer.o</strong>
&nbsp;
$ <strong>gcc -shared -Wl,-soname,libaprinter.so -o libaprinter.so array_printer.o</strong>
</pre>

<p>A skript naprogramovaný v&nbsp;Pythonu se spustí následovně:</p>

<pre>
$ <strong>export LD_LIBRARY_PATH=.</strong>
$ <strong>python3 call_via_cffi.py</strong>
</pre>

<p>Po spuštění tohoto příkladu by se měl zobrazit obsah pole, což je
v&nbsp;tomto případě deset nulových prvků:</p>

<pre>
array item 0 = 0.000000
array item 1 = 0.000000
array item 2 = 0.000000
array item 3 = 0.000000
array item 4 = 0.000000
array item 5 = 0.000000
array item 6 = 0.000000
array item 7 = 0.000000
array item 8 = 0.000000
array item 9 = 0.000000
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Nastavení hodnot prvků pole</h2>

<p>Prvky pole vytvořeného v&nbsp;prvním demonstračním příkladu byly nulové, což
pravděpodobně není pro naprostou většinu aplikací ideální :-). Jak je však
možné pole nejenom vytvořit, ale i inicializovat jeho prvky? Knihovna
<i>cffi</i>, resp.&nbsp;přesněji řečeno objekty vytvořené funkcí
<strong>ffi.new</strong>, nám nabízí hned několik způsobů. Nejjednodušší je
s&nbsp;takovým objektem pracovat jako se seznamem, což je možné:</p>

<pre>
array = ffi.new("float[10]")
&nbsp;
for i in range(len(array)):
    array[i] = 1.0 / (i+1)
</pre>

<p>Interně je vše řešeno poměrně jednoduše, protože v&nbsp;Pythonu je možné
v&nbsp;případě potřeby implementovat vlastní variantu operátoru indexování, což
se v&nbsp;praxi provádí předefinováním metod <strong>__getitem__</strong> a
<strong>__setitem__</strong>. Díky tomu lze s&nbsp;objektem, který jsme
pojmenovali <strong>array</strong>, pracovat tak, jakoby se skutečně jednalo o
pole, i když jeho vnitřní struktura je poměrně složitá.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Výsledek při spuštění druhého skriptu</h2>

<p>Celý skript, který volá nativní céčkovou funkci
<strong>print_array</strong>, si upravíme tak, že prvky pole budeme postupně,
v&nbsp;programové smyčce, modifikovat. Nová podoba skriptu bude vypadat
takto:</p>

<pre>
import pathlib
&nbsp;
from cffi import FFI
&nbsp;
ffi = FFI()
&nbsp;
def <strong>load_header</strong>(filename):
    directory = pathlib.Path().absolute()
    header = directory / filename
    with open(header) as fin:
        return fin.read()
&nbsp;
&nbsp;
def <strong>load_library</strong>(library_name):
    return ffi.dlopen(library_name)
&nbsp;
&nbsp;
ffi.cdef(load_header("array_printer.h"))
&nbsp;
array = ffi.new("float[10]")
&nbsp;
for i in range(len(array)):
    array[i] = 1.0 / (i+1)
&nbsp;
printer = load_library("libaprinter.so")
printer.print_array(array, len(array))
</pre>

<p>A výsledky vypsané céčkovskou funkcí dokazují, že vše pracuje korektně:</p>

<pre>
array item 0 = 1.000000
array item 1 = 0.500000
array item 2 = 0.333333
array item 3 = 0.250000
array item 4 = 0.200000
array item 5 = 0.166667
array item 6 = 0.142857
array item 7 = 0.125000
array item 8 = 0.111111
array item 9 = 0.100000
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Inicializace prvků pole přímo v&nbsp;konstruktoru</h2>

<p>Knihovna <i>cffi</i> navíc umožňuje inicializovat prvky pole přímo
v&nbsp;konstruktoru <strong>ffi.new</strong>. V&nbsp;případě, že ve druhém
parametru této funkce předáme seznam nebo n-tici, přiřadí se prvkům nově
vznikajícího pole postupně jednotlivé prvky z&nbsp;této n-tice nebo
seznamu:</p>

<pre>
array = ffi.new("float[10]", (1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 0))
...
array = ffi.new("float[10]", [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 0])
</pre>

<p>Přitom ovšem není nutné předat stejný počet prvků, jako má mít výsledné
pole. Například v&nbsp;dalším demonstračním příkladu se explicitně nastaví
hodnoty prvních pěti prvků desetiprvkového pole (ostatní prvky budou mít
výchozí hodnotu):</p>

<pre>
import pathlib
&nbsp;
from cffi import FFI
&nbsp;
ffi = FFI()
&nbsp;
def <strong>load_header</strong>(filename):
    directory = pathlib.Path().absolute()
    header = directory / filename
    with open(header) as fin:
        return fin.read()
&nbsp;
&nbsp;
def <strong>load_library</strong>(library_name):
    return ffi.dlopen(library_name)
&nbsp;
&nbsp;
ffi.cdef(load_header("array_printer.h"))
&nbsp;
array = ffi.new("float[10]", (1.1, 2.2, 3.3, 4.4, 5.5))
&nbsp;
printer = load_library("libaprinter.so")
printer.print_array(array, len(array))
</pre>

<p>Výsledek by nyní měl vypadat takto:</p>

<pre>
array item 0 = 1.100000
array item 1 = 2.200000
array item 2 = 3.300000
array item 3 = 4.400000
array item 4 = 5.500000
array item 5 = 0.000000
array item 6 = 0.000000
array item 7 = 0.000000
array item 8 = 0.000000
array item 9 = 0.000000
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Mezní případ &ndash; pole s&nbsp;nulovým počtem prvků</h2>

<p>Pro úplnost se ještě podívejme na to, zda je možné na straně Pythonu
vytvořit pole s&nbsp;nulovým počtem prvků a následně toto pole předat do
céčkovské funkce:</p>

<pre>
import pathlib
&nbsp;
from cffi import FFI
&nbsp;
ffi = FFI()
&nbsp;
def <strong>load_header</strong>(filename):
    directory = pathlib.Path().absolute()
    header = directory / filename
    with open(header) as fin:
        return fin.read()
&nbsp;
&nbsp;
def <strong>load_library</strong>(library_name):
    return ffi.dlopen(library_name)
&nbsp;
&nbsp;
ffi.cdef(load_header("array_printer.h"))
&nbsp;
array = ffi.new("float[0]")
&nbsp;
printer = load_library("libaprinter.so")
printer.print_array(array, len(array))
</pre>

<p>Tento demonstrační příklad bude plně funkční a volaná céčkovská funkce nic
nevypíše (ovšem ani nezhavaruje).</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Zpracování pole struktur v&nbsp;jazyku C</h2>

<p>V&nbsp;dalším textu si ukážeme, jakým způsobem se do funkcí naprogramovaných
v&nbsp;jazyku C předávají pole, jejichž prvky jsou struktury (konkrétně
uživatelské datové typy). Použijeme přitom strukturu <strong>vector_t</strong>
reprezentující trojrozměrný vektor, s&nbsp;níž jsme se již seznámili
minule:</p>

<pre>
typedef struct {
    double x;
    double y;
    double z;
} <strong>vector_t</strong>;
</pre>

<p>Hlavička (prototyp) funkce, která bude akceptovat pole těchto struktur, může
vypadat následovně:</p>

<pre>
void <strong>print_array</strong>(vector_t array[], int items);
</pre>

<p>A pro úplnost se ještě podívejme na jeden z&nbsp;možných způsobů
implementace této funkce:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
#include "array_printer.h"
&nbsp;
extern void <strong>print_array</strong>(vector_t array[], int items)
{
    int i;
    for (i=0; i&lt;items; i++) {
        printf("array item %d = (%f, %f, %f)\n",
                i, array[i].x, array[i].y, array[i].z);
    }
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Inicializace pole struktur v&nbsp;Pythonu</h2>

<p>Konstrukci pole s&nbsp;deseti prvky typu <strong>vector_t</strong> opět
provedeme s&nbsp;využitím konstruktoru <strong>ffi.new</strong>. Potřebný
příkaz bude vypadat následovně:</p>

<pre>
array = ffi.new("vector_t[10]")
</pre>

<p>Následně je již díky přetížení operátoru indexování možné přistupovat
k&nbsp;jednotlivým prvkům, přičemž opět (rekurzivně) platí, že jednotlivé prvky
se z&nbsp;pohledu Pythonu chovají tak, jakoby se jednalo o objekty
s&nbsp;atributy <strong>x</strong>, <strong>y</strong> a <strong>z</strong>.
Jednotlivé prvky tedy můžeme naplnit hodnotami:</p>

<pre>
for i in range(len(array)):
    array[i].x = i
    array[i].y = 2*i
    array[i].z = 1 / (1+i)
</pre>

<p>Úplný zdrojový kód takto upraveného skriptu bude vypadat následovně:</p>

<pre>
import pathlib
&nbsp;
from cffi import FFI
&nbsp;
ffi = FFI()
&nbsp;
def <strong>load_header</strong>(filename):
    directory = pathlib.Path().absolute()
    header = directory / filename
    with open(header) as fin:
        return fin.read()
&nbsp;
&nbsp;
def <strong>load_library</strong>(library_name):
    return ffi.dlopen(library_name)
&nbsp;
&nbsp;
ffi.cdef(load_header("array_printer.h"))
&nbsp;
array = ffi.new("vector_t[10]")
&nbsp;
for i in range(len(array)):
    array[i].x = i
    array[i].y = 2*i
    array[i].z = 1 / (1+i)
&nbsp;
printer = load_library("libaprinter.so")
printer.print_array(array, len(array))
</pre>

<p>Následující kód je ovšem více idiomatický a ukazuje, že na straně Pythonu se
se všemi hodnotami pracuje přes reference:</p>

<pre>
import pathlib
&nbsp;
from cffi import FFI
&nbsp;
ffi = FFI()
&nbsp;
def <strong>load_header</strong>(filename):
    directory = pathlib.Path().absolute()
    header = directory / filename
    with open(header) as fin:
        return fin.read()
&nbsp;
&nbsp;
def <strong>load_library</strong>(library_name):
    return ffi.dlopen(library_name)
&nbsp;
&nbsp;
ffi.cdef(load_header("array_printer.h"))
&nbsp;
array = ffi.new("vector_t[10]")
&nbsp;
for i, item in enumerate(array):
    item.x = i
    item.y = 2*i
    item.z = 1 / (1+i)
&nbsp;
printer = load_library("libaprinter.so")
printer.print_array(array, len(array))
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výsledek získaný po spuštění skriptu</h2>

<p>Po spuštění předchozího skriptu by se na terminál mělo vypsat těchto deset
hodnot:</p>

<pre>
array item 0 = (0.000000, 0.000000, 1.000000)
array item 1 = (1.000000, 2.000000, 0.500000)
array item 2 = (2.000000, 4.000000, 0.333333)
array item 3 = (3.000000, 6.000000, 0.250000)
array item 4 = (4.000000, 8.000000, 0.200000)
array item 5 = (5.000000, 10.000000, 0.166667)
array item 6 = (6.000000, 12.000000, 0.142857)
array item 7 = (7.000000, 14.000000, 0.125000)
array item 8 = (8.000000, 16.000000, 0.111111)
array item 9 = (9.000000, 18.000000, 0.100000)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Dvourozměrná pole</h2>

<p>V&nbsp;této části článku se budeme zabývat problematikou konstrukce a
předávání dvourozměrných polí z&nbsp;Pythonu do funkce naprogramované
v&nbsp;jazyku C. Co se ovšem v&nbsp;kontextu jazyka C vlastně myslí pod pojmem
&bdquo;dvourozměrná pole&ldquo;? Ve skutečnosti se může jednat o deklarace,
které se od sebe odlišují jak způsobem uložení prvků, tak i způsobem jejich
konstrukce (jak v&nbsp;C, tak i v&nbsp;Pythonu přes <i>cffi</i>).</p>

<p>Nejjednodušší, ovšem nejméně flexibilní jsou pole s&nbsp;předem známým
počtem řádků a sloupců:</p>

<pre>
float a1[10][20];
</pre>

<p>Poněkud flexibilnější jsou (de facto) jednorozměrná pole obsahující
ukazatele. Tyto ukazatele potom odkazují na jednotlivé řádky pole, které ovšem
nemusí být stejně dlouhé (a pole tedy nebudou obdélníková). Navíc je nutné
jednotlivé řádky explicitně alokovat:</p>

<pre>
float *a2[20];
</pre>

<p>Naopak můžeme deklarovat proměnnou, která je ukazatelem na pole deseti
prvků. Nic nám však nebrání v&nbsp;tom, abychom alokovali celý blok paměti
obsahující větší množství hodnot typu <strong>float[10]</strong>, k&nbsp;nimž
můžeme přistupovat jako k&nbsp;desetiprvkovým polím (výsledné dvourozměrné pole
bude pravoúhlé):</p>

<pre>
float (*a3)[10];
</pre>

<p>A nakonec se někdy pod pojmem dvourozměrné pole skrývá &bdquo;pouhý&ldquo;
ukazatel na ukazatel na datový typ:</p>

<pre>
float **a4;
</pre>

<p>Toto je nejflexibilnější reprezentace pole, protože jak počet řádků, tak i
počet sloupců je proměnný. Nevýhodou je, že kromě hodnot prvků se předává i
vektor (jednorozměrné pole) ukazatelů na jednotlivé řádky.</p>

<p><div class="rs-tip-major">Poznámka: z&nbsp;mnoha důvodů může být více než
výhodné skutečná dvourozměrná pole nepoužívat a zaměřit se na strukturu známou
pod pojmem n-rozměrná pole. V&nbsp;této struktuře jsou prvky uloženy za sebou,
ovšem navíc obsahuje i metadata o velikosti jednotlivých dimenzí. Poměrně
dobrým a především rozšířeným příkladem implementace je
<strong>ndarray</strong> z&nbsp;knihovny Numpy (s&nbsp;nímž knihovna
<i>cffi</i> dokáže prakticky bez problémů pracovat).</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Funkce naprogramovaná v&nbsp;C, která akceptuje jednu formu dvourozměrných polí</h2>

<p>Podívejme se nyní na to, jak by mohla vypadat hlavička (prototyp) funkce,
která akceptuje pole o libovolném počtu řádků, přičemž každý řádek bude
obsahovat tři prvky:</p>

<pre>
#define COLUMNS 3
</pre>

<p>Bude se tedy jednat o obdélníkové pole:</p>

<pre>
void <strong>print_array</strong>(float array[][3], int rows);
</pre>

<p>Tuto funkci lze naprogramovat například následujícím způsobem:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
#include "array_printer.h"
&nbsp;
&nbsp;
extern void <strong>print_array</strong>(float array[][COLUMNS], int rows)
{
    int i, j;
    for (j=0; j&lt;rows; j++) {
        float *row = array[j];
        for (i=0; i&lt;COLUMNS; i++) {
            printf("%3.2f ", row[i]);
        }
        putchar('\n');
    }
}
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že počet sloupců musí být
v&nbsp;tomto případě neměnný. Pokud se má měnit jak počet řádků, tak i počet
sloupců, je nutné použít jiný &bdquo;typ&ldquo; dvourozměrného pole.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Konstrukce dvourozměrného pole v&nbsp;Pythonu s&nbsp;předáním tohoto pole do céčkovské funkce</h2>

<p>Dvourozměrné pole resp.&nbsp;přesněji řečeno jedna z&nbsp;možných variant
tohoto pole zmíněná <a href="#k13">v&nbsp;předchozí kapitole</a>, lze na straně
Pythonu s&nbsp;využitím knihovny <i>cffi</i> zkonstruovat snadno:</p>

<pre>
array = ffi.new("float [10][3]")
</pre>

<p>Z&nbsp;pohledu Pythonu se jedná o jednorozměrnou strukturu, jejímiž prvky
jsou trojice. To znamená, že první tři řádky tohoto pole můžeme naplnit
například následujícím způsobem:</p>

<pre>
array[0] = (1,2,3)
array[5] = (4,5,6)
array[9] = (7,8,9)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se naplnily řádky
s&nbsp;indexy 0, 5 a 9.</div></p>

<p>Celý skript může vypadat následovně:</p>

<pre>
import pathlib
&nbsp;
from cffi import FFI
&nbsp;
ffi = FFI()
&nbsp;
def <strong>load_header</strong>(filename):
    directory = pathlib.Path().absolute()
    header = directory / filename
    with open(header) as fin:
        return fin.read()
&nbsp;
&nbsp;
def <strong>load_library</strong>(library_name):
    return ffi.dlopen(library_name)
&nbsp;
&nbsp;
ffi.cdef(load_header("array_printer.h"))
&nbsp;
array = ffi.new("float [10][3]")
&nbsp;
array[0] = (1,2,3)
array[5] = (4,5,6)
array[9] = (7,8,9)
&nbsp;
printer = load_library("libaprinter.so")
printer.print_array(array, 10)
</pre>

<p>Můžeme ovšem naplnit i celé pole jediným přiřazením:</p>

<pre>
array = ((1,2,3),
         (4,5,6),
         (7,8,9),
         (0,0,0),
         (0,0,0),
         (1,2,3),
         (4,5,6),
         (7,8,9),
         (0,0,0),
         (0,0,0))
</pre>

<p>Opět si ukažme celý skript:</p>

<pre>
import pathlib
&nbsp;
from cffi import FFI
&nbsp;
ffi = FFI()
&nbsp;
def <strong>load_header</strong>(filename):
    directory = pathlib.Path().absolute()
    header = directory / filename
    with open(header) as fin:
        return fin.read()
&nbsp;
&nbsp;
def <strong>load_library</strong>(library_name):
    return ffi.dlopen(library_name)
&nbsp;
&nbsp;
ffi.cdef(load_header("array_printer.h"))
&nbsp;
array = ffi.new("float [10][3]")
&nbsp;
array = ((1,2,3),
         (4,5,6),
         (7,8,9),
         (0,0,0),
         (0,0,0),
         (1,2,3),
         (4,5,6),
         (7,8,9),
         (0,0,0),
         (0,0,0))
&nbsp;
printer = load_library("libaprinter.so")
printer.print_array(array, 10)
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Výsledek získaný po spuštění skriptů</h2>

<p>Pro úplnost se podívejme na výsledky běhu předchozích dvou skriptů. Nejprve
skript, který naplní řádky 0, 5 a 9:</p>

<pre>
1.00 2.00 3.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
4.00 5.00 6.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
7.00 8.00 9.00 
</pre>

<p>A následně si ukážeme výsledky běhu pythonovského skriptu, který naplní
všechny řádky dvourozměrného pole:</p>

<pre>
1.00 2.00 3.00 
4.00 5.00 6.00 
7.00 8.00 9.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
1.00 2.00 3.00 
4.00 5.00 6.00 
7.00 8.00 9.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Dvourozměrná pole s&nbsp;proměnným počtem řádků</h2>

<p>V&nbsp;předchozím demonstračním příkladu jsme dvourozměrné pole konstruovali
následujícím způsobem:</p>

<pre>
array = ffi.new("float [10][3]")
</pre>

<p>Víme již, že počet řádků může být při volání céčkovské funkce proměnný,
takže by bylo dobré mít možnost konstrukce pole s&nbsp;proměnným počtem řádků,
a to pochopitelně bez nutnosti &bdquo;skládat&ldquo; řetězec posílaný
konstruktoru. I to je v&nbsp;případě použití knihovny <i>cffi</i> možné:</p>

<pre>
array = ffi.new("float [][3]", rows)
</pre>

<p>Ukažme si tento koncept na následujícím příkladu:</p>

<pre>
import pathlib
&nbsp;
from cffi import FFI
&nbsp;
ffi = FFI()
&nbsp;
def <strong>load_header</strong>(filename):
    directory = pathlib.Path().absolute()
    header = directory / filename
    with open(header) as fin:
        return fin.read()
&nbsp;
&nbsp;
def <strong>load_library</strong>(library_name):
    return ffi.dlopen(library_name)

&nbsp;
ffi.cdef(load_header("array_printer.h"))
&nbsp;
rows = 20
&nbsp;
array = ffi.new("float [][3]", rows)
&nbsp;
array[0] = (1,2,3)
array[rows//2] = (4,5,6)
array[rows-1] = (7,8,9)
&nbsp;
printer = load_library("libaprinter.so")
printer.print_array(array, rows)
</pre>

<p>Po spuštění takto upraveného skriptu získáme následující výsledky:</p>

<pre>
1.00 2.00 3.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
4.00 5.00 6.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
0.00 0.00 0.00 
7.00 8.00 9.00 
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Obsah čtvrté části článku</h2>

<p>Předávání struktur odkazem popř.&nbsp;předávání polí (de facto taktéž
odkazem) a řetězců do céčkovských funkcí má ještě jeden aspekt &ndash; střetává
se zde svět virtuálního stroje Pythonu s&nbsp;automatickým správcem paměti se
světem jazyka C, v&nbsp;němž kralují funkce typu <strong>malloc</strong> a
<strong>free</strong> (a jejich různé varianty). Musíme tedy řešit i
vlastnictví hodnot (<i>ownership</i>). A přesně tímto tématem se budeme zabývat
příště.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty, které jsme si v&nbsp;dnešním i v&nbsp;obou
předchozích článcích [<a
href="https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-cffi/">1</a>]
[<a
href="https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-cffi-2/">2</a>]
ukázali, naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je pochopitelně
nutné mít nainstalovánu knihovnu <i>cffi</i>:</p>

<table>
<tr><th>  #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>  1</td><td>adder/adder.c</td><td>funkce psaná v&nbsp;C, která sečte své dva celočíselné parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/adder.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/adder.c</a></td></tr>
<tr><td>  2</td><td>adder/call_via_cffi1.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;korektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi1.py</a></td></tr>
<tr><td>  3</td><td>adder/call_via_cffi2.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi2.py</a></td></tr>
<tr><td>  4</td><td>adder/call_via_cffi3.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi3.py</a></td></tr>
<tr><td>  5</td><td>adder/call_via_cffi.sh</td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi.sh</a></td></tr>
<tr><td>  6</td><td>adder/call_via_ctypes1.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;korektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes1.py</a></td></tr>
<tr><td>  7</td><td>adder/call_via_ctypes2.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes2.py</a></td></tr>
<tr><td>  8</td><td>adder/call_via_ctypes3.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes3.py</a></td></tr>
<tr><td>  9</td><td>adder/call_via_ctypes.sh </td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes.sh</a></td></tr>
<tr><td> 10</td><td>adder/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/make_library.sh</a></td></tr>
<tr><td> 11</td><td>adder/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 12</td><td>greeter/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/greeter.c</a></td></tr>
<tr><td> 13</td><td>greeter/call_via_cffi1.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;nekorektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi1.py</a></td></tr>
<tr><td> 14</td><td>greeter/call_via_cffi2.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi2.py</a></td></tr>
<tr><td> 15</td><td>greeter/call_via_cffi3.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi3.py</a></td></tr>
<tr><td> 16</td><td>greeter/call_via_cffi.sh</td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi.sh</a></td></tr>
<tr><td> 17</td><td>greeter/call_via_ctypes1.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;nekorektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes1.py</a></td></tr>
<tr><td> 18</td><td>greeter/call_via_ctypes2.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes2.py</a></td></tr>
<tr><td> 19</td><td>greeter/call_via_ctypes3.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes3.py</a></td></tr>
<tr><td> 20</td><td>greeter/call_via_ctypes.sh</td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes.sh</a></td></tr>
<tr><td> 21</td><td>greeter/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/make_library.sh</a></td></tr>
<tr><td> 22</td><td>greeter/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 23</td><td>swapper/swapper.c</td><td>céčkovská funkce prohazující obsah svých dvou parametrů předávaných referencí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/swapper.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/swapper.c</a></td></tr>
<tr><td> 24</td><td>swapper/call_via_cffi1.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python (korektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi1.py</a></td></tr>
<tr><td> 25</td><td>swapper/call_via_cffi2.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python (nekorektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi2.py</a></td></tr>
<tr><td> 26</td><td>swapper/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi.sh</a></td></tr>
<tr><td> 27</td><td>swapper/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/make_library.sh</a></td></tr>
<tr><td> 28</td><td>swapper/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 29</td><td>filler/filler.c</td><td>céčkovská funkce pro vyplnění části pole zadanou hodnotou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/filler.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/filler.c</a></td></tr>
<tr><td> 30</td><td>filler/call_via_cffi.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.py</a></td></tr>
<tr><td> 31</td><td>filler/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.sh</a></td></tr>
<tr><td> 32</td><td>filler/make_library.sh </td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/make_library.sh</a></td></tr>
<tr><td> 32</td><td>filler/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 33</td><td>greeter_h/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.c</a></td></tr>
<tr><td> 34</td><td>greeter_h/greeter.h</td><td>prototyp (předběžná deklarace) funkce <i>greeter</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.h</a></td></tr>
<tr><td> 35</td><td>greeter_h/call_via_cffi4.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi4.py</a></td></tr>
<tr><td> 36</td><td>greeter_h/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi.sh</a></td></tr>
<tr><td> 37</td><td>greeter_h/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/make_library.sh</a></td></tr>
<tr><td> 38</td><td>greeter_h/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 39</td><td>greeter_h_2/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/greeter.c</a></td></tr>
<tr><td> 40</td><td>greeter_h_2/greeter.h</td><td>prototyp (předběžná deklarace) funkce <i>greeter</i> obalená v&nbsp;testu na existenci symbolu/makra</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/greeter.h</a></td></tr>
<tr><td> 41</td><td>greeter_h_2/call_via_cffi5.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/call_via_cffi5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/call_via_cffi5.py</a></td></tr>
<tr><td> 42</td><td>greeter_h_2/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/call_via_cffi.sh</a></td></tr>
<tr><td> 43</td><td>greeter_h_2/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/make_library.sh</a></td></tr>
<tr><td> 44</td><td>greeter_h_2/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 45</td><td>greeter_h_3/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/greeter.c</a></td></tr>
<tr><td> 46</td><td>greeter_h_3/greeter.h</td><td>test na existenci symbolu/makra, pokud makro neexistuje, provede se vložení dalšího souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/greeter.h</a></td></tr>
<tr><td> 47</td><td>greeter_h_3/_greeter.h</td><td>prototyp (předběžná deklarace) funkce <i>greeter</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/_greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/_greeter.h</a></td></tr>
<tr><td> 48</td><td>greeter_h_3/call_via_cffi5.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/call_via_cffi5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/call_via_cffi5.py</a></td></tr>
<tr><td> 49</td><td>greeter_h_3/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/call_via_cffi.sh</a></td></tr>
<tr><td> 50</td><td>greeter_h_3/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/make_library.sh</a></td></tr>
<tr><td> 51</td><td>greeter_h_3/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 52</td><td>greeter_build/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/greeter.c</a></td></tr>
<tr><td> 53</td><td>greeter_build/greeter.h</td><td>prototyp (předběžná deklarace) funkce <i>greeter</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/greeter.h</a></td></tr>
<tr><td> 54</td><td>greeter_build/call_via_cffi7.py</td><td>skript pro překlad céčkovské funkce, vytvoření dynamicky linkované knihovny a zavolání funkce z&nbsp;této knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/call_via_cffi7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/call_via_cffi7.py</a></td></tr>
<tr><td> 55</td><td>greeter_build/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 56</td><td>vector_printer/vector_printer.c</td><td>funkce psaná v&nbsp;C, která akceptuje jako svůj parametr strukturu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/vector_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/vector_printer.c</a></td></tr>
<tr><td> 57</td><td>vector_printer/vector_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_vector</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/vector_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/vector_printer.h</a></td></tr>
<tr><td> 58</td><td>vector_printer/call_via_cffi.sh</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/call_via_cffi.sh</a></td></tr>
<tr><td> 59</td><td>vector_printer/call_via_cffi.py</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/call_via_cffi.py</a></td></tr>
<tr><td> 60</td><td>vector_printer/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/make_library.sh</a></td></tr>
<tr><td> 61</td><td>vector_printer/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 62</td><td>vector_printer_2/vector_printer.c</td><td>funkce psaná v&nbsp;C, která akceptuje jako svůj parametr ukazatel na strukturu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/vector_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/vector_printer.c</a></td></tr>
<tr><td> 63</td><td>vector_printer_2/vector_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_vector</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/vector_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/vector_printer.h</a></td></tr>
<tr><td> 64</td><td>vector_printer_2/call_via_cffi.sh</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/call_via_cffi.sh</a></td></tr>
<tr><td> 65</td><td>vector_printer_2/call_via_cffi.py</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/call_via_cffi.py</a></td></tr>
<tr><td> 66</td><td>vector_printer_2/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/make_library.sh</a></td></tr>
<tr><td> 67</td><td>vector_printer_2/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 68</td><td>array_printer_1/array_printer.c</td><td>funkce naprogramovaná v&nbsp;C, která akceptuje pole s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/array_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/array_printer.c</a></td></tr>
<tr><td> 69</td><td>array_printer_1/array_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_array</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/array_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/array_printer.h</a></td></tr>
<tr><td> 70</td><td>array_printer_1/call_via_cffi.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/call_via_cffi.sh</a></td></tr>
<tr><td> 71</td><td>array_printer_1/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/call_via_cffi.py</a></td></tr>
<tr><td> 72</td><td>array_printer_1/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/make_library.sh</a></td></tr>
<tr><td> 73</td><td>array_printer_1/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 74</td><td>array_printer_2/array_printer.c</td><td>funkce naprogramovaná v&nbsp;C, která akceptuje pole s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/array_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/array_printer.c</a></td></tr>
<tr><td> 75</td><td>array_printer_2/array_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_array</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/array_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/array_printer.h</a></td></tr>
<tr><td> 76</td><td>array_printer_2/call_via_cffi.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/call_via_cffi.sh</a></td></tr>
<tr><td> 77</td><td>array_printer_2/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/call_via_cffi.py</a></td></tr>
<tr><td> 78</td><td>array_printer_2/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/make_library.sh</a></td></tr>
<tr><td> 79</td><td>array_printer_2/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 80</td><td>array_printer_3/array_printer.c</td><td>funkce naprogramovaná v&nbsp;C, která akceptuje pole s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/array_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/array_printer.c</a></td></tr>
<tr><td> 81</td><td>array_printer_3/array_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_array</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/array_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/array_printer.h</a></td></tr>
<tr><td> 82</td><td>array_printer_3/call_via_cffi.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/call_via_cffi.sh</a></td></tr>
<tr><td> 83</td><td>array_printer_3/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/call_via_cffi.py</a></td></tr>
<tr><td> 84</td><td>array_printer_3/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/make_library.sh</a></td></tr>
<tr><td> 85</td><td>array_printer_3/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 86</td><td>array_printer_4/array_printer.c</td><td>funkce naprogramovaná v&nbsp;C, která akceptuje pole s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/array_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/array_printer.c</a></td></tr>
<tr><td> 87</td><td>array_printer_4/array_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_array</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/array_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/array_printer.h</a></td></tr>
<tr><td> 88</td><td>array_printer_4/call_via_cffi.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/call_via_cffi.sh</a></td></tr>
<tr><td> 89</td><td>array_printer_4/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/call_via_cffi.py</a></td></tr>
<tr><td> 90</td><td>array_printer_4/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/make_library.sh</a></td></tr>
<tr><td> 91</td><td>array_printer_4/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 92</td><td>array_printer_5/array_printer.c</td><td>funkce naprogramovaná v&nbsp;C, která akceptuje pole s&nbsp;prvky typu <strong>vector_t</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/array_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/array_printer.c</a></td></tr>
<tr><td> 93</td><td>array_printer_5/array_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_array</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/array_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/array_printer.h</a></td></tr>
<tr><td> 94</td><td>array_printer_5/call_via_cffi.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/call_via_cffi.sh</a></td></tr>
<tr><td> 95</td><td>array_printer_5/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/call_via_cffi.py</a></td></tr>
<tr><td> 96</td><td>array_printer_5/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/make_library.sh</a></td></tr>
<tr><td> 97</td><td>array_printer_5/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 92</td><td>array_printer_6/array_printer.c</td><td>funkce naprogramovaná v&nbsp;C, která akceptuje dvourozměrné pole s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/array_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/array_printer.c</a></td></tr>
<tr><td> 93</td><td>array_printer_6/array_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_array</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/array_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/array_printer.h</a></td></tr>
<tr><td> 94</td><td>array_printer_6/call_via_cffi.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/call_via_cffi.sh</a></td></tr>
<tr><td> 95</td><td>array_printer_6/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/call_via_cffi.py</a></td></tr>
<tr><td> 96</td><td>array_printer_6/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/make_library.sh</a></td></tr>
<tr><td> 97</td><td>array_printer_6/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>98</td><td>array_printer_7/array_printer.c</td><td>funkce naprogramovaná v&nbsp;C, která akceptuje dvourozměrné pole s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/array_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/array_printer.c</a></td></tr>
<tr><td>99</td><td>array_printer_7/array_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_array</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/array_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/array_printer.h</a></td></tr>
<tr><td>100</td><td>array_printer_7/call_via_cffi.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/call_via_cffi.sh</a></td></tr>
<tr><td>101</td><td>array_printer_7/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/call_via_cffi.py</a></td></tr>
<tr><td>102</td><td>array_printer_7/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/make_library.sh</a></td></tr>
<tr><td>103</td><td>array_printer_7/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/clean.sh</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na Internetu</h2>

<ol>

<li>TIOBE Index for May 2023<br />
<a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a>
</li>

<li>PYPL PopularitY of Programming Language<br />
<a href="https://pypl.github.io/PYPL.html">https://pypl.github.io/PYPL.html</a>
</li>

<li>CFFI documentation<br />
<a href="https://cffi.readthedocs.io/en/latest/">https://cffi.readthedocs.io/en/latest/</a>
</li>

<li>cffi 1.15.1 na PyPi<br />
<a href="https://pypi.org/project/cffi/">https://pypi.org/project/cffi/</a>
</li>

<li>Python Bindings: Calling C or C++ From Python<br />
<a href="https://realpython.com/python-bindings-overview/">https://realpython.com/python-bindings-overview/</a>
</li>

<li>Interfacing with C/C++ Libraries<br />
<a href="https://docs.python-guide.org/scenarios/clibs/">https://docs.python-guide.org/scenarios/clibs/</a>
</li>

<li>Cython, pybind11, cffi – which tool should you choose?<br />
<a href="http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html">http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html</a>
</li>

<li>Python FFI with ctypes and cffi<br />
<a href="https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi">https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi</a>
</li>

<li>Propojení Go s&nbsp;Pythonem s&nbsp;využitím cgo a ctypes<br />
<a href="https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes/">https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes/</a>
</li>

<li>Propojení Go s&nbsp;Pythonem s&nbsp;využitím cgo a ctypes (2. část)<br />
<a href="https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes-2-cast/">https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes-2-cast/</a>
</li>

<li>Programovací jazyk Rust: použití FFI pro volání funkcí z&nbsp;nativních knihoven<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven/">https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven/</a>
</li>

<li>Programovací jazyk Rust: použití FFI při předávání struktur<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pri-predavani-struktur/">https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pri-predavani-struktur/</a>
</li>

<li>Programovací jazyk Rust: použití FFI pro volání funkcí z&nbsp;nativních knihoven (2. část)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven-2-cast/">https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven-2-cast/</a>
</li>

<li>Dynamic-link library<br />
<a href="https://en.wikipedia.org/wiki/Dynamic-link_library">https://en.wikipedia.org/wiki/Dynamic-link_library</a>
</li>

<li>Úvod do jazyka C: Deklarace funkcí<br />
<a href="https://www.fi.muni.cz/usr/jkucera/pb071/sl5.htm">https://www.fi.muni.cz/usr/jkucera/pb071/sl5.htm</a>
</li>

<li>Using standard library headers with CFFI<br />
<a href="https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi">https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi</a>
</li>

<li>Preparing and Distributing modules<br />
<a href="https://cffi.readthedocs.io/en/latest/cdef.html">https://cffi.readthedocs.io/en/latest/cdef.html</a>
</li>

<li>C Arrays<br />
<a href="https://www.programiz.com/c-programming/c-arrays">https://www.programiz.com/c-programming/c-arrays</a>
</li>

<li>C Arrays<br />
<a href="https://www.w3schools.com/c/c_arrays.php">https://www.w3schools.com/c/c_arrays.php</a>
</li>

<li>Array of Structures in C<br />
<a href="https://overiq.com/c-programming-101/array-of-structures-in-c/#google_vignette">https://overiq.com/c-programming-101/array-of-structures-in-c/#google_vignette</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

