<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části článku o knihovně Pygments si nejprve řekneme, jakým způsobem je možné navrhnout vlastní filtry určené pro zpracování proudu tokenů. Dále si ukážeme způsob vytvoření nových lexerů popř. úprav lexerů, které jsou již v Pygments implementovány.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery</a></p>
<p><a href="#k02">2. Proces zpracování zdrojového kódu třídami z&nbsp;knihovny Pygments</a></p>
<p><a href="#k03">3. Konstrukce jednoduchého filtru pro zpracování funkcí používajících CamelCase</a></p>
<p><a href="#k04">4. První varianta filtru pro zpracování funkcí používajících CamelCase</a></p>
<p><a href="#k05">*** 5. Zařazení filtru do &bdquo;kolony&ldquo; zpracování tokenů</a></p>
<p><a href="#k06">*** 6. Použití anotace @simplefilter</a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. Obarvení syntaxe na příkazovém řádku: kombinace knihoven Pygments a prompt_toolkit</a></p>
<p><a href="#k18">*** 18. Obarvení syntaxe na terminálu v&nbsp;knihovně prompt_toolkit</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery</h2>

<p><a
href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">V&nbsp;prvním
článku</a> věnovaném knihovně <i>Pygments</i>, jsme se seznámili s&nbsp;tím,
k&nbsp;čemu vlastně tato knihovna slouží a jak ji lze využít v&nbsp;praxi
(obarvování zdrojových kódů, úpravy textu na úrovni tokenů atd.). Také jsme si
ve stručnosti popsali celý způsob zpracování &ndash; od vstupních zdrojových
textů přes proud <i>tokenů</i> až po výsledný dokument popř.&nbsp;obarvený text
zobrazený na ploše terminálu. V&nbsp;závěru článku byly popsány i některé
standardní filtry, které jsou již v&nbsp;této knihovně implementovány a je
možné je použít &ndash;
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/#k14">NameHighlightFilter</a>,
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/#k15">VisibleWhitespaceFilter</a>
a <a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/#k16">KeywordCaseFilter</a>.</p>

<img src="https://i.iinfo.cz/images/201/pygments1-6.png" class="image-334768" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 1: Obarvení zdrojového kódu na terminálu rozpoznávajícího
minimálně 256 barev. Barva pozadí je nastavena na černou.</i></p>

<p>Dnes se již budeme věnovat poněkud složitější problematice. Nejdříve si
totiž ukážeme, jak je možné navrhnout vlastní filtry, které budou sloužit pro
zpracování proudu tokenů, tj.&nbsp;k&nbsp;modifikaci tokenů, jejich mazání či
naopak přidávání dalších vlastních tokenů do proudu. Posléze se seznámíme se
způsobem vytvoření nových lexerů a samozřejmě také s&nbsp;možností upravit si
stávající lexery (ty dnes podporují cca 300 programovacích jazyků, značkovacích
jazyků, konfiguračních souborů aj.). Samozřejmě nesmíme zapomenout ani na
poslední část celého řetězce zpracování, takže se zmíníme o možnostech při
psaní formátovačů. Díky tomu, jak knihovna <i>Pygments</i> pracuje, je
vytvoření nového formátovače relativně snadné a přímočaré (navíc se nový
formátovač automaticky stane dostupným pro všech již zmíněných cca 300
podporovaných jazyků).</p>

<img src="https://i.iinfo.cz/images/201/pygments1-11.png" class="image-334774" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 2: Změna stylu zobrazení při použití terminálu s&nbsp;možností
práce s&nbsp;256 barvami.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Proces zpracování zdrojového kódu třídami z&nbsp;knihovny Pygments</h2>

<p>Před popisem dalších možností nabízených knihovnou <i>Pygments</i> si jen ve
stručnosti připomeňme, jakým způsobem vlastně probíhá celý proces zpracování od
vstupního zdrojového kódu po výsledný dokument nebo text zobrazený na
terminálu:</p>

<ol>

<li>Na začátku zpracování se nachází takzvaný <i>lexer</i>, který postupně
načítá jednotlivé znaky ze vstupního řetězce (resp.&nbsp;ze souboru) a vytváří
z&nbsp;nich <i>lexikální tokeny</i> (zkráceně jen <i>tokeny</i>). Pro každý
podporovaný jazyk se používá jiný lexer a samozřejmě je možné v&nbsp;případě
potřeby si napsat lexer vlastní. Již minule jsme se seznámili se dvěma
standardními lexery &ndash; <strong>pygments.lexers.PythonLexer</strong> a
<strong>pygments.lexers.pascal.DelphiLexer</strong>. První z&nbsp;nich je
určený pro vytvoření tokenizovaného kódu Pythonu, druhý se používá pro Delphi,
ObjectPascal i &bdquo;obyčejný&ldquo; Pascal.</li>

<li>Výstup produkovaný <i>lexerem</i> může procházet libovolným počtem
<i>filtrů</i> sloužících pro odstranění nebo (mnohem častěji) modifikaci
jednotlivých tokenů; ať již jejich typů či přímo textu, který tvoří hodnotu
tokenu. Díky existenci filtrů je například možné nechat si zvýraznit vybrané
bílé znaky, slova se speciálním významem v&nbsp;komentářích (typicky
&bdquo;TODO:&ldquo;, &bdquo;FIX:&ldquo;) apod. Některé standardní filtry
dodávané společně s&nbsp;knihovnou <i>Pygments</i> již známe:
<strong>pygments.filters.NameHighlightFilter</strong>,
<strong>pygments.filters.VisibleWhitespaceFilter</strong>,
<strong>pygments.filters.CodeTagFilter</strong> a
<strong>pygments.filters.KeywordCaseFilter</strong>.</li>

<li>Za filtry (pokud jsou samozřejmě použity) se nachází formátovač
(formatter), který postupně načítá jednotlivé tokeny a převádí je do výstupního
formátu. K&nbsp;dispozici je několik standardních formátovačů zajišťujících
například tisk na terminál, výstup do HTML, LaTeXu, RTF, <a
href="https://www.root.cz/clanky/vektorovy-graficky-format-svg/">SVG</a> apod.
S&nbsp;některými formátovači jsme se opět seznámili minule. Patří mezi ně
<strong>pygments.formatters.TerminalFormatter</strong> (s&nbsp;variantami
<strong>pygments.formatters.Terminal256Formatter</strong> a
<strong>pygments.formatters.TerminalTrueColorFormatter</strong>),
<strong>pygments.formatters.HtmlFormatter</strong>,
<strong>pygments.formatters.LaTexFormatter</strong>,
<strong>pygments.formatters.SvgFormatter</strong> a pro ladění užitečný
<strong>pygments.formatters.RawTokenFormatter</strong>. Další formátovače
závisí na externích knihovnách; typicky na knihovně PIL/Pillow.</li>

</ol>

*** image ***
<p><i>Obrázek 3: Příklad konfigurace celé &bdquo;kolony&ldquo; určené pro
zpracování zdrojových kódů ve čtyřech programovacích jazycích.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Konstrukce jednoduchého filtru pro zpracování funkcí používajících CamelCase</h2>

<p>Podívejme se nyní na konstrukci jednoduchého filtru, který bude určen pro
zpracování jmen funkcí používajících <i>CamelCase</i>, tj.&nbsp;způsob
pojmenování, v&nbsp;němž jsou jednotlivá slova oddělena pouze velikostí znaků
(verzálky/mínusky). Filtr bude takové názvy přejmenovávat do formy známé pod
označením <i>snake_case</i>, v&nbsp;níž jsou jednotlivá slova od sebe oddělena
podtržítkem. Toto přejmenování je možné pro jakýkoli řetězec implementovat
pomocí dvou regulárních výrazů doplněných o metodu
<strong>lower()</strong>.</p>

<p>První regulární výraz zajistí oddělení poslední verzálky ze sekvence
verzálek:</p>

<pre>
thisIsFOOBARFunction &rarr; this_IsFOOBAR_Function
</pre>

<p>Druhý regulární výraz vloží mezi jednotlivá slova podtržítka:</p>

<pre>
this_IsFOOBAR_Function &rarr; this_Is_FOOBAR_Function
</pre>

<p>Poslední řádek již jen zajistí převod celého řetězce na mínusky:</p>

<pre>
this_Is_FOOBAR_Function &rarr; this_is_foobar_function
</pre>

<p>Implementovaná konverzní funkce:</p>

<pre>
def <strong>convert</strong>(self, name):
    results = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    results = re.sub('([a-z0-9])([A-Z])', r'\1_\2', results)
    return results.lower()
</pre>

<p>Vlastní filtr je tvořen třídou odvozenou od třídy <strong>Filter</strong>.
Nutné je reimplementovat metodu <strong>filter</strong>, které je (po jejím
automatickém zavolání) předán objekt představující lexer a generátor
představovaný proudem tokenů. Metoda <strong>filter</strong> bude taktéž
implementována formou generátoru, který bude postupně vracet dvojice
<i>typ-tokenu</i> + <i>hodnota-tokenu</i>. Filtr, který bude všechny tokeny
pouze předávat pro další zpracování, tedy může vypadat následovně::</p>

<pre>
class <strong>NopFilter</strong>(Filter):
&nbsp;
    def <strong>__init__</strong>(self, **options):
        Filter.__init__(self, **options)
&nbsp;
    def <strong>filter</strong>(self, lexer, stream):
        for ttype, value in stream:
            yield ttype, value
</pre>

<p>Náš filtr bude muset být implementován nepatrně složitěji &ndash; pro tokeny
typu <strong>Name.Function</strong> a <strong>Name</strong> (to není přesné,
ale prozatím si s&nbsp;touto implementací vystačíme) se změní jejich hodnota
(řetězec) s&nbsp;využitím výše popsané metody <strong>convert</strong>:</p>

<pre>
def <strong>filter</strong>(self, lexer, stream):
    for ttype, value in stream:
        if ttype is Name.Function or ttype is Name:
            value = self.convert(value)
        yield ttype, value
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. První varianta filtru pro zpracování funkcí používajících CamelCase</h2>

<p>První &ndash; doposud značně neúplná &ndash; varianta našeho filtru by mohla
být implementována následujícím způsobem:</p>

<pre>
class <strong>CamelCaseFilter</strong>(Filter):
&nbsp;
    def <strong>__init__</strong>(self, **options):
        Filter.__init__(self, **options)
&nbsp;
    def <strong>convert</strong>(self, name):
        results = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
        results = re.sub('([a-z0-9])([A-Z])', r'\1_\2', results)
        return results.lower()
&nbsp;
    def <strong>filter</strong>(self, lexer, stream):
        for ttype, value in stream:
            if ttype is Name.Function or ttype is Name:
                value = self.convert(value)
            yield ttype, value
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Zařazení filtru do &bdquo;kolony&ldquo; zpracování tokenů</h2>

<p></p>

<pre>
import re
&nbsp;
from pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import TerminalFormatter
from pygments.filter import Filter
from pygments.token import Name
from pygments.util import get_bool_opt
&nbsp;
&nbsp;
class CamelCaseFilter(Filter):
&nbsp;
    def <strong>__init__</strong>(self, **options):
        Filter.__init__(self, **options)
&nbsp;
    def <strong>convert</strong>(self, name):
        results = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', results).lower()
&nbsp;
    def <strong>filter</strong>(self, lexer, stream):
        for ttype, value in stream:
            if ttype is Name.Function or ttype is Name:
                value = self.convert(value)
            yield ttype, value
&nbsp;
&nbsp;
code = """
for i in range(1, 11):
    print("Hello world!")
&nbsp;
if x and y:
    print("yes")
&nbsp;
if x or y:
    print("dunno")
&nbsp;
globalVariable = 42
&nbsp;
def helloWorld():
    print("Hello world!")
&nbsp;
helloWorld()
&nbsp;
print(globalVariable)
"""
&nbsp;
&nbsp;
print(highlight(code, PythonLexer(), TerminalFormatter()))
&nbsp;
print("-----------------------")
&nbsp;
lexer = PythonLexer()
&nbsp;
<i># pridani filtru</i>
lexer.add_filter(CamelCaseFilter())
&nbsp;
print(highlight(code, lexer, TerminalFormatter()))
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Použití anotace @simplefilter</h2>

<pre>
import re
&nbsp;
from pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import TerminalFormatter
from pygments.filter import simplefilter
from pygments.token import Name
from pygments.util import get_bool_opt
&nbsp;
&nbsp;
@simplefilter
def <strong>to_snake_case</strong>(self, lexer, stream, options):
    for ttype, value in stream:
        if ttype is Name.Function or ttype is Name:
            results = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', value)
            value = re.sub('([a-z0-9])([A-Z])', r'\1_\2', value).lower()
        yield ttype, value
&nbsp;
&nbsp;
code = """
for i in range(1, 11):
    print("Hello world!")
&nbsp;
if x and y:
    print("yes")
&nbsp;
if x or y:
    print("dunno")
&nbsp;
globalVariable = 42
&nbsp;
def helloWorld():
    print("Hello world!")
&nbsp;
helloWorld()
&nbsp;
print(globalVariable)
"""
&nbsp;
&nbsp;
print(highlight(code, PythonLexer(), TerminalFormatter()))
&nbsp;
print("-----------------------")
&nbsp;
lexer = PythonLexer()
&nbsp;
<i># pridani filtru</i>
lexer.add_filter(to_snake_case())
&nbsp;
print(highlight(code, lexer, TerminalFormatter()))
</pre>

<pre>
class FunctionFilter(Filter):
    function = None
&nbsp;
    def __init__(self, **options):
        if not hasattr(self, 'function'):
            raise TypeError('%r used without bound function' %
                            self.__class__.__name__)
        Filter.__init__(self, **options)
&nbsp;
    def filter(self, lexer, stream):
        for ttype, value in self.function(lexer, stream, self.options):
            yield ttype, value
</pre>

<pre>
def simplefilter(f):
    return type(f.__name__, (FunctionFilter,), {
                'function':     f,
                '__module__':   getattr(f, '__module__'),
                '__doc__':      f.__doc__
})
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
import re

from pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import TerminalFormatter
from pygments.filter import simplefilter
from pygments.token import Name
from pygments.util import get_bool_opt


def name_to_snake_case(name):
    results = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', results).lower()


@simplefilter
def to_snake_case(self, lexer, stream, options):
    for ttype, value in stream:
        if ttype is Name.Function or ttype is Name:
            value = name_to_snake_case(value)
        yield ttype, value


code = """
for i in range(1, 11):
    print("Hello world!")

if x and y:
    print("yes")

if x or y:
    print("dunno")

globalVariable = 42

def helloWorld():
    print("Hello world!")

helloWorld()

print(globalVariable)
"""


print(highlight(code, PythonLexer(), TerminalFormatter()))

print("-----------------------")

lexer = PythonLexer()

<i># pridani filtru</i>
lexer.add_filter(to_snake_case())

print(highlight(code, lexer, TerminalFormatter()))
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. Obarvení syntaxe na příkazovém řádku: kombinace knihoven Pygments a prompt_toolkit</h2>

<p></p>

<pre>
from pygments.lexers import PythonLexer
&nbsp;
from prompt_toolkit.styles import Style
from prompt_toolkit.lexers import PygmentsLexer
from prompt_toolkit import PromptSession
&nbsp;
&nbsp;
def <strong>show_help</strong>():
    print("""Help
--------
quit - quit this application
exit - exit from this application
eval - evaluate
""")
&nbsp;
&nbsp;
new_tui_style = Style.from_dict({
    'rprompt': 'bg:#ff0066 #ffffff',
    'bottom-toolbar': 'bg:#ffffff #333333 reverse',
    'prompt': 'bg:#ansiyellow #000000',
    })
&nbsp;
&nbsp;
s = PromptSession()
&nbsp;
while True:
    try:
        cmd = s.prompt("Command: ",
                       validate_while_typing=True,
                       enable_open_in_editor=True,
                       bottom_toolbar="Available commands: quit, exit, help, eval",
                       rprompt="Don't panic!",
                       style=new_tui_style,
                       lexer=PygmentsLexer(PythonLexer))
        if cmd in {"q", "quit", "Quit", "exit", "Exit"}:
            break
        elif cmd in {"help", "Help", "?"}:
            show_help()
        elif cmd == "eval":
            print("42")
    except KeyboardInterrupt:
        continue
    except EOFError:
        break
</pre>

<p>V&nbsp;dalším příkladu je použita syntaxe odpovídající programovacímu jazyku
Clojure:</p>

<pre>
cmd = s.prompt("Command: ",
               <strong>lexer=PygmentsLexer(ClojureLexer)</strong>)
</pre>

<img src="https://i.iinfo.cz/images/183/prompt-toolkit-2-19.png" class="image-334209" alt="&#160;" width="806" height="531" />
<p><i>Obrázek X: Zvýraznění syntaxe jazyka Clojure.</i></p>

<pre>
from pygments.lexers.jvm import ClojureLexer
&nbsp;
from prompt_toolkit.styles import Style
from prompt_toolkit.lexers import PygmentsLexer
from prompt_toolkit import PromptSession
&nbsp;
&nbsp;
def <strong>show_help</strong>():
    print("""Help
--------
quit - quit this application
exit - exit from this application
eval - evaluate
""")
&nbsp;
&nbsp;
new_tui_style = Style.from_dict({
    'rprompt': 'bg:#ff0066 #ffffff',
    'bottom-toolbar': 'bg:#ffffff #333333 reverse',
    'prompt': 'bg:#ansiyellow #000000',
    })
&nbsp;
&nbsp;
s = PromptSession()
&nbsp;
while True:
    try:
        cmd = s.prompt("Command: ",
                       validate_while_typing=True,
                       enable_open_in_editor=True,
                       bottom_toolbar="Available commands: quit, exit, help, eval",
                       rprompt="Don't panic!",
                       style=new_tui_style,
                       lexer=PygmentsLexer(ClojureLexer))
        if cmd in {"q", "quit", "Quit", "exit", "Exit"}:
            break
        elif cmd in {"help", "Help", "?"}:
            show_help()
        elif cmd == "eval":
            print("42")
    except KeyboardInterrupt:
        continue
    except EOFError:
        break
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obarvení syntaxe na terminálu v&nbsp;knihovně prompt_toolkit</h2>

<p></p>

<pre>
from pygments import lex
from pygments.token import Token
from pygments.lexers import PythonLexer
&nbsp;
from prompt_toolkit.formatted_text import PygmentsTokens
from prompt_toolkit import print_formatted_text
&nbsp;
code = """
for i in range(1, 10):
    print(i)
    if i &gt; 5:
        break
    do_something(i)
"""
&nbsp;
tokens = list(lex(code, lexer=PythonLexer()))
print_formatted_text(PygmentsTokens(tokens))
</pre>

<img src="https://i.iinfo.cz/images/325/prompt-toolkit-3-9.png" class="image-334648" alt="&#160;" width="806" height="531" />
<p><i>Obrázek X: Obarvení textu na základě lexeru vytvořeného pro programovací
jazyk Python.</i></p>

<pre>
from pygments import lex
from pygments.token import Token
from pygments.lexers.basic import CbmBasicV2Lexer
&nbsp;
from prompt_toolkit.formatted_text import PygmentsTokens
from prompt_toolkit import print_formatted_text
&nbsp;
code = """
10 FOR I=0 TO 63
20 FOR J=43 TO 0 STEP -1
30 LET CX=(I-52)/31
40 LET CY=(J-22)/31
50 LET ZX=0
60 LET ZY=0
70 LET ITER=0
80 LET ZX2=ZX*ZX
85 LET ZY2=ZY*ZY
90 LET ZY=2*ZX*ZY+CY
100 LET ZX=ZX2-ZY2+CX
110 LET ITER=ITER+1
120 IF ZX2+ZY2&lt;=4 AND ITER&lt;200 THEN GOTO 80
130 IF ITER=200 THEN PLOT I, J
140 NEXT J
150 NEXT I
"""
&nbsp;
tokens = list(lex(code, lexer=CbmBasicV2Lexer()))
print_formatted_text(PygmentsTokens(tokens))
</pre>

<img src="https://i.iinfo.cz/images/325/prompt-toolkit-3-10.png" class="image-334649" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 11: Obarvení textu na základě lexeru vytvořeného pro programovací
jazyk BASIC (zde konkrétně Commodore BASIC).</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Popis</th><th>Odkaz</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments/</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments/</a></td></tr>
</table>

<p>Další soubory:</p>

<table>
<tr><th>#</th><th>Soubor</th><th>Popis</th><th>Odkaz</th></tr>
<tr><td>1</td><td>pygments.mm</td><td>schéma zpracování</td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/pygments.mm">https://github.com/tisnik/presentations/blob/master/pygments/pygments.mm</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Pygments - Python syntax highlighter<br />
<a href="http://pygments.org/">http://pygments.org/</a>
</li>

<li>Pygments (dokumentace)<br />
<a href="http://pygments.org/docs/">http://pygments.org/docs/</a>
</li>

<li>Write your own filter<br />
<a href="http://pygments.org/docs/filterdevelopment/">http://pygments.org/docs/filterdevelopment/</a>
</li>

<li>Write your own lexer<br />
<a href="http://pygments.org/docs/lexerdevelopment/">http://pygments.org/docs/lexerdevelopment/</a>
</li>

<li>Write your own formatter<br />
<a href="http://pygments.org/docs/formatterdevelopment/">http://pygments.org/docs/formatterdevelopment/</a>
</li>

<li>Jazyky podporované knihovnou Pygments<br />
<a href="http://pygments.org/languages/">http://pygments.org/languages/</a>
</li>

<li>Pygments FAQ<br />
<a href="http://pygments.org/faq/">http://pygments.org/faq/</a>
</li>

<li>Pygments 2.2.0 (na PyPi)<br />
<a href="https://pypi.org/project/Pygments/">https://pypi.org/project/Pygments/</a>
</li>

<li>Syntax highlighting<br />
<a href="https://en.wikipedia.org/wiki/Syntax_highlighting">https://en.wikipedia.org/wiki/Syntax_highlighting</a>
</li>

<li>Lexical analysis<br />
<a href="https://en.wikipedia.org/wiki/Lexical_analysis">https://en.wikipedia.org/wiki/Lexical_analysis</a>
</li>

<li>Lexical grammar<br />
<a href="https://en.wikipedia.org/wiki/Lexical_grammar">https://en.wikipedia.org/wiki/Lexical_grammar</a>
</li>

<li>Compiler Construction/Lexical analysis<br />
<a href="https://en.wikibooks.org/wiki/Compiler_Construction/Lexical_analysis">https://en.wikibooks.org/wiki/Compiler_Construction/Lexical_analysis</a>
</li>

<li>Compiler Design - Lexical Analysis<br />
<a href="https://www.tutorialspoint.com/compiler_design/compiler_design_lexical_analysis.htm">https://www.tutorialspoint.com/compiler_design/compiler_design_lexical_analysis.htm</a>
</li>

<li>Lexical Analysis - An Intro<br />
<a href="https://www.scribd.com/document/383765692/Lexical-Analysis">https://www.scribd.com/document/383765692/Lexical-Analysis</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Rosetta_Code">http://rosettacode.org/wiki/Rosetta_Code</a>
</li>

<li>Mandelbrot set: Sinclair ZX81 BASIC<br />
<a href="http://rosettacode.org/wiki/Mandelbrot_set#Sinclair_ZX81_BASIC">http://rosettacode.org/wiki/Mandelbrot_set#Sinclair_ZX81_BASIC</a>
</li>

<li>Lexikální analýza (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Lexik%C3%A1ln%C3%AD_anal%C3%BDza">https://cs.wikipedia.org/wiki/Lexik%C3%A1ln%C3%AD_anal%C3%BDza</a>
</li>

<li>Quex, a lexical analyzer generator<br />
<a href="http://quex.sourceforge.net/">http://quex.sourceforge.net/</a>
</li>

<li>ATARI BASIC &ndash; tokenizace<br />
<a href="https://www.atariarchives.org/dere/chapt10.php">https://www.atariarchives.org/dere/chapt10.php</a>
</li>

<li>BASIC token<br />
<a href="https://www.c64-wiki.com/wiki/BASIC_token">https://www.c64-wiki.com/wiki/BASIC_token</a>
</li>

<li>CamelCase (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Camel_case">https://en.wikipedia.org/wiki/Camel_case</a>
</li>

<li>Snake case<br />
<a href="https://en.wikipedia.org/wiki/Snake_case">https://en.wikipedia.org/wiki/Snake_case</a>
</li>

<li>Kebab-case<br />
<a href="https://en.wikipedia.org/wiki/Letter_case#Special_case_styles">https://en.wikipedia.org/wiki/Letter_case#Special_case_styles</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

