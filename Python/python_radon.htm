<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">*** 18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<ol>
<li></li>
<li></li>
<li></li>
<li></li>
</ol>

Higher risk of defects
Difficult to add new functionality
Difficult to understand/maintain the code
Difficult to validate


<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p></p>

<table>
<tr><th>Označení</th><th>Typ bloku</th></tr>
<tr><td>F</td><td>funkce</td></tr>
<tr><td>M</td><td>metoda</td></tr>
<tr><td>C</td><td>třída</td></tr>
</table>

<p></p>

<table>
<tr><th>Skóre</th><th>Kategorie</th><th>Riziko</th></tr>
<tr><td>1 - 5</td><td>A</td><td>nízké, malá komplexita, jednoduché bloky</td></tr>
<tr><td>6 - 10</td><td>B</td><td>nízké, dobrá struktura programu</td></tr>
<tr><td>11 - 20</td><td>C</td><td>průměrné, obsahuje nepatrně složitější bloky kódu</td></tr>
<tr><td>21 - 30</td><td>D</td><td>vyšší, obsahuje složitější bloky kódu</td></tr>
<tr><td>31 - 40</td><td>E</td><td>vyšší, složité bloky kódu nebo složité podmínky</td></tr>
<tr><td>41+</td><td>F</td><td>vysoké, potenciálně nestabilní kód s&nbsp;rizikem zanesení nových chyb</td></tr>
</table>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
def hello():
    print("Hello world!")
&nbsp;
&nbsp;
if __name__ == "__main__":
    hello()
</pre>

<pre>
def nothing():
    pass
&nbsp;
&nbsp;
def simple():
    print(1)
    print(2)
    print(3)
    print(4)
&nbsp;
&nbsp;
def one_if(x):
    if x &gt; 0:
        return 42
    return None
&nbsp;
&nbsp;
def one_if_else(x):
    if x &gt; 0:
        return 42
    else:
        return None
&nbsp;
&nbsp;
def if_elif_else(x):
    if x &gt; 0:
        return "kladny"
    elif x &lt; 0:
        return "zaporny"
    else:
        return "nula"
&nbsp;
&nbsp;
def nested_if_else(x):
    if x &gt; 0:
        return "kladny"
    else:
        if x &lt; 0:
            return "zaporny"
        else:
            return "nula"
&nbsp;
&nbsp;
def max1(a, b, c):
    maximum = a
&nbsp;
    if b &gt; maximum:
        maximum = b
&nbsp;
    if c &gt; maximum:
        maximum = c
&nbsp;
    return maximum
&nbsp;
&nbsp;
def max2(a, b, c):
    if a &gt; b and a &gt; c:
        return a
    elif b &gt; a and b &gt; c:
        return b
    else:
        return c
&nbsp;
&nbsp;
def fibonacci1(i):
    x, y = 1, 1
    for i in range(i - 1):
        x, y = y, x + y
    return x
&nbsp;
&nbsp;
def fibonacci2(i):
    if i == 1 or i == 2:
        return 1
    return fibonacci2(i-1) + fibonacci2(i-2)
&nbsp;
&nbsp;
def factorial1(n):
    result = 1
    while n &gt;= 1:
        result *= n
        n -= 1
    return result
&nbsp;
&nbsp;
def factorial2(n):
    if n == 0:
        return 1
    else:
        return n * factorial2(n-1)
&nbsp;
&nbsp;
def factorial3(n):
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
import palette_mandmap
from sys import argv, exit
&nbsp;
&nbsp;
def calc_mandelbrot(width, height, maxiter, palette):
    print("P3")
    print("{w} {h}".format(w=width, h=height))
    print("255")
&nbsp;
    cy = -1.5
    for y in range(0, height):
        cx = -2.0
        for x in range(0, width):
            zx = 0.0
            zy = 0.0
            i = 0
            while i &lt; maxiter:
                zx2 = zx * zx
                zy2 = zy * zy
                if zx2 + zy2 &gt; 4.0:
                    break
                zy = 2.0 * zx * zy + cy
                zx = zx2 - zy2 + cx
                i += 1
&nbsp;
            r = palette[i][0]
            g = palette[i][1]
            b = palette[i][2]
            print("{r} {g} {b}".format(r=r, g=g, b=b))
            cx += 3.0/width
        cy += 3.0/height
&nbsp;
&nbsp;
if __name__ == "__main__":
    if len(argv) &lt; 4:
        print("usage: python mandelbrot width height maxiter")
        exit(1)
&nbsp;
    width = int(argv[1])
    height = int(argv[2])
    maxiter = int(argv[3])
    calc_mandelbrot(width, height, maxiter, palette_mandmap.palette)
</pre>



<pre>
import palette_mandmap
from sys import argv, exit
&nbsp;
&nbsp;
def calc_mandelbrot(width, height, maxiter, palette):
    print("P3")
    print("{w} {h}".format(w=width, h=height))
    print("255")
&nbsp;
    c = 0.0 - 1.5J
    for y in range(0, height):
        c = complex(-2.0, c.imag)
        for x in range(0, width):
            z = 0.0 + 0.0J
            i = 0
            while i &lt; maxiter:
                if abs(z) &gt; 4.0:
                    break
                z = z**2 + c
                i += 1
&nbsp;
            r = palette[i][0]
            g = palette[i][1]
            b = palette[i][2]
            print("{r} {g} {b}".format(r=r, g=g, b=b))
            c += 3.0/width
        c += 3.0J/height
&nbsp;
&nbsp;
if __name__ == "__main__":
    if len(argv) &lt; 4:
        print("usage: python mandelbrot width height maxiter")
        exit(1)
&nbsp;
    width = int(argv[1])
    height = int(argv[2])
    maxiter = int(argv[3])
    calc_mandelbrot(width, height, maxiter, palette_mandmap.palette)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
# taken from http://hovnokod.cz/2744
&nbsp;
def vporadi(x,y,z):
    if (x&lt;y) and (x&lt;z):
        if (y&lt;z):
            print(x,y,z)
        else:
            print(x,z,y)
    if (y&lt;x) and (y&lt;z):
        if (x&lt;z):
            print(y,x,z)
        else:
            print(y,z,x)
    if (z&lt;y) and (z&lt;x):
        if (y&lt;x):
            print(z,y,x)
        else:
            print(z,x,y)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
# taken from http://hovnokod.cz/1429 and slightly updated
&nbsp;
def genpassword(wlc,maxchar,txt,List,verbose):
    word = ""
    i1 = i2 = i3 = i4 = i5 = i6 = i6 = i7 = i8 = i9 = i10 = i11 = i12 = i13 = i14 = i15 = 0
    txtfile = open(txt,'w')
&nbsp;
    i = 0
    mc = int(maxchar) - 1
    lword = [0]
    for i in range(mc):
        lword += [0]  
&nbsp;
    for i1 in range(len(wlc)):
        for i2 in range(len(wlc)):
            for i3 in range(len(wlc)):
                for i4 in range(len(wlc)):
                    for i5 in range(len(wlc)):
                        for i6 in range(len(wlc)):
                            for i7 in range(len(wlc)):
                                for i8 in range(len(wlc)):
                                    for i9 in range(len(wlc)):
                                        for i10 in range(len(wlc)):
                                            for i11 in range(len(wlc)):
                                                for i12 in range(len(wlc)):
                                                    for i13 in range(len(wlc)):
                                                        for i14 in range(len(wlc)):
                                                            for i15 in range(len(wlc)):
                                                                if int(maxchar) == 1 :
                                                                    word = wlc[i15]
                                                                if int(maxchar) == 2 :
                                                                    word = wlc[i14] + wlc[i15]
                                                                if int(maxchar) == 3 :
                                                                    word = wlc[i13] + wlc[i14] + wlc[i15]
&nbsp; 
                                                                if int(maxchar) == 14 :
                                                                    word = wlc[i1] + wlc[i2] + wlc[i3] + wlc[i4] \
                                                                    + wlc[i5] + wlc[i6] + wlc[i7] + wlc[i8] + wlc[i9] \
                                                                    + wlc[i10] + wlc[i11] + wlc[i12] + wlc[i13] \
                                                                    + wlc[i14] + wlc[i15]
&nbsp;
                                                                if int(maxchar) == 15 :
                                                                    word = wlc[i1] + wlc[i2] + wlc[i3] + wlc[i4] \
                                                                    + wlc[i5] + wlc[i6] + wlc[i7] + wlc[i8] + wlc[i9] \
                                                                    + wlc[i10] + wlc[i11] + wlc[i12] + wlc[i13] \
                                                                    + wlc[i14] + wlc[i15]
&nbsp;
                                                                if int(verbose) == 1:
                                                                    print(word)
&nbsp;
                                                                txtfile.writelines(word + "\n")
&nbsp;
                                                                i = 0
                                                                end = 0
                                                                if int(List) == 1 :
                                                                    for i in range(len(word)):
                                                                        lword[i] = "9"
                                                                    if str(lword) == str(list(word)):
                                                                        end = 1
&nbsp;
                                                                if end == 1 : break
                                                            if end == 1 : break
                                                        if end == 1 : break
                                                    if end == 1 : break
                                                if end == 1 : break
                                            if end == 1 : break
                                        if end == 1 : break
                                    if end == 1 : break
                                if end == 1 : break
                            if end == 1 : break
                        if end == 1 : break
                    if end == 1 : break
                if end == 1 : break
            if end == 1 : break
        if end == 1 : break
&nbsp;
    txtfile.close()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
~/.local/lib/python3.6/site-packages
</pre>

<pre>
'''Module holding constants used to format lines that are printed to the
terminal.
'''
&nbsp;
import sys
try:
    import colorama
    <strong># colorama.init(strip=(not sys.stdout.isatty()))</strong>
    <strong># colorama.init()</strong>
    GREEN, YELLOW, RED = (colorama.Fore.GREEN, colorama.Fore.YELLOW,
                          colorama.Fore.RED)
    MAGENTA, CYAN, WHITE = (colorama.Fore.MAGENTA, colorama.Fore.CYAN,
                            colorama.Fore.WHITE)
    BRIGHT, RESET = colorama.Style.BRIGHT, colorama.Style.RESET_ALL
except ImportError:  # pragma: no cover
    # No colorama, so let's fallback to no-color mode
    GREEN = YELLOW = RED = MAGENTA = CYAN = WHITE = BRIGHT = RESET = ''
&nbsp;
RANKS_COLORS = {'A': GREEN, 'B': GREEN,
                'C': YELLOW, 'D': YELLOW,
                'E': RED, 'F': RED}
&nbsp;
LETTERS_COLORS = {'F': MAGENTA,
                  'C': CYAN,
                  'M': GREEN}
&nbsp;
MI_RANKS = {'A': GREEN, 'B': YELLOW, 'C': RED}
TEMPLATE = '{0}{1} {reset}{2}:{3} {4} - {5}{6}{reset}'
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<table>
<tr><th>Skóre</th><th>Kategorie</th><th>Udržovatelnost</th></tr>
<tr><td>100 - 20</td><td>A</td><td>vysoká</td></tr>
<tr><td> 19 - 10</td><td>B</td><td>střední</td></tr>
<tr><td>  9 -  0</td><td>C</td><td>nízká</td></tr>
</table>
Very high
Medium
Extremely low



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech sedmi dnes popsaných demonstračních příkladů určených
pro interpret Pythonu 3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/radon-examples">https://github.com/tisnik/radon-examples</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem
prozatím velmi malý, doslova několik kilobajtů), můžete namísto toho použít
odkazy na jednotlivé demonstrační příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th></th><th></th></tr>
<tr><td>hello_world.py</td><td><a href="https://github.com/tisnik/radon-examples/blob/master/hello_world.py">https://github.com/tisnik/radon-examples/blob/master/hello_world.py</a></td></tr>
<tr><td>control_structures.py</td><td><a href="https://github.com/tisnik/radon-examples/blob/master/control_structures.py">https://github.com/tisnik/radon-examples/blob/master/control_structures.py</a></td></tr>
<tr><td>bubble_sort.py</td><td><a href="https://github.com/tisnik/radon-examples/blob/master/bubble_sort.py">https://github.com/tisnik/radon-examples/blob/master/bubble_sort.py</a></td></tr>
<tr><td>mandelbrot.py</td><td><a href="https://github.com/tisnik/radon-examples/blob/master/mandelbrot.py">https://github.com/tisnik/radon-examples/blob/master/mandelbrot.py</a></td></tr>
<tr><td>mandelbrot_complex.py</td><td><a href="https://github.com/tisnik/radon-examples/blob/master/mandelbrot_complex.py">https://github.com/tisnik/radon-examples/blob/master/mandelbrot_complex.py</a></td></tr>
<tr><td>v_poradi.py</td><td><a href="https://github.com/tisnik/radon-examples/blob/master/v_poradi.py">https://github.com/tisnik/radon-examples/blob/master/v_poradi.py</a></td></tr>
<tr><td>genpassword.py</td><td><a href="https://github.com/tisnik/radon-examples/blob/master/genpassword.py">https://github.com/tisnik/radon-examples/blob/master/genpassword.py</a></td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>Radon na PyPi<br />
<a href="https://pypi.org/project/radon/">https://pypi.org/project/radon/</a>
</li>

<li>Radon na GitHubu<br />
<a href="https://github.com/rubik/radon">https://github.com/rubik/radon</a>
</li>

<li>Radon’s documentation!<br />
<a href="http://radon.readthedocs.io/en/latest/">http://radon.readthedocs.io/en/latest/</a>
</li>

<li>Cyclomatic complexity (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">https://en.wikipedia.org/wiki/Cyclomatic_complexity</a>
</li>

<li>Cyklomatická složitost (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Cyklomatick%C3%A1_slo%C5%BEitost">https://cs.wikipedia.org/wiki/Cyklomatick%C3%A1_slo%C5%BEitost</a>
</li>

<li>What is Cyclomatic Complexity?<br />
<a href="https://www.tutorialspoint.com/software_testing_dictionary/cyclomatic_complexity.htm">https://www.tutorialspoint.com/software_testing_dictionary/cyclomatic_complexity.htm</a>
</li>

<li>The Halstead metrics<br />
<a href="http://www.virtualmachinery.com/sidebar2.htm">http://www.virtualmachinery.com/sidebar2.htm</a>
</li>

<li>Measurement of Halstead Metrics with Testwell CMT++ and CMTJava (Complexity Measures Tool)<br />
<a href="http://www.verifysoft.com/en_halstead_metrics.html">http://www.verifysoft.com/en_halstead_metrics.html</a>
</li>

<li>Halstead complexity measures (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Halstead_complexity_measures">https://en.wikipedia.org/wiki/Halstead_complexity_measures</a>
</li>

<li>Decision-to-decision path<br />
<a href="https://en.wikipedia.org/wiki/Decision-to-decision_path">https://en.wikipedia.org/wiki/Decision-to-decision_path</a>
</li>

<li>Essential complexity<br />
<a href="https://en.wikipedia.org/wiki/Essential_complexity">https://en.wikipedia.org/wiki/Essential_complexity</a>
</li>

<li>Learn Mccabe's Cyclomatic Complexity with Example<br />
<a href="https://www.guru99.com/cyclomatic-complexity.html">https://www.guru99.com/cyclomatic-complexity.html</a>
</li>

<li>ansi2html<br />
<a href="https://github.com/Kronuz/ansi2html">https://github.com/Kronuz/ansi2html</a>
</li>

<li>Komplexita<br />
<a href="https://cs.wikipedia.org/wiki/Komplexita">https://cs.wikipedia.org/wiki/Komplexita</a>
</li>

<li>Think Twice Before Using the “Maintainability Index”<br />
<a href="https://avandeursen.com/2014/08/29/think-twice-before-using-the-maintainability-index/">https://avandeursen.com/2014/08/29/think-twice-before-using-the-maintainability-index/</a>
</li>

<li>Structured testing (kniha)<br />
<a href="https://books.google.cz/books?id=vtNWAAAAMAAJ">https://books.google.cz/books?id=vtNWAAAAMAAJ</a>
</li>

<li>Static program analysis<br />
<a href="https://en.wikipedia.org/wiki/Static_program_analysis">https://en.wikipedia.org/wiki/Static_program_analysis</a>
</li>

<li>Python #2744<br />
<a href="http://hovnokod.cz/2744">http://hovnokod.cz/2744</a>
</li>

<li>Python #1429<br />
<a href="http://hovnokod.cz/1429">http://hovnokod.cz/1429</a>
</li>

<li>Measure complexity of C source<br />
<a href="https://www.gnu.org/software/complexity/manual/complexity.html">https://www.gnu.org/software/complexity/manual/complexity.html</a>
</li>

<li>Using Complexity Measurements to Improve Software Quality<br />
<a href="https://www.infoq.com/news/2014/10/complexity-software-quality">https://www.infoq.com/news/2014/10/complexity-software-quality</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

