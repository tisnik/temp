<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Skripty pro automatické ovládání aplikací s&nbsp;GUI postavené na knihovně PyAutoGUI</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Skripty pro automatické ovládání aplikací s&nbsp;GUI postavené na knihovně PyAutoGUI</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na článek o nástroji xdotool dnes tematicky navážeme. Zaměříme se totiž na knihovnu nazvanou PyAutoGUI. Tato knihovna umožňuje ovládat aplikace s grafickým uživatelským rozhraním (simulovat operace prováděné myší atd.), a to s využitím skriptů naprogramovaných v Pythonu.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Skripty pro automatické ovládání aplikací s&nbsp;GUI postavené na knihovně <i>PyAutoGUI</i></a></p>
<p><a href="#k02">*** 2. Od nástroje <strong>xdotool</strong> ke knihovně <i>PyAutoGUI</i></a></p>
<p><a href="#k03">*** 3. Instalace knihovny <i>PyAutoGUI</i> i všech potřebných podpůrných balíčků</a></p>
<p><a href="#k04">*** 4. Otestování instalace</a></p>
<p><a href="#k05">*** 5. Získání základních informací o systému a obrazovce</a></p>
<p><a href="#k06">*** 6. Spuštění testované aplikace</a></p>
<p><a href="#k07">*** 7. Simulace stisku kláves</a></p>
<p><a href="#k08">*** 8. Názvy kláves použitelných v&nbsp;knihovně PyAutoGUI</a></p>
<p><a href="#k09">*** 9. Stisk a puštění klávesy</a></p>
<p><a href="#k10">*** 10. Funkce <strong>typewrite</strong> volaná s&nbsp;názvy kláves</a></p>
<p><a href="#k11">*** 11. Simulace stisku kombinace kláves funkcí <strong>hotkey</strong></a></p>
<p><a href="#k12">*** 12. Simulace práce s&nbsp;myší nebo s&nbsp;podobným polohovacím zařízením</a></p>
<p><a href="#k13">*** 13. Získání základních informací o polohovacím zařízení</a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. Pomocný nástroj <strong>mouseInfo</strong></a></p>
<p><a href="#k17">*** 17. Pomocný nástroj <strong>scrot</strong></a></p>
<p><a href="#k18">*** 18. Využití knihovny <i>PyAutoGUI</i> pro testování aplikací &ndash; virtuální framebuffer</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Skripty pro automatické ovládání aplikací s&nbsp;GUI postavené na knihovně <i>PyAutoGUI</i></h2>

<p>Unixové systémy a od nich odvozené operační systémy (mezi něž v&nbsp;současnosti patří především Linux apod.) jsou používány a oblíbeny mj.&nbsp;i z&nbsp;toho důvodu, že umožňují relativně snadnou automatizaci mnoha operací s&nbsp;využitím skriptů, které mohou nahradit ruční zadávání jednotlivých příkazů a popř.&nbsp;přenos dat mezi nimi. Primárně je skriptování doménou takových nástrojů a utilit, jejichž vstupní či výstupní data jsou reprezentována textovými či (v&nbsp;poněkud menší míře) binárními daty. Ostatně pro tento účel je v&nbsp;unixu dostupných mnoho desítek specializovaných nástrojů (<strong>wc</strong>, <strong>uniq</strong>, <strong>sort</strong>, <strong>sed</strong>, <strong>grep</strong>, <strong>awk</strong> a tak dále). Mnohdy je však užitečné skriptovat (či nějakým způsobem automatizovat) i ty aplikace, které jsou vybaveny grafickým uživatelským rozhraním a ovládají se s&nbsp;využitím klávesnice a myši popř.&nbsp;pomocí podobně koncipovaných vstupních zařízení (touchpad, trackball atd.). Některé pokročilejší aplikace automatizaci explicitně podporují, protože jsou skriptovatelné. Jedná se o některé komerční aplikace (AutoCAD), ale například i o GIMP, LibreOffice apod.</p>

<p>Ve skutečnosti je však možné programově ovládat i ostatní aplikace s&nbsp;grafickým uživatelským rozhraním, a to i ty aplikace, které pro tento účel nejsou explicitně připraveny. <a href="">Relativně nedávno</a> jsme se na stránkách Roota věnovali popisu nástroje nazvaného <strong>xdotool</strong>, který je určen pro automatizaci některých operací, které jsou běžně prováděny interaktivně uživatelem, tedy primárně s&nbsp;využitím klávesnice a myši. Připomeňme si, že tento nástroj <a href="https://github.com/jordansissel/xdotool">naprogramovaný primárně v&nbsp;C</a>, jenž je volatelný přímo z&nbsp;příkazové řádky a tím pádem i z&nbsp;BASH skriptů atd., umožňuje provádět mj.&nbsp;i následující operace:</p>

<ol>
<li>Simulace stisku klávesy popř.&nbsp;klávesy s&nbsp;modifikátorem</li>
<li>Simulace buď pouze stisku či naopak puštění klávesy</li>
<li>Simulace psaní delšího textu (tedy sekvence alfanumerických kláves)</li>
<li>Interaktivní výběr okna pro prováděné operace</li>
<li>Automatický výběr okna pro prováděné operace na základě zadaného kritéria</li>
<li>Simulace stisku vybraného tlačítka myši</li>
<li>Simulace pohybu ukazatelem myši</li>
<li>Další operace s&nbsp;vybraným oknem, například jeho minimalizace apod.</li>
<li>Naprogramování akce, která se má provést při změně stavu okna (najetí myší apod.)</li>
</ol>

<p><div class="rs-tip-major">Poznámka: automatické ovládání aplikací s&nbsp;GUI lze využít v&nbsp;mnoha oblastech. Kromě tvorby &bdquo;GUI maker&ldquo; pro automatizaci některých činností se jedná především o testování. V&nbsp;oblasti webových aplikací (a některé dnešní aplikace jsou založeny na webovém prohlížeči, ať již klasickém, či &bdquo;schovaném&ldquo; ve frameworcích typu Electron) se pro tento účel používá nástroj <i>Selenium</i>, které obsahuje podporu i pro Python a další programovací jazyky. Existují však i další nástroje s&nbsp;podobným zaměřením, například <i>Windmill</i> či <i>Splinter</i>.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Od nástroje <strong>xdotool</strong> ke knihovně <i>PyAutoGUI</i></h2>

<p>V&nbsp;případě, že budete potřebovat volat <strong>xdotool</strong> z&nbsp;jiných programovacích jazyků (tedy nikoli pouze ze shellu), je vhodné se poohlédnout po rozhraních k&nbsp;těmto jazykům.  V&nbsp;případě Pythonu se například jedná o dnes již poněkud zastaralou knihovnu nazvanou <a href="https://pypi.org/project/python-libxdo/">python-libxdo</a>. Pro mnoho účelů &ndash; zejména pro tvorbu testů &ndash; je však výhodnější použít balíček <a href="https://pypi.org/project/PyAutoGUI/">PyAutoGUI</a>, s&nbsp;nímž se seznámíme v&nbsp;dnešním článku. Důvodem pro přechod ke knihovně <i>PyAutoGUI</i> může být i to, že některé operace poskytované nástrojem <strong>xdotool</strong> jsou nedostatečné, protože například neumožňují snadno vyhledávat ovládací prvky atd.</p>

<p>Mezi operace, které knihovna PyAutoGUI podporuje, patří především:</p>

<ol>
</ol>

<p><div class="rs-tip-major">Poznámka: mnohé z&nbsp;těchto operací se (podle očekávání) překrývají s&nbsp;možnostmi nástroje <strong>xdotool</strong>. Je zde však jedna důležitá výjimka &ndash; PyAutoGUI nedokáže lokalizovat zobrazené okno nebo ovládací prvek podle jeho identifikátoru. To paradoxně znamená, že první krok, který musíme při volání funkcí PyAutoGUI udělat, je vlastně nejsložitější, protože obecně nemáme kontrolu nad tím, na jakém místě a jak se zobrazí okno ovládané nebo testované aplikace. Pro tento účel je možné na Windows či Mac OS použít další knihovnu (nainstalovanou společně s&nbsp;PyAutoGUI), která se jmenuje <i>PyGetWindow</i>. Tato knihovna však prozatím nepodporuje Linux.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace knihovny <i>PyAutoGUI</i> i všech potřebných podpůrných balíčků</h2>

<p>Samotná knihovna <i>PyAutoGUI</i> je pochopitelně <a href="">dostupná na PyPi</a>, takže by teoreticky měla být její instalace jednoduchá a přímočará. Ovšem některé operace vyžadují přístup na úrovni <i>xlib</i> a pro tento účel je nutné explicitně nainstalovat další podpůrný balíček nazvaný <i>python3-xlib</i>. Instalaci tohoto balíčku ovšem neprovedeme přes <a href="">PyPi</a>, ale s&nbsp;využitím balíčkovacího nástroje daného operačního systému (<strong>dnf</strong>, <strong>apt-get</strong> atd.):</p>

<pre>
# <strong>dnf install python3-xlib</strong>
</pre>

<p>Průběh instalace může proběhnout následovně:</p>

<pre>
Last metadata expiration check: 0:09:59 ago on Sat 06 Feb 2021 06:14:01 AM EST.
Dependencies resolved.
================================================================================
 Package              Architecture   Version              Repository       Size
================================================================================
Installing:
 python3-xlib         noarch         0.28-2.fc32          updates         262 k
&nbsp;
Transaction Summary
================================================================================
Install  1 Package

Total download size: 262 k
Installed size: 1.1 M
Is this ok [y/N]:
Downloading Packages:
python3-xlib-0.28-2.fc32.noarch.rpm             402 kB/s | 262 kB     00:00    
--------------------------------------------------------------------------------
Total                                           199 kB/s | 262 kB     00:01     
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.
Running transaction
  Preparing        :                                                        1/1
  Installing       : python3-xlib-0.28-2.fc32.noarch                        1/1
  Running scriptlet: python3-xlib-0.28-2.fc32.noarch                        1/1
  Verifying        : python3-xlib-0.28-2.fc32.noarch                        1/1
&nbsp;
Installed:
  python3-xlib-0.28-2.fc32.noarch
&nbsp;
Complete!
</pre>

<p>Po instalaci balíčku <strong>python3-xlib</strong> již můžeme přistoupit k&nbsp;instalaci knihovny <i>PyAutoGUI</i>. Pro tento účel již použijeme známý nástroj <strong>pip</strong> (či <strong>pip3</strong>) určený pro Pythonovský ekosystém:</p>

<pre>
$ <strong>pip install --user pyautogui</strong>
</pre>

<p>Průběh instalace:</p>

<pre>
Collecting pyautogui
  Downloading https://files.pythonhosted.org/packages/40/0a/1373680148828d7ea3f0e432f06c08f51a33d72306719954d3ae379f5890/PyAutoGUI-0.9.52.tar.gz (55kB)
     |████████████████████████████████| 61kB 1.8MB/s 
Collecting pymsgbox
  Downloading https://files.pythonhosted.org/packages/7d/ff/4c6f31a4f08979f12a663f2aeb6c8b765d3bd592e66eaaac445f547bb875/PyMsgBox-1.0.9.tar.gz
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
    Preparing wheel metadata ... done
Collecting PyTweening&gt;=1.0.1
  Downloading https://files.pythonhosted.org/packages/b9/f8/c32a58d6e4dff8aa5c27e907194d69f3b57e525c2e4af96f39c6e9c854d2/PyTweening-1.0.3.zip
Collecting pyscreeze&gt;=0.1.21
  Downloading https://files.pythonhosted.org/packages/b7/7d/a0e85da28a96e2ff2f39e682ff84eb92501b564883fde87d92aee29966a2/PyScreeze-0.1.26.tar.gz
Collecting pygetwindow&gt;=0.0.5
  Downloading https://files.pythonhosted.org/packages/e1/70/c7a4f46dbf06048c6d57d9489b8e0f9c4c3d36b7479f03c5ca97eaa2541d/PyGetWindow-0.0.9.tar.gz
Collecting mouseinfo
  Downloading https://files.pythonhosted.org/packages/28/fa/b2ba8229b9381e8f6381c1dcae6f4159a7f72349e414ed19cfbbd1817173/MouseInfo-0.1.3.tar.gz
Collecting python3-Xlib
  Downloading https://files.pythonhosted.org/packages/ef/c6/2c5999de3bb1533521f1101e8fe56fd9c266732f4d48011c7c69b29d12ae/python3-xlib-0.15.tar.gz (132kB)
     |████████████████████████████████| 133kB 3.7MB/s 
Collecting Pillow&gt;=6.2.1
  Downloading https://files.pythonhosted.org/packages/c9/57/a6c81c1d6b8973d288ec6df0993a71a61318c862afc1de71fd3aa1ba1dcd/Pillow-8.1.0-cp38-cp38-manylinux1_x86_64.whl (2.2MB)
     |████████████████████████████████| 2.2MB 16.7MB/s 
Collecting pyrect
  Downloading https://files.pythonhosted.org/packages/2f/68/bd7bf96fc44217e769f27912e6c9bb3e9987cba286054af6120448ce8212/PyRect-0.1.4.tar.gz
Collecting pyperclip
  Downloading https://files.pythonhosted.org/packages/6f/4c/0b1d507ad7e8bc31d690d04b4f475e74c2002d060f7994ce8c09612df707/pyperclip-1.8.1.tar.gz
Building wheels for collected packages: pymsgbox
  Building wheel for pymsgbox (PEP 517) ... done
  Created wheel for pymsgbox: filename=PyMsgBox-1.0.9-cp38-none-any.whl size=7420 sha256=c0e7f71340220fc6f6ababdb5a98260331111d2260fc7843e5854bb0fa40a5eb
  Stored in directory: /home/tester/.cache/pip/wheels/16/d7/4e/fffdd54b1cca86608b7655c9a2854890a38f955ce9532848cd
Successfully built pymsgbox
Installing collected packages: pymsgbox, PyTweening, Pillow, pyscreeze, pyrect, pygetwindow, pyperclip, python3-Xlib, mouseinfo, pyautogui
    Running setup.py install for PyTweening ... done
    Running setup.py install for pyscreeze ... done
    Running setup.py install for pyrect ... done
    Running setup.py install for pygetwindow ... done
    Running setup.py install for pyperclip ... done
    Running setup.py install for python3-Xlib ... done
    Running setup.py install for mouseinfo ... done
    Running setup.py install for pyautogui ... done
Successfully installed Pillow-8.1.0 PyTweening-1.0.3 mouseinfo-0.1.3 pyautogui-0.9.52 pygetwindow-0.0.9 pymsgbox-1.0.9 pyperclip-1.8.1 pyrect-0.1.4 pyscreeze-0.1.26 python3-Xlib-0.15
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se nainstalovalo relativně velké množství podpůrných knihoven, s&nbsp;nimiž se (alespoň nepřímo) seznámíme v&nbsp;dalším textu.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Otestování instalace</h2>

<p></p>

<pre>
$ <strong>$ python3</strong>
</pre>

<pre>
&gt;&gt;&gt; import pyautogui
&gt;&gt;&gt; help(pyautogui)
</pre>

<pre>
Help on package pyautogui:
&nbsp;
NAME
    pyautogui
&nbsp;
DESCRIPTION
    # PyAutoGUI lets Python control the mouse and keyboard, and other GUI automation tasks. For Windows, macOS, and Linux,
    # on Python 3 and 2.
    # https://github.com/asweigart/pyautogui
    # Al Sweigart al@inventwithpython.com (Send me feedback &amp; suggestions!)
&nbsp;
PACKAGE CONTENTS
    __main__
    _pyautogui_java
    _pyautogui_osx
    _pyautogui_win
    _pyautogui_x11
&nbsp;
SUBMODULES
    platformModule
&nbsp;
CLASSES
    builtins.Exception(builtins.BaseException)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Získání základních informací o systému a obrazovce</h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import pyautogui

print(pyautogui.getInfo())
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import pyautogui

width, height = pyautogui.size()
print("Screen size: {}x{} pixels".format(width, height))
</pre>


<p><a name="k06"></a></p>
<h2 id="k06">6. Spuštění testované aplikace</h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import subprocess
import time

print("Opening xterm")

# otevření terminálu
p = subprocess.Popen(["xterm", "-geometry", "40x20+100+100"])
assert p is not None

print("Opened")
time.sleep(5)

print("Closing xterm")
p.kill()
print("Closed")
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import subprocess
import time

print("Opening xev")

# otevření terminálu
p = subprocess.Popen(["xev", "-geometry", "400x400+0+0"])
assert p is not None

print("Opened")
time.sleep(5)

print("Closing xev")
p.kill()
print("Closed")
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Simulace stisku kláves</h2>

<p></p>

<pre>
Help on function keyDown in module pyautogui:
&nbsp;
keyDown(key, logScreenshot=None, _pause=True)
    Performs a keyboard key press without the release. This will put that
    key in a held down state.
&nbsp;
    NOTE: For some reason, this does not seem to cause key repeats like would
    happen if a keyboard key was held down on a text field.
&nbsp;
    Args:
      key (str): The key to be pressed down. The valid names are listed in
      KEYBOARD_KEYS.
&nbsp;
    Returns:
      None
</pre>

<pre>
Help on function keyUp in module pyautogui:
&nbsp;
keyUp(key, logScreenshot=None, _pause=True)
    Performs a keyboard key release (without the press down beforehand).
&nbsp;
    Args:
      key (str): The key to be released up. The valid names are listed in
      KEYBOARD_KEYS.
&nbsp;
    Returns:
      None
</pre>

<pre>
Help on function typewrite in module pyautogui:
&nbsp;
typewrite(message, interval=0.0, logScreenshot=None, _pause=True)
    Performs a keyboard key press down, followed by a release, for each of
    the characters in message.
&nbsp;
    The message argument can also be list of strings, in which case any valid
    keyboard name can be used.
&nbsp;
    Since this performs a sequence of keyboard presses and does not hold down
    keys, it cannot be used to perform keyboard shortcuts. Use the hotkey()
    function for that.
&nbsp;
    Args:
      message (str, list): If a string, then the characters to be pressed. If a
        list, then the key names of the keys to press in order. The valid names
        are listed in KEYBOARD_KEYS.
      interval (float, optional): The number of seconds in between each press.
        0.0 by default, for no pause in between presses.
&nbsp;
    Returns:
      None
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import subprocess
import time
import pyautogui

print("Opening xterm")

# otevření terminálu
p = subprocess.Popen(["xterm", "-geometry", "40x20+100+100"])
assert p is not None

print("Opened")
time.sleep(5)

print("Writing into terminal window...")
pyautogui.typewrite("ls --color -la\n", interval=1.0)
print("Done")

time.sleep(5)

print("Closing xterm")
p.kill()
print("Closed")
</pre>


<p><a name="k08"></a></p>
<h2 id="k08">8. Názvy kláves použitelných v&nbsp;knihovně PyAutoGUI</h2>

<p></p>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import pyautogui

print("\n".join(pyautogui.KEYBOARD_KEYS))
</pre>

<pre>
 
!
"
#
$
%
&amp;
'
(
)
*
+
,
-
.
/
0
1
2
3
4
5
6
7
8
9
:
;
&lt;
=
&gt;
?
@
[
\
]
^
_
`
a
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
q
r
s
t
u
v
w
x
y
z
{
|
}
~
accept
add
alt
altleft
altright
apps
backspace
browserback
browserfavorites
browserforward
browserhome
browserrefresh
browsersearch
browserstop
capslock
clear
convert
ctrl
ctrlleft
ctrlright
decimal
del
delete
divide
down
end
enter
esc
escape
execute
f1
f10
f11
f12
f13
f14
f15
f16
f17
f18
f19
f2
f20
f21
f22
f23
f24
f3
f4
f5
f6
f7
f8
f9
final
fn
hanguel
hangul
hanja
help
home
insert
junja
kana
kanji
launchapp1
launchapp2
launchmail
launchmediaselect
left
modechange
multiply
nexttrack
nonconvert
num0
num1
num2
num3
num4
num5
num6
num7
num8
num9
numlock
pagedown
pageup
pause
pgdn
pgup
playpause
prevtrack
print
printscreen
prntscrn
prtsc
prtscr
return
right
scrolllock
select
separator
shift
shiftleft
shiftright
sleep
space
stop
subtract
tab
up
volumedown
volumemute
volumeup
win
winleft
winright
yen
command
option
optionleft
optionright
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Stisk a puštění klávesy</h2>

<p></p>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import subprocess
import time
import pyautogui

print("Opening xev")

# otevření terminálu
p = subprocess.Popen(["xev", "-geometry", "400x400+0+0"])
assert p is not None

print("Opened")
time.sleep(5)

print("Key down")
pyautogui.keyDown("F1")
pyautogui.keyDown("F2")
pyautogui.keyDown("F3")
pyautogui.keyDown("F4")

print("Key up")
pyautogui.keyUp("F4")
pyautogui.keyUp("F3")
pyautogui.keyUp("F2")
pyautogui.keyUp("F1")

time.sleep(5)

print("Closing xev")
p.kill()
print("Closed")
</pre>

<pre>
Outer window is 0x1200001, inner window is 0x1200002

PropertyNotify event, serial 8, synthetic NO, window 0x1200001,
    atom 0x27 (WM_NAME), time 2273423, state PropertyNewValue

PropertyNotify event, serial 9, synthetic NO, window 0x1200001,
    atom 0x22 (WM_COMMAND), time 2273423, state PropertyNewValue

PropertyNotify event, serial 10, synthetic NO, window 0x1200001,
    atom 0x28 (WM_NORMAL_HINTS), time 2273423, state PropertyNewValue

CreateNotify event, serial 11, synthetic NO, window 0x1200001,
    parent 0x1200001, window 0x1200002, (10,10), width 50, height 50
border_width 4, override NO

PropertyNotify event, serial 14, synthetic NO, window 0x1200001,
    atom 0x13e (WM_PROTOCOLS), time 2273424, state PropertyNewValue

MapNotify event, serial 15, synthetic NO, window 0x1200001,
    event 0x1200001, window 0x1200002, override NO

PropertyNotify event, serial 28, synthetic NO, window 0x1200001,
    atom 0x1d9 (_FLUXBOX_GROUP_LEFT), time 2273424, state PropertyNewValue

ConfigureNotify event, serial 29, synthetic NO, window 0x1200001,
    event 0x1200001, window 0x1200001, (0,0), width 400, height 400,
    border_width 0, above 0x800008, override NO

ReparentNotify event, serial 29, synthetic NO, window 0x1200001,
    event 0x1200001, window 0x1200001, parent 0x602fb7,
    (0,21), override NO

MapNotify event, serial 29, synthetic NO, window 0x1200001,
    event 0x1200001, window 0x1200001, override NO

PropertyNotify event, serial 29, synthetic NO, window 0x1200001,
    atom 0x15f (_NET_WM_DESKTOP), time 2273425, state PropertyNewValue

PropertyNotify event, serial 29, synthetic NO, window 0x1200001,
    atom 0x15c (_NET_FRAME_EXTENTS), time 2273425, state PropertyNewValue

PropertyNotify event, serial 30, synthetic NO, window 0x1200001,
    atom 0x197 (_NET_WM_ALLOWED_ACTIONS), time 2273425, state PropertyNewValue

VisibilityNotify event, serial 32, synthetic NO, window 0x1200001,
    state VisibilityPartiallyObscured

Expose event, serial 32, synthetic NO, window 0x1200001,
    (0,1), width 400, height 9, count 3

Expose event, serial 32, synthetic NO, window 0x1200001,
    (0,10), width 10, height 58, count 2

Expose event, serial 32, synthetic NO, window 0x1200001,
    (68,10), width 332, height 58, count 1

Expose event, serial 32, synthetic NO, window 0x1200001,
    (0,68), width 400, height 332, count 0

EnterNotify event, serial 32, synthetic NO, window 0x1200001,
    root 0x178, subw 0x0, time 2273425, (386,16), root:(387,38),
    mode NotifyNormal, detail NotifyNonlinear, same_screen YES,
    focus NO, state 8192

KeymapNotify event, serial 32, synthetic NO, window 0x0,
    keys:  68  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   
           0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   

PropertyNotify event, serial 32, synthetic NO, window 0x1200001,
    atom 0x13f (WM_STATE), time 2273425, state PropertyNewValue

PropertyNotify event, serial 32, synthetic NO, window 0x1200001,
    atom 0x15f (_NET_WM_DESKTOP), time 2273425, state PropertyNewValue

PropertyNotify event, serial 32, synthetic NO, window 0x1200001,
    atom 0x15c (_NET_FRAME_EXTENTS), time 2273425, state PropertyNewValue

ConfigureNotify event, serial 32, synthetic NO, window 0x1200001,
    event 0x1200001, window 0x1200001, (0,22), width 400, height 400,
    border_width 0, above 0x602fbe, override NO

VisibilityNotify event, serial 32, synthetic NO, window 0x1200001,
    state VisibilityUnobscured

Expose event, serial 32, synthetic NO, window 0x1200001,
    (0,0), width 400, height 1, count 0

ConfigureNotify event, serial 32, synthetic YES, window 0x1200001,
    event 0x1200001, window 0x1200001, (1,23), width 400, height 400,
    border_width 0, above 0x0, override NO

FocusIn event, serial 33, synthetic NO, window 0x1200001,
    mode NotifyNormal, detail NotifyNonlinear

KeymapNotify event, serial 33, synthetic NO, window 0x0,
    keys:  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   
           0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   

ConfigureNotify event, serial 33, synthetic NO, window 0x1200001,
    event 0x1200001, window 0x1200001, (0,22), width 400, height 400,
    border_width 0, above 0x602fbb, override NO

ConfigureNotify event, serial 33, synthetic YES, window 0x1200001,
    event 0x1200001, window 0x1200001, (1,23), width 400, height 400,
    border_width 0, above 0x0, override NO

KeyPress event, serial 33, synthetic NO, window 0x1200001,
    root 0x178, subw 0x0, time 2278422, (386,15), root:(387,38),
    state 0x2000, keycode 67 (keysym 0xffbe, F1), same_screen YES,
    XLookupString gives 0 bytes: 
    XmbLookupString gives 0 bytes: 
    XFilterEvent returns: False

KeyPress event, serial 36, synthetic NO, window 0x1200001,
    root 0x178, subw 0x0, time 2278525, (386,15), root:(387,38),
    state 0x2000, keycode 68 (keysym 0xffbf, F2), same_screen YES,
    XLookupString gives 0 bytes: 
    XmbLookupString gives 0 bytes: 
    XFilterEvent returns: False

KeyPress event, serial 36, synthetic NO, window 0x1200001,
    root 0x178, subw 0x0, time 2278627, (386,15), root:(387,38),
    state 0x2000, keycode 69 (keysym 0xffc0, F3), same_screen YES,
    XLookupString gives 0 bytes: 
    XmbLookupString gives 0 bytes: 
    XFilterEvent returns: False

KeyPress event, serial 36, synthetic NO, window 0x1200001,
    root 0x178, subw 0x0, time 2278728, (386,15), root:(387,38),
    state 0x2000, keycode 70 (keysym 0xffc1, F4), same_screen YES,
    XLookupString gives 0 bytes: 
    XmbLookupString gives 0 bytes: 
    XFilterEvent returns: False

KeyRelease event, serial 36, synthetic NO, window 0x1200001,
    root 0x178, subw 0x0, time 2278830, (386,15), root:(387,38),
    state 0x2000, keycode 70 (keysym 0xffc1, F4), same_screen YES,
    XLookupString gives 0 bytes: 
    XFilterEvent returns: False

KeyRelease event, serial 36, synthetic NO, window 0x1200001,
    root 0x178, subw 0x0, time 2278932, (386,15), root:(387,38),
    state 0x2000, keycode 69 (keysym 0xffc0, F3), same_screen YES,
    XLookupString gives 0 bytes: 
    XFilterEvent returns: False

KeyRelease event, serial 36, synthetic NO, window 0x1200001,
    root 0x178, subw 0x0, time 2279033, (386,15), root:(387,38),
    state 0x2000, keycode 68 (keysym 0xffbf, F2), same_screen YES,
    XLookupString gives 0 bytes: 
    XFilterEvent returns: False

KeyRelease event, serial 36, synthetic NO, window 0x1200001,
    root 0x178, subw 0x0, time 2279135, (386,15), root:(387,38),
    state 0x2000, keycode 67 (keysym 0xffbe, F1), same_screen YES,
    XLookupString gives 0 bytes: 
    XFilterEvent returns: False
Opening xev
Opened
Key down
Key up
Closing xev
Closed
</pre>


<p><a name="k10"></a></p>
<h2 id="k10">10. Funkce <strong>typewrite</strong> volaná s&nbsp;názvy kláves</h2>

<p></p>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import subprocess
import time
import pyautogui

print("Opening xev")

# otevření terminálu
p = subprocess.Popen(["xev", "-geometry", "400x400+0+0"])
assert p is not None

print("Opened")
time.sleep(5)

print("Simulating keyboard...")
pyautogui.typewrite(["a", "enter", "f1", "delete", "alt"], interval=1.0)
print("Done")

time.sleep(5)

print("Closing xev")
p.kill()
print("Closed")
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Simulace stisku kombinace kláves funkcí <strong>hotkey</strong></h2>

<p></p>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import subprocess
import time
import pyautogui

print("Opening xterm")

# otevření terminálu
p = subprocess.Popen(["xterm", "-geometry", "40x20+100+100"])
assert p is not None

print("Opened")
time.sleep(5)

print("Writing into terminal window...")
pyautogui.hotkey("shift", "a")
pyautogui.hotkey("shift", "z")
time.sleep(1)

print("Moving cursor...")
pyautogui.hotkey("ctrl", "a")
time.sleep(1)
pyautogui.hotkey("ctrl", "e")
time.sleep(1)

print("Done")

time.sleep(5)

print("Closing xterm")
p.kill()
print("Closed")
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Simulace práce s&nbsp;myší nebo s&nbsp;podobným polohovacím zařízením</h2>

<pre>
$ <strong>xinput</strong>
</pre>

<pre>
⎡ Virtual core pointer                          id=2    [master pointer  (3)]
⎜   ↳ Virtual core XTEST pointer                id=4    [slave  pointer  (2)]
⎜   ↳ SynPS/2 Synaptics TouchPad                id=12   [slave  pointer  (2)]
⎜   ↳ TPPS/2 IBM TrackPoint                     id=13   [slave  pointer  (2)]
⎜   ↳ Logitech USB Receiver Consumer Control    id=15   [slave  pointer  (2)]
⎜   ↳ Logitech USB Receiver                     id=17   [slave  pointer  (2)]
⎣ Virtual core keyboard                         id=3    [master keyboard (2)]
    ↳ Virtual core XTEST keyboard               id=5    [slave  keyboard (3)]
    ↳ Power Button                              id=6    [slave  keyboard (3)]
    ↳ Video Bus                                 id=7    [slave  keyboard (3)]
    ↳ Video Bus                                 id=8    [slave  keyboard (3)]
    ↳ Sleep Button                              id=9    [slave  keyboard (3)]
    ↳ Integrated Camera: Integrated C           id=10   [slave  keyboard (3)]
    ↳ AT Translated Set 2 keyboard              id=11   [slave  keyboard (3)]
    ↳ ThinkPad Extra Buttons                    id=14   [slave  keyboard (3)]
    ↳ Logitech USB Receiver Consumer Control    id=16   [slave  keyboard (3)]
</pre>


<p><a name="k13"></a></p>
<h2 id="k13">13. Získání základních informací o polohovacím zařízení</h2>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import pyautogui

pyautogui.mouseInfo()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. Pomocný nástroj <strong>mouseInfo</strong></h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Pomocný nástroj <strong>scrot</strong></h2>

<p>Dalším pomocným nástrojem, který může být knihovnou <i>PyAutoGUI</i> využit, je nástroj pojmenovaný <strong>scrot</strong>. Jedná se o aplikaci, která slouží pro získání screenshotů, a to buď screenshotů celé obrazovky, vybrané oblasti obrazovky, či screenshotu jednoho okna. Tento nástroj se ovládá z&nbsp;příkazové řádky a podle očekávání je k&nbsp;němu dodávána i manuálová stránka:</p>

<pre>
$ <strong>man scrot</strong>
</pre>

<pre>
scrot(1)                                                          General Commands Manual                                                          scrot(1)
&nbsp;
NAME
       scrot - Screen capture using imlib2
&nbsp;
SYNOPSIS
       scrot [options] [file]
&nbsp;
DESCRIPTION
       scrot  is  a  screen capture utility using the imlib2 library to aquire and save images.  scrot has a few options, detailed below. Specify [file] as
       the filename to save the screenshot to.  If [file] is not specified, a date-stamped file will be dropped in the current directory.
&nbsp;
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Využití knihovny <i>PyAutoGUI</i> pro testování aplikací &ndash; virtuální framebuffer</h2>

<p>V&nbsp;závěrečné části dnešního článku se ještě zmiňme o problematice testování aplikací s&nbsp;grafickým uživatelským rozhraním. Testování těchto aplikací má jednu nevýhodu &ndash; pokud testovanou aplikaci spustíme a spustíme i GUI testy, bude samotné desktopové prostředí v&nbsp;době testování nepoužitelné. Jedním z&nbsp;možných řešení je použití <i>virtuálního framebufferu</i>.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro programovací jazyk Python 3 a knihovnu <i>PyAutoGUI</i> byly uloženy do Git repositáře dostupného na adrese <a href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a> (stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý repositář, můžete namísto toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následujících tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_get_info.py</td><td>přečtení základních informací o systému</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/01_get_info.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/01_get_info.py</a></td></tr>
<tr><td> 2</td><td>02_screen_size.py</td><td>získání informací o rozměrech obrazovky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/02_screen_size.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/02_screen_size.py</a></td></tr>
<tr><td> 3</td><td>03_start_xterm.py</td><td>spuštění ovládané aplikace <strong>xterm</strong> z&nbsp;Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/03_start_xterm.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/03_start_xterm.py</a></td></tr>
<tr><td> 4</td><td>04_start_xev.py</td><td>spuštění ovládané aplikace <strong>xev</strong> z&nbsp;Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/04_start_xev.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/04_start_xev.py</a></td></tr>
<tr><td> 5</td><td>05_typewrite.py</td><td>použití funkce <strong>typewrite</strong> pro spuštění příkazu v&nbsp;terminálu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/05_typewrite.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/05_typewrite.py</a></td></tr>
<tr><td> 6</td><td>06_keyboard_keys.py</td><td>výpis symbolických jmen kláves</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/06_keyboard_keys.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/06_keyboard_keys.py</a></td></tr>
<tr><td> 7</td><td>07_key_down_up.py</td><td>simulace stisku a opětovného puštění klávesy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/07_key_down_up.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/07_key_down_up.py</a></td></tr>
<tr><td> 8</td><td>08_typewrite_key_names.py</td><td>funkce <strong>typewrite</strong> volaná s&nbsp;názvy kláves</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/08_typewrite_key_names.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/08_typewrite_key_names.py</a></td></tr>
<tr><td> 9</td><td>09_hot_keys.py</td><td>funkce <strong>hotkey</strong> simulující současný stisk více kláves</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/09_hot_keys.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/09_hot_keys.py</a></td></tr>
<tr><td>10</td><td>10_mouse_info.py</td><td>získání základních informací o polohovacím zařízení</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/10_mouse_info.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/10_mouse_info.py</a></td></tr>
<tr><td>11</td><td>11_mouse_move.py</td><td>simulace pohybu kurzoru myši</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/11_mouse_move.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/11_mouse_move.py</a></td></tr>
<tr><td>12</td><td>12_slow_mouse_move.py</td><td>zpomalený (lineární) pohyb kurzoru myši</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/12_slow_mouse_move.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyautogui/12_slow_mouse_move.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Repositář balíčku PyAutoGUI na GitHubu<br />
<a href="https://github.com/asweigart/pyautogui">https://github.com/asweigart/pyautogui</a>
</li>

<li>PyAutoGUI 0.9.52 (na PyPi)<br />
<a href="https://pypi.org/project/PyAutoGUI/">https://pypi.org/project/PyAutoGUI/</a>
</li>

<li>Dokumentace ke knihovně PyAutoGUI<br />
<a href="https://pyautogui.readthedocs.io/en/latest/">https://pyautogui.readthedocs.io/en/latest/</a>
</li>

<li>Xdotool - Keyboard<br />
<a href="https://www.linux.org/threads/xdotool-keyboard.10528/">https://www.linux.org/threads/xdotool-keyboard.10528/</a>
</li>

<li>How to Use Xdotool to Stimulate Mouse Clicks and Keystrokes in Linux<br />
<a href="https://linuxhint.com/xdotool_stimulate_mouse_clicks_and_keystrokes/">https://linuxhint.com/xdotool_stimulate_mouse_clicks_and_keystrokes/</a>
</li>

<li>xdootool.1 (manuálová stránka)<br />
<a href="http://manpages.ubuntu.com/manpages/trusty/man1/xdotool.1.html">http://manpages.ubuntu.com/manpages/trusty/man1/xdotool.1.html</a>
</li>

<li>Repositář projektu xdotool<br />
<a href="https://github.com/jordansissel/xdotool">https://github.com/jordansissel/xdotool</a>
</li>

<li>Balíček python-libxdo<br />
<a href="https://pypi.org/project/python-libxdo/">https://pypi.org/project/python-libxdo/</a>
</li>

<li>Dokumentace k&nbsp;balíčku python-libxdo<br />
<a href="https://rshk.github.io/python-libxdo/library.html">https://rshk.github.io/python-libxdo/library.html</a>
</li>


<li>How do I find the X window ID under the mouse pointer in bash?<br />
<a href="https://unix.stackexchange.com/questions/16131/how-do-i-find-the-x-window-id-under-the-mouse-pointer-in-bash">https://unix.stackexchange.com/questions/16131/how-do-i-find-the-x-window-id-under-the-mouse-pointer-in-bash</a>
</li>

<li>xwininfo (manuálová stránka)<br />
<a href="https://www.x.org/releases/X11R7.7/doc/man/man1/xwininfo.1.xhtml">https://www.x.org/releases/X11R7.7/doc/man/man1/xwininfo.1.xhtml</a>
</li>

<li>xev (manuálová stránka)<br />
<a href="http://manpages.ubuntu.com/manpages/xenial/en/man1/xev.1.html">http://manpages.ubuntu.com/manpages/xenial/en/man1/xev.1.html</a>
</li>

<li>X Window System (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X_Window_System">https://en.wikipedia.org/wiki/X_Window_System</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

