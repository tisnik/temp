<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>SymPy: knihovna pro symbolické výpočty zapsané přímo v Pythonu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>SymPy: knihovna pro symbolické výpočty zapsané přímo v Pythonu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. SymPy: knihovna pro symbolické výpočty zapsané přímo v&nbsp;Pythonu</a></p>
<p><a href="#k02">2. Čím se liší knihovna SymPy od podobně koncipovaných nástrojů</a></p>
<p><a href="#k03">3. Instalace knihovny <i>Sympy</i></a></p>
<p><a href="#k04">4. Zjednodušování konstantních výrazů</a></p>
<p><a href="#k05">5. Funkce <strong>sympy.pprint</strong> pro formátovaný výstup</a></p>
<p><a href="#k06">6. Výrazy s&nbsp;proměnnými</a></p>
<p><a href="#k07">7. Výrazy s&nbsp;větším množstvím proměnných</a></p>
<p><a href="#k08">8. Zjednodušování výrazů s&nbsp;proměnnými</a></p>
<p><a href="#k09">*** 9. Polynomy a další výrazy s&nbsp;mocninami</a></p>
<p><a href="#k10">*** 10. Úprava výrazů funkcí <strong>sympy.factor</strong> &ndash; rozklad polynomu na kořenové činitele</a></p>
<p><a href="#k11">*** 11. Úprava výrazů funkcí <strong>sympy.expand</strong> &ndash; roznásobení závorek</a></p>
<p><a href="#k12">*** 12. Nalezení kořenů kvadratické rovnice</a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. <i>SymPy</i>: knihovna pro symbolické výpočty zapsané přímo v&nbsp;Pythonu</h2>

<p></p>


<p><a name="k02"></a></p>
<h2 id="k02">2. Čím se liší knihovna <i>Sympy</i> od podobně koncipovaných nástrojů?</h2>

<p>Ve skutečnosti existuje poměrně velké množství nástrojů určených pro
manipulaci s&nbsp;matematickými výrazy, tedy pro jejich zjednodušení, rozklad
polynomů na kořenové činitele, výpočet kořenů polynomů, symbolický výpočet
limit, derivací, integrací atd. Některé z&nbsp;těchto nástrojů jsou vypsány
v&nbsp;následující tabulce (zdrojem je v&nbsp;tomto případě tabulka získaná ze
stránky <a
href="https://en.wikipedia.org/wiki/List_of_computer_algebra_systems#General">https://en.wikipedia.org/wiki/List_of_computer_algebra_systems#General</a>):</p>

<table>
<tr><th>Produkt</th></tr>
<tr><td>Axiom</td></tr>
<tr><td>Cadabra</td></tr>
<tr><td>CoCoA</td></tr>
<tr><td>Derive</td></tr>
<tr><td>Erable</td></tr>
<tr><td>Fermat</td></tr>
<tr><td>FORM</td></tr>
<tr><td>FriCAS</td></tr>
<tr><td>GAP</td></tr>
<tr><td>GiNaC</td></tr>
<tr><td>KANT/KASH</td></tr>
<tr><td>LiveMath</td></tr>
<tr><td>Macaulay2</td></tr>
<tr><td>Macsyma</td></tr>
<tr><td>Magma</td></tr>
<tr><td>Magnus</td></tr>
<tr><td>Maple</td></tr>
<tr><td>Mathcad</td></tr>
<tr><td>Mathematica</td></tr>
<tr><td>Mathics</td></tr>
<tr><td>Mathomatic</td></tr>
<tr><td>Maxima</td></tr>
<tr><td>MuMATH</td></tr>
<tr><td>MuPAD</td></tr>
<tr><td>OpenAxiom</td></tr>
<tr><td>PARI/GP</td></tr>
<tr><td>Reduce</td></tr>
<tr><td>Scilab</td></tr>
<tr><td>SageMath</td></tr>
<tr><td>SINGULAR</td></tr>
<tr><td>SMath</td></tr>
<tr><td>Symbolic</td></tr>
<tr><td>Symbolic (ovšem odlišný produkt)</td></tr>
<tr><td>SICMUtils</td></tr>
<tr><td>SymPy</td></tr>
<tr><td>TI-Nspire CAS</td></tr>
<tr><td>Wolfram Alpha</td></tr>
<tr><td>Xcas/Giac</td></tr>
<tr><td>Yacas</td></tr>
</table>

<p>Ovšem knihovna <i>SymPy</i> se od mnoha těchto nástrojů odlišuje
v&nbsp;jednom zajímavém bodě. Mnoho ostatních nástrojů je založeno na doménově
specifickém jazyce, což znamená, že se uživatel musí učit další (novou) syntaxi
a sémantiku. V&nbsp;tomto ohledu je tedy zpracování matematických výrazů
relativně izolováno. Naproti tomu se v&nbsp;<i>SymPy</i> výrazy zapisují přímo
v&nbsp;Pythonu, což je pro uživatele znalého alespoň základů tohoto jazyka
mnohdy mnohem jednodušší. Navíc je tak umožněna velmi dobrá integrace
s&nbsp;dalšími nástroji, například s&nbsp;Jupyter Notebookem.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace knihovny <i>Sympy</i></h2>

<p>Knihovna <i>Sympy</i> je nabízena přes <a
href="https://pypi.org/project/sympy">PyPi</a>, takže její instalace by měla
být jednoduchá a přímočará. Knihovnu nainstalujeme pro aktuálně přihlášeného
uživatele následujícím způsobem:</p>

<pre>
$ <strong>pip3 install --user sympy</strong>
&nbsp;
Collecting sympy
  Downloading sympy-1.10.1-py3-none-any.whl (6.4 MB)
     |████████████████████████████████| 6.4 MB 2.0 MB/s 
Collecting mpmath&gt;=0.19
  Downloading mpmath-1.2.1-py3-none-any.whl (532 kB)
     |████████████████████████████████| 532 kB 36.8 MB/s 
Installing collected packages: mpmath, sympy
Successfully installed mpmath-1.2.1 sympy-1.10.1
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že jedinou závislostí je
knihovna <i>mpmath</i>, s&nbsp;níž se ještě na stránkách Roota
setkáme.</div></p>

<p>Základní kontrolu instalace provedeme jednoduše &ndash; přímo
v&nbsp;interpretru Pythonu:</p>

<pre>
$ <strong>python</strong>
&nbsp;
Python 3.9.12 (main, Mar 25 2022, 00:00:00) 
[GCC 11.2.1 20220127 (Red Hat 11.2.1-9)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</pre>

<p>Test, zda je možné naimportovat balíček <strong>sympy</strong> a zobrazit
k&nbsp;němu nápovědu:</p>

<pre>
&gt;&gt;&gt; <strong>import sympy</strong>
&gt;&gt;&gt; <strong>help(sympy)</strong>
&nbsp;
Help on package sympy:
&nbsp;
NAME
    sympy
&nbsp;
DESCRIPTION
    SymPy is a Python library for symbolic mathematics. It aims to become a
    full-featured computer algebra system (CAS) while keeping the code as simple
    as possible in order to be comprehensible and easily extensible.  SymPy is
    written entirely in Python. It depends on mpmath, and other external libraries
    may be optionally for things like plotting support.
&nbsp;
    See the webpage for more information and documentation:
&nbsp;
        https://sympy.org
&nbsp;
PACKAGE CONTENTS
    abc
    algebras (package)
    assumptions (package)
    benchmarks (package)
    calculus (package)
    categories (package)
    ...
    ...
    ...
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Zjednodušování konstantních výrazů</h2>

<p>Po (doufejme, že úspěšné) instalaci knihovny <i>Sympy</i> si postupně
ukážeme některé její zajímavé a taktéž užitečné vlastnosti. Tato knihovna
nabízí definice mnoha matematických funkcí (s&nbsp;mnoha z&nbsp;nich se setkáme
později), které jsou při předání konstant automaticky vyhodnoceny, což asi není
nic překvapivého. Zajímavé ovšem je, že dojde i ke zjednodušení výsledků
výpočtů tak, aby byly co nejvíce čitelné. Ostatně podívejme se na příklad
výpočtu druhé odmocniny pro vstupy od 0 do 9:</p>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
for i in range(0, 10):
    print(i, <strong>sp.sqrt(i)</strong>)
</pre>

<p>Výsledkem bude v&nbsp;některých případech odpověď typu &bdquo;odmocnina
z&nbsp;hodnoty x&ldquo;, ovšem pokud je možné odmocninu vypočítat a výsledkem
bude celé číslo, je vráceno toto číslo. Popř.&nbsp;je dokonce v&nbsp;případě
odmocniny z&nbsp;osmi vrácen součin celočíselné konstanty a
&bdquo;kratší&ldquo; odmocniny:</p>

<pre>
0 0
1 1
2 sqrt(2)
3 sqrt(3)
4 2
5 sqrt(5)
6 sqrt(6)
7 sqrt(7)
8 2*sqrt(2)
9 3
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy01.py</a>.</div></p>

<p>To ovšem není vše, protože se zkrácení týká i složitějších výrazů, zde
konkrétně součet odmocniny s&nbsp;celým číslem:</p>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
for i in range(0, 10):
    print(i, <strong>sp.sqrt(i)</strong> + 5)
</pre>

<pre>
0 5
1 6
2 sqrt(2) + 5
3 sqrt(3) + 5
4 7
5 sqrt(5) + 5
6 sqrt(6) + 5
7 sqrt(7) + 5
8 2*sqrt(2) + 5
9 8
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy02.py</a>.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Funkce <strong>sympy.pprint</strong> pro formátovaný výstup</h2>

<p>Výše uvedená dvojice příkladů používala pro vytištění matematických výrazů
přímo standardní funkci <strong>print</strong>, která výraz vytiskne na jediném
řádku. Ovšem typické matematické výrazy jsou &bdquo;dvourozměrné&ldquo;, navíc
s&nbsp;množstvím speciálních symbolů. Knihovna <i>Sympy</i> podporuje kvalitní
výstup přes TeX, který lze přímo použít v&nbsp;článcích atd. Ovšem i při tisku
na běžný terminál dokáže do jisté míry napodobit klasický matematický způsob
zápisu. Pro tento účel se používá funkce <strong>pprint</strong> neboli
&bdquo;pretty print&ldquo;:</p>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
for i in range(0, 10):
    print(i, end = "   ")
    <strong>sp.pprint(sp.sqrt(i))</strong>
</pre>

<p>Takto upravený první demonstrační příklad nyní provede výtisk stejných
zjednodušených výrazů, ovšem v&nbsp;čitelnější podobě. Předpokládá se použití
terminálu s&nbsp;podporou Unicode:</p>

<pre>
0   0
1   1
2   √2
3   √3
4   2
5   √5
6   √6
7   √7
8   2⋅√2
9   3
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy03.py</a>.</div></p>

<p>Podobně tomu bude v&nbsp;případě úpravy druhého příkladu s&nbsp;poněkud
složitějším výrazem s&nbsp;odmocninou a součtem:</p>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
for i in range(0, 10):
    print(i, end = "   ")
    <strong>sp.pprint(sp.sqrt(i) + 5)</strong>
</pre>

<p>S&nbsp;následujícím výsledkem:</p>

<pre>
0   5
1   6
2   √2 + 5
3   √3 + 5
4   7
5   √5 + 5
6   √6 + 5
7   √7 + 5
8   2⋅√2 + 5
9   8
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy04.py</a>.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Výrazy s&nbsp;proměnnými</h2>

<p>Velká síla knihovny <i>Sympy</i> spočívá v&nbsp;její schopnosti manipulace
s&nbsp;výrazy, v&nbsp;nichž jsou použity proměnné. Tyto výrazy se přitom mohou
zapsat přímo v&nbsp;Pythonu &ndash; není nutné je zapisovat do řetězců či
použít nějaký speciální DSL (doménově specifický jazyk). Je zde pouze jediný (a
to zcela pochopitelný) háček: nejdříve je totiž nutné každou proměnnou
zkonstruovat jako objekt typu &bdquo;symbol&ldquo;. Provádí se to následujícím
způsobem:</p>

<pre>
x = <strong>sp.symbols('x')</strong>
</pre>

<p>Po provedení předchozího příkazu je vytvořena nová proměnná
<strong>x</strong>, která je ve skutečnosti objektem následujícího typu:</p>

<pre>
&gt;&gt;&gt; <strong>type(x)</strong>
&lt;class 'sympy.core.symbol.Symbol'&gt;
</pre>

<p>To je důležité, protože v&nbsp;Pythonu je možné pro objekty (instance nějaké
konkrétní třídy) přetížit všechny operátory a umožnit tak zápis výrazů, které
již nebudou přímo vyhodnoceny interpretrem (jakoby se například jednalo o
součet celých čísel či spojení řetězců), ale knihovnou <i>Sympy</i>. Podívejme
se na jednoduchý příklad, v&nbsp;němž je vytvořena nová hodnota typu
&bdquo;výraz&ldquo;:</p>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
x = <strong>sp.symbols('x')</strong>
expression = 2*x + 1
print(expression)
</pre>

<p>Výsledek je vypsán jako výraz:</p>

<pre>
2*x + 1
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy05.py</a>.</div></p>

<p>Nepatrnou úpravou dosáhneme &bdquo;matematického&ldquo; stylu výpisu, což u
takto jednoduchého výrazu pouze znamená náhradu hvězdičky za symbol
součinu:</p>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
x = <strong>sp.symbols('x')</strong>
expression = 2*x + 1
<strong>sp.pprint(expression)</strong>
</pre>

<p>Výsledek:</p>

<pre>
2⋅x + 1
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy06.py</a>.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Výrazy s&nbsp;větším množstvím proměnných</h2>

<p>V&nbsp;praxi se pochopitelně setkáme spíše s&nbsp;výrazy, v&nbsp;nichž je
použito větší množství proměnných, nikoli proměnná jediná. Všechny tyto
proměnné je nejprve nutné zkonstruovat nám již známou funkcí
<strong>sympy.symbols</strong>. Aby nebylo nutné každou proměnnou konstruovat
zvlášť, podporuje funkce <strong>sympy.symbols</strong> předání řetězce
s&nbsp;větším množstvím proměnných. Potom se vrátí stejné množství
zkonstruovaných objektů.</p>

<p>Příklad konstrukce tří proměnných a jejich použití ve výrazu, který tyto
proměnné používá:</p>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
x,y,z = <strong>sp.symbols('x,y,z')</strong>
expression = 2*x + 3*y - 1/z
print(expression)
</pre>

<p>Tento příklad provedl standardní &bdquo;terminálový&ldquo; výstup
s&nbsp;výrazem zapsaným na jediném řádku:</p>

<pre>
2*x + 3*y - 1/z
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy07.py</a>.</div></p>

<p>Podobně si ovšem můžeme vynutit výstup v&nbsp;matematické notaci; postačuje
použít nám již známou funkci <strong>sympy.pprint</strong>:</p>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
x,y,z = <strong>sp.symbols('x,y,z')</strong>
expression = 2*x + 3*y - 1/z
<strong>sp.pprint(expression)</strong>
</pre>

<p>Nyní bude výsledek přece jen více odpovídat matematické notaci, pochopitelně
s&nbsp;ohledem na omezení terminálu:</p>

<pre>
            1
2⋅x + 3⋅y - ─
            z
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy08.py</a>.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Zjednodušování výrazů s&nbsp;proměnnými</h2>

<p>Knihovna <i>Sympy</i> dokáže zjednodušit i výrazy s&nbsp;proměnnou či
dokonce s&nbsp;větším množstvím proměnných. Pokud prozatím zůstaneme u
jednoduchých výrazů s&nbsp;lineárními členy, může zjednodušení výrazu
s&nbsp;jedinou proměnnou vypadat takto:</p>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
x = <strong>sp.symbols('x')</strong>
expression = 2*x + 1 + 3*x + 10
sp.pprint(expression)
</pre>

<p>Výsledek:</p>

<pre>
5⋅x + 11
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy09.py</a>.</div></p>

<p>Pochopitelně si můžeme otestovat i výrazy s&nbsp;více proměnnými. A aby to
nebylo tak jednoduché, použijeme zde zlomky:</p>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
x,y,z = sp.symbols('x,y,z')
expression = 2*x + 3*y + 3*x + y + 1/z + 3/z
sp.pprint(expression)
</pre>

<p>Výsledek nyní bude vypadat následovně:</p>

<pre>
            4
5⋅x + 4⋅y + ─
            z
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy10.py</a>.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Polynomy a další výrazy s&nbsp;mocninami</h2>

<p></p>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
x = sp.symbols('x')
expression = x**2 - y**2
sp.pprint(expression)
</pre>

<pre>
  File "/root/Python-3.10.2/sympy06.py", line 4, in <module>
    expression = x**2 - y**2
NameError: name 'y' is not defined
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy11.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy11.py</a>.</div></p>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
x,y = sp.symbols('x,y')
expression = x**2 - y**2
sp.pprint(expression)
</pre>

<pre>
 2    2
x  - y
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy12.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy12.py</a>.</div></p>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
x = sp.symbols('x')
expression = x**1/1 + x**3/3 + x**5/5 + 2**(x/2+1)
sp.pprint(expression)
</pre>

<pre>
 x                  
 ─ + 1    5    3    
 2       x    x     
2      + ── + ── + x
         5    3     
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy13.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy13.py</a>.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Úprava výrazů funkcí <strong>sympy.factor</strong> &ndash; rozklad polynomu na kořenové činitele</h2>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
x,y = sp.symbols('x,y')
expression = sp.factor(x**2 - y ** 2)
sp.pprint(expression)
</pre>

<pre>
(x - y)⋅(x + y)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy14.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy14.py</a>.</div></p>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
x = sp.symbols('x')
expression = sp.factor(x**2 - 2*x + 1)
</pre>

<pre>
       2
(x - 1) 
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy15.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy15.py</a>.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Úprava výrazů funkcí <strong>sympy.expand</strong> &ndash; roznásobení závorek</h2>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
x,y = sp.symbols('x,y')
expression = sp.expand((x-y) * (x+y))
sp.pprint(expression)
</pre>

<pre>
 2    2
x  - y
</pre>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
x,y = sp.symbols('x,y')
expression = sp.expand((x+y) * (x+y))
sp.pprint(expression)
</pre>

<pre>
 2            2
x  + 2⋅x⋅y + y
</pre>

<pre>
import <strong>sympy</strong> as <strong>sp</strong>
&nbsp;
x,y,z = sp.symbols('x,y,z')
expression = sp.expand((x-y) * (x+y) * (x+z) * (y-z))
sp.pprint(expression)
</pre>

<pre>
 3      3      2        2  2      3      2      3      2  2
x ⋅y - x ⋅z + x ⋅y⋅z - x ⋅z  - x⋅y  + x⋅y ⋅z - y ⋅z + y ⋅z 
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Nalezení kořenů kvadratické rovnice</h2>

<pre>
Help on function solve in module sympy.solvers.solvers:

solve(f, *symbols, **flags)
    Algebraically solves equations and systems of equations.
    
    Explanation
    ===========
    
    Currently supported:
        - polynomial
        - transcendental
        - piecewise combinations of the above
        - systems of linear and polynomial equations
        - systems containing relational expressions
</pre>

<pre>
from sympy import solve, symbols, pprint

a, b, c, x = symbols('a,b,c,x')

f = a*x**2 + b*x + c

pprint(f)

solution = solve(f, x)
pprint(solution)
</pre>

<pre>
   2          
a⋅x  + b⋅x + c
⎡        _____________          _____________⎤
⎢       ╱           2          ╱           2 ⎥
⎢-b - ╲╱  -4⋅a⋅c + b    -b + ╲╱  -4⋅a⋅c + b  ⎥
⎢─────────────────────, ─────────────────────⎥
⎣         2⋅a                    2⋅a         ⎦
</pre>

<pre>
from sympy import solve, symbols, pprint, init_printing

init_printing(use_unicode=False)

a, b, c, x = symbols('a,b,c,x')

f = a*x**2 + b*x + c

pprint(f)

solution = solve(f, x)
pprint(solution)
</pre>

<pre>
   2          
a*x  + b*x + c
         _____________          _____________ 
        /           2          /           2  
 -b - \/  -4*a*c + b    -b + \/  -4*a*c + b   
[---------------------, ---------------------]
          2*a                    2*a          
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
from sympy import solve, symbols, pprint

a, b, c, d, e, x, y = symbols('a,b,c,d,e,x,y')

f = a*x**2 + b*x + c*y**2 + d*y + e

pprint(f)

solution = solve(f, x)
pprint(solution)

solution = solve(f, y)
pprint(solution)
</pre>

<pre>
   2            2          
a⋅x  + b⋅x + c⋅y  + d⋅y + e

⎡        ___________________________________          ___________________________________⎤
⎢       ╱          2                      2          ╱          2                      2 ⎥
⎢-b - ╲╱  - 4⋅a⋅c⋅y  - 4⋅a⋅d⋅y - 4⋅a⋅e + b    -b + ╲╱  - 4⋅a⋅c⋅y  - 4⋅a⋅d⋅y - 4⋅a⋅e + b  ⎥
⎢───────────────────────────────────────────, ───────────────────────────────────────────⎥
⎣                    2⋅a                                          2⋅a                    ⎦

⎡        ___________________________________          ___________________________________⎤
⎢       ╱          2                      2          ╱          2                      2 ⎥
⎢-d - ╲╱  - 4⋅a⋅c⋅x  - 4⋅b⋅c⋅x - 4⋅c⋅e + d    -d + ╲╱  - 4⋅a⋅c⋅x  - 4⋅b⋅c⋅x - 4⋅c⋅e + d  ⎥
⎢───────────────────────────────────────────, ───────────────────────────────────────────⎥
⎣                    2⋅c                                          2⋅c                    ⎦
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
Help on function diff in module sympy.core.function:

diff(f, *symbols, **kwargs)
    Differentiate f with respect to symbols.
    
    Explanation
    ===========
    
    This is just a wrapper to unify .diff() and the Derivative class; its
    interface is similar to that of integrate().  You can use the same
    shortcuts for multiple variables as with Derivative.  For example,
    diff(f(x), x, x, x) and diff(f(x), x, 3) both return the third derivative
    of f(x).
    
    You can pass evaluate=False to get an unevaluated Derivative class.  Note
    that if there are 0 symbols (such as diff(f(x), x, 0), then the result will
    be the function (the zeroth derivative), even if evaluate=False.
</pre>

<pre>
from sympy import diff, symbols, pprint

a, b, c, d, e, x, y = symbols('a,b,c,d,e,x,y')

f = a*x**2 + b*x + c*y**2 + d*y + e

pprint(f)

diff1 = diff(f, x)
pprint(diff1)

diff2 = diff(f, y)
pprint(diff2)
</pre>

<pre>
   2            2          
a⋅x  + b⋅x + c⋅y  + d⋅y + e

2⋅a⋅x + b

2⋅c⋅y + d
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
from sympy import *

a, b, c, d, e, x, y = symbols('a,b,c,d,e,x,y')

f = a*sin(x**2) / b*cos(y**2) + c*sqrt(x+y*d) + e

pprint(f)

diff1 = diff(f, x)
pprint(diff1)

diff2 = diff(f, y)
pprint(diff2)
</pre>

<pre>
     ⎛ 2⎞    ⎛ 2⎞                    
a⋅sin⎝x ⎠⋅cos⎝y ⎠       _________    
───────────────── + c⋅╲╱ d⋅y + x  + e
        b                            

         ⎛ 2⎞    ⎛ 2⎞                
2⋅a⋅x⋅cos⎝x ⎠⋅cos⎝y ⎠         c      
───────────────────── + ─────────────
          b                 _________
                        2⋅╲╱ d⋅y + x 

           ⎛ 2⎞    ⎛ 2⎞                
  2⋅a⋅y⋅sin⎝x ⎠⋅sin⎝y ⎠        c⋅d     
- ───────────────────── + ─────────────
            b                 _________
                          2⋅╲╱ d⋅y + x 
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
Help on function integrate in module sympy.integrals.integrals:

integrate(*args, meijerg=None, conds='piecewise', risch=None, heurisch=None, manual=None, **kwargs)
    integrate(f, var, ...)
    
    .. deprecated:: 1.6
    
       Using ``integrate()`` with :class:`~.Poly` is deprecated. Use
       :meth:`.Poly.integrate` instead. See :ref:`deprecated-integrate-poly`.
    
    Explanation
    ===========
    
    Compute definite or indefinite integral of one or more variables
    using Risch-Norman algorithm and table lookup. This procedure is
    able to handle elementary algebraic and transcendental functions
    and also a huge class of special functions, including Airy,
    Bessel, Whittaker and Lambert.
    
    var can be:
    
    - a symbol                   -- indefinite integration
    - a tuple (symbol, a)        -- indefinite integration with result
                                    given with ``a`` replacing ``symbol``
    - a tuple (symbol, a, b)     -- definite integration
    
    Several variables can be specified, in which case the result is
    multiple integration. (If var is omitted and the integrand is
    univariate, the indefinite integral in that variable will be performed.)
    
    Indefinite integrals are returned without terms that are independent
    of the integration variables. (see examples)
    
    Definite improper integrals often entail delicate convergence
    conditions. Pass conds='piecewise', 'separate' or 'none' to have
    these returned, respectively, as a Piecewise function, as a separate
    result (i.e. result will be a tuple), or not at all (default is
    'piecewise').
    
    **Strategy**
</pre>

<pre>
from sympy import integrate, symbols, pprint

a, b, x = symbols('a,b,x')

f = a*x + b

pprint(f)

solution = integrate(f, x)
pprint(solution)
</pre>

<pre>
a⋅x + b
   2      
&nbsp;
a⋅x       
──── + b⋅x
 2        
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>

<pre>
from sympy import integrate, symbols, pprint

a, b, c, d, e, x, y = symbols('a,b,c,d,e,x,y')

f = a*x**2 + b*x + c*y**2 + d*y + e

pprint(f)

solution = integrate(f, x)
pprint(solution)

solution = integrate(f, y)
pprint(solution)
</pre>

<pre>
   2            2          
a⋅x  + b⋅x + c⋅y  + d⋅y + e
&nbsp;
   3      2                     
a⋅x    b⋅x      ⎛   2          ⎞
──── + ──── + x⋅⎝c⋅y  + d⋅y + e⎠
 3      2                       
&nbsp;
   3      2                     
c⋅y    d⋅y      ⎛   2          ⎞
──── + ──── + y⋅⎝a⋅x  + b⋅x + e⎠
 3      2                       
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 byly uloženy do Git repositáře dostupného na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>sympy01.py</td><td>zjednodušování konstantního výrazu s&nbsp;odmocninou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy01.py</a></td></tr>
<tr><td> 2</td><td>sympy02.py</td><td>zjednodušování konstantních výrazů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy02.py</a></td></tr>
<tr><td> 3</td><td>sympy03.py</td><td>čitelný výpis výrazů funkcí <strong>sympy.pprint</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy03.py</a></td></tr>
<tr><td> 4</td><td>sympy04.py</td><td>čitelný výpis výrazů funkcí <strong>sympy.pprint</strong>, složitější výsledky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy04.py</a></td></tr>
<tr><td> 5</td><td>sympy05.py</td><td>deklarace a &bdquo;terminálový&ldquo; výpis jednoduchého výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy05.py</a></td></tr>
<tr><td> 6</td><td>sympy06.py</td><td>deklarace a &bdquo;matematický&ldquo; výpis jednoduchého výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy06.py</a></td></tr>
<tr><td> 7</td><td>sympy07.py</td><td>výraz s&nbsp;větším množstvím proměnných (zlomek)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy07.py</a></td></tr>
<tr><td> 8</td><td>sympy08.py</td><td>výraz s&nbsp;větším množstvím proměnných (zlomek)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy08.py</a></td></tr>
<tr><td> 9</td><td>sympy09.py</td><td>zjednodušení výrazu s&nbsp;jedinou proměnnou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy09.py</a></td></tr>
<tr><td>10</td><td>sympy10.py</td><td>zjednodušení výrazu se třemi proměnnými a se zlomky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy10.py</a></td></tr>
<tr><td>11</td><td>sympy11.py</td><td>pokus o použití nedefinované proměnné</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy11.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy11.py</a></td></tr>
<tr><td>12</td><td>sympy12.py</td><td>výraz x<sup>2</sup>-y<sup>2</sup></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy12.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy12.py</a></td></tr>
<tr><td>13</td><td>sympy13.py</td><td>složitější výraz s&nbsp;několika členy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy13.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy13.py</a></td></tr>
<tr><td>14</td><td>sympy14.py</td><td>faktorizace výrazu x<sup>2</sup>-y<sup>2</sup></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy14.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy14.py</a></td></tr>
<tr><td>15</td><td>sympy15.py</td><td>faktorizace výrazu x<sup>2</sup>-2x + 1</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy15.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy15.py</a></td></tr>
<tr><td>16</td><td>sympy16.py</td><td>expanze výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy16.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy16.py</a></td></tr>
<tr><td>17</td><td>sympy17.py</td><td>expanze (roznásobení závorek) složitějšího výrazu se dvěma proměnnými</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy17.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy17.py</a></td></tr>
<tr><td>18</td><td>sympy18.py</td><td>expanze (roznásobení závorek) složitějšího výrazu se třemi proměnnými</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy18.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy18.py</a></td></tr>
<tr><td>19</td><td>sympy19.py</td><td>řešení kvadratické rovnice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy19.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy19.py</a></td></tr>
<tr><td>20</td><td>sympy20.py</td><td>řešení kvadratické rovnice, odlišná forma výstupu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy20.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy20.py</a></td></tr>
<tr><td>21</td><td>sympy21.py</td><td>řešení kvadratické rovnice se dvěma neznámými</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy21.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy21.py</a></td></tr>
<tr><td>22</td><td>sympy22.py</td><td>výpočet derivace polynomu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy22.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy22.py</a></td></tr>
<tr><td>23</td><td>sympy23.py</td><td>výpočet derivace složitějšího výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy23.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy23.py</a></td></tr>
<tr><td>24</td><td>sympy24.py</td><td>výpočet integrace polynomu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy24.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy24.py</a></td></tr>
<tr><td>25</td><td>sympy25.py</td><td>výpočet integrace složitějšího polynomu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy25.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/sympy25.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>SymPy<br />
<a href="https://www.sympy.org/en/index.html">https://www.sympy.org/en/index.html</a>
</li>

<li>SymPy na PyPi<br />
<a href="https://pypi.org/project/sympy/">https://pypi.org/project/sympy/</a>
</li>

<li>mpmath<br />
<a href="https://mpmath.org/">https://mpmath.org/</a>
</li>

<li>mpmath na PyPi<br />
<a href="https://pypi.org/project/mpmath/">https://pypi.org/project/mpmath/</a>
</li>

<li>Symbolic Maths in Python<br />
<a href="https://alexandrugris.github.io/maths/2017/04/30/symbolic-maths-python.html">https://alexandrugris.github.io/maths/2017/04/30/symbolic-maths-python.html</a>
</li>

<li>SymPy shell<br />
<a href="https://live.sympy.org/">https://live.sympy.org/</a>
</li>

<li>Symbolic programming<br />
<a href="https://en.wikipedia.org/wiki/Symbolic_programming">https://en.wikipedia.org/wiki/Symbolic_programming</a>
</li>

<li>Symbolic language (programming)<br />
<a href="https://en.wikipedia.org/wiki/Symbolic_language_(programming)">https://en.wikipedia.org/wiki/Symbolic_language_(programming)</a>
</li>

<li>Computer algebra<br />
<a href="https://en.wikipedia.org/wiki/Computer_algebra">https://en.wikipedia.org/wiki/Computer_algebra</a>
</li>

<li>Common Lisp: A Gentle Introduction to Symbolic Computation<br />
<a href="https://www.cs.cmu.edu/~dst/LispBook/">https://www.cs.cmu.edu/~dst/LispBook/</a>
</li>

<li>List of computer algebra systems<br />
<a href="https://en.wikipedia.org/wiki/List_of_computer_algebra_systems">https://en.wikipedia.org/wiki/List_of_computer_algebra_systems</a>
</li>

<li>Polynom<br />
<a href="https://cs.wikipedia.org/wiki/Polynom">https://cs.wikipedia.org/wiki/Polynom</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

