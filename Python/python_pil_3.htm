<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Digitální zpracování obrazu v knihovně Pillow</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Digitální zpracování obrazu v knihovně Pillow</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dnešní článek o knihovně Pillow bude poněkud delší, a to z&nbsp;toho důvodu, že si v&nbsp;něm na osmnácti demonstračních příkladech popíšeme některé možnosti této knihovny při digitálním zpracování obrazu. Popíšeme si dva moduly, které se v&nbsp;této oblasti používají. První modul, který se jmenuje <strong>ImageMath</strong>, provádí operace nad korespondujícími pixely dvou obrázků. Druhý modul pojmenovaný <strong>ImageMorph</strong> je mnohem komplexnější, protože umožňuje aplikaci složitějších morfologických operací, například operace dilate a erode.</p><!--more-->



<h2>Obsah</h2>

<p><a href="#k01">1. Digitální zpracování obrazu v&nbsp;knihovně Pillow</a></p>
<p><a href="#k02">*** 2. Možnosti nabízené modulem <strong>ImageMath</strong></a></p>
<p><a href="#k03">*** 3. První demonstrační příklad &ndash; příprava vstupního obrázku a maskovacího obrázku ve stupních šedi</a></p>
<p><a href="#k04">*** 4. Nalezení minimálních a maximálních hodnot korespondujících pixelů</a></p>
<p><a href="#k05">*** 5. Součet a rozdíl korespondujících pixelů</a></p>
<p><a href="#k06">*** 6. Vynásobení pixelů, zprůměrování dvou rastrových obrázků</a></p>
<p><a href="#k07">*** 7. Bitové operace AND, OR a XOR</a></p>
<p><a href="#k08">*** 8. Negace všech pixelů</a></p>
<p><a href="#k09">*** 9. Pokročilejší zpracování obrazu s&nbsp;modulem <strong>ImageMorph</strong></a></p>
<p><a href="#k10">*** 10. Příprava na použití modulu <strong>ImageMorph</strong></a></p>
<p><a href="#k11">*** 11. Převod na obrázek s&nbsp;černými a bílými pixely</a></p>
<p><a href="#k12">*** 12. Negace čistě černobílého obrázku</a></p>
<p><a href="#k13">*** 13. Jednoduchá detekce hran</a></p>
<p><a href="#k14">*** 14. Detekce hran a interních &bdquo;ostrovů&ldquo;</a></p>
<p><a href="#k15">*** 15. Operace dilatace (binární morfologie)</a></p>
<p><a href="#k16">*** 16. Druhá varianta příkladu pro dilataci</a></p>
<p><a href="#k17">*** 17. Operace eroze (binární morfologie)</a></p>
<p><a href="#k18">*** 18. Druhá varianta příkladu pro erozi</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Digitální zpracování obrazu v&nbsp;knihovně Pillow</h2>

<p>Kromě základních operací s&nbsp;rastrovými obrázky (načtení, uložení, konverze, ořezání, vykreslení základních geometrických 2D tvarů), které jsme si již popsali v&nbsp;předchozích dvou článcích [<a href="https://mojefedora.cz/uzitecne-knihovny-a-moduly-pro-python-knihovna-pillow-urcena-pro-manipulaci-s-rastrovymi-obrazky/">1</a>] [<a href="https://mojefedora.cz/uzitecne-knihovny-a-moduly-pro-python-kresleni-a-pokrocile-manipulace-s-obrazky-v-knihovne-pillow/">2</a>] obsahuje knihovna Pillow i moduly se třídami a metodami určenými pro digitální zpracování obrazu. Jedná se především o modul nazvaný <strong>ImageMath</strong> obsahující operace prováděné typicky mezi dvojicí obrázků (součet, rozdíl atd.). S&nbsp;tímto modulem se seznámíme v&nbsp;kapitolách <a href="#k02">2</a> až <a href="#k08">8</a>.</p>

<p>V&nbsp;knihovně Pillow dále nalezneme i některé operace <i>binární morfologie</i>. Jedná se o specifické filtry prováděné nad bitmapami, ovšem slovo &bdquo;bitmapa&ldquo; zde musíme chápat v&nbsp;původním významu &bdquo;rastrový obrázek, v&nbsp;němž je hodnota každého pixelu reprezentovaná jediným bitem&ldquo;. Většina operací binární morfologie se používá při rozpoznávání tvarů či objektů v&nbsp;obrázcích (<i>morphological image processing</i>). Typické je použití těchto operací v&nbsp;OCR (<i>Optical Character Recognition</i>); jednou z&nbsp;těchto operací je vytvoření kostry (<i>skeleton</i>) znaku, který má být následně rozpoznán. Ovšem například dilataci a erozi lze (při vhodné aplikaci) použít pro zvýraznění hran v&nbsp;původním černobílém či plnobarevném obrázku atd. S&nbsp;těmito operacemi se seznámíme v&nbsp;kapitolách <a href="#k09">9</a> až <a href="#k18">18</a>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Možnosti nabízené modulem <strong>ImageMath</strong></h2>

<p></p>

<table>
<tr><th>Operace</th><th>Význam</th><th>Ukázkový příklad</th></tr>
<tr><td>min</td><td></td><td><a href="#k04">4</a></td></tr>
<tr><td>max</td><td></td><td><a href="#k04">4</a></td></tr>
<tr><td>abs</td><td></td><td>&nbsp;</td></tr>
<tr><td>+</td><td></td><td><a href="#k05">5</a></td></tr>
<tr><td>-</td><td></td><td><a href="#k05">5</a></td></tr>
<tr><td>*</td><td></td><td><a href="#k06">6</a></td></tr>
<tr><td>%</td><td></td><td><a href="#k06">6</a></td></tr>
<tr><td>-</td><td></td><td>&nbsp;</td></tr>
<tr><td>%</td><td></td><td>&nbsp;</td></tr>
<tr><td>**</td><td></td><td>&nbsp;</td></tr>
<tr><td>&amp;</td><td></td><td><a href="#k07">7</a></td></tr>
<tr><td>|</td><td></td><td><a href="#k07">7</a></td></tr>
<tr><td>^</td><td></td><td><a href="#k07">7</a></td></tr>
<tr><td>~</td><td></td><td><a href="#k08">8</a></td></tr>
<tr><td>convert</td><td></td><td>&nbsp;</td></tr>
<tr><td>float</td><td></td><td>&nbsp;</td></tr>
<tr><td>int</td><td></td><td>&nbsp;</td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad &ndash; příprava vstupního obrázku a maskovacího obrázku ve stupních šedi</h2>

*** image ***
<p><i>Obrázek 1: </i></p>

<pre><code>
original_image = Image.open(filename)
original_image.load()

grayscale_image = ImageMath.eval("convert(src, 'L')", src=original_image)
</pre></code>

*** image ***
<p><i>Obrázek 2: </i></p>

<pre><code>
def create_second_image(width, height):
    second_image = Image.new("L", (width, height))

    # objekt umožňující kreslení do obrázku
    draw = ImageDraw.Draw(second_image)

    # vykreslení čtverců
    for y in range(0, height, 32):
        for x in range(0, width, 32):
            draw.rectangle((x+0, y+0, x+29, y+29), outline=255, fill=x//4 + y//4)

    del draw
    return second_image
</pre></code>

*** image ***
<p><i>Obrázek 3: </i></p>

<pre><code>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

from PIL import Image
from PIL import ImageDraw
from PIL import ImageMath

filename = "Lenna.png"


def create_second_image(width, height):
    second_image = Image.new("L", (width, height))

    # objekt umožňující kreslení do obrázku
    draw = ImageDraw.Draw(second_image)

    # vykreslení čtverců
    for y in range(0, height, 32):
        for x in range(0, width, 32):
            draw.rectangle((x+0, y+0, x+29, y+29), outline=255, fill=x//4 + y//4)

    del draw
    return second_image


try:
    # načtení originálního obrázku Leny
    original_image = Image.open(filename)
    original_image.load()

    # převod na úrovně šedi
    grayscale_image = ImageMath.eval("convert(src, 'L')", src=original_image)

    # vytvoření druhého obrázku s maskou
    second_image = create_second_image(512, 512)

    # zobrazení všech tří obrázků
    original_image.show()
    grayscale_image.show()
    second_image.show()

    # uložení všech tří obrázků
    original_image.save("30_original.png")
    grayscale_image.save("30_grayscale.png")
    second_image.save("30_second_image.png")

except Exception as e:
    print("Vyjimka: " + e.__str__())
</pre></code>



<p><a name="k04"></a></p>
<h2 id="k04">4. Nalezení minimálních a maximálních hodnot korespondujících pixelů</h2>

<pre><code>
result_image = ImageMath.eval("max(first, second)", first=grayscale_image, second=second_image)
</pre></code>

<pre><code>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

from PIL import Image
from PIL import ImageDraw
from PIL import ImageMath

filename = "Lenna.png"


def create_second_image(width, height):
    second_image = Image.new("L", (width, height))

    # objekt umožňující kreslení do obrázku
    draw = ImageDraw.Draw(second_image)

    # vykreslení čtverců
    for y in range(0, height, 32):
        for x in range(0, width, 32):
            draw.rectangle((x+0, y+0, x+29, y+29), outline=255, fill=x//4 + y//4)

    del draw
    return second_image


try:
    # načtení originálního obrázku Leny
    original_image = Image.open(filename)
    original_image.load()

    # převod na úrovně šedi
    grayscale_image = ImageMath.eval("convert(src, 'L')", src=original_image)

    # vytvoření druhého obrázku s maskou
    second_image = create_second_image(512, 512)

    # aplikace operace
    result_image = ImageMath.eval("max(first, second)", first=grayscale_image, second=second_image)

    # další převod výsledku na stupně šedi
    result_image = ImageMath.eval("convert(src, 'L')", src=result_image)

    # zobrazení výsledného obrázku uživateli
    result_image.show()

    # uložení výsledného obrázku
    result_image.save("31_image_math_max.png")

except Exception as e:
    print("Vyjimka: " + e.__str__())
</pre></code>

*** image ***
<p><i>Obrázek 4: </i></p>

<pre><code>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

from PIL import Image
from PIL import ImageDraw
from PIL import ImageMath

filename = "Lenna.png"


def create_second_image(width, height):
    second_image = Image.new("L", (width, height))

    # objekt umožňující kreslení do obrázku
    draw = ImageDraw.Draw(second_image)

    # vykreslení čtverců
    for y in range(0, height, 32):
        for x in range(0, width, 32):
            draw.rectangle((x+0, y+0, x+29, y+29), outline=255, fill=x//4 + y//4)

    del draw
    return second_image


try:
    # načtení originálního obrázku Leny
    original_image = Image.open(filename)
    original_image.load()

    # převod na úrovně šedi
    grayscale_image = ImageMath.eval("convert(src, 'L')", src=original_image)

    # vytvoření druhého obrázku s maskou
    second_image = create_second_image(512, 512)

    # aplikace operace
    result_image = ImageMath.eval("min(first, second)", first=grayscale_image, second=second_image)

    # další převod výsledku na stupně šedi
    result_image = ImageMath.eval("convert(src, 'L')", src=result_image)

    # zobrazení výsledného obrázku uživateli
    result_image.show()

    # uložení výsledného obrázku
    result_image.save("32_image_math_min.png")

except Exception as e:
    print("Vyjimka: " + e.__str__())
</pre></code>

*** image ***
<p><i>Obrázek 5: </i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Součet a rozdíl korespondujících pixelů</h2>

<pre><code>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

from PIL import Image
from PIL import ImageDraw
from PIL import ImageMath

filename = "Lenna.png"


def create_second_image(width, height):
    second_image = Image.new("L", (width, height))

    # objekt umožňující kreslení do obrázku
    draw = ImageDraw.Draw(second_image)

    # vykreslení čtverců
    for y in range(0, height, 32):
        for x in range(0, width, 32):
            draw.rectangle((x+0, y+0, x+29, y+29), outline=255, fill=x//4 + y//4)

    del draw
    return second_image


try:
    # načtení originálního obrázku Leny
    original_image = Image.open(filename)
    original_image.load()

    # převod na úrovně šedi
    grayscale_image = ImageMath.eval("convert(src, 'L')", src=original_image)

    # vytvoření druhého obrázku s maskou
    second_image = create_second_image(512, 512)

    # aplikace operace
    result_image = ImageMath.eval("first+second", first=grayscale_image, second=second_image)

    # další převod výsledku na stupně šedi
    result_image = ImageMath.eval("convert(src, 'L')", src=result_image)

    # zobrazení výsledného obrázku uživateli
    result_image.show()

    # uložení výsledného obrázku
    result_image.save("33_image_math_add.png")

except Exception as e:
    print("Vyjimka: " + e.__str__())
</pre></code>

*** image ***
<p><i>Obrázek 6: </i></p>

<pre><code>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

from PIL import Image
from PIL import ImageDraw
from PIL import ImageMath

filename = "Lenna.png"


def create_second_image(width, height):
    second_image = Image.new("L", (width, height))

    # objekt umožňující kreslení do obrázku
    draw = ImageDraw.Draw(second_image)

    # vykreslení čtverců
    for y in range(0, height, 32):
        for x in range(0, width, 32):
            draw.rectangle((x+0, y+0, x+29, y+29), outline=255, fill=x//4 + y//4)

    del draw
    return second_image


try:
    # načtení originálního obrázku Leny
    original_image = Image.open(filename)
    original_image.load()

    # převod na úrovně šedi
    grayscale_image = ImageMath.eval("convert(src, 'L')", src=original_image)

    # vytvoření druhého obrázku s maskou
    second_image = create_second_image(512, 512)

    # aplikace operace
    result_image = ImageMath.eval("first-second", first=grayscale_image, second=second_image)

    # další převod výsledku na stupně šedi
    result_image = ImageMath.eval("convert(src, 'L')", src=result_image)

    # zobrazení výsledného obrázku uživateli
    result_image.show()

    # uložení výsledného obrázku
    result_image.save("34_image_math_sub.png")

except Exception as e:
    print("Vyjimka: " + e.__str__())
</pre></code>

*** image ***
<p><i>Obrázek 7: </i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vynásobení pixelů, zprůměrování dvou rastrových obrázků</h2>

<pre><code>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

from PIL import Image
from PIL import ImageDraw
from PIL import ImageMath

filename = "Lenna.png"


def create_second_image(width, height):
    second_image = Image.new("L", (width, height))

    # objekt umožňující kreslení do obrázku
    draw = ImageDraw.Draw(second_image)

    # vykreslení čtverců
    for y in range(0, height, 32):
        for x in range(0, width, 32):
            draw.rectangle((x+0, y+0, x+29, y+29), outline=255, fill=x//4 + y//4)

    del draw
    return second_image


try:
    # načtení originálního obrázku Leny
    original_image = Image.open(filename)
    original_image.load()

    # převod na úrovně šedi
    grayscale_image = ImageMath.eval("convert(src, 'L')", src=original_image)

    # vytvoření druhého obrázku s maskou
    second_image = create_second_image(512, 512)

    # aplikace operace
    result_image = ImageMath.eval("first*second/256", first=grayscale_image, second=second_image)

    # další převod výsledku na stupně šedi
    result_image = ImageMath.eval("convert(src, 'L')", src=result_image)

    # zobrazení výsledného obrázku uživateli
    result_image.show()

    # uložení výsledného obrázku
    result_image.save("35_image_math_mul.png")

except Exception as e:
    print("Vyjimka: " + e.__str__())
</pre></code>

*** image ***
<p><i>Obrázek 8: </i></p>

<pre><code>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

from PIL import Image
from PIL import ImageDraw
from PIL import ImageMath

filename = "Lenna.png"


def create_second_image(width, height):
    second_image = Image.new("L", (width, height))

    # objekt umožňující kreslení do obrázku
    draw = ImageDraw.Draw(second_image)

    # vykreslení čtverců
    for y in range(0, height, 32):
        for x in range(0, width, 32):
            draw.rectangle((x+0, y+0, x+29, y+29), outline=255, fill=x//4 + y//4)

    del draw
    return second_image


try:
    # načtení originálního obrázku Leny
    original_image = Image.open(filename)
    original_image.load()

    # převod na úrovně šedi
    grayscale_image = ImageMath.eval("convert(src, 'L')", src=original_image)

    # vytvoření druhého obrázku s maskou
    second_image = create_second_image(512, 512)

    # aplikace operace
    result_image = ImageMath.eval("(first+second)/2", first=grayscale_image, second=second_image)

    # další převod výsledku na stupně šedi
    result_image = ImageMath.eval("convert(src, 'L')", src=result_image)

    # zobrazení výsledného obrázku uživateli
    result_image.show()

    # uložení výsledného obrázku
    result_image.save("36_image_math_avg.png")

except Exception as e:
    print("Vyjimka: " + e.__str__())
</pre></code>

*** image ***
<p><i>Obrázek 9: </i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Bitové operace AND, OR a XOR</h2>

<pre><code>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

from PIL import Image
from PIL import ImageDraw
from PIL import ImageMath

filename = "Lenna.png"


def create_second_image(width, height):
    second_image = Image.new("L", (width, height))

    # objekt umožňující kreslení do obrázku
    draw = ImageDraw.Draw(second_image)

    # vykreslení čtverců
    draw.rectangle((0, 0, width/2, height/2), fill=0)
    draw.rectangle((width/2, 0, width, height/2), fill=127)
    draw.rectangle((0, height/2, width/2, height), fill=128)
    draw.rectangle((width/2, height/2, width, height), fill=255)

    del draw
    return second_image


try:
    # načtení originálního obrázku Leny
    original_image = Image.open(filename)
    original_image.load()

    # převod na úrovně šedi
    grayscale_image = ImageMath.eval("convert(src, 'L')", src=original_image)

    # vytvoření druhého obrázku s maskou
    second_image = create_second_image(512, 512)

    # aplikace operace
    result_image = ImageMath.eval("first & second", first=grayscale_image, second=second_image)

    # další převod výsledku na stupně šedi
    result_image = ImageMath.eval("convert(src, 'L')", src=result_image)

    # zobrazení výsledného obrázku uživateli
    result_image.show()

    # uložení výsledného obrázku
    result_image.save("37_image_math_and.png")

except Exception as e:
    print("Vyjimka: " + e.__str__())
</pre></code>

*** image ***
<p><i>Obrázek 10: </i></p>

<pre><code>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

from PIL import Image
from PIL import ImageDraw
from PIL import ImageMath

filename = "Lenna.png"


def create_second_image(width, height):
    second_image = Image.new("L", (width, height))

    # objekt umožňující kreslení do obrázku
    draw = ImageDraw.Draw(second_image)

    # vykreslení čtverců
    draw.rectangle((0, 0, width/2, height/2), fill=0)
    draw.rectangle((width/2, 0, width, height/2), fill=127)
    draw.rectangle((0, height/2, width/2, height), fill=128)
    draw.rectangle((width/2, height/2, width, height), fill=255)

    del draw
    return second_image


try:
    # načtení originálního obrázku Leny
    original_image = Image.open(filename)
    original_image.load()

    # převod na úrovně šedi
    grayscale_image = ImageMath.eval("convert(src, 'L')", src=original_image)

    # vytvoření druhého obrázku s maskou
    second_image = create_second_image(512, 512)

    # aplikace operace
    result_image = ImageMath.eval("first | second", first=grayscale_image, second=second_image)

    # další převod výsledku na stupně šedi
    result_image = ImageMath.eval("convert(src, 'L')", src=result_image)

    # zobrazení výsledného obrázku uživateli
    result_image.show()

    # uložení výsledného obrázku
    result_image.save("38_image_math_or.png")

except Exception as e:
    print("Vyjimka: " + e.__str__())
</pre></code>

*** image ***
<p><i>Obrázek 11: </i></p>

<pre><code>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

from PIL import Image
from PIL import ImageDraw
from PIL import ImageMath

filename = "Lenna.png"


def create_second_image(width, height):
    second_image = Image.new("L", (width, height))

    # objekt umožňující kreslení do obrázku
    draw = ImageDraw.Draw(second_image)

    # vykreslení čtverců
    draw.rectangle((0, 0, width/2, height/2), fill=0)
    draw.rectangle((width/2, 0, width, height/2), fill=127)
    draw.rectangle((0, height/2, width/2, height), fill=128)
    draw.rectangle((width/2, height/2, width, height), fill=255)

    del draw
    return second_image


try:
    # načtení originálního obrázku Leny
    original_image = Image.open(filename)
    original_image.load()

    # převod na úrovně šedi
    grayscale_image = ImageMath.eval("convert(src, 'L')", src=original_image)

    # vytvoření druhého obrázku s maskou
    second_image = create_second_image(512, 512)

    # aplikace operace
    result_image = ImageMath.eval("first ^ second", first=grayscale_image, second=second_image)

    # další převod výsledku na stupně šedi
    result_image = ImageMath.eval("convert(src, 'L')", src=result_image)

    # zobrazení výsledného obrázku uživateli
    result_image.show()

    # uložení výsledného obrázku
    result_image.save("39_image_math_xor.png")

except Exception as e:
    print("Vyjimka: " + e.__str__())
</pre></code>

*** image ***
<p><i>Obrázek 12: </i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro Python 3 a knihovnu <i>Pillow</i> i pro Python 2 a starší knihovnu <i>PIL</i> byly uloženy do Git repositáře dostupného na adrese <a href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a> (stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále velmi malý, dnes má doslova několik kilobajtů), můžete namísto toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující dvojici tabulek:</p>

<h3>Příklady pro jazyk Python 3 a knihovnu Pillow:</h3>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pillow/">https://github.com/tisnik/most-popular-python-libs/blob/master/pillow/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pillow/">https://github.com/tisnik/most-popular-python-libs/blob/master/pillow/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pillow/">https://github.com/tisnik/most-popular-python-libs/blob/master/pillow/</a></td></tr>
</table>

<h3>Příklady pro jazyk Python 2 a knihovnu PIL:</h3>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pil/">https://github.com/tisnik/most-popular-python-libs/blob/master/pil/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pil/">https://github.com/tisnik/most-popular-python-libs/blob/master/pil/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pil/">https://github.com/tisnik/most-popular-python-libs/blob/master/pil/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>PIL: The friendly PIL fork (home page)<br />
<a href="https://python-pillow.org/">https://python-pillow.org/</a>
</li>

<li>Python Imaging Library (PIL), (home page)<br />
<a href="http://www.pythonware.com/products/pil/">http://www.pythonware.com/products/pil/</a>
</li>

<li>PIL 1.1.6 na PyPi<br />
<a href="https://pypi.org/project/PIL/">https://pypi.org/project/PIL/</a>
</li>

<li>Pillow 5.2.0 na PyPi<br />
<a href="https://pypi.org/project/Pillow/">https://pypi.org/project/Pillow/</a>
</li>

<li>Python Imaging Library na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/Python_Imaging_Library">https://en.wikipedia.org/wiki/Python_Imaging_Library</a>
</li>

<li>Pillow na GitHubu<br />
<a href="https://github.com/python-pillow/Pillow">https://github.com/python-pillow/Pillow</a>
</li>

<li>Pillow - dokumentace na readthedocs.io<br />
<a href="http://pillow.readthedocs.io/en/5.2.x/">http://pillow.readthedocs.io/en/5.2.x/</a>
</li>

<li>How to use Pillow, a fork of PIL<br />
<a href="https://www.pythonforbeginners.com/gui/how-to-use-pillow">https://www.pythonforbeginners.com/gui/how-to-use-pillow</a>
</li>

<li>Lenna (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Lenna">https://en.wikipedia.org/wiki/Lenna</a>
</li>

<li>Seriál Grafický formát GIF<br />
<a href="https://www.root.cz/serialy/graficky-format-gif/">https://www.root.cz/serialy/graficky-format-gif/</a>
</li>

<li>PNG is Not GIF<br />
<a href="https://www.root.cz/clanky/png-is-not-gif/">https://www.root.cz/clanky/png-is-not-gif/</a>
</li>

<li>JPEG - král rastrových grafických formátů?<br />
<a href="https://www.root.cz/clanky/jpeg-kral-rastrovych-grafickych-formatu/">https://www.root.cz/clanky/jpeg-kral-rastrovych-grafickych-formatu/</a>
</li>

<li>Grafický formát BMP - používaný a přitom neoblíbený<br />
<a href="https://www.root.cz/clanky/graficky-format-bmp-pouzivany-a-pritom-neoblibeny/">https://www.root.cz/clanky/graficky-format-bmp-pouzivany-a-pritom-neoblibeny/</a>
</li>

<li>Grafický formát PCX - výlet do historie PC<br />
<a href="https://www.root.cz/clanky/graficky-format-pcx-vylet-do-historie-pc/">https://www.root.cz/clanky/graficky-format-pcx-vylet-do-historie-pc/</a>
</li>

<li>Grafické formáty ve znamení Unixu<br />
<a href="https://www.root.cz/clanky/graficke-formaty-ve-znameni-unixu/">https://www.root.cz/clanky/graficke-formaty-ve-znameni-unixu/</a>
</li>

<li>Grafický formát TGA - jednoduchý, oblíbený, používaný<br />
<a href="https://www.root.cz/clanky/graficky-format-tga-jednoduchy-oblibeny-pouzivany/">https://www.root.cz/clanky/graficky-format-tga-jednoduchy-oblibeny-pouzivany/</a>
</li>

<li>Konvoluce<br />
<a href="https://cs.wikipedia.org/wiki/Konvoluce">https://cs.wikipedia.org/wiki/Konvoluce</a>
</li>

<li>Počítačová grafika<br />
<a href="https://cs.wikipedia.org/wiki/Kategorie:Po%C4%8D%C3%ADta%C4%8Dov%C3%A1_grafika">https://cs.wikipedia.org/wiki/Kategorie:Po%C4%8D%C3%ADta%C4%8Dov%C3%A1_grafika</a>
</li>

<li>Pixel<br />
<a href="https://cs.wikipedia.org/wiki/Pixel">https://cs.wikipedia.org/wiki/Pixel</a>
</li>

<li>Rastrová grafika<br />
<a href="https://cs.wikipedia.org/wiki/Rastrov%C3%A1_grafika">https://cs.wikipedia.org/wiki/Rastrov%C3%A1_grafika</a>
</li>

<li>Pixel art aneb umění práce s body<br />
<a href="https://www.root.cz/clanky/pixel-art-aneb-umeni-prace-s-body/">https://www.root.cz/clanky/pixel-art-aneb-umeni-prace-s-body/</a>
</li>

<li>Jak se dělá pixel art?<br />
<a href="https://www.root.cz/clanky/jak-se-dela-pixel-art/">https://www.root.cz/clanky/jak-se-dela-pixel-art/</a>
</li>

<li>Nástroje pro pixel art<br />
<a href="https://www.root.cz/clanky/nastroje-pro-pixel-art/">https://www.root.cz/clanky/nastroje-pro-pixel-art/</a>
</li>

<li>RGB color model<br />
<a href="https://en.wikipedia.org/wiki/RGB_color_model">https://en.wikipedia.org/wiki/RGB_color_model</a>
</li>

<li>HSL and HSV<br />
<a href="https://en.wikipedia.org/wiki/HSL_and_HSV">https://en.wikipedia.org/wiki/HSL_and_HSV</a>
</li>

<li>Color picker<br />
<a href="https://en.wikipedia.org/wiki/Color_picker">https://en.wikipedia.org/wiki/Color_picker</a>
</li>

<li>HCL color space<br />
<a href="https://en.wikipedia.org/wiki/HCL_color_space">https://en.wikipedia.org/wiki/HCL_color_space</a>
</li>

<li>Eroding and Dilating<br />
<a href="https://docs.opencv.org/2.4/doc/tutorials/imgproc/erosion_dilatation/erosion_dilatation.html">https://docs.opencv.org/2.4/doc/tutorials/imgproc/erosion_dilatation/erosion_dilatation.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

<!--
2018-08-xx: 0 hod
2018-08-xx: 0 hod
2018-08-xx: 0 hod
2018-08-xx: 0 hod
2018-08-xx: 0 hod
publikace:  0 hod
-----------------
            0 hod
-->
