<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Propojení Pythonu s nativními knihovnami s využitím balíčku ctypes</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Propojení Pythonu s nativními knihovnami s využitím balíčku ctypes</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na těchto stránkách jsme se již několikrát setkali s propojením Pythonu s nativními knihovnami naprogramovanými (například) v C. Použili jsme přitom balíček cffi. Ovšem v některých případech může být užitečné využít namísto toho standardní balíček ctypes.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Propojení Pythonu s&nbsp;nativními knihovnami s&nbsp;využitím balíčku <i>ctypes</i></a></p>
<p><a href="#k02">2. Řešený problém</a></p>
<p><a href="#k03">3. Základní informace o knihovně Pygame</a></p>
<p><a href="#k04">4. Vykreslení jednotlivých pixelů v&nbsp;rastrovém obrázku typu <i>Image</i> v&nbsp;Pythonu</a></p>
<p><a href="#k05">5. Limity předchozího řešení</a></p>
<p><a href="#k06">6. Realizace nativní funkce, která vyplní obrázek jednoduchým testovacím vzorkem</a></p>
<p><a href="#k07">7. Překlad nativní funkce do dynamicky linkované knihovny</a></p>
<p><a href="#k08">8. Zavolání nativní funkce z&nbsp;Pythonu</a></p>
<p><a href="#k09">9. Předání barvové palety do nativní funkce</a></p>
<p><a href="#k10">10. Přednosti propojení Pythonu s&nbsp;jazykem C</a></p>
<p><a href="#k11">11. Výpočet Mandelbrotovy a Juliovy množiny implementovaný v&nbsp;jazyce C</a></p>
<p><a href="#k12">12. Zavolání nativních funkci pro výpočet Mandelbrotovy a Juliovy množiny z&nbsp;Pythonu</a></p>
<p><a href="#k13">13. Mandelbrotova množina jako &bdquo;mapa&ldquo; všech Juliových množin</a></p>
<p><a href="#k14">14. Interaktivní určení konstanty <i>c</i> v&nbsp;Mandelbrotově množině</a></p>
<p><a href="#k15">15. Výsledná podoba demonstračního příkladu</a></p>
<p><a href="#k16">16. Buffer sdílený oběma rastrovými obrázky</a></p>
<p><a href="#k17">17. Oprava předchozího postupu: použití dvou bufferů bez kopie pixelů</a></p>
<p><a href="#k18">18. Přístup k&nbsp;pixelům obrázku po 32bitových slovech</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Propojení Pythonu s&nbsp;nativními knihovnami s&nbsp;využitím balíčku <i>ctypes</i></h2>

<p>Na stránkách Roota, konkrétně v&nbsp;článcích [<a
href=https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-cffi/"">1</a>]
[<a
href="https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-cffi-2/">2</a>]
a [<a
href="https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-cffi-3/">3</a>],
jsme se již zabývali problematikou propojení vysokoúrovňového programovacího
jazyka <a href="https://www.root.cz/n/python/">Python</a> s&nbsp;nativními
knihovnami naprogramovanými například v&nbsp;jazyku C (ovšem může se jednat i o
<a
href="https://www.root.cz/clanky/programovaci-jazyk-rust-rozhrani-mezi-rustem-a-pythonem/">Rust</a>,
C++ a pokud si dáme pozor, tak i <a
href="https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes/">Go</a>).
Poměrně jednoduchá je situace, kdy se pouze z&nbsp;Pythonu volají nativní
funkce, kterým se předávají již naalokované objekty. Pro tento účel jsme
v&nbsp;předchozích článcích využili především knihovnu <i>cffi</i> (viz též <a
href="https://cffi.readthedocs.io/en/latest/overview.html">Overview</a>). Dnes
si naproti tomu ukážeme použití standardního balíčku <i>ctypes</i> (viz též <a
href="https://docs.python.org/3/library/ctypes.html">dokumentaci</a>).</p>

<p>Základní postup přitom zůstává stále stejný. Zdrojový kód napsaný
v&nbsp;jazyku C (C++, Rustu, Go, ...) je nejprve přeložen do nativní dynamické
knihovny, tedy konkrétně do souboru s&nbsp;koncovkou &bdquo;.so&ldquo; na
Linuxu a &bdquo;.dll&ldquo; v&nbsp;systému Microsoft Windows. Aplikace psaná
v&nbsp;Pythonu tuto dynamickou knihovnu načte a přes balíček <i>ctypes</i>
umožní volání funkcí naprogramovaných v&nbsp;C/C++ atd. Zpočátku se může zdát,
že se jedná o bezproblémové řešení, ovšem v&nbsp;praxi musíme vyřešit především
dva problémy: vlastnictví předávaných hodnot (tedy která strana alokuje paměť a
která ji může dealokovat) a taktéž korektní předání hodnot různých typů. První
problém musí vyřešit programátor, ovšem druhý problém může &ndash; i když pouze
částečně &ndash; řešit i balíček realizující volání nativních funkcí
z&nbsp;Pythonu. A právě zde nalezneme největší rozdíly mezi <i>ctypes</i>,
<i>cffi</i> i dalšími balíčky určenými pro stejný účel. V&nbsp;tomto ohledu
jsou možnosti <i>ctypes</i> dosti omezené, ovšem jedná se o standardní balíček,
který navíc může pro některé účely plně vyhovovat.</p>

<p><div class="rs-tip-major">Poznámka: název <i>ctypes</i> a vlastně i
<i>cffi</i> evokuje jazyk C. Ovšem jak již bylo napsáno výše, lze nativní část
vytvořit i v&nbsp;jiných jazycích; pouze se v&nbsp;takovém případě dříve či
později setkáme s&nbsp;obtížemi, které v&nbsp;C nenastávají (práce
s&nbsp;objekty, správce paměti v&nbsp;nativní knihovně atd.).</div></p>

<a href="https://www.root.cz/obrazek/1092946/"><img src="https://i.iinfo.cz/images/85/c-prev.png" class="image-1092946" data-prev-filename="https://i.iinfo.cz/images/85/c-prev.png" data-prev-width="192" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/85/c-large.png" data-large-width="374" data-large-height="525" alt="&#160;" title="Autor: Prentice Hall, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="192" height="270" /></a>
<p><i>Obrázek 1: Programovací jazyk C je prozatím ve své nice prakticky
nenahraditelný, i když už vzniklo několik jeho nástupců (Zig, D, částečně
Rust).</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Řešený problém</h2>

<p>V&nbsp;rámci navazujících kapitol se pokusíme o vytvoření jednoduché
aplikace, která zobrazí Mandelbrotovu množinu a umožní uživateli interaktivní
výběr souřadnice v&nbsp;této množině (což je komplexní číslo označované jako
<i>C</i> nebo malé <i>c</i>), které bude ihned využito při vykreslení Juliovy
množiny:</p>

<img src="https://i.iinfo.cz/images/540/ctypes1-1.webp" class="image-1117019" width="628" height="366" alt="&#160;" title="Autor: Pavel Tisnovsky, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 2: Výsledná aplikace. Uživatel může v&nbsp;Mandelbrotově množině
(levá část) vybrat hodnotu komplexního čísla C. To se ihned projeví
v&nbsp;pravé části na tvaru Juliovy množiny.</i></p>

<img src="https://i.iinfo.cz/images/540/ctypes1-2.webp" class="image-1117020" width="628" height="366" alt="&#160;" title="Autor: Pavel Tisnovsky, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 3: Juliova množina pro odlišnou hodnotu C (reálná část je nulová).</i></p>

<img src="https://i.iinfo.cz/images/540/ctypes1-3.webp" class="image-1117021" width="628" height="366" alt="&#160;" title="Autor: Pavel Tisnovsky, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 4: Juliova množina pro odlišnou hodnotu C.</i></p>

<img src="https://i.iinfo.cz/images/540/ctypes1-4.webp" class="image-1117022" width="628" height="366" alt="&#160;" title="Autor: Pavel Tisnovsky, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 5: Juliova množina pro odlišnou hodnotu C (imaginární část je nulová).</i></p>

<p>Samotné (minimalisticky pojaté) grafické uživatelské prostředí aplikace bude
naprogramováno s&nbsp;využitím populární knihovny <a
href="https://www.pygame.org/docs/">Pygame</a>, výpočet Mandelbrotovy množiny a
Juliovy množiny bude realizován v&nbsp;ANSI C a pro jednoduchost nebude
algoritmus nijak optimalizován (výsledný nativní kód však je možné
optimalizovat překladačem céčka, postačuje jen nastavit příslušné
přepínače).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Základní informace o knihovně Pygame</h2>

<p<i>Pygame</i> je knihovna určená pro programovací jazyk Python, která interně
volá funkce nativní knihovny SDL a několika dalších podpůrných knihoven.
Myšlenka, na níž je <i>Pygame</i> postavena, je v&nbsp;mnoha ohledech podobná
myšlence výše systému <i>LÖVE</i> (kde se ovšem používá jazyk Lua) &ndash;
implementace nízkoúrovňových operací nechť je vytvořena odborníky
v&nbsp;programovacích jazycích C a C++; pokud budou tyto operace implementovány
dostatečně rychle, je již možné zbytek hry naprogramovat ve vysokoúrovňovém
jazyku Python. A ukazuje se, že je tato myšlenka &ndash; a obecně systém
rozdělení aplikace mezi dva programovací jazyky (kompilovaný a skriptovací)
&ndash; poměrně úspěšná, neboť v&nbsp;<i>Pygame</i> již vzniklo mnoho
zajímavých her i dalších aplikací.</p>

<img src="https://i.iinfo.cz/images/540/ctypes1-5.webp" class="image-1117023" width="400" height="118" alt="&#160;" title="Autor: Pavel Tisnovsky, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 6: Logo knihovny Pygame.</i></p>

<p>Pro naše účely využijeme jen několik typů objektů knihovny Pygame. Jedná se
o:</p>

<ul>
<li><a href="https://www.pygame.org/docs/ref/display.html">display</a>: objekt představující plochu okna, do něhož se provádí vykreslování celé scény</li>
<li><a href="https://www.pygame.org/docs/ref/event.html">event</a>: událost, která vznikne například při stisku tlačítka myši, pohybem myši, stiskem klávesy, zavřením okna atd.</li>
<li><a href="https://www.pygame.org/docs/ref/image.html">image</a>: objekt s&nbsp;rastrovým obrázkem (s&nbsp;paletou či plnobarevným)</li>
<li><a href="https://www.pygame.org/docs/ref/time.html#pygame.time.Clock">clock</a>: hodiny, které nám umožní například zajistit maximální frekvenci obnovování obsahu okna atd.</li>
</ul>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vykreslení jednotlivých pixelů v&nbsp;rastrovém obrázku typu <i>Image</i> v&nbsp;Pythonu</h2>

<p>S&nbsp;využitím knihovny Pygame nyní vytvoříme jednoduchou aplikaci, která
po svém spuštění otevře okno se zadanými rozměry a vykreslí do něj dvojici
rastrových obrázků s&nbsp;různými barvovými vzorky. První funkce otevře nové
okno, vyplní ho zadanou barvou pozadí a vytvoří objekt typu
&bdquo;hodiny&ldquo; (ten použijeme v&nbsp;pozdějších verzích příkladu):</p>

<pre>
def <strong>initialize_ui</strong>(title, width, height):
    <i>"""Initialize Pygame display, drawing surface, and clocks."""</i>
    <i># set window title</i>
    pygame.display.set_caption(title)
&nbsp;
    <i># initialize window</i>
    display = pygame.display.set_mode([width, height])
    display.fill((0, 0, 0))
&nbsp;
    clock = pygame.time.Clock()
&nbsp;
    return display, clock
</pre>

<p>Druhá funkce je již komplikovanější. Jedná se o realizaci programové smyčky
reagující na události čtené z&nbsp;fronty. Pokud se uživatel pokusí zavřít okno
aplikace, dojde k&nbsp;vytvoření události typu <strong>QUIT</strong>. A pokud
stiskne klávesu <i>Escape</i>, bude se jednat o událost typu
<strong>KEYDOWN</strong>, přičemž bude nastavený atribut <strong>key</strong>
na kód klávesy <i>Escape</i>. Po zpracování všech událostí vykreslíme na
displej dvojici rastrových obrázků operací <strong>display.blit</strong>,
necháme překreslit displej (resp.&nbsp;obsah okna) a počkáme určitý časový
interval:</p>

<pre>
def <strong>event_loop</strong>(display, image1, image2, clock):
    while True:
        for event in pygame.event.get():
            if event.type == pygame.locals.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.locals.KEYDOWN:
                if event.key == pygame.locals.K_ESCAPE:
                    pygame.quit()
                    sys.exit()
&nbsp;
        <i># all events has been processed - update scene and redraw the screen</i>
        display.blit(image1, (30, 20))
        display.blit(image2, (60 + image1.get_width(), 20))
&nbsp;
        <i># and update the whole display</i>
        pygame.display.update()
        clock.tick(25)
</pre>

<p>Dále je v&nbsp;programu realizována funkce, která do předaného obrázku (typu
<strong>Image</strong>) vykreslí testovací vzorek. Povšimněte si, že musíme
vypočítat hodnotu barvy ze všech tří barvových složek RGB (posunem složek o 8 a
16 bitů) a že se hodnota pixelu nastavuje metodou
<strong>Image.set_at</strong>:</p>

<pre>
def <strong>render_test_rgb_image</strong>(image, green):
    width, height = image.get_size()
    for y in range(height):
        for x in range(width):
            color = (x&lt;&lt;16) + (green&lt;&lt;8) + y
            image.set_at((x, y), color)
</pre>

<p>A nakonec následuje inicializace okna, obrázků a vstup do těla smyčky pro
zpracování událostí:</p>

<pre>
def <strong>main</strong>():
    display, clock = initialize_ui(TITLE, SCREEN_WIDTH, SCREEN_HEIGHT)
    image1 = pygame.Surface([IMAGE_WIDTH, IMAGE_HEIGHT])
    image2 = pygame.Surface([IMAGE_WIDTH, IMAGE_HEIGHT])
&nbsp;
    render_test_rgb_image(image1, 0)
    render_test_rgb_image(image2, 255)
&nbsp;
    event_loop(display, image1, image2, clock)
&nbsp;
&nbsp;
if __name__ == "__main__":
    main()
</pre>

<p>Úplný zdrojový kód bude vypadat následovně:</p>

<pre>
import sys
&nbsp;
import pygame
import pygame.locals
&nbsp;
TITLE = "Raster image"
SCREEN_WIDTH = 600
SCREEN_HEIGHT = 300
IMAGE_WIDTH = 256
IMAGE_HEIGHT = 256
&nbsp;
&nbsp;
def <strong>initialize_ui</strong>(title, width, height):
    <i>"""Initialize Pygame display, drawing surface, and clocks."""</i>
    <i># set window title</i>
    pygame.display.set_caption(title)
&nbsp;
    <i># initialize window</i>
    display = pygame.display.set_mode([width, height])
    display.fill((0, 0, 0))
&nbsp;
    clock = pygame.time.Clock()
&nbsp;
    return display, clock
&nbsp;
&nbsp;
def <strong>event_loop</strong>(display, image1, image2, clock):
    while True:
        for event in pygame.event.get():
            if event.type == pygame.locals.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.locals.KEYDOWN:
                if event.key == pygame.locals.K_ESCAPE:
                    pygame.quit()
                    sys.exit()
&nbsp;
        <i># all events has been processed - update scene and redraw the screen</i>
        display.blit(image1, (30, 20))
        display.blit(image2, (60 + image1.get_width(), 20))
&nbsp;
        <i># and update the whole display</i>
        pygame.display.update()
        clock.tick(25)
&nbsp;
&nbsp;
def <strong>render_test_rgb_image</strong>(image, green):
    width, height = image.get_size()
    for y in range(height):
        for x in range(width):
            color = (x&lt;&lt;16) + (green&lt;&lt;8) + y
            image.set_at((x, y), color)
&nbsp;
&nbsp;
def <strong>main</strong>():
    display, clock = initialize_ui(TITLE, SCREEN_WIDTH, SCREEN_HEIGHT)
    image1 = pygame.Surface([IMAGE_WIDTH, IMAGE_HEIGHT])
    image2 = pygame.Surface([IMAGE_WIDTH, IMAGE_HEIGHT])
&nbsp;
    render_test_rgb_image(image1, 0)
    render_test_rgb_image(image2, 255)
&nbsp;
    event_loop(display, image1, image2, clock)
&nbsp;
&nbsp;
if __name__ == "__main__":
    main()
&nbsp;
&nbsp;
# finito
</pre>

<p>Po spuštění této funkce by se mělo na desktopu zobrazit nové okno
s&nbsp;následujícím obsahem:</p>

<img src="https://i.iinfo.cz/images/540/ctypes1-6.webp" class="image-1117024" width="628" height="366" alt="&#160;" title="Autor: Pavel Tisnovsky, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></p>
<p><i>Obrázek 7: Okno s&nbsp;dvojicí testovacích rastrových obrázků.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Limity předchozího řešení</h2>

<p>Dnešní první demonstrační příklad, který byl popsán <a
href="#k04">v&nbsp;předchozí kapitole</a>, je sice plně funkční, ovšem má jednu
vadu &ndash; samotné vykreslování (resp.&nbsp;přesněji řečeno obarvování)
pixelů přímo v&nbsp;Pythonu metodou <strong>set_at</strong> je velmi pomalé. Je
tomu tak z&nbsp;toho důvodu, že je neustále nutné počítat adresu pixelu (i když
obrázek vykreslujeme postupně po pixelech a potom po řádcích) a taktéž samotný
výpočet barvy je pomalejší. A navíc je většinou (interně) nutné pole
s&nbsp;rastrovými daty (tedy s&nbsp;jednotlivými pixely) zamykat. Pro naše
relativně malé obrázky je sice vykreslení na moderním HW dostatečně rychlé, ale
ukážeme si řešení založené na nativní funkci naprogramované v&nbsp;céčku. Toto
řešení má výhodu v&nbsp;tom, že je velmi snadno rozšiřitelné i pro účely
výpočtu Mandelbrotovy množiny a Juliovy množiny (množin).</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Realizace nativní funkce, která vyplní obrázek jednoduchým testovacím vzorkem</h2>

<p>Nyní se podívejme na to, jakým způsobem by mohla být vytvořena funkce
naprogramovaná v&nbsp;jazyku C, které se předá ukazatel na data rastrového
obrázku společně s&nbsp;rozměry tohoto obrázku. Funkce následně obrázek vyplní
testovacím vzorkem. Budeme předpokládat, že každý pixel obrázku je uložen ve
čtyřech po sobě jdoucích bajtech (viz předchozí kapitolu) a že mezi
jednotlivými obrazovými řádky nejsou žádné vyplňovací bajty (což by souviselo
s&nbsp;hodnotou <i>stride</i>). Za těchto podmínek je vyplnění rastrového
obrázku RGB vzorkem velmi jednoduché, což ostatně můžeme vidět i
z&nbsp;realizace této funkce. Povšimněte si především toho, že pixel je
skutečně uložen ve čtyřech bajtech, jeden bajt však není použit (je při zápisu
zcela přeskočen):</p>

<pre>
void <strong>render_test_rgb_image</strong>(unsigned int width, unsigned int height,
                           unsigned char *pixels, unsigned char green) {
    unsigned int i, j;
    unsigned char *p = pixels;
&nbsp;
    for (j = 0; j &lt; height; j++) {
        for (i = 0; i &lt; width; i++) {
            *p++ = i;
            *p++ = green;
            *p++ = j;
            p++;
        }
    }
}
</pre>





<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<table>
<tr><th>  #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
</table>

<table>
<tr><th>  #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>  1</td><td>adder/adder.c</td><td>funkce psaná v&nbsp;C, která sečte své dva celočíselné parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/adder.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/adder.c</a></td></tr>
<tr><td>  2</td><td>adder/call_via_cffi1.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;korektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi1.py</a></td></tr>
<tr><td>  3</td><td>adder/call_via_cffi2.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi2.py</a></td></tr>
<tr><td>  4</td><td>adder/call_via_cffi3.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi3.py</a></td></tr>
<tr><td>  5</td><td>adder/call_via_cffi.sh</td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi.sh</a></td></tr>
<tr><td>  6</td><td>adder/call_via_ctypes1.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;korektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes1.py</a></td></tr>
<tr><td>  7</td><td>adder/call_via_ctypes2.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes2.py</a></td></tr>
<tr><td>  8</td><td>adder/call_via_ctypes3.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes3.py</a></td></tr>
<tr><td>  9</td><td>adder/call_via_ctypes.sh </td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes.sh</a></td></tr>
<tr><td> 10</td><td>adder/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/make_library.sh</a></td></tr>
<tr><td> 11</td><td>adder/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 12</td><td>greeter/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/greeter.c</a></td></tr>
<tr><td> 13</td><td>greeter/call_via_cffi1.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;nekorektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi1.py</a></td></tr>
<tr><td> 14</td><td>greeter/call_via_cffi2.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi2.py</a></td></tr>
<tr><td> 15</td><td>greeter/call_via_cffi3.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi3.py</a></td></tr>
<tr><td> 16</td><td>greeter/call_via_cffi.sh</td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi.sh</a></td></tr>
<tr><td> 17</td><td>greeter/call_via_ctypes1.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;nekorektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes1.py</a></td></tr>
<tr><td> 18</td><td>greeter/call_via_ctypes2.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes2.py</a></td></tr>
<tr><td> 19</td><td>greeter/call_via_ctypes3.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes3.py</a></td></tr>
<tr><td> 20</td><td>greeter/call_via_ctypes.sh</td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes.sh</a></td></tr>
<tr><td> 21</td><td>greeter/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/make_library.sh</a></td></tr>
<tr><td> 22</td><td>greeter/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 23</td><td>swapper/swapper.c</td><td>céčkovská funkce prohazující obsah svých dvou parametrů předávaných referencí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/swapper.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/swapper.c</a></td></tr>
<tr><td> 24</td><td>swapper/call_via_cffi1.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python (korektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi1.py</a></td></tr>
<tr><td> 25</td><td>swapper/call_via_cffi2.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python (nekorektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi2.py</a></td></tr>
<tr><td> 26</td><td>swapper/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi.sh</a></td></tr>
<tr><td> 27</td><td>swapper/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/make_library.sh</a></td></tr>
<tr><td> 28</td><td>swapper/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 29</td><td>filler/filler.c</td><td>céčkovská funkce pro vyplnění části pole zadanou hodnotou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/filler.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/filler.c</a></td></tr>
<tr><td> 30</td><td>filler/call_via_cffi.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.py</a></td></tr>
<tr><td> 31</td><td>filler/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.sh</a></td></tr>
<tr><td> 32</td><td>filler/make_library.sh </td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/make_library.sh</a></td></tr>
<tr><td> 32</td><td>filler/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 33</td><td>greeter_h/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.c</a></td></tr>
<tr><td> 34</td><td>greeter_h/greeter.h</td><td>prototyp (předběžná deklarace) funkce <i>greeter</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.h</a></td></tr>
<tr><td> 35</td><td>greeter_h/call_via_cffi4.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi4.py</a></td></tr>
<tr><td> 36</td><td>greeter_h/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi.sh</a></td></tr>
<tr><td> 37</td><td>greeter_h/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/make_library.sh</a></td></tr>
<tr><td> 38</td><td>greeter_h/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>ctypes &ndash; A foreign function library for Python<br />
<a href="https://docs.python.org/3/library/ctypes.html">https://docs.python.org/3/library/ctypes.html</a>
</li>

<li>Pygame: display<br />
<a href="https://www.pygame.org/docs/ref/display.html">https://www.pygame.org/docs/ref/display.html</a>
</li>

<li>Pygame: event<br />
<a href="https://www.pygame.org/docs/ref/event.html">https://www.pygame.org/docs/ref/event.html</a>
</li>

<li>Pygame: image<br />
<a href="https://www.pygame.org/docs/ref/image.html">https://www.pygame.org/docs/ref/image.html</a>
</li>

<li>Pygame: clock<br />
<a href="https://www.pygame.org/docs/ref/time.html#pygame.time.Clock">https://www.pygame.org/docs/ref/time.html#pygame.time.Clock</a>
</li>

<li>Fraktály v&nbsp;počítačové grafice XII<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xii/">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xii/</a>
</li>

<li>Fraktály v&nbsp;počítačové grafice XIII<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xiii/">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xiii/</a>
</li>

<li>Fraktály v&nbsp;počítačové grafice XIV<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xiv/">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xiv/</a>
</li>

<li>CFFI documentation<br />
<a href="https://cffi.readthedocs.io/en/latest/">https://cffi.readthedocs.io/en/latest/</a>
</li>

<li>cffi 1.15.1 na PyPi<br />
<a href="https://pypi.org/project/cffi/">https://pypi.org/project/cffi/</a>
</li>

<li>Python Bindings: Calling C or C++ From Python<br />
<a href="https://realpython.com/python-bindings-overview/">https://realpython.com/python-bindings-overview/</a>
</li>

<li>Interfacing with C/C++ Libraries<br />
<a href="https://docs.python-guide.org/scenarios/clibs/">https://docs.python-guide.org/scenarios/clibs/</a>
</li>

<li>Cython, pybind11, cffi – which tool should you choose?<br />
<a href="http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html">http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html</a>
</li>

<li>Python FFI with ctypes and cffi<br />
<a href="https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi">https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi</a>
</li>

<li>Propojení Go s&nbsp;Pythonem s&nbsp;využitím cgo a ctypes<br />
<a href="https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes/">https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes/</a>
</li>

<li>Propojení Go s&nbsp;Pythonem s&nbsp;využitím cgo a ctypes (2. část)<br />
<a href="https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes-2-cast/">https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes-2-cast/</a>
</li>

<li>Programovací jazyk Rust: použití FFI pro volání funkcí z&nbsp;nativních knihoven<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven/">https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven/</a>
</li>

<li>Programovací jazyk Rust: použití FFI při předávání struktur<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pri-predavani-struktur/">https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pri-predavani-struktur/</a>
</li>

<li>Programovací jazyk Rust: použití FFI pro volání funkcí z&nbsp;nativních knihoven (2. část)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven-2-cast/">https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven-2-cast/</a>
</li>

<li>Dynamic-link library<br />
<a href="https://en.wikipedia.org/wiki/Dynamic-link_library">https://en.wikipedia.org/wiki/Dynamic-link_library</a>
</li>

<li>Úvod do jazyka C: Deklarace funkcí<br />
<a href="https://www.fi.muni.cz/usr/jkucera/pb071/sl5.htm">https://www.fi.muni.cz/usr/jkucera/pb071/sl5.htm</a>
</li>

<li>Using standard library headers with CFFI<br />
<a href="https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi">https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi</a>
</li>

<li>Preparing and Distributing modules<br />
<a href="https://cffi.readthedocs.io/en/latest/cdef.html">https://cffi.readthedocs.io/en/latest/cdef.html</a>
</li>

<li>C Arrays<br />
<a href="https://www.programiz.com/c-programming/c-arrays">https://www.programiz.com/c-programming/c-arrays</a>
</li>

<li>C Arrays<br />
<a href="https://www.w3schools.com/c/c_arrays.php">https://www.w3schools.com/c/c_arrays.php</a>
</li>

<li>Array of Structures in C<br />
<a href="https://overiq.com/c-programming-101/array-of-structures-in-c/#google_vignette">https://overiq.com/c-programming-101/array-of-structures-in-c/#google_vignette</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

