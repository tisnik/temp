<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba sešitů ve formátu XLSX v Pythonu: knihovna XlsxWriter (pokračování)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba sešitů ve formátu XLSX v Pythonu: knihovna XlsxWriter (pokračování)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V úvodním článku o knihovně XlsxWriter jsme se seznámili pouze se základními poskytovanými možnostmi. Proto se dnes zaměříme na některé pokročilejší vlastnosti: na vytváření sloučených buněk, podmíněné formáty buněk, definovaná jména buněk, podporu pro tvorbu automatických filtrů atd.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba sešitů ve formátu XLSX v&nbsp;Pythonu: knihovna XlsxWriter (pokračování)</a></p>
<p><a href="#k02">2. Komentáře přidané k&nbsp;buňkám</a></p>
<p><a href="#k03">3. Alternativní adresování komentářů</a></p>
<p><a href="#k04">4. Větší množství listů v&nbsp;sešitu</a></p>
<p><a href="#k05">5. Pojmenování listů, testování unikátního jména listů</a></p>
<p><a href="#k06">6. Sloučení buněk</a></p>
<p><a href="#k07">7. Překryv sloučených oblastí?</a></p>
<p><a href="#k08">8. Sloučení buněk přes více sloupců a řádků</a></p>
<p><a href="#k09">9. Alternativní určení oblasti buněk, které se mají spojit</a></p>
<p><a href="#k10">*** 10. Podmíněné formátování buněk</a></p>
<p><a href="#k11">*** 11. Další možnosti podmíněného formátování</a></p>
<p><a href="#k12">*** 12. Automatické filtry</a></p>
<p><a href="#k13">*** 13. Další možnosti automatických filtrů</a></p>
<p><a href="#k14">*** 14. Uzamčení buněk</a></p>
<p><a href="#k15">*** 15. Skrytí buněk</a></p>
<p><a href="#k16">*** 16. Validace dat zadávaných do buněk</a></p>
<p><a href="#k17">*** 17. Pojmenování buněk</a></p>
<p><a href="#k18">*** 18. Další objekty vkládané do sešitů</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba sešitů ve formátu XLSX v&nbsp;Pythonu: knihovna XlsxWriter (pokračování)</h2>

<p><a
href="https://www.root.cz/clanky/tvorba-sesitu-ve-formatu-xlsx-v-pythonu-knihovna-xlsxwriter/">V&nbsp;prvním
článku</a> jsme se seznámili pouze se základními možnostmi poskytovanými
knihovnou <i>XlsxWriter</i> určenou pro tvorbu souborů ve formátu XLSX.
Z&nbsp;tohoto důvodu se dnes zaměříme na některé další vybrané (pokročilejší)
vlastnosti, například na vytváření sloučených buněk (což je velmi často
požadováno) v&nbsp;sešitech, podmíněné formáty buněk, definovaná jména buněk,
podporu pro validaci vstupních dat a samozřejmě nezapomeneme ani na podporu při
vkládání různých objektů do sešitů &ndash; týká se to například obrázků,
formátovaných textů (což znamená, že část textu v&nbsp;buňce může mít odlišný
formát), přidávání komentářů k&nbsp;buňkám atd. Sešity vytvořené dnes ukázanými
demonstračními příklady je možné otevřít jak v&nbsp;LibreOffice (Calc), tak i
v&nbsp;Microsoft Office (Excel), ale například i <a
href="http://www.gnumeric.org/">v&nbsp;Gnumericu</a> (který ovšem neumí
zobrazit například formát komentářů, některé varianty podmíněného formátování
apod.).</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;dnešním článku se bude používat
následující terminologie: <i>workbook</i>=sešit, <i>worksheet</i>=list,
<i>cell</i>=buňka.</div></p>

<p>Demonstrační příklady, které si ukážeme v&nbsp;rámci navazujících kapitol,
budou založeny na skriptu, po jehož spuštění se vytvoří nový sešit nazvaný
&bdquo;example14.xlsx&ldquo;. Tento sešit by měl obsahovat jediný list,
v&nbsp;němž bude uložena tabulka s&nbsp;ostylovanými buňkami &ndash; nastaven
bude styl prvních řádků s&nbsp;popisem tabulky a poté první i druhý sloupec
(červená barva resp.&nbsp;modifikovaný numerický styl). Zdrojový kód tohoto
příkladu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, buňky se specifikací číselného formátu."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example14.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8, red_style)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Výsledek po otevření v&nbsp;Gnumericu:</p>

*** image ***
<p><i>Obrázek 1: Vygenerovaný sešit po otevření v&nbsp;tabulkovém
procesoru.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Komentáře přidané k&nbsp;buňkám</h2>

<p>K&nbsp;jednotlivým buňkám v&nbsp;sešitu je možné přidat komentáře. Takové
buňky bývají po otevření v&nbsp;tabulkovém procesoru vizuálně označeny, typicky
červeným trojúhelníkem v&nbsp;jednom z&nbsp;rohů buňky. Komentáře se
k&nbsp;buňkám přidávají metodou <strong>Worksheet.write_comment</strong>, které
lze předat (v&nbsp;první variantě) tyto argumenty:</p>

<pre>
worksheet.write_comment(řádek, sloupec, "text komentáře")
</pre>

<p>V&nbsp;následujícím skriptu jsou přidány komentáře ke všem buňkám
v&nbsp;pravém (druhém) sloupci tabulky:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Tabulka s komentáři přiřazenými k vybraným buňkám."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example21.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8, red_style)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
        <strong>worksheet.write_comment(x, 1, "Výsledek výrazu 1/{}".format(x))</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Výsledek po zobrazení v&nbsp;tabulkovém procesoru:</p>

*** image ***
<p><i>Obrázek 2: Vygenerovaný sešit po otevření v&nbsp;tabulkovém
procesoru.</i></p>

<p>Navíc je možné určit, že se komentáře mají zobrazit ihned po otevření sešitu
v&nbsp;tabulkovém procesoru. Tuto vlastnost sešitu (která však není podporována
všemi tabulkovými procesory) můžeme zapnout následující metodou:</p>

<pre>
worksheet.show_comments()
</pre>

<p>Výsledný skript se od předchozího demonstračního příkladu liší jen nepatrně
&ndash; přidáním volání výše uvedené metody:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Tabulka s komentáři přiřazenými k vybraným buňkám."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example22.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8, red_style)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
        <strong>worksheet.write_comment(x, 1, "Výsledek výrazu 1/{}".format(x))</strong>
&nbsp;
    <i># komentáře by měly být zobrazeny ihned po otevření sešitu</i>
    <strong>worksheet.show_comments()</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Opět se podívejme, jak vypadá výsledek po zobrazení v&nbsp;tabulkovém
procesoru:</p>

*** image ***
<p><i>Obrázek 3: Vygenerovaný sešit po otevření v&nbsp;tabulkovém
procesoru.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Alternativní adresování komentářů</h2>

<p><a href="#k02">V&nbsp;předchozí kapitole</a> se pro přidání komentářů
k&nbsp;buňkám použila následující varianta metody
<strong>Worksheet.write_comment</strong>. V&nbsp;této variantě bylo nutné
specifikovat řádek a sloupec buňky, do které se měl komentář přidat. Adresa
buňky tedy byla určena dvojicí celočíselných indexů, přičemž tyto indexy
začínaly od nuly:</p>

<pre>
worksheet.write_comment(<strong>řádek</strong>, <strong>sloupec</strong>, "text komentáře")
</pre>

<p>Podobně jako u mnoha dalších metod, které nějakým způsobem pracují
s&nbsp;adresami buněk, je i metodu <strong>Worksheet.write_comment</strong>
možné použít v&nbsp;alternativní podobě, v&nbsp;níž je adresa buňky
specifikována stylem &bdquo;A1&ldquo;, tedy stejně, jako je tomu
v&nbsp;tabulkových procesorech (ty ovšem většinou podporují i styl R1C1):</p>

<pre>
worksheet.write_comment(<strong>'A1'</strong>, "text komentáře")
</pre>

<p>Tento druhý způsob adresace se hodí pouze v&nbsp;některých případech,
například pro přidání komentářů k&nbsp;buňkám, které tvoří titulek tabulky. A
právě tento způsob je ukázán v&nbsp;dalším demonstračním příkladu, v&nbsp;němž
jsou komentáře přidány k&nbsp;oběma &bdquo;titulkovým&ldquo; buňkám:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Tabulka s komentáři přiřazenými k vybraným buňkám."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example23.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8, red_style)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <strong>worksheet.write_comment('A1', "Vstupní hodnoty")</strong>
    <strong>worksheet.write_comment('B1', "Vypočtené hodnoty")</strong>
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
        <strong>worksheet.write_comment(x, 1, "Výsledek výrazu 1/{}".format(x))</strong>
&nbsp;
    <i># komentáře by měly být zobrazeny ihned po otevření sešitu</i>
    worksheet.show_comments()
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Výsledek:</p>

*** image ***
<p><i>Obrázek 4: Vygenerovaný sešit po otevření v&nbsp;tabulkovém
procesoru.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Větší množství listů v&nbsp;sešitu</h2>

<p>Všechny sešity, které jsme prozatím vytvořili, obsahovaly pouze jediný list.
V&nbsp;praxi je ovšem mnohdy vyžadováno, aby se do sešitu vložilo větší
množství listů. To pochopitelně není žádný nepřekonatelný problém, protože nový
list lze vytvořit metodou <strong>Workbook.add_worksheet()</strong>, která
vrací objekt využívaný pro přidání objektů do listu popř.&nbsp;pro zápis dat do
jednotlivých buněk, které list tvoří. Sešit s&nbsp;větším množstvím listů lze
tedy vytvořit naprosto triviálním způsobem:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s několika listy."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example24.xlsx')</strong> as workbook:
    <i># vytvoření několika listů</i>
    for name in range(4):
        <i># vložení nového listu do sešitu</i>
        worksheet = <strong>workbook.add_worksheet()</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

*** image ***
<p><i>Obrázek 5: Sešit s&nbsp;větším množstvím listů.</i></p>

<p><div class="rs-tip-major">Poznámka: na tomto místě je vhodné upozornit na
to, že ačkoli má například Microsoft Excel některá (mnohdy zásadní) omezení,
tak počet listů není limitován. Resp.&nbsp;přesněji řečeno omezeni jsme pouze
volnou kapacitou operační paměti.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Pojmenování listů, testování unikátního jména listů</h2>

<p>Listy, které tvoří celý sešit, je vhodné pojmenovat. Toho docílíme snadno,
protože nám již známá metoda <strong>Worksheet.add_worksheet()</strong>
akceptuje i jméno listu, což je řetězec, jehož obsah je však limitován (viz
další text). Toto chování metody <strong>Worksheet.add_worksheet()</strong> si
můžeme snadno ověřit:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s několika listy."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example25.xlsx')</strong> as workbook:
    <i># vytvoření několika listů</i>
    for name in ("První", "Druhý", "Třetí", "Čtvrtý"):
        <i># vložení nového listu do sešitu</i>
        worksheet = <strong>workbook.add_worksheet(name)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

*** image ***
<p><i>Obrázek 6: Sešit s&nbsp;větším množstvím explicitně pojmenovaných listů.</i></p>

<p><div class="rs-tip-major">Poznámka: je vhodné, aby jména listů obsahovala
maximálně 31 znaků (i když tento limit ve vlastním formátu neexistuje, jedná se
o omezení GUI). Dále je nutné si uvědomit, že jména listů jsou použita jako
identifikátory, například při adresaci buněk atd. Z&nbsp;tohoto důvodu existují
i další omezení na jména listů. Například by se ve jménu neměly vyskytovat
znaky &bdquo;\&ldquo;, &bdquo;/&ldquo;, &bdquo;?&ldquo;, &bdquo;*&ldquo;,
&bdquo;[&ldquo; a &bdquo;]&ldquo;. Dále by jména neměla začínat nebo končit
apostrofem (protože jména sešitů s&nbsp;mezerami se zapisují do apostrofů) a
konečně (neověřeno) by jméno sešitu nemělo znít &bdquo;history&ldquo;,
&bdquo;History&ldquo; ani obsahovat další varianty.</div></p>

<p>Knihovna <i>XlsxWriter</i> taktéž kontroluje, zda jsou jména listů unikátní,
tj.&nbsp;zda se nesnažíme vytvořit dva listy se shodným jménem. Toto chování si
můžeme snadno ověřit spuštěním následujícího demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s několika listy."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example26.xlsx')</strong> as workbook:
    <i># vytvoření několika listů</i>
    for name in (<strong>"První"</strong>, "Druhý", "Třetí", "Čtvrtý", <strong>"První"</strong>):
        <i># vložení nového listu do sešitu</i>
        worksheet = workbook.add_worksheet(name)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Po spuštění tohoto skriptu se bude detekovat pokus o vytvoření dvou listů se
stejným jménem:</p>

<pre>
Traceback (most recent call last):
  File "26_more_worksheets_names.py", line 13, in &lt;module&gt;
    worksheet = workbook.add_worksheet(name)
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/xlsxwriter/workbook.py", line 189, in add_worksheet
    return self._add_sheet(name, worksheet_class=worksheet_class)
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/xlsxwriter/workbook.py", line 759, in _add_sheet
    name = self._check_sheetname(name, isinstance(worksheet, Chartsheet))
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/xlsxwriter/workbook.py", line 831, in _check_sheetname
    sheetname)
xlsxwriter.exceptions.DuplicateWorksheetName: Sheetname 'První', with case ignored, is already in use.
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Sloučení buněk</h2>

<p>V&nbsp;sešitech je možné sloučit buňky ležící vedle sebe na stejném řádku,
pod sebou ve stejném sloupci, nebo v&nbsp;případě, že tvoří spojitou
obdélníkovou oblast. Sloučení buněk je pochopitelně podporováno i knihovnou
<i>XlsxWriter</i>. Sloučenou buňku je v&nbsp;této knihovně možné vytvořit
metodou nazvanou <strong>Worksheet.merge_range</strong>, které se předává
definice oblasti se sloučenými buňkami, obsah sloučené buňky a popř.&nbsp;i
specifikace formátu sloučené buňky (protože jinak by nebylo zřejmé, který
formát se má použít, pokud se slučují buňky s&nbsp;různými formáty).</p>

<p>Vytvoření buňky vzniklé sloučením více buněk na stejném řádku, konkrétně
buněk <strong>B2</strong>, <strong>C2</strong> a <strong>D2</strong>, by mohlo
být provedeno takto:</p>

<pre>
worksheet.merge_range('B2:D2', 'Sloučená buňka', format1)
</pre>

<p>Následuje podobný příklad, ovšem nyní slučující buňky ležící pod sebou ve
stejném sloupci. Konkrétně se jedná o buňky <strong>F2</strong>,
<strong>F3</strong> a <strong>F4</strong>:</p>

<pre>
worksheet.merge_range('F2:F4', 'Sloučená\nbuňka', format2)
</pre>

<p>V&nbsp;pořadí již dvacátém sedmém demonstračním příkladu je vytvořen sešit
s&nbsp;jediným listem. Tento list obsahuje dvojici sloučených buněk, přičemž
každá z&nbsp;těchto buněk má odlišný styl zobrazení (formát):</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu se sloučenými buňkami."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example27.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># první formát použitý pro zvýraznění sloučené buňky</i>
    format1 = workbook.add_format({
        'bold': 1,
        'border': 1,
        'align': 'center',
        'valign': 'vcenter',
        'fg_color': '#ff8080'})
&nbsp;
    <i># druhý formát použitý pro zvýraznění sloučené buňky</i>
    format2 = workbook.add_format({
        'bold': 1,
        'border': 1,
        'align': 'center',
        'valign': 'vcenter',
        'fg_color': '#80ff80'})
&nbsp;
    <i># sloučená buňka (přes více sloupců)</i>
    <strong>worksheet.merge_range('B2:D2', 'Sloučená buňka', format1)</strong>
&nbsp;
    <i># sloučená buňka (přes více řádků)</i>
    <strong>worksheet.merge_range('F2:F4', 'Sloučená\nbuňka', format2)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Výsledek může po otevření sešitu v&nbsp;tabulkovém procesoru vypadat
takto:</p>

*** image ***
<p><i>Obrázek 7: Sešit se sloučenými buňkami.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Překryv sloučených oblastí?</h2>

<p>Zdánlivě nic nám nebrání v&nbsp;tom, abychom vytvořili sloučené buňky, které
se budou překrývat. Například se může jednat o pokus o vytvoření sloučené buňky
ze základních buněk <strong>B2</strong>, <strong>C2</strong> a
<strong>D2</strong> a následně o sloučení buněk <strong>B2</strong>,
<strong>B3</strong> a <strong>B4</strong>:</p>

<pre>
<i># sloučená buňka</i>
worksheet.merge_range('B2:D2', 'Sloučená buňka', format1)
&nbsp;
<i># sloučená buňka</i>
worksheet.merge_range('B2:B4', 'Sloučená\nbuňka', format2)
</pre>

<p>Tento pokus sice povede k&nbsp;vytvoření souboru se sešitem, ovšem tabulkové
procesory většinou takto sloučené buňky odmítnou načíst, což je ostatně patrné
i z&nbsp;následujícího screenshotu:</p>

*** image ***
<p><i>Obrázek 8: Výsledek pokusu o načtení sešitu se sloučenými oblastmi, které
se překrývají.</i></p>

<p>Následuje úplný zdrojový kód s&nbsp;výše uvedenými sloučenými oblastmi:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Pokus o vytvoření sešitu se sloučenými buňkami."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example28.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># první formát použitý pro zvýraznění sloučené buňky</i>
    format1 = workbook.add_format({
        'bold': 1,
        'border': 1,
        'align': 'center',
        'valign': 'vcenter',
        'fg_color': '#ff8080'})
&nbsp;
    <i># druhý formát použitý pro zvýraznění sloučené buňky</i>
    format2 = workbook.add_format({
        'bold': 1,
        'border': 1,
        'align': 'center',
        'valign': 'vcenter',
        'fg_color': '#80ff80'})
&nbsp;
    <i># sloučená buňka</i>
    <strong>worksheet.merge_range('B2:D2', 'Sloučená buňka', format1)</strong>
&nbsp;
    <i># sloučená buňka</i>
    <strong>worksheet.merge_range('B2:B4', 'Sloučená\nbuňka', format2)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Sloučení buněk přes více sloupců a řádků</h2>

<p>Knihovna <i>XlsxWriter</i>, ostatně stejně jako většina tabulkových
procesorů, podporuje sloučení buněk přes větší množství sloupců a řádků.
Slučované buňky tedy budou vždy tvořit obdélníkovou oblast. Sloučení celé
oblasti od <strong>B2</strong> do <strong>D4</strong> je realizováno
v&nbsp;následujícím demonstračním příkladu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu se sloučenými buňkami."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example29.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># formát použitý pro zvýraznění sloučené buňky</i>
    format1 = workbook.add_format({
        'bold': 1,
        'border': 1,
        'align': 'center',
        'valign': 'vcenter',
        'fg_color': '#ff8080'})
&nbsp;
    <i># sloučená buňka</i>
    <strong>worksheet.merge_range('B2:D4', 'Sloučená buňka', format1)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Výsledek po zobrazení v&nbsp;tabulkovém procesoru:</p>

*** image ***
<p><i>Obrázek 9: Sešit se sloučenou buňkou, která vznikla sloučením obdélníkové
oblasti.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Alternativní určení oblasti buněk, které se mají spojit</h2>

<p>Mnohdy se setkáme s&nbsp;požadavkem, aby určení slučované oblasti bylo
provedeno programově (tedy ve skriptu). V&nbsp;takovém případě je manipulace
s&nbsp;adresami buněk, resp.&nbsp;s&nbsp;rozsahem buněk ve formátu
&bdquo;A1:D4&ldquo;, zbytečně komplikovaná (a výpočty navíc nemusí být zcela
triviální). Alternativní způsob definice celé oblasti spočívá v&nbsp;tom, že se
specifikuje index řádku a sloupce první buňky (indexuje se od nuly) a index
řádku a sloupce buňky poslední. Tento způsob ovšem nemusí být příliš
přehledný:</p>

<pre>
worksheet.merge_range(řádek, sloupec, řádek, sloupec, obsah sloučené buňky, formát_sloučené_buňky)</strong>
</pre>

<p>Skript, který byl uveden v&nbsp;sedmé kapitole, tedy můžeme upravit do
následující podoby:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu se sloučenými buňkami."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example30.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># první formát použitý pro zvýraznění sloučené buňky</i>
    format1 = workbook.add_format({
        'bold': 1,
        'border': 1,
        'align': 'center',
        'valign': 'vcenter',
        'fg_color': '#ff8080'})
&nbsp;
    <i># druhý formát použitý pro zvýraznění sloučené buňky</i>
    format2 = workbook.add_format({
        'bold': 1,
        'border': 1,
        'align': 'center',
        'valign': 'vcenter',
        'fg_color': '#80ff80'})
&nbsp;
    <i># sloučená buňka</i>
    <strong>worksheet.merge_range(1, 2, 1, 4, 'Sloučená buňka', format1)</strong>
&nbsp;
    <i># sloučená buňka</i>
    <strong>worksheet.merge_range(1, 6, 4, 6, 'Sloučená\nbuňka', format2)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

*** image ***
<p><i>Obrázek 10: Sešit se sloučenými buňkami.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Podmíněné formátování buněk</h2>

<p>Již v&nbsp;úvodním článku o knihovně <i>XlsxWriter</i> jsme si ukázali,
jakým způsobem je možné definovat formát buněk. Připomeňme si, že formát je
specifikován formou slovníku a tvoří se metodou
<strong>Workbook.add_format</strong> (přičemž celkový počet formátů je většinou
tabulkovými procesory omezen):</p>

<pre>
<i># definice nového stylu</i>
bold_style = workbook.add_format({'bold': True})
</pre>

<p>Formát lze předat v&nbsp;posledním parametry nám již velmi dobře známé
metody <strong>Worksheet.write</strong>:</p>

<pre>
worksheet.write('A1', 'x', bold_style)
</pre>

<p>Tabulkové procesory ovšem většinou podporují i <i>podmíněné formátování</i>,
což jsou formáty, které jsou na buňku aplikovány jen tehdy, pokud je splněna
(či naopak nesplněna) nějaká podmínka. Tímto způsobem je možné například
zvýraznit nějak důležité či chybné popř.&nbsp;zcela chybějící hodnoty atd. I
podmíněné formátování je knihovnou <i>XlsxWriter</i> podporováno, takže si
v&nbsp;dalším textu popíšeme základní způsoby práce s&nbsp;takovými
formáty.</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
"""Podmíněné formátování."""
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example31.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format = {
             'type':     'cell',
             'criteria': '>=',
             'value':    0.2,
             'format':   red_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format('B2:B21', conditional_format)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
"""Podmíněné formátování, alternativní adresování buněk."""
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example32.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format = {
             'type':     'cell',
             'criteria': '>=',
             'value':    0.2,
             'format':   red_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format(1, 1, 20, 1, conditional_format)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Další možnosti podmíněného formátování</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
"""Podmíněné formátování, hodnoty mezi zadanými mezemi."""
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example33.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format = {
             'type':     'cell',
             'criteria': 'between',
             'minimum':  5,
             'maximum':  15,
             'format':   red_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u prvního sloupce hodnot</i>
    worksheet.conditional_format(1, 0, 20, 0, conditional_format)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
"""Podmíněné formátování, hodnoty mimo zadané meze."""
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example33.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice dalšího nového stylu</i>
    green_style = workbook.add_format()
    green_style.set_font_color('green')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format_1 = {
             'type':     'cell',
             'criteria': 'between',
             'minimum':  5,
             'maximum':  15,
             'format':   red_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format(1, 0, 20, 0, conditional_format_1)
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format_2 = {
             'type':     'cell',
             'criteria': 'not between',
             'minimum':  0.1,
             'maximum':  0.8,
             'format':   green_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u prvního sloupce hodnot</i>
    worksheet.conditional_format(1, 0, 20, 0, conditional_format_1)
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format(1, 1, 20, 1, conditional_format_2)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
"""Podmíněné formátování, hodnoty pod průměrem."""
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example34.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice dalšího nového stylu</i>
    green_style = workbook.add_format()
    green_style.set_font_color('green')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format_1 = {
             'type':     'cell',
             'criteria': 'between',
             'minimum':  5,
             'maximum':  15,
             'format':   red_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format(1, 0, 20, 0, conditional_format_1)
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format_2 = {
             'type':     'average',
             'criteria': 'above',
             'format':   green_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u prvního sloupce hodnot</i>
    worksheet.conditional_format(1, 0, 20, 0, conditional_format_1)
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format(1, 1, 20, 1, conditional_format_2)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Automatické filtry</h2>

<p>Velmi užitečnou vlastností většiny tabulkových procesorů je podpora
takzvaných automatických filtrů. Tuto funkci pravděpodobně znáte z&nbsp;praxe
&ndash; v&nbsp;tabulkovém procesoru je možné nastavit, že se v&nbsp;buňkách
tvořících nadpisy jednotlivých sloupců vytvoří kontextová menu (realizovaná
většinou rozbalovacími seznamy), které obsahují předpočítané parametry filtru
(například všechny položky, nejčastější hodnoty buněk atd.). Výběrem položek
z&nbsp;jednotlivých filtrů dochází k&nbsp;výběru jen určitých údajů
z&nbsp;potenciálně rozsáhlé tabulky.</p>

<p>V&nbsp;knihovně <i>XlsxWriter</i> se filtry specifikují vždy pro celou
oblast, například pro první sloupec tabulky s&nbsp;rozsahem od
<strong>A1</strong> do <strong>A21</strong>. Nejprve je nutné tento filtr
povolit (aby se vůbec zobrazil v&nbsp;tabulkovém procesoru):</p>

<pre>
<i># nastavení automatického filtru</i>
<strong>worksheet.autofilter('A1:A21')</strong>
</pre>

<p>Takto jednoduše definovaný automatický filtr je použit v&nbsp;dalším
demonstračním příkladu, jehož úplný zdrojový kód vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
"""Automatické filtry."""
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example36.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># nastavení automatického filtru</i>
    <strong>worksheet.autofilter('A1:A21')</strong>
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format = {
             'type':     'cell',
             'criteria': '&gt;=',
             'value':    0.2,
             'format':   red_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format('B2:B21', conditional_format)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

"""Automatické filtry."""

import xlsxwriter

<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example37.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()

    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')

    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')

    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})

    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)

    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)

    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')

    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)

    <i># nastavení automatického filtru pro dva sloupce</i>
    worksheet.autofilter('A1:B21')

    <i># formát s podmínkou</i>
    conditional_format = {
             'type':     'cell',
             'criteria': '>=',
             'value':    0.2,
             'format':   red_style
            }

    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format('B2:B21', conditional_format)

    <i># sešit bude uzavřen automaticky</i>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Další možnosti automatických filtrů</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

"""Automatické filtry."""

import xlsxwriter

<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example38.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()

    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')

    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')

    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})

    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)

    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)

    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')

    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)

    <i># nastavení automatického filtru pro dva sloupce</i>
    worksheet.autofilter('A1:B21')

    worksheet.filter_column('A', 'x > 10')

    <i># formát s podmínkou</i>
    conditional_format = {
             'type':     'cell',
             'criteria': '>=',
             'value':    0.2,
             'format':   red_style
            }

    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format('B2:B21', conditional_format)

    <i># sešit bude uzavřen automaticky</i>
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

"""Automatické filtry."""

import xlsxwriter

<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example39.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()

    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')

    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')

    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})

    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 20)

    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)

    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
    worksheet.write_string('C1', 'valid?')

    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
        msg = "yes" if x % 2 == 0 else "no"
        worksheet.write_string(x, 2, msg)

    <i># nastavení automatického filtru</i>
    worksheet.autofilter('A1:C21')

    <i># formát s podmínkou</i>
    conditional_format = {
             'type':     'cell',
             'criteria': '>=',
             'value':    0.2,
             'format':   red_style
            }

    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format('B2:B21', conditional_format)

    <i># sešit bude uzavřen automaticky</i>
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Uzamčení buněk</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

"""Uzamčení buněk."""

import xlsxwriter

<i># vytvoření objektu reprezentujícího celý sešit</i>
with xlsxwriter.Workbook('example40.xlsx') as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()

    <i># uzamčení sešitu</i>
    worksheet.protect()

    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')

    <i># definice dalšího nového stylu</i>
    locked_style = workbook.add_format()
    locked_style.set_font_color('red')

    <i># buňky budou uzamčeny</i>
    locked_style.set_locked('True')

    <i># definice dalšího nového stylu</i>
    unlocked_style = workbook.add_format()

    <i># buňky budou uzamčeny</i>
    unlocked_style.set_locked('False')

    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})

    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 20)

    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)

    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
    worksheet.write_string('C1', 'valid?')

    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x, locked_style)
        worksheet.write_number(x, 1, 1.0/x)
        msg = "yes" if x % 2 == 0 else "no"
        worksheet.write_string(x, 2, msg, unlocked_style)

    <i># nastavení automatického filtru</i>
    worksheet.autofilter('A1:C21')

    <i># sešit bude uzavřen automaticky</i>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Skrytí buněk</h2>

<p></p>

<pre>
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Validace dat zadávaných do buněk</h2>

<p></p>

<pre>
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Pojmenování buněk</h2>

<p></p>

<pre>
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Další objekty vkládané do sešitů</h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech <a
href="https://www.root.cz/clanky/tvorba-sesitu-ve-formatu-xlsx-v-pythonu-knihovna-xlsxwriter/">minule</a>
i dnes popsaných demonstračních příkladů určených pro programovací jazyk Python
3 a nejnovější stabilní verzi knihovny XlsxWriter byly uloženy do Git
repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_empty_worksheet.py</td><td>vytvoření prázdného sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/01_empty_worksheet.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/01_empty_worksheet.py</a></td></tr>
<tr><td> 2</td><td>02_with_statement.py</td><td>vytvoření prázdného sešitu, zajištění uzavření objektu worksheet</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/02_with_statement.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/02_with_statement.py</a></td></tr>
<tr><td> 3</td><td>03_simple_data.py</td><td>vytvoření sešitu s několika vyplněnými buňkami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/03_simple_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/03_simple_data.py</a></td></tr>
<tr><td> 4</td><td>04_alternative_addressing.py</td><td>vytvoření sešitu s několika vyplněnými buňkami, alternativní adresování buněk</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/04_alternative_addressing.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/04_alternative_addressing.py</a></td></tr>
<tr><td> 5</td><td>05_fill_in_table.py</td><td>vytvoření sešitu s delší tabulkou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/05_fill_in_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/05_fill_in_table.py</a></td></tr>
<tr><td> 6</td><td>06_column_widths.py</td><td>vytvoření sešitu s delší tabulkou, nastavení šířky sloupců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/06_column_widths.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/06_column_widths.py</a></td></tr>
<tr><td> 7</td><td>07_styles.py</td><td>nastavení stylů vybraných buněk</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/07_styles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/07_styles.py</a></td></tr>
<tr><td> 8</td><td>08_more_styles.py</td><td>nastavení stylů vybraných buněk</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/08_more_styles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/08_more_styles.py</a></td></tr>
<tr><td> 9</td><td>09_alternative_styles.py</td><td>alternativní způsob nastavení stylů vybraných buněk</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/09_alternative_styles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/09_alternative_styles.py</a></td></tr>
<tr><td>10</td><td>10_format_for_row.py</td><td>nastavení stylu celých řádků v&nbsp;sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/10_format_for_row.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/10_format_for_row.py</a></td></tr>
<tr><td>11</td><td>11_format_set_column.py</td><td>nastavení stylu celých sloupců v&nbsp;sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/11_format_set_column.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/11_format_set_column.py</a></td></tr>
<tr><td>12</td><td>12_write_proper_types.py</td><td>buňky s&nbsp;explicitní specifikací datového typu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/12_write_proper_types.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/12_write_proper_types.py</a></td></tr>
<tr><td>13</td><td>13_numeric_format.py</td><td>buňky se specifikací číselného formátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/13_numeric_format.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/13_numeric_format.py</a></td></tr>
<tr><td>14</td><td>14_numeric_format.py</td><td>buňky se specifikací číselného formátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/14_numeric_format.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/14_numeric_format.py</a></td></tr>
<tr><td>15</td><td>15_alternative_numeric_format.py</td><td>další způsob specifikace číselného formátu buněk tabulky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/15_alternative_numeric_format.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/15_alternative_numeric_format.py</a></td></tr>
<tr><td>16</td><td>16_font_size.py</td><td>změna velikosti písma v&nbsp;různých buňkách tabulky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/16_font_size.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/16_font_size.py</a></td></tr>
<tr><td>17</td><td>17_named_colors.py</td><td>použití pojmenovaných barev pro změnu barvy písma</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/17_named_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/17_named_colors.py</a></td></tr>
<tr><td>18</td><td>18_html_colors.py</td><td>použití šestice hexadecimálních číslic pro změnu barvy písma</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/18_html_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/18_html_colors.py</a></td></tr>
<tr><td>19</td><td>19_named_bg_colors.py</td><td>použití pojmenovaných barev pro změnu barvy pozadí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/19_named_bg_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/19_named_bg_colors.py</a></td></tr>
<tr><td>20</td><td>20_html_background_colors.py</td><td>použití šestice hexadecimálních číslic pro změnu barvy pozadí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/20_html_background_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/20_html_background_colors.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>21_comments.py</td><td>komentáře přidané k&nbsp;buňkám</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/21_comments.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/21_comments.py</a></td></tr>
<tr><td>22</td><td>22_show_comments.py</td><td>komentáře, které se zobrazí ihned po otevření sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/22_show_comments.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/22_show_comments.py</a></td></tr>
<tr><td>23</td><td>23_comments_addressing.py</td><td>alternativní adresování buněk s&nbsp;komentáři</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/23_comments_addressing.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/23_comments_addressing.py</a></td></tr>
<tr><td>24</td><td>24_more_worksheets.py</td><td>více listů v&nbsp;sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/24_more_worksheets.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/24_more_worksheets.py</a></td></tr>
<tr><td>25</td><td>25_more_worksheets.py</td><td>pojmenované listy v&nbsp;sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/25_more_worksheets.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/25_more_worksheets.py</a></td></tr>
<tr><td>26</td><td>26_more_worksheets_names.py</td><td>kolize jmen listů v&nbsp;sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/26_more_worksheets_names.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/26_more_worksheets_names.py</a></td></tr>
<tr><td>27</td><td>27_merged_cells.py</td><td>sloučení buněk na listu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/27_merged_cells.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/27_merged_cells.py</a></td></tr>
<tr><td>28</td><td>28_merged_cells_error.py</td><td>překryv sloučených oblastí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/28_merged_cells_error.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/28_merged_cells_error.py</a></td></tr>
<tr><td>29</td><td>29_merged_cells.py</td><td>sloučení buněk přes více sloupců a řádků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/29_merged_cells.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/29_merged_cells.py</a></td></tr>
<tr><td>30</td><td>30_merged_cells_addressing.py</td><td>alternativní určení oblasti buněk, které se mají spojit</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/30_merged_cells_addressing.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/30_merged_cells_addressing.py</a></td></tr>
<tr><td>31</td><td>31_conditional_formatting.py</td><td>podmíněné formátování buněk</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/31_conditional_formatting.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/31_conditional_formatting.py</a></td></tr>
<tr><td>32</td><td>32_conditional_formatting_addressing.py</td><td>podmíněné formátování, alternativní adresace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/32_conditional_formatting_addressing.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/32_conditional_formatting_addressing.py</a></td></tr>
<tr><td>33</td><td>33_conditional_formatting_between.py</td><td>použití podmínky &bdquo;between&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/33_conditional_formatting_between.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/33_conditional_formatting_between.py</a></td></tr>
<tr><td>34</td><td>34_conditional_formatting_not_between.py</td><td>použití podmínky &bdquo;not between&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/34_conditional_formatting_not_between.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/34_conditional_formatting_not_between.py</a></td></tr>
<tr><td>35</td><td>35_conditional_formatting_average.py</td><td>použití klauzule &bdquo;average&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/35_conditional_formatting_average.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/35_conditional_formatting_average.py</a></td></tr>
<tr><td>36</td><td>36_autofilter.py</td><td>automatický filtr hodnot ve sloupci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/36_autofilter.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/36_autofilter.py</a></td></tr>
<tr><td>37</td><td>37_autofilters.py</td><td>větší množství automatických filtrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/37_autofilters.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/37_autofilters.py</a></td></tr>
<tr><td>38</td><td>38_autofilters_data.py</td><td>vlastní automatický filtr</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/38_autofilters_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/38_autofilters_data.py</a></td></tr>
<tr><td>39</td><td>39_autofilter_text.py</td><td>automatický filtr a sloupec obsahující opakující se hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/39_autofilter_text.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/39_autofilter_text.py</a></td></tr>
<tr><td>40</td><td>40_locked_cells.py</td><td>uzamčení sešitu, vybraných buněk atd.</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/40_locked_cells.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/40_locked_cells.py</a></td></tr>
<tr><td>41</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/</a></td></tr>
<tr><td>42</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/</a></td></tr>
<tr><td>43</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Comparison of spreadsheet software<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_spreadsheet_software">https://en.wikipedia.org/wiki/Comparison_of_spreadsheet_software</a>
</li>

<li>Creating Excel files with Python and XlsxWriter<br />
<a href="https://xlsxwriter.readthedocs.io/">https://xlsxwriter.readthedocs.io/</a>
</li>

<li>XlsxWriter<br />
<a href="https://github.com/jmcnamara/XlsxWriter">https://github.com/jmcnamara/XlsxWriter</a>
</li>

<li>openpyxl - A Python library to read/write Excel 2010 xlsx/xlsm files<br />
<a href="https://openpyxl.readthedocs.io/en/stable/index.html">https://openpyxl.readthedocs.io/en/stable/index.html</a>
</li>

<li>Spreadsheet Files<br />
<a href="https://fileinfo.com/filetypes/spreadsheet">https://fileinfo.com/filetypes/spreadsheet</a>
</li>

<li>OpenDocument<br />
<a href="https://en.wikipedia.org/wiki/OpenDocument">https://en.wikipedia.org/wiki/OpenDocument</a>
</li>

<li>Tvorba sešitů pro tabulkové procesory v&nbsp;programovacím jazyku Go<br />
<a href="https://www.root.cz/clanky/tvorba-sesitu-pro-tabulkove-procesory-v-programovacim-jazyku-go/">https://www.root.cz/clanky/tvorba-sesitu-pro-tabulkove-procesory-v-programovacim-jazyku-go/</a>
</li>

<li>Spreadsheet<br />
<a href="https://en.wikipedia.org/wiki/Spreadsheet">https://en.wikipedia.org/wiki/Spreadsheet</a>
</li>

<li>List of spreadsheet software<br />
<a href="https://en.wikipedia.org/wiki/List_of_spreadsheet_software">https://en.wikipedia.org/wiki/List_of_spreadsheet_software</a>
</li>

<li>Processing spreadsheet data in Go<br />
<a href="https://appliedgo.net/spreadsheet/">https://appliedgo.net/spreadsheet/</a>
</li>

<li>Comma-separated values<br />
<a href="https://en.wikipedia.org/wiki/Comma-separated_values">https://en.wikipedia.org/wiki/Comma-separated_values</a>
</li>

<li>Common Format and MIME Type for Comma-Separated Values (CSV) Files<br />
<a href="https://tools.ietf.org/html/rfc4180">https://tools.ietf.org/html/rfc4180</a>
</li>

<li>Tab-separated values<br />
<a href="https://en.wikipedia.org/wiki/Tab-separated_values">https://en.wikipedia.org/wiki/Tab-separated_values</a>
</li>

<li>Office Open XML (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Office_Open_XML">https://en.wikipedia.org/wiki/Office_Open_XML</a>
</li>

<li>Standard ECMA-376: Office Open XML File Formats<br />
<a href="https://www.ecma-international.org/publications/standards/Ecma-376.htm">https://www.ecma-international.org/publications/standards/Ecma-376.htm</a>
</li>

<li>A Simple File Format for NumPy Arrays<br />
<a href="https://docs.scipy.org/doc/numpy-1.14.2/neps/npy-format.html">https://docs.scipy.org/doc/numpy-1.14.2/neps/npy-format.html</a>
</li>

<li>numpy.lib.format<br />
<a href="https://numpy.org/devdocs/reference/generated/numpy.lib.format.html">https://numpy.org/devdocs/reference/generated/numpy.lib.format.html</a>
</li>

<li>The NumPy array: a structure for efficient numerical computation<br />
<a href="https://arxiv.org/pdf/1102.1523.pdf">https://arxiv.org/pdf/1102.1523.pdf</a>
</li>

<li>numpy.ndarray.tofile<br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile">https://numpy.org/doc/stable/reference/generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile</a>
</li>

<li>numpy.fromfile<br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.fromfile.html">https://numpy.org/doc/stable/reference/generated/numpy.fromfile.html</a>
</li>

<li>How to read part of binary file with numpy?<br />
<a href="https://stackoverflow.com/questions/14245094/how-to-read-part-of-binary-file-with-numpy">https://stackoverflow.com/questions/14245094/how-to-read-part-of-binary-file-with-numpy</a>
</li>

<li>How to read binary files in Python using NumPy?<br />
<a href="https://stackoverflow.com/questions/39762019/how-to-read-binary-files-in-python-using-numpy">https://stackoverflow.com/questions/39762019/how-to-read-binary-files-in-python-using-numpy</a>
</li>

<li>Understanding the Open XML file formats<br />
<a href="https://docs.microsoft.com/en-us/office/open-xml/understanding-the-open-xml-file-formats">https://docs.microsoft.com/en-us/office/open-xml/understanding-the-open-xml-file-formats</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

