<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba sešitů ve formátu XLSX v Pythonu: knihovna XlsxWriter (pokračování)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba sešitů ve formátu XLSX v Pythonu: knihovna XlsxWriter (pokračování)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V úvodním článku o knihovně XlsxWriter jsme se seznámili pouze se základními poskytovanými možnostmi. Proto se dnes zaměříme na některé pokročilejší vlastnosti: na vytváření sloučených buněk, podmíněné formáty buněk, definovaná jména buněk, podporu pro tvorbu automatických filtrů atd.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba sešitů ve formátu XLSX v&nbsp;Pythonu: knihovna XlsxWriter (pokračování)</a></p>
<p><a href="#k02">2. Komentáře přidané k&nbsp;buňkám</a></p>
<p><a href="#k03">3. Alternativní adresování komentářů</a></p>
<p><a href="#k04">4. Větší množství listů v&nbsp;sešitu</a></p>
<p><a href="#k05">5. Pojmenování listů, testování unikátního jména listů</a></p>
<p><a href="#k06">6. Sloučení buněk</a></p>
<p><a href="#k07">7. Překryv sloučených oblastí?</a></p>
<p><a href="#k08">8. Sloučení buněk přes více sloupců a řádků</a></p>
<p><a href="#k09">9. Alternativní určení oblasti buněk, které se mají spojit</a></p>
<p><a href="#k10">10. Podmíněné formátování buněk</a></p>
<p><a href="#k11">11. Další možnosti podmíněného formátování: hodnoty ležící v&nbsp;daném intervalu</a></p>
<p><a href="#k12">12. Podmíněný formát vztažený k&nbsp;více buňkám</a></p>
<p><a href="#k13">13. Automatické filtry</a></p>
<p><a href="#k14">14. Další možnosti automatických filtrů</a></p>
<p><a href="#k15">15. Uzamčení buněk</a></p>
<p><a href="#k16">16. Validace dat zadávaných do buněk</a></p>
<p><a href="#k17">17. Sešit obsahující buňku s&nbsp;validátorem</a></p>
<p><a href="#k18">18. Další objekty vkládané do sešitů</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba sešitů ve formátu XLSX v&nbsp;Pythonu: knihovna XlsxWriter (pokračování)</h2>

<p><a
href="https://www.root.cz/clanky/tvorba-sesitu-ve-formatu-xlsx-v-pythonu-knihovna-xlsxwriter/">V&nbsp;prvním
článku</a> jsme se seznámili pouze se základními možnostmi poskytovanými
knihovnou <i>XlsxWriter</i> určenou pro tvorbu souborů ve formátu XLSX.
Z&nbsp;tohoto důvodu se dnes zaměříme na některé další vybrané (pokročilejší)
vlastnosti, například na vytváření sloučených buněk (což je velmi často
požadováno) v&nbsp;sešitech, podmíněné formáty buněk, definovaná jména buněk,
podporu pro validaci vstupních dat a samozřejmě nezapomeneme ani na podporu při
vkládání různých objektů do sešitů &ndash; týká se to například obrázků,
formátovaných textů (což znamená, že část textu v&nbsp;buňce může mít odlišný
formát), přidávání komentářů k&nbsp;buňkám atd. Sešity vytvořené dnes ukázanými
demonstračními příklady je možné otevřít jak v&nbsp;LibreOffice (Calc), tak i
v&nbsp;Microsoft Office (Excel), ale například i <a
href="http://www.gnumeric.org/">v&nbsp;Gnumericu</a> (který ovšem neumí
zobrazit například formát komentářů, některé varianty podmíněného formátování
apod.).</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;dnešním článku se bude používat
následující terminologie: <i>workbook</i>=sešit, <i>worksheet</i>=list,
<i>cell</i>=buňka.</div></p>

<p>Demonstrační příklady, které si ukážeme v&nbsp;rámci navazujících kapitol,
budou založeny na skriptu, po jehož spuštění se vytvoří nový sešit nazvaný
&bdquo;example14.xlsx&ldquo;. Tento sešit by měl obsahovat jediný list,
v&nbsp;němž bude uložena tabulka s&nbsp;ostylovanými buňkami &ndash; nastaven
bude styl prvních řádků s&nbsp;popisem tabulky a poté první i druhý sloupec
(červená barva resp.&nbsp;modifikovaný numerický styl). Zdrojový kód tohoto
příkladu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s delší tabulkou, buňky se specifikací číselného formátu."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example14.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8, red_style)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Výsledek po otevření v&nbsp;Gnumericu:</p>

<img src="https://i.iinfo.cz/images/492/xlsxwriter2-a-1.png" class="image-521132" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="320" height="550" />
<p><i>Obrázek 1: Vygenerovaný sešit po otevření v&nbsp;tabulkovém
procesoru.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Komentáře přidané k&nbsp;buňkám</h2>

<p>K&nbsp;jednotlivým buňkám v&nbsp;sešitu je možné přidat komentáře. Takové
buňky bývají po otevření v&nbsp;tabulkovém procesoru vizuálně označeny, typicky
červeným trojúhelníkem v&nbsp;jednom z&nbsp;rohů buňky. Komentáře se
k&nbsp;buňkám přidávají metodou <strong>Worksheet.write_comment</strong>, které
lze předat (v&nbsp;první variantě) tyto argumenty:</p>

<pre>
worksheet.write_comment(řádek, sloupec, "text komentáře")
</pre>

<p>V&nbsp;následujícím skriptu jsou přidány komentáře ke všem buňkám
v&nbsp;pravém (druhém) sloupci tabulky:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Tabulka s komentáři přiřazenými k vybraným buňkám."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example21.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8, red_style)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
        <strong>worksheet.write_comment(x, 1, "Výsledek výrazu 1/{}".format(x))</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Výsledek po zobrazení v&nbsp;tabulkovém procesoru:</p>

<img src="https://i.iinfo.cz/images/492/xlsxwriter2-a-2.png" class="image-521133" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="320" height="550" />
<p><i>Obrázek 2: Vygenerovaný sešit po otevření v&nbsp;tabulkovém
procesoru.</i></p>

<p>Navíc je možné určit, že se komentáře mají zobrazit ihned po otevření sešitu
v&nbsp;tabulkovém procesoru. Tuto vlastnost sešitu (která však není podporována
všemi tabulkovými procesory) můžeme zapnout následující metodou:</p>

<pre>
worksheet.show_comments()
</pre>

<p>Výsledný skript se od předchozího demonstračního příkladu liší jen nepatrně
&ndash; přidáním volání výše uvedené metody:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Tabulka s komentáři přiřazenými k vybraným buňkám."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example22.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8, red_style)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
        <strong>worksheet.write_comment(x, 1, "Výsledek výrazu 1/{}".format(x))</strong>
&nbsp;
    <i># komentáře by měly být zobrazeny ihned po otevření sešitu</i>
    <strong>worksheet.show_comments()</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Opět se podívejme, jak vypadá výsledek po zobrazení v&nbsp;tabulkovém
procesoru:</p>

<img src="https://i.iinfo.cz/images/492/xlsxwriter2-a-3.png" class="image-521134" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="320" height="550" />
<p><i>Obrázek 3: Vygenerovaný sešit po otevření v&nbsp;tabulkovém
procesoru (Gnumeric tuto vlastnost nepodporuje).</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Alternativní adresování komentářů</h2>

<p><a href="#k02">V&nbsp;předchozí kapitole</a> se pro přidání komentářů
k&nbsp;buňkám použila následující varianta metody
<strong>Worksheet.write_comment</strong>. V&nbsp;této variantě bylo nutné
specifikovat řádek a sloupec buňky, do které se měl komentář přidat. Adresa
buňky tedy byla určena dvojicí celočíselných indexů, přičemž tyto indexy
začínaly od nuly:</p>

<pre>
worksheet.write_comment(<strong>řádek</strong>, <strong>sloupec</strong>, "text komentáře")
</pre>

<p>Podobně jako u mnoha dalších metod, které nějakým způsobem pracují
s&nbsp;adresami buněk, je i metodu <strong>Worksheet.write_comment</strong>
možné použít v&nbsp;alternativní podobě, v&nbsp;níž je adresa buňky
specifikována stylem &bdquo;A1&ldquo;, tedy stejně, jako je tomu
v&nbsp;tabulkových procesorech (ty ovšem většinou podporují i styl R1C1):</p>

<pre>
worksheet.write_comment(<strong>'A1'</strong>, "text komentáře")
</pre>

<p>Tento druhý způsob adresace se hodí pouze v&nbsp;některých případech,
například pro přidání komentářů k&nbsp;buňkám, které tvoří titulek tabulky. A
právě tento způsob je ukázán v&nbsp;dalším demonstračním příkladu, v&nbsp;němž
jsou komentáře přidány k&nbsp;oběma &bdquo;titulkovým&ldquo; buňkám:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Tabulka s komentáři přiřazenými k vybraným buňkám."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example23.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8, red_style)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <strong>worksheet.write_comment('A1', "Vstupní hodnoty")</strong>
    <strong>worksheet.write_comment('B1', "Vypočtené hodnoty")</strong>
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
        <strong>worksheet.write_comment(x, 1, "Výsledek výrazu 1/{}".format(x))</strong>
&nbsp;
    <i># komentáře by měly být zobrazeny ihned po otevření sešitu</i>
    worksheet.show_comments()
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Výsledek:</p>

<img src="https://i.iinfo.cz/images/492/xlsxwriter2-a-4.png" class="image-521135" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="320" height="550" />
<p><i>Obrázek 4: Vygenerovaný sešit po otevření v&nbsp;tabulkovém
procesoru.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Větší množství listů v&nbsp;sešitu</h2>

<p>Všechny sešity, které jsme prozatím vytvořili, obsahovaly pouze jediný list.
V&nbsp;praxi je ovšem mnohdy vyžadováno, aby se do sešitu vložilo větší
množství listů. To pochopitelně není žádný nepřekonatelný problém, protože nový
list lze vytvořit metodou <strong>Workbook.add_worksheet()</strong>, která
vrací objekt využívaný pro přidání objektů do listu popř.&nbsp;pro zápis dat do
jednotlivých buněk, které list tvoří. Sešit s&nbsp;větším množstvím listů lze
tedy vytvořit naprosto triviálním způsobem:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s několika listy."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example24.xlsx')</strong> as workbook:
    <i># vytvoření několika listů</i>
    for name in range(4):
        <i># vložení nového listu do sešitu</i>
        worksheet = <strong>workbook.add_worksheet()</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/492/xlsxwriter2-a-5.png" class="image-521136" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="372" height="71" />
<p><i>Obrázek 5: Sešit s&nbsp;větším množstvím listů.</i></p>

<p><div class="rs-tip-major">Poznámka: na tomto místě je vhodné upozornit na
to, že ačkoli má například Microsoft Excel některá (mnohdy zásadní) omezení,
tak počet listů není limitován. Resp.&nbsp;přesněji řečeno omezeni jsme pouze
volnou kapacitou operační paměti.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Pojmenování listů, testování unikátního jména listů</h2>

<p>Listy, které tvoří celý sešit, je vhodné pojmenovat. Toho docílíme snadno,
protože nám již známá metoda <strong>Worksheet.add_worksheet()</strong>
akceptuje i jméno listu, což je řetězec, jehož obsah je však limitován (viz
další text). Toto chování metody <strong>Worksheet.add_worksheet()</strong> si
můžeme snadno ověřit:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s několika listy."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example25.xlsx')</strong> as workbook:
    <i># vytvoření několika listů</i>
    for name in ("První", "Druhý", "Třetí", "Čtvrtý"):
        <i># vložení nového listu do sešitu</i>
        worksheet = <strong>workbook.add_worksheet(name)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/492/xlsxwriter2-a-6.png" class="image-521137" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="331" height="76" />
<p><i>Obrázek 6: Sešit s&nbsp;větším množstvím explicitně pojmenovaných
listů.</i></p>

<p><div class="rs-tip-major">Poznámka: je vhodné, aby jména listů obsahovala
maximálně 31 znaků (i když tento limit ve vlastním formátu neexistuje, jedná se
o omezení GUI). Dále je nutné si uvědomit, že jména listů jsou použita jako
identifikátory, například při adresaci buněk atd. Z&nbsp;tohoto důvodu existují
i další omezení na jména listů. Například by se ve jménu neměly vyskytovat
znaky &bdquo;\&ldquo;, &bdquo;/&ldquo;, &bdquo;?&ldquo;, &bdquo;*&ldquo;,
&bdquo;[&ldquo; a &bdquo;]&ldquo;. Dále by jména neměla začínat nebo končit
apostrofem (protože jména sešitů s&nbsp;mezerami se zapisují do apostrofů) a
konečně (neověřeno) by jméno sešitu nemělo znít &bdquo;history&ldquo;,
&bdquo;History&ldquo; ani obsahovat další varianty.</div></p>

<p>Knihovna <i>XlsxWriter</i> taktéž kontroluje, zda jsou jména listů unikátní,
tj.&nbsp;zda se nesnažíme vytvořit dva listy se shodným jménem. Toto chování si
můžeme snadno ověřit spuštěním následujícího demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu s několika listy."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example26.xlsx')</strong> as workbook:
    <i># vytvoření několika listů</i>
    for name in (<strong>"První"</strong>, "Druhý", "Třetí", "Čtvrtý", <strong>"První"</strong>):
        <i># vložení nového listu do sešitu</i>
        worksheet = workbook.add_worksheet(name)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Po spuštění tohoto skriptu se bude detekovat pokus o vytvoření dvou listů se
stejným jménem:</p>

<pre>
Traceback (most recent call last):
  File "26_more_worksheets_names.py", line 13, in &lt;module&gt;
    worksheet = workbook.add_worksheet(name)
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/xlsxwriter/workbook.py", line 189, in add_worksheet
    return self._add_sheet(name, worksheet_class=worksheet_class)
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/xlsxwriter/workbook.py", line 759, in _add_sheet
    name = self._check_sheetname(name, isinstance(worksheet, Chartsheet))
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/xlsxwriter/workbook.py", line 831, in _check_sheetname
    sheetname)
xlsxwriter.exceptions.DuplicateWorksheetName: Sheetname 'První', with case ignored, is already in use.
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Sloučení buněk</h2>

<p>V&nbsp;sešitech je možné sloučit buňky ležící vedle sebe na stejném řádku,
pod sebou ve stejném sloupci, nebo v&nbsp;případě, že tvoří spojitou
obdélníkovou oblast. Sloučení buněk je pochopitelně podporováno i knihovnou
<i>XlsxWriter</i>. Sloučenou buňku je v&nbsp;této knihovně možné vytvořit
metodou nazvanou <strong>Worksheet.merge_range</strong>, které se předává
definice oblasti se sloučenými buňkami, obsah sloučené buňky a popř.&nbsp;i
specifikace formátu sloučené buňky (protože jinak by nebylo zřejmé, který
formát se má použít, pokud se slučují buňky s&nbsp;různými formáty).</p>

<p>Vytvoření buňky vzniklé sloučením více buněk na stejném řádku, konkrétně
buněk <strong>B2</strong>, <strong>C2</strong> a <strong>D2</strong>, by mohlo
být provedeno takto:</p>

<pre>
worksheet.merge_range('B2:D2', 'Sloučená buňka', format1)
</pre>

<p>Následuje podobný příklad, ovšem nyní slučující buňky ležící pod sebou ve
stejném sloupci. Konkrétně se jedná o buňky <strong>F2</strong>,
<strong>F3</strong> a <strong>F4</strong>:</p>

<pre>
worksheet.merge_range('F2:F4', 'Sloučená\nbuňka', format2)
</pre>

<p>V&nbsp;pořadí již dvacátém sedmém demonstračním příkladu je vytvořen sešit
s&nbsp;jediným listem. Tento list obsahuje dvojici sloučených buněk, přičemž
každá z&nbsp;těchto buněk má odlišný styl zobrazení (formát):</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu se sloučenými buňkami."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example27.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># první formát použitý pro zvýraznění sloučené buňky</i>
    format1 = workbook.add_format({
        'bold': 1,
        'border': 1,
        'align': 'center',
        'valign': 'vcenter',
        'fg_color': '#ff8080'})
&nbsp;
    <i># druhý formát použitý pro zvýraznění sloučené buňky</i>
    format2 = workbook.add_format({
        'bold': 1,
        'border': 1,
        'align': 'center',
        'valign': 'vcenter',
        'fg_color': '#80ff80'})
&nbsp;
    <i># sloučená buňka (přes více sloupců)</i>
    <strong>worksheet.merge_range('B2:D2', 'Sloučená buňka', format1)</strong>
&nbsp;
    <i># sloučená buňka (přes více řádků)</i>
    <strong>worksheet.merge_range('F2:F4', 'Sloučená\nbuňka', format2)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Výsledek může po otevření sešitu v&nbsp;tabulkovém procesoru vypadat
takto:</p>

<img src="https://i.iinfo.cz/images/492/xlsxwriter2-a-7.png" class="image-521138" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="553" height="229" />
<p><i>Obrázek 7: Sešit se sloučenými buňkami.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Překryv sloučených oblastí?</h2>

<p>Zdánlivě nic nám nebrání v&nbsp;tom, abychom vytvořili sloučené buňky, které
se budou překrývat. Například se může jednat o pokus o vytvoření sloučené buňky
ze základních buněk <strong>B2</strong>, <strong>C2</strong> a
<strong>D2</strong> a následně o sloučení buněk <strong>B2</strong>,
<strong>B3</strong> a <strong>B4</strong>:</p>

<pre>
<i># sloučená buňka</i>
worksheet.merge_range('B2:D2', 'Sloučená buňka', format1)
&nbsp;
<i># sloučená buňka</i>
worksheet.merge_range('B2:B4', 'Sloučená\nbuňka', format2)
</pre>

<p>Tento pokus sice povede k&nbsp;vytvoření souboru se sešitem, ovšem tabulkové
procesory většinou takto sloučené buňky odmítnou načíst, což je ostatně patrné
i z&nbsp;následujícího screenshotu:</p>

<img src="https://i.iinfo.cz/images/492/xlsxwriter2-a-8.png" class="image-521139" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="642" height="504" />
<p><i>Obrázek 8: Výsledek pokusu o načtení sešitu se sloučenými oblastmi, které
se překrývají.</i></p>

<p>Následuje úplný zdrojový kód s&nbsp;výše uvedenými sloučenými oblastmi:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Pokus o vytvoření sešitu se sloučenými buňkami."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example28.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># první formát použitý pro zvýraznění sloučené buňky</i>
    format1 = workbook.add_format({
        'bold': 1,
        'border': 1,
        'align': 'center',
        'valign': 'vcenter',
        'fg_color': '#ff8080'})
&nbsp;
    <i># druhý formát použitý pro zvýraznění sloučené buňky</i>
    format2 = workbook.add_format({
        'bold': 1,
        'border': 1,
        'align': 'center',
        'valign': 'vcenter',
        'fg_color': '#80ff80'})
&nbsp;
    <i># sloučená buňka</i>
    <strong>worksheet.merge_range('B2:D2', 'Sloučená buňka', format1)</strong>
&nbsp;
    <i># sloučená buňka</i>
    <strong>worksheet.merge_range('B2:B4', 'Sloučená\nbuňka', format2)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Sloučení buněk přes více sloupců a řádků</h2>

<p>Knihovna <i>XlsxWriter</i>, ostatně stejně jako většina tabulkových
procesorů, podporuje sloučení buněk přes větší množství sloupců a řádků.
Slučované buňky tedy budou vždy tvořit obdélníkovou oblast. Sloučení celé
oblasti od <strong>B2</strong> do <strong>D4</strong> je realizováno
v&nbsp;následujícím demonstračním příkladu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu se sloučenými buňkami."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example29.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># formát použitý pro zvýraznění sloučené buňky</i>
    format1 = workbook.add_format({
        'bold': 1,
        'border': 1,
        'align': 'center',
        'valign': 'vcenter',
        'fg_color': '#ff8080'})
&nbsp;
    <i># sloučená buňka</i>
    <strong>worksheet.merge_range('B2:D4', 'Sloučená buňka', format1)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Výsledek po zobrazení v&nbsp;tabulkovém procesoru:</p>

<img src="https://i.iinfo.cz/images/492/xlsxwriter2-a-9.png" class="image-521140" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="384" height="252" />
<p><i>Obrázek 9: Sešit se sloučenou buňkou, která vznikla sloučením obdélníkové
oblasti.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Alternativní určení oblasti buněk, které se mají spojit</h2>

<p>Mnohdy se setkáme s&nbsp;požadavkem, aby určení slučované oblasti bylo
provedeno programově (tedy ve skriptu). V&nbsp;takovém případě je manipulace
s&nbsp;adresami buněk, resp.&nbsp;s&nbsp;rozsahem buněk ve formátu
&bdquo;A1:D4&ldquo;, zbytečně komplikovaná (a výpočty navíc nemusí být zcela
triviální). Alternativní způsob definice celé oblasti spočívá v&nbsp;tom, že se
specifikuje index řádku a sloupce první buňky (indexuje se od nuly) a index
řádku a sloupce buňky poslední. Tento způsob ovšem nemusí být příliš
přehledný:</p>

<pre>
worksheet.merge_range(řádek, sloupec, řádek, sloupec, obsah sloučené buňky, formát_sloučené_buňky)</strong>
</pre>

<p>Skript, který byl uveden v&nbsp;sedmé kapitole, tedy můžeme upravit do
následující podoby:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Vytvoření sešitu se sloučenými buňkami."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example30.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># první formát použitý pro zvýraznění sloučené buňky</i>
    format1 = workbook.add_format({
        'bold': 1,
        'border': 1,
        'align': 'center',
        'valign': 'vcenter',
        'fg_color': '#ff8080'})
&nbsp;
    <i># druhý formát použitý pro zvýraznění sloučené buňky</i>
    format2 = workbook.add_format({
        'bold': 1,
        'border': 1,
        'align': 'center',
        'valign': 'vcenter',
        'fg_color': '#80ff80'})
&nbsp;
    <i># sloučená buňka</i>
    <strong>worksheet.merge_range(1, 2, 1, 4, 'Sloučená buňka', format1)</strong>
&nbsp;
    <i># sloučená buňka</i>
    <strong>worksheet.merge_range(1, 6, 4, 6, 'Sloučená\nbuňka', format2)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/492/xlsxwriter2-a-10.png" class="image-521141" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="626" height="246" />
<p><i>Obrázek 10: Sešit se sloučenými buňkami.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Podmíněné formátování buněk</h2>

<p>Již v&nbsp;úvodním článku o knihovně <i>XlsxWriter</i> jsme si ukázali,
jakým způsobem je možné definovat formát buněk. Připomeňme si, že formát je
specifikován formou slovníku a tvoří se metodou
<strong>Workbook.add_format</strong> (přičemž celkový počet formátů je většinou
tabulkovými procesory omezen):</p>

<pre>
<i># definice nového stylu</i>
bold_style = workbook.add_format({'bold': True})
</pre>

<p>Formát lze předat v&nbsp;posledním parametry nám již velmi dobře známé
metody <strong>Worksheet.write</strong> volané při přidávání další buňky do
sešitu:</p>

<pre>
worksheet.write('A1', 'x', bold_style)
</pre>

<p>Tabulkové procesory ovšem většinou podporují i <i>podmíněné formátování</i>,
což jsou formáty, které jsou na buňku aplikovány jen tehdy, pokud je splněna
(či naopak nesplněna) nějaká podmínka. Tímto způsobem je možné například
zvýraznit nějak důležité či chybné popř.&nbsp;zcela chybějící hodnoty atd. I
podmíněné formátování je knihovnou <i>XlsxWriter</i> podporováno, takže si
v&nbsp;dalším textu popíšeme základní způsoby práce s&nbsp;takovými
formáty.</p>

<p>Formát buňky lze specifikovat s&nbsp;podmínkou, která se vztahuje na hodnotu
uloženou v&nbsp;buňce. Typickým příkladem může být obarvení těch buněk, jejichž
hodnota je větší než zadaná konstanta:</p>

<pre>
<i># formát s podmínkou</i>
conditional_format = {
         'type':     'cell',
         'criteria': '&gt;=',
         'value':    0.2,
         'format':   red_style
        }
</pre>

<p>Tento formát můžeme nastavit pro druhý sloupec tabulky, a to konkrétně následovně:</p>

<pre>
<i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
worksheet.conditional_format('B2:B21', conditional_format)
</pre>

<p>Vše bude ukázáno v&nbsp;následujícím skriptu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Podmíněné formátování."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example31.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format = {
             'type':     'cell',
             'criteria': '&gt;=',
             'value':    0.2,
             'format':   red_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    <strong>worksheet.conditional_format('B2:B21', conditional_format)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>S&nbsp;tímto výsledkem:</p>

<img src="https://i.iinfo.cz/images/553/xlsxwriter2-b-1.png" class="image-521143" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="275" height="557" />
<p><i>Obrázek 11: Podmíněný formát buněk ve druhém sloupci.</i></p>

<p>Alternativně je &ndash; podobně jako tomu bylo v&nbsp;případě spojování
buněk &ndash; možné určit oblast pro automatický formát dvojicí adres
řádek:sloupec, a to konkrétně následujícím způsobem:</p>

<pre>
worksheet.conditional_format(řádek, sloupec, řádek, sloupec, conditional_format)
</pre>

<p>Opět si pro úplnost ukažme celý skript, který tuto variantu použije:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Podmíněné formátování, alternativní adresování buněk."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example32.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format = {
             'type':     'cell',
             'criteria': '&gt;=',
             'value':    0.2,
             'format':   red_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    <strong>worksheet.conditional_format(1, 1, 20, 1, conditional_format)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Výsledek by měl být totožný s&nbsp;předchozím příkladem:</p>

<img src="https://i.iinfo.cz/images/553/xlsxwriter2-b-2.png" class="image-521144" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="275" height="557" />
<p><i>Obrázek 12: Podmíněný formát buněk ve druhém sloupci.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Další možnosti podmíněného formátování: hodnoty ležící v&nbsp;daném intervalu</h2>

<p>Podmíněný formát buněk může být založen i na testu, zda se hodnota nachází
mezi (<i>between</i> dvěma limitními hodnotami. Tato podmínka se specifikuje
následujícím způsobem (kritérium je nutné nastavit na
&bdquo;between&ldquo;):</p>

<pre>
conditional_format = {
         'type':     'cell',
         'criteria': 'between',
         'minimum':  5,
         'maximum':  15,
         'format':   red_style
        }
</pre>

<p>Celý skript:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Podmíněné formátování, hodnoty mezi zadanými mezemi."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example33.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format = {
             'type':     'cell',
             'criteria': 'between',
             'minimum':  5,
             'maximum':  15,
             'format':   red_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u prvního sloupce hodnot</i>
    <strong>worksheet.conditional_format(1, 0, 20, 0, conditional_format)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/553/xlsxwriter2-b-3.png" class="image-521145" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="282" height="558" />
<p><i>Obrázek 13: Hodnota červeně obarvených buněk leží v&nbsp;zadaných mezích.</i></p>

<p>Opačná podmínka platná pro buňky, jejichž hodnoty v&nbsp;daném intervalu
<i>neleží</i>, se zapíše pomocí kritéria &bdquo;not between&ldquo;:</p>

<pre>
conditional_format_2 = {
         'type':     'cell',
         'criteria': 'not between',
         'minimum':  0.1,
         'maximum':  0.8,
         'format':   green_style
        }
</pre>

<p>Celý skript, který je na této podmínce založen, vypadá takto:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Podmíněné formátování, hodnoty mimo zadané meze."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example33.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice dalšího nového stylu</i>
    green_style = workbook.add_format()
    green_style.set_font_color('green')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format_1 = {
             'type':     'cell',
             'criteria': 'between',
             'minimum':  5,
             'maximum':  15,
             'format':   red_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format(1, 0, 20, 0, conditional_format_1)
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format_2 = {
             'type':     'cell',
             'criteria': 'not between',
             'minimum':  0.1,
             'maximum':  0.8,
             'format':   green_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u prvního sloupce hodnot</i>
    <strong>worksheet.conditional_format(1, 0, 20, 0, conditional_format_1)</strong>
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    <strong>worksheet.conditional_format(1, 1, 20, 1, conditional_format_2)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/553/xlsxwriter2-b-4.png" class="image-521146" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="269" height="556" />
<p><i>Obrázek 14: Hodnota zeleně obarvených buněk leží mimo zadané
meze.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Podmíněný formát vztažený k&nbsp;více buňkám</h2>

<p>V&nbsp;předchozích dvou kapitolách jsme si ukázali, jak lze změnit formát
buňky na základě jejího obsahu, tedy například na faktu, že hodnota uložená
v&nbsp;buňce je menší popř.&nbsp;větší než zadaná hodnota, nebo na základě
toho, zda hodnota leží či neleží v&nbsp;určitém rozsahu. Ovšem existují i další
kritéria vztažená typicky k&nbsp;celému sloupci buněk &ndash; test na maximální
a minimální hodnotu, test, zda je hodnota buňky větší nebo menší než průměr
atd. Podívejme se nyní na poslední zmíněné kritérium &ndash; vytvoříme formát,
který je uplatněn pouze ve chvíli, kdy je hodnota buňky větší než průměr všech
buněk (ve vybraném sloupci):</p>

<pre>
conditional_format_2 = {
         'type':     'average',
         'criteria': 'above',
         'format':   green_style
        }
</pre>

<p><div class="rs-tip-major">Poznámka: některé tabulkové procesory takovou
podmínku nedokážou korektně zpracovat.</div></p>

<p>Tento formát založený na podmínce je použit i v&nbsp;následujícím
demonstračním příkladu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Podmíněné formátování, hodnoty pod průměrem."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example34.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice dalšího nového stylu</i>
    green_style = workbook.add_format()
    green_style.set_font_color('green')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format_1 = {
             'type':     'cell',
             'criteria': 'between',
             'minimum':  5,
             'maximum':  15,
             'format':   red_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format(1, 0, 20, 0, conditional_format_1)
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format_2 = {
             'type':     'average',
             'criteria': 'above',
             'format':   green_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u prvního sloupce hodnot</i>
    <strong>worksheet.conditional_format(1, 0, 20, 0, conditional_format_1)</strong>
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    <strong>worksheet.conditional_format(1, 1, 20, 1, conditional_format_2)</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Automatické filtry</h2>

<p>Velmi užitečnou vlastností většiny tabulkových procesorů je podpora
takzvaných automatických filtrů. Tuto funkci pravděpodobně znáte z&nbsp;praxe
&ndash; v&nbsp;tabulkovém procesoru je možné nastavit, že se v&nbsp;buňkách
tvořících nadpisy jednotlivých sloupců vytvoří kontextová menu (realizovaná
většinou rozbalovacími seznamy), které obsahují předpočítané parametry filtru
(například všechny položky, nejčastější hodnoty buněk atd.). Výběrem položek
z&nbsp;jednotlivých filtrů dochází k&nbsp;výběru jen určitých údajů
z&nbsp;potenciálně rozsáhlé tabulky.</p>

<p>V&nbsp;knihovně <i>XlsxWriter</i> se filtry specifikují vždy pro celou
oblast, například pro první sloupec tabulky s&nbsp;rozsahem od
<strong>A1</strong> do <strong>A21</strong>. Nejprve je nutné tento filtr
povolit (aby se vůbec zobrazil v&nbsp;tabulkovém procesoru):</p>

<pre>
<i># nastavení automatického filtru</i>
<strong>worksheet.autofilter('A1:A21')</strong>
</pre>

<p>Takto jednoduše definovaný automatický filtr (jeho obsah je vytvořen zcela
automaticky) je použit v&nbsp;dalším demonstračním příkladu, jehož úplný
zdrojový kód vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Automatické filtry."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example36.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># nastavení automatického filtru</i>
    <strong>worksheet.autofilter('A1:A21')</strong>
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format = {
             'type':     'cell',
             'criteria': '&gt;=',
             'value':    0.2,
             'format':   red_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format('B2:B21', conditional_format)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/495/xlsxwriter2-c-1.png" class="image-521161" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="269" height="563" />
<p><i>Obrázek 15: Automatický filtr vytvořený pro první sloupec
tabulky.</i></p>

<p>Automatické filtry je možné nastavit pro větší množství sloupců, a to
jediným příkazem:</p>

<pre>
worksheet.autofilter('A1:B21')
</pre>

<p>Což je volání použité v&nbsp;dalším skriptu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Automatické filtry."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example37.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># nastavení automatického filtru pro dva sloupce</i>
    <strong>worksheet.autofilter('A1:B21')</strong>
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format = {
             'type':     'cell',
             'criteria': '&gt;=',
             'value':    0.2,
             'format':   red_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format('B2:B21', conditional_format)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/495/xlsxwriter2-c-2.png" class="image-521162" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="267" height="551" />
<p><i>Obrázek 16: Automatický filtr vytvořený pro první i druhý sloupec
tabulky.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Další možnosti automatických filtrů</h2>

<p>Do automaticky vytvářených filtrů je možné zadat i vlastní podmínky, které
mohou být zapsány následujícím způsobem:</p>

<pre>
worksheet.filter_column('A', 'x &gt; 10')
</pre>

<p>Povšimněte si, že se v&nbsp;podmínce vyskytuje proměnná <strong>x</strong>,
která však ve skutečnosti může mít jakékoli jméno, protože se namísto této
proměnné použije hodnota ve filtrovaných buňkách. Pro úplnost se podívejme na
upravený skript, který tento filtr používá:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Automatické filtry."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example38.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 2)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
&nbsp;
    <i># nastavení automatického filtru pro dva sloupce</i>
    <strong>worksheet.autofilter('A1:B21')</strong>
&nbsp;
    <strong>worksheet.filter_column('A', 'x &gt; 10')</strong>
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format = {
             'type':     'cell',
             'criteria': '&gt;=',
             'value':    0.2,
             'format':   red_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format('B2:B21', conditional_format)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Automatické filtry se uplatní ve chvíli, kdy se v&nbsp;nějakém sloupci
použije jen několik opakujících se hodnot, například:</p>

<pre>
for x in range(1, 21):
    worksheet.write_number(x, 0, x)
    worksheet.write_number(x, 1, 1.0/x)
    <strong>msg = "yes" if x % 2 == 0 else "no"</strong>
    <strong>worksheet.write_string(x, 2, msg)</strong>
</pre>

<p>V&nbsp;takovém případě budou tyto hodnoty obsaženy přímo ve výběrovém
seznamu filtru:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Automatické filtry."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example39.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    red_style = workbook.add_format()
    red_style.set_font_color('red')
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 20)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
    worksheet.write_string('C1', 'valid?')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x)
        worksheet.write_number(x, 1, 1.0/x)
        msg = "yes" if x % 2 == 0 else "no"
        worksheet.write_string(x, 2, msg)
&nbsp;
    <i># nastavení automatického filtru</i>
    <strong>worksheet.autofilter('A1:C21')</strong>
&nbsp;
    <i># formát s podmínkou</i>
    conditional_format = {
             'type':     'cell',
             'criteria': '&gt;=',
             'value':    0.2,
             'format':   red_style
            }
&nbsp;
    <i># nastavení podmíněného formátu u druhého sloupce hodnot</i>
    worksheet.conditional_format('B2:B21', conditional_format)
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/495/xlsxwriter2-c-3.png" class="image-521163" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="415" height="564" />
<p><i>Obrázek 17: Automaticky vytvořené filtry pro tři sloupce. Ve třetím
sloupci se ve filtru nabízí i všechny hodnoty v&nbsp;tomto sloupci
použité.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Uzamčení buněk</h2>

<p>Vzhledem k&nbsp;tomu, že tabulkové procesory mnohdy slouží i pro zadávání
hodnot do předpřipravených formulářů, je v&nbsp;takových případech vhodné, aby
byly některé buňky či dokonce celé listy sešitu uzamčeny. K&nbsp;tomu slouží
metoda nazvaná <strong>Worksheet.protect()</strong>:</p>

<pre>
<i># uzamčení sešitu</i>
worksheet.protect()
</pre>

<p>Této metodě lze předat i heslo pro odemčení:</p>

<pre>
<i># uzamčení sešitu</i>
worksheet.protect(password)
</pre>

<p><div class="rs-tip-major">Poznámka: nejedná se ovšem o robustní techniku,
neboť i znalejší uživatel dokáže sešit odemknout bez znalosti hesla.</div></p>

<p>Dále je možné u jednotlivých buněk určit, zda mají být odemčeny či uzamčeny.
Jedná se o vlastnost, která je součástí stylu buňky a tudíž se nastavuje přes
styly:</p>

<pre>
<i># definice dalšího nového stylu</i>
locked_style = workbook.add_format()
&nbsp;
<i># buňky budou uzamčeny</i>
<strong>locked_style.set_locked('True')</strong>
&nbsp;
<i># definice dalšího nového stylu</i>
unlocked_style = workbook.add_format()
&nbsp;
<i># buňky budou uzamčeny</i>
<strong>unlocked_style.set_locked('False')</strong>
</pre>

<p>Tyto styly je možné ihned použít při přidávání jednotlivých buněk do sešitů,
což je ukázáno v&nbsp;dalším skriptu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Uzamčení buněk."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example40.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># uzamčení sešitu</i>
    worksheet.protect()
&nbsp;
    <i># definice nového stylu</i>
    bold_style = workbook.add_format()
    bold_style.set_bold()
    bold_style.set_font_color('blue')
&nbsp;
    <i># definice dalšího nového stylu</i>
    locked_style = workbook.add_format()
    locked_style.set_font_color('red')
&nbsp;
    <i># buňky budou uzamčeny</i>
    <strong>locked_style.set_locked('True')</strong>
&nbsp;
    <i># definice dalšího nového stylu</i>
    unlocked_style = workbook.add_format()
&nbsp;
    <i># buňky budou uzamčeny</i>
    <strong>unlocked_style.set_locked('False')</strong>
&nbsp;
    <i># definice formátu čísel</i>
    numeric_format = workbook.add_format({'num_format': '0.0000'})
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 8)
    worksheet.set_column('B:B', 14, numeric_format)
    worksheet.set_column('C:Z', 20)
&nbsp;
    <i># styl pro první řádek</i>
    worksheet.set_row(0, 20, bold_style)
&nbsp;
    <i># buňky s textem</i>
    worksheet.write_string('A1', 'x')
    worksheet.write_string('B1', '1/x')
    worksheet.write_string('C1', 'valid?')
&nbsp;
    <i># buňky s numerickými hodnotami</i>
    for x in range(1, 21):
        worksheet.write_number(x, 0, x, locked_style)
        worksheet.write_number(x, 1, 1.0/x)
        msg = "yes" if x % 2 == 0 else "no"
        worksheet.write_string(x, 2, msg, unlocked_style)
&nbsp;
    <i># nastavení automatického filtru</i>
    worksheet.autofilter('A1:C21')
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<img src="https://i.iinfo.cz/images/495/xlsxwriter2-c-4.png" class="image-521164" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="543" height="138" />
<p><i>Obrázek 18: Pokus o přístup k&nbsp;uzamčené buňce.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Validace dat zadávaných do buněk</h2>

<p>Další užitečnou vlastností tabulkových procesorů, kterou je možné přes
knihovnu <i>XlsxWriter</i> využít, je validace vstupních dat zadávaných
uživatelem. Opět se jedná o funkcionalitu, jíž lze využít ve chvíli, kdy sešity
slouží pro zadávání dat do formulářů (které mohou být mnohdy i velmi složité).
V&nbsp;takových případech je vhodné, aby se vstupní data, která uživatel
zadává, kontrolovala. A přesně k&nbsp;tomuto účelu se používají validátory.</p>

<p>Validátory se specifikují metodou
<strong>Worksheet.data_validation</strong>, které je nutné předat adresu buňky
a taktéž slovník, v&nbsp;němž je obsažena specifikace validátoru. Podívejme se
na příklad získaný přímo z&nbsp;dokumentace ke knihovně <i>XlsxWriter</i>:</p>

<pre>
worksheet.data_validation('B25', {'validate': 'integer',
                                  'criteria': 'between',
                                  'minimum': 1,
                                  'maximum': 100,
                                  'input_title': 'Enter an integer:',
                                  'input_message': 'between 1 and 100'})
</pre>

<p>Vidíme, že validátor obsahuje jak očekávaný datový typ, tak i podmínku,
která musí být splněna. Poslední dvě položky jsou použity v&nbsp;grafickém
uživatelském rozhraní tabulkového procesoru pro nápovědu zobrazenou
uživateli.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Sešit obsahující buňku s&nbsp;validátorem</h2>

<p>Vyzkoušejme si nyní, jak se takto nakonfigurovaný validátor bude chovat
v&nbsp;tabulkovém procesoru, pokud vytvoříme sešit tímto skriptem:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Jednoduchý validátor."""</i>
&nbsp;
import xlsxwriter
&nbsp;
<i># vytvoření objektu reprezentujícího celý sešit</i>
with <strong>xlsxwriter.Workbook('example41.xlsx')</strong> as workbook:
    <i># vložení nového listu do sešitu</i>
    worksheet = workbook.add_worksheet()
&nbsp;
    <i># nastavení šířky sloupců a stylu</i>
    worksheet.set_column('A:A', 50)
    worksheet.set_column('B:B', 14)
&nbsp;
    <i># zápis hodnot do buněk</i>
    worksheet.write_string('A1', 'Hodnota v rozsahu 1-100:')
    worksheet.write_number('B1', 50)
&nbsp;
    <i># nastavení validátoru</i>
    <strong>worksheet.data_validation('B1', {'validate': 'integer',</strong>
                                     <strong>'criteria': 'between',</strong>
                                     <strong>'minimum': 1,</strong>
                                     <strong>'maximum': 100,</strong>
                                     <strong>'input_title': 'Celočíselná hodnota:',</strong>
                                     <strong>'input_message': 'v rozsahu 1 až 100'})</strong>
&nbsp;
    <i># sešit bude uzavřen automaticky</i>
</pre>

<p>Chování takto vytvořeného sešitu lze ověřit v&nbsp;tabulkovém procesoru:</p>

<img src="https://i.iinfo.cz/images/559/xlsxwriter2-d-1.png" class="image-521180" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="600" height="212" />
<p><i>Obrázek 19: Nápověda zobrazená uživateli, které obsahuje zprávy zadané do
atributů <strong>input_title</strong> a <strong>input_message</strong>.</i></p>

<img src="https://i.iinfo.cz/images/559/xlsxwriter2-d-2.png" class="image-521181" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="363" height="122" />
<p><i>Obrázek 20: Kontrola typu zapsané hodnoty. V&nbsp;našem případě se
očekávají hodnoty typu <strong>integer</strong>.</i></p>

<img src="https://i.iinfo.cz/images/559/xlsxwriter2-d-3.png" class="image-521182" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="283" height="124" />
<p><i>Obrázek 21: Kontrola rozsahu v&nbsp;případě, že je rozsah kontrolován.
V&nbsp;našem případě musí hodnota ležet v&nbsp;rozsahu od 1 do 100 (včetně obou
mezních hodnot).</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Další objekty vkládané do sešitů</h2>

<p>Do sešitů je možné v&nbsp;moderních tabulkových procesorech vkládat i další
objekty. Jedná se o rastrové obrázky, vektorové kresby, pochopitelně grafy, ale
například i takzvané &bdquo;sparklines&ldquo;, což jsou miniaturní grafy
uložené do jediné buňky. A právě s&nbsp;těmito objekty se seznámíme
v&nbsp;navazující (a současně i poslední) části tohoto miniseriálu.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech <a
href="https://www.root.cz/clanky/tvorba-sesitu-ve-formatu-xlsx-v-pythonu-knihovna-xlsxwriter/">minule</a>
i dnes popsaných demonstračních příkladů určených pro programovací jazyk Python
3 a nejnovější stabilní verzi knihovny XlsxWriter byly uloženy do Git
repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_empty_worksheet.py</td><td>vytvoření prázdného sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/01_empty_worksheet.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/01_empty_worksheet.py</a></td></tr>
<tr><td> 2</td><td>02_with_statement.py</td><td>vytvoření prázdného sešitu, zajištění uzavření objektu worksheet</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/02_with_statement.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/02_with_statement.py</a></td></tr>
<tr><td> 3</td><td>03_simple_data.py</td><td>vytvoření sešitu s několika vyplněnými buňkami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/03_simple_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/03_simple_data.py</a></td></tr>
<tr><td> 4</td><td>04_alternative_addressing.py</td><td>vytvoření sešitu s několika vyplněnými buňkami, alternativní adresování buněk</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/04_alternative_addressing.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/04_alternative_addressing.py</a></td></tr>
<tr><td> 5</td><td>05_fill_in_table.py</td><td>vytvoření sešitu s delší tabulkou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/05_fill_in_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/05_fill_in_table.py</a></td></tr>
<tr><td> 6</td><td>06_column_widths.py</td><td>vytvoření sešitu s delší tabulkou, nastavení šířky sloupců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/06_column_widths.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/06_column_widths.py</a></td></tr>
<tr><td> 7</td><td>07_styles.py</td><td>nastavení stylů vybraných buněk</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/07_styles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/07_styles.py</a></td></tr>
<tr><td> 8</td><td>08_more_styles.py</td><td>nastavení stylů vybraných buněk</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/08_more_styles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/08_more_styles.py</a></td></tr>
<tr><td> 9</td><td>09_alternative_styles.py</td><td>alternativní způsob nastavení stylů vybraných buněk</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/09_alternative_styles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/09_alternative_styles.py</a></td></tr>
<tr><td>10</td><td>10_format_for_row.py</td><td>nastavení stylu celých řádků v&nbsp;sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/10_format_for_row.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/10_format_for_row.py</a></td></tr>
<tr><td>11</td><td>11_format_set_column.py</td><td>nastavení stylu celých sloupců v&nbsp;sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/11_format_set_column.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/11_format_set_column.py</a></td></tr>
<tr><td>12</td><td>12_write_proper_types.py</td><td>buňky s&nbsp;explicitní specifikací datového typu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/12_write_proper_types.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/12_write_proper_types.py</a></td></tr>
<tr><td>13</td><td>13_numeric_format.py</td><td>buňky se specifikací číselného formátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/13_numeric_format.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/13_numeric_format.py</a></td></tr>
<tr><td>14</td><td>14_numeric_format.py</td><td>buňky se specifikací číselného formátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/14_numeric_format.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/14_numeric_format.py</a></td></tr>
<tr><td>15</td><td>15_alternative_numeric_format.py</td><td>další způsob specifikace číselného formátu buněk tabulky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/15_alternative_numeric_format.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/15_alternative_numeric_format.py</a></td></tr>
<tr><td>16</td><td>16_font_size.py</td><td>změna velikosti písma v&nbsp;různých buňkách tabulky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/16_font_size.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/16_font_size.py</a></td></tr>
<tr><td>17</td><td>17_named_colors.py</td><td>použití pojmenovaných barev pro změnu barvy písma</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/17_named_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/17_named_colors.py</a></td></tr>
<tr><td>18</td><td>18_html_colors.py</td><td>použití šestice hexadecimálních číslic pro změnu barvy písma</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/18_html_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/18_html_colors.py</a></td></tr>
<tr><td>19</td><td>19_named_bg_colors.py</td><td>použití pojmenovaných barev pro změnu barvy pozadí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/19_named_bg_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/19_named_bg_colors.py</a></td></tr>
<tr><td>20</td><td>20_html_background_colors.py</td><td>použití šestice hexadecimálních číslic pro změnu barvy pozadí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/20_html_background_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/20_html_background_colors.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>21_comments.py</td><td>komentáře přidané k&nbsp;buňkám</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/21_comments.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/21_comments.py</a></td></tr>
<tr><td>22</td><td>22_show_comments.py</td><td>komentáře, které se zobrazí ihned po otevření sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/22_show_comments.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/22_show_comments.py</a></td></tr>
<tr><td>23</td><td>23_comments_addressing.py</td><td>alternativní adresování buněk s&nbsp;komentáři</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/23_comments_addressing.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/23_comments_addressing.py</a></td></tr>
<tr><td>24</td><td>24_more_worksheets.py</td><td>více listů v&nbsp;sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/24_more_worksheets.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/24_more_worksheets.py</a></td></tr>
<tr><td>25</td><td>25_more_worksheets.py</td><td>pojmenované listy v&nbsp;sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/25_more_worksheets.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/25_more_worksheets.py</a></td></tr>
<tr><td>26</td><td>26_more_worksheets_names.py</td><td>kolize jmen listů v&nbsp;sešitu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/26_more_worksheets_names.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/26_more_worksheets_names.py</a></td></tr>
<tr><td>27</td><td>27_merged_cells.py</td><td>sloučení buněk na listu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/27_merged_cells.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/27_merged_cells.py</a></td></tr>
<tr><td>28</td><td>28_merged_cells_error.py</td><td>překryv sloučených oblastí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/28_merged_cells_error.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/28_merged_cells_error.py</a></td></tr>
<tr><td>29</td><td>29_merged_cells.py</td><td>sloučení buněk přes více sloupců a řádků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/29_merged_cells.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/29_merged_cells.py</a></td></tr>
<tr><td>30</td><td>30_merged_cells_addressing.py</td><td>alternativní určení oblasti buněk, které se mají spojit</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/30_merged_cells_addressing.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/30_merged_cells_addressing.py</a></td></tr>
<tr><td>31</td><td>31_conditional_formatting.py</td><td>podmíněné formátování buněk</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/31_conditional_formatting.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/31_conditional_formatting.py</a></td></tr>
<tr><td>32</td><td>32_conditional_formatting_addressing.py</td><td>podmíněné formátování, alternativní adresace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/32_conditional_formatting_addressing.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/32_conditional_formatting_addressing.py</a></td></tr>
<tr><td>33</td><td>33_conditional_formatting_between.py</td><td>použití podmínky &bdquo;between&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/33_conditional_formatting_between.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/33_conditional_formatting_between.py</a></td></tr>
<tr><td>34</td><td>34_conditional_formatting_not_between.py</td><td>použití podmínky &bdquo;not between&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/34_conditional_formatting_not_between.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/34_conditional_formatting_not_between.py</a></td></tr>
<tr><td>35</td><td>35_conditional_formatting_average.py</td><td>použití klauzule &bdquo;average&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/35_conditional_formatting_average.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/35_conditional_formatting_average.py</a></td></tr>
<tr><td>36</td><td>36_autofilter.py</td><td>automatický filtr hodnot ve sloupci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/36_autofilter.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/36_autofilter.py</a></td></tr>
<tr><td>37</td><td>37_autofilters.py</td><td>větší množství automatických filtrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/37_autofilters.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/37_autofilters.py</a></td></tr>
<tr><td>38</td><td>38_autofilters_data.py</td><td>vlastní automatický filtr</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/38_autofilters_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/38_autofilters_data.py</a></td></tr>
<tr><td>39</td><td>39_autofilter_text.py</td><td>automatický filtr a sloupec obsahující opakující se hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/39_autofilter_text.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/39_autofilter_text.py</a></td></tr>
<tr><td>40</td><td>40_locked_cells.py</td><td>uzamčení sešitu, vybraných buněk atd.</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/40_locked_cells.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/40_locked_cells.py</a></td></tr>
<tr><td>41</td><td>41_validator.py</td><td>jednoduchý validátor pro vybranou buňku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/41_validator.py">https://github.com/tisnik/most-popular-python-libs/blob/master/XlsxWriter/41_validator.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Comparison of spreadsheet software<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_spreadsheet_software">https://en.wikipedia.org/wiki/Comparison_of_spreadsheet_software</a>
</li>

<li>Creating Excel files with Python and XlsxWriter<br />
<a href="https://xlsxwriter.readthedocs.io/">https://xlsxwriter.readthedocs.io/</a>
</li>

<li>XlsxWriter<br />
<a href="https://github.com/jmcnamara/XlsxWriter">https://github.com/jmcnamara/XlsxWriter</a>
</li>

<li>openpyxl - A Python library to read/write Excel 2010 xlsx/xlsm files<br />
<a href="https://openpyxl.readthedocs.io/en/stable/index.html">https://openpyxl.readthedocs.io/en/stable/index.html</a>
</li>

<li>Spreadsheet Files<br />
<a href="https://fileinfo.com/filetypes/spreadsheet">https://fileinfo.com/filetypes/spreadsheet</a>
</li>

<li>OpenDocument<br />
<a href="https://en.wikipedia.org/wiki/OpenDocument">https://en.wikipedia.org/wiki/OpenDocument</a>
</li>

<li>Tvorba sešitů pro tabulkové procesory v&nbsp;programovacím jazyku Go<br />
<a href="https://www.root.cz/clanky/tvorba-sesitu-pro-tabulkove-procesory-v-programovacim-jazyku-go/">https://www.root.cz/clanky/tvorba-sesitu-pro-tabulkove-procesory-v-programovacim-jazyku-go/</a>
</li>

<li>Spreadsheet<br />
<a href="https://en.wikipedia.org/wiki/Spreadsheet">https://en.wikipedia.org/wiki/Spreadsheet</a>
</li>

<li>List of spreadsheet software<br />
<a href="https://en.wikipedia.org/wiki/List_of_spreadsheet_software">https://en.wikipedia.org/wiki/List_of_spreadsheet_software</a>
</li>

<li>Processing spreadsheet data in Go<br />
<a href="https://appliedgo.net/spreadsheet/">https://appliedgo.net/spreadsheet/</a>
</li>

<li>Comma-separated values<br />
<a href="https://en.wikipedia.org/wiki/Comma-separated_values">https://en.wikipedia.org/wiki/Comma-separated_values</a>
</li>

<li>Common Format and MIME Type for Comma-Separated Values (CSV) Files<br />
<a href="https://tools.ietf.org/html/rfc4180">https://tools.ietf.org/html/rfc4180</a>
</li>

<li>Tab-separated values<br />
<a href="https://en.wikipedia.org/wiki/Tab-separated_values">https://en.wikipedia.org/wiki/Tab-separated_values</a>
</li>

<li>Office Open XML (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Office_Open_XML">https://en.wikipedia.org/wiki/Office_Open_XML</a>
</li>

<li>Standard ECMA-376: Office Open XML File Formats<br />
<a href="https://www.ecma-international.org/publications/standards/Ecma-376.htm">https://www.ecma-international.org/publications/standards/Ecma-376.htm</a>
</li>

<li>A Simple File Format for NumPy Arrays<br />
<a href="https://docs.scipy.org/doc/numpy-1.14.2/neps/npy-format.html">https://docs.scipy.org/doc/numpy-1.14.2/neps/npy-format.html</a>
</li>

<li>numpy.lib.format<br />
<a href="https://numpy.org/devdocs/reference/generated/numpy.lib.format.html">https://numpy.org/devdocs/reference/generated/numpy.lib.format.html</a>
</li>

<li>The NumPy array: a structure for efficient numerical computation<br />
<a href="https://arxiv.org/pdf/1102.1523.pdf">https://arxiv.org/pdf/1102.1523.pdf</a>
</li>

<li>numpy.ndarray.tofile<br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile">https://numpy.org/doc/stable/reference/generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile</a>
</li>

<li>numpy.fromfile<br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.fromfile.html">https://numpy.org/doc/stable/reference/generated/numpy.fromfile.html</a>
</li>

<li>How to read part of binary file with numpy?<br />
<a href="https://stackoverflow.com/questions/14245094/how-to-read-part-of-binary-file-with-numpy">https://stackoverflow.com/questions/14245094/how-to-read-part-of-binary-file-with-numpy</a>
</li>

<li>How to read binary files in Python using NumPy?<br />
<a href="https://stackoverflow.com/questions/39762019/how-to-read-binary-files-in-python-using-numpy">https://stackoverflow.com/questions/39762019/how-to-read-binary-files-in-python-using-numpy</a>
</li>

<li>Understanding the Open XML file formats<br />
<a href="https://docs.microsoft.com/en-us/office/open-xml/understanding-the-open-xml-file-formats">https://docs.microsoft.com/en-us/office/open-xml/understanding-the-open-xml-file-formats</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

