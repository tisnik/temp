<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Specializované instrukce pro zpracování komplexních čísel na platformě ARM</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Specializované instrukce pro zpracování komplexních čísel na platformě ARM</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V mikroprocesorových jádrech ARMv8.3-A se objevilo několik novinek. Jednou z méně známých nových vlastností je rozšíření instrukční sady NEON o specializované instrukce určené pro zpracování komplexních čísel. Tyto instrukce jsou podporovány i moderními překladači jazyka C, a to i formou intrinsic.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Specializované instrukce pro zpracování komplexních čísel na platformě ARM</a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
#include <stdio.h>
#include <arm_neon.h>

float16x4_t vector_add(float16x4_t a, float16x4_t b) {
    return vadd_f16(a, b);
}

int main(void) {
    float16x4_t a = {1, 2, 3, 4};
    float16x4_t b = {1, 2, 3, 4};
    float16x4_t c = vector_add(a, b);

    printf("%2.0f, %2.0f, %2.0f, %2.0f\n", c[0], c[1], c[2], c[3]);
}
</pre>

<pre>
vector_add:
        fadd    v0.4h, v0.4h, v1.4h
        ret
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
#include <stdio.h>
#include <arm_neon.h>

float16x4_t complex_add_rot90(float16x4_t a, float16x4_t b) {
    return vcadd_rot90_f16(a, b);
}

float16x4_t complex_add_rot270(float16x4_t a, float16x4_t b) {
    return vcadd_rot270_f16(a, b);
}

int main(void) {
    float16x4_t a = {1, 2, 3, 4};
    float16x4_t b = {1, 0, 3, 0};
    float16x4_t c = complex_add_rot90(a, b);

    float16x4_t d = complex_add_rot270(a, b);

    printf("a: %2.0f + %2.0fi   %2.0f + %2.0fi\n", a[0], a[1], a[2], a[3]);
    printf("b: %2.0f + %2.0fi   %2.0f + %2.0fi\n", b[0], b[1], b[2], b[3]);

    printf("c: %2.0f + %2.0fi   %2.0f + %2.0fi\n", c[0], c[1], c[2], c[3]);
    printf("d: %2.0f + %2.0fi   %2.0f + %2.0fi\n", d[0], d[1], d[2], d[3]);
}
</pre>

<pre>
a:  1 +  2i    3 +  4i
b:  1 +  0i    3 +  0i
c:  1 +  3i    3 +  7i
d:  1 +  1i    3 +  1i
</pre>

<pre>
complex_add_rot90:
        fcadd   v0.4h, v0.4h, v1.4h, #90
        ret

complex_add_rot270:
        fcadd   v0.4h, v0.4h, v1.4h, #270
        ret
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
#include <stdio.h>
#include <arm_neon.h>

float16x8_t complex_add_rot90(float16x8_t a, float16x8_t b) {
    return vcaddq_rot90_f16(a, b);
}

float16x8_t complex_add_rot270(float16x8_t a, float16x8_t b) {
    return vcaddq_rot270_f16(a, b);
}

int main(void) {
    float16x8_t a = {1, 2, 3, 4, 1, 2, 3, 4};
    float16x8_t b = {1, 0, 3, 0, 0, 1, 0, 1};
    float16x8_t c = complex_add_rot90(a, b);

    float16x8_t d = complex_add_rot270(a, b);

    printf("a: %2.0f + %2.0fi   %2.0f + %2.0fi   ", a[0], a[1], a[2], a[3]);
    printf("%2.0f + %2.0fi   %2.0f + %2.0fi\n", a[4], a[5], a[6], a[7]);
    printf("b: %2.0f + %2.0fi   %2.0f + %2.0fi   ", b[0], b[1], b[2], b[3]);
    printf("%2.0f + %2.0fi   %2.0f + %2.0fi\n", b[4], b[5], b[6], b[7]);

    printf("c: %2.0f + %2.0fi   %2.0f + %2.0fi   ", c[0], c[1], c[2], c[3]);
    printf("%2.0f + %2.0fi   %2.0f + %2.0fi\n", c[4], c[5], c[6], c[7]);
    printf("d: %2.0f + %2.0fi   %2.0f + %2.0fi   ", d[0], d[1], d[2], d[3]);
    printf("%2.0f + %2.0fi   %2.0f + %2.0fi\n", d[4], d[5], d[6], d[7]);
}
</pre>

<pre>
complex_add_rot90:
        fcadd   v0.8h, v0.8h, v1.8h, #90
        ret

complex_add_rot270:
        fcadd   v0.8h, v0.8h, v1.8h, #270
        ret
</pre>

<pre>
a:  1 +  2i    3 +  4i    1 +  2i    3 +  4i
b:  1 +  0i    3 +  0i    0 +  1i    0 +  1i
c:  1 +  3i    3 +  7i    0 +  2i    2 +  4i
d:  1 +  1i    3 +  1i    2 +  2i    4 +  4i
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Varianty instrukce součtu komplexních čísel s&nbsp;rotací pro vektory různých typů</h2>

<table>
<tr><th></th><th></th></tr>
<tr><td>float16x8_t</td><td>vcaddq_rot90_f16</td><td>(float16x8_t a, float16x8_t b)</td></tr>
<tr><td>float32x4_t</td><td>vcaddq_rot90_f32</td><td>(float32x4_t a, float32x4_t b)</td></tr>
<tr><td>int8x16_t</td><td>vcaddq_rot90_s8</td><td>(int8x16_t a, int8x16_t b)</td></tr>
<tr><td>int16x8_t</td><td>vcaddq_rot90_s16</td><td>(int16x8_t a, int16x8_t b)</td></tr>
<tr><td>int32x4_t</td><td>vcaddq_rot90_s32</td><td>(int32x4_t a, int32x4_t b)</td></tr>
<tr><td>uint8x16_t</td><td>vcaddq_rot90_u8</td><td>(uint8x16_t a, uint8x16_t b)</td></tr>
<tr><td>uint16x8_t</td><td>vcaddq_rot90_u16</td><td>(uint16x8_t a, uint16x8_t b)</td></tr>
<tr><td>uint32x4_t</td><td>vcaddq_rot90_u32</td><td>(uint32x4_t a, uint32x4_t b)</td></tr>
<tr><td>float16x8_t</td><td>vcaddq_rot270_f16</td><td>(float16x8_t a, float16x8_t b)</td></tr>
<tr><td>float32x4_t</td><td>vcaddq_rot270_f32</td><td>(float32x4_t a, float32x4_t b)</td></tr>
<tr><td>int8x16_t</td><td>vcaddq_rot270_s8</td><td>(int8x16_t a, int8x16_t b)</td></tr>
<tr><td>int16x8_t</td><td>vcaddq_rot270_s16</td><td>(int16x8_t a, int16x8_t b)</td></tr>
<tr><td>int32x4_t</td><td>vcaddq_rot270_s32</td><td>(int32x4_t a, int32x4_t b)</td></tr>
<tr><td>uint8x16_t</td><td>vcaddq_rot270_u8</td><td>(uint8x16_t a, uint8x16_t b)</td></tr>
<tr><td>uint16x8_t</td><td>vcaddq_rot270_u16</td><td>(uint16x8_t a, uint16x8_t b)</td></tr>
<tr><td>uint32x4_t</td><td>vcaddq_rot270_u32</td><td>(uint32x4_t a, uint32x4_t b)</td></tr>
<tr><td>float16x8_t</td><td>vcaddq_rot90_m_f16</td><td>(float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>float32x4_t</td><td>vcaddq_rot90_m_f32</td><td>(float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>int8x16_t</td><td>vcaddq_rot90_m_s8</td><td>(int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)</td></tr>
<tr><td>int16x8_t</td><td>vcaddq_rot90_m_s16</td><td>(int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>int32x4_t</td><td>vcaddq_rot90_m_s32</td><td>(int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>uint8x16_t</td><td>vcaddq_rot90_m_u8</td><td>(uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)</td></tr>
<tr><td>uint16x8_t</td><td>vcaddq_rot90_m_u16</td><td>(uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>uint32x4_t</td><td>vcaddq_rot90_m_u32</td><td>(uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>float16x8_t</td><td>vcaddq_rot270_m_f16</td><td>(float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>float32x4_t</td><td>vcaddq_rot270_m_f32</td><td>(float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>int8x16_t</td><td>vcaddq_rot270_m_s8</td><td>(int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)</td></tr>
<tr><td>int16x8_t</td><td>vcaddq_rot270_m_s16</td><td>(int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>int32x4_t</td><td>vcaddq_rot270_m_s32</td><td>(int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>uint8x16_t</td><td>vcaddq_rot270_m_u8</td><td>(uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)</td></tr>
<tr><td>uint16x8_t</td><td>vcaddq_rot270_m_u16</td><td>(uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>uint32x4_t</td><td>vcaddq_rot270_m_u32</td><td>(uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>float16x8_t</td><td>vcaddq_rot90_x_f16</td><td>(float16x8_t a, float16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>float32x4_t</td><td>vcaddq_rot90_x_f32</td><td>(float32x4_t a, float32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>int8x16_t</td><td>vcaddq_rot90_x_s8</td><td>(int8x16_t a, int8x16_t b, mve_pred16_t p)</td></tr>
<tr><td>int16x8_t</td><td>vcaddq_rot90_x_s16</td><td>(int16x8_t a, int16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>int32x4_t</td><td>vcaddq_rot90_x_s32</td><td>(int32x4_t a, int32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>uint8x16_t</td><td>vcaddq_rot90_x_u8</td><td>(uint8x16_t a, uint8x16_t b, mve_pred16_t p)</td></tr>
<tr><td>uint16x8_t</td><td>vcaddq_rot90_x_u16</td><td>(uint16x8_t a, uint16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>uint32x4_t</td><td>vcaddq_rot90_x_u32</td><td>(uint32x4_t a, uint32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>float16x8_t</td><td>vcaddq_rot270_x_f16</td><td>(float16x8_t a, float16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>float32x4_t</td><td>vcaddq_rot270_x_f32</td><td>(float32x4_t a, float32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>int8x16_t</td><td>vcaddq_rot270_x_s8</td><td>(int8x16_t a, int8x16_t b, mve_pred16_t p)</td></tr>
<tr><td>int16x8_t</td><td>vcaddq_rot270_x_s16</td><td>(int16x8_t a, int16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>int32x4_t</td><td>vcaddq_rot270_x_s32</td><td>(int32x4_t a, int32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>uint8x16_t</td><td>vcaddq_rot270_x_u8</td><td>(uint8x16_t a, uint8x16_t b, mve_pred16_t p)</td></tr>
<tr><td>uint16x8_t</td><td>vcaddq_rot270_x_u16</td><td>(uint16x8_t a, uint16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>uint32x4_t</td><td>vcaddq_rot270_x_u32</td><td>(uint32x4_t a, uint32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>int8x16_t</td><td>vhcaddq_rot90_s8</td><td>(int8x16_t a, int8x16_t b)</td></tr>
<tr><td>int16x8_t</td><td>vhcaddq_rot90_s16</td><td>(int16x8_t a, int16x8_t b)</td></tr>
<tr><td>int32x4_t</td><td>vhcaddq_rot90_s32</td><td>(int32x4_t a, int32x4_t b)</td></tr>
<tr><td>int8x16_t</td><td>vhcaddq_rot90_m_s8</td><td>(int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)</td></tr>
<tr><td>int16x8_t</td><td>vhcaddq_rot90_m_s16</td><td>(int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>int32x4_t</td><td>vhcaddq_rot90_m_s32</td><td>(int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>int8x16_t</td><td>vhcaddq_rot90_x_s8</td><td>(int8x16_t a, int8x16_t b, mve_pred16_t p)</td></tr>
<tr><td>int16x8_t</td><td>vhcaddq_rot90_x_s16</td><td>(int16x8_t a, int16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>int32x4_t</td><td>vhcaddq_rot90_x_s32</td><td>(int32x4_t a, int32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>int8x16_t</td><td>vhcaddq_rot270_s8</td><td>(int8x16_t a, int8x16_t b)</td></tr>
<tr><td>int16x8_t</td><td>vhcaddq_rot270_s16</td><td>(int16x8_t a, int16x8_t b)</td></tr>
<tr><td>int32x4_t</td><td>vhcaddq_rot270_s32</td><td>(int32x4_t a, int32x4_t b)</td></tr>
<tr><td>int8x16_t</td><td>vhcaddq_rot270_m_s8</td><td>(int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)</td></tr>
<tr><td>int16x8_t</td><td>vhcaddq_rot270_m_s16</td><td>(int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>int32x4_t</td><td>vhcaddq_rot270_m_s32</td><td>(int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>int8x16_t</td><td>vhcaddq_rot270_x_s8</td><td>(int8x16_t a, int8x16_t b, mve_pred16_t p)</td></tr>
<tr><td>int16x8_t</td><td>vhcaddq_rot270_x_s16</td><td>(int16x8_t a, int16x8_t b, mve_pred16_t p)</td></tr>
<tr><td>int32x4_t</td><td>vhcaddq_rot270_x_s32</td><td>(int32x4_t a, int32x4_t b, mve_pred16_t p)</td></tr>
<tr><td>float16x4_t</td><td>vcadd_rot90_f16</td><td>(float16x4_t a, float16x4_t b)</td></tr>
<tr><td>float32x2_t</td><td>vcadd_rot90_f32</td><td>(float32x2_t a, float32x2_t b)</td></tr>
<tr><td>float16x8_t</td><td>vcaddq_rot90_f16</td><td>(float16x8_t a, float16x8_t b)</td></tr>
<tr><td>float32x4_t</td><td>vcaddq_rot90_f32</td><td>(float32x4_t a, float32x4_t b)</td></tr>
<tr><td>float64x2_t</td><td>vcaddq_rot90_f64</td><td>(float64x2_t a, float64x2_t b)</td></tr>
<tr><td>float16x4_t</td><td>vcadd_rot270_f16</td><td>(float16x4_t a, float16x4_t b)</td></tr>
<tr><td>float32x2_t</td><td>vcadd_rot270_f32</td><td>(float32x2_t a, float32x2_t b)</td></tr>
<tr><td>float16x8_t</td><td>vcaddq_rot270_f16</td><td>(float16x8_t a, float16x8_t b)</td></tr>
<tr><td>float32x4_t</td><td>vcaddq_rot270_f32</td><td>(float32x4_t a, float32x4_t b)</td></tr>
<tr><td>float64x2_t</td><td>vcaddq_rot270_f64</td><td>(float64x2_t a, float64x2_t b)</td></tr>
<tr><td>svfloat16_t</td><td>svcadd_f16_m</td><td>(svbool_t pg, svfloat16_t op1, svfloat16_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svfloat32_t</td><td>svcadd_f32_m</td><td>(svbool_t pg, svfloat32_t op1, svfloat32_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svfloat64_t</td><td>svcadd_f64_m</td><td>(svbool_t pg, svfloat64_t op1, svfloat64_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svfloat16_t</td><td>svcadd_f16_x</td><td>(svbool_t pg, svfloat16_t op1, svfloat16_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svfloat32_t</td><td>svcadd_f32_x</td><td>(svbool_t pg, svfloat32_t op1, svfloat32_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svfloat64_t</td><td>svcadd_f64_x</td><td>(svbool_t pg, svfloat64_t op1, svfloat64_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svfloat16_t</td><td>svcadd_f16_z</td><td>(svbool_t pg, svfloat16_t op1, svfloat16_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svfloat32_t</td><td>svcadd_f32_z</td><td>(svbool_t pg, svfloat32_t op1, svfloat32_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svfloat64_t</td><td>svcadd_f64_z</td><td>(svbool_t pg, svfloat64_t op1, svfloat64_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svint8_t</td><td>svcadd_s8</td><td>(svint8_t op1, svint8_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svint16_t</td><td>svcadd_s16</td><td>(svint16_t op1, svint16_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svint32_t</td><td>svcadd_s32</td><td>(svint32_t op1, svint32_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svint64_t</td><td>svcadd_s64</td><td>(svint64_t op1, svint64_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svuint8_t</td><td>svcadd_u8</td><td>(svuint8_t op1, svuint8_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svuint16_t</td><td>svcadd_u16</td><td>(svuint16_t op1, svuint16_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svuint32_t</td><td>svcadd_u32</td><td>(svuint32_t op1, svuint32_t op2, uint64_t imm_rotation)</td></tr>
<tr><td>svuint64_t</td><td>svcadd_u64</td><td>(svuint64_t op1, svuint64_t op2, uint64_t imm_rotation)</td></tr>
</table>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;jazyku C, které jsou určené pro překlad
s&nbsp;využitím překladače <strong>gcc</strong> pro platformu AArch64, byly
uloženy do Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>fp16_add.c</td><td>operace součtu dvou hodnot typu <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add.c</a></td></tr>
<tr><td> 2</td><td>fp16_add.asm</td><td>překlad operace součtu dvou hodnot typu <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add.asm</a></td></tr>
<tr><td> 3</td><td>fp16_add_fp16.asm</td><td>překlad využívající instrukce pro přímé operace s&nbsp;hodnotami typu <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_fp16.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_fp16.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 4</td><td>fp16_arith.c</td><td>všechny čtyři základní aritmetické operace nad typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_arith.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_arith.c</a></td></tr>
<tr><td> 5</td><td>fp16_arith.asm</td><td>překlad všech čtyř základních aritmetických operací</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_arith.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_arith.asm</a></td></tr>
<tr><td> 6</td><td>fp16_arith_fp16.asm</td><td>překlad všech čtyř základních aritmetických operací s&nbsp;přímými instrukcemi pro <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_arith_fp16.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_arith_fp16.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>fp16_comparison.c</td><td>realizace všech šesti operací pro porovnání dvou hodnot typu <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_comparison.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_comparison.c</a></td></tr>
<tr><td> 8</td><td>fp16_comparison.asm</td><td>překlad operací pro porovnání dvou hodnot typu <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_comparison.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_comparison.asm</a></td></tr>
<tr><td> 9</td><td>fp16_comparison_fp16.asm</td><td>překlad operací pro porovnání dvou hodnot typu <i>half float</i> s&nbsp;přímými instrukcemi</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_comparison_fp16.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_comparison_fp16.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>fp16_add_delta.c</td><td>přičtení konstanty ke všem prvkům pole</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_delta.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_delta.c</a></td></tr>
<tr><td>11</td><td>fp16_add_delta.asm</td><td>překlad do strojového kódu bez přímého povolení manipulace s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_delta.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_delta.asm</a></td></tr>
<tr><td>12</td><td>fp16_add_delta_fp16.asm</td><td>překlad do strojového kódu s&nbsp;přímým povolení manipulace s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_delta_fp16.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_delta_fp16.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>fp16_add_arrays_32.c</td><td>součet odpovídajících si prvků polí typu <i>half float</i> se známou délkou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_32.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_32.c</a></td></tr>
<tr><td>14</td><td>fp16_add_arrays_32.asm</td><td>překlad do strojového kódu bez přímého povolení manipulace s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_32.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_32.asm</a></td></tr>
<tr><td>15</td><td>fp16_add_arrays_32_fp16.asm</td><td>překlad do strojového kódu s&nbsp;přímým povolení manipulace s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_32_fp16.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_32_fp16.asm</a></td></tr>
<tr><td>16</td><td>fp16_add_arrays_32_restrict.c</td><td>součet odpovídajících si prvků polí typu <i>half float</i>, zajištění, že se pole nepřekrývají</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_32_restrict.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_32_restrict.c</a></td></tr>
<tr><td>17</td><td>fp16_add_arrays_32_restrict.asm</td><td>překlad do strojového kódu s&nbsp;přímým povolení manipulace s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_32_restrict.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_32_restrict.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>fp16_add_arrays_16.c</td><td>součet odpovídajících si prvků polí typu <i>half float</i> se známou délkou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_16.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_16.c</a></td></tr>
<tr><td>19</td><td>fp16_add_arrays_16.asm</td><td>překlad do strojového kódu bez přímého povolení manipulace s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_16.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_16.asm</a></td></tr>
<tr><td>20</td><td>fp16_add_arrays_16_fp16.asm</td><td>překlad do strojového kódu s&nbsp;přímým povolení manipulace s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_16_fp16.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_16_fp16.asm</a></td></tr>
<tr><td>21</td><td>fp16_add_arrays_16_restrict.c</td><td>součet odpovídajících si prvků polí typu <i>half float</i>, zajištění, že se pole nepřekrývají</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_16_restrict.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_16_restrict.c</a></td></tr>
<tr><td>22</td><td>fp16_add_arrays_16_restrict.asm</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_16_restrict.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_add_arrays_16_restrict.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>fp16_vector_size.c</td><td>získání a tisk velikosti prvku typu <i>half float</i> i vektoru s&nbsp;těmito prvky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_size.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_size.c</a></td></tr>
<tr><td>24</td><td>fp16_vector_incorrect_size_1.c</td><td>pokus o konstrukci vektoru s&nbsp;neplatnou velikostí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_incorrect_size_1.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_incorrect_size_1.c</a></td></tr>
<tr><td>25</td><td>fp16_vector_incorrect_size_2.c</td><td>pokus o konstrukci vektoru s&nbsp;neplatnou velikostí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_incorrect_size_2.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_incorrect_size_2.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>fp16_vector_add_1.c</td><td>součet odpovídajících si prvků vektorů typu <i>half float</i>, vektory mají délku osmi prvků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_1.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_1.c</a></td></tr>
<tr><td>27</td><td>fp16_vector_add_1.asm</td><td>překlad do strojového kódu s&nbsp;přímým povolením práce s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_1.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_1.asm</a></td></tr>
<tr><td>28</td><td>fp16_vector_add_2.c</td><td>součet odpovídajících si prvků vektorů typu <i>half float</i>, vektory mají délku šestnácti prvků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_2.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_2.c</a></td></tr>
<tr><td>29</td><td>fp16_vector_add_2.asm</td><td>překlad do strojového kódu s&nbsp;přímým povolením práce s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_2.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_2.asm</a></td></tr>
<tr><td>30</td><td>fp16_vector_add_3.c</td><td>pokus o součet vektorů, které mají stejný počet prvků, ovšem odlišného typu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_3.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_3.c</a></td></tr>
<tr><td>31</td><td>fp16_vector_add_4.c</td><td>pokus o součet vektorů, které mají prvky stejného typu, ovšem odlišnou délku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_4.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_4.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>32</td><td>fp16_vector_arith_1.c</td><td>čtyři základní aritmetické operace s&nbsp;vektory typu <i>half float</i> s&nbsp;osmi prvky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_arith_1.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_arith_1.c</a></td></tr>
<tr><td>33</td><td>fp16_vector_arith_1.asm</td><td>překlad do strojového kódu s&nbsp;přímým povolením práce s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_arith_1.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_arith_1.asm</a></td></tr>
<tr><td>34</td><td>fp16_vector_arith_2.c</td><td>čtyři základní aritmetické operace s&nbsp;vektory typu <i>half float</i> se šestnácti prvky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_arith_2.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_arith_2.c</a></td></tr>
<tr><td>35</td><td>fp16_vector_arith_2.asm</td><td>překlad do strojového kódu s&nbsp;přímým povolením práce s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_arith_2.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_arith_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>36</td><td>fp16_vector_convert_1.c</td><td>konverze všech prvků vektorů mezi typy <i>float</i> a <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_convert_1.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_convert_1.c</a></td></tr>
<tr><td>37</td><td>fp16_vector_convert_1.asm</td><td>překlad do strojového kódu s&nbsp;přímým povolením práce s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_convert_1.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_convert_1.asm</a></td></tr>
<tr><td>38</td><td>fp16_vector_convert_2.c</td><td>konverze všech prvků vektorů mezi typy <i>float</i> a <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_convert_2.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_convert_2.c</a></td></tr>
<tr><td>39</td><td>fp16_vector_convert_2.asm</td><td>překlad do strojového kódu s&nbsp;přímým povolením práce s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_convert_2.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_convert_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>39</td><td>fp16_vector_delta.c</td><td>přičtení konstanty ke všem prvkům vektoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_delta.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_delta.c</a></td></tr>
<tr><td>40</td><td>fp16_vector_delta.asm</td><td>překlad do strojového kódu s&nbsp;přímým povolením práce s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_delta.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_delta.asm</a></td></tr>
<tr><td>41</td><td>fp16_vector_mac.c</td><td>operace typu Multiply-accumulate s&nbsp;vektory</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_mac.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_mac.c</a></td></tr>
<tr><td>42</td><td>fp16_vector_mac.asm</td><td>překlad do strojového kódu s&nbsp;přímým povolením práce s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_mac.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_mac.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>fp16_vector_sum.c</td><td>součet všech prvků vektoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_sum.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_sum.c</a></td></tr>
<tr><td>44</td><td>fp16_vector_sum.asm</td><td>překlad do strojového kódu s&nbsp;přímým povolením práce s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_sum.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_sum.asm</a></td></tr>
<tr><td>45</td><td>fp16_dot_product.c</td><td>skalární součin dvou vektorů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_dot_product.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_dot_product.c</a></td></tr>
<tr><td>46</td><td>fp16_dot_product.asm</td><td>překlad do strojového kódu s&nbsp;přímým povolením práce s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_dot_product.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_dot_product.asm</a></td></tr>
<tr><td>47</td><td>fp16_vector_zeros.c</td><td>porovnání všech prvků vektoru s&nbsp;nulovou hodnotou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_zeros.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_zeros.c</a></td></tr>
<tr><td>48</td><td>fp16_vector_zeros.asm</td><td>překlad do strojového kódu s&nbsp;přímým povolením práce s&nbsp;typy <i>half float</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_zeros.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_zeros.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>49</td><td>fp16_vector_add_5.c   </td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_5.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_5.c</a></td></tr>
<tr><td>50</td><td>fp16_vector_add_5.asm </td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_5.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_vector_add_5.asm</a></td></tr>
<tr><td>51</td><td>fp16_complex_add_1.c  </td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_complex_add_1.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_complex_add_1.c</a></td></tr>
<tr><td>52</td><td>fp16_complex_add_1.asm</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_complex_add_1.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_complex_add_1.asm</a></td></tr>
<tr><td>53</td><td>fp16_complex_add_2.c  </td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_complex_add_2.c">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_complex_add_2.c</a></td></tr>
<tr><td>54</td><td>fp16_complex_add_2.asm</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_complex_add_2.asm">https://github.com/tisnik/8bit-fame/blob/master/fp/fp16_complex_add_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>55</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/fp/">https://github.com/tisnik/8bit-fame/blob/master/fp/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>[PATCH 9/9][GCC][Arm] Add ACLE intrinsics for complex mutliplication and addition<br />
<a href="https://gcc.gnu.org/legacy-ml/gcc-patches/2018-12/msg00707.html">https://gcc.gnu.org/legacy-ml/gcc-patches/2018-12/msg00707.html</a>
</li>

<li>NEON Technology (stránky ARM)<br />
<a href="https://developer.arm.com/technologies/neon">https://developer.arm.com/technologies/neon</a>
</li>

<li>SIMD Assembly Tutorial: ARM NEON - Xiph.org<br />
<a href="https://people.xiph.org/~tterribe/daala/neon_tutorial.pdf">https://people.xiph.org/~tterribe/daala/neon_tutorial.pdf</a>
</li>

<li>Ne10<br />
<a href="http://projectne10.github.io/Ne10/">http://projectne10.github.io/Ne10/</a>
</li>

<li>NEON and Floating-Point architecture<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/BABIGHEB.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/BABIGHEB.html</a>
</li>

<li>An Introduction to ARM NEON<br />
<a href="http://peterdn.com/post/an-introduction-to-ARM-NEON.aspx">http://peterdn.com/post/an-introduction-to-ARM-NEON.aspx</a>
</li>

<li>ARM NEON Intrinsics Reference<br />
<a href="http://infocenter.arm.com/help/topic/com.arm.doc.ihi0073a/IHI0073A_arm_neon_intrinsics_ref.pdf">http://infocenter.arm.com/help/topic/com.arm.doc.ihi0073a/IHI0073A_arm_neon_intrinsics_ref.pdf</a>
</li>

<li>Arm Neon Intrinsics vs hand assembly<br />
<a href="https://stackoverflow.com/questions/9828567/arm-neon-intrinsics-vs-hand-assembly">https://stackoverflow.com/questions/9828567/arm-neon-intrinsics-vs-hand-assembly</a>
</li>

<li>ARM NEON Optimization. An Example<br />
<a href="http://hilbert-space.de/?p=22">http://hilbert-space.de/?p=22</a>
</li>

<li>AArch64 NEON instruction format<br />
<a href="https://developer.arm.com/docs/den0024/latest/7-aarch64-floating-point-and-neon/73-aarch64-neon-instruction-format">https://developer.arm.com/docs/den0024/latest/7-aarch64-floating-point-and-neon/73-aarch64-neon-instruction-format</a>
</li>

<li>Vektorové procesory aneb další pokus o zvýšení výpočetního výkonu počítačů<br />
<a href="http://www.root.cz/clanky/vektorove-procesory-aneb-dalsi-pokus-o-zvyseni-vypocetniho-vykonu-pocitacu/">http://www.root.cz/clanky/vektorove-procesory-aneb-dalsi-pokus-o-zvyseni-vypocetniho-vykonu-pocitacu/</a>
</li>

<li>SIMD instrukce využívané v moderních mikroprocesorech řady x86<br />
<a href="http://www.root.cz/clanky/simd-instrukce-vyuzivane-v-modernich-mikroprocesorech-rady-x86/">http://www.root.cz/clanky/simd-instrukce-vyuzivane-v-modernich-mikroprocesorech-rady-x86/</a>
</li>

<li>SIMD instrukce v moderních mikroprocesorech řady x86 (2.část: SSE)<br />
<a href="http://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-2-cast-sse/">http://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-2-cast-sse/</a>
</li>

<li>SIMD instrukce v moderních mikroprocesorech řady x86 (3.část: SSE2)<br />
<a href="http://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-3-cast-sse2/">http://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-3-cast-sse2/</a>
</li>

<li>Instrukce typu SIMD na mikroprocesorech RISC<br />
<a href="http://www.root.cz/clanky/instrukce-typu-simd-na-mikroprocesorech-risc/">http://www.root.cz/clanky/instrukce-typu-simd-na-mikroprocesorech-risc/</a>
</li>

<li>Instrukce typu SIMD na mikroprocesorech RISC (2. část)<br />
<a href="http://www.root.cz/clanky/instrukce-typu-simd-na-mikroprocesorech-risc-2-cast/">http://www.root.cz/clanky/instrukce-typu-simd-na-mikroprocesorech-risc-2-cast/</a>
</li>

<li>Instrukce typu SIMD na mikroprocesorech RISC (3.část - MIPS-3D a VIS)<br />
<a href="http://www.root.cz/clanky/instrukce-typu-simd-na-mikroprocesorech-risc-3-cast-mips-3d-a-vis/">http://www.root.cz/clanky/instrukce-typu-simd-na-mikroprocesorech-risc-3-cast-mips-3d-a-vis/</a>
</li>

<li>Trasování a ladění nativních aplikací v&nbsp;Linuxu<br />
<a href="https://www.root.cz/clanky/trasovani-a-ladeni-nativnich-aplikaci-v-linuxu/">https://www.root.cz/clanky/trasovani-a-ladeni-nativnich-aplikaci-v-linuxu/</a>
</li>

<li>Trasování a ladění nativních aplikací v&nbsp;Linuxu: použití GDB a jeho nadstaveb<br />
<a href="https://www.root.cz/clanky/trasovani-a-ladeni-nativnich-aplikaci-v-linuxu-pouziti-gdb-a-jeho-nadstaveb/">https://www.root.cz/clanky/trasovani-a-ladeni-nativnich-aplikaci-v-linuxu-pouziti-gdb-a-jeho-nadstaveb/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Tracing (software)<br />
<a href="https://en.wikipedia.org/wiki/Tracing_%28software%29">https://en.wikipedia.org/wiki/Tracing_%28software%29</a>
</li>

<li>cgdb: the curses debugger<br />
<a href="https://cgdb.github.io/">https://cgdb.github.io/</a>
</li>

<li>cgdb: dokumentace<br />
<a href="https://cgdb.github.io/docs/cgdb-split.html">https://cgdb.github.io/docs/cgdb-split.html</a>
</li>

<li>strace(1) - Linux man page<br />
<a href="http://linux.die.net/man/1/strace">http://linux.die.net/man/1/strace</a>
</li>

<li>strace (stránka projektu na SourceForge)<br />
<a href="https://sourceforge.net/projects/strace/">https://sourceforge.net/projects/strace/</a>
</li>

<li>strace (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Strace">https://en.wikipedia.org/wiki/Strace</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>Comparison of ARMv8-A cores<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_ARMv8-A_cores">https://en.wikipedia.org/wiki/Comparison_of_ARMv8-A_cores</a>
</li>

<li>A64 General Instructions<br />
<a href="http://www.keil.com/support/man/docs/armclang_asm/armclang_asm_pge1427898258836.htm">http://www.keil.com/support/man/docs/armclang_asm/armclang_asm_pge1427898258836.htm</a>
</li>

<li>ARMv8 (AArch64) Instruction Encoding<br />
<a href="http://kitoslab-eng.blogspot.cz/2012/10/armv8-aarch64-instruction-encoding.html">http://kitoslab-eng.blogspot.cz/2012/10/armv8-aarch64-instruction-encoding.html</a>
</li>

<li>Cortex-A32 Processor<br />
<a href="https://www.arm.com/products/processors/cortex-a/cortex-a32-processor.php">https://www.arm.com/products/processors/cortex-a/cortex-a32-processor.php</a>
</li>

<li>Cortex-A35 Processor<br />
<a href="https://www.arm.com/products/processors/cortex-a/cortex-a35-processor.php">https://www.arm.com/products/processors/cortex-a/cortex-a35-processor.php</a>
</li>

<li>Cortex-A53 Processor<br />
<a href="https://www.arm.com/products/processors/cortex-a/cortex-a53-processor.php">https://www.arm.com/products/processors/cortex-a/cortex-a53-processor.php</a>
</li>

<li>Cortex-A57 Processor<br />
<a href="https://www.arm.com/products/processors/cortex-a/cortex-a57-processor.php">https://www.arm.com/products/processors/cortex-a/cortex-a57-processor.php</a>
</li>

<li>Cortex-A72 Processor<br />
<a href="https://www.arm.com/products/processors/cortex-a/cortex-a72-processor.php">https://www.arm.com/products/processors/cortex-a/cortex-a72-processor.php</a>
</li>

<li>Cortex-A73 Processor<br />
<a href="https://www.arm.com/products/processors/cortex-a/cortex-a73-processor.php">https://www.arm.com/products/processors/cortex-a/cortex-a73-processor.php</a>
</li>

<li>Apple A7 (SoC založen na CPU Cyclone)<br />
<a href="https://en.wikipedia.org/wiki/Apple_A7">https://en.wikipedia.org/wiki/Apple_A7</a>
</li>

<li>System cally pro AArch64 na Linuxu<br />
<a href="https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/unistd.h">https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/unistd.h</a>
</li>

<li>Architectures/AArch64 (FedoraProject.org)<br />
<a href="https://fedoraproject.org/wiki/Architectures/AArch64">https://fedoraproject.org/wiki/Architectures/AArch64</a>
</li>

<li>SIG pro AArch64 (CentOS)<br />
<a href="https://wiki.centos.org/SpecialInterestGroup/AltArch/AArch64">https://wiki.centos.org/SpecialInterestGroup/AltArch/AArch64</a>
</li>

<li>The ARMv8 instruction sets<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html</a>
</li>

<li>A64 Instruction Set<br />
<a href="https://developer.arm.com/products/architecture/instruction-sets/a64-instruction-set">https://developer.arm.com/products/architecture/instruction-sets/a64-instruction-set</a>
</li>

<li>Switching between the instruction sets<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html</a>
</li>

<li>The A64 instruction set<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html</a>
</li>

<li>Introduction to ARMv8 64-bit Architecture<br />
<a href="https://quequero.org/2014/04/introduction-to-arm-architecture/">https://quequero.org/2014/04/introduction-to-arm-architecture/</a>
</li>

<li>MCU market turns to 32-bits and ARM<br />
<a href="http://www.eetimes.com/document.asp?doc_id=1280803">http://www.eetimes.com/document.asp?doc_id=1280803</a>
</li>

<li>Cortex-M0 Processor (ARM Holdings)<br />
<a href="http://www.arm.com/products/processors/cortex-m/cortex-m0.php">http://www.arm.com/products/processors/cortex-m/cortex-m0.php</a>
</li>

<li>Cortex-M0+ Processor (ARM Holdings)<br />
<a href="http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php">http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php</a>
</li>

<li>ARM Processors in a Mixed Signal World<br />
<a href="http://www.eeweb.com/blog/arm/arm-processors-in-a-mixed-signal-world">http://www.eeweb.com/blog/arm/arm-processors-in-a-mixed-signal-world</a>
</li>

<li>ARM Architecture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_architecture">https://en.wikipedia.org/wiki/ARM_architecture</a>
</li>

<li>DSP for Cortex-M<br />
<a href="https://developer.arm.com/technologies/dsp/dsp-for-cortex-m">https://developer.arm.com/technologies/dsp/dsp-for-cortex-m</a>
</li>

<li>Cortex-M processors in DSP applications? Why not?!<br />
<a href="https://community.arm.com/processors/b/blog/posts/cortex-m-processors-in-dsp-applications-why-not">https://community.arm.com/processors/b/blog/posts/cortex-m-processors-in-dsp-applications-why-not</a>
</li>

<li>White Paper - DSP capabilities of Cortex-M4 and Cortex-M7<br />
<a href="https://community.arm.com/processors/b/blog/posts/white-paper-dsp-capabilities-of-cortex-m4-and-cortex-m7">https://community.arm.com/processors/b/blog/posts/white-paper-dsp-capabilities-of-cortex-m4-and-cortex-m7</a>
</li>

<li>Q (number format)<br />
<a href="https://en.wikipedia.org/wiki/Q_%28number_format%29">https://en.wikipedia.org/wiki/Q_%28number_format%29</a>
</li>

<li>TriCore Architecture &amp; Core<br />
<a href="http://www.infineon.com/cms/en/product/microcontroller/32-bit-tricore-tm-microcontroller/tricore-tm-architecture-and-core/channel.html?channel=ff80808112ab681d0112ab6b73d40837">http://www.infineon.com/cms/en/product/microcontroller/32-bit-tricore-tm-microcontroller/tricore-tm-architecture-and-core/channel.html?channel=ff80808112ab681d0112ab6b73d40837</a>
</li>

<li>TriCoreTM V1.6 Instruction Set: 32-bit Unified Processor Core<br />
<a href="http://www.infineon.com/dgdl/tc_v131_instructionset_v138.pdf?fileId=db3a304412b407950112b409b6dd0352">http://www.infineon.com/dgdl/tc_v131_instructionset_v138.pdf?fileId=db3a304412b407950112b409b6dd0352</a>
</li>

<li>TriCore v2.2 C Compiler, Assembler, Linker Reference Manual<br />
<a href="http://tasking.com/support/tricore/tc_reference_guide_v2.2.pdf">http://tasking.com/support/tricore/tc_reference_guide_v2.2.pdf</a>
</li>

<li>Infineon TriCore (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Infineon_TriCore">https://en.wikipedia.org/wiki/Infineon_TriCore</a>
</li>

<li>C166®S V2 Architecture &amp; Core<br />
<a href="http://www.infineon.com/cms/en/product/microcontroller/16-bit-c166-microcontroller/c166-s-v2-architecture-and-core/channel.html?channel=db3a304312bef5660112c3011c7d01ae">http://www.infineon.com/cms/en/product/microcontroller/16-bit-c166-microcontroller/c166-s-v2-architecture-and-core/channel.html?channel=db3a304312bef5660112c3011c7d01ae</a>
</li>

<li>Comparing four 32-bit soft processor cores<br />
<a href="http://www.eetimes.com/author.asp?section_id=14&doc_id=1286116">http://www.eetimes.com/author.asp?section_id=14&doc_id=1286116</a>
</li>

<li>RISC-V Instruction Set<br />
<a href="http://riscv.org/download.html#spec_compressed_isa">http://riscv.org/download.html#spec_compressed_isa</a>
</li>

<li>RISC-V Spike (ISA Simulator)<br />
<a href="http://riscv.org/download.html#isa-sim">http://riscv.org/download.html#isa-sim</a>
</li>

<li>RISC-V (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/RISC-V">https://en.wikipedia.org/wiki/RISC-V</a>
</li>

<li>David Patterson (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/David_Patterson_(computer_scientist)">https://en.wikipedia.org/wiki/David_Patterson_(computer_scientist)</a>
</li>

<li>Complex number<br />
<a href="https://en.wikipedia.org/wiki/Complex_number">https://en.wikipedia.org/wiki/Complex_number</a>
</li>

<li>GCC: 6.1.3 Complex Numbers<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Complex.html">https://gcc.gnu.org/onlinedocs/gcc/Complex.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

