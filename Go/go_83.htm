<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Lexikální a syntaktická zdrojových kódů jazyka Go (2.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Lexikální a syntaktická zdrojových kódů jazyka Go (2.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Lexikální a syntaktická zdrojových kódů jazyka Go (2.část)</a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Lexikální a syntaktická zdrojových kódů jazyka Go (2.část)</h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "strings"
&nbsp;
        "go/ast"
        "go/parser"
)
&nbsp;
<i>// výraz, který se má naparsovat</i>
const source = `
1 + 2 * 3 + x + y * z - 1
`
&nbsp;
<i>// nový datový typ implementující rozhraní ast.Visitor</i>
type visitor int
&nbsp;
<i>// implementace (jediné) funkce předepsané v rozhraní ast.Visitor</i>
func (v visitor) <strong>Visit</strong>(n ast.Node) ast.Visitor {
        <i>// dosáhli jsme koncového uzlu?</i>
        if n == nil {
                return nil
        }
&nbsp;
        <i>// tisk pozice a typu uzlu</i>
        fmt.Printf("%3d\t", v)
        var s string
&nbsp;
        <i>// převod uzlu do tisknutelné podoby</i>
        switch x := n.(type) {
        case *ast.BasicLit:
                s = x.Value
        case *ast.Ident:
                s = x.Name
        case *ast.UnaryExpr:
                s = x.Op.String()
        case *ast.BinaryExpr:
                s = x.Op.String()
        }
&nbsp;
        <i>// tisk obsahu uzlu</i>
        indent := strings.Repeat("  ", int(v))
        if s != "" {
                fmt.Printf("%s%s\n", indent, s)
        } else {
                fmt.Printf("%s%T\n", indent, n)
        }
        return v + 1
}
&nbsp;
func <strong>main</strong>() {
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        f, err := parser.ParseExpr(source)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        <i>// hodnota typu visitor</i>
        var v visitor
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Walk(v, f)
}
</pre>

<p></p>

<pre>
  0     -
  1       +
  2         +
  3           +
  4             1
  4             *
  5               2
  5               3
  3           x
  2         *
  3           y
  3           z
  1       1
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
&nbsp;
        "go/ast"
        "go/parser"
)
&nbsp;
<i>// výraz, který se má naparsovat</i>
const source = `
1 + 2 * 3 + x + y * z - 1
`
&nbsp;
func <strong>walk</strong>(node ast.Node) {
        <i>// dosáhli jsme koncového uzlu?</i>
        if node == nil {
                return
        }
&nbsp;
        var s string
&nbsp;
        <i>// převod uzlu do tisknutelné podoby a rekurzivní průchod poduzly</i>
        switch x := node.(type) {
        case *ast.BasicLit:
                s = x.Value
        case *ast.Ident:
                s = x.Name
        case *ast.UnaryExpr:
                s = x.Op.String()
                walk(x.X)
        case *ast.BinaryExpr:
                walk(x.X)
                s = x.Op.String()
                walk(x.Y)
        }
&nbsp;
        <i>// tisk obsahu uzlu</i>
        if s != "" {
                fmt.Printf("%s ", s)
        } else {
                fmt.Printf("%T ", node)
        }
}
&nbsp;
func <strong>main</strong>() {
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        node, err := parser.ParseExpr(source)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        walk(node)
}
</pre>

<p></p>

<pre>
1 2 3 * + x + y z * + 1 -
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
&nbsp;
        "go/ast"
        "go/parser"
)
&nbsp;
<i>// výraz, který se má naparsovat</i>
const source = `
1 + 2 * 3 + x + y * z - 1
`
&nbsp;
func <strong>walk</strong>(node ast.Node) {
        <i>// dosáhli jsme koncového uzlu?</i>
        if node == nil {
                return
        }
&nbsp;
        <i>// tisk hodnoty uzlu a rekurzivní průchod poduzly</i>
        switch x := node.(type) {
        case *ast.BasicLit:
                fmt.Printf("%s ", x.Value)
        case *ast.Ident:
                fmt.Printf("%s ", x.Name)
        case *ast.UnaryExpr:
                fmt.Printf("%s ", x.Op.String())
                walk(x.X)
        case *ast.BinaryExpr:
                walk(x.X)
                fmt.Printf("%s ", x.Op.String())
                walk(x.Y)
        }
}
&nbsp;
func <strong>main</strong>() {
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        node, err := parser.ParseExpr(source)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        walk(node)
}
</pre>

<p></p>

<pre>
1 + 2 * 3 + x + y * z - 1
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
&nbsp;
        "go/ast"
        "go/parser"
)
&nbsp;
<i>// výraz, který se má naparsovat</i>
const source = `
1 + 2 * (3 + x) + y * (z - 1)
`
&nbsp;
func <strong>walk</strong>(node ast.Node) {
        <i>// dosáhli jsme koncového uzlu?</i>
        if node == nil {
                return
        }
&nbsp;
        <i>// tisk hodnoty uzlu a rekurzivní průchod poduzly</i>
        switch x := node.(type) {
        case *ast.BasicLit:
                fmt.Printf("%s ", x.Value)
        case *ast.Ident:
                fmt.Printf("%s ", x.Name)
        case *ast.UnaryExpr:
                fmt.Printf("%s ", x.Op.String())
                walk(x.X)
        case *ast.BinaryExpr:
                walk(x.X)
                fmt.Printf("%s ", x.Op.String())
                walk(x.Y)
        case *ast.ParenExpr:
                fmt.Printf("(")
                walk(x.X)
                fmt.Printf("\b) ")
        }
}
&nbsp;
func <strong>main</strong>() {
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        node, err := parser.ParseExpr(source)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        walk(node)
}
</pre>

<p></p>

<pre>
1 + 2 * (3 + x) + y * (z - 1)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>

<table>
<tr><th>Konstanta</th><th>Odpovídající operátor</th></tr>
<tr><td>ADD</td><td>+</td></tr>
<tr><td>SUB</td><td>-</td></tr>
<tr><td>MUL</td><td>*</td></tr>
<tr><td>QUO</td><td>/</td></tr>
<tr><td>REM</td><td>%</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>AND</td><td>&amp;</td></tr>
<tr><td>OR</td><td>|</td></tr>
<tr><td>XOR</td><td>^</td></tr>
<tr><td>SHL</td><td>&lt;&lt;</td></tr>
<tr><td>SHR</td><td>&gt;&gt;</td></tr>
<tr><td>AND_NOT</td><td>&amp;^</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>LAND</td><td>&amp;&amp;</td></tr>
<tr><td>LOR</td><td>||</td></tr>
<tr><td>ARROW</td><td><-</td></tr>
<tr><td>INC</td><td>++</td></tr>
<tr><td>DEC</td><td>--</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>EQL</td><td>==</td></tr>
<tr><td>LSS</td><td>&lt;</td></tr>
<tr><td>GTR</td><td>&gt;</td></tr>
<tr><td>ASSIGN</td><td>=</td></tr>
<tr><td>NOT</td><td>!</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>NEQ</td><td>!=</td></tr>
<tr><td>LEQ</td><td>&lt;=</td></tr>
<tr><td>GEQ</td><td>&gt;=</td></tr>
<tr><td>DEFINE</td><td>:=</td></tr>
</table>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "go/scanner"
        "go/token"
)
&nbsp;
<i>// výraz, který se má převést na RPN</i>
const source = `
1 + 2 * (3 + x) + y * (z - 1)
`
&nbsp;
func <strong>toRPN</strong>(s scanner.Scanner) {
        var operators = map[token.Token]int{
                token.MUL: 2,
                token.QUO: 2,
                token.REM: 2,
                token.ADD: 1,
                token.SUB: 1,
        }
&nbsp;
        var stack []token.Token
&nbsp;
        <i>// postupné provádění tokenizace a zpracování jednotlivých tokenů</i>
loop:
        for {
                _, tok, lit := s.Scan()
                switch tok {
                case token.INT:
                        <i>// celé číslo přímo vypsat</i>
                        fallthrough
                case token.FLOAT:
                        <i>// číslo s plovoucí čárkou přímo vypsat</i>
                        fallthrough
                case token.IDENT:
                        <i>// identifikátor taktéž přímo vypsat</i>
                        fmt.Printf("%v ", lit)
                case token.LPAREN:
                        <i>// levá závorka se uloží na zásobník (bez výpisu)</i>
                        stack = append(stack, tok)
                case token.RPAREN:
                        <i>// pravá závorka zahájí zpracování zásobníku až do první nalezené levé závorky</i>
                        var tok token.Token
                        for {
                                <i>// přečtení prvku ze zásobníku - operace POP</i>
                                tok, stack = stack[len(stack)-1], stack[:len(stack)-1]
                                if tok == token.LPAREN {
                                        <i>// odstranění levé závorky</i>
                                        break
                                }
                                <i>// ostatní tokeny získané ze zásobníku se vypíšou</i>
                                fmt.Printf("%v ", tok)
                        }
                case token.EOF:
                        <i>// speciální token reprezentující konec tokenizace</i>
                        break loop
                default:
                        priority1, isOperator := operators[tok]
                        if isOperator {
                                <i>// průchod prvky na zásobníku</i>
                                for len(stack) &gt; 0 {
                                        <i>// operace TOP</i>
                                        tok := stack[len(stack)-1]
                                        <i>// získat prioritu operátoru přečteného ze zásobníku</i>
                                        priority2 := operators[tok]
&nbsp;
                                        if priority1 &gt; priority2 {
                                                <i>// větší priorita nového operátoru -&gt; konec</i>
                                                <i>// (pouze ho později uložíme na zásobník)</i>
                                                break
                                        }
&nbsp;
                                        <i>// menší či stejná priorita nového operátoru -&gt;</i>
                                        <i>// vypsat předchozí operátor nalezený na zásobníku</i>
                                        <i>// a odstranit tento operátor ze zásobníku</i>
                                        stack = stack[:len(stack)-1] <i>// POP</i>
                                        fmt.Printf("%s ", tok)
                                }
&nbsp;
                                <i>// uložit nově načtený operátor na zásobník</i>
                                stack = append(stack, tok)
                        }
                }
        }
        <i>// vyprázdnění obsahu zásobníku</i>
        for len(stack) &gt; 0 {
                fmt.Printf("%s ", stack[len(stack)-1])
                stack = stack[:len(stack)-1]
        }
}
&nbsp;
func <strong>main</strong>() {
        <i>// objekt představující scanner</i>
        var s scanner.Scanner
&nbsp;
        <i>// struktura reprezentující množinu zdrojových kódů</i>
        fset := token.NewFileSet()
&nbsp;
        <i>// přidání informace o zdrojovém kódu</i>
        file := fset.AddFile("", fset.Base(), len(source))
&nbsp;
        <i>// inicializace scanneru</i>
        s.Init(file, []byte(source), nil, scanner.ScanComments)
&nbsp;
        <i>// převod výrazu do RPN</i>
        toRPN(s)
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "go/scanner"
        "go/token"
)
&nbsp;
<i>// výraz, který se má převést na RPN</i>
const source = `
a&lt;0 || b&gt;10 &amp;&amp; c!=0
`
&nbsp;
func toRPN(s scanner.Scanner) {
        var operators = map[token.Token]int{
                token.EQL:  3,
                token.LSS:  3,
                token.GTR:  3,
                token.NEQ:  3,
                token.LEQ:  3,
                token.GEQ:  3,
                token.LAND: 2,
                token.LOR:  1,
        }
&nbsp;
        var stack []token.Token
&nbsp;
        <i>// postupné provádění tokenizace a zpracování jednotlivých tokenů</i>
loop:
        for {
                _, tok, lit := s.Scan()
                switch tok {
                case token.INT:
                        <i>// celé číslo přímo vypsat</i>
                        fallthrough
                case token.FLOAT:
                        <i>// číslo s plovoucí čárkou přímo vypsat</i>
                        fallthrough
                case token.IDENT:
                        <i>// identifikátor taktéž přímo vypsat</i>
                        fmt.Printf("%v ", lit)
                case token.LPAREN:
                        <i>// levá závorka se uloží na zásobník (bez výpisu)</i>
                        stack = append(stack, tok)
                case token.RPAREN:
                        <i>// pravá závorka zahájí zpracování zásobníku až do první nalezené levé závorky</i>
                        var tok token.Token
                        for {
                                <i>// přečtení prvku ze zásobníku - operace POP</i>
                                tok, stack = stack[len(stack)-1], stack[:len(stack)-1]
                                if tok == token.LPAREN {
                                        <i>// odstranění levé závorky</i>
                                        break
                                }
                                <i>// ostatní tokeny získané ze zásobníku se vypíšou</i>
                                fmt.Printf("%v ", tok)
                        }
                case token.EOF:
                        <i>// speciální token reprezentující konec tokenizace</i>
                        break loop
                default:
                        priority1, isOperator := operators[tok]
                        if isOperator {
                                <i>// průchod prvky na zásobníku</i>
                                for len(stack) &gt; 0 {
                                        <i>// operace TOP</i>
                                        tok := stack[len(stack)-1]
                                        <i>// získat prioritu operátoru přečteného ze zásobníku</i>
                                        priority2 := operators[tok]
&nbsp;
                                        if priority1 &gt; priority2 {
                                                <i>// větší priorita nového operátoru -&gt; konec</i>
                                                <i>// (pouze ho později uložíme na zásobník)</i>
                                                break
                                        }
&nbsp;
                                        <i>// menší či stejná priorita nového operátoru -&gt;</i>
                                        <i>// vypsat předchozí operátor nalezený na zásobníku</i>
                                        <i>// a odstranit tento operátor ze zásobníku</i>
                                        stack = stack[:len(stack)-1] <i>// POP</i>
                                        fmt.Printf("%s ", tok)
                                }
&nbsp;
                                <i>// uložit nově načtený operátor na zásobník</i>
                                stack = append(stack, tok)
                        }
                }
        }
        <i>// vyprázdnění obsahu zásobníku</i>
        for len(stack) &gt; 0 {
                fmt.Printf("%s ", stack[len(stack)-1])
                stack = stack[:len(stack)-1]
        }
}
&nbsp;
func <strong>main</strong>() {
        <i>// objekt představující scanner</i>
        var s scanner.Scanner
&nbsp;
        <i>// struktura reprezentující množinu zdrojových kódů</i>
        fset := token.NewFileSet()
&nbsp;
        <i>// přidání informace o zdrojovém kódu</i>
        file := fset.AddFile("", fset.Base(), len(source))
&nbsp;
        <i>// inicializace scanneru</i>
        s.Init(file, []byte(source), nil, scanner.ScanComments)
&nbsp;
        <i>// převod výrazu do RPN</i>
        toRPN(s)
}
</pre>


<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "go/ast"
        "go/parser"
        "go/token"
)
&nbsp;
<i>// zdrojový kód, který se má naparsovat</i>
const source = `
package main
&nbsp;
var answer int = 42
var x []int = make([]int, 10)
var y = len(x)
var z = cap(x)
var w = len(x) + cap(x)
var a = append(x, 10)
`
&nbsp;
<i>// funkce volaná při průchodu AST</i>
func <strong>inspectCallback</strong>(n ast.Node) bool {
        <i>// pokud se jedná o volání funkce, vrátí se hodnota + true</i>
        funcCall, ok := n.(*ast.CallExpr)
        if ok {
                <i>// výpis základní informace o volané funkci</i>
                fmt.Println(funcCall.Fun)
        }
        return true
}
&nbsp;
func <strong>main</strong>() {
        <i>// struktura reprezentující množinu zdrojových kódů</i>
        fileSet := token.NewFileSet()
&nbsp;
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        file, err := parser.ParseFile(fileSet, "", source, parser.ParseComments)
        if err != nil {
                panic(err)
        }
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Inspect(file, inspectCallback)
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "go/ast"
        "go/parser"
        "go/token"
)
&nbsp;
<i>// zdrojový kód, který se má naparsovat</i>
const source = `
package main
&nbsp;
var answer int = 42
var x []int = make([]int, 10)
var y = len(x)
var z = cap(x)
var w = len(x) + cap(x)
var a = append(x, 10)
`
&nbsp;
<i>// funkce volaná při průchodu AST</i>
func <strong>inspectCallback</strong>(n ast.Node) bool {
        <i>// pokud se jedná o volání funkce, vrátí se hodnota + true</i>
        funcCall, ok := n.(*ast.CallExpr)
        if ok {
                <i>// výpis podrobnějších informací o volané funkci</i>
                fmt.Printf("Function: %s ", funcCall.Fun)
                fmt.Printf("with %d arguments:\n", len(funcCall.Args))
                <i>// výpis informací o argumentech funkce</i>
                for i, arg := range funcCall.Args {
                        fmt.Printf("\t%d\t%T\t%s\n", i, arg, arg)
                }
                fmt.Println()
        }
        return true
}
&nbsp;
func <strong>main</strong>() {
        <i>// struktura reprezentující množinu zdrojových kódů</i>
        fileSet := token.NewFileSet()
&nbsp;
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        file, err := parser.ParseFile(fileSet, "", source, parser.ParseComments)
        if err != nil {
                panic(err)
        }
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Inspect(file, inspectCallback)
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "go/ast"
        "go/parser"
        "go/token"
)
&nbsp;
<i>// zdrojový kód, který se má naparsovat</i>
const source = `
package main
&nbsp;
var answer int = 42
var x []int = make([]int, 10)
var y = len(x)
var z = cap(x)
var w = len(x) + cap(x)
var a = append(x, 10)
`
&nbsp;
<i>// funkce volaná při průchodu AST</i>
func <strong>inspectCallback</strong>(n ast.Node) bool {
        <i>// pokud se jedná o volání funkce, vrátí se hodnota + true</i>
        funcCall, ok := n.(*ast.CallExpr)
        if ok {
                <i>// výpis podrobnějších informací o volané funkci</i>
                fmt.Printf("Function: %s ", funcCall.Fun)
                fmt.Printf("with %d arguments:\n", len(funcCall.Args))
                <i>// výpis informací o argumentech funkce</i>
                for i, arg := range funcCall.Args {
                        fmt.Printf("\t%d\t", i+1)
                        switch v := arg.(type) {
                        case *ast.BasicLit:
                                fmt.Printf("Constant: %s\n", v.Value)
                        case *ast.Ident:
                                fmt.Printf("Variable: '%s'\n", v.Name)
                        default:
                                fmt.Println("Unrecognized type")
                        }
                }
                fmt.Println()
        }
        return true
}
&nbsp;
func <strong>main</strong>() {
        <i>// struktura reprezentující množinu zdrojových kódů</i>
        fileSet := token.NewFileSet()
&nbsp;
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        file, err := parser.ParseFile(fileSet, "", source, parser.ParseComments)
        if err != nil {
                panic(err)
        }
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Inspect(file, inspectCallback)
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
package <strong>main</strong>

import (
        "fmt"
        "go/ast"
        "go/parser"
        "go/token"
)

<i>// zdrojový kód, který se má naparsovat</i>
const source = `
package main

var answer int = 42

var x []int = make([]int, 10)
var x2 []float = make([]float, 10)
var x3 []T = make([]T, 20)

var y = len(x)
var z = cap(x)
var w = len(x) + cap(x)
var a = append(x, 10)
var b = foo([10]int)
var c = bar(x, y, z, 1, 1.0, 1i, "foo", 'b')

var d = c.baz(1, 2, x)
`

<i>// funkce volaná při průchodu AST</i>
func inspectCallback(n ast.Node) bool {
        <i>// pokud se jedná o volání funkce, vrátí se hodnota + true</i>
        funcCall, ok := n.(*ast.CallExpr)
        if ok {
                <i>// výpis podrobnějších informací o volané funkci</i>
                fmt.Printf("Function: %s ", funcCall.Fun)
                fmt.Printf("with %d arguments:\n", len(funcCall.Args))
                <i>// výpis informací o argumentech funkce</i>
                for i, arg := range funcCall.Args {
                        fmt.Printf("\t%d\t", i+1)
                        switch v := arg.(type) {
                        case *ast.BasicLit:
                                fmt.Printf("Constant %s of type %s\n", v.Value, v.Kind)
                        case *ast.Ident:
                                fmt.Printf("Variable %s\n", v.Name)
                        case *ast.ArrayType:
                                if v.Len == nil {
                                        fmt.Printf("Slice of %s\n", v.Elt)
                                } else {
                                        fmt.Printf("Array of %s\n", v.Elt)
                                }
                        default:
                                fmt.Printf("Unrecognized type %T\n", v)
                        }
                }
                fmt.Println()
        }
        return true
}
&nbsp;
func <strong>main</strong>() {
        <i>// struktura reprezentující množinu zdrojových kódů</i>
        fileSet := token.NewFileSet()
&nbsp;
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        file, err := parser.ParseFile(fileSet, "", source, parser.ParseComments)
        if err != nil {
                panic(err)
        }
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Inspect(file, inspectCallback)
}
</pre>

<pre>
Function: make with 2 arguments:
        1       Slice of int
        2       Constant 10 of type INT
&nbsp;
Function: make with 2 arguments:
        1       Slice of float
        2       Constant 10 of type INT
&nbsp;
Function: make with 2 arguments:
        1       Slice of T
        2       Constant 20 of type INT
&nbsp;
Function: len with 1 arguments:
        1       Variable x
&nbsp;
Function: cap with 1 arguments:
        1       Variable x
&nbsp;
Function: len with 1 arguments:
        1       Variable x
&nbsp;
Function: cap with 1 arguments:
        1       Variable x
&nbsp;
Function: append with 2 arguments:
        1       Variable x
        2       Constant 10 of type INT
&nbsp;
Function: foo with 1 arguments:
        1       Array of int
&nbsp;
Function: bar with 8 arguments:
        1       Variable x
        2       Variable y
        3       Variable z
        4       Constant 1 of type INT
        5       Constant 1.0 of type FLOAT
        6       Constant 1i of type IMAG
        7       Constant "foo" of type STRING
        8       Constant 'b' of type CHAR
&nbsp;
Function: &amp;{c baz} with 3 arguments:
        1       Constant 1 of type INT
        2       Constant 2 of type INT
        3       Variable x
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "go/ast"
        "go/parser"
        "go/token"
)
&nbsp;
<i>// zdrojový kód, který se má naparsovat</i>
const source = `
package main
&nbsp;
var answer int = 42
&nbsp;
var x []int = make([]int, 10)
var x2 []float = make([]float, 10)
var x3 []T = make([]T, 20)
&nbsp;
var y = len(x)
var z = cap(x)
var w = len(x) + cap(x)
var a = append(x, 10)
var b = foo([10]int)
var c = bar(x, y, z, 1, 1.0, 1i, "foo", 'b')
&nbsp;
var d = c.baz(1, 2, x)
`
&nbsp;
<i>// funkce volaná při průchodu AST</i>
func inspectCallback(n ast.Node) bool {
        <i>// pokud se jedná o volání funkce, vrátí se hodnota + true</i>
        funcCall, ok := n.(*ast.CallExpr)
        if ok {
                method, ok := funcCall.Fun.(*ast.SelectorExpr)
                if ok {
                        fmt.Printf("Method: %s for type %s ", method.Sel.Name, method.X)
                } else {
                        fmt.Printf("Function: %s ", funcCall.Fun)
                }
                <i>// výpis podrobnějších informací o volané funkci</i>
                fmt.Printf("with %d arguments:\n", len(funcCall.Args))
                <i>// výpis informací o argumentech funkce</i>
                for i, arg := range funcCall.Args {
                        fmt.Printf("\t%d\t", i+1)
                        switch v := arg.(type) {
                        case *ast.BasicLit:
                                fmt.Printf("Constant %s of type %s\n", v.Value, v.Kind)
                        case *ast.Ident:
                                fmt.Printf("Variable %s\n", v.Name)
                        case *ast.ArrayType:
                                if v.Len == nil {
                                        fmt.Printf("Slice of %s\n", v.Elt)
                                } else {
                                        fmt.Printf("Array of %s\n", v.Elt)
                                }
                        default:
                                fmt.Printf("Unrecognized type %T\n", v)
                        }
                }
                fmt.Println()
        }
        return true
}
&nbsp;
func <strong>main</strong>() {
        <i>// struktura reprezentující množinu zdrojových kódů</i>
        fileSet := token.NewFileSet()
&nbsp;
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        file, err := parser.ParseFile(fileSet, "", source, parser.ParseComments)
        if err != nil {
                panic(err)
        }
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Inspect(file, inspectCallback)
}
</pre>

<pre>
Function: make with 2 arguments:
        1       Slice of int
        2       Constant 10 of type INT
&nbsp;
Function: make with 2 arguments:
        1       Slice of float
        2       Constant 10 of type INT
&nbsp;
Function: make with 2 arguments:
        1       Slice of T
        2       Constant 20 of type INT
&nbsp;
Function: len with 1 arguments:
        1       Variable x
&nbsp;
Function: cap with 1 arguments:
        1       Variable x
&nbsp;
Function: len with 1 arguments:
        1       Variable x
&nbsp;
Function: cap with 1 arguments:
        1       Variable x
&nbsp;
Function: append with 2 arguments:
        1       Variable x
        2       Constant 10 of type INT
&nbsp;
Function: foo with 1 arguments:
        1       Array of int
&nbsp;
Function: bar with 8 arguments:
        1       Variable x
        2       Variable y
        3       Variable z
        4       Constant 1 of type INT
        5       Constant 1.0 of type FLOAT
        6       Constant 1i of type IMAG
        7       Constant "foo" of type STRING
        8       Constant 'b' of type CHAR
&nbsp;
Method: baz for type c with 3 arguments:
        1       Constant 1 of type INT
        2       Constant 2 of type INT
        3       Variable x
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
package main

import (
        "fmt"
        "go/ast"
        "go/parser"
        "go/token"
)

// zdrojový kód, který se má naparsovat
const source = `
package main

func main() {
    var x = 10
    var y = 20

    if x > 0 {
    }

    if x != y {
    }

    if 0 < x {
    }
}
`

func getValue(n ast.Expr) string {
        switch v := n.(type) {
        case *ast.BasicLit:
                return v.Value
        case *ast.Ident:
                return v.Name
        case *ast.ArrayType:
                if v.Len == nil {
                        return fmt.Sprintf("Slice of %s\n", v.Elt)
                } else {
                        return fmt.Sprintf("Array of %s\n", v.Elt)
                }
        default:
                return fmt.Sprintf("Unrecognized type %T\n", v)
        }
}

// funkce volaná při průchodu AST
func inspectCallback(n ast.Node) bool {
        // pokud se jedná o volání funkce, vrátí se hodnota + true
        ifStatement, found := n.(*ast.IfStmt)
        if found {
                fmt.Print("if statement")
                condition := ifStatement.Cond
                binaryExpr, found := condition.(*ast.BinaryExpr)
                if found {
                        fmt.Print(" with binary condition")
                        left := getValue(binaryExpr.X)
                        right := getValue(binaryExpr.Y)
                        operand := binaryExpr.Op
                        fmt.Printf(" %s %s %s", left, operand, right)
                }
                fmt.Println()
        }
        return true
}

func main() {
        // struktura reprezentující množinu zdrojových kódů
        fileSet := token.NewFileSet()

        // konstrukce parseru a parsing zdrojového kódu
        file, err := parser.ParseFile(fileSet, "", source, parser.ParseComments)
        if err != nil {
                panic(err)
        }

        // zahájení průchodu abstraktním syntaktickým stromem
        ast.Inspect(file, inspectCallback)
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
package main

import (
        "fmt"
        "go/ast"
        "go/parser"
        "go/token"
)

// zdrojový kód, který se má naparsovat
const source = `
package main

func main() {
    var x = 10
    var y = 20

    if x > 0 {
    }

    if x != y {
    }

    if 0 < x {
    }

    if 0 > 1 {
    }
}
`

const (
        nodeTypeLiteral = iota
        nodeTypeIdentifier
        nodeTypeArray
        nodeTypeUnknown
)

func getValueAndType(n ast.Expr) (string, int) {
        switch v := n.(type) {
        case *ast.BasicLit:
                return v.Value, nodeTypeLiteral
        case *ast.Ident:
                return v.Name, nodeTypeIdentifier
        case *ast.ArrayType:
                if v.Len == nil {
                        return fmt.Sprintf("Slice of %s\n", v.Elt), nodeTypeArray
                } else {
                        return fmt.Sprintf("Array of %s\n", v.Elt), nodeTypeArray
                }
        default:
                return fmt.Sprintf("Unrecognized type %T\n", v), nodeTypeUnknown
        }
}

// funkce volaná při průchodu AST
func inspectCallback(n ast.Node) bool {
        // pokud se jedná o volání funkce, vrátí se hodnota + true
        ifStatement, found := n.(*ast.IfStmt)
        if found {
                fmt.Print("if statement")
                condition := ifStatement.Cond
                binaryExpr, found := condition.(*ast.BinaryExpr)
                if found {
                        fmt.Print(" with binary condition")
                        leftValue, leftType := getValueAndType(binaryExpr.X)
                        rightValue, rightType := getValueAndType(binaryExpr.Y)
                        operand := binaryExpr.Op
                        fmt.Printf(" %s %s %s", leftValue, operand, rightValue)
                        if leftType == nodeTypeLiteral && rightType == nodeTypeIdentifier {
                                fmt.Print(" (Yoda style condition detected)")
                        }
                }
                fmt.Println()
        }
        return true
}

func main() {
        // struktura reprezentující množinu zdrojových kódů
        fileSet := token.NewFileSet()

        // konstrukce parseru a parsing zdrojového kódu
        file, err := parser.ParseFile(fileSet, "", source, parser.ParseComments)
        if err != nil {
                panic(err)
        }

        // zahájení průchodu abstraktním syntaktickým stromem
        ast.Inspect(file, inspectCallback)
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech <a href="">minule</a> i dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>ast01.go</td><td>syntaktická analýza v&nbsp;Go &ndash; balíčky <strong>go/token</strong> a <strong>go/parser</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast01.go">https://github.com/tisnik/go-root/blob/master/article_82/ast01.go</a></td></tr>
<tr><td> 2</td><td>ast02.go</td><td>čitelný výpis obsahu abstraktního syntaktického stromu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast02.go">https://github.com/tisnik/go-root/blob/master/article_82/ast02.go</a></td></tr>
<tr><td> 3</td><td>ast03.go</td><td>průchod abstraktním syntaktickým stromem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast03.go">https://github.com/tisnik/go-root/blob/master/article_82/ast03.go</a></td></tr>
<tr><td> 4</td><td>ast04.go</td><td>návrhový vzor Visitor</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast04.go">https://github.com/tisnik/go-root/blob/master/article_82/ast04.go</a></td></tr>
<tr><td> 5</td><td>ast05.go</td><td>zobrazení hloubky uzlu v&nbsp;AST</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast05.go">https://github.com/tisnik/go-root/blob/master/article_82/ast05.go</a></td></tr>
<tr><td> 6</td><td>ast06.go</td><td>koncové uzly v&nbsp;AST</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast06.go">https://github.com/tisnik/go-root/blob/master/article_82/ast06.go</a></td></tr>
<tr><td> 7</td><td>ast07.go</td><td>AST zkonstruovaný pro sekvenci příkazů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast07.go">https://github.com/tisnik/go-root/blob/master/article_82/ast07.go</a></td></tr>
<tr><td> 8</td><td>ast08.go</td><td>výrazy se závorkami a s&nbsp;různými prioritami operátorů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast08.go">https://github.com/tisnik/go-root/blob/master/article_82/ast08.go</a></td></tr>
<tr><td> 9</td><td>ast09.go</td><td>konstrukce AST pro jediný výraz</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast09.go">https://github.com/tisnik/go-root/blob/master/article_82/ast09.go</a></td></tr>
<tr><td>10</td><td>ast10.go</td><td>typy uzlů v&nbsp;AST</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast10.go">https://github.com/tisnik/go-root/blob/master/article_82/ast10.go</a></td></tr>
<tr><td>11</td><td>ast11.go</td><td>podrobnější výpis informací o uzlech v&nbsp;AST</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast11.go">https://github.com/tisnik/go-root/blob/master/article_82/ast11.go</a></td></tr>
<tr><td>12</td><td>ast12.go</td><td>složitější aritmetické výrazy, zjednodušení zobrazení AST</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast12.go">https://github.com/tisnik/go-root/blob/master/article_82/ast12.go</a></td></tr>
<tr><td>13</td><td>ast13.go</td><td>logické výrazy</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast13.go">https://github.com/tisnik/go-root/blob/master/article_82/ast13.go</a></td></tr>
<tr><td>14</td><td>ast14.go</td><td>výrazy obsahující operace s&nbsp;poli či řezy</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast14.go">https://github.com/tisnik/go-root/blob/master/article_82/ast14.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>lexer1.go</td><td>tokenizace zdrojového kódu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/lexer1.go">https://github.com/tisnik/go-root/blob/master/article_82/lexer1.go</a></td></tr>
<tr><td>16</td><td>lexer2.go</td><td>zahození komentářů při tokenizaci</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/lexer2.go">https://github.com/tisnik/go-root/blob/master/article_82/lexer2.go</a></td></tr>
<tr><td>17</td><td>lexer3.go</td><td>tokenizace nesmyslné sekvence identifikátorů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/lexer3.go">https://github.com/tisnik/go-root/blob/master/article_82/lexer3.go</a></td></tr>
<tr><td>18</td><td>lexer4.go</td><td>tokenizace kódu s&nbsp;neznámými symboly</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/lexer4.go">https://github.com/tisnik/go-root/blob/master/article_82/lexer4.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>walk1.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/walk1.go">https://github.com/tisnik/go-root/blob/master/article_83/walk1.go</a></td></tr>
<tr><td>20</td><td>walk2.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/walk2.go">https://github.com/tisnik/go-root/blob/master/article_83/walk2.go</a></td></tr>
<tr><td>21</td><td>walk3.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/walk3.go">https://github.com/tisnik/go-root/blob/master/article_83/walk3.go</a></td></tr>
<tr><td>22</td><td>walk4.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/walk4.go">https://github.com/tisnik/go-root/blob/master/article_83/walk4.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>rpn1.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/rpn1.go">https://github.com/tisnik/go-root/blob/master/article_83/rpn1.go</a></td></tr>
<tr><td>24</td><td>rpn2.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/rpn2.go">https://github.com/tisnik/go-root/blob/master/article_83/rpn2.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>25</td><td>func_call_1.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/func_call_1.go">https://github.com/tisnik/go-root/blob/master/article_83/func_call_1.go</a></td></tr>
<tr><td>26</td><td>func_call_2.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/func_call_2.go">https://github.com/tisnik/go-root/blob/master/article_83/func_call_2.go</a></td></tr>
<tr><td>27</td><td>func_call_3.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/func_call_3.go">https://github.com/tisnik/go-root/blob/master/article_83/func_call_3.go</a></td></tr>
<tr><td>28</td><td>func_call_4.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/func_call_4.go">https://github.com/tisnik/go-root/blob/master/article_83/func_call_4.go</a></td></tr>
<tr><td>29</td><td>func_call_5.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/func_call_5.go">https://github.com/tisnik/go-root/blob/master/article_83/func_call_5.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>30</td><td>condition1.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/condition1.go">https://github.com/tisnik/go-root/blob/master/article_83/condition1.go</a></td></tr>
<tr><td>31</td><td>condition2.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/condition2.go">https://github.com/tisnik/go-root/blob/master/article_83/condition2.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Shunting-yard algorithm<br />
<a href="https://en.wikipedia.org/wiki/Shunting-yard_algorithm">https://en.wikipedia.org/wiki/Shunting-yard_algorithm</a>
</li>

<li>Abstract syntax tree<br />
<a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">https://en.wikipedia.org/wiki/Abstract_syntax_tree</a>
</li>

<li>Lexical analysis<br />
<a href="https://en.wikipedia.org/wiki/Lexical_analysis">https://en.wikipedia.org/wiki/Lexical_analysis</a>
</li>

<li>Parser<br />
<a href="https://en.wikipedia.org/wiki/Parsing#Parser">https://en.wikipedia.org/wiki/Parsing#Parser</a>
</li>

<li>Golang AST Package<br />
<a href="https://golangdocs.com/golang-ast-package">https://golangdocs.com/golang-ast-package</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>go/ast</strong><br />
<a href="https://pkg.go.dev/go/ast">https://pkg.go.dev/go/ast</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>go/scanner</strong><br />
<a href="https://pkg.go.dev/go/scanner">https://pkg.go.dev/go/scanner</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>go/parser</strong><br />
<a href="https://pkg.go.dev/go/parser">https://pkg.go.dev/go/parser</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>go/token</strong><br />
<a href="https://pkg.go.dev/go/token">https://pkg.go.dev/go/token</a>
</li>

<li>AP8, IN8 Regulární jazyky<br />
<a href="http://statnice.dqd.cz/home:inf:ap8">http://statnice.dqd.cz/home:inf:ap8</a>
</li>

<li>AP9, IN9 Konečné automaty<br />
<a href="http://statnice.dqd.cz/home:inf:ap9">http://statnice.dqd.cz/home:inf:ap9</a>
</li>

<li>AP10, IN10 Bezkontextové jazyky<br />
<a href="http://statnice.dqd.cz/home:inf:ap10">http://statnice.dqd.cz/home:inf:ap10</a>
</li>

<li>AP11, IN11 Zásobníkové automaty, Syntaktická analýza<br />
<a href="http://statnice.dqd.cz/home:inf:ap11">http://statnice.dqd.cz/home:inf:ap11</a>
</li>

<li>Introduction to YACC<br />
<a href="https://www.geeksforgeeks.org/introduction-to-yacc/">https://www.geeksforgeeks.org/introduction-to-yacc/</a>
</li>

<li>Introduction of Lexical Analysis<br />
<a href="https://www.geeksforgeeks.org/introduction-of-lexical-analysis/?ref=lbp">https://www.geeksforgeeks.org/introduction-of-lexical-analysis/?ref=lbp</a>
</li>

<li>Tvorba grafů a diagramů s využitím doménově specifického jazyka nástroje Graphviz<br />
<a href="https://www.root.cz/clanky/tvorba-grafu-a-diagramu-s-vyuzitim-domenove-specifickeho-jazyka-nastroje-graphviz/">https://www.root.cz/clanky/tvorba-grafu-a-diagramu-s-vyuzitim-domenove-specifickeho-jazyka-nastroje-graphviz/</a>
</li>

<li>Popis příkazu <strong>gofmt</strong><br />
<a href="https://pkg.go.dev/cmd/gofmt">https://pkg.go.dev/cmd/gofmt</a>
</li>

<li>Popis příkazu <strong>govet</strong><br />
<a href="https://pkg.go.dev/cmd/vet">https://pkg.go.dev/cmd/vet</a>
</li>

<li>Repositář nástroje <strong>errcheck</strong><br />
<a href="https://github.com/kisielk/errcheck">https://github.com/kisielk/errcheck</a>
</li>

<li>Repositář nástroje <strong>goconst</strong><br />
<a href="https://github.com/jgautheron/goconst">https://github.com/jgautheron/goconst</a>
</li>

<li>Repositář nástroje <strong>gocyclo</strong><br />
<a href="https://github.com/fzipp/gocyclo">https://github.com/fzipp/gocyclo</a>
</li>

<li>Repositář nástroje <strong>ineffassign</strong><br />
<a href="https://github.com/gordonklaus/ineffassign">https://github.com/gordonklaus/ineffassign</a>
</li>

<li>Repositář nástroje <strong>gosec</strong><br />
<a href="https://github.com/securego/gosec">https://github.com/securego/gosec</a>
</li>

<li>Repositář nástroje <strong>go-critic</strong><br />
<a href="https://github.com/go-critic/go-critic">https://github.com/go-critic/go-critic</a>
</li>

<li>Seznam testů prováděných nástrojem <strong>go-critic</strong><br />
<a href="https://go-critic.com/overview">https://go-critic.com/overview</a>
</li>

<li>Welcome go-critic<br />
<a href="https://itnext.io/welcome-go-critic-a26b6e30f1c6">https://itnext.io/welcome-go-critic-a26b6e30f1c6</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>LR syntaktický analyzátor<br />
<a href="https://cs.wikipedia.org/wiki/LR_syntaktick%C3%BD_analyz%C3%A1tor">https://cs.wikipedia.org/wiki/LR_syntaktick%C3%BD_analyz%C3%A1tor</a>
</li>

<li>Kategorie:Algoritmy syntaktické analýzy<br />
<a href="https://cs.wikipedia.org/wiki/Kategorie:Algoritmy_syntaktick%C3%A9_anal%C3%BDzy">https://cs.wikipedia.org/wiki/Kategorie:Algoritmy_syntaktick%C3%A9_anal%C3%BDzy</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

