<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Jazyk Go a textový terminál ve funkci základního prvku uživatelského rozhraní (2.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Jazyk Go a textový terminál ve funkci základního prvku uživatelského rozhraní (2.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Jazyk Go a textový terminál ve funkci základního prvku uživatelského rozhraní (2.část)</a></p>
<p><a href="#k02">2. Od knihovny <strong>aurora</strong> ke knihovně <strong>cfmt</strong></a></p>
<p><a href="#k03">3. Konce řádků ve vypisovaných zprávách</a></p>
<p><a href="#k04">4. Kombinace funkcí z&nbsp;knihoven <strong>fmt</strong> a <strong>cfmt</strong></a></p>
<p><a href="#k05">*** 5. Vytvoření řetězce se zprávou a současně i řídicími kódy pro změnu barvy</a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Jazyk Go a textový terminál ve funkci základního prvku uživatelského rozhraní (2.část)</h2>

<p>V&nbsp;dnešním článku se, podobně jako <a
href="https://www.root.cz/clanky/jazyk-go-a-textovy-terminal-ve-funkci-zakladniho-prvku-uzivatelskeho-rozhrani/">v&nbsp;článku
předchozím</a>, postupně zaměříme na popis knihoven určených pro práci
s&nbsp;textovým terminálem z&nbsp;programovacího jazyka Go. Tyto knihovny se od
sebe budou odlišovat svým zaměřením a můžeme je zhruba rozdělit do pěti
kategorií:</p>

<ol>

<li>Knihovny zlepšující logování a podporující barevné zvýraznění logovacích
zpráv na terminálu. Sem spadá například balíček <strong>zerolog</strong>
popsaný <a
href="https://www.root.cz/clanky/jazyk-go-a-textovy-terminal-ve-funkci-zakladniho-prvku-uzivatelskeho-rozhrani/">minule</a>.</li>

<li>Knihovny určené pro podporu různých barev popředí a pozadí textu, změnu
stylu textu atd. Příkladem může být balíček <strong>aurora</strong> zmíněný <a
href="https://www.root.cz/clanky/jazyk-go-a-textovy-terminal-ve-funkci-zakladniho-prvku-uzivatelskeho-rozhrani/#k13">minule</a>
popř.&nbsp;<strong>cfmt</strong> popsaný dnes, knihovna nazvaná
<strong>go-colortext</strong> apod.</li>

<li>Knihovny pro zobrazení jednoduchých textových dialogů a boxů se zprávami.
Tuto problematiku řeší balíček <strong>box-cli-maker</strong>.</li>

<li>Knihovny pro tvorbu grafů, &bdquo;teploměrů&ldquo; atd. na ploše terminálu.
Příkladem je balíček <strong>asciigraph</strong>. I tímto balíčkem se budeme
zabývat v&nbsp;dnešním článku.</li>

<li>Knihovny určené pro tvorbu plnohodnotných textových uživatelských rozhraní
(TUI). Příkladem mohou být balíčky <strong>termui</strong>,
<strong>termbox-go</strong>, <strong>progressbar</strong> atd.</li>

</ol>

<p><div class="rs-tip-major">Poznámka: dnes použité demonstrační příklady byly
opět spuštěny v&nbsp;<strong>xtermu</strong> s&nbsp;nastavením světlého pozadí.
Použité barvy se (podle očekávání) budou lišit ve chvíli, kdy bude použito
tmavé pozadí popřípadě odlišný emulátor terminálu &ndash; to je cena, kterou je
nutné zaplatit (mj.) i za zpětnou kompatibilitu.</div></p>

<a href="https://www.root.cz/obrazek/477891/"><img src="https://i.iinfo.cz/images/494/go-terminal-1-7-prev.png" class="image-477891" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="242" /></a>
<p><i>Obrázek 1: Zobrazení logovacích informací s&nbsp;různou úrovní provedené
přes knihovnu <strong>zerolog</strong>.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Od knihovny <strong>aurora</strong> ke knihovně <strong>cfmt</strong></h2>

<p>Ve druhé polovině předchozího článku jsme si ukázali základní možnosti
použití knihovny nazvané <strong>aurora</strong> (což je pro knihovnu
obarvující výstup na terminálu příhodné jméno). Tato knihovna umožňuje
explicitní specifikaci barev textu popř.&nbsp;jeho stylu. Pro tyto účely se
používá objekt získaný konstruktorem <strong>aurora.NewAurora</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "flag"
        "fmt"
&nbsp;
        "github.com/logrusorgru/aurora"
)
&nbsp;
var colorizer aurora.Aurora
&nbsp;
func <strong>init</strong>() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()
&nbsp;
        colorizer = aurora.NewAurora(*colors)
}
&nbsp;
func <strong>main</strong>() {
        fmt.Println(colorizer.Red("Test"))
        fmt.Println(colorizer.Green("Test"))
        fmt.Println(colorizer.Blue("Test"))
        fmt.Println(colorizer.Cyan("Test"))
        fmt.Println(colorizer.Magenta("Test"))
        fmt.Println(colorizer.Yellow("Test"))
&nbsp;
        fmt.Println()
&nbsp;
        fmt.Println(colorizer.Bold(colorizer.Red("Test")))
        fmt.Println(colorizer.Bold(colorizer.Green("Test")))
        fmt.Println(colorizer.Bold(colorizer.Blue("Test")))
        fmt.Println(colorizer.Bold(colorizer.Cyan("Test")))
        fmt.Println(colorizer.Bold(colorizer.Magenta("Test")))
        fmt.Println(colorizer.Bold(colorizer.Yellow("Test")))
}
</pre>

<p>S&nbsp;výsledkem:</p>

<a href="https://www.root.cz/obrazek/477898/"><img src="https://i.iinfo.cz/images/494/go-terminal-1-14-prev.png" class="image-477898" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="242" /></a>
<p><i>Obrázek 2: Knihovna <strong>aurora</strong>: kombinace tučného písma se specifikací barvy.</i></p>

<p>Možnosti poskytované touto knihovnou jsou sice široké, ale vyžadují
relativně velké zásahy do zdrojového kódu; navíc je obarvení prováděno na
poměrně nízké úrovni (&bdquo;toto má být červeně&ldquo;, &bdquo;tento text se
zeleným pozadím&ldquo;). Z&nbsp;důvodu zjednodušení a určité standardizace
proto nad samotnou <strong>aurorou</strong> vznikla knihovna nazvaná
<strong>cfmt</strong>, která obsahuje několik funkcí, jejichž názvy jsou
<i>sémantické</i> &ndash; říkají tedy, jakého typu je určitá zpráva a nikoli,
jak přesně má být obarvena. Tento přístup a ostatně i jména funkcí, jsou
převzaty z&nbsp;Bootstrapu. Podívejme se nyní na jednoduchý příklad použití
knihovny <strong>cfmt</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/mingrammer/cfmt"
)
&nbsp;
func <strong>main</strong>() {
        <u>cfmt.Success("Success message")</u>
        <u>cfmt.Info("Info message")</u>
        <u>cfmt.Warning("Warning message")</u>
        <u>cfmt.Error("Error message")</u>
}
</pre>

<p>S&nbsp;tímto výsledkem:</p>

*** image ***
<p><i>Obrázek 3: Výsledek zavolání čtyř základních funkcí z&nbsp;knihovny
<strong>cfmt</strong>.</i></p>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se nevytváří žádný
pomocný objekt, tj.&nbsp;použití <strong>cfmt</strong> je stejně
&bdquo;složité&ldquo; jako použití základní knihovny
<strong>fmt</strong>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Konce řádků ve vypisovaných zprávách</h2>

<p>Výše zmíněné funkce <strong>Success</strong>, <strong>Info</strong>,
<strong>Warning</strong> a <strong>Error</strong> z&nbsp;knihovny
<strong>cfmt</strong> odpovídají svým chováním funkci <strong>Print</strong> ze
standardního balíčku <strong>fmt</strong>, pochopitelně až na ten rozdíl, že
text obarvují. Pokud tedy budeme potřebovat jednotlivé zprávy vypsat na nové
řádky, je jedním z&nbsp;možných řešení explicitní zařazení znaku
&bdquo;\n&ldquo; do vypisovaných zpráv (v&nbsp;případě logování přes
<strong>zerolog</strong> je to pochopitelně zbytečné):</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/mingrammer/cfmt"
)
&nbsp;
func <strong>main</strong>() {
        <u>cfmt.Success("Success message\n")</u>
        <u>cfmt.Info("Info message\n")</u>
        <u>cfmt.Warning("Warning message\n")</u>
        <u>cfmt.Error("Error message\n")</u>
}
</pre>

<p>S&nbsp;výsledkem:</p>

*** image ***
<p><i>Obrázek 4: Explicitní zařazení znaku &bdquo;\n&ldquo; do vypisovaných
zpráv.</i></p>

<p>Ve standardní knihovně <strong>fmt</strong> je vedle funkce
<strong>Print</strong> dostupná i funkce <strong>Println</strong>, která
odřádkování provede automaticky. I pro tuto funkci existují v&nbsp;knihovně
<strong>cfmt</strong> obdobné funkce končící na &bdquo;ln&ldquo;, které jsou
ukázány v&nbsp;dalším demonstračním příkladu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/mingrammer/cfmt"
)
&nbsp;
func <strong>main</strong>() {
        <u>cfmt.Successln("Success message")</u>
        <u>cfmt.Infoln("Info message")</u>
        <u>cfmt.Warningln("Warning message")</u>
        <u>cfmt.Errorln("Error message")</u>
}
</pre>

<p>S&nbsp;výsledkem:</p>

*** image ***
<p><i>Obrázek 5: Příklad použití funkcí <strong>*ln</strong>, které automaticky
odřádkují.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Kombinace funkcí z&nbsp;knihoven <strong>fmt</strong> a <strong>cfmt</strong></h2>

<p>Jednou z&nbsp;předností knihovny <strong>cfmt</strong> je záruka, že volání
jejích funkcí je možné bez problémů proložit s&nbsp;voláním funkcí ze
standardní knihovny <strong>fmt</strong>. To ve skutečnosti pro jiné knihovny
nemusí platit, a to například kvůli odlišnému řešení bufferů, specifikám
různých operačních systémů atd. Následující příklad, který kombinuje volání
funkcí z&nbsp;obou výše zmíněných knihoven, je tedy nejenom plně funkční, ale i
přenositelný na různé operační systémy a platformy:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/mingrammer/cfmt"
)
&nbsp;
func <strong>main</strong>() {
        fmt.Print("1st line: ")
        <u>cfmt.Successln("Success message")</u>
&nbsp;
        fmt.Print("2nd line: ")
        <u>cfmt.Infoln("Info message")</u>
&nbsp;
        fmt.Print("3rd line: ")
        <u>cfmt.Warningln("Warning message")</u>
&nbsp;
        fmt.Print("4th line: ")
        <u>cfmt.Errorln("Error message")</u>
&nbsp;
        fmt.Println()
        fmt.Println("That's all...")
}
</pre>

<p>Nyní by měl výsledek vypadat takto:</p>

*** image ***
<p><i>Obrázek 6: Prokládané volání funkcí z&nbsp;knihoven <strong>fmt</strong>
a <strong>cfmt</strong>.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vytvoření řetězce se zprávou a současně i řídicími kódy pro změnu barvy</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/mingrammer/cfmt"
)
&nbsp;
func <strong>main</strong>() {
        var msg string
&nbsp;
        msg = cfmt.Ssuccess("Success message")
        fmt.Printf("1st line: %s\n", msg)
&nbsp;
        msg = cfmt.Sinfo("Info message")
        fmt.Printf("2nd line: %s\n", msg)
&nbsp;
        msg = cfmt.Swarning("Warning message")
        fmt.Printf("3rd line: %s\n", msg)
&nbsp;
        msg = cfmt.Serror("Error message")
        fmt.Printf("4th line: %s\n", msg)
&nbsp;
        fmt.Println()
        fmt.Println("That's all...")
}
</pre>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/mingrammer/cfmt"
)
&nbsp;
func <strong>main</strong>() {
        var msg string
&nbsp;
        msg = cfmt.Ssuccessln("Success message")
        fmt.Printf("1st line: %s", msg)
&nbsp;
        msg = cfmt.Sinfoln("Info message")
        fmt.Printf("2nd line: %s", msg)
&nbsp;
        msg = cfmt.Swarningln("Warning message")
        fmt.Printf("3rd line: %s", msg)
&nbsp;
        msg = cfmt.Serrorln("Error message")
        fmt.Printf("4th line: %s", msg)
&nbsp;
        fmt.Println()
        fmt.Println("That's all...")
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/mingrammer/cfmt"
)
&nbsp;
func <strong>main</strong>() {
        for i := 1; i &lt;= 10; i++ {
                switch {
                case i &lt; 5:
                        cfmt.Warningf("Value too low: %d\n", i)
                case i == 5:
                        cfmt.Successf("An ideal value: %d\n", i)
                case i == 10:
                        cfmt.Errorf("Too high!!! %d\n", i)
                case i &gt; 5:
                        cfmt.Infof("Bit higher then necessary: %d\n", i)
                default:
                        cfmt.Errorf("Can't happen %d\n", i)
                }
        }
&nbsp;
        fmt.Println()
        fmt.Println("That's all...")
}
</pre>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/hex"
        "fmt"
&nbsp;
        "github.com/mingrammer/cfmt"
)
&nbsp;
func printEncoded(s string) {
        bytes := []byte(s)
        fmt.Printf("Encoded:\n%s\n", hex.Dump(bytes))
}
&nbsp;
func <strong>main</strong>() {
        var msg string
&nbsp;
        msg = cfmt.Ssuccessln("Success message")
        fmt.Printf("1st line: %s", msg)
        printEncoded(msg)
&nbsp;
        msg = cfmt.Sinfoln("Info message")
        fmt.Printf("2nd line: %s", msg)
        printEncoded(msg)
&nbsp;
        msg = cfmt.Swarningln("Warning message")
        fmt.Printf("3rd line: %s", msg)
        printEncoded(msg)
&nbsp;
        msg = cfmt.Serrorln("Error message")
        fmt.Printf("4th line: %s", msg)
        printEncoded(msg)
&nbsp;
        fmt.Println()
        fmt.Println("That's all...")
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/mingrammer/cfmt"
)
&nbsp;
func <strong>main</strong>() {
        file, err := os.Create("./temp.txt")
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        defer file.Close()
&nbsp;
        cfmt.Fsuccessln(file, "Success message")
        cfmt.Finfoln(file, "Info message")
        cfmt.Fwarningln(file, "Warning message")
        cfmt.Ferrorln(file, "Error message")
}
</pre>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "os"
&nbsp;
        "github.com/mingrammer/cfmt"
)
&nbsp;
func <strong>main</strong>() {
        file, err := os.Create("./temp.txt")
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        defer file.Close()
&nbsp;
        for i := 1; i &lt;= 10; i++ {
                switch {
                case i &lt; 5:
                        cfmt.Fwarningf(file, "Value too low: %d\n", i)
                case i == 5:
                        cfmt.Fsuccessf(file, "An ideal value: %d\n", i)
                case i == 10:
                        cfmt.Ferrorf(file, "Too high!!! %d\n", i)
                case i &gt; 5:
                        cfmt.Finfof(file, "Bit higher then necessary: %d\n", i)
                default:
                        cfmt.Ferrorf(file, "Can't happen %d\n", i)
                }
        }
&nbsp;
        fmt.Println()
        fmt.Println("That's all...")
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>

<pre>
package <strong>main</strong>

import (
	"fmt"
	"github.com/guptarohit/asciigraph"
)

func <strong>main</strong>() {
	data := []float64{3, 4, 5, 6, 9, 8, 5, 8, 6, 10, 2, 7, 2, 5, 6}
	graph := asciigraph.Plot(data)

	fmt.Println(graph)
}
</pre>

<pre>
 10.00 ┤        ╭╮
  9.00 ┤   ╭╮   ││
  8.00 ┤   │╰╮╭╮││
  7.00 ┤   │ │││││╭╮
  6.00 ┤  ╭╯ ││╰╯│││ ╭
  5.00 ┤ ╭╯  ╰╯  │││╭╯
  4.00 ┤╭╯       ││││
  3.00 ┼╯        ││││
  2.00 ┤         ╰╯╰╯
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>

<pre>
package <strong>main</strong>

import (
	"fmt"

	"github.com/guptarohit/asciigraph"
)

const SAMPLES = 40

func <strong>main</strong>() {
	var values [SAMPLES]float64

	for i := 0; i &lt; SAMPLES; i++ {
		values[i] = float64(i % 10)
	}
	graph := asciigraph.Plot(values)

	fmt.Println(graph)
}
</pre>

<pre>
./02-computed-values.go:17:26: cannot use values (type [40]float64) as type []float64 in argument to asciigraph.Plot
</pre>

<p></p>

<pre>
package <strong>main</strong>

import (
	"fmt"

	"github.com/guptarohit/asciigraph"
)

const SAMPLES = 40

func <strong>main</strong>() {
	var values [SAMPLES]float64

	for i := 0; i &lt; SAMPLES; i++ {
		values[i] = float64(i % 10)
	}
	graph := asciigraph.Plot(values[:])

	fmt.Println(graph)
}
</pre>

<pre>
 9.00 ┼        ╭╮        ╭╮        ╭╮        ╭
 8.00 ┤       ╭╯│       ╭╯│       ╭╯│       ╭╯
 7.00 ┤      ╭╯ │      ╭╯ │      ╭╯ │      ╭╯
 6.00 ┤     ╭╯  │     ╭╯  │     ╭╯  │     ╭╯
 5.00 ┤    ╭╯   │    ╭╯   │    ╭╯   │    ╭╯
 4.00 ┤   ╭╯    │   ╭╯    │   ╭╯    │   ╭╯
 3.00 ┤  ╭╯     │  ╭╯     │  ╭╯     │  ╭╯
 2.00 ┤ ╭╯      │ ╭╯      │ ╭╯      │ ╭╯
 1.00 ┤╭╯       │╭╯       │╭╯       │╭╯
 0.00 ┼╯        ╰╯        ╰╯        ╰╯
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>

<pre>
package <strong>main</strong>

import (
	"fmt"

	"github.com/guptarohit/asciigraph"
)

const SAMPLES = 200

func <strong>main</strong>() {
	var values [SAMPLES]float64

	for i := 0; i &lt; SAMPLES; i++ {
		values[i] = float64(i / 2 % 16)
	}
	graph := asciigraph.Plot(values[:])

	fmt.Println(graph)
}
</pre>

<pre>
 15.00 ┼                             ╭─╮                             ╭─╮                             ╭─╮                             ╭─╮                             ╭─╮                             ╭─╮
 14.00 ┤                           ╭─╯ │                           ╭─╯ │                           ╭─╯ │                           ╭─╯ │                           ╭─╯ │                           ╭─╯ │
 13.00 ┤                         ╭─╯   │                         ╭─╯   │                         ╭─╯   │                         ╭─╯   │                         ╭─╯   │                         ╭─╯   │
 12.00 ┤                       ╭─╯     │                       ╭─╯     │                       ╭─╯     │                       ╭─╯     │                       ╭─╯     │                       ╭─╯     │
 11.00 ┤                     ╭─╯       │                     ╭─╯       │                     ╭─╯       │                     ╭─╯       │                     ╭─╯       │                     ╭─╯       │
 10.00 ┤                   ╭─╯         │                   ╭─╯         │                   ╭─╯         │                   ╭─╯         │                   ╭─╯         │                   ╭─╯         │
  9.00 ┤                 ╭─╯           │                 ╭─╯           │                 ╭─╯           │                 ╭─╯           │                 ╭─╯           │                 ╭─╯           │
  8.00 ┤               ╭─╯             │               ╭─╯             │               ╭─╯             │               ╭─╯             │               ╭─╯             │               ╭─╯             │
  7.00 ┤             ╭─╯               │             ╭─╯               │             ╭─╯               │             ╭─╯               │             ╭─╯               │             ╭─╯               │
  6.00 ┤           ╭─╯                 │           ╭─╯                 │           ╭─╯                 │           ╭─╯                 │           ╭─╯                 │           ╭─╯                 │
  5.00 ┤         ╭─╯                   │         ╭─╯                   │         ╭─╯                   │         ╭─╯                   │         ╭─╯                   │         ╭─╯                   │
  4.00 ┤       ╭─╯                     │       ╭─╯                     │       ╭─╯                     │       ╭─╯                     │       ╭─╯                     │       ╭─╯                     │
  3.00 ┤     ╭─╯                       │     ╭─╯                       │     ╭─╯                       │     ╭─╯                       │     ╭─╯                       │     ╭─╯                       │     ╭─
  2.00 ┤   ╭─╯                         │   ╭─╯                         │   ╭─╯                         │   ╭─╯                         │   ╭─╯                         │   ╭─╯                         │   ╭─╯
  1.00 ┤ ╭─╯                           │ ╭─╯                           │ ╭─╯                           │ ╭─╯                           │ ╭─╯                           │ ╭─╯                           │ ╭─╯
  0.00 ┼─╯                             ╰─╯                             ╰─╯                             ╰─╯                             ╰─╯                             ╰─╯                             ╰─╯
</pre>

<p></p>

<pre>
package <strong>main</strong>

import (
	"fmt"

	"github.com/guptarohit/asciigraph"
)

const SAMPLES = 64

func displayGraph(modulus int) {
	var values [SAMPLES]float64

	for i := 0; i &lt; SAMPLES; i++ {
		values[i] = float64(i % modulus)
	}
	graph := asciigraph.Plot(values[:])

	fmt.Println(graph)
}

func <strong>main</strong>() {
	for modulus := 2; modulus &lt;= 64; modulus *= 2 {
		displayGraph(modulus)
		fmt.Println("\n")
	}
}
</pre>

<pre>
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>

<pre>
package <strong>main</strong>

import (
	"fmt"

	"github.com/guptarohit/asciigraph"
)

const SAMPLES = 64

func displayGraph(modulus int, slope int) {
	var values [SAMPLES]float64

	for i := 0; i &lt; SAMPLES; i++ {
		values[i] = float64(i / slope % modulus)
	}
	graph := asciigraph.Plot(values[:])

	fmt.Println(graph)
}

func <strong>main</strong>() {
	const modulus = 16
	for slope := 1; slope &lt;= 5; slope++ {
		displayGraph(modulus, slope)
		fmt.Println("\n")
	}
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>

<pre>
package <strong>main</strong>

import (
	"fmt"

	"github.com/guptarohit/asciigraph"
)

const SAMPLES = 64

func displayGraph(modulus int, slope int) {
	var values [SAMPLES]float64

	for i := 0; i &lt; SAMPLES; i++ {
		values[i] = float64((i - SAMPLES/2) / slope % modulus)
	}
	graph := asciigraph.Plot(values[:])

	fmt.Println(graph)
}

func <strong>main</strong>() {
	const modulus = 16
	for slope := 1; slope &lt;= 5; slope++ {
		displayGraph(modulus, slope)
		fmt.Println("\n")
	}
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>

<pre>
package <strong>main</strong>

import (
	"fmt"

	"github.com/guptarohit/asciigraph"
)

const SAMPLES = 64

func displayGraph(modulus int, slope int) {
	var values [SAMPLES]float64

	for i := 0; i &lt; SAMPLES; i++ {
		values[i] = float64((i - SAMPLES/2) / slope % modulus)
	}

	width := asciigraph.Width(40)
	height := asciigraph.Height(20)
	caption := asciigraph.Caption(fmt.Sprintf("Modulus: %d, slope: %d", modulus, slope))

	graph := asciigraph.Plot(values[:], width, height, caption)

	fmt.Println(graph)
}

func <strong>main</strong>() {
	const modulus = 16
	for slope := 1; slope &lt;= 5; slope++ {
		displayGraph(modulus, slope)
		fmt.Println("\n")
	}
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>

<pre>
package <strong>main</strong>

import (
	"fmt"
	"math"

	"github.com/guptarohit/asciigraph"
)

func <strong>main</strong>() {
	data := []float64{3, 4, 5, 6, 9, 8, 5, math.NaN(), 6, 10, 2, 7, 2, 5, 6}
	graph := asciigraph.Plot(data)

	fmt.Println(graph)
}
</pre>

<pre>
 10.00 ┤        ╭╮
  9.00 ┤   ╭╮   ││
  8.00 ┤   │╰╮  ││
  7.00 ┤   │ │  ││╭╮
  6.00 ┤  ╭╯ │ ╶╯│││ ╭
  5.00 ┤ ╭╯  ╰╴  │││╭╯
  4.00 ┤╭╯       ││││
  3.00 ┼╯        ││││
  2.00 ┤         ╰╯╰╯
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>

<pre>
package <strong>main</strong>

import (
	"fmt"
	"math"

	"github.com/guptarohit/asciigraph"
)

func <strong>main</strong>() {
	data := []float64{3, 4, 5, 6, 9, 8, 5, math.Inf(1), 6, 10, 2, math.Inf(-1), 2, 5, 6}
	graph := asciigraph.Plot(data)

	fmt.Println(graph)
}
</pre>

<pre>
panic: runtime error: index out of range [-9223372036854775808]

goroutine 1 [running]:
github.com/guptarohit/asciigraph.Plot(0xc000055ec8, 0xf, 0xf, 0x0, 0x0, 0x0, 0xc000010260, 0xc000076ef0)
        /home/ptisnovs/go/src/github.com/guptarohit/asciigraph/asciigraph.go:109 +0x16fd
main.main()
        /home/ptisnovs/src/go-root/article_77/asciigraph/10-infinity.go:12 +0xac
exit status 2
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>

<pre>
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>

<pre>
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01-basic-usage.go</td><td>základní způsob použití balíčku <strong>cfmt</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/01-basic-usage.go">https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/01-basic-usage.go</a></td></tr>
<tr><td> 2</td><td>02-explicit-endlines.go</td><td>explicitní tisk konců řádků</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/02-explicit-endlines.go">https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/02-explicit-endlines.go</a></td></tr>
<tr><td> 3</td><td>03-implicit-endlines.go</td><td>implicitní tisk konců řádků</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/03-implicit-endlines.go">https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/03-implicit-endlines.go</a></td></tr>
<tr><td> 4</td><td>04-mixing-with-fmt.go</td><td>použití obarveného řetězce se standardním balíčkem <strong>fmt</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/04-mixing-with-fmt.go">https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/04-mixing-with-fmt.go</a></td></tr>
<tr><td> 5</td><td>05-string-generation.go</td><td>obarvený výstup přesměrovaný do řetězce</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/05-string-generation.go">https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/05-string-generation.go</a></td></tr>
<tr><td> 6</td><td>06-string-generation-newlines.go</td><td>obarvený výstup přesměrovaný do řetězce</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/06-string-generation-newlines.go">https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/06-string-generation-newlines.go</a></td></tr>
<tr><td> 7</td><td>07-string-formatting.go</td><td>formátování s&nbsp;obarvením</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/07-string-formatting.go">https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/07-string-formatting.go</a></td></tr>
<tr><td> 8</td><td>08-string-content.go</td><td>výpis obsahu obarveného řetězce</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/08-string-content.go">https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/08-string-content.go</a></td></tr>
<tr><td> 9</td><td>09-output-to-file.go</td><td>obarvený výstup přesměrovaný do souboru</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/09-output-to-file.go">https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/09-output-to-file.go</a></td></tr>
<tr><td>10</td><td>10-output-to-file.go</td><td>obarvený výstup přesměrovaný do souboru</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/10-output-to-file.go">https://github.com/tisnik/go-root/blob/master/article_77/cfmt-mindgrammer/10-output-to-file.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>01-basic-usage.go</td><td>základní způsob použití balíčku <strong>asciigraph</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/01-basic-usage.go">https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/01-basic-usage.go</a></td></tr>
<tr><td>12</td><td>02-computed-values.go</td><td>předpočet hodnot pro zobrazení (nefunkční příklad)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/02-computed-values.go">https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/02-computed-values.go</a></td></tr>
<tr><td>13</td><td>03-to-slice.go</td><td>předpočet hodnot pro zobrazení (funkční příklad)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/03-to-slice.go">https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/03-to-slice.go</a></td></tr>
<tr><td>14</td><td>04-x-range.go</td><td>implicitní určení rozsahu na x-ové ose</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/04-x-range.go">https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/04-x-range.go</a></td></tr>
<tr><td>15</td><td>05-y-range.go</td><td>implicitní určení rozsahu na y-ové ose</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/05-y-range.go">https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/05-y-range.go</a></td></tr>
<tr><td>16</td><td>06-slope.go</td><td>sklon grafu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/06-slope.go">https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/06-slope.go</a></td></tr>
<tr><td>17</td><td>07-negative-values.go</td><td>vliv negativních hodnot na tvar grafu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/07-negative-values.go">https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/07-negative-values.go</a></td></tr>
<tr><td>18</td><td>08-settings.go</td><td>nastavení vlastností zobrazovaného grafu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/08-settings.go">https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/08-settings.go</a></td></tr>
<tr><td>19</td><td>09-nans.go</td><td>hodnoty <strong>NaN</strong> v&nbsp;grafu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/09-nans.go">https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/09-nans.go</a></td></tr>
<tr><td>20</td><td>10-infinity.go</td><td>kladné a záporné nekonečno v&nbsp;grafu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/10-infinity.go">https://github.com/tisnik/go-root/blob/master/article_77/asciigraph/10-infinity.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Jazyk Go a textový terminál ve funkci základního prvku uživatelského rozhraní<br />
<a href="https://www.root.cz/clanky/jazyk-go-a-textovy-terminal-ve-funkci-zakladniho-prvku-uzivatelskeho-rozhrani/">https://www.root.cz/clanky/jazyk-go-a-textovy-terminal-ve-funkci-zakladniho-prvku-uzivatelskeho-rozhrani/</a>
</li>

<li>Tvorba aplikací a her s&nbsp;textovým uživatelským rozhraním s&nbsp;využitím knihovny Blessed<br />
<a href="https://www.root.cz/clanky/tvorba-aplikaci-a-her-s-textovym-uzivatelskym-rozhranim-s-vyuzitim-knihovny-blessed/">https://www.root.cz/clanky/tvorba-aplikaci-a-her-s-textovym-uzivatelskym-rozhranim-s-vyuzitim-knihovny-blessed/</a>
</li>

<li>Tvorba aplikací a her s&nbsp;textovým rozhraním s&nbsp;knihovnou Blessed (dokončení)<br />
<a href="https://www.root.cz/clanky/tvorba-aplikaci-a-her-s-textovym-rozhranim-s-knihovnou-blessed-dokonceni/">https://www.root.cz/clanky/tvorba-aplikaci-a-her-s-textovym-rozhranim-s-knihovnou-blessed-dokonceni/</a>
</li>

<li>ANSI Escape Code &ndash; Colors<br />
<a href="https://en.wikipedia.org/wiki/ANSI_escape_code#Colors">https://en.wikipedia.org/wiki/ANSI_escape_code#Colors</a>
</li>

<li>A curated list of awesome Go frameworks, libraries and software<br />
<a href="https://awesome-go.com/">https://awesome-go.com/</a>
</li>

<li>Aurora<br />
<a href="https://github.com/logrusorgru/aurora">https://github.com/logrusorgru/aurora</a>
</li>

<li>colourize<br />
<a href="https://github.com/TreyBastian/colourize">https://github.com/TreyBastian/colourize</a>
</li>

<li>go-colortext<br />
<a href="https://github.com/daviddengcn/go-colortext">https://github.com/daviddengcn/go-colortext</a>
</li>

<li>blessed na PyPi<br />
<a href="https://pypi.org/project/blessed/">https://pypi.org/project/blessed/</a>
</li>

<li>blessed na GitHubu<br />
<a href="https://github.com/jquast/blessed">https://github.com/jquast/blessed</a>
</li>

<li>Blessed documentation!<br />
<a href="https://blessed.readthedocs.io/en/latest/">https://blessed.readthedocs.io/en/latest/</a>
</li>

<li>termbox-go na GitHubu<br />
<a href="https://github.com/nsf/termbox-go">https://github.com/nsf/termbox-go</a>
</li>

<li>termui na GitHubu<br />
<a href="https://github.com/gizak/termui">https://github.com/gizak/termui</a>
</li>

<li>blessed na GitHubu<br />
<a href="https://github.com/chjj/blessed">https://github.com/chjj/blessed</a>
</li>

<li>blessed-contrib na GitHubu<br />
<a href="https://github.com/yaronn/blessed-contrib">https://github.com/yaronn/blessed-contrib</a>
</li>

<li>tui-rs na GitHubu<br />
<a href="https://github.com/fdehau/tui-rs">https://github.com/fdehau/tui-rs</a>
</li>

<li>asciigraph<br />
<a href="https://github.com/guptarohit/asciigraph">https://github.com/guptarohit/asciigraph</a>
</li>

<li>Standardní balíček text/tabwriter<br />
<a href="https://golang.org/pkg/text/tabwriter/">https://golang.org/pkg/text/tabwriter/</a>
</li>

<li>Elastic tabstops: A better way to indent and align code<br />
<a href="https://nickgravgaard.com/elastic-tabstops/">https://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>ASCII Table Writer<br />
<a href="https://github.com/olekukonko/tablewriter">https://github.com/olekukonko/tablewriter</a>
</li>

<li>TablePrinter<br />
<a href="https://github.com/lensesio/tableprinter">https://github.com/lensesio/tableprinter</a>
</li>

<li>go-pretty<br />
<a href="https://github.com/jedib0t/go-pretty">https://github.com/jedib0t/go-pretty</a>
</li>

<li>What are the drawbacks of elastic tabstops?<br />
<a href="https://softwareengineering.stackexchange.com/questions/137290/what-are-the-drawbacks-of-elastic-tabstops">https://softwareengineering.stackexchange.com/questions/137290/what-are-the-drawbacks-of-elastic-tabstops</a>
</li>

<li>Elastic tabstop editors and plugins<br />
<a href="https://stackoverflow.com/questions/28652/elastic-tabstop-editors-and-plugins">https://stackoverflow.com/questions/28652/elastic-tabstop-editors-and-plugins</a>
</li>

<li>Příkaz gofmt<br />
<a href="https://golang.org/cmd/gofmt/">https://golang.org/cmd/gofmt/</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>zerolog<br />
<a href="https://github.com/rs/zerolog">https://github.com/rs/zerolog</a>
</li>

<li>Zero Allocation JSON Logger na Go.doc<br />
<a href="https://pkg.go.dev/github.com/rs/zerolog?utm_source=godoc">https://pkg.go.dev/github.com/rs/zerolog?utm_source=godoc</a>
</li>

<li>cfmt<br />
<a href="https://github.com/mingrammer/cfmt">https://github.com/mingrammer/cfmt</a>
</li>

<li>box-cli-maker<br />
<a href="https://github.com/Delta456/box-cli-maker">https://github.com/Delta456/box-cli-maker</a>
</li>

<li>Who uses zerolog<br />
<a href="https://github.com/rs/zerolog/wiki/Who-uses-zerolog">https://github.com/rs/zerolog/wiki/Who-uses-zerolog</a>
</li>

<li>Go Progress Bar<br />
<a href="https://github.com/ermanimer/progress_bar">https://github.com/ermanimer/progress_bar</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

