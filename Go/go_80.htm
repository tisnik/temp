<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Standardní šablonovací systém jazyka Go (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Standardní šablonovací systém jazyka Go (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Standardní šablonovací systém jazyka Go (dokončení)</a></p>
<p><a href="#k02">2. Naformátování hodnot funkcí <strong>fmt.Printf</strong> volanou přímo ze šablony</a></p>
<p><a href="#k03">3. Podmínky v&nbsp;šablonách</a></p>
<p><a href="#k04">4. Praktické otestování podmínky v&nbsp;šabloně</a></p>
<p><a href="#k05">5. Plná podmínka typu <strong>if-then-else</strong> v&nbsp;šabloně</a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. Vytištění tabulky malé násobilky</a></p>
<p><a href="#k15">*** 15. Vylepšení předchozího demonstračního příkladu</a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Standardní šablonovací systém jazyka Go (dokončení)</h2>

<p>V&nbsp;závěru <a
href="https://www.root.cz/clanky/standardni-sablonovaci-system-jazyka-go/">úvodního
článku o standardním šablonovacím systému programovacího jazyka Go</a> jsme si
ukázali, že přímo v&nbsp;šabloně je možné definovat oblast, která se má
opakovat pro všechny prvky získané ze vstupních dat. Tato v&nbsp;praxi velmi
užitečná funkcionalita je založena na použití značek &bdquo;{{range
<i>selektor</i>}}&ldquo; a &bdquo;{{end}}&ldquo;. <i>Selektorem</i> je přitom
myšleno určení opakujících se prvků ve vstupních datech. Prozatím zde využijeme
tečku (<i>dot</i>), ale v&nbsp;navazujících kapitolách si ukážeme, že lze
iterovat i přes všechny hodnoty vybraného prvku apod. Vše, co je zapsáno mezi
značkami &bdquo;{{range}}&ldquo; a &bdquo;{{end}}&ldquo; (tedy jak běžný text,
tak i značky šablony), bude opakováno tolikrát, kolik prvků je nalezeno ve
vstupních datech. Přístup k&nbsp;hodnotám těchto prvků je opět proveden
s&nbsp;využitím nám již dobře známé tečkové notace, tedy například:</p>

<pre>
<strong>{{range .}}</strong>Jméno {{.Name}} {{.Surname}}
Popularita {{.Popularity}}
---
<strong>{{end}}</strong>
</pre>

<p>Tato šablona byla použita v&nbsp;následujícím demonstračním příkladu,
s&nbsp;nímž jsme se seznámili minule:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
        "text/template"
)
&nbsp;
const (
        templateFilename = "template15.txt"
)
&nbsp;
<i>// datový typ, jehož prvky budou vypisovány v šabloně</i>
type <strong>Role</strong> struct {
        Name       string
        Surname    string
        Popularity int
}
&nbsp;
func <strong>main</strong>() {
        <i>// vytvoření nové šablony</i>
        tmpl := template.Must(template.ParseFiles(templateFilename))
&nbsp;
        <i>// tyto hodnoty budou použity při aplikaci šablony</i>
        roles := []Role{
                Role{"Eliška", "Najbrtová", 4},
                Role{"Jenny", "Suk", 3},
                Role{"Anička", "Šafářová", 1},
                Role{"Sváťa", "Pulec", 3},
                Role{"Blažej", "Motyčka", 8},
                Role{"Eda", "Wasserfall", 3},
                Role{"Přemysl", "Hájek", 10},
        }
&nbsp;
        <i>// aplikace šablony - přepis hodnot</i>
        err := tmpl.Execute(os.Stdout, roles)
        if err != nil {
                panic(err)
        }
}
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
Jméno Eliška Najbrtová
Popularita 4
---
Jméno Jenny Suk
Popularita 3
---
Jméno Anička Šafářová
Popularita 1
---
Jméno Sváťa Pulec
Popularita 3
---
Jméno Blažej Motyčka
Popularita 8
---
Jméno Eda Wasserfall
Popularita 3
---
Jméno Přemysl Hájek
Popularita 10
---
</pre>

<p>Úplný zdrojový kód demonstračního příkladu z&nbsp;této kapitoly je dostupný na adrese <a
href="https://github.com/tisnik/go-root/blob/master/article_79/template15.go">https://github.com/tisnik/go-root/blob/master/article_79/template15.go</a>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Naformátování hodnot funkcí <strong>fmt.Printf</strong> volanou přímo ze šablony</h2>

<p>V&nbsp;mnoha případech by se hodilo hodnoty, které se vkládají do šablony,
nějakým způsobem naformátovat. Autoři šablonovacích systémů přistupují
k&nbsp;tomuto problému z&nbsp;různých stran, většinou přidáním dalších znaků se
speciálním významem do doménově specifického šablonovacího jazyka.
V&nbsp;případě standardního šablonovacího systému jazyka Go je tomu jinak,
protože pro naformátování se používá standardní funkce
<strong>fmt.Printf</strong> resp.&nbsp;<strong>fmt.Sprintf</strong>. Volání
této funkce v&nbsp;šabloně se však provádí bez závorek okolo parametrů,
například následovně:</p>

<pre>
--------------------------------------------------------------------
{{range .}}Jméno <strong>{{printf "%-15s" .Name}}</strong> <strong>{{printf "%-15s" .Surname}}</strong> Popularita <strong>{{printf "%2d" .Popularity}</strong>}
{{end}}
--------------------------------------------------------------------
</pre>

<p>To znamená, že následující část šablony:</p>

<pre>
{{printf "%-15s" .Name}}
</pre>

<p>Vlastně odpovídá volání:</p>

<pre>
fmt.Printf("%-15s", item.Name)
</pre>

<p>V&nbsp;případě, že výše uvedenou šablonu použijeme v&nbsp;demonstračním
příkladu, bude výstup naformátován tímto způsobem:</p>

<pre>
--------------------------------------------------------------------
Jméno Eliška          Najbrtová       Popularita  4
Jméno Jenny           Suk             Popularita  3
Jméno Anička          Šafářová        Popularita  1
Jméno Sváťa           Pulec           Popularita  3
Jméno Blažej          Motyčka         Popularita  8
Jméno Eda             Wasserfall      Popularita  3
Jméno Přemysl         Hájek           Popularita 10
&nbsp;
--------------------------------------------------------------------
</pre>

<p>Úplný zdrojový kód demonstračního příkladu z&nbsp;této kapitoly je dostupný
na adrese <a
href="https://github.com/tisnik/go-root/blob/master/article_80/template16.go">https://github.com/tisnik/go-root/blob/master/article_80/template16.go</a>.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Podmínky v&nbsp;šablonách</h2>

<p>Mnohdy se taktéž setkáme s&nbsp;nutností použít v&nbsp;šablonách podmínku,
což znamená, že určitá část textu bude ve výsledku použita pouze při splnění
nějaké podmínky (a popř.&nbsp;jiná při nesplnění té samé podmínky). Příkladem
může být například šablona, která je součástí dokumentace/nápovědy ke
standardnímu šablonovacímu systému jazyka Go:</p>

<pre>
Dear {{.Name}},
<strong>{{if .Attended}}</strong>
It was a pleasure to see you at the wedding.
<strong>{{else}}</strong>
It is a shame you couldn't make it to the wedding.
<strong>{{end}}</strong>
{{end}}
Best wishes,
Josie
</pre>

<p>V&nbsp;podmínce se mohou volat funkce, které odpovídají standardním relačním
operátorům:</p>

<table>
<tr><th>Funkce</th><th>Odpovídá výrazu</th></tr>
<tr><td>eq</td><td>arg1 == arg2</td></tr>
<tr><td>ne</td><td>arg1 != arg2</td></tr>
<tr><td>lt</td><td>arg1 &lt; arg2</td></tr>
<tr><td>le</td><td>arg1 &lt;= arg2</td></tr>
<tr><td>gt</td><td>arg1 &gt; arg2</td></tr>
<tr><td>ge</td><td>arg1 &gt;= arg2</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: důležité je vědět, které hodnoty se
vyhodnotí jako pravda a které jako nepravda. Za nepravdu jsou považovány
hodnoty <strong>0</strong>, <strong>false</strong>, <strong>nil</strong> a
taktéž řetězce, pole, řezy a mapy s&nbsp;nulovou délkou resp.&nbsp;nulovým
počtem prvků (což je odlišné od standardní sémantiky jazyka Go!). Ostatní
hodnoty jsou považovány za pravdivé.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Praktické otestování podmínky v&nbsp;šabloně</h2>

<p>Podívejme se nyní na praktický způsob použití šablony s&nbsp;podmínkou.
Budeme rozlišovat, zda je popularita role v&nbsp;Cimrmanovských hrách známá či
nikoli. Použijeme přitom explicitní test, zda je zapsaná hodnota ostře větší
než nula:</p>

<pre>
--------------------------------------------------------------------
{{range .}}Jméno {{printf "%-15s" .Name}} {{printf "%-15s" .Surname}} <strong>{{if gt .Popularity 0}}</strong> Popularita {{printf "%2d" .Popularity}} <strong>{{end}}</strong>
{{end}}
--------------------------------------------------------------------
</pre>

<p>Zdrojový kód demonstračního příkladu se změní jen nepatrně &ndash; pozměníme
hodnoty prvků <strong>Popularity</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
        "text/template"
)
&nbsp;
const (
        templateFilename = "template17.txt"
)
&nbsp;
<i>// datový typ, jehož prvky budou vypisovány v šabloně</i>
type <strong>Role</strong> struct {
        Name       string
        Surname    string
        Popularity int
}
&nbsp;
func <strong>main</strong>() {
        <i>// vytvoření nové šablony</i>
        tmpl := template.Must(template.ParseFiles(templateFilename))
&nbsp;
        <i>// tyto hodnoty budou použity při aplikaci šablony</i>
        roles := []Role{
                Role{"Eliška", "Najbrtová", 4},
                Role{"Jenny", "Suk", 3},
                Role{"Anička", "Šafářová", 0},
                Role{"Sváťa", "Pulec", 3},
                Role{"Blažej", "Motyčka", 8},
                Role{"Eda", "Wasserfall", 0},
                Role{"Přemysl", "Hájek", 10},
        }
&nbsp;
        <i>// aplikace šablony - přepis hodnot</i>
        err := tmpl.Execute(os.Stdout, roles)
        if err != nil {
                panic(err)
        }
}
</pre>

<p>Výsledek by měl vypadat následovně:</p>

<pre>
--------------------------------------------------------------------
Jméno Eliška          Najbrtová        Popularita  4 
Jméno Jenny           Suk              Popularita  3 
Jméno Anička          Šafářová        
Jméno Sváťa           Pulec            Popularita  3 
Jméno Blažej          Motyčka          Popularita  8 
Jméno Eda             Wasserfall      
Jméno Přemysl         Hájek            Popularita 10 
&nbsp;
--------------------------------------------------------------------
</pre>

<p>Úplný zdrojový kód demonstračního příkladu z&nbsp;této kapitoly je dostupný
na adrese <a
href="https://github.com/tisnik/go-root/blob/master/article_80/template17.go">https://github.com/tisnik/go-root/blob/master/article_80/template17.go</a>.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Plná podmínka typu <strong>if-then-else</strong> v&nbsp;šabloně</h2>

<p>V&nbsp;šabloně lze dále použít úplnou podmínku, tj.&nbsp;určit, který text
se má přidat do výsledku ve chvíli, kdy nějaká podmínka je splněna a který text
se má naopak přidat v&nbsp;případě nesplnění podmínky. V&nbsp;praxi to může
vypadat například následovně &ndash; rozlišíme, zda je popularita role známá či
neznámá:</p>

<pre>
--------------------------------------------------------------------
{{range .}}Jméno {{printf "%-15s" .Name}} {{printf "%-15s" .Surname}} Popularita <strong>{{if gt .Popularity 0}}</strong> {{printf "%2d" .Popularity}} <strong>{{else}}</strong> neznámá <strong>{{end}}</strong>
{{end}}
--------------------------------------------------------------------
</pre>

<p>Výsledek běhu předchozího demonstračního příkladu ve chvíli, kdy se mu předá
upravená šablona s&nbsp;plnou podmínkou typu <strong>if-then-else</strong>:</p>

<pre>
--------------------------------------------------------------------
Jméno Eliška          Najbrtová       Popularita   4 
Jméno Jenny           Suk             Popularita   3 
Jméno Anička          Šafářová        Popularita  neznámá 
Jméno Sváťa           Pulec           Popularita   3 
Jméno Blažej          Motyčka         Popularita   8 
Jméno Eda             Wasserfall      Popularita  neznámá 
Jméno Přemysl         Hájek           Popularita  10 
&nbsp;
--------------------------------------------------------------------
</pre>

<p>Úplný zdrojový kód demonstračního příkladu z&nbsp;této kapitoly je dostupný
na adrese <a
href="https://github.com/tisnik/go-root/blob/master/article_80/template18.go">https://github.com/tisnik/go-root/blob/master/article_80/template18.go</a>.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>

<pre>
--------------------------------------------------------------------
{{range .}}Jméno {{printf "%-15s" .Name}} {{printf "%-15s" .Surname}} Popularita {{.GetPopularity}}
{{end}}
--------------------------------------------------------------------
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "os"
        "text/template"
)
&nbsp;
const (
        templateFilename = "template19.txt"
)
&nbsp;
<i>// datový typ, jehož prvky budou vypisovány v šabloně</i>
type <strong>Role</strong> struct {
        Name       string
        Surname    string
        Popularity int
}
&nbsp;
func (role Role) GetPopularity() string {
        if role.Popularity &lt;= 0 {
                return "Nezadáno"
        } else {
                return fmt.Sprintf("%d", role.Popularity)
        }
}
&nbsp;
func <strong>main</strong>() {
        <i>// vytvoření nové šablony</i>
        tmpl := template.Must(template.ParseFiles(templateFilename))
&nbsp;
        <i>// tyto hodnoty budou použity při aplikaci šablony</i>
        roles := []Role{
                Role{"Eliška", "Najbrtová", 4},
                Role{"Jenny", "Suk", 3},
                Role{"Anička", "Šafářová", 0},
                Role{"Sváťa", "Pulec", 3},
                Role{"Blažej", "Motyčka", 8},
                Role{"Eda", "Wasserfall", 0},
                Role{"Přemysl", "Hájek", 10},
        }
&nbsp;
        <i>// aplikace šablony - přepis hodnot</i>
        err := tmpl.Execute(os.Stdout, roles)
        if err != nil {
                panic(err)
        }
}
</pre>
<p></p>

<pre>
--------------------------------------------------------------------
Jméno Eliška          Najbrtová       Popularita 4
Jméno Jenny           Suk             Popularita 3
Jméno Anička          Šafářová        Popularita Nezadáno
Jméno Sváťa           Pulec           Popularita 3
Jméno Blažej          Motyčka         Popularita 8
Jméno Eda             Wasserfall      Popularita Nezadáno
Jméno Přemysl         Hájek           Popularita 10
&nbsp;
--------------------------------------------------------------------
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>

<pre>
--------------------------------------------------------------------
{{range .}}Jméno {{printf "%-15s" .Name}} {{printf "%-15s" .Surname}} Popularita {{.getPopularity}}
{{end}}
--------------------------------------------------------------------
</pre>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "os"
        "text/template"
)
&nbsp;
const (
        templateFilename = "template20.txt"
)
&nbsp;
<i>// datový typ, jehož prvky budou vypisovány v šabloně</i>
type <strong>Role</strong> struct {
        Name       string
        Surname    string
        Popularity int
}
&nbsp;
func (role Role) getPopularity() string {
        if role.Popularity &lt;= 0 {
                return "Nezadáno"
        } else {
                return fmt.Sprintf("%d", role.Popularity)
        }
}
&nbsp;
func <strong>main</strong>() {
        <i>// vytvoření nové šablony</i>
        tmpl := template.Must(template.ParseFiles(templateFilename))
&nbsp;
        <i>// tyto hodnoty budou použity při aplikaci šablony</i>
        roles := []Role{
                Role{"Eliška", "Najbrtová", 4},
                Role{"Jenny", "Suk", 3},
                Role{"Anička", "Šafářová", 0},
                Role{"Sváťa", "Pulec", 3},
                Role{"Blažej", "Motyčka", 8},
                Role{"Eda", "Wasserfall", 0},
                Role{"Přemysl", "Hájek", 10},
        }
&nbsp;
        <i>// aplikace šablony - přepis hodnot</i>
        err := tmpl.Execute(os.Stdout, roles)
        if err != nil {
                panic(err)
        }
}
</pre>

<pre>
--------------------------------------------------------------------
Jméno Eliška          Najbrtová       Popularita panic: template: template20.txt:2:84: executing "template20.txt" at <.getPopularity>: can't evaluate field getPopularity in type main.Role
&nbsp;
goroutine 1 [running]:
main.main()
        /home/ptisnovs/temp/y/template20.go:46 +0xeb
exit status 2
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>

<pre>
--------------------------------------------------------------------
{{range .}}Jméno {{printf "%-15s" .Name}} {{printf "%-15s" .Surname}} Popularita {{.GetPopularity | printf "%10s"}}
{{end}}
--------------------------------------------------------------------
</pre>

<p></p>

<pre>
--------------------------------------------------------------------
Jméno Eliška          Najbrtová       Popularita          4
Jméno Jenny           Suk             Popularita          3
Jméno Anička          Šafářová        Popularita   Nezadáno
Jméno Sváťa           Pulec           Popularita          3
Jméno Blažej          Motyčka         Popularita          8
Jméno Eda             Wasserfall      Popularita   Nezadáno
Jméno Přemysl         Hájek           Popularita         10
&nbsp;
--------------------------------------------------------------------
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>

<pre>
--------------------------------------------------------------------
{{range .}}Jméno {{printf "%-15s" .Name}} {{printf "%-15s" .Surname}} Popularita {{with $x := .GetPopularity}}{{printf "%10s" $x}}{{end}}
{{end}}
--------------------------------------------------------------------
</pre>

<p></p>

<pre>
--------------------------------------------------------------------
Jméno Eliška          Najbrtová       Popularita          4
Jméno Jenny           Suk             Popularita          3
Jméno Anička          Šafářová        Popularita   Nezadáno
Jméno Sváťa           Pulec           Popularita          3
Jméno Blažej          Motyčka         Popularita          8
Jméno Eda             Wasserfall      Popularita   Nezadáno
Jméno Přemysl         Hájek           Popularita         10
&nbsp;
--------------------------------------------------------------------
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
        "text/template"
)
&nbsp;
const (
        templateValue = `Roles:{{block "roles" .}}{{"\n"}}{{range .}}{{println "-" .Name "\t" .Surname}}{{end}}{{end}}`
)
&nbsp;
<i>// datový typ, jehož prvky budou vypisovány v šabloně</i>
type <strong>Role</strong> struct {
        Name       string
        Surname    string
        Popularity int
}
&nbsp;
func <strong>main</strong>() {
        <i>// vytvoření nové šablony</i>
        tmpl := template.Must(template.New("template").Parse(templateValue))
&nbsp;
        <i>// tyto hodnoty budou použity při aplikaci šablony</i>
        roles := []Role{
                Role{"Eliška", "Najbrtová", 4},
                Role{"Jenny", "Suk", 3},
                Role{"Anička", "Šafářová", 0},
                Role{"Sváťa", "Pulec", 3},
                Role{"Blažej", "Motyčka", 8},
                Role{"Eda", "Wasserfall", 0},
                Role{"Přemysl", "Hájek", 10},
        }
&nbsp;
        <i>// aplikace šablony - přepis hodnot</i>
        err := tmpl.Execute(os.Stdout, roles)
        if err != nil {
                panic(err)
        }
}
</pre>

<p></p>

<pre>
Roles:
- Eliška         Najbrtová
- Jenny          Suk
- Anička         Šafářová
- Sváťa          Pulec
- Blažej         Motyčka
- Eda    Wasserfall
- Přemysl        Hájek
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
        "strings"
        "text/template"
)
&nbsp;
const (
        templateValue = `Names: {{join . ", "}}`
)
&nbsp;
func <strong>main</strong>() {
        <i>// mapa funkcí použitých v šabloně</i>
        funcs := template.FuncMap{"join": strings.Join}
&nbsp;
        <i>// vytvoření nové šablony</i>
        tmpl := template.Must(template.New("template").Funcs(funcs).Parse(templateValue))
&nbsp;
        <i>// tyto hodnoty budou použity při aplikaci šablony</i>
        roles := []string{
                "Eliška Najbrtová",
                "Jenny Suk",
                "Anička Šafářová",
                "Sváťa Pulec",
                "Blažej Motyčka",
                "Eda Wasserfall",
                "Přemysl Hájek",
        }
&nbsp;
        <i>// aplikace šablony - přepis hodnot</i>
        err := tmpl.Execute(os.Stdout, roles)
        if err != nil {
                panic(err)
        }
}
</pre>

<p></p>

<pre>
Names: Eliška Najbrtová, Jenny Suk, Anička Šafářová, Sváťa Pulec, Blažej Motyčka, Eda Wasserfall, Přemysl Hájek
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
        "strings"
        "text/template"
)
&nbsp;
const (
        templateValue = `Names: {{with $names := asNames .}}{{join $names ", "}}{{end}}`
)
&nbsp;
<i>// datový typ, jehož prvky budou vypisovány v šabloně</i>
type <strong>Role</strong> struct {
        Name       string
        Surname    string
        Popularity int
}
&nbsp;
<i>// převod rolí na řez se jmény rolí</i>
func <strong>asNames</strong>(roles []Role) []string {
        var r []string
        for _, role := range roles {
                r = append(r, role.Name)
        }
        return r
}
&nbsp;
func <strong>main</strong>() {
        <i>// mapa funkcí použitých v šabloně</i>
        funcs := template.FuncMap{
                "asNames": asNames,
                "join":    strings.Join}
&nbsp;
        <i>// vytvoření nové šablony</i>
        tmpl := template.Must(template.New("template").Funcs(funcs).Parse(templateValue))
&nbsp;
        <i>// tyto hodnoty budou použity při aplikaci šablony</i>
        roles := []Role{
                Role{"Eliška", "Najbrtová", 4},
                Role{"Jenny", "Suk", 3},
                Role{"Anička", "Šafářová", 0},
                Role{"Sváťa", "Pulec", 3},
                Role{"Blažej", "Motyčka", 8},
                Role{"Eda", "Wasserfall", 0},
                Role{"Přemysl", "Hájek", 10},
        }
&nbsp;
        <i>// aplikace šablony - přepis hodnot</i>
        err := tmpl.Execute(os.Stdout, roles)
        if err != nil {
                panic(err)
        }
}
</pre>

<p></p>

<pre>
Names: Eliška, Jenny, Anička, Sváťa, Blažej, Eda, Přemysl
</pre>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Vytištění tabulky malé násobilky</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
        "text/template"
)
&nbsp;
const (
        templateValue = `{{range .}}{{.}}
{{end}}`
)
&nbsp;
func <strong>main</strong>() {
        const N = 10
&nbsp;
        <i>// tabulka s malou násobilkou</i>
        var multiplyTable [N][N]int
&nbsp;
        <i>// naplnění tabulky</i>
        for j := 0; j &lt; N; j++ {
                for i := 0; i &lt; N; i++ {
                        multiplyTable[j][i] = (i + 1) * (j + 1)
                }
        }
&nbsp;
        <i>// vytvoření nové šablony</i>
        tmpl := template.Must(template.New("multiply_table").Parse(templateValue))
&nbsp;
        <i>// aplikace šablony - přepis hodnot</i>
        err := tmpl.Execute(os.Stdout, multiplyTable)
        if err != nil {
                panic(err)
        }
}
</pre>

<p></p>

<pre>
[1 2 3 4 5 6 7 8 9 10]
[2 4 6 8 10 12 14 16 18 20]
[3 6 9 12 15 18 21 24 27 30]
[4 8 12 16 20 24 28 32 36 40]
[5 10 15 20 25 30 35 40 45 50]
[6 12 18 24 30 36 42 48 54 60]
[7 14 21 28 35 42 49 56 63 70]
[8 16 24 32 40 48 56 64 72 80]
[9 18 27 36 45 54 63 72 81 90]
[10 20 30 40 50 60 70 80 90 100]
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Vylepšení předchozího demonstračního příkladu</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
        "text/template"
)
&nbsp;
const (
        templateValue = `{{range .}}{{range .}}{{printf "%3d" .}} {{end}}
{{end}}`
)
&nbsp;
func <strong>main</strong>() {
        const N = 10
&nbsp;
        <i>// tabulka s malou násobilkou</i>
        var multiplyTable [N][N]int
&nbsp;
        <i>// naplnění tabulky</i>
        for j := 0; j &lt; N; j++ {
                for i := 0; i &lt; N; i++ {
                        multiplyTable[j][i] = (i + 1) * (j + 1)
                }
        }
&nbsp;
        <i>// vytvoření nové šablony</i>
        tmpl := template.Must(template.New("multiply_table").Parse(templateValue))
&nbsp;
        <i>// aplikace šablony - přepis hodnot</i>
        err := tmpl.Execute(os.Stdout, multiplyTable)
        if err != nil {
                panic(err)
        }
}
</pre>

<pre>
  1   2   3   4   5   6   7   8   9  10 
  2   4   6   8  10  12  14  16  18  20 
  3   6   9  12  15  18  21  24  27  30 
  4   8  12  16  20  24  28  32  36  40 
  5  10  15  20  25  30  35  40  45  50 
  6  12  18  24  30  36  42  48  54  60 
  7  14  21  28  35  42  49  56  63  70 
  8  16  24  32  40  48  56  64  72  80 
  9  18  27  36  45  54  63  72  81  90 
 10  20  30  40  50  60  70  80  90 100 
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
        "text/template"
)
&nbsp;
const (
        templateValue = `{{range .Values}}{{range .}}{{printf "%3d" .}} {{end}}
{{end}}`
)
&nbsp;
const N = 10
&nbsp;
type <strong>MultiplyTable</strong> struct {
        Values [N][N]int
}
&nbsp;
func <strong>main</strong>() {
&nbsp;
        <i>// tabulka s malou násobilkou</i>
        var multiplyTable MultiplyTable
&nbsp;
        <i>// naplnění tabulky</i>
        for j := 0; j &lt; N; j++ {
                for i := 0; i &lt; N; i++ {
                        multiplyTable.Values[j][i] = (i + 1) * (j + 1)
                }
        }
&nbsp;
        <i>// vytvoření nové šablony</i>
        tmpl := template.Must(template.New("multiply_table").Parse(templateValue))
&nbsp;
        <i>// aplikace šablony - přepis hodnot</i>
        err := tmpl.Execute(os.Stdout, multiplyTable)
        if err != nil {
                panic(err)
        }
}
</pre>

<pre>
  1   2   3   4   5   6   7   8   9  10 
  2   4   6   8  10  12  14  16  18  20 
  3   6   9  12  15  18  21  24  27  30 
  4   8  12  16  20  24  28  32  36  40 
  5  10  15  20  25  30  35  40  45  50 
  6  12  18  24  30  36  42  48  54  60 
  7  14  21  28  35  42  49  56  63  70 
  8  16  24  32  40  48  56  64  72  80 
  9  18  27  36  45  54  63  72  81  90 
 10  20  30  40  50  60  70  80  90 100 
</pre>


<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech <a
href="https://www.root.cz/clanky/standardni-sablonovaci-system-jazyka-go/">minule</a>
i dnes použitých demonstračních příkladů byly uloženy do nového Git repositáře,
který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>template01.go</td><td>vytvoření a aplikace šablony obsahující pouze statický text, kontrola chyby při <strong>Parse</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_79/template01.go">https://github.com/tisnik/go-root/blob/master/article_79/template01.go</a></td></tr>
<tr><td> 2</td><td>template02.go</td><td>zavolání metody <strong>ExecuteTemplate</strong> namísto <strong>Execute</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_79/template02.go">https://github.com/tisnik/go-root/blob/master/article_79/template02.go</a></td></tr>
<tr><td> 3</td><td>template03.go</td><td>zápis výsledného textu do bufferu převedeného na řetězec přes buffer</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_79/template03.go">https://github.com/tisnik/go-root/blob/master/article_79/template03.go</a></td></tr>
<tr><td> 4</td><td>template04.go</td><td>konstrukce šablony pomocí <strong>template.Must</strong> s&nbsp;automatickou kontrolou chyby</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_79/template04.go">https://github.com/tisnik/go-root/blob/master/article_79/template04.go</a></td></tr>
<tr><td> 5</td><td>template05.go</td><td>skutečná šablona produkující text na základě předaných dat &ndash; jednoduchý text</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_79/template05.go">https://github.com/tisnik/go-root/blob/master/article_79/template05.go</a></td></tr>
<tr><td> 6</td><td>template06.go</td><td>vícenásobné použití vstupních dat v&nbsp;šabloně</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_79/template06.go">https://github.com/tisnik/go-root/blob/master/article_79/template06.go</a></td></tr>
<tr><td> 7</td><td>template07.go</td><td>skutečná šablona produkující text na základě předaných dat, předání datové struktury</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_79/template07.go">https://github.com/tisnik/go-root/blob/master/article_79/template07.go</a></td></tr>
<tr><td> 8</td><td>template08.go</td><td>šablona, na kterou se aplikuje nekompatibilní datová struktura</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_79/template08.go">https://github.com/tisnik/go-root/blob/master/article_79/template08.go</a></td></tr>
<tr><td> 9</td><td>template09.go</td><td>textová data, kontrola korektního použití Unicode</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_79/template09.go">https://github.com/tisnik/go-root/blob/master/article_79/template09.go</a></td></tr>
<tr><td>10</td><td>template10.go</td><td>postupná aplikace šablony na data uložená v&nbsp;řezu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_79/template10.go">https://github.com/tisnik/go-root/blob/master/article_79/template10.go</a></td></tr>
<tr><td>11</td><td>template11.go</td><td>pokus o přístup k&nbsp;prvkům šablony, které jsou privátní</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_79/template11.go">https://github.com/tisnik/go-root/blob/master/article_79/template11.go</a></td></tr>
<tr><td>12</td><td>template12.go</td><td>opakování (range) v&nbsp;šabloně a práce s&nbsp;poli</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_79/template12.go">https://github.com/tisnik/go-root/blob/master/article_79/template12.go</a></td></tr>
<tr><td>13</td><td>template13.go</td><td>šablona uložená v&nbsp;souboru &ndash; problém s&nbsp;pojmenováním šablony</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_79/template13.go">https://github.com/tisnik/go-root/blob/master/article_79/template13.go</a></td></tr>
<tr><td>14</td><td>template14.go</td><td>šablona uložená v&nbsp;souboru &ndash; korektní příklad</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_79/template14.go">https://github.com/tisnik/go-root/blob/master/article_79/template14.go</a></td></tr>
<tr><td>15</td><td>template15.go</td><td>šablona uložená v&nbsp;souboru &ndash; korektní příklad, přímé volání <strong>ParseFiles</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_79/template15.go">https://github.com/tisnik/go-root/blob/master/article_79/template15.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>template16.go</td><td>naformátování hodnot funkcí <strong>fmt.Printf</strong> volanou přímo ze šablony</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_80/template16.go">https://github.com/tisnik/go-root/blob/master/article_80/template16.go</a></td></tr>
<tr><td>17</td><td>template17.go</td><td>praktické otestování podmínky v&nbsp;šabloně</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_80/template17.go">https://github.com/tisnik/go-root/blob/master/article_80/template17.go</a></td></tr>
<tr><td>18</td><td>template18.go</td><td>plná podmínka typu <strong>if-then-else</strong> v&nbsp;šabloně</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_80/template18.go">https://github.com/tisnik/go-root/blob/master/article_80/template18.go</a></td></tr>
<tr><td>19</td><td>template19.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_80/template19.go">https://github.com/tisnik/go-root/blob/master/article_80/template19.go</a></td></tr>
<tr><td>20</td><td>template20.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_80/template20.go">https://github.com/tisnik/go-root/blob/master/article_80/template20.go</a></td></tr>
<tr><td>21</td><td>template21.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_80/template21.go">https://github.com/tisnik/go-root/blob/master/article_80/template21.go</a></td></tr>
<tr><td>22</td><td>template22.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_80/template22.go">https://github.com/tisnik/go-root/blob/master/article_80/template22.go</a></td></tr>
<tr><td>23</td><td>template23.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_80/template23.go">https://github.com/tisnik/go-root/blob/master/article_80/template23.go</a></td></tr>
<tr><td>24</td><td>template24.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_80/template24.go">https://github.com/tisnik/go-root/blob/master/article_80/template24.go</a></td></tr>
<tr><td>25</td><td>template25.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_80/template25.go">https://github.com/tisnik/go-root/blob/master/article_80/template25.go</a></td></tr>
<tr><td>26</td><td>template26.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_80/template26.go">https://github.com/tisnik/go-root/blob/master/article_80/template26.go</a></td></tr>
<tr><td>27</td><td>template27.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_80/template27.go">https://github.com/tisnik/go-root/blob/master/article_80/template27.go</a></td></tr>
<tr><td>28</td><td>template28.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_80/template28.go">https://github.com/tisnik/go-root/blob/master/article_80/template28.go</a></td></tr>
<tr><td>29</td><td>template29.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_80/template29.go">https://github.com/tisnik/go-root/blob/master/article_80/template29.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Awesome Go<br />
<a href="https://awesome-go.com/">https://awesome-go.com/</a>
</li>

<li>Template Engines for Go<br />
<a href="https://awesome-go.com/#template-engines">https://awesome-go.com/#template-engines</a>
</li>

<li>Mail merge<br />
<a href="https://en.wikipedia.org/wiki/Mail_merge">https://en.wikipedia.org/wiki/Mail_merge</a>
</li>

<li>Template processor<br />
<a href="https://en.wikipedia.org/wiki/Template_processor">https://en.wikipedia.org/wiki/Template_processor</a>
</li>

<li>Text/template<br />
<a href="https://pkg.go.dev/text/template">https://pkg.go.dev/text/template</a>
</li>

<li>Go Template Engines<br />
<a href="https://go.libhunt.com/categories/556-template-engines">https://go.libhunt.com/categories/556-template-engines</a>
</li>

<li>Template Engines<br />
<a href="https://reposhub.com/go/template-engines">https://reposhub.com/go/template-engines</a>
</li>

<li>GoLang Templating Made Easy<br />
<a href="https://awkwardferny.medium.com/golang-templating-made-easy-4d69d663c558">https://awkwardferny.medium.com/golang-templating-made-easy-4d69d663c558</a>
</li>

<li>Templates in GoLang<br />
<a href="https://golangdocs.com/templates-in-golang">https://golangdocs.com/templates-in-golang</a>
</li>

<li>What are the best template engines for Go apart from "html/template"?<br />
<a href="https://www.quora.com/What-are-the-best-template-engines-for-Go-apart-from-html-template?share=1">https://www.quora.com/What-are-the-best-template-engines-for-Go-apart-from-html-template?share=1</a>
</li>

<li>Ace - HTML template engine for Go<br />
<a href="https://github.com/yosssi/ace">https://github.com/yosssi/ace</a>
</li>

<li>amber<br />
<a href="https://github.com/eknkc/amber">https://github.com/eknkc/amber</a>
</li>

<li>quicktemplate<br />
<a href="https://github.com/valyala/quicktemplate">https://github.com/valyala/quicktemplate</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

