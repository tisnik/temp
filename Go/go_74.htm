<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Knihovny Diagrams a go-diagrams určené pro tvorbu diagramů s architekturou systémů</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Knihovny Diagrams a go-diagrams určené pro tvorbu diagramů s architekturou systémů</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Knihovny <i>Diagrams</i> a <i>go-diagrams</i> určené pro tvorbu diagramů s&nbsp;architekturou systémů</a></p>
<p><a href="#k02">2. Clustery v&nbsp;diagramech tvořených knihovnou <i>Diagrams</i></a></p>
<p><a href="#k03">3. Vytvoření clusteru v&nbsp;diagramu</a></p>
<p><a href="#k04">4. Větší množství clusterů v&nbsp;diagramu</a></p>
<p><a href="#k05">5. Hierarchické (vnořené) clustery</a></p>
<p><a href="#k06">*** 6. Další příklad hierarchických clusterů</a></p>
<p><a href="#k07">*** 7. Knihovna <i>go-diagrams</i> inspirovaná knihovnou <i>Diagrams</i></a></p>
<p><a href="#k08">*** 8. Prázdný diagram vytvořený knihovnou <i>go-diagrams</i></a></p>
<p><a href="#k09">*** 9. Diagram s&nbsp;dvojicí uzlů a jednou hranou</a></p>
<p><a href="#k10">*** 10. Propojení většího množství uzlů</a></p>
<p><a href="#k11">*** 11. Skupiny uzlů v&nbsp;diagramu</a></p>
<p><a href="#k12">*** 12. Pojmenování skupiny v&nbsp;diagramu</a></p>
<p><a href="#k13">*** 13. Propojení typu 1:N a N:1</a></p>
<p><a href="#k14">*** 14. Programové vytvoření skupiny s&nbsp;vazbami 1:N a N:1</a></p>
<p><a href="#k15">*** 15. Porovnání knihoven <i>Diagrams</i> a <i>go-diagrams</i></a></p>
<p><a href="#k16">16. Repositář s&nbsp;demonstračními příklady psanými v&nbsp;Pythonu</a></p>
<p><a href="#k17">17. Repositář s&nbsp;demonstračními příklady psanými v&nbsp;jazyce Go</a></p>
<p><a href="#k18">18. Odkazy na články s&nbsp;tématem programové tvorby grafů a diagramů</a></p>
<p><a href="#k19">19. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Knihovny <i>Diagrams</i> a <i>go-diagrams</i> určené pro tvorbu diagramů s&nbsp;architekturou systémů</h2>

<p>V&nbsp;dnešním článku nejdříve dokončíme popis možností knihovny nazvané
<i>Diagrams</i>, jíž jsme se <a
href="https://www.root.cz/clanky/tvorba-diagramu-s-architekturou-systemu-s-vyuzitim-knihovny-diagrams/">zabývali
minule</a>, a poté se seznámíme s&nbsp;další podobně koncipovanou knihovnou,
tentokrát ovšem určenou pro <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">programovací jazyk
Go</a>. Jedná se o knihovnu pojmenovanou <a
href="https://github.com/blushft/go-diagrams">go-diagrams</a>. Tato knihovna je
navržena takovým způsobem, aby byla s&nbsp;původní Pythonovskou knihovnou
<i>Diagrams</i> do určité míry kompatibilní, což se týká především způsobu
definice diagramů (ve skutečnosti je však použití varianty pro Go složitější,
než v&nbsp;případě knihovny Diagrams pro Python, což si ostatně ukážeme na
demonstračních příkladech).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Clustery v&nbsp;diagramech tvořených knihovnou <i>Diagrams</i></h2>

<p>Minule jsme si ukázali, jakým způsobem se s&nbsp;využitím knihovny
<i>Diagrams</i> tvoří diagramy. Připomeňme si, že se nejprve vytvoří objekt
typu <strong>Diagram</strong> (ideálně v&nbsp;rámci takzvaného <i>kontextu</i>,
tedy bloku <strong>with</strong>), následně se zkonstruují různé typy uzlů a
nakonec se tyto uzly propojí s&nbsp;využitím přetíženého operátoru
<strong>&gt;&gt;</strong>. Taktéž je možné namísto jediného uzlu použít seznam
či n-tici s&nbsp;uzly &ndash; poté se zobrazí propojení typu 1:N nebo N:1:</p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, ActiveMQ
<strong>from</strong> diagrams.programming.language import Go, Rust
<strong>from</strong> diagrams.aws.database import RDS
&nbsp;
<strong>with</strong> Diagram("Clusters #1", show=True, direction="LR"):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    db = RDS("storage")
&nbsp;
    <i># rozvetveni</i>
    workersA = [Go("worker #1"),
                Go("worker #2"),
                Go("worker #3")]
&nbsp;
    buffer = ActiveMQ("buffer")
&nbsp;
    <i># rozvetveni</i>
    workersB = [Rust("worker #1"),
                Rust("worker #2"),
                Rust("worker #3")]
&nbsp;
    producer = Kafka("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workersA &gt;&gt; buffer &gt;&gt; workersB &gt;&gt; producer
    db &gt;&gt; workersA
</pre>

<p>Výsledek dnešního prvního demonstračního příkladu vypadá následovně:</p>

<a href="https://www.root.cz/obrazek/449435/"><img src="https://i.iinfo.cz/images/558/diagrams2-1-prev.png" class="image-449435" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/legalcode.cs&quot;&gt;CC-BY-SA&lt;/a&gt;" width="370" height="258" /></a>
<p><i>Obrázek 1: Diagram vytvořený prvním demonstračním příkladem.</i></p>

<p>Ve skutečnosti je však mnohdy vhodné některé uzly seskupit do takzvaného
<i>clusteru</i>. Jak se tato operace provede si ukážeme v&nbsp;navazujících
kapitolách.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vytvoření clusteru v&nbsp;diagramu</h2>

<p>Cluster neboli seskupení uzlů, se ve skutečnosti provede velmi jednoduše.
Postačuje pouze vytvořit uzly (resp.&nbsp;přesněji řečeno ty uzly, které se
mají sdružit) v&nbsp;rámci <i>kontextu</i>, tedy uvnitř bloku
<strong>with</strong> v&nbsp;němž je zkonstruován objekt typu
<strong>Cluster</strong>. V&nbsp;následující ukázce skriptu se vytvoří dva uzly
sdružené do clusteru:</p>

<pre>
    <strong>with</strong> Cluster("jméno clusteru"):
        <i># definice uzlu v clusteru</i>
        uzel1 =  Kafka("input stream")
&nbsp;
        uzel2 = RDS("storage")
</pre>

<p>Samozřejmě je však možné pracovat i se seznamem uzlů, tedy následovně:</p>

<pre>
    <strong>with</strong> Cluster("jméno clusteru"):
        <i># definice uzlu v clusteru</i>
        uzel1 =  Kafka("input stream")
&nbsp;
        <i># rozvetveni</i>
        uzly = [Go("worker #1"),
                Go("worker #2"),
                Go("worker #3")]
&nbsp;
        uzel2 = RDS("storage")
</pre>

<p>Podívejme se nyní na nepatrně upravený předchozí demonstrační příklad, do
něhož byl přidán cluster:</p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams import Cluster
<strong>from</strong> diagrams.onprem.queue import Kafka, ActiveMQ
<strong>from</strong> diagrams.programming.language import Go, Rust
<strong>from</strong> diagrams.aws.database import RDS
&nbsp;
<strong>with</strong> Diagram("Clusters #2", show=True, direction="LR"):
    <i># definice clusteru</i>
    <strong>with</strong> Cluster("Input processor"):
        <i># definice uzlu v clusteru</i>
        consumer = Kafka("input stream")
&nbsp;
        <i># rozvetveni</i>
        workersA = [Go("worker #1"),
                    Go("worker #2"),
                    Go("worker #3")]
&nbsp;
        db = RDS("storage")
&nbsp;
    <i># definice uzlu mimo cluster</i>
    buffer = ActiveMQ("buffer")
&nbsp;
    <i># rozvetveni</i>
    workersB = [Rust("worker #1"),
                Rust("worker #2"),
                Rust("worker #3")]
&nbsp;
    producer = Kafka("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workersA &gt;&gt; buffer &gt;&gt; workersB &gt;&gt; producer
    db &gt;&gt; workersA
</pre>

<p>Výsledek by měl nyní vypadat následovně:</p>

<a href="https://www.root.cz/obrazek/449436/"><img src="https://i.iinfo.cz/images/558/diagrams2-2-prev.png" class="image-449436" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/legalcode.cs&quot;&gt;CC-BY-SA&lt;/a&gt;" width="346" height="270" /></a>
<p><i>Obrázek 2: Diagram vytvořený druhým demonstračním příkladem.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Větší množství clusterů v&nbsp;diagramu</h2>

<p>Nic nám samozřejmě nebrání vytvořit v&nbsp;diagramu větší množství clusterů.
Jedinou podmínkou je, že se tyto clustery nebudou překrývat (i to je však možné
zařídit některými triky). V&nbsp;dalším demonstračním příkladu je ukázána
definice diagramu s&nbsp;několika uzly rozdělenými mezi dvojici clusterů. Oba
clustery (resp.&nbsp;uzly v&nbsp;clusteru) jsou propojeny přes buffer/frontu
představovanou uzlem ActiveMQ (což je jeden ze známých message brokerů):</p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams import Cluster
<strong>from</strong> diagrams.onprem.queue import Kafka, ActiveMQ
<strong>from</strong> diagrams.programming.language import Go, Rust
<strong>from</strong> diagrams.aws.database import RDS
&nbsp;
<strong>with</strong> Diagram("Clusters #3", show=True, direction="LR"):
    <i># definice clusteru</i>
    <strong>with</strong> Cluster("Input processor"):
        <i># definice uzlu v clusteru</i>
        consumer = Kafka("input stream")
&nbsp;
        <i># rozvetveni</i>
        workersA = [Go("worker #1"),
                    Go("worker #2"),
                    Go("worker #3")]
&nbsp;
        db = RDS("storage")
&nbsp;
    <i># definice uzlu mimo cluster</i>
    buffer = ActiveMQ("buffer")
&nbsp;
    <strong>with</strong> Cluster("Output processor"):
        <i># rozvetveni</i>
        workersB = [Rust("worker #1"),
                    Rust("worker #2"),
                    Rust("worker #3")]
&nbsp;
        producer = Kafka("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workersA &gt;&gt; buffer &gt;&gt; workersB &gt;&gt; producer
    db &gt;&gt; workersA
</pre>

<p>Výsledek bude v&nbsp;tomto případě následující:</p>

<a href="https://www.root.cz/obrazek/449437/"><img src="https://i.iinfo.cz/images/558/diagrams2-3-prev.png" class="image-449437" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/legalcode.cs&quot;&gt;CC-BY-SA&lt;/a&gt;" width="349" height="270" /></a>
<p><i>Obrázek 3: Diagram vytvořený třetím demonstračním příkladem.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Hierarchické (vnořené) clustery</h2>

<p>Cluster může kromě uzlů obsahovat i další clustery, takže diagram může
zobrazovat i poměrně složitou hierarchii navrhovaného systému. V&nbsp;Pythonu
se vnořené clustery definují vnořenými bloky <strong>with</strong>:</p>

<pre>
<strong>with</strong> Cluster("Input processor"):
    <i># definice uzlu v clusteru</i>
    uzel1 = Kafka("input stream")
&nbsp;
    <i># definice clusteru uvnitř cluster</i>
    <strong>with</strong> Cluster("Worker group A"):
        <i># definice uzlu v podclusteru</i>
        uzel2 = Kafka("input stream")
</pre>

<p>Prakticky může vypadat definice diagramu s&nbsp;hierarchií clusterů
následovně:</p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams import Cluster
<strong>from</strong> diagrams.onprem.queue import Kafka, ActiveMQ
<strong>from</strong> diagrams.programming.language import Go, Rust
<strong>from</strong> diagrams.aws.database import RDS
&nbsp;
<strong>with</strong> Diagram("Clusters #4", show=True, direction="LR"):
    <i># definice clusteru</i>
    <strong>with</strong> Cluster("Input processor"):
        <i># definice uzlu v clusteru</i>
        consumer = Kafka("input stream")
&nbsp;
        <i># definice clusteru uvnitr cluster</i>
        <strong>with</strong> Cluster("Worker group A"):
            <i># rozvetveni</i>
            workersA = [Go("worker #1"),
                        Go("worker #2"),
                        Go("worker #3")]
&nbsp;
        db = RDS("storage")
&nbsp;
    <i># definice uzlu mimo cluster</i>
    buffer = ActiveMQ("buffer")
&nbsp;
    <strong>with</strong> Cluster("Output processor"):
        <i># definice clusteru uvnitr cluster</i>
        <strong>with</strong> Cluster("Worker group B"):
            <i># rozvetveni</i>
            workersB = [Rust("worker #1"),
                        Rust("worker #2"),
                        Rust("worker #3")]
&nbsp;
        producer = Kafka("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workersA &gt;&gt; buffer &gt;&gt; workersB &gt;&gt; producer
    db &gt;&gt; workersA
</pre>

<p>Výsledný diagram:</p>

<a href="https://www.root.cz/obrazek/449438/"><img src="https://i.iinfo.cz/images/558/diagrams2-4-prev.png" class="image-449438" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/legalcode.cs&quot;&gt;CC-BY-SA&lt;/a&gt;" width="333" height="270" /></a>
<p><i>Obrázek 4: Diagram vytvořený čtvrtým demonstračním příkladem.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Další příklad hierarchických clusterů</h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams import Cluster
<strong>from</strong> diagrams.onprem.queue import Kafka, ActiveMQ
<strong>from</strong> diagrams.programming.language import Go, Rust
<strong>from</strong> diagrams.aws.database import RDS
&nbsp;
<strong>with</strong> Diagram("Clusters #5", show=True, direction="LR"):
    <strong>with</strong> Cluster("Out wonderful pipeline"):
        <i># definice clusteru</i>
        <strong>with</strong> Cluster("Input processor"):
            <i># definice uzlu v clusteru</i>
            consumer = Kafka("input stream")
&nbsp;
            <i># definice clusteru uvnitr cluster</i>
            <strong>with</strong> Cluster("Worker group A"):
                # rozvetveni
                workersA = [Go("worker #1"),
                            Go("worker #2"),
                            Go("worker #3")]
&nbsp;
            db = RDS("storage")
&nbsp;
        <i># definice uzlu mimo cluster</i>
        buffer = ActiveMQ("buffer")
&nbsp;
        <strong>with</strong> Cluster("Output processor"):
            <i># definice clusteru uvnitr cluster</i>
            <strong>with</strong> Cluster("Worker group B"):
                # rozvetveni
                workersB = [Rust("worker #1"),
                            Rust("worker #2"),
                            Rust("worker #3")]
&nbsp;
            producer = Kafka("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workersA &gt;&gt; buffer &gt;&gt; workersB &gt;&gt; producer
    db &gt;&gt; workersA
</pre>

<a href="https://www.root.cz/obrazek/449439/"><img src="https://i.iinfo.cz/images/558/diagrams2-5-prev.png" class="image-449439" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/legalcode.cs&quot;&gt;CC-BY-SA&lt;/a&gt;" width="319" height="270" /></a>
<p><i>Obrázek 5: </i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Knihovna <i>go-diagrams</i> inspirovaná knihovnou <i>Diagrams</i></h2>

<p></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Prázdný diagram vytvořený knihovnou <i>go-diagrams</i></h2>

<p></p>

<pre>
package main

import (
        "log"

        "github.com/blushft/go-diagrams/diagram"
)

func main() {
        // inicializace objektu představujícího diagram
        diagram, err := diagram.New(diagram.Label("Diagram #1"), diagram.Filename("diagram1"))

        // kontrola konstrukce objektu
        if err != nil {
                log.Fatal(err)
        }

        // vykreslení diagramu
        err = diagram.Render()

        // kontrola, zda bylo vykreslení provedeno bez chyby
        if err != nil {
                log.Fatal(err)
        }
}
</pre>

<pre>
digraph root {
        fontcolor="#2D3436";
        fontname="Sans-Serif";
        fontsize=13;
        label="Diagram #1";
        nodesep=0.6;
        pad=2;
        rankdir=LR;
        ranksep=0.75;
        splines=ortho;
}
</pre>

<img src="https://i.iinfo.cz/images/558/diagrams2-6.png" class="image-449440" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/legalcode.cs&quot;&gt;CC-BY-SA&lt;/a&gt;" width="509" height="413" />
<p><i>Obrázek 6: </i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Diagram s&nbsp;dvojicí uzlů a jednou hranou</h2>

<p></p>

<pre>
package main

import (
        "log"

        "github.com/blushft/go-diagrams/diagram"
        "github.com/blushft/go-diagrams/nodes/apps"
)

func main() {
        // inicializace objektu představujícího diagram
        diagram, err := diagram.New(diagram.Label("Diagram #2"), diagram.Filename("diagram2"))

        // kontrola konstrukce objektu
        if err != nil {
                log.Fatal(err)
        }

        // deklarace uzlů v diagramu
        inet := apps.Network.Internet().Label("Internet")
        proxy := apps.Network.Caddy().Label("3scale")

        // propojení uzlů v diagramu
        diagram.Connect(inet, proxy)

        // vykreslení diagramu
        err = diagram.Render()

        // kontrola, zda bylo vykreslení provedeno bez chyby
        if err != nil {
                log.Fatal(err)
        }
}
</pre>

<pre>
digraph root {
        fontcolor="#2D3436";
        fontname="Sans-Serif";
        fontsize=13;
        label="Diagram #2";
        nodesep=0.6;
        pad=2;
        rankdir=LR;
        ranksep=0.75;
        splines=ortho;
        wuyslsjy-&gt;munjokhx [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
        munjokhx [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/apps/network/caddy.png", imagescale=true, label="3scale", labelloc=b, shape=none, style=rounded, width=1.4 ];
        wuyslsjy [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/apps/network/internet.png", imagescale=true, label=Internet, labelloc=b, shape=none, style=rounded, width=1.4 ];
}
</pre>

<img src="https://i.iinfo.cz/images/558/diagrams2-7.png" class="image-449441" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/legalcode.cs&quot;&gt;CC-BY-SA&lt;/a&gt;" width="392" height="258" />
<p><i>Obrázek 7: </i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Propojení většího množství uzlů</h2>

<p></p>

<pre>
package main

import (
        "log"

        "github.com/blushft/go-diagrams/diagram"
        "github.com/blushft/go-diagrams/nodes/apps"
        "github.com/blushft/go-diagrams/nodes/gcp"
)

func main() {
        // inicializace objektu představujícího diagram
        diagram, err := diagram.New(diagram.Label("Diagram #3"), diagram.Filename("diagram3"))

        // kontrola konstrukce objektu
        if err != nil {
                log.Fatal(err)
        }

        // deklarace uzlů v diagramu
        inet := apps.Network.Internet().Label("Internet")
        proxy := apps.Network.Caddy().Label("3scale")
        router := gcp.Network.Router().Label("Router")

        // propojení uzlů v diagramu
        diagram.Connect(inet, proxy)
        diagram.Connect(proxy, router)

        // vykreslení diagramu
        err = diagram.Render()

        // kontrola, zda bylo vykreslení provedeno bez chyby
        if err != nil {
                log.Fatal(err)
        }
}
</pre>

<pre>
digraph root {
        fontcolor="#2D3436";
        fontname="Sans-Serif";
        fontsize=13;
        label="Diagram #3";
        nodesep=0.6;
        pad=2;
        rankdir=LR;
        ranksep=0.75;
        splines=ortho;
        loggiusv->vwecchtf [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
        dkxkvtkt->loggiusv [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
        dkxkvtkt [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/apps/network/internet.png", imagescale=true, label=Internet, labelloc=b, shape=none, style=rounded, width=1.4 ];
        loggiusv [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/apps/network/caddy.png", imagescale=true, label="3scale", labelloc=b, shape=none, style=rounded, width=1.4 ];
        vwecchtf [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/gcp/network/router.png", imagescale=true, label=Router, labelloc=b, shape=none, style=rounded, width=1.4 ];
}
</pre>

<img src="https://i.iinfo.cz/images/558/diagrams2-8.png" class="image-449442" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/legalcode.cs&quot;&gt;CC-BY-SA&lt;/a&gt;" width="579" height="222" />
<p><i>Obrázek 8: </i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Skupiny uzlů v&nbsp;diagramu</h2>

<p></p>

<pre>
package main

import (
        "log"

        "github.com/blushft/go-diagrams/diagram"
        "github.com/blushft/go-diagrams/nodes/apps"
        "github.com/blushft/go-diagrams/nodes/gcp"
)

func main() {
        // inicializace objektu představujícího diagram
        diagram4, err := diagram.New(diagram.Label("Diagram #4"), diagram.Filename("diagram4"))

        // kontrola konstrukce objektu
        if err != nil {
                log.Fatal(err)
        }

        // deklarace uzlů v diagramu
        inet := apps.Network.Internet().Label("Internet")
        proxy := apps.Network.Caddy().Label("3scale")
        router := gcp.Network.Router().Label("Router")

        diagram4.Group(diagram.NewGroup("Wild west").Add(inet).Add(proxy))

        // propojení uzlů v diagramu
        diagram4.Connect(inet, proxy)
        diagram4.Connect(proxy, router)

        // vykreslení diagramu
        err = diagram4.Render()

        // kontrola, zda bylo vykreslení provedeno bez chyby
        if err != nil {
                log.Fatal(err)
        }
}
</pre>
<pre>
digraph root {
        fontcolor="#2D3436";
        fontname="Sans-Serif";
        fontsize=13;
        label="Diagram #4";
        nodesep=0.6;
        pad=2;
        rankdir=LR;
        ranksep=0.75;
        splines=ortho;
        winxwgsu->qbhrmyaa [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
        qbhrmyaa->rkhrhwbq [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
        subgraph "cluster_Wild west" {
                bgcolor="#E5F5FD";
                fontcolor="#2D3436";
                fontname="Sans-Serif";
                fontsize=12;
                labeljust=l;
                pencolor="#AEB6BE";
                shape=box;
                style=rounded;
                qbhrmyaa [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=2.1999999999999997, image="assets/apps/network/caddy.png", imagescale=true, label="3scale", labelloc=b, shape=none, style=rounded, width=1.4 ];
                winxwgsu [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=2.1999999999999997, image="assets/apps/network/internet.png", imagescale=true, label=Internet, labelloc=b, shape=none, style=rounded, width=1.4 ];
        };
        rkhrhwbq [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/gcp/network/router.png", imagescale=true, label=Router, labelloc=b, shape=none, style=rounded, width=1.4 ];
}
</pre>

<img src="https://i.iinfo.cz/images/558/diagrams2-9.png" class="image-449443" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/legalcode.cs&quot;&gt;CC-BY-SA&lt;/a&gt;" width="588" height="333" />
<p><i>Obrázek 9: </i></p>


<p><a name="k12"></a></p>
<h2 id="k12">12. Pojmenování skupiny v&nbsp;diagramu</h2>

<p></p>

<pre>
package main

import (
        "log"

        "github.com/blushft/go-diagrams/diagram"
        "github.com/blushft/go-diagrams/nodes/apps"
        "github.com/blushft/go-diagrams/nodes/gcp"
)

func main() {
        // inicializace objektu představujícího diagram
        diagram5, err := diagram.New(diagram.Label("Diagram #5"), diagram.Filename("diagram5"))

        // kontrola konstrukce objektu
        if err != nil {
                log.Fatal(err)
        }

        // deklarace uzlů v diagramu
        inet := apps.Network.Internet().Label("Internet")
        proxy := apps.Network.Caddy().Label("3scale")
        router := gcp.Network.Router().Label("Router")

        diagram5.Group(diagram.NewGroup("Wild west").Label("Wild west").Add(inet).Add(proxy))

        // propojení uzlů v diagramu
        diagram5.Connect(inet, proxy)
        diagram5.Connect(proxy, router)

        // vykreslení diagramu
        err = diagram5.Render()

        // kontrola, zda bylo vykreslení provedeno bez chyby
        if err != nil {
                log.Fatal(err)
        }
}
</pre>

<pre>
digraph root {
        fontcolor="#2D3436";
        fontname="Sans-Serif";
        fontsize=13;
        label="Diagram #5";
        nodesep=0.6;
        pad=2;
        rankdir=LR;
        ranksep=0.75;
        splines=ortho;
        pmpohiec->tymwuwkk [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
        tymwuwkk->juurwdxb [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
        subgraph "cluster_Wild west" {
                bgcolor="#E5F5FD";
                fontcolor="#2D3436";
                fontname="Sans-Serif";
                fontsize=12;
                label="Wild west";
                labeljust=l;
                pencolor="#AEB6BE";
                shape=box;
                style=rounded;
                pmpohiec [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=2.1999999999999997, image="assets/apps/network/internet.png", imagescale=true, label=Internet, labelloc=b, shape=none, style=rounded, width=1.4 ];
                tymwuwkk [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=2.1999999999999997, image="assets/apps/network/caddy.png", imagescale=true, label="3scale", labelloc=b, shape=none, style=rounded, width=1.4 ];
        };
        juurwdxb [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/gcp/network/router.png", imagescale=true, label=Router, labelloc=b, shape=none, style=rounded, width=1.4 ];
}
</pre>

<img src="https://i.iinfo.cz/images/558/diagrams2-10.png" class="image-449444" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/legalcode.cs&quot;&gt;CC-BY-SA&lt;/a&gt;" width="584" height="327" />
<p><i>Obrázek 10: </i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Propojení typu 1:N a N:1</h2>

<p></p>

<pre>
package main

import (
        "log"

        "github.com/blushft/go-diagrams/diagram"
        "github.com/blushft/go-diagrams/nodes/apps"
        "github.com/blushft/go-diagrams/nodes/gcp"
        "github.com/blushft/go-diagrams/nodes/generic"
)

func main() {
        // inicializace objektu představujícího diagram
        diagram6, err := diagram.New(diagram.Label("Diagram #6"), diagram.Filename("diagram6"))

        // kontrola konstrukce objektu
        if err != nil {
                log.Fatal(err)
        }

        // deklarace uzlů v diagramu
        inet := apps.Network.Internet().Label("Internet")
        proxy1 := generic.Network.Firewall().Label("3scale")
        proxy2 := generic.Network.Firewall().Label("3scale")
        proxy3 := generic.Network.Firewall().Label("3scale")
        router := gcp.Network.Router().Label("Router")

        diagram6.Connect(inet, proxy1)
        diagram6.Connect(inet, proxy2)
        diagram6.Connect(inet, proxy3)

        diagram6.Connect(proxy1, router)
        diagram6.Connect(proxy2, router)
        diagram6.Connect(proxy3, router)

        // vykreslení diagramu
        err = diagram6.Render()

        // kontrola, zda bylo vykreslení provedeno bez chyby
        if err != nil {
                log.Fatal(err)
        }
}
</pre>

<pre>
digraph root {
        fontcolor="#2D3436";
        fontname="Sans-Serif";
        fontsize=13;
        label="Diagram #6";
        nodesep=0.6;
        pad=2;
        rankdir=LR;
        ranksep=0.75;
        splines=ortho;
        ddncgkdg->yetpkgzs [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
        ddncgkdg->xnbxgnsh [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
        ddncgkdg->jubmcseh [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
        yetpkgzs->jhvutahu [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
        xnbxgnsh->jhvutahu [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
        jubmcseh->jhvutahu [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
        ddncgkdg [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/apps/network/internet.png", imagescale=true, label=Internet, labelloc=b, shape=none, style=rounded, width=1.4 ];
        jhvutahu [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/gcp/network/router.png", imagescale=true, label=Router, labelloc=b, shape=none, style=rounded, width=1.4 ];
        jubmcseh [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/generic/network/firewall.png", imagescale=true, label="3scale", labelloc=b, shape=none, style=rounded, width=1.4 ];
        xnbxgnsh [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/generic/network/firewall.png", imagescale=true, label="3scale", labelloc=b, shape=none, style=rounded, width=1.4 ];
        yetpkgzs [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/generic/network/firewall.png", imagescale=true, label="3scale", labelloc=b, shape=none, style=rounded, width=1.4 ];
}
</pre>

<img src="https://i.iinfo.cz/images/558/diagrams2-11.png" class="image-449445" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/legalcode.cs&quot;&gt;CC-BY-SA&lt;/a&gt;" width="566" height="658" />
<p><i>Obrázek 11: </i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Programové vytvoření skupiny s&nbsp;vazbami 1:N a N:1</h2>

<p></p>

<pre>
package main

import (
        "fmt"
        "log"

        "github.com/blushft/go-diagrams/diagram"
        "github.com/blushft/go-diagrams/nodes/apps"
        "github.com/blushft/go-diagrams/nodes/gcp"
        "github.com/blushft/go-diagrams/nodes/generic"
)

const ProxiesCount = 3

func main() {
        // inicializace objektu představujícího diagram
        diagram7, err := diagram.New(diagram.Label("Diagram #7"), diagram.Filename("diagram7"))

        // kontrola konstrukce objektu
        if err != nil {
                log.Fatal(err)
        }

        // deklarace uzlů v diagramu
        inet := apps.Network.Internet().Label("Internet")

        proxies := make([]*diagram.Node, ProxiesCount)

        for i := 0; i < ProxiesCount; i++ {
                label := fmt.Sprintf("Proxy #%d", i+1)
                proxies[i] = generic.Network.Firewall().Label(label)
        }
        router := gcp.Network.Router().Label("Router")

        diagram7.Add(inet)
        diagram7.Add(router)

        diagram7.Group(diagram.NewGroup("Proxies").
                Add(proxies...).
                ConnectAllFrom(inet.ID()).
                ConnectAllTo(router.ID()),
        )

        // vykreslení diagramu
        err = diagram7.Render()

        // kontrola, zda bylo vykreslení provedeno bez chyby
        if err != nil {
                log.Fatal(err)
        }
}
</pre>

<pre>
digraph root {
	fontcolor="#2D3436";
	fontname="Sans-Serif";
	fontsize=13;
	label="Diagram #7";
	nodesep=0.6;
	pad=2;
	rankdir=LR;
	ranksep=0.75;
	splines=ortho;
	zlvpebgu->kjxceadk [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
	ixelswwc->kjxceadk [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
	dpjzrxvm->bxkejjqb [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
	dpjzrxvm->zlvpebgu [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
	dpjzrxvm->ixelswwc [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
	bxkejjqb->kjxceadk [ color="#7B8894", dir=forward, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13 ];
	subgraph cluster_Proxies {
		bgcolor="#E5F5FD";
		fontcolor="#2D3436";
		fontname="Sans-Serif";
		fontsize=12;
		labeljust=l;
		pencolor="#AEB6BE";
		shape=box;
		style=rounded;
		bxkejjqb [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/generic/network/firewall.png", imagescale=true, label="Proxy #1", labelloc=b, shape=none, style=rounded, width=1.4 ];
		ixelswwc [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/generic/network/firewall.png", imagescale=true, label="Proxy #3", labelloc=b, shape=none, style=rounded, width=1.4 ];
		zlvpebgu [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/generic/network/firewall.png", imagescale=true, label="Proxy #2", labelloc=b, shape=none, style=rounded, width=1.4 ];
	};
	dpjzrxvm [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/apps/network/internet.png", imagescale=true, label=Internet, labelloc=b, shape=none, style=rounded, width=1.4 ];
	kjxceadk [ fixedsize=true, fontcolor="#2D3436", fontname="Sans-Serif", fontsize=13, height=1.7999999999999998, image="assets/gcp/network/router.png", imagescale=true, label=Router, labelloc=b, shape=none, style=rounded, width=1.4 ];
}
</pre>

<img src="https://i.iinfo.cz/images/558/diagrams2-12.png" class="image-449446" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/legalcode.cs&quot;&gt;CC-BY-SA&lt;/a&gt;" width="572" height="746" />
<p><i>Obrázek 12: </i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Porovnání knihoven <i>Diagrams</i> a <i>go-diagrams</i></h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Repositář s&nbsp;demonstračními příklady psanými v&nbsp;Pythonu</h2>

<p>Zdrojové kódy všech minule i dnes popsaných demonstračních příkladů určených
pro Python 3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>flowchart1.py</td><td>jednoduchý vývojový diagram s&nbsp;dvojicí uzlů (počátek a konec zpracování)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart1.py</a></td></tr>
<tr><td> 2</td><td>flowchart2.py</td><td>vývojový diagram s&nbsp;uzly typu <strong>Action</strong> a <strong>InputOutput</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart2.py</a></td></tr>
<tr><td> 3</td><td>flowchart3.py</td><td>diagram s&nbsp;nastavenou orientací <strong>Top-Bottom</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart3.py</a></td></tr>
<tr><td> 4</td><td>flowchart4.py</td><td>přímé zobrazení diagramu po spuštění skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>onprem1.py</td><td>jednoduchá pipeline tvořená Kafkou, workerem naprogramovaným v&nbsp;Go a message brokerem RabbitMQ</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem1.py</a></td></tr>
<tr><td> 6</td><td>onprem2.py</td><td>diagram s&nbsp;větvením a spojením &ndash; větší množství workerů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem2.py</a></td></tr>
<tr><td> 7</td><td>onprem2aws.py</td><td>totožný diagram, ovšem používající odlišné ikony (z&nbsp;AWS)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem2aws.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem2aws.py</a></td></tr>
<tr><td> 8</td><td>onprem3.py</td><td>změna orientace předchozího diagramu (shora dolů)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem3.py</a></td></tr>
<tr><td> 9</td><td>onprem3B.py</td><td>změna orientace předchozího diagramu (zdola nahoru)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem3B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem3B.py</a></td></tr>
<tr><td>10</td><td>onprem4.py</td><td>složitější pipeline s&nbsp;větším množstvím větvení</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem4.py</a></td></tr>
<tr><td>11</td><td>onprem5.py</td><td>dvojice zdrojů dat</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem5.py</a></td></tr>
<tr><td>12</td><td>onprem6.py</td><td>zdroj a cíl dat je tvořen jediným uzlem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem6.py</a></td></tr>
<tr><td>13</td><td>onprem7.py</td><td>zjednodušení předchozího diagramu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem7.py</a></td></tr>
<tr><td>14</td><td>onprem8.py</td><td>více zdrojů a cílů dat, větší množství workerů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem8.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>dx.py</td><td>složitější diagram s&nbsp;clustery</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/dx.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/dx.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>clusters1.py</td><td>diagram bez clusterů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/clusters1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/clusters1.py</a></td></tr>
<tr><td>17</td><td>clusters2.py</td><td>diagram s&nbsp;jedním clusterem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/clusters2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/clusters2.py</a></td></tr>
<tr><td>18</td><td>clusters3.py</td><td>diagram se dvěma clustery</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/clusters3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/clusters3.py</a></td></tr>
<tr><td>19</td><td>clusters4.py</td><td>diagram s&nbsp;hierarchickými clustery</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/clusters4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/clusters4.py</a></td></tr>
<tr><td>20</td><td>clusters5.py</td><td>diagram s&nbsp;hierarchickými clustery</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/clusters5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/clusters5.py</a></td></tr>
</table>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady psanými v&nbsp;jazyce Go</h2>

<p>Budu se částečně opakovat: zdrojové kódy všech dnes použitých demonstračních
příkladů vytvořených v&nbsp;jazyce Go byly uloženy do nového Git repositáře,
který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>diagram1.go</td><td>prázdný diagram vytvořený knihovnou <i>go-diagrams</i></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_74/diagram1.go">https://github.com/tisnik/go-root/blob/master/article_74/diagram1.go</a></td></tr>
<tr><td> 2</td><td>diagram2.go</td><td>diagram s&nbsp;dvojicí uzlů a jednou hranou</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_74/diagram2.go">https://github.com/tisnik/go-root/blob/master/article_74/diagram2.go</a></td></tr>
<tr><td> 3</td><td>diagram3.go</td><td>propojení většího množství uzlů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_74/diagram3.go">https://github.com/tisnik/go-root/blob/master/article_74/diagram3.go</a></td></tr>
<tr><td> 4</td><td>diagram4.go</td><td>skupiny uzlů v&nbsp;diagramu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_74/diagram4.go">https://github.com/tisnik/go-root/blob/master/article_74/diagram4.go</a></td></tr>
<tr><td> 5</td><td>diagram5.go</td><td>pojmenování skupiny v&nbsp;diagramu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_74/diagram5.go">https://github.com/tisnik/go-root/blob/master/article_74/diagram5.go</a></td></tr>
<tr><td> 6</td><td>diagram6.go</td><td>propojení typu 1:N a N:1</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_74/diagram6.go">https://github.com/tisnik/go-root/blob/master/article_74/diagram6.go</a></td></tr>
<tr><td> 7</td><td>diagram7.go</td><td>programové vytvoření skupiny s&nbsp;vazbami 1:N a N:1</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_74/diagram7.go">https://github.com/tisnik/go-root/blob/master/article_74/diagram7.go</a></td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na články s&nbsp;tématem programové tvorby grafů a diagramů</h2>

<p>V&nbsp;této kapitole jsou uvedeny odkazy na předchozí články, v&nbsp;nichž
jsme se zabývali tvorbou různých typů grafů a diagramů &ndash; a to
v&nbsp;naprosté většině případů s&nbsp;využitím nějakého doménově specifického
jazyka neboli DSL (<i>Domain Specific Language</i>) popř.&nbsp;nějakého
univerzálního programovacího jazyka:</p>

<ol>

<li>Nástroje pro tvorbu UML diagramů<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/">https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/</a>
</li>

<li>Nástroje pro tvorbu UML diagramů z&nbsp;příkazové řádky<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky/">https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky/</a>
</li>

<li>Nástroje pro tvorbu UML diagramů z&nbsp;příkazové řádky (II)<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky-ii/">https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky-ii/</a>
</li>

<li>Nástroje pro tvorbu grafů a diagramů z&nbsp;příkazové řádky<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-grafu-a-diagramu-z-prikazove-radky/">https://www.root.cz/clanky/nastroje-pro-tvorbu-grafu-a-diagramu-z-prikazove-radky/</a>
</li>

<li>Sledování správy paměti v&nbsp;Pythonu s&nbsp;využitím nástroje objgraph<br />
<a href="https://www.root.cz/clanky/sledovani-spravy-pameti-v-pythonu-s-vyuzitim-nastroje-objgraph/">https://www.root.cz/clanky/sledovani-spravy-pameti-v-pythonu-s-vyuzitim-nastroje-objgraph/</a>
</li>

<li>Programová tvorba diagramů v&nbsp;jazyku Clojure s&nbsp;využitím knihovny Rhizome<br />
<a href="https://www.root.cz/clanky/programova-tvorba-diagramu-v-jazyku-clojure-s-vyuzitim-knihovny-rhizome/">https://www.root.cz/clanky/programova-tvorba-diagramu-v-jazyku-clojure-s-vyuzitim-knihovny-rhizome/</a>
</li>

<li>Tvorba sekvenčních diagramů v&nbsp;Pythonu s&nbsp;využitím knihovny Napkin<br />
<a href="https://www.root.cz/clanky/tvorba-sekvencnich-diagramu-v-pythonu-s-vyuzitim-knihovny-napkin/">https://www.root.cz/clanky/tvorba-sekvencnich-diagramu-v-pythonu-s-vyuzitim-knihovny-napkin/</a>
</li>

<li>Tvorba vývojových diagramů přímo ze zdrojových kódů Pythonu<br />
<a href="https://www.root.cz/clanky/tvorba-vyvojovych-diagramu-primo-ze-zdrojovych-kodu-pythonu/">https://www.root.cz/clanky/tvorba-vyvojovych-diagramu-primo-ze-zdrojovych-kodu-pythonu/</a>
</li>

<li>Tvorba diagramů s architekturou systémů s využitím knihovny Diagrams<br />
<a href="https://www.root.cz/clanky/tvorba-diagramu-s-architekturou-systemu-s-vyuzitim-knihovny-diagrams/">https://www.root.cz/clanky/tvorba-diagramu-s-architekturou-systemu-s-vyuzitim-knihovny-diagrams/</a>
</li>

</ol>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na Internetu</h2>

<ol>

<li>Flowchart (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Flowchart">https://en.wikipedia.org/wiki/Flowchart</a>
</li>

<li>DRAKON<br />
<a href="https://en.wikipedia.org/wiki/DRAKON">https://en.wikipedia.org/wiki/DRAKON</a>
</li>

<li>Modeling language<br />
<a href="https://en.wikipedia.org/wiki/Modeling_language">https://en.wikipedia.org/wiki/Modeling_language</a>
</li>

<li>Napkin na GitHubu<br />
<a href="https://github.com/pinetr2e/napkin">https://github.com/pinetr2e/napkin</a>
</li>

<li>Napkin 0.6.8 na PyPi<br />
<a href="https://pypi.org/project/napkin/">https://pypi.org/project/napkin/</a>
</li>

<li>PlantUML (home page)<br />
<a href="http://plantuml.sourceforge.net/">http://plantuml.sourceforge.net/</a>
</li>

<li>PlantUML (download page)<br />
<a href="http://sourceforge.net/projects/plantuml/files/plantuml.jar/download">http://sourceforge.net/projects/plantuml/files/plantuml.jar/download</a>
</li>

<li>PlantUML (Language Reference Guide)<br />
<a href="http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf">http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf</a>
</li>

<li>Rhizome<br />
<a href="https://github.com/ztellman/rhizome">https://github.com/ztellman/rhizome</a>
</li>

<li>Swagger to UML<br />
<a href="https://github.com/nlohmann/swagger_to_uml">https://github.com/nlohmann/swagger_to_uml</a>
</li>

<li>pydiagrams<br />
<a href="https://github.com/billingtonm/pydiagrams">https://github.com/billingtonm/pydiagrams</a>
</li>

<li>graphviz(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/graphviz">https://linux.die.net/man/3/graphviz</a>
</li>

<li>dot(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/dot">https://linux.die.net/man/1/dot</a>
</li>

<li>neato(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/neato">https://linux.die.net/man/1/neato</a>
</li>

<li>twopi(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/twopi">https://linux.die.net/man/1/twopi</a>
</li>

<li>circo(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/circo">https://linux.die.net/man/1/circo</a>
</li>

<li>fdp(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/fdp">https://linux.die.net/man/1/fdp</a>
</li>

<li>sfdp(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/sfdp">https://linux.die.net/man/1/sfdp</a>
</li>

<li>Plain-text diagrams take shape in Asciidoctor!<br />
<a href="http://asciidoctor.org/new­s/2014/02/18/plain-text-diagrams-in-asciidoctor/">http://asciidoctor.org/new­s/2014/02/18/plain-text-diagrams-in-asciidoctor/</a>
</li>

<li>Graphviz – Graph Visualization Software<br />
<a href="http://www.graphviz.org/">http://www.graphviz.org/</a>
</li>

<li>graphviz (Manual Page)<br />
<a href="http://www.root.cz/man/7/graphviz/">http://www.root.cz/man/7/graphviz/</a>
</li>

<li>dot (Manual page)<br />
<a href="http://www.root.cz/man/1/dot/">http://www.root.cz/man/1/dot/</a>
</li>

<li>dot (Manual v&nbsp;PDF)<br />
<a href="https://graphviz.org/pdf/dot.1.pdf">https://graphviz.org/pdf/dot.1.pdf</a>
</li>

<li>Ditaa home page<br />
<a href="http://ditaa.sourceforge.net/">http://ditaa.sourceforge.net/</a>
</li>

<li>Ditaa introduction<br />
<a href="http://ditaa.sourceforge.net/#intro">http://ditaa.sourceforge.net/#intro</a>
</li>

<li>Ditaa usage<br />
<a href="http://ditaa.sourceforge.net/#usage">http://ditaa.sourceforge.net/#usage</a>
</li>

<li>Node, Edge and Graph Attributes<br />
<a href="http://www.graphviz.org/doc/in­fo/attrs.html">http://www.graphviz.org/doc/in­fo/attrs.html</a>
</li>

<li>Graphviz (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Graphviz">http://en.wikipedia.org/wiki/Graphviz</a>
</li>

<li>Unified Modeling Language<br />
<a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language">https://en.wikipedia.org/wiki/Unified_Modeling_Language</a>
</li>

<li>UML basics: The sequence diagram<br />
<a href="http://www.ibm.com/developerworks/rational/library/3101.html">http://www.ibm.com/developerworks/rational/library/3101.html</a>
</li>

<li>UML 2 State Machine Diagrams: An Agile Introduction<br />
<a href="http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm">http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm</a>
</li>

<li>Sequence diagram (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Sequence_diagram">https://en.wikipedia.org/wiki/Sequence_diagram</a>
</li>

<li>UML 2 Sequence Diagrams: An Agile Introduction<br />
<a href="http://www.agilemodeling.com/artifacts/sequenceDiagram.htm">http://www.agilemodeling.com/artifacts/sequenceDiagram.htm</a>
</li>

<li>A Quick Introduction to UML Sequence Diagrams<br />
<a href="http://www.tracemodeler.com/articles/a_quick_introduction_to_uml_sequence_diagrams/">http://www.tracemodeler.com/articles/a_quick_introduction_to_uml_sequence_diagrams/</a>
</li>

<li>UML Sequence Diagrams<br />
<a href="https://www.uml-diagrams.org/sequence-diagrams.html">https://www.uml-diagrams.org/sequence-diagrams.html</a>
</li>

<li>Web Sequence Diagrams<br />
<a href="https://www.websequencediagrams.com/">https://www.websequencediagrams.com/</a>
</li>

<li>Drawing sequence diagrams “napkin style”<br />
<a href="https://modeling-languages.com/drawing-sequence-diagrams-napkin-style/">https://modeling-languages.com/drawing-sequence-diagrams-napkin-style/</a>
</li>

<li>Curated list of UML tools – 2020 edition<br />
<a href="https://modeling-languages.com/uml-tools/#textual">https://modeling-languages.com/uml-tools/#textual</a>
</li>

<li>Flowchart diagrams vs. UML activity diagrams<br />
<a href="https://stackoverflow.com/questions/7081215/flowchart-diagrams-vs-uml-activity-diagrams">https://stackoverflow.com/questions/7081215/flowchart-diagrams-vs-uml-activity-diagrams</a>
</li>

<li>Kopenograms – Graphical Language for Structured Algorithms<br />
<a href="https://kopenogram.org/Assets/Kopenograms_Graphical_Language_for_Structured_Algorithms.pdf">https://kopenogram.org/Assets/Kopenograms_Graphical_Language_for_Structured_Algorithms.pdf</a>
</li>

<li>Kopenograms and Their Implementation in BlueJ<br />
<a href="https://link.springer.com/chapter/10.1007%2F978-3-319-46535-7_8">https://link.springer.com/chapter/10.1007%2F978-3-319-46535-7_8</a>
</li>

<li>The simplest way to describe your flows<br />
<a href="https://code2flow.com/">https://code2flow.com/</a>
</li>

<li>Allan Mogensen and his Legacy<br />
<a href="http://www.worksimp.com/articles/allan-mogensen.htm">http://www.worksimp.com/articles/allan-mogensen.htm</a>
</li>

<li>Diagrams: Diagram as Code<br />
<a href="https://diagrams.mingrammer.com/">https://diagrams.mingrammer.com/</a>
</li>

<li>Diagrams: Guides<br />
<a href="https://diagrams.mingrammer.com/docs/guides/diagram">https://diagrams.mingrammer.com/docs/guides/diagram</a>
</li>

<li>Diagrams: Nodes<br />
<a href="https://diagrams.mingrammer.com/docs/nodes/">https://diagrams.mingrammer.com/docs/nodes/onprem</a>
</li>

<li>go-diagrams<br />
<a href="https://github.com/blushft/go-diagrams">https://github.com/blushft/go-diagrams</a>
</li>

<li>GoJS<br />
<a href="https://gojs.net/latest/index.html">https://gojs.net/latest/index.html</a>
</li>

<li>Code visualization: How to turn complex code into diagrams<br />
<a href="https://www.lucidchart.com/blog/visualize-code-documentation">https://www.lucidchart.com/blog/visualize-code-documentation</a>
</li>

<li>Create dependency diagrams from your code<br />
<a href="https://docs.microsoft.com/en-us/visualstudio/modeling/create-layer-diagrams-from-your-code?view=vs-2019">https://docs.microsoft.com/en-us/visualstudio/modeling/create-layer-diagrams-from-your-code?view=vs-2019</a>
</li>

<li>Software Architecture Diagrams as Code<br />
<a href="https://shekhargulati.com/2020/04/21/software-architecture-diagrams-as-code/">https://shekhargulati.com/2020/04/21/software-architecture-diagrams-as-code/</a>
</li>

<li>Processing spreadsheet data in Go<br />
<a href="https://appliedgo.net/spreadsheet/">https://appliedgo.net/spreadsheet/</a>
</li>

<li>Stránka projektu plotly<br />
<a href="https://plot.ly/">https://plot.ly/</a>
</li>

<li>Plotly JavaScript Open Source Graphing Library<br />
<a href="https://plot.ly/javascript/">https://plot.ly/javascript/</a>
</li>

<li>Domain coloring<br />
<a href="https://en.wikipedia.org/wiki/Domain_coloring">https://en.wikipedia.org/wiki/Domain_coloring</a>
</li>

<li>The Gonum Numerical Computing Package<br />
<a href="https://www.gonum.org/post/introtogonum/">https://www.gonum.org/post/introtogonum/</a>
</li>

<li>Gomacro na GitHubu<br />
<a href="https://github.com/cosmos72/gomacro">https://github.com/cosmos72/gomacro</a>
</li>

<li>gophernotes - Use Go in Jupyter notebooks and nteract<br />
<a href="https://github.com/gopherdata/gophernotes">https://github.com/gopherdata/gophernotes</a>
</li>

<li>gonum<br />
<a href="https://github.com/gonum">https://github.com/gonum</a>
</li>

<li>go-gota/gota -  DataFrames and data wrangling in Go (Golang)<br />
<a href="https://porter.io/github.com/go-gota/gota">https://porter.io/github.com/go-gota/gota</a>
</li>

<li>A repository for plotting and visualizing data <br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>Gonum Numerical Packages<br />
<a href="https://www.gonum.org/">https://www.gonum.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

