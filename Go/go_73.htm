<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Druhá verze testované aplikace</a></p>
<p><a href="#k02">*** 2. Výsledky běhu jednotkových testů</a></p>
<p><a href="#k03">*** 3. Jednotkový test pro funkci provádějící zápis do tabulky</a></p>
<p><a href="#k04">*** 4. Výsledek pokusu o spuštění jednotkových testů</a></p>
<p><a href="#k05">*** 5. Korektní zápis jednotkového testu a výsledek běhu testů</a></p>
<p><a href="#k06">*** 6. Jednotkový test pro funkci provádějící vymazání záznamu z&nbsp;tabulky</a></p>
<p><a href="#k07">*** 7. Výsledek běhu testů, včetně zjištění pokrytí kódu testy</a></p>
<p><a href="#k08">*** 8. Simulace chyby na straně SQL databáze</a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Druhá verze testované aplikace</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "os"
&nbsp;
        "database/sql"
&nbsp;
        _ "github.com/lib/pq"           <i>// PostgreSQL database driver</i>
        _ "github.com/mattn/go-sqlite3" <i>// SQLite database driver</i>
&nbsp;
        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)
&nbsp;
<i>// Datová struktura s konfigurací připojení k databázi</i>
type <strong>StorageConfiguration</strong> struct {
        Driver           string `mapstructure:"db_driver" toml:"db_driver"`
        SQLiteDataSource string `mapstructure:"sqlite_datasource" toml:"sqlite_datasource"`
        PGUsername       string `mapstructure:"pg_username" toml:"pg_username"`
        PGPassword       string `mapstructure:"pg_password" toml:"pg_password"`
        PGHost           string `mapstructure:"pg_host" toml:"pg_host"`
        PGPort           int    `mapstructure:"pg_port" toml:"pg_port"`
        PGDBName         string `mapstructure:"pg_db_name" toml:"pg_db_name"`
        PGParams         string `mapstructure:"pg_params" toml:"pg_params"`
}
&nbsp;
<i>// Chybové zprávy</i>
const (
        canNotConnectToDataStorageMessage = "Can not connect to data storage"
        connectionToDBNotEstablished      = "Connection to database not established"
        unableToCloseDBRowsHandle         = "Unable to close the DB rows handle"
        databaseOperationFailed           = "Database operation failed"
)
&nbsp;
<i>// Inicializace připojení k databázi</i>
func <strong>initDatabaseConnection</strong>(configuration StorageConfiguration) (*sql.DB, error) {
        driverName := configuration.Driver
        dataSource := ""
        log.Info().Str("driverName", configuration.Driver).Msg("DB connection configuration")
&nbsp;
        <i>// inicializace připojení s vybraným driverem</i>
        switch driverName {
        case "sqlite3":
                <i>//driverType := DBDriverSQLite3</i>
                <i>//driver = &sqlite3.SQLiteDriver{}</i>
                dataSource = configuration.SQLiteDataSource
        case "postgres":
                <i>//driverType := DBDriverPostgres</i>
                <i>//driver = &pq.Driver{}</i>
                dataSource = fmt.Sprintf(
                        "postgresql://%v:%v@%v:%v/%v?%v",
                        configuration.PGUsername,
                        configuration.PGPassword,
                        configuration.PGHost,
                        configuration.PGPort,
                        configuration.PGDBName,
                        configuration.PGParams,
                )
        default:
                <i>// neznámý driver</i>
                err := fmt.Errorf("driver %v is not supported", driverName)
                log.Err(err).Msg(canNotConnectToDataStorageMessage)
                return nil, err
        }
&nbsp;
        <i>// pokus o inicializaci připojení k databázi</i>
        connection, err := sql.Open(driverName, dataSource)
&nbsp;
        <i>// test, zda bylo připojení k databázi úspěšné</i>
        if err != nil {
                log.Err(err).Msg(canNotConnectToDataStorageMessage)
                return nil, err
        }
&nbsp;
        return connection, nil
}
&nbsp;
<i>// Zobrazení všech záznamů v tabulce "persons"</i>
func <strong>displayAllRecords</strong>(connection *sql.DB) error {
        <i>// dotaz do databáze</i>
        query := "SELECT id, name, surname FROM persons"
        rows, err := connection.Query(query)
&nbsp;
        <i>// test, zda byl SQL příkaz proveden bez chyby</i>
        if err != nil {
                return err
        }
&nbsp;
        defer func() {
                <i>// pokud dojde k chybě nebo na konci smyčky, musíme uvolnit prostředky</i>
                if closeErr := rows.Close(); closeErr != nil {
                        log.Error().Err(closeErr).Msg(unableToCloseDBRowsHandle)
                }
        }()
&nbsp;
        <i>// projít všemi vrácenými řádky</i>
        for rows.Next() {
                var (
                        id      int
                        name    string
                        surname string
                )
&nbsp;
                <i>// přečtení dat z jednoho vráceného řádku</i>
                if err := rows.Scan(&amp;id, &amp;name, &amp;surname); err != nil {
                        return err
                }
&nbsp;
                <i>// výpis načteného záznamu</i>
                log.Info().Int("ID", id).
                        Str("name", name).
                        Str("surname", surname).
                        Msg("Record")
        }
&nbsp;
        return nil
}
&nbsp;
<i>// datová struktura odpovídající struktuře záznamu v databázi</i>
type <strong>Record</strong> struct {
        Id      int
        Name    string
        Surname string
}
&nbsp;
<i>// funkce vracející data přečtená z databázové tabulky</i>
func <strong>readAllRecords</strong>(connection *sql.DB) ([]Record, error) {
        results := make([]Record, 0)
&nbsp;
        <i>// dotaz do databáze</i>
        query := "SELECT id, name, surname FROM persons"
        rows, err := connection.Query(query)
&nbsp;
        <i>// test, zda byl SQL příkaz proveden bez chyby</i>
        if err != nil {
                return results, err
        }
&nbsp;
        defer func() {
                <i>// pokud dojde k chybě nebo na konci smyčky, musíme uvolnit prostředky</i>
                if closeErr := rows.Close(); closeErr != nil {
                        log.Error().Err(closeErr).Msg(unableToCloseDBRowsHandle)
                }
        }()
&nbsp;
        <i>// projít všemi vrácenými řádky</i>
        for rows.Next() {
                var record Record
&nbsp;
                <i>// přečtení dat z jednoho vráceného řádku</i>
                if err := rows.Scan(&amp;record.Id, &amp;record.Name, &amp;record.Surname); err != nil {
                        return results, err
                }
&nbsp;
                results = append(results, record)
        }
&nbsp;
        return results, nil
}
&nbsp;
<i>// funkce vracející data přečtená z databázové tabulky</i>
func <strong>readRecordsWithName</strong>(connection *sql.DB, name string) ([]Record, error) {
        results := make([]Record, 0)
&nbsp;
        <i>// dotaz do databáze</i>
        query := "SELECT id, name, surname FROM persons WHERE name=$1"
        rows, err := connection.Query(query, name)
&nbsp;
        <i>// test, zda byl SQL příkaz proveden bez chyby</i>
        if err != nil {
                return results, err
        }
&nbsp;
        defer func() {
                <i>// pokud dojde k chybě nebo na konci smyčky, musíme uvolnit prostředky</i>
                if closeErr := rows.Close(); closeErr != nil {
                        log.Error().Err(closeErr).Msg(unableToCloseDBRowsHandle)
                }
        }()
&nbsp;
        <i>// projít všemi vrácenými řádky</i>
        for rows.Next() {
                var record Record
&nbsp;
                <i>// přečtení dat z jednoho vráceného řádku</i>
                if err := rows.Scan(&amp;record.Id, &amp;record.Name, &amp;record.Surname); err != nil {
                        return results, err
                }
&nbsp;
                results = append(results, record)
        }
&nbsp;
        return results, nil
}
&nbsp;
<i>// Vložení nového záznamu do tabulky "persons"</i>
func <strong>insertRecord</strong>(connection *sql.DB, name string, surname string) (int, error) {
        <i>// provedení SQL příkazu se dvěma parametry</i>
        sqlStatement := "INSERT INTO persons (name, surname) VALUES($1, $2);"
        result, err := connection.Exec(sqlStatement, name, surname)
&nbsp;
        <i>// test, zda byl SQL příkaz proveden bez chyby</i>
        if err != nil {
                return 0, err
        }
&nbsp;
        <i>// přečíst počet řádků v tabulce, které byly SQL příkazem upraveny</i>
        affected, err := result.RowsAffected()
&nbsp;
        <i>// i tato operace může teoreticky skončit s chybou nebo nemusí být podporována</i>
        if err != nil {
                return 0, err
        }
        return int(affected), nil
}
&nbsp;
<i>// Vymazání záznamu nebo záznamů na základě zapsaného jména</i>
func <strong>deleteByName</strong>(connection *sql.DB, name string) (int, error) {
        <i>// provedení SQL příkazu s jedním parametrem</i>
        sqlStatement := "DELETE FROM persons WHERE name = $1;"
        result, err := connection.Exec(sqlStatement, name)
&nbsp;
        <i>// test, zda byl SQL příkaz proveden bez chyby</i>
        if err != nil {
                return 0, err
        }
&nbsp;
        <i>// přečíst počet řádků v tabulce, které byly SQL příkazem upraveny</i>
        affected, err := result.RowsAffected()
&nbsp;
        <i>// i tato operace může teoreticky skončit s chybou nebo nemusí být podporována</i>
        if err != nil {
                return 0, err
        }
        return int(affected), nil
}
&nbsp;
func <strong>main</strong>() {
        <i>// nastavit logovací systém pro barevný výstup na terminál</i>
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
&nbsp;
        <i>// konfigurace připojení do databáze</i>
        config := StorageConfiguration{
                Driver:     "postgres",
                PGUsername: "postgres",
                PGPassword: "postgres",
                PGHost:     "localhost",
                PGPort:     5432,
                PGDBName:   "testdb",
                PGParams:   "sslmode=disable",
        }
&nbsp;
        log.Debug().Msg("Started")
&nbsp;
        <i>// inicializace připojení k databázi</i>
        connection, err := initDatabaseConnection(config)
        if err != nil {
                log.Err(err).Msg(connectionToDBNotEstablished)
                return
        }
&nbsp;
        log.Info().Msg("Read all records")
        <i>// přečtení všech záznamů</i>
        results, err := readAllRecords(connection)
        if err != nil {
                log.Err(err).Msg(databaseOperationFailed)
                return
        }
        <i>// výpis získaných záznamů</i>
        for _, result := range results {
                log.Info().Int("ID", result.Id).
                        Str("name", result.Name).
                        Str("surname", result.Surname).
                        Msg("Record")
        }
&nbsp;
        log.Info().Msg("Display all records")
        <i>// přečtení všech záznamů z tabulky "persons"</i>
        err = displayAllRecords(connection)
        if err != nil {
                log.Err(err).Msg(databaseOperationFailed)
                return
        }
&nbsp;
        <i>// vymazání záznamu či záznamů na základě zapsaného jména</i>
        affected, err := deleteByName(connection, "Eda")
        if err != nil {
                log.Err(err).Msg(databaseOperationFailed)
                return
        }
        log.Info().Int("deleted rows", affected).Msg("DELETE")
&nbsp;
        <i>// přidání nového záznamu do databáze</i>
        affected, err = insertRecord(connection, "Eda", "Vodopád")
        if err != nil {
                log.Err(err).Msg(databaseOperationFailed)
                return
        }
        log.Info().Int("inserted rows", affected).Msg("INSERT")
&nbsp;
        <i>// přečtení všech záznamů z tabulky "persons"</i>
        err = displayAllRecords(connection)
        if err != nil {
                log.Err(err).Msg(databaseOperationFailed)
                return
        }
&nbsp;
        log.Info().Msg("Read records with name Přemysl")
        <i>// přečtení záznamů</i>
        results, err = readRecordsWithName(connection, "Přemysl")
        if err != nil {
                log.Err(err).Msg(databaseOperationFailed)
                return
        }
        <i>// výpis získaných záznamů</i>
        for _, result := range results {
                log.Info().Int("ID", result.Id).
                        Str("name", result.Name).
                        Str("surname", result.Surname).
                        Msg("Record")
        }
&nbsp;
        log.Debug().Msg("Finished")
}
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Výsledky běhu jednotkových testů</h2>

<pre>
$ <strong>go test -v -coverprofile coverage.out</strong>
&nbsp;
=== RUN   TestSelect1
--- PASS: TestSelect1 (0.00s)
=== RUN   TestSelect2
{"level":"info","ID":1,"name":"foo","surname":"bar","time":"2021-03-23T17:48:52+01:00","message":"Record"}
{"level":"info","ID":2,"name":"x","surname":"y","time":"2021-03-23T17:48:52+01:00","message":"Record"}
{"level":"info","ID":3,"name":"a","surname":"b","time":"2021-03-23T17:48:52+01:00","message":"Record"}
--- PASS: TestSelect2 (0.00s)
=== RUN   TestSelect3
--- PASS: TestSelect3 (0.00s)
=== RUN   TestSelect4
--- PASS: TestSelect4 (0.00s)
=== RUN   TestSelect5
--- PASS: TestSelect5 (0.00s)
PASS
coverage: 20.8% of statements
ok      db-test 0.003s
</pre>

<pre>
$ <strong>go tool cover -func=coverage.out </strong>
&nbsp;
db-test/db_operations.go:37:    initDatabaseConnection                  0.0%
db-test/db_operations.go:80:    displayAllRecords                       76.9%
db-test/db_operations.go:128:   readAllRecords                          78.6%
db-test/db_operations.go:163:   readRecordsWithName                     78.6%
db-test/db_operations.go:198:   insertRecord                            0.0%
db-test/db_operations.go:219:   deleteByName                            0.0%
db-test/db_operations.go:307:   main                                    0.0%
total:                          (statements)                            20.8%
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Jednotkový test pro funkci provádějící zápis do tabulky</h2>

<p></p>

<pre>
<i>// Vložení nového záznamu do tabulky "persons"</i>
func <strong>insertRecord</strong>(connection *sql.DB, name string, surname string) (int, error) {
        <i>// provedení SQL příkazu se dvěma parametry</i>
        sqlStatement := "INSERT INTO persons (name, surname) VALUES($1, $2);"
        result, err := connection.Exec(sqlStatement, name, surname)
&nbsp;
        <i>// test, zda byl SQL příkaz proveden bez chyby</i>
        if err != nil {
                return 0, err
        }
&nbsp;
        <i>// přečíst počet řádků v tabulce, které byly SQL příkazem upraveny</i>
        affected, err := result.RowsAffected()
&nbsp;
        <i>// i tato operace může teoreticky skončit s chybou nebo nemusí být podporována</i>
        if err != nil {
                return 0, err
        }
        return int(affected), nil
}
</pre>

<pre>
package <strong>main</strong>
&nbsp;
var (
        DisplayAllRecords   = displayAllRecords
        ReadAllRecords      = readAllRecords
        ReadRecordsWithName = readRecordsWithName
        <strong>InsertRecord        = insertRecord</strong>
)
</pre>

<pre>
func <strong>TestInsertion1</strong>(t *testing.T) {
        connection, mock, err := sqlmock.New()
        if err != nil {
                t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
        }
        defer connection.Close()
&nbsp;
        mock.ExpectExec("INSERT INTO persons (name, surname) VALUES($1, $2);").WithArgs("foo", "bar").WillReturnResult(sqlmock.NewResult(1, 1))
&nbsp;
        updated, err := main.InsertRecord(connection, "foo", "bar")
        if err != nil {
                t.Errorf("error was not expected while updating stats: %s", err)
        }
&nbsp;
        if updated != 1 {
                t.Errorf("one row should be updated, but %d rows were updated", updated)
        }
&nbsp;
        err = mock.ExpectationsWereMet()
        if err != nil {
                t.Errorf("there were unfulfilled expectations: %s", err)
        }
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výsledek pokusu o spuštění jednotkových testů</h2>

<p></p>

<pre>
=== RUN   TestSelect1
--- PASS: TestSelect1 (0.00s)
=== RUN   TestSelect2
{"level":"info","ID":1,"name":"foo","surname":"bar","time":"2021-03-20T18:40:30+01:00","message":"Record"}
{"level":"info","ID":2,"name":"x","surname":"y","time":"2021-03-20T18:40:30+01:00","message":"Record"}
{"level":"info","ID":3,"name":"a","surname":"b","time":"2021-03-20T18:40:30+01:00","message":"Record"}
--- PASS: TestSelect2 (0.00s)
=== RUN   TestSelect3
--- PASS: TestSelect3 (0.00s)
=== RUN   TestSelect4
--- PASS: TestSelect4 (0.00s)
=== RUN   TestSelect5
--- PASS: TestSelect5 (0.00s)
=== RUN   TestInsertion1
--- FAIL: TestInsertion1 (0.00s)
    db_operations_test.go:262: error was not expected while updating stats: ExecQuery: could not match actual sql: "INSERT INTO persons (name, surname) VALUES($1, $2);" with expected regexp "INSERT INTO persons (name, surname) VALUES($1, $2);"
    db_operations_test.go:266: one row should be updated, but 0 rows were updated
    db_operations_test.go:271: there were unfulfilled expectations: there is a remaining expectation which was not matched: ExpectedExec => expecting Exec or ExecContext which:
          - matches sql: 'INSERT INTO persons (name, surname) VALUES($1, $2);'
          - is with arguments:
            0 - foo
            1 - bar
          - should return Result having:
              LastInsertId: 1
              RowsAffected: 1
FAIL
exit status 1
FAIL    db-test 0.004s
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Korektní zápis jednotkového testu a výsledek běhu testů</h2>

<pre>
func <strong>TestInsertion2</strong>(t *testing.T) {
        connection, mock, err := sqlmock.New()
        if err != nil {
                t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
        }
        defer connection.Close()
&nbsp;
        mock.ExpectExec("INSERT INTO persons \\(name, surname\\) VALUES\\(\\$1, \\$2\\);").WithArgs("foo", "bar").WillReturnResult(sqlmock.NewResult(1, 1))
&nbsp;
        updated, err := main.InsertRecord(connection, "foo", "bar")
        if err != nil {
                t.Errorf("error was not expected while updating stats: %s", err)
        }
&nbsp;
        if updated != 1 {
                t.Errorf("one row should be updated, but %d rows were updated", updated)
        }
&nbsp;
        err = mock.ExpectationsWereMet()
        if err != nil {
                t.Errorf("there were unfulfilled expectations: %s", err)
        }
}
</pre>

<pre>
=== RUN   TestSelect1
--- PASS: TestSelect1 (0.00s)
=== RUN   TestSelect2
{"level":"info","ID":1,"name":"foo","surname":"bar","time":"2021-03-20T18:40:30+01:00","message":"Record"}
{"level":"info","ID":2,"name":"x","surname":"y","time":"2021-03-20T18:40:30+01:00","message":"Record"}
{"level":"info","ID":3,"name":"a","surname":"b","time":"2021-03-20T18:40:30+01:00","message":"Record"}
--- PASS: TestSelect2 (0.00s)
=== RUN   TestSelect3
--- PASS: TestSelect3 (0.00s)
=== RUN   TestSelect4
--- PASS: TestSelect4 (0.00s)
=== RUN   TestSelect5
--- PASS: TestSelect5 (0.00s)
=== RUN   TestInsertion1
--- FAIL: TestInsertion1 (0.00s)
    db_operations_test.go:262: error was not expected while updating stats: ExecQuery: could not match actual sql: "INSERT INTO persons (name, surname) VALUES($1, $2);" with expected regexp "INSERT INTO persons (name, surname) VALUES($1, $2);"
    db_operations_test.go:266: one row should be updated, but 0 rows were updated
    db_operations_test.go:271: there were unfulfilled expectations: there is a remaining expectation which was not matched: ExpectedExec => expecting Exec or ExecContext which:
          - matches sql: 'INSERT INTO persons (name, surname) VALUES($1, $2);'
          - is with arguments:
            0 - foo
            1 - bar
          - should return Result having:
              LastInsertId: 1
              RowsAffected: 1
=== RUN   TestInsertion2
--- PASS: TestInsertion2 (0.00s)
FAIL
exit status 1
FAIL    db-test 0.004s
</pre>

<p></p>

<pre>
db-test/db_operations.go:37:    initDatabaseConnection  0.0%
db-test/db_operations.go:80:    displayAllRecords       76.9%
db-test/db_operations.go:128:   readAllRecords          78.6%
db-test/db_operations.go:163:   readRecordsWithName     78.6%
db-test/db_operations.go:198:   <strong>insertRecord            87.5%</strong>
db-test/db_operations.go:219:   deleteByName            0.0%
db-test/db_operations.go:239:   main                    0.0%
total:                          (statements)            34.8%
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Jednotkový test pro funkci provádějící vymazání záznamu z&nbsp;tabulky</h2>

<p></p>

<pre>
<i>// Vymazání záznamu nebo záznamů na základě zapsaného jména</i>
func <strong>deleteByName</strong>(connection *sql.DB, name string) (int, error) {
        <i>// provedení SQL příkazu s jedním parametrem</i>
        sqlStatement := "DELETE FROM persons WHERE name = $1;"
        result, err := connection.Exec(sqlStatement, name)
&nbsp;
        <i>// test, zda byl SQL příkaz proveden bez chyby</i>
        if err != nil {
                return 0, err
        }
&nbsp;
        <i>// přečíst počet řádků v tabulce, které byly SQL příkazem upraveny</i>
        affected, err := result.RowsAffected()
&nbsp;
        <i>// i tato operace může teoreticky skončit s chybou nebo nemusí být podporována</i>
        if err != nil {
                return 0, err
        }
        return int(affected), nil
}
</pre>

<pre>
package main
&nbsp;
var (
        DisplayAllRecords   = displayAllRecords
        ReadAllRecords      = readAllRecords
        ReadRecordsWithName = readRecordsWithName
        InsertRecord        = insertRecord
        DeleteByName        = deleteByName
)
</pre>

<pre>
func TestDeletion1(t *testing.T) {
        connection, mock, err := sqlmock.New()
        if err != nil {
                t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
        }
        defer connection.Close()

        mock.ExpectExec("DELETE FROM persons WHERE name = \\$1;").WithArgs("foo").WillReturnResult(sqlmock.NewResult(1, 1))

        updated, err := main.DeleteByName(connection, "foo")
        if err != nil {
                t.Errorf("error was not expected while updating stats: %s", err)
        }

        if updated != 1 {
                t.Errorf("one row should be updated, but %d rows were updated", updated)
        }

        err = mock.ExpectationsWereMet()
        if err != nil {
                t.Errorf("there were unfulfilled expectations: %s", err)
        }
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Výsledek běhu testů, včetně zjištění pokrytí kódu testy</h2>

<pre>
$ <strong>go test -v -coverprofile coverage.out</strong>
&nbsp;
=== RUN   TestSelect1
--- PASS: TestSelect1 (0.00s)
=== RUN   TestSelect2
{"level":"info","ID":1,"name":"foo","surname":"bar","time":"2021-03-23T17:56:23+01:00","message":"Record"}
{"level":"info","ID":2,"name":"x","surname":"y","time":"2021-03-23T17:56:23+01:00","message":"Record"}
{"level":"info","ID":3,"name":"a","surname":"b","time":"2021-03-23T17:56:23+01:00","message":"Record"}
--- PASS: TestSelect2 (0.00s)
=== RUN   TestSelect3
--- PASS: TestSelect3 (0.00s)
=== RUN   TestSelect4
--- PASS: TestSelect4 (0.00s)
=== RUN   TestSelect5
--- PASS: TestSelect5 (0.00s)
=== RUN   TestInsertion1
--- FAIL: TestInsertion1 (0.00s)
    db_operations_test.go:170: error was not expected while updating stats: ExecQuery: could not match actual sql: "INSERT INTO persons (name, surname) VALUES($1, $2);" with expected regexp "INSERT INTO persons (name, surname) VALUES($1, $2);"
    db_operations_test.go:174: one row should be updated, but 0 rows were updated
    db_operations_test.go:179: there were unfulfilled expectations: there is a remaining expectation which was not matched: ExpectedExec => expecting Exec or ExecContext which:
          - matches sql: 'INSERT INTO persons (name, surname) VALUES($1, $2);'
          - is with arguments:
            0 - foo
            1 - bar
          - should return Result having:
              LastInsertId: 1
              RowsAffected: 1
=== RUN   TestInsertion2
--- PASS: TestInsertion2 (0.00s)
=== RUN   TestDeletion1
--- PASS: TestDeletion1 (0.00s)
FAIL
coverage: 37.2% of statements
exit status 1
FAIL    db-test 0.004s
</pre>

<pre>
$ <strong>go tool cover -func=coverage.out </strong>
&nbsp;
db-test/db_operations.go:37:    initDatabaseConnection  0.0%
db-test/db_operations.go:80:    displayAllRecords       76.9%
db-test/db_operations.go:128:   readAllRecords          78.6%
db-test/db_operations.go:163:   readRecordsWithName     78.6%
db-test/db_operations.go:198:   insertRecord            87.5%
db-test/db_operations.go:219:   deleteByName            75.0%
db-test/db_operations.go:309:   main                    0.0%
total:                          (statements)            37.2%
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Simulace chyby na straně SQL databáze</h2>

<pre>
func TestInsertionOnError(t *testing.T) {
        mockedError := errors.New("mocked error")

        connection, mock, err := sqlmock.New()
        if err != nil {
                t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
        }
        defer connection.Close()

        mock.ExpectExec("INSERT INTO persons \\(name, surname\\) VALUES\\(\\$1, \\$2\\);").WithArgs("foo", "bar").WillReturnError(mockedError)

        _, err = main.InsertRecord(connection, "foo", "bar")
        if err == nil {
                t.Fatalf("error was expected while updating stats")
        }

        if err != mockedError {
                t.Errorf("different error was returned: %v", err)
        }

        err = mock.ExpectationsWereMet()
        if err != nil {
                t.Errorf("there were unfulfilled expectations: %s", err)
        }
}
</pre>

<pre>
func TestDeletionOnError(t *testing.T) {
        mockedError := errors.New("mocked error")

        connection, mock, err := sqlmock.New()
        if err != nil {
                t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
        }
        defer connection.Close()

        mock.ExpectExec("DELETE FROM persons WHERE name = \\$1;").WithArgs("foo").WillReturnError(mockedError)

        _, err = main.DeleteByName(connection, "foo")
        if err == nil {
                t.Fatalf("error was expected while updating stats")
        }

        if err != mockedError {
                t.Errorf("different error was returned: %v", err)
        }

        err = mock.ExpectationsWereMet()
        if err != nil {
                t.Errorf("there were unfulfilled expectations: %s", err)
        }
}
</pre>

<pre>
func TestSelectOnError1(t *testing.T) {
        mockedError := errors.New("mocked error")

        connection, mock, err := sqlmock.New()
        if err != nil {
                t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
        }
        defer connection.Close()

        mock.ExpectQuery("SELECT id, name, surname FROM persons").WillReturnError(mockedError)

        err = main.DisplayAllRecords(connection)

        if err == nil {
                t.Fatalf("error was expected while updating stats")
        }

        if err != mockedError {
                t.Errorf("different error was returned: %v", err)
        }

        err = mock.ExpectationsWereMet()
        if err != nil {
                t.Errorf("there were unfulfilled expectations: %s", err)
        }
}

func TestSelectOnError2(t *testing.T) {
        mockedError := errors.New("mocked error")

        connection, mock, err := sqlmock.New()
        if err != nil {
                t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
        }
        defer connection.Close()

        mock.ExpectQuery("SELECT id, name, surname FROM persons").WillReturnError(mockedError)

        results, err := main.ReadAllRecords(connection)

        if err == nil {
                t.Fatalf("error was expected while updating stats")
        }

        if err != mockedError {
                t.Errorf("different error was returned: %v", err)
        }

        err = mock.ExpectationsWereMet()
        if err != nil {
                t.Errorf("there were unfulfilled expectations: %s", err)
        }

        if len(results) != 0 {
                t.Errorf("different number of results read from database: %d instead of 0", len(results))
                return
        }
}

func TestSelectOnError3(t *testing.T) {
        mockedError := errors.New("mocked error")

        connection, mock, err := sqlmock.New()
        if err != nil {
                t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
        }
        defer connection.Close()

        mock.ExpectQuery("SELECT id, name, surname FROM persons WHERE name=.*").WillReturnError(mockedError)

        results, err := main.ReadRecordsWithName(connection, "Eda")

        if err == nil {
                t.Fatalf("error was expected while updating stats")
        }

        if err != mockedError {
                t.Errorf("different error was returned: %v", err)
        }

        err = mock.ExpectationsWereMet()
        if err != nil {
                t.Errorf("there were unfulfilled expectations: %s", err)
        }

        if len(results) != 0 {
                t.Errorf("different number of results read from database: %d instead of 0", len(results))
                return
        }
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Výsledek běhu testů, včetně zjištění pokrytí kódu testy</h2>

<pre>
              LastInsertId: 1
              RowsAffected: 1
=== RUN   TestInsertion2
--- PASS: TestInsertion2 (0.00s)
=== RUN   TestInsertionOnError
--- PASS: TestInsertionOnError (0.00s)
=== RUN   TestDeletion1
--- PASS: TestDeletion1 (0.00s)
=== RUN   TestDeletionOnError
--- PASS: TestDeletionOnError (0.00s)
FAIL
coverage: 43.8% of statements
exit status 1
FAIL    db-test 0.004s
</pre>

<pre>
db-test/db_operations.go:37:    initDatabaseConnection  0.0%
db-test/db_operations.go:80:    displayAllRecords       76.9%
db-test/db_operations.go:128:   readAllRecords          78.6%
db-test/db_operations.go:163:   readRecordsWithName     78.6%
db-test/db_operations.go:198:   insertRecord            87.5%
db-test/db_operations.go:219:   deleteByName            75.0%
db-test/db_operations.go:239:   main                    0.0%
total:                          (statements)            40.2%
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>

<pre>
</pre>

<pre>
=== RUN   TestSelect1
--- PASS: TestSelect1 (0.00s)
=== RUN   TestSelect2
{"level":"info","ID":1,"name":"foo","surname":"bar","time":"2021-03-20T18:58:25+01:00","message":"Record"}
{"level":"info","ID":2,"name":"x","surname":"y","time":"2021-03-20T18:58:25+01:00","message":"Record"}
{"level":"info","ID":3,"name":"a","surname":"b","time":"2021-03-20T18:58:25+01:00","message":"Record"}
--- PASS: TestSelect2 (0.00s)
=== RUN   TestSelect3
--- PASS: TestSelect3 (0.00s)
=== RUN   TestSelect4
--- PASS: TestSelect4 (0.00s)
=== RUN   TestSelect5
--- PASS: TestSelect5 (0.00s)
=== RUN   TestSelectOnError1
--- PASS: TestSelectOnError1 (0.00s)
=== RUN   TestSelectOnError2
--- PASS: TestSelectOnError2 (0.00s)
=== RUN   TestSelectOnError3
--- PASS: TestSelectOnError3 (0.00s)
=== RUN   TestSelectScanError1
{"level":"info","ID":1,"name":"foo","surname":"bar","time":"2021-03-20T18:58:25+01:00","message":"Record"}
--- PASS: TestSelectScanError1 (0.00s)
=== RUN   TestSelectScanError2
--- PASS: TestSelectScanError2 (0.00s)
=== RUN   TestSelectScanError3
--- PASS: TestSelectScanError3 (0.00s)
=== RUN   TestInsertion1
--- FAIL: TestInsertion1 (0.00s)
    db_operations_test.go:352: error was not expected while updating stats: ExecQuery: could not match actual sql: "INSERT INTO persons (name, surname) VALUES($1, $2);" with expected regexp "INSERT INTO persons (name, surname) VALUES($1, $2);"
    db_operations_test.go:356: one row should be updated, but 0 rows were updated
    db_operations_test.go:361: there were unfulfilled expectations: there is a remaining expectation which was not matched: ExpectedExec => expecting Exec or ExecContext which:
          - matches sql: 'INSERT INTO persons (name, surname) VALUES($1, $2);'
          - is with arguments:
            0 - foo
            1 - bar
          - should return Result having:
              LastInsertId: 1
              RowsAffected: 1
=== RUN   TestInsertion2
--- PASS: TestInsertion2 (0.00s)
=== RUN   TestInsertionOnError
--- PASS: TestInsertionOnError (0.00s)
=== RUN   TestDeletion1
--- PASS: TestDeletion1 (0.00s)
=== RUN   TestDeletionOnError
--- PASS: TestDeletionOnError (0.00s)
FAIL
coverage: 46.4% of statements
exit status 1
FAIL    db-test 0.004s
</pre>

<pre>
db-test/db_operations.go:37:    initDatabaseConnection  0.0%
db-test/db_operations.go:80:    displayAllRecords       84.6%
db-test/db_operations.go:128:   readAllRecords          85.7%
db-test/db_operations.go:163:   readRecordsWithName     85.7%
db-test/db_operations.go:198:   insertRecord            87.5%
db-test/db_operations.go:219:   deleteByName            87.5%
db-test/db_operations.go:239:   main                    0.0%
total:                          (statements)            43.8%
</pre>

<pre>
func TestSelectScanError1(t *testing.T) {
        connection, mock, err := sqlmock.New()
        if err != nil {
                t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
        }
        defer connection.Close()

        rows := sqlmock.NewRows([]string{"id", "name", "surname"})
        rows.AddRow(1, "foo", "bar")
        rows.AddRow("this is not integer", "x", "y")
        rows.AddRow(3, "a", "b")

        mock.ExpectQuery("SELECT id, name, surname FROM persons").WillReturnRows(rows)

        err = main.DisplayAllRecords(connection)

        if err == nil {
                t.Fatalf("error was expected while updating stats")
        }

        err = mock.ExpectationsWereMet()
        if err != nil {
                t.Errorf("there were unfulfilled expectations: %s", err)
        }
}

func TestSelectScanError2(t *testing.T) {
        connection, mock, err := sqlmock.New()
        if err != nil {
                t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
        }
        defer connection.Close()

        rows := sqlmock.NewRows([]string{"id", "name", "surname"})
        rows.AddRow(1, "foo", "bar")
        rows.AddRow("this is not integer", "x", "y")
        rows.AddRow(3, "a", "b")

        mock.ExpectQuery("SELECT id, name, surname FROM persons").WillReturnRows(rows)

        results, err := main.ReadAllRecords(connection)

        if err == nil {
                t.Fatalf("error was expected while updating stats")
        }

        err = mock.ExpectationsWereMet()
        if err != nil {
                t.Errorf("there were unfulfilled expectations: %s", err)
        }

        // první řádek by měl být přečten
        if len(results) != 1 {
                t.Errorf("different number of results read from database: %d instead of 1", len(results))
                return
        }
}

func TestSelectScanError3(t *testing.T) {
        connection, mock, err := sqlmock.New()
        if err != nil {
                t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
        }
        defer connection.Close()

        rows := sqlmock.NewRows([]string{"id", "name", "surname"})
        rows.AddRow(1, "foo", "bar")
        rows.AddRow("this is not integer", "x", "y")
        rows.AddRow(3, "a", "b")

        mock.ExpectQuery("SELECT id, name, surname FROM persons").WillReturnRows(rows)

        results, err := main.ReadRecordsWithName(connection, "foo")

        if err == nil {
                t.Fatalf("error was expected while updating stats")
        }

        err = mock.ExpectationsWereMet()
        if err != nil {
                t.Errorf("there were unfulfilled expectations: %s", err)
        }

        // první řádek by měl být přečten
        if len(results) != 1 {
                t.Errorf("different number of results read from database: %d instead of 1", len(results))
                return
        }
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>

<pre>
func TestSelectCloseError1(t *testing.T) {
        connection, mock, err := sqlmock.New()
        if err != nil {
                t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
        }
        defer connection.Close()

        rows := sqlmock.NewRows([]string{"id", "name", "surname"})
        rows.AddRow(1, "foo", "bar")
        rows.CloseError(errors.New("close error"))
        rows.AddRow("this is not integer", "x", "y")
        rows.AddRow(3, "a", "b")

        mock.ExpectQuery("SELECT id, name, surname FROM persons").WillReturnRows(rows)

        err = main.DisplayAllRecords(connection)

        if err == nil {
                t.Fatalf("error was expected while updating stats")
        }

        err = mock.ExpectationsWereMet()
        if err != nil {
                t.Errorf("there were unfulfilled expectations: %s", err)
        }
}

func TestSelectCloseError2(t *testing.T) {
        connection, mock, err := sqlmock.New()
        if err != nil {
                t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
        }
        defer connection.Close()

        rows := sqlmock.NewRows([]string{"id", "name", "surname"})
        rows.AddRow(1, "foo", "bar")
        rows.CloseError(errors.New("close error"))
        rows.AddRow("this is not integer", "x", "y")
        rows.AddRow(3, "a", "b")

        mock.ExpectQuery("SELECT id, name, surname FROM persons").WillReturnRows(rows)

        _, err = main.ReadAllRecords(connection)

        if err == nil {
                t.Fatalf("error was expected while updating stats")
        }

        err = mock.ExpectationsWereMet()
        if err != nil {
                t.Errorf("there were unfulfilled expectations: %s", err)
        }
}

func TestSelectCloseError3(t *testing.T) {
        connection, mock, err := sqlmock.New()
        if err != nil {
                t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
        }
        defer connection.Close()

        rows := sqlmock.NewRows([]string{"id", "name", "surname"})
        rows.AddRow(1, "foo", "bar")
        rows.CloseError(errors.New("close error"))
        rows.AddRow("this is not integer", "x", "y")
        rows.AddRow(3, "a", "b")

        mock.ExpectQuery("SELECT id, name, surname FROM persons .*").WillReturnRows(rows)

        _, err = main.ReadRecordsWithName(connection, "foobar")

        if err == nil {
                t.Fatalf("error was expected while updating stats")
        }

        err = mock.ExpectationsWereMet()
        if err != nil {
                t.Errorf("there were unfulfilled expectations: %s", err)
        }
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>

<pre>
db-test/db_operations.go:37:    initDatabaseConnection  0.0%
db-test/db_operations.go:80:    displayAllRecords       92.3%
db-test/db_operations.go:128:   readAllRecords          92.9%
db-test/db_operations.go:163:   readRecordsWithName     92.9%
db-test/db_operations.go:198:   insertRecord            87.5%
db-test/db_operations.go:219:   deleteByName            87.5%
db-test/db_operations.go:239:   main                    0.0%
total:                          (statements)            46.4%
</pre>

<pre>
db-test/db_operations.go:37:    initDatabaseConnection  0.0%
db-test/db_operations.go:80:    displayAllRecords       100.0%
db-test/db_operations.go:128:   readAllRecords          100.0%
db-test/db_operations.go:163:   readRecordsWithName     100.0%
db-test/db_operations.go:198:   insertRecord            87.5%
db-test/db_operations.go:219:   deleteByName            87.5%
db-test/db_operations.go:239:   main                    0.0%
total:                          (statements)            49.1%
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_73/">https://github.com/tisnik/go-root/blob/master/article_73/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_73/">https://github.com/tisnik/go-root/blob/master/article_73/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_73/">https://github.com/tisnik/go-root/blob/master/article_73/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_73/">https://github.com/tisnik/go-root/blob/master/article_73/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_73/">https://github.com/tisnik/go-root/blob/master/article_73/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_73/">https://github.com/tisnik/go-root/blob/master/article_73/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_73/">https://github.com/tisnik/go-root/blob/master/article_73/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>ORM je antipattern<br />
<a href="https://zdrojak.cz/clanky/orm-je-antipattern/">https://zdrojak.cz/clanky/orm-je-antipattern/</a>
</li>

<li>DATA-DOG / go-sqlmock repository<br />
<a href="https://github.com/DATA-DOG/go-sqlmock">https://github.com/DATA-DOG/go-sqlmock</a>
</li>

<li>Sql driver mock for Golang<br />
<a href="https://pkg.go.dev/github.com/DATA-DOG/go-sqlmock?utm_source=godoc">https://pkg.go.dev/github.com/DATA-DOG/go-sqlmock?utm_source=godoc</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Package sql<br />
<a href="https://golang.org/pkg/database/sql/">https://golang.org/pkg/database/sql/</a>
</li>

<li>Go database/sql tutorial<br />
<a href="http://go-database-sql.org/">http://go-database-sql.org/</a>
</li>

<li>SQLDrivers<br />
<a href="https://github.com/golang/go/wiki/SQLDrivers">https://github.com/golang/go/wiki/SQLDrivers</a>
</li>

<li>Package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>PostgreSQL CREATE DATABASE<br />
<a href="https://www.postgresqltutorial.com/postgresql-create-database/">https://www.postgresqltutorial.com/postgresql-create-database/</a>
</li>

<li>PostgreSQL CREATE SCHEMA<br />
<a href="https://www.postgresqltutorial.com/postgresql-create-schema/">https://www.postgresqltutorial.com/postgresql-create-schema/</a>
</li>

<li>PostgreSQL CREATE TABLE<br />
<a href="https://www.postgresqltutorial.com/postgresql-create-table/">https://www.postgresqltutorial.com/postgresql-create-table/</a>
</li>

<li>PostgreSQL SELECT<br />
<a href="https://www.postgresqltutorial.com/postgresql-select/">https://www.postgresqltutorial.com/postgresql-select/</a>
</li>

<li>PostgreSQL INSERT<br />
<a href="https://www.postgresqltutorial.com/postgresql-insert/">https://www.postgresqltutorial.com/postgresql-insert/</a>
</li>

<li>PostgreSQL DELETE<br />
<a href="https://www.postgresqltutorial.com/postgresql-delete/">https://www.postgresqltutorial.com/postgresql-delete/</a>
</li>

<li>Data definition language<br />
<a href="https://en.wikipedia.org/wiki/Data_definition_language">https://en.wikipedia.org/wiki/Data_definition_language</a>
</li>

<li>Data query language<br />
<a href="https://en.wikipedia.org/wiki/Data_query_language">https://en.wikipedia.org/wiki/Data_query_language</a>
</li>

<li>Data manipulation language<br />
<a href="https://en.wikipedia.org/wiki/Data_manipulation_language">https://en.wikipedia.org/wiki/Data_manipulation_language</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

