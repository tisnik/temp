<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba webových aplikací v Go s využitím projektu Gorilla web toolkit</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba webových aplikací v Go s využitím projektu Gorilla web toolkit</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Programovací jazyk Go se velmi často používá pro tvorbu webových aplikací popř.&nbsp;služeb a mikroslužeb s&nbsp;REST API. Pro tvorbu těchto typů aplikací je určen především balíček net/http, který je ovšem možné rozšířit dalšími balíčky, mezi které patří především Gorilla toolkit.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba webových aplikací v&nbsp;Go s&nbsp;využitím projektu Gorilla web toolkit</a></p>
<p><a href="#k02">2. Gorilla web toolkit není webový framework</a></p>
<p><a href="#k03">3. Instalace balíčku <strong>gorilla/mux</strong></a></p>
<p><a href="#k04">4. Jednoduchý HTTP server postavený nad standardním balíčkem <strong>net/http</strong></a></p>
<p><a href="#k05">5. Jak číst zprávy vypisované nástrojem <strong>curl</strong>?</a></p>
<p><a href="#k06">6. HTTP server používající balíček <strong>gorilla/mux</strong></a></p>
<p><a href="#k07">7. Specifikace HTTP metody pro jednotlivé handlery</a></p>
<p><a href="#k08">8. Nastavení nové hodnoty čítače pomocí HTTP metody <strong>PUT</strong></a></p>
<p><a href="#k09">9. Kostra vylepšené REST API služby &ndash; správa (databáze) osob</a></p>
<p><a href="#k10">10. Předávání dat s&nbsp;využitím formátu JSON</a></p>
<p><a href="#k11">11. Realizace jednotlivých částí služby</a></p>
<p><a href="#k12">12. Otestování všech nově implementovaných operací</a></p>
<p><a href="#k13">13. Omezení znaků, které se mohou nacházet v&nbsp;ID osob</a></p>
<p><a href="#k14">14. Specifikace hlaviček dotazů, které budou akceptovány</a></p>
<p><a href="#k15">15. Otestování nové varianty služby</a></p>
<p><a href="#k16">16. Služby s&nbsp;více přístupovými body a použití podsměrovačů (subrouter)</a></p>
<p><a href="#k17">17. Přidání mezivrstev do řetězce zpracování požadavku &ndash; middleware</a></p>
<p><a href="#k18">18. Poslední varianta jednoduché REST API služby</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba webových aplikací v&nbsp;Go s&nbsp;využitím projektu Gorilla web toolkit</h2>

<p>Již několikrát jsme se <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">v&nbsp;seriálu o
programovacím jazyce Go</a> setkali s&nbsp;tvrzením, že se tento jazyk poměrně
často používá pro tvorbu webových aplikací (resp.&nbsp;přesněji řečeno
především pro jejich backend) a taktéž pro vytváření služeb a mikroslužeb
s&nbsp;rozhraním REST API (popř.&nbsp;s&nbsp;dalšími rozhraními &ndash; STOMP
atd.). Již v&nbsp;základní sadě standardních knihoven nalezneme balíček
pojmenovaný <a href="https://golang.org/pkg/net/http/">net/http</a>, který sám
o sobě postačuje pro vytvoření plnohodnotného HTTP či HTTPS serveru. Ovšem
možnosti tohoto balíčku nemusí být ve všech případech dostatečné, zejména ve
chvíli, kdy je REST API realizované službou rozsáhlejší, popř.&nbsp;když se
v&nbsp;URI vyskytuje specifikace většího množství prostředků
(<i>resources</i>). A právě v&nbsp;těchto situacích je vhodné využít dalších
knihoven, které pro Go vznikly a které na <strong>net/http</strong> navazují.
Jednou z&nbsp;těchto knihoven je i <a
href="https://github.com/gorilla/mux">gorilla/mux</a>, která je součástí
většího celku nazvaného <a href="http://www.gorillatoolkit.org/pkg/mux">Gorilla
web toolkit</a>.</p>

<p>Některými možnostmi nabízenými výše zmíněnou knihovnou
<strong>gorilla/mux</strong> se budeme zabývat v&nbsp;dnešním článku,
v&nbsp;němž si ukážeme i několik demonstračních příkladů založených právě na
této knihovně. Bude se jednat o implementace jednoduchých (mikro)služeb.</p>

<p><div class="rs-tip-major">Poznámka: problematiku mikroslužeb jsme si ve
stručnosti představili <a
href="https://www.root.cz/serialy/mikrosluzby/">v&nbsp;samostatně vycházejícím
miniseriálu</a>:</div></p>

<ol>

<li>Mikroslužby: moderní aplikace využívající známých konceptů<br />
<a href="https://www.root.cz/clanky/mikrosluzby-moderni-aplikace-vyuzivajici-znamych-konceptu/">https://www.root.cz/clanky/mikrosluzby-moderni-aplikace-vyuzivajici-znamych-konceptu/</a>
</li>

<li>Způsoby uložení dat v aplikacích založených na mikroslužbách<br />
<a href="https://www.root.cz/clanky/zpusoby-ulozeni-dat-v-aplikacich-zalozenych-na-mikrosluzbach/">https://www.root.cz/clanky/zpusoby-ulozeni-dat-v-aplikacich-zalozenych-na-mikrosluzbach/</a>
</li>

<li>Posílání zpráv v aplikacích založených na mikroslužbách<br />
<a href="https://www.root.cz/clanky/posilani-zprav-v-aplikacich-zalozenych-na-mikrosluzbach/">https://www.root.cz/clanky/posilani-zprav-v-aplikacich-zalozenych-na-mikrosluzbach/</a>
</li>

<li>Použití nástroje Apache Kafka v aplikacích založených na mikroslužbách<br />
<a href="https://www.root.cz/clanky/pouziti-nastroje-apache-kafka-v-aplikacich-zalozenych-na-mikrosluzbach/">https://www.root.cz/clanky/pouziti-nastroje-apache-kafka-v-aplikacich-zalozenych-na-mikrosluzbach/</a>
</li>

<li>Nástroje a služby využívané při nasazování mikroslužeb<br />
<a href="https://www.root.cz/clanky/nastroje-a-sluzby-vyuzivane-pri-nasazovani-mikrosluzeb/">https://www.root.cz/clanky/nastroje-a-sluzby-vyuzivane-pri-nasazovani-mikrosluzeb/</a>
</li>

<li>Prechod hostingu na mikroslužby: cesta zlyhaní a úspechov<br />
<a href="https://www.root.cz/clanky/prechod-hostingu-na-mikrosluzby-cesta-zlyhani-a-uspechov/">https://www.root.cz/clanky/prechod-hostingu-na-mikrosluzby-cesta-zlyhani-a-uspechov/</a>
</li>

<li>Mikroslužby založené na REST API<br />
<a href="https://www.root.cz/clanky/mikrosluzby-zalozene-na-rest-api/">https://www.root.cz/clanky/mikrosluzby-zalozene-na-rest-api/</a>
</li>

</ol>



<p><a name="k02"></a></p>
<h2 id="k02">2. Gorilla web toolkit není webový framework</h2>

<p>Samotní tvůrci projektu Gorilla web toolkit říkají, že se nejedná o ucelený
webový framework, ale spíše o sadu užitečných knihoven, které lze použít
společně s&nbsp;dalšími standardními knihovnami (<strong>net/http</strong>,
<strong>text/template</strong>), ale i s&nbsp;knihovnami, jež je nutné nejdříve
nainstalovat. A skutečně &ndash; dnes využijeme jen jediný modul z&nbsp;celého
projektu Gorilla web toolkit &ndash; knihovnu <strong>gorilla/mux</strong>, a
to bez toho abychom se museli vzdát možností nabízených ostatními knihovnami.
Nic nám přitom nebrání, aby zbytek aplikace používal nějaký šablonovací
nástroj, jiný nástroj pro logování, řešení pro MVC atd. atd.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace balíčku <strong>gorilla/mux</strong></h2>

<p>Tato kapitola bude velmi stručná, protože samotná instalace balíčku
<strong>gorilla/mux</strong> je stejně snadná a bezproblémová jako instalace
jakéhokoli jiného balíčku určeného pro programovací jazyk Go. V&nbsp;případě,
že se nepoužije <a
href="https://www.root.cz/clanky/system-modulu-v-programovacim-jazyce-go/">systém
modulů</a>, provede se instalace následujícím příkazem:</p>

<pre>
$ <strong>go get github.com/gorilla/mux</strong>
</pre>

<p>Pokud používáte systém modulů (Go 1.11, 1.12 nebo 1.13), je nutné nejdříve
moduly pro danou aplikaci správně inicializovat:</p>

<pre>
$ <strong>go mod init jméno_aplikace_či_balíčku</strong>
</pre>

<p>Následně do libovolného zdrojového kódu aplikace přidejte import modulu a
použijte některou jeho funkci, například funkci pro vytvoření nového
směrovače:</p>

<pre>
import "github.com/gorilla/mux"
&nbsp;
mux.NewRouter()
</pre>

<p>Při prvním překladu aplikace se příslušný modul automaticky stáhne a
inicializuje v&nbsp;adresářové struktuře používané moduly:</p>

<pre>
$ <strong>go build jméno_aplikace_či_balíčku</strong>
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Jednoduchý HTTP server postavený nad standardním balíčkem <strong>net/http</strong></h2>

<p>Nejprve si ukažme (resp.&nbsp;přesněji řečeno připomeňme), jakým způsobem se
vytváří webové servery či služby založené na REST API s&nbsp;využitím
standardního balíčku <strong>net/http</strong>. Implementovaný HTTP server,
jehož úplný zdrojový kód naleznete na adrese <a
href="https://github.com/tisnik/go-root/blob/master/article_38/01_simple_http_server.go">https://github.com/tisnik/go-root/blob/master/article_38/01_simple_http_server.go</a>,
bude obsluhovat pouze dva koncové body &bdquo;/&ldquo; a
&bdquo;/counter&ldquo;. V&nbsp;prvním případě se vrátí konstantní odpověď
&bdquo;Hello world!&ldquo; následovaná koncem řádku, ve druhém případě se pak
vrátí hodnota čítače, který je s&nbsp;každým novým požadavkem zvýšen o
jedničku. Samotný čítač je zvýšen uvnitř mutexu:</p>

<pre>
package <strong></strong><strong>main</strong>
&nbsp;
import (
        "fmt"
        "io"
        "log"
        "net/http"
        "os"
        "sync"
)
&nbsp;
const ADDRESS = ":8080"
&nbsp;
var counter int
var mutex = &amp;sync.Mutex{}
&nbsp;
func <strong>mainEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!\n")
}
&nbsp;
func <strong>counterEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        mutex.Lock()
        counter++
        fmt.Fprintf(writer, "Counter: %d\n", counter)
        mutex.Unlock()
}
&nbsp;
func <strong>main</strong>() {
        http.HandleFunc("/", mainEndpoint)
        http.HandleFunc("/counter", counterEndpoint)
&nbsp;
        log.Println("Starting HTTP server at address", ADDRESS)
        err := http.ListenAndServe(ADDRESS, nil)
        if err != nil {
                log.Fatal("Unable to initialize HTTP server", err)
                os.Exit(2)
        }
}
</pre>

<p><div class="rs-tip-major">Poznámka: mutex můžete otevřít i v&nbsp;bloku
<strong>defer</strong>, což je pro programy psané v&nbsp;Go idiomatičtější
řešení:</div></p>

<pre>
func <strong>counterEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        mutex.Lock()
        defer mutex.Unlock()
        counter++
        fmt.Fprintf(writer, "Counter: %d\n", counter)
}
</pre>

<p>Povšimněte si, jakým způsobem byly koncové body navázány na příslušné
<i>handlery</i>, tj.&nbsp;obslužné funkce:</p>

<pre>
http.HandleFunc("/", mainEndpoint)
http.HandleFunc("/counter", counterEndpoint)
</pre>

<p>Právě deklarace handlerů a jejich navázání na koncové body je v&nbsp;případě
použití balíčku <strong>gorilla/mux</strong> vyřešena odlišným způsobem, jak si
to ostatně ukážeme v&nbsp;navazujících kapitolách.</p>

<p>Otestování činnosti této aplikace je jednoduché a postačí nám k&nbsp;tomu
univerzální nástroj <strong>curl</strong>. Nejprve vyzkoušíme, zda server
dokáže odpovědět na jednoduchý požadavek <strong>/</strong> (metoda
<strong>GET</strong>):</p>

<pre>
$ <strong>curl localhost:8080</strong>
Hello world!
</pre>

<p>A následně otestujeme i to, zda a jak korektně se mění hodnota čítače:</p>

<pre>
$ <strong>curl localhost:8080/counter</strong>
Counter: 1
&nbsp;
$ <strong>curl localhost:8080/counter</strong>
Counter: 2
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Jak číst zprávy vypisované nástrojem <strong>curl</strong>?</h2>

<p>V&nbsp;případě, že nástroj <strong>curl</strong> spustíme bez přepínače
<strong>-v</strong>, bude vypisovat pouze samotná těla odpovědí serveru
popř.&nbsp;základní chybová hlášení. Většinou ovšem potřebujeme znát
podrobnější informace, a to jak o poslaném požadavku (<i>request</i>), tak i
případné odpovědi serveru (<i>response</i>). Z&nbsp;tohoto důvodu se používá
již výše zmíněný přepínač <strong>-v</strong>, který zajistí, že nástroj
<strong>curl</strong> začne vypisovat tři typy zpráv, které velmi snadno
rozeznáme podle prvního znaku na každém řádku:</p>

<ul>

<li>Dotaz posílaný od klienta k&nbsp;serveru začíná znakem &bdquo;&gt;&ldquo;</li>

<li>Odpověď serveru je zobrazena na řádcích, které začínají znakem
&bdquo;&lt;&ldquo;</li>

<li>Ostatní informace o činnosti samotného nástroje <strong>curl</strong>
začínají znakem &bdquo;*&ldquo;</li>

<li>Tělo odpovědi serveru je zobrazeno v&nbsp;nezměněné podobě, tj.&nbsp;není
před ním zobrazen žádný další znak</li>

</ul>

<p>Jednotlivé typy zpráv jsou patrné i z&nbsp;následujícího pokusu o přístup na
adresu <strong>localhost:8080/</strong>:</p>

<pre>
$ <strong>curl -v localhost:8080</strong>
&nbsp;
* Rebuilt URL to: localhost:8080/
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; GET / HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Date: Sat, 12 Oct 2019 19:44:14 GMT
&lt; Content-Length: 13
&lt; Content-Type: text/plain; charset=utf-8
&lt; 
Hello world!
* Connection #0 to host localhost left intact
</pre>

<p>Podobné informace získáme i při požadavku na vrácení hodnoty čítače:</p>

<pre>
$ <strong>curl -v localhost:8080/counter</strong>
&nbsp;
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; GET /counter HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Date: Sat, 12 Oct 2019 19:44:17 GMT
&lt; Content-Length: 11
&lt; Content-Type: text/plain; charset=utf-8
&lt; 
Counter: 1
* Connection #0 to host localhost left intact
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. HTTP server používající balíček <strong>gorilla/mux</strong></h2>

<p>Nyní se podívejme na způsob realizace jednoduchého HTTP serveru, který bude
používat balíček <strong>gorilla/mux</strong>. Základní služby poskytované
serverem budou stejné, jako v&nbsp;předchozím demonstračním příkladu, což
konkrétně znamená, že vrácen bude buď konstantní řetězec, nebo aktuální hodnota
čítače. Jediné změny nastanou náhradou následujících dvou řádků
s&nbsp;registrací handlerů:</p>

<pre>
http.HandleFunc("/", mainEndpoint)
http.HandleFunc("/counter", counterEndpoint)
</pre>

<p>V&nbsp;upraveném zdrojovém kódu demonstračního příkladu použijeme takzvaný
<i>směrovač</i> neboli <i>router</i> poskytovaný knihovnou
<strong>gorilla/mux</strong>. Jeho konstrukce může vypadat takto:</p>

<pre>
router := mux.NewRouter()
</pre>

<p>Popř.&nbsp;můžeme explicitně specifikovat, zda se budou URI typu
<strong>/cesta</strong> a <strong>/cesta/</strong> považovat za shodné či
nikoli:</p>

<pre>
router := mux.NewRouter().StrictSlash(true)
</pre>

<p>Dále zaregistrujeme oba handlery, ovšem nyní použijeme metodu
<strong>router.HandleFunc</strong> a nikoli funkci
<strong>http.HandleFunc</strong> (z&nbsp;balíčku
<strong>net/http</strong>):</p>

<pre>
router.HandleFunc("/", mainEndpoint)
router.HandleFunc("/counter", counterEndpoint)
</pre>

<p>Nakonec je pochopitelně nutné HTTP server spustit. Povšimněte si, že se nyní
využije druhý parametr funkce <strong>http.ListenAndServe</strong> &ndash; již
se zde nepředává hodnota <strong>nil</strong>, ale instance právě
nakonfigurovaného směrovače:</p>

<pre>
err := http.ListenAndServe(ADDRESS, router)
</pre>

<p>Úplný zdrojový kód upraveného příkladu, který naleznete na adrese <a
href="https://github.com/tisnik/go-root/blob/master/article_38/02_http_server_with_mux.go">https://github.com/tisnik/go-root/blob/master/article_38/02_http_server_with_mux.go</a>,
vypadá následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "github.com/gorilla/mux"
        "io"
        "log"
        "net/http"
        "os"
        "sync"
)
&nbsp;
const ADDRESS = ":8080"
&nbsp;
var counter int
var mutex = &amp;sync.Mutex{}
&nbsp;
func <strong>mainEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!\n")
}
&nbsp;
func <strong>counterEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        mutex.Lock()
        counter++
        fmt.Fprintf(writer, "Counter: %d\n", counter)
        mutex.Unlock()
}
&nbsp;
func <strong>main</strong>() {
        router := mux.NewRouter().StrictSlash(true)
&nbsp;
        router.HandleFunc("/", mainEndpoint)
        router.HandleFunc("/counter", counterEndpoint)
&nbsp;
        log.Println("Starting HTTP server at address", ADDRESS)
        err := http.ListenAndServe(ADDRESS, router)
        if err != nil {
                log.Fatal("Unable to initialize HTTP server", err)
                os.Exit(2)
        }
}
</pre>

<p>Funkcionalitu tohoto příkladu snadno otestujeme, a to opět s&nbsp;využitím
nástroje <strong>curl</strong>:</p>

<pre>
$ <strong>curl -v localhost:8080</strong>
&nbsp;
* Rebuilt URL to: localhost:8080/
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; GET / HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Date: Sun, 13 Oct 2019 16:25:33 GMT
&lt; Content-Length: 13
&lt; Content-Type: text/plain; charset=utf-8
&lt; 
Hello world!
* Connection #0 to host localhost left intact
</pre>

<p>Otestování funkce čítače:</p>

<pre>
$ <strong>curl -v localhost:8080/counter</strong>
&nbsp;
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; GET /counter HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Date: Sun, 13 Oct 2019 16:25:48 GMT
&lt; Content-Length: 11
&lt; Content-Type: text/plain; charset=utf-8
&lt; 
Counter: 1
* Connection #0 to host localhost left intact
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Specifikace HTTP metody pro jednotlivé handlery</h2>

<p>V&nbsp;případě, že u předchozího demonstračního příkladu použijeme jinou
HTTP metodu než GET (což je pro nástroj <strong>curl</strong> výchozí metoda,
pokud ovšem nebudeme na server posílat data), bude například čítač stále
přístupný. O tom se ostatně můžeme velmi snadno přesvědčit, pokud budeme
explicitně specifikovat metodu <strong>POST</strong>, <strong>PUT</strong> či
dokonce <strong>DELETE</strong>:</p>

<pre>
$ <strong>curl -v -X POST localhost:8080/counter</strong>
&nbsp;
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; POST /counter HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Date: Sun, 13 Oct 2019 16:31:50 GMT
&lt; Content-Length: 11
&lt; Content-Type: text/plain; charset=utf-8
&lt; 
Counter: 2
* Connection #0 to host localhost left intact
&nbsp;
$ <strong>curl -v -X DELETE localhost:8080/counter</strong>
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; DELETE /counter HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Date: Sun, 13 Oct 2019 16:31:56 GMT
&lt; Content-Length: 11
&lt; Content-Type: text/plain; charset=utf-8
&lt; 
Counter: 3
* Connection #0 to host localhost left intact
</pre>

<p>Takové chování ovšem většinou u služeb postavených nad REST API není
ideální, protože s&nbsp;prostředky, které jsou přes API obsluhovány, se provádí
různé operace typu CRUD. Samozřejmě je možné i při použití základního balíčku
<strong>net/http</strong> získat jméno použité metody, ovšem nejedná se o
ideální řešení. To nám nabízí až balíček <strong>gorilla/mux</strong>,
v&nbsp;němž můžeme omezit volání handleru pouze pro danou metodu. V&nbsp;našem
demonstračním příkladu prozatím pouze čteme hodnoty (prostředků) a neměníme je,
takže nám postačuje použít metodu GET omezit použití ostatních metod:</p>

<pre>
router := mux.NewRouter().StrictSlash(true)
&nbsp;
router.HandleFunc("/", mainEndpoint).Methods("GET")
router.HandleFunc("/counter", counterEndpoint).Methods("GET")
</pre>

<p>Upravený zdrojový kód demonstračního příkladu bude vypadat následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "github.com/gorilla/mux"
        "io"
        "log"
        "net/http"
        "os"
        "sync"
)
&nbsp;
const ADDRESS = ":8080"
&nbsp;
var counter int
var mutex = &amp;sync.Mutex{}
&nbsp;
func <strong>mainEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!\n")
}
&nbsp;
func <strong>counterEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        mutex.Lock()
        counter++
        fmt.Fprintf(writer, "Counter: %d\n", counter)
        mutex.Unlock()
}
&nbsp;
func <strong>main</strong>() {
        router := mux.NewRouter().StrictSlash(true)
&nbsp;
        router.HandleFunc("/", mainEndpoint).Methods("GET")
        router.HandleFunc("/counter", counterEndpoint).Methods("GET")
&nbsp;
        log.Println("Starting HTTP server at address", ADDRESS)
        err := http.ListenAndServe(ADDRESS, router)
        if err != nil {
                log.Fatal("Unable to initialize HTTP server", err)
                os.Exit(2)
        }
}
</pre>

<p>Můžeme si ihned otestovat, jak se bude nová služba chovat při použití
různých HTTP metod.</p>

<p>Výchozí metoda <strong>GET</strong>:</p>

<pre>
$ <strong>curl -v localhost:8080/</strong>
&nbsp;
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; GET / HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; 
&lt; <strong>HTTP/1.1 200 OK</strong>
&lt; Date: Sun, 13 Oct 2019 18:45:33 GMT
&lt; Content-Length: 13
&lt; Content-Type: text/plain; charset=utf-8
&lt; 
Hello world!
</pre>

<p>Metoda <strong>PUT</strong>:</p>

<pre>
$ <strong>curl -v -X PUT localhost:8080/</strong>
&nbsp;
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; PUT / HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; 
&lt; <strong>HTTP/1.1 405 Method Not Allowed</strong>
&lt; Date: Sun, 13 Oct 2019 18:45:37 GMT
&lt; Content-Length: 0
&lt; 
* Connection #0 to host localhost left intact
</pre>

<p>Metoda <strong>POST</strong>:</p>

<pre>
$ <strong>curl -v -X POST localhost:8080/</strong>
&nbsp;
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; POST / HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; 
&lt; <strong>HTTP/1.1 405 Method Not Allowed</strong>
&lt; Date: Sun, 13 Oct 2019 18:45:42 GMT
&lt; Content-Length: 0
&lt; 
* Connection #0 to host localhost left intact
</pre>

<p>Metoda <strong>DELETE</strong>:</p>

<pre>
$ <strong>curl -v -X DELETE localhost:8080/</strong>
&nbsp;
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; DELETE / HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; 
&lt; <strong>HTTP/1.1 405 Method Not Allowed</strong>
&lt; Date: Sun, 13 Oct 2019 18:45:45 GMT
&lt; Content-Length: 0
&lt; 
* Connection #0 to host localhost left intact
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se hodnota vrátila
pouze při použití metody <strong>GET</strong>. Snaha o použití jiných metod
vede k&nbsp;chybovému stavu <strong>HTTP/1.1 405 Method Not Allowed</strong>,
viz též <a
href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_errors">4xx
Client errors</a> (chyba na straně klienta &ndash; poslal špatný
požadavek).</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Nastavení nové hodnoty čítače pomocí HTTP metody <strong>PUT</strong></h2>

<p>Naši prozatím velmi primitivní REST API službu upravíme takovým způsobem, že
čítač bude moci být změněn posláním požadavku s&nbsp;HTTP metodou
<strong>PUT</strong>. Nová hodnota čítače by přitom měla být umístěna
v&nbsp;těle požadavku, odkud bude přečtena a zpracována. Samotný směrovač nyní
bude muset rozlišit mezi přístupem k&nbsp;čítači metodou <strong>GET</strong>
(čtení) a metodou <strong>PUT</strong> (zápis):</p>

<pre>
router.HandleFunc("/counter", getCounterEndpoint).Methods("GET")
router.HandleFunc("/counter", setCounterEndpoint).Methods("PUT")
</pre>

<p>Podívejme se na prozatím značně zjednodušené načtení nové hodnoty čítače
z&nbsp;těla požadavku. Pouze pokud tělo požadavku obsahuje řetězec s&nbsp;celým
číslem, bude čítač skutečně změněn:</p>

<pre>
body, err := ioutil.ReadAll(request.Body)
if err == nil {
        number, err := strconv.ParseInt(string(body), 10, 0)
        if err == nil {
                setCounter(int(number))
                fmt.Fprintf(writer, "New counter value: %d\n", counter)
        }
}
</pre>

<p>Úplný zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "github.com/gorilla/mux"
        "io"
        "io/ioutil"
        "log"
        "net/http"
        "os"
        "strconv"
        "sync"
)
&nbsp;
const ADDRESS = ":8080"
&nbsp;
var counter int
var mutex = &amp;sync.Mutex{}
&nbsp;
func <strong>mainEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!\n")
}
&nbsp;
func <strong>getCounterEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        mutex.Lock()
        counter++
        fmt.Fprintf(writer, "Counter: %d\n", counter)
        mutex.Unlock()
}
&nbsp;
func <strong>setCounter</strong>(new_value int) {
        mutex.Lock()
        counter = new_value
        mutex.Unlock()
}
&nbsp;
func <strong>setCounterEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        body, err := ioutil.ReadAll(request.Body)
        if err == nil {
                number, err := strconv.ParseInt(string(body), 10, 0)
                if err == nil {
                        setCounter(int(number))
                        fmt.Fprintf(writer, "New counter value: %d\n", counter)
                } else {
                        log.Printf("conversion failed for input string '%s'", string(body))
                }
        } else {
                log.Printf("request body is empty")
        }
}
&nbsp;
func <strong>main</strong>() {
        router := mux.NewRouter().StrictSlash(true)
&nbsp;
        router.HandleFunc("/", mainEndpoint).Methods("GET")
        router.HandleFunc("/counter", getCounterEndpoint).Methods("GET")
        router.HandleFunc("/counter", setCounterEndpoint).Methods("PUT")
&nbsp;
        log.Println("Starting HTTP server at address", ADDRESS)
        err := http.ListenAndServe(ADDRESS, router)
        if err != nil {
                log.Fatal("Unable to initialize HTTP server", err)
                os.Exit(2)
        }
}
</pre>

<p>Otestování nové funkcionality, opět s&nbsp;využitím nástroje
<strong>curl</strong>:</p>

<pre>
$ <strong>curl localhost:8080/counter</strong>
Counter: 1
&nbsp;
$ <strong>curl localhost:8080/counter</strong>
Counter: 2
&nbsp;
$ <strong>curl -X PUT localhost:8080/counter -d "100"</strong>
New counter value: 100
&nbsp;
$ <strong>curl localhost:8080/counter</strong>
Counter: 101
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Kostra vylepšené REST API služby &ndash; správa (databáze) osob</h2>

<p>V&nbsp;dalších kapitolách budeme postupně rozšiřovat a vylepšovat REST API
službu, která bude zajišťovat velmi jednoduchou správu osob. K&nbsp;dispozici
budou tyto operace:</p>

<table>
<tr><th>#</th><th>Operace</th><th>Volání</th><th>Metoda</th></tr>
<tr><td>1</td><td>výpis celé databáze</td><td>/person</td><td>GET</td></tr>
<tr><td>2</td><td>informace o zvolené osobě</td><td>/person/ID_OSOBY</td><td>GET</td></tr>
<tr><td>3</td><td>přidání nové osoby do databáze</td><td>/person/ID_OSOBY</td><td>POST</td></tr>
<tr><td>4</td><td>změna údajů v databázi</td><td>/person/ID_OSOBY</td><td>PUT</td></tr>
<tr><td>5</td><td>vymazání osoby</td><td>/person/ID_OSOBY</td><td>DELETE</td></tr>
</table>

<p>Při specifikaci handlerů využijeme toho, že (proměnné) jméno prostředku lze
uzavřít do složených závorek:</p>

<pre>
router.HandleFunc("/person", listAllPersonsEndpoint).Methods("GET")
router.HandleFunc("/person/{id}", getPersonEndpoint).Methods("GET")
router.HandleFunc("/person/{id}", createPersonEndpoint).Methods("POST")
router.HandleFunc("/person/{id}", updatePersonEndpoint).Methods("PUT")
router.HandleFunc("/person/{id}", deletePersonEndpoint).Methods("DELETE")
</pre>

<p>Kostra této služby, prozatím bez implementace jednotlivých operací
v&nbsp;handlerech, může vypadat následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/gorilla/mux"
        "io"
        "log"
        "net/http"
        "os"
)
&nbsp;
const ADDRESS = ":8080"
&nbsp;
func <strong>mainEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!\n")
}
&nbsp;
func <strong>listAllPersonsEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "LIST ALL PERSONS\n")
}
&nbsp;
func <strong>getPersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "GET PERSON\n")
}
&nbsp;
func <strong>createPersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "CREATE PERSON\n")
}
&nbsp;
func <strong>updatePersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "UPDATE PERSON\n")
}
&nbsp;
func <strong>deletePersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "DELETE PERSON\n")
}
&nbsp;
func <strong>main</strong>() {
        router := mux.NewRouter().StrictSlash(true)
&nbsp;
        router.HandleFunc("/", mainEndpoint).Methods("GET")
        router.HandleFunc("/person", listAllPersonsEndpoint).Methods("GET")
        router.HandleFunc("/person/{id}", getPersonEndpoint).Methods("GET")
        router.HandleFunc("/person/{id}", createPersonEndpoint).Methods("POST")
        router.HandleFunc("/person/{id}", updatePersonEndpoint).Methods("PUT")
        router.HandleFunc("/person/{id}", deletePersonEndpoint).Methods("DELETE")
&nbsp;
        log.Println("Starting HTTP server at address", ADDRESS)
        err := http.ListenAndServe(ADDRESS, router)
        if err != nil {
                log.Fatal("Unable to initialize HTTP server", err)
                os.Exit(2)
        }
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Předávání dat s&nbsp;využitím formátu JSON</h2>

<p>U mnoha služeb postavených na REST API se data předávají ve formátu JSON.
Práci s&nbsp;tímto formátem jsme si již ukázali v&nbsp;předchozích částech
tohoto seriálu, takže můžeme relativně snadno naši službu rozšířit takovým
způsobem, aby dokázala data o osobách jak posílat, tak i načítat, a to právě ve
formátu JSON. Nejdříve je nutné specifikovat, jak se jednotlivé atributy osob
převedou na klíče ve formátu JSON. V&nbsp;Go musíme používat velká písmena u
všech exportovaných/importovaných atributů, zatímco v&nbsp;JSONu se typicky
používají písmena malá. Vyřešení převodu je v&nbsp;tomto případě snadné:</p>

<pre>
type Person struct {
        Firstname string <strong>`json:"firstname"`</strong>
        Surname   string <strong>`json:"lastname"`</strong>
}
</pre>

<p>Posílání dat v&nbsp;těch handlerech, které vrací seznam osob či informace o
vybrané osobě, zajistí tento úryvek kódu:</p>

<pre>
json.NewEncoder(writer).Encode(persons)
</pre>

<p>Pro jednu osobu pak:</p>

<pre>
person, found := persons[id]
json.NewEncoder(writer).Encode(person)
</pre>

<p>Poněkud komplikovanější je získání dat poslaných klientem serveru. Zde je
nutné použít JSON dekodér, kterému se předá celé tělo požadavku a následně
otestovat, zda se načtení a parsing JSONu podařil či nikoli.
V&nbsp;nejjednodušší variantě lze tuto operaci provést následujícím
způsobem:</p>

<pre>
var person Person
err := json.NewDecoder(request.Body).Decode(&amp;person)
if err == nil {
        log.Println("JSON decoded")
        persons[id] = person
} else {
        log.Println(err)
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Realizace jednotlivých částí služby</h2>

<p>V&nbsp;demonstrační aplikaci použijeme velmi jednoduchou formu
&bdquo;databáze&ldquo;, která bude pro jednoduchost tvořena mapou s&nbsp;klíči
typu řetězec (ID osoby) a hodnotami typu Person:</p>

<pre>
type Person struct {
        Firstname string `json:"firstname"`
        Surname   string `json:"lastname"`
}
</pre>

<p>Při inicializaci služby mapu naplníme dvěma záznamy:</p>

<pre>
func <strong>init</strong>() {
        persons = make(map[string]Person)
        persons["LT"] = Person{"Linus", "Torvalds"}
        persons["RP"] = Person{"Rob", "Pike"}
}
</pre>

<p>Následují handlery jednotlivých operací, nejdříve pro přečtení a vrácení
osoby pro zadané ID. Povšimněte si, jak se přistupuje k&nbsp;parametrům
požadavku zadaným v&nbsp;URL:</p>

<pre>
func <strong>getPersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := mux.Vars(request)["id"]
        person, found := persons[id]
        if found {
                json.NewEncoder(writer).Encode(person)
        } else {
                json.NewEncoder(writer).Encode(nil)
        }
}
</pre>

<p>Pro přidání nové osoby do databáze je nejdříve nutné získat hodnoty předané
klientem v&nbsp;JSON formátu, ovšem pouze v&nbsp;případě, že osoba s&nbsp;daným
ID v&nbsp;databázi ještě neexistuje:</p>

<pre>
func <strong>createPersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := mux.Vars(request)["id"]
&nbsp;
        _, found := persons[id]
&nbsp;
        if !found {
                processPersonFromPayload(id, request)
        }
        json.NewEncoder(writer).Encode(persons)
}
</pre>

<p>Vymazání osoby z&nbsp;databáze je snadnější:</p>

<pre>
func <strong>deletePersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := mux.Vars(request)["id"]
        _, found := persons[id]
        if found {
                delete(persons, id)
        }
        json.NewEncoder(writer).Encode(persons)
}
</pre>

<p><div class="rs-tip-major">Poznámka: poslední řádky obou handlerů zajistí, že
se klientovi pošle nový obsah databáze.</div></p>

<p>Úplný zdrojový kód příkladu, do něhož byl přidán i handler pro změnu údajů o
osobě, vypadá takto:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/json"
        "github.com/gorilla/mux"
        "io"
        "log"
        "net/http"
        "os"
)
&nbsp;
const ADDRESS = ":8080"
&nbsp;
type Person struct {
        Firstname string `json:"firstname"`
        Surname   string `json:"lastname"`
}
&nbsp;
var persons map[string]Person
&nbsp;
func <strong>init</strong>() {
        persons = make(map[string]Person)
        persons["LT"] = Person{"Linus", "Torvalds"}
        persons["RP"] = Person{"Rob", "Pike"}
}
&nbsp;
func <strong>mainEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!\n")
}
&nbsp;
func <strong>listAllPersonsEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>getPersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := mux.Vars(request)["id"]
        person, found := persons[id]
        if found {
                json.NewEncoder(writer).Encode(person)
        } else {
                json.NewEncoder(writer).Encode(nil)
        }
}
&nbsp;
func <strong>processPersonFromPayload</strong>(id string, request *http.Request) {
        var person Person
        err := json.NewDecoder(request.Body).Decode(&amp;person)
        if err == nil {
                log.Println("JSON decoded")
                persons[id] = person
        } else {
                log.Println(err)
        }
}
&nbsp;
func <strong>createPersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := mux.Vars(request)["id"]
&nbsp;
        _, found := persons[id]
&nbsp;
        if !found {
                processPersonFromPayload(id, request)
        }
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>updatePersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "UPDATE PERSON\n")
        id := mux.Vars(request)["id"]
&nbsp;
        _, found := persons[id]
&nbsp;
        if found {
                processPersonFromPayload(id, request)
        }
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>deletePersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := mux.Vars(request)["id"]
        _, found := persons[id]
        if found {
                delete(persons, id)
        }
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>main</strong>() {
        router := mux.NewRouter().StrictSlash(true)
&nbsp;
        router.HandleFunc("/", mainEndpoint).Methods("GET")
        router.HandleFunc("/person", listAllPersonsEndpoint).Methods("GET")
        router.HandleFunc("/person/{id}", getPersonEndpoint).Methods("GET")
        router.HandleFunc("/person/{id}", createPersonEndpoint).Methods("POST")
        router.HandleFunc("/person/{id}", updatePersonEndpoint).Methods("PUT")
        router.HandleFunc("/person/{id}", deletePersonEndpoint).Methods("DELETE")
&nbsp;
        log.Println("Starting HTTP server at address", ADDRESS)
        err := http.ListenAndServe(ADDRESS, router)
        if err != nil {
                log.Fatal("Unable to initialize HTTP server", err)
                os.Exit(2)
        }
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Otestování všech nově implementovaných operací</h2>

<p>Nové operace popsané v&nbsp;předchozích kapitolách si otestujeme, opět
pomocí nástroje <strong>curl</strong>. Postupně budou ukázány všechny operace
CRUD (<i>create</i>, <i>read</i>, <i>update</i> a <i>delete</i>):</p>

<p>Create:</p>

<pre>
$ <strong>curl -X POST localhost:8080/person/KM -d '{"firstname":"Ken","lastname":"Thompson"}'</strong>
{"KM":{"firstname":"Ken","lastname":"Thompson"},"LT":{"firstname":"Linus","lastname":"Torvalds"},"RP":{"firstname":"Rob","lastname":"Pike"}}
</pre>

<p>Read:</p>

<pre>
$ <strong>curl localhost:8080/person</strong>
{"KM":{"firstname":"Ken","lastname":"Thompson"},"LT":{"firstname":"Linus","lastname":"Torvalds"},"RP":{"firstname":"Rob","lastname":"Pike"}}
</pre>

<p>Update:</p>

<pre>
$ <strong>curl -X PUT localhost:8080/person/RP -d '{"firstname":"Robert","lastname":"Pike"}'</strong>
{"KM":{"firstname":"Ken","lastname":"Thompson"},"LT":{"firstname":"Linus","lastname":"Torvalds"},"RP":{"firstname":"Robert","lastname":"Pike"}}
</pre>

<p>Delete:</p>

<pre>
$ <strong>curl -X DELETE localhost:8080/person/LT</strong>
{"KM":{"firstname":"Ken","lastname":"Thompson"},"RP":{"firstname":"Robert","lastname":"Pike"}}
</pre>

<p><div class="rs-tip-major">Poznámka: alternativně si můžeme informace o
osobách uložit do formátu JSON a použít jinou formu přepínače
<strong>-d</strong>:</div></p>

<pre>
$ <strong>curl -X POST localhost:8080/person/KM -d @ken.json</strong>
{"KM":{"firstname":"Ken","lastname":"Thompson"},"LT":{"firstname":"Linus","lastname":"Torvalds"},"RP":{"firstname":"Rob","lastname":"Pike"}}
&nbsp;
$ <strong>curl -X PUT localhost:8080/person/RP -d @rp.json</strong>
{"KM":{"firstname":"Ken","lastname":"Thompson"},"LT":{"firstname":"Linus","lastname":"Torvalds"},"RP":{"firstname":"Robert","lastname":"Pike"}}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Omezení znaků, které se mohou nacházet v&nbsp;ID osob</h2>

<p>Prozatím jsme v&nbsp;ID osoby mohli používat prakticky libovolné znaky,
ovšem v&nbsp;praxi tomu tak být nemusí. Pokud například službu upravíme takovým
způsobem, že ID osob budou reprezentovány celými čísly (což je obvyklé), změní
se nepatrně vlastní &bdquo;databáze&ldquo;:</p>

<pre>
var persons map[int]Person
persons = make(map[int]Person)
persons[0] = Person{"Linus", "Torvalds"}
persons[1] = Person{"Rob", "Pike"}
</pre>

<p>Ovšem budeme muset změnit i jednotlivé handlery, aby se akceptovaly jen
skutečná ID a nikoli libovolné znaky. Základní omezení znaků ve jméně
prostředků můžeme provést již na úrovni knihovny <strong>gorilla/mux</strong>,
a to zcela jednoduše &ndash; zapsáním regulárního výrazu v&nbsp;deklaraci URI.
Regulární výraz je od jména prostředku oddělen dvojtečkou:</p>

<pre>
router.HandleFunc("/person/{id:<strong>[0-9]+</strong>}", getPersonEndpoint).Methods("GET")
router.HandleFunc("/person/{id:<strong>[0-9]+</strong>}", createPersonEndpoint).Methods("POST")
router.HandleFunc("/person/{id:<strong>[0-9]+</strong>}", updatePersonEndpoint).Methods("PUT")
router.HandleFunc("/person/{id:<strong>[0-9]+</strong>}", deletePersonEndpoint).Methods("DELETE")
</pre>

<p>Dále vyčleníme funkci pro získání ID z&nbsp;dotazu (prozatím bez
složitějších kontrol na rozsah hodnot ID):</p>

<pre>
func <strong>retrieveIdRequestParameter</strong>(request *http.Request) int {
        id_var := mux.Vars(request)["id"]
        id, _ := strconv.ParseInt(id_var, 10, 0)
        return int(id)
}
</pre>

<p>V&nbsp;realizaci služby použijeme výše uvedenou funkci
<strong>retrieveIdRequestParameter</strong> pro získání ID ve všech handlerech,
kde se s&nbsp;ID osob pracuje:</p>

<pre>
package main
&nbsp;
import (
        "encoding/json"
        "github.com/gorilla/mux"
        "io"
        "log"
        "net/http"
        "os"
        "strconv"
)
&nbsp;
const ADDRESS = ":8080"
&nbsp;
type Person struct {
        Firstname string `json:"firstname"`
        Surname   string `json:"lastname"`
}
&nbsp;
var persons map[int]Person
&nbsp;
func <strong>init</strong>() {
        persons = make(map[int]Person)
        persons[0] = Person{"Linus", "Torvalds"}
        persons[1] = Person{"Rob", "Pike"}
}
&nbsp;
func <strong>mainEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!\n")
}
&nbsp;
func <strong>listAllPersonsEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>retrieveIdRequestParameter</strong>(request *http.Request) int {
        id_var := mux.Vars(request)["id"]
        id, _ := strconv.ParseInt(id_var, 10, 0)
        return int(id)
}
&nbsp;
func <strong>getPersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := retrieveIdRequestParameter(request)
        person, found := persons[id]
        if found {
                json.NewEncoder(writer).Encode(person)
        } else {
                json.NewEncoder(writer).Encode(nil)
        }
}
&nbsp;
func <strong>processPersonFromPayload</strong>(id int, request *http.Request) {
        var person Person
        err := json.NewDecoder(request.Body).Decode(&amp;person)
        if err == nil {
                log.Println("JSON decoded")
                persons[id] = person
        } else {
                log.Println(err)
        }
}
&nbsp;
func <strong>createPersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := retrieveIdRequestParameter(request)
&nbsp;
        _, found := persons[id]
&nbsp;
        if !found {
                processPersonFromPayload(id, request)
        }
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>updatePersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "UPDATE PERSON\n")
        id := retrieveIdRequestParameter(request)
&nbsp;
        _, found := persons[id]
&nbsp;
        if found {
                processPersonFromPayload(id, request)
        }
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>deletePersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := retrieveIdRequestParameter(request)
&nbsp;
        _, found := persons[id]
        if found {
                delete(persons, id)
        }
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>main</strong>() {
        router := mux.NewRouter().StrictSlash(true)
&nbsp;
        router.HandleFunc("/", mainEndpoint).Methods("GET")
        router.HandleFunc("/person", listAllPersonsEndpoint).Methods("GET")
        router.HandleFunc("/person/{id:[0-9]+}", getPersonEndpoint).Methods("GET")
        router.HandleFunc("/person/{id:[0-9]+}", createPersonEndpoint).Methods("POST")
        router.HandleFunc("/person/{id:[0-9]+}", updatePersonEndpoint).Methods("PUT")
        router.HandleFunc("/person/{id:[0-9]+}", deletePersonEndpoint).Methods("DELETE")
&nbsp;
        log.Println("Starting HTTP server at address", ADDRESS)
        err := http.ListenAndServe(ADDRESS, router)
        if err != nil {
                log.Fatal("Unable to initialize HTTP server", err)
                os.Exit(2)
        }
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Specifikace hlaviček dotazů, které budou akceptovány</h2>

<p>Balíček <strong>gorilla/mux</strong> umožňuje přesně specifikovat hlavičky
HTTP dotazů posílaných klientem, které jsou službou vyžadovány. Můžeme si to
ukázat na obvyklé hlavičce &bdquo;Content-type&ldquo;, u níž budeme striktně
vyžadovat hodnotu &bdquo;application-json&ldquo;, pochopitelně ovšem jen u těch
metod, v&nbsp;nichž se předávají data (od klienta k&nbsp;serveru). V&nbsp;našem
konkrétním případě se jedná o metody <strong>POST</strong> a
<strong>PUT</strong> určené pro přidání nové osoby resp.&nbsp;pro úpravu údajů
o již existující osobě:</p>

<pre>
router.HandleFunc("/person/{id:[0-9]+}", createPersonEndpoint).Methods("POST").Headers("Content-Type", "application/json")
router.HandleFunc("/person/{id:[0-9]+}", updatePersonEndpoint).Methods("PUT").Headers("Content-Type", "application/json")
</pre>

<p><div class="rs-tip-major">Poznámka: při testování těchto metod si musíme dát
pozor na to, že nástroj <strong>curl</strong> v&nbsp;tomto případě použije
odlišnou hodnotu v&nbsp;hlavičce, a to konkrétně hodnotu
&bdquo;application/x-www-form-urlencoded&ldquo;. Hlavičku tedy budeme muset
specifikovat explicitně.</div></p>

<p>Nová varianta naší REST API služby se změní jen nepatrně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/json"
        "github.com/gorilla/mux"
        "io"
        "log"
        "net/http"
        "os"
        "strconv"
)
&nbsp;
const ADDRESS = ":8080"
&nbsp;
type Person struct {
        Firstname string `json:"firstname"`
        Surname   string `json:"lastname"`
}
&nbsp;
var persons map[int]Person
&nbsp;
func <strong>init</strong>() {
        persons = make(map[int]Person)
        persons[0] = Person{"Linus", "Torvalds"}
        persons[1] = Person{"Rob", "Pike"}
}
&nbsp;
func <strong>mainEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!\n")
}
&nbsp;
func <strong>listAllPersonsEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>retrieveIdRequestParameter</strong>(request *http.Request) int {
        id_var := mux.Vars(request)["id"]
        id, _ := strconv.ParseInt(id_var, 10, 0)
        return int(id)
}
&nbsp;
func <strong>getPersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := retrieveIdRequestParameter(request)
        person, found := persons[id]
        if found {
                json.NewEncoder(writer).Encode(person)
        } else {
                json.NewEncoder(writer).Encode(nil)
        }
}
&nbsp;
func <strong>processPersonFromPayload</strong>(id int, request *http.Request) {
        var person Person
        err := json.NewDecoder(request.Body).Decode(&amp;person)
        if err == nil {
                log.Println("JSON decoded")
                persons[id] = person
        } else {
                log.Println(err)
        }
}
&nbsp;
func <strong>createPersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := retrieveIdRequestParameter(request)
&nbsp;
        _, found := persons[id]
&nbsp;
        if !found {
                processPersonFromPayload(id, request)
        }
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>updatePersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "UPDATE PERSON\n")
        id := retrieveIdRequestParameter(request)
&nbsp;
        _, found := persons[id]
&nbsp;
        if found {
                processPersonFromPayload(id, request)
        }
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>deletePersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := retrieveIdRequestParameter(request)
&nbsp;
        _, found := persons[id]
        if found {
                delete(persons, id)
        }
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>main</strong>() {
        router := mux.NewRouter().StrictSlash(true)
&nbsp;
        router.HandleFunc("/", mainEndpoint).Methods("GET")
        router.HandleFunc("/person", listAllPersonsEndpoint).Methods("GET")
        router.HandleFunc("/person/{id:[0-9]+}", getPersonEndpoint).Methods("GET")
        router.HandleFunc("/person/{id:[0-9]+}", createPersonEndpoint).Methods("POST").Headers("Content-Type", "application/json")
        router.HandleFunc("/person/{id:[0-9]+}", updatePersonEndpoint).Methods("PUT").Headers("Content-Type", "application/json")
        router.HandleFunc("/person/{id:[0-9]+}", deletePersonEndpoint).Methods("DELETE")
&nbsp;
        log.Println("Starting HTTP server at address", ADDRESS)
        err := http.ListenAndServe(ADDRESS, router)
        if err != nil {
                log.Fatal("Unable to initialize HTTP server", err)
                os.Exit(2)
        }
}
</pre>

<p><a name="k15"></a></p>
<h2 id="k15">15. Otestování nové varianty služby</h2>

<p>Opět si můžeme službu otestovat, tentokrát ovšem použijeme
&bdquo;ukecaný&ldquo; režim nástroje <strong>curl</strong> zapnutý přepínačem
<strong>-v</strong>. Nejprve se pokusíme vytvořit novou osobu, ovšem neuvedeme
hlavičku Content-Type. V&nbsp;tomto případě <strong>curl</strong> použije
hodnotu &bdquo;application/x-www-form-urlencoded&ldquo;, která není
akceptována:</p>

<pre>
$ <strong>curl -v -X POST localhost:8080/person/5 -d @ken.json</strong>
&nbsp;
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; POST /person/5 HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; Content-Length: 51
&gt; <strong>Content-Type: application/x-www-form-urlencoded</strong>
&gt; 
* upload completely sent off: 51 out of 51 bytes
&lt; HTTP/1.1 405 Method Not Allowed
&lt; Date: Mon, 14 Oct 2019 16:57:05 GMT
&lt; Content-Length: 0
&lt; 
* Connection #0 to host localhost left intact
</pre>

<p>Ve druhém příkladu je již vše v&nbsp;pořádku, protože hlavičku explicitně
nastavíme při volání nástroje <strong>curl</strong>:</p>

<pre>
$ <strong>curl -v -X POST -H "Content-Type: application/json" localhost:8080/person/4 -d @ken.json</strong>
&nbsp;
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; POST /person/4 HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; <strong>Content-Type: application/json</strong>
&gt; Content-Length: 51
&gt; 
* upload completely sent off: 51 out of 51 bytes
&lt; HTTP/1.1 200 OK
&lt; Date: Mon, 14 Oct 2019 16:56:58 GMT
&lt; Content-Length: 138
&lt; Content-Type: text/plain; charset=utf-8
&lt; 
{"0":{"firstname":"Linus","lastname":"Torvalds"},"1":{"firstname":"Rob","lastname":"Pike"},"4":{"firstname":"Ken","lastname":"Thompson"}}
* Connection #0 to host localhost left intact
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Služby s&nbsp;více přístupovými body a použití podsměrovačů (subrouter)</h2>

<p>Ve chvíli, kdy nějaká služba poskytuje klientům velké množství prostředků (a
tím pádem i koncových bodů), může být jejich správa na jednom místě zbytečně
komplikovaná. Knihovna <strong>gorilla/mux</strong> nám ovšem i v&nbsp;tomto
případě nabízí řešení ve formě takzvaných podsměrovačů (<i>subrouter</i>).
Práce s&nbsp;podsměrovači je ve skutečnosti poměrně jednoduchá, protože každému
podsměrovači přísluší nějaký prefix z&nbsp;URI, například
<strong>/person</strong>, <strong>/book</strong> atd. Tyto prefixy URI jsou
společné pro všechny handlery spravované jedním podsměrovačem. Naši službu lze
upravit takto &ndash; hlavní vstupní bod bude spravován hlavním směrovačem a
zdroje (<i>resource</i>) typu <strong>person</strong> jsou spravovány nově
vytvořeným podsměrovačem:</p>

<pre>
router.HandleFunc("/", mainEndpoint).Methods("GET")
&nbsp;
s := router.PathPrefix("/person").Subrouter()
s.HandleFunc("", listAllPersonsEndpoint).Methods("GET")
s.HandleFunc("/{id:[0-9]+}", getPersonEndpoint).Methods("GET")
s.HandleFunc("/{id:[0-9]+}", createPersonEndpoint).Methods("POST").Headers("Content-Type", "application/json")
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že v&nbsp;podsměrovači
při registraci handlerů již nepoužíváme prefix &bdquo;/person&ldquo;.</div></p>

<p>Zbytek aplikace může zůstat naprosto shodný s&nbsp;verzí předchozí:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/json"
        "github.com/gorilla/mux"
        "io"
        "log"
        "net/http"
        "os"
        "strconv"
)
&nbsp;
const ADDRESS = ":8080"
&nbsp;
type Person struct {
        Firstname string `json:"firstname"`
        Surname   string `json:"lastname"`
}
&nbsp;
var persons map[int]Person
&nbsp;
func <strong>init</strong>() {
        persons = make(map[int]Person)
        persons[0] = Person{"Linus", "Torvalds"}
        persons[1] = Person{"Rob", "Pike"}
}
&nbsp;
func <strong>mainEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!\n")
}
&nbsp;
func <strong>listAllPersonsEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>retrieveIdRequestParameter</strong>(request *http.Request) int {
        id_var := mux.Vars(request)["id"]
        id, _ := strconv.ParseInt(id_var, 10, 0)
        return int(id)
}
&nbsp;
func <strong>getPersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := retrieveIdRequestParameter(request)
        person, found := persons[id]
        if found {
                json.NewEncoder(writer).Encode(person)
        } else {
                json.NewEncoder(writer).Encode(nil)
        }
}
&nbsp;
func <strong>processPersonFromPayload</strong>(id int, request *http.Request) {
        var person Person
        err := json.NewDecoder(request.Body).Decode(&amp;person)
        if err == nil {
                log.Println("JSON decoded")
                persons[id] = person
        } else {
                log.Println(err)
        }
}
&nbsp;
func <strong>createPersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := retrieveIdRequestParameter(request)
&nbsp;
        _, found := persons[id]
&nbsp;
        if !found {
                processPersonFromPayload(id, request)
        }
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>updatePersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "UPDATE PERSON\n")
        id := retrieveIdRequestParameter(request)
&nbsp;
        _, found := persons[id]
&nbsp;
        if found {
                processPersonFromPayload(id, request)
        }
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>deletePersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := retrieveIdRequestParameter(request)
&nbsp;
        _, found := persons[id]
        if found {
                delete(persons, id)
        }
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>main</strong>() {
        router := mux.NewRouter().StrictSlash(true)
&nbsp;
        router.HandleFunc("/", mainEndpoint).Methods("GET")
&nbsp;
        s := router.PathPrefix("/person").Subrouter()
        s.HandleFunc("", listAllPersonsEndpoint).Methods("GET")
        s.HandleFunc("/{id:[0-9]+}", getPersonEndpoint).Methods("GET")
        s.HandleFunc("/{id:[0-9]+}", createPersonEndpoint).Methods("POST").Headers("Content-Type", "application/json")
        s.HandleFunc("/{id:[0-9]+}", updatePersonEndpoint).Methods("PUT").Headers("Content-Type", "application/json")
        s.HandleFunc("/{id:[0-9]+}", deletePersonEndpoint).Methods("DELETE").Headers("Content-Type", "application/json")
&nbsp;
        log.Println("Starting HTTP server at address", ADDRESS)
        err := http.ListenAndServe(ADDRESS, router)
        if err != nil {
                log.Fatal("Unable to initialize HTTP server", err)
                os.Exit(2)
        }
}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Přidání mezivrstev do řetězce zpracování požadavku &ndash; middleware</h2>

<p>Mnohdy nastane při realizaci služeb a mikroslužeb situace, kdy je nutné
nějakou operaci provádět se všemi požadavky. Může se jednat o kontrolu určitých
hlaviček (tokeny atd.), logování apod. V&nbsp;takových případech je možné
využít takzvané <i>middleware</i>, které si můžeme představit jako mezivrstvy
vložené mezi směrovač a jednotlivé handlery. Příkladem mezivrstvy může být
logování požadavků. Povšimněte si, že funkce realizující mezivrstvu musí
explicitně zavolat další článek v&nbsp;celém řetězci zpracování (protože se
počet mezivrstev může zvyšovat):</p>

<pre>
func <strong>logRequestHandler</strong>(writer http.ResponseWriter, request *http.Request, nextHandler http.Handler) {
        log.Println("Request URI: " + request.RequestURI)
        log.Println("Request method: " + request.Method)
        nextHandler.ServeHTTP(writer, request)
}
</pre>

<p>Tuto funkci ovšem nevoláme přímo, ale musíme ji zaregistrovat:</p>

<pre>
func <strong>logRequest</strong>(nextHandler http.Handler) http.Handler {
        return http.HandlerFunc(
                func(writer http.ResponseWriter, request *http.Request) {
                        logRequestHandler(writer, request, nextHandler)
                })
}
&nbsp;
router.Use(logRequest)
</pre>

<p>Pomocná funkce <strong>logRequestHandler</strong> ve skutečnosti není
zapotřebí. Druhá mezivrstva vypisuje časy příchodu jednotlivých požadavků a je
realizována jedinou funkcí (vracející jinou funkci, tj.&nbsp;jedná se o funkci
vyššího řádu):</p>

<pre>
func <strong>logTimestamp</strong>(nextHandler http.Handler) http.Handler {
        return http.HandlerFunc(
                func(writer http.ResponseWriter, request *http.Request) {
                        t := time.Now()
                        log.Println("Timestamp: " + t.Format(time.UnixDate))
                })
}
&nbsp;
router.Use(logTimestamp)
</pre>

<p><div class="rs-tip-major">Poznámka: pokud budete potřebovat například
zjistit čas zpracování požadavku, je nutné problém řešit komplikovaněji &ndash;
s&nbsp;využitím kontextů (<i>context</i>), což je téma na samostatný
článek.</div></p>

<p>V&nbsp;praxi budou obě mezivrstvy reagovat na požadavky takto:</p>

<pre>
2019/10/14 19:36:34 Starting HTTP server at address :8080
&nbsp;
2019/10/14 19:36:39 Request URI: /person/
2019/10/14 19:36:39 Request method: GET
2019/10/14 19:36:39 Timestamp: Mon Oct 14 19:36:39 CEST 2019
&nbsp;
2019/10/14 19:37:30 Request URI: /person/4
2019/10/14 19:37:30 Request method: POST
2019/10/14 19:37:30 Timestamp: Mon Oct 14 19:37:30 CEST 2019
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Poslední varianta jednoduché REST API služby</h2>

<p>Poslední varianta naší jednoduché REST API služby může vypadat
následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/json"
        "github.com/gorilla/mux"
        "io"
        "log"
        "net/http"
        "os"
        "strconv"
        "time"
)
&nbsp;
const ADDRESS = ":8080"
&nbsp;
type Person struct {
        Firstname string `json:"firstname"`
        Surname   string `json:"lastname"`
}
&nbsp;
var persons map[int]Person
&nbsp;
func <strong>init</strong>() {
        persons = make(map[int]Person)
        persons[0] = Person{"Linus", "Torvalds"}
        persons[1] = Person{"Rob", "Pike"}
}
&nbsp;
func <strong>mainEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!\n")
}
&nbsp;
func <strong>listAllPersonsEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>retrieveIdRequestParameter</strong>(request *http.Request) int {
        id_var := mux.Vars(request)["id"]
        id, _ := strconv.ParseInt(id_var, 10, 0)
        return int(id)
}
&nbsp;
func <strong>getPersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := retrieveIdRequestParameter(request)
        person, found := persons[id]
        if found {
                json.NewEncoder(writer).Encode(person)
        } else {
                json.NewEncoder(writer).Encode(nil)
        }
}
&nbsp;
func <strong>processPersonFromPayload</strong>(id int, request *http.Request) {
        var person Person
        err := json.NewDecoder(request.Body).Decode(&amp;person)
        if err == nil {
                log.Println("JSON decoded")
                persons[id] = person
        } else {
                log.Println(err)
        }
}
&nbsp;
func <strong>createPersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := retrieveIdRequestParameter(request)
&nbsp;
        _, found := persons[id]
&nbsp;
        if !found {
                processPersonFromPayload(id, request)
        }
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>updatePersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "UPDATE PERSON\n")
        id := retrieveIdRequestParameter(request)
&nbsp;
        _, found := persons[id]
&nbsp;
        if found {
                processPersonFromPayload(id, request)
        }
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>deletePersonEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        id := retrieveIdRequestParameter(request)
&nbsp;
        _, found := persons[id]
        if found {
                delete(persons, id)
        }
        json.NewEncoder(writer).Encode(persons)
}
&nbsp;
func <strong>logRequestHandler</strong>(writer http.ResponseWriter, request *http.Request, nextHandler http.Handler) {
        log.Println("Request URI: " + request.RequestURI)
        log.Println("Request method: " + request.Method)
        nextHandler.ServeHTTP(writer, request)
}
&nbsp;
func <strong>logRequest</strong>(nextHandler http.Handler) http.Handler {
        return http.HandlerFunc(
                func(writer http.ResponseWriter, request *http.Request) {
                        logRequestHandler(writer, request, nextHandler)
                })
}
&nbsp;
func <strong>logTimestamp</strong>(nextHandler http.Handler) http.Handler {
        return http.HandlerFunc(
                func(writer http.ResponseWriter, request *http.Request) {
                        t := time.Now()
                        log.Println("Timestamp: " + t.Format(time.UnixDate))
                })
}
&nbsp;
func <strong>main</strong>() {
        router := mux.NewRouter().StrictSlash(true)
&nbsp;
        router.HandleFunc("/", mainEndpoint).Methods("GET")
&nbsp;
        s := router.PathPrefix("/person").Subrouter()
        s.HandleFunc("", listAllPersonsEndpoint).Methods("GET")
        s.HandleFunc("/{id:[0-9]+}", getPersonEndpoint).Methods("GET")
        s.HandleFunc("/{id:[0-9]+}", createPersonEndpoint).Methods("POST").Headers("Content-Type", "application/json")
        s.HandleFunc("/{id:[0-9]+}", updatePersonEndpoint).Methods("PUT").Headers("Content-Type", "application/json")
        s.HandleFunc("/{id:[0-9]+}", deletePersonEndpoint).Methods("DELETE").Headers("Content-Type", "application/json")
&nbsp;
        router.Use(logRequest)
        router.Use(logTimestamp)
&nbsp;
        log.Println("Starting HTTP server at address", ADDRESS)
        err := http.ListenAndServe(ADDRESS, router)
        if err != nil {
                log.Fatal("Unable to initialize HTTP server", err)
                os.Exit(2)
        }
}
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně čtyři megabajty), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_simple_http_server.go</td><td>jednoduchý HTTP server založený na standardním balíčku <strong>net/http</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/01_simple_http_server.go">https://github.com/tisnik/go-root/blob/master/article_38/01_simple_http_server.go</a></td></tr>
<tr><td> 2</td><td>02_http_server_with_mux.go</td><td>HTTP server používající balíček <strong>gorilla/mux</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/02_http_server_with_mux.go">https://github.com/tisnik/go-root/blob/master/article_38/02_http_server_with_mux.go</a></td></tr>
<tr><td> 3</td><td>03_method_specification.go</td><td>specifikace HTTP metod použitých při volání REST API</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/03_method_specification.go">https://github.com/tisnik/go-root/blob/master/article_38/03_method_specification.go</a></td></tr>
<tr><td> 4</td><td>04_method_specification.go</td><td>rozšíření a vylepšení předchozího příkladu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/04_method_specification.go">https://github.com/tisnik/go-root/blob/master/article_38/04_method_specification.go</a></td></tr>
<tr><td> 5</td><td>05_resource_handling.go</td><td>vylepšená správa zdrojů (<i>resources</i>)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/05_resource_handling.go">https://github.com/tisnik/go-root/blob/master/article_38/05_resource_handling.go</a></td></tr>
<tr><td> 6</td><td>06_resource_handling.go</td><td>práce se jménem zdroje</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/06_resource_handling.go">https://github.com/tisnik/go-root/blob/master/article_38/06_resource_handling.go</a></td></tr>
<tr><td> 7</td><td>07_resource_handling_id.go</td><td>omezení znaků, které může být použito ve jménu zdroje</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/07_resource_handling_id.go">https://github.com/tisnik/go-root/blob/master/article_38/07_resource_handling_id.go</a></td></tr>
<tr><td> 8</td><td>08_headers.go</td><td>specifikace hlaviček, které musí být poslány společně s&nbsp;požadavkem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/08_headers.go">https://github.com/tisnik/go-root/blob/master/article_38/08_headers.go</a></td></tr>
<tr><td> 9</td><td>09_subroutes.go</td><td>vytvoření a konfigurace podsměrovačů (<i>subroutes</i>)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/09_subroutes.go">https://github.com/tisnik/go-root/blob/master/article_38/09_subroutes.go</a></td></tr>
<tr><td>10</td><td>10_simple_middleware.go</td><td>dvě middleware funkce použité při zpracování dotazů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/10_simple_middleware.go">https://github.com/tisnik/go-root/blob/master/article_38/10_simple_middleware.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

