<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Rozhraní (interface) v&nbsp;programovacím jazyku Go</a></p>
<p><a href="#k02">*** 2. Metody</a></p>
<p><a href="#k03">*** 3. Metody s&nbsp;parametry</a></p>
<p><a href="#k04">*** 4. Předání ukazatele na strukturu (objekt) do volané metody</a></p>
<p><a href="#k05">*** 5. Rozhraní (interface)</a></p>
<p><a href="#k06">*** 6. Implementace rozhraní</a></p>
<p><a href="#k07">*** 7. Metody a rozhraní</a></p>
<p><a href="#k08">*** 8. Vícenásobná implementace stejného rozhraní</a></p>
<p><a href="#k09">*** 9. Řez se strukturami implementujícími společné rozhraní</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Rozhraní (interface) v&nbsp;programovacím jazyku Go</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Metody</h2>

<pre>
package main

import (
        "fmt"
        "math"
)

type Line struct {
        x1, y1 float64
        x2, y2 float64
}

func (line Line) length() float64 {
        return math.Hypot(line.x1-line.x2, line.y1-line.y2)
}

func main() {
        l1 := Line{x1: 0, y1: 0, x2: 100, y2: 100}

        fmt.Println(l1)

        line_length := l1.length()
        fmt.Println(line_length)
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Metody s&nbsp;parametry</h2>


<pre>
package main

import (
        "fmt"
        "math"
)

type Line struct {
        x1, y1 float64
        x2, y2 float64
}

func (line Line) length() float64 {
        return math.Hypot(line.x1-line.x2, line.y1-line.y2)
}

func (line Line) translate(dx, dy float64) {
        fmt.Printf("Translating line %v by %f %f\n", line, dx, dy)
        line.x1 += dx
        line.y1 += dy
        line.x2 += dx
        line.y2 += dy
}

func main() {
        l1 := Line{x1: 0, y1: 0, x2: 100, y2: 100}

        fmt.Println(l1)
        l1.translate(5, 5)
        fmt.Println(l1)

        line_length := l1.length()
        fmt.Println(line_length)
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Předání ukazatele na strukturu (objekt) do volané metody</h2>

<pre>
package main

import (
        "fmt"
        "math"
)

type Line struct {
        x1, y1 float64
        x2, y2 float64
}

func (line Line) length() float64 {
        return math.Hypot(line.x1-line.x2, line.y1-line.y2)
}

func (line *Line) translate(dx, dy float64) {
        fmt.Printf("Translating line %v by %f %f\n", *line, dx, dy)
        (*line).x1 += dx
        (*line).y1 += dy
        (*line).x2 += dx
        (*line).y2 += dy
}

func main() {
        l1 := Line{x1: 0, y1: 0, x2: 100, y2: 100}

        fmt.Println(l1)
        l1.translate(5, 5)
        fmt.Println(l1)

        line_length := l1.length()
        fmt.Println(line_length)
}
</pre>

<pre>
package main

import (
        "fmt"
        "math"
)

type Line struct {
        x1, y1 float64
        x2, y2 float64
}

func (line Line) length() float64 {
        return math.Hypot(line.x1-line.x2, line.y1-line.y2)
}

func (line *Line) translate(dx, dy float64) {
        fmt.Printf("Translating line %v by %f %f\n", *line, dx, dy)
        line.x1 += dx
        line.y1 += dy
        line.x2 += dx
        line.y2 += dy
}

func main() {
        l1 := Line{x1: 0, y1: 0, x2: 100, y2: 100}

        fmt.Println(l1)
        l1.translate(5, 5)
        fmt.Println(l1)

        line_length := l1.length()
        fmt.Println(line_length)
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Rozhraní (interface)</h2>

<pre>
package main

type Shape interface {
}

type OpenShape interface {
        length() float64
}

type ClosedShape interface {
        area() float64
        perimeter() float64
}

func main() {
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Implementace rozhraní</h2>

<pre>
package main

import (
        "fmt"
        "math"
)

type OpenShape interface {
        length() float64
}

type Line struct {
        x1, y1 float64
        x2, y2 float64
}

func length(shape OpenShape) float64 {
        return shape.length()
}

func main() {
        l1 := Line{x1: 0, y1: 0, x2: 100, y2: 100}

        fmt.Println(l1)

        line_length := length(l1)
        fmt.Println(line_length)
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Metody a rozhraní</h2>

<pre>
package main

import (
        "fmt"
        "math"
)

type OpenShape interface {
        length() float64
}

type Line struct {
        x1, y1 float64
        x2, y2 float64
}

func length(shape OpenShape) float64 {
        return shape.length()
}

func (line Line) length() float64 {
        return math.Hypot(line.x1-line.x2, line.y1-line.y2)
}

func main() {
        l1 := Line{x1: 0, y1: 0, x2: 100, y2: 100}

        fmt.Println(l1)

        line_length := length(l1)
        fmt.Println(line_length)
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vícenásobná implementace stejného rozhraní</h2>

<pre>
type OpenShape interface {
        length() float64
}
&nbsp;
type ClosedShape interface {
        area() float64
}
</pre>

<pre>
func length(shape OpenShape) float64 {
        return shape.length()
}
&nbsp;
func area(shape ClosedShape) float64 {
        return shape.area()
}
</pre>

<pre>
package main

import (
        "fmt"
        "math"
)

type OpenShape interface {
        length() float64
}

type ClosedShape interface {
        area() float64
}

func length(shape OpenShape) float64 {
        return shape.length()
}

func area(shape ClosedShape) float64 {
        return shape.area()
}

type Line struct {
        x1, y1 float64
        x2, y2 float64
}

type Circle struct {
        x, y   float64
        radius float64
}

type Ellipse struct {
        x, y float64
        a, b float64
}

type Rectangle struct {
        x, y          float64
        width, height float64
}

func (line Line) length() float64 {
        return math.Hypot(line.x1-line.x2, line.y1-line.y2)
}

func (rect Rectangle) area() float64 {
        return rect.width * rect.height
}

func (circle Circle) area() float64 {
        return math.Pi * circle.radius * circle.radius
}

func (ellipse Ellipse) area() float64 {
        return math.Pi * ellipse.a * ellipse.b
}

func main() {
        l1 := Line{x1: 0, y1: 0, x2: 100, y2: 100}
        fmt.Println("Line")
        fmt.Println(l1)
        fmt.Println(length(l1))
        fmt.Println(l1.length())
        fmt.Println()

        fmt.Println("Rectangle")
        r := Rectangle{x: 0, y: 0, width: 100, height: 100}
        fmt.Println(r)
        fmt.Println(area(r))
        fmt.Println(r.area())
        fmt.Println()

        fmt.Println("Circle")
        c := Circle{x: 0, y: 0, radius: 100}
        fmt.Println(c)
        fmt.Println(area(c))
        fmt.Println(c.area())
        fmt.Println()

        fmt.Println("Ellipse")
        e := Ellipse{x: 0, y: 0, a: 100, b: 50}
        fmt.Println(e)
        fmt.Println(area(e))
        fmt.Println(e.area())
        fmt.Println()
}
</pre>

<pre>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Řez se strukturami implementujícími společné rozhraní</h2>

<pre>
package main

import (
        "fmt"
        "math"
)

type ClosedShape interface {
        area() float64
}

func area(shape ClosedShape) float64 {
        return shape.area()
}

type Circle struct {
        x, y   float64
        radius float64
}

type Ellipse struct {
        x, y float64
        a, b float64
}

type Rectangle struct {
        x, y          float64
        width, height float64
}

func (rect Rectangle) area() float64 {
        return rect.width * rect.height
}

func (circle Circle) area() float64 {
        return math.Pi * circle.radius * circle.radius
}

func (ellipse Ellipse) area() float64 {
        return math.Pi * ellipse.a * ellipse.b
}

func main() {
        shapes := []ClosedShape{
                Rectangle{x: 0, y: 0, width: 100, height: 100},
                Circle{x: 0, y: 0, radius: 100},
                Ellipse{x: 0, y: 0, a: 100, b: 50}}

        for _, shape := range shapes {
                fmt.Println(shape)
                fmt.Println(area(shape))
                fmt.Println(shape.area())
                fmt.Println()
        }
}
</pre>


