<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Rozhraní (interface) v&nbsp;programovacím jazyku Go</a></p>
<p><a href="#k02">*** 2. Metody</a></p>
<p><a href="#k03">*** 3. Metody s&nbsp;parametry</a></p>
<p><a href="#k04">*** 4. Předání ukazatele na strukturu (objekt) do volané metody</a></p>
<p><a href="#k05">*** 5. Rozhraní (interface)</a></p>
<p><a href="#k06">*** 6. Implementace rozhraní</a></p>
<p><a href="#k07">*** 7. Metody a rozhraní</a></p>
<p><a href="#k08">*** 8. Vícenásobná implementace stejného rozhraní</a></p>
<p><a href="#k09">*** 9. Řez se strukturami implementujícími společné rozhraní</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Rozhraní (interface) v&nbsp;programovacím jazyku Go</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Metody</h2>

<pre>
package main

import (
        "fmt"
        "math"
)

type Line struct {
        x1, y1 float64
        x2, y2 float64
}

func (line Line) length() float64 {
        return math.Hypot(line.x1-line.x2, line.y1-line.y2)
}

func main() {
        l1 := Line{x1: 0, y1: 0, x2: 100, y2: 100}

        fmt.Println(l1)

        line_length := l1.length()
        fmt.Println(line_length)
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Metody s&nbsp;parametry</h2>


<pre>
package main

import (
        "fmt"
        "math"
)

type Line struct {
        x1, y1 float64
        x2, y2 float64
}

func (line Line) length() float64 {
        return math.Hypot(line.x1-line.x2, line.y1-line.y2)
}

func (line Line) translate(dx, dy float64) {
        fmt.Printf("Translating line %v by %f %f\n", line, dx, dy)
        line.x1 += dx
        line.y1 += dy
        line.x2 += dx
        line.y2 += dy
}

func main() {
        l1 := Line{x1: 0, y1: 0, x2: 100, y2: 100}

        fmt.Println(l1)
        l1.translate(5, 5)
        fmt.Println(l1)

        line_length := l1.length()
        fmt.Println(line_length)
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Předání ukazatele na strukturu (objekt) do volané metody</h2>

<pre>
package main

import (
        "fmt"
        "math"
)

type Line struct {
        x1, y1 float64
        x2, y2 float64
}

func (line Line) length() float64 {
        return math.Hypot(line.x1-line.x2, line.y1-line.y2)
}

func (line *Line) translate(dx, dy float64) {
        fmt.Printf("Translating line %v by %f %f\n", *line, dx, dy)
        (*line).x1 += dx
        (*line).y1 += dy
        (*line).x2 += dx
        (*line).y2 += dy
}

func main() {
        l1 := Line{x1: 0, y1: 0, x2: 100, y2: 100}

        fmt.Println(l1)
        l1.translate(5, 5)
        fmt.Println(l1)

        line_length := l1.length()
        fmt.Println(line_length)
}
</pre>

<pre>
package main

import (
        "fmt"
        "math"
)

type Line struct {
        x1, y1 float64
        x2, y2 float64
}

func (line Line) length() float64 {
        return math.Hypot(line.x1-line.x2, line.y1-line.y2)
}

func (line *Line) translate(dx, dy float64) {
        fmt.Printf("Translating line %v by %f %f\n", *line, dx, dy)
        line.x1 += dx
        line.y1 += dy
        line.x2 += dx
        line.y2 += dy
}

func main() {
        l1 := Line{x1: 0, y1: 0, x2: 100, y2: 100}

        fmt.Println(l1)
        l1.translate(5, 5)
        fmt.Println(l1)

        line_length := l1.length()
        fmt.Println(line_length)
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Rozhraní (interface)</h2>

<pre>
package main

type Shape interface {
}

type OpenShape interface {
        length() float64
}

type ClosedShape interface {
        area() float64
        perimeter() float64
}

func main() {
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Implementace rozhraní</h2>

<pre>
package main

import (
        "fmt"
        "math"
)

type OpenShape interface {
        length() float64
}

type Line struct {
        x1, y1 float64
        x2, y2 float64
}

func length(shape OpenShape) float64 {
        return shape.length()
}

func main() {
        l1 := Line{x1: 0, y1: 0, x2: 100, y2: 100}

        fmt.Println(l1)

        line_length := length(l1)
        fmt.Println(line_length)
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Metody a rozhraní</h2>

<pre>
package main

import (
        "fmt"
        "math"
)

type OpenShape interface {
        length() float64
}

type Line struct {
        x1, y1 float64
        x2, y2 float64
}

func length(shape OpenShape) float64 {
        return shape.length()
}

func (line Line) length() float64 {
        return math.Hypot(line.x1-line.x2, line.y1-line.y2)
}

func main() {
        l1 := Line{x1: 0, y1: 0, x2: 100, y2: 100}

        fmt.Println(l1)

        line_length := length(l1)
        fmt.Println(line_length)
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vícenásobná implementace stejného rozhraní</h2>

<pre>
type OpenShape interface {
        length() float64
}
&nbsp;
type ClosedShape interface {
        area() float64
}
</pre>

<pre>
func length(shape OpenShape) float64 {
        return shape.length()
}
&nbsp;
func area(shape ClosedShape) float64 {
        return shape.area()
}
</pre>

<pre>
package main

import (
        "fmt"
        "math"
)

type OpenShape interface {
        length() float64
}

type ClosedShape interface {
        area() float64
}

func length(shape OpenShape) float64 {
        return shape.length()
}

func area(shape ClosedShape) float64 {
        return shape.area()
}

type Line struct {
        x1, y1 float64
        x2, y2 float64
}

type Circle struct {
        x, y   float64
        radius float64
}

type Ellipse struct {
        x, y float64
        a, b float64
}

type Rectangle struct {
        x, y          float64
        width, height float64
}

func (line Line) length() float64 {
        return math.Hypot(line.x1-line.x2, line.y1-line.y2)
}

func (rect Rectangle) area() float64 {
        return rect.width * rect.height
}

func (circle Circle) area() float64 {
        return math.Pi * circle.radius * circle.radius
}

func (ellipse Ellipse) area() float64 {
        return math.Pi * ellipse.a * ellipse.b
}

func main() {
        l1 := Line{x1: 0, y1: 0, x2: 100, y2: 100}
        fmt.Println("Line")
        fmt.Println(l1)
        fmt.Println(length(l1))
        fmt.Println(l1.length())
        fmt.Println()

        fmt.Println("Rectangle")
        r := Rectangle{x: 0, y: 0, width: 100, height: 100}
        fmt.Println(r)
        fmt.Println(area(r))
        fmt.Println(r.area())
        fmt.Println()

        fmt.Println("Circle")
        c := Circle{x: 0, y: 0, radius: 100}
        fmt.Println(c)
        fmt.Println(area(c))
        fmt.Println(c.area())
        fmt.Println()

        fmt.Println("Ellipse")
        e := Ellipse{x: 0, y: 0, a: 100, b: 50}
        fmt.Println(e)
        fmt.Println(area(e))
        fmt.Println(e.area())
        fmt.Println()
}
</pre>

<pre>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Řez se strukturami implementujícími společné rozhraní</h2>

<pre>
package main

import (
        "fmt"
        "math"
)

type ClosedShape interface {
        area() float64
}

func area(shape ClosedShape) float64 {
        return shape.area()
}

type Circle struct {
        x, y   float64
        radius float64
}

type Ellipse struct {
        x, y float64
        a, b float64
}

type Rectangle struct {
        x, y          float64
        width, height float64
}

func (rect Rectangle) area() float64 {
        return rect.width * rect.height
}

func (circle Circle) area() float64 {
        return math.Pi * circle.radius * circle.radius
}

func (ellipse Ellipse) area() float64 {
        return math.Pi * ellipse.a * ellipse.b
}

func main() {
        shapes := []ClosedShape{
                Rectangle{x: 0, y: 0, width: 100, height: 100},
                Circle{x: 0, y: 0, radius: 100},
                Ellipse{x: 0, y: 0, a: 100, b: 50}}

        for _, shape := range shapes {
                fmt.Println(shape)
                fmt.Println(area(shape))
                fmt.Println(shape.area())
                fmt.Println()
        }
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
doslova několik kilobajtů), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_methods.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/01_methods.go">https://github.com/tisnik/go-fedora/blob/master/article_04/01_methods.go</a></td></tr>
<tr><td> 2</td><td>02_methods_with_parameters.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/02_methods_with_parameters.go">https://github.com/tisnik/go-fedora/blob/master/article_04/02_methods_with_parameters.go</a></td></tr>
<tr><td> 3</td><td>03_methods_ptr.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/03_methods_ptr.go">https://github.com/tisnik/go-fedora/blob/master/article_04/03_methods_ptr.go</a></td></tr>
<tr><td> 4</td><td>04_methods_ptr_better_solution.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/04_methods_ptr_better_solution.go">https://github.com/tisnik/go-fedora/blob/master/article_04/04_methods_ptr_better_solution.go</a></td></tr>
<tr><td> 5</td><td>05_interface.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/05_interface.go">https://github.com/tisnik/go-fedora/blob/master/article_04/05_interface.go</a></td></tr>
<tr><td> 6</td><td>06_interface_implementation.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/06_interface_implementation.go">https://github.com/tisnik/go-fedora/blob/master/article_04/06_interface_implementation.go</a></td></tr>
<tr><td> 7</td><td>07_interface_implementation_with_method.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/07_interface_implementation_with_method.go">https://github.com/tisnik/go-fedora/blob/master/article_04/07_interface_implementation_with_method.go</a></td></tr>
<tr><td> 8</td><td>08_more_implementations.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/08_more_implementations.go">https://github.com/tisnik/go-fedora/blob/master/article_04/08_more_implementations.go</a></td></tr>
<tr><td> 9</td><td>09_slice_of_interfaces.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/09_slice_of_interfaces.go">https://github.com/tisnik/go-fedora/blob/master/article_04/09_slice_of_interfaces.go</a></td></tr>
<tr><td>10</td><td>10_slice_of_interfaces_as_param.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/10_slice_of_interfaces_as_param.go">https://github.com/tisnik/go-fedora/blob/master/article_04/10_slice_of_interfaces_as_param.go</a></td></tr>
<tr><td>11</td><td>11_multiple_interfaces.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/11_multiple_interfaces.go">https://github.com/tisnik/go-fedora/blob/master/article_04/11_multiple_interfaces.go</a></td></tr>
<tr><td>12</td><td>12_embedded_interface.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/12_embedded_interface.go">https://github.com/tisnik/go-fedora/blob/master/article_04/12_embedded_interface.go</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>17</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>18</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>19</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>20</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go <br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>


</ol>



<p></p><p></p>
