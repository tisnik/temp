<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Popis vybraných balíčků nabízených projektem Gonum</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Popis vybraných balíčků nabízených projektem Gonum</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V článku o nástroji Gophernotes jsme se mj. zmínili i o balíčcích určených pro numerické výpočty vytvořených v rámci projektu Gonum. Dnes si některé z těchto balíčků popíšeme, pochopitelně s využitím množství demonstračních příkladů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Popis vybraných balíčků nabízených projektem Gonum</a></p>
<p><a href="#k02">2. Pomocný balíček <strong>gonum.org/v1/gonum/floats</strong></a></p>
<p><a href="#k03">3. Další funkce z&nbsp;balíčku <strong>gonum.org/v1/gonum/floats</strong></a></p>
<p><a href="#k04">4. Jednorozměrné vektory</a></p>
<p><a href="#k05">5. Získání řezu (slice) z&nbsp;vektoru</a></p>
<p><a href="#k06">6. Čtení a modifikace prvků vektoru</a></p>
<p><a href="#k07">7. Operace nad vektory</a></p>
<p><a href="#k08">8. Obecné dvourozměrné matice</a></p>
<p><a href="#k09">9. Symetrické matice</a></p>
<p><a href="#k10">10. Diagonální matice</a></p>
<p><a href="#k11">11. Trojúhelníkové matice</a></p>
<p><a href="#k12">12. Balíček <strong>stat</strong></a></p>
<p><a href="#k13">13. Výpočet průměrů, rozptylů a směrodatných odchylek</a></p>
<p><a href="#k14">14. Výpočet entropie</a></p>
<p><a href="#k15">15. Korelace</a></p>
<p><a href="#k16">16. Kovariance</a></p>
<p><a href="#k17">17. Lineární regrese</a></p>
<p><a href="#k18">18. Obsah následující části seriálu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Popis vybraných balíčků nabízených projektem Gonum</h2>

<p>Na článek <a
href="https://www.root.cz/clanky/gophernotes-kombinace-interaktivniho-prostredi-jupyteru-s-jazykem-go/">Gophernotes:
kombinace interaktivního prostředí Jupyteru s&nbsp;jazykem Go</a>, který je
součástí <a href="https://www.root.cz/serialy/programovaci-jazyk-go/">seriálu o
programovacím jazyku Go</a>, dnes navážeme. Popíšeme si totiž možnosti
vybraných balíčků nabízených projektem Gonum. Opět použijeme interaktivní
smyčku jazyka Go (<a href="https://en.wikipedia.org/wiki/REPL">REPL</a>)
implementovanou projektem <a
href="https://www.root.cz/clanky/gophernotes-kombinace-interaktivniho-prostredi-jupyteru-s-jazykem-go/#k03">Gomacro</a>,
protože právě zcela interaktivní prostředí (realizované buď v&nbsp;terminálu,
nebo v&nbsp;projektech typu <i>Jupyter Notebook</i>) je pro testování možností
nových či neznámých knihoven takřka ideálním nástrojem.</p>

<p>Popis instalace balíčků <i>Gonum</i> a <i>Gomacro</i> byl uveden minule,
takže si dnes již můžeme smyčku REPL <i>Gomacra</i> přímo spustit.
V&nbsp;případě, že je adresář <strong>$HOME/go/bin</strong> vložen do proměnné
prostředí <strong>PATH</strong>, bude možné Gomacro spustit příkazem
<strong>gomacro</strong>:</p>

<pre>
$ <strong>gomacro</strong>
&nbsp;
// GOMACRO, an interactive Go interpreter with generics and macros
// Copyright (C) 2018-2019 Massimiliano Ghilardi &lt;https://github.com/cosmos72/gomacro&gt;
// License MPL v2.0+: Mozilla Public License version 2.0 or later &lt;http://mozilla.org/MPL/2.0/&gt;
// This is free software with ABSOLUTELY NO WARRANTY.
//
// Type :help for help
gomacro&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: opět je nutné již před popisem
jednotlivých funkcí a metod připomenout, že knihovny pro numerické a symbolické
výpočty podporované v&nbsp;rámci projektu <i>Gonum</i> nejsou ze syntaktického
hlediska tak dobře integrovány, jako je tomu například ve specializovaných
jazycích <i>R</i> a <i>Julia</i> či v&nbsp;Pythonu doplněném o balíčky
<i>NumPy</i> a <i>SciPy</i>. Je tomu tak z&nbsp;toho prostého důvodu, že jazyk
Go (ve verzi 1.x) nepodporuje přetěžování operátorů, takže například není možné
implementovat maticové operace &bdquo;přirozenou&ldquo; cestou (zrovna příklad
<i>NumPy</i> ukazuje, že přetěžování operátorů, pokud je použito v&nbsp;rozumné
míře, může být v&nbsp;praxi velmi užitečné). Tato vlastnost programovacího
jazyka Go je nejvíce viditelná právě u maticových a vektorových operacích, kde
i vytvoření řezu je nutné implementovat samostatnou funkcí.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Pomocný balíček <strong>gonum.org/v1/gonum/floats</strong></h2>

<p>Prvním balíčkem, s&nbsp;nímž se v&nbsp;dnešním článku setkáme, je pomocný
balíček (knihovna) s&nbsp;plným jménem
<strong>gonum.org/v1/gonum/floats</strong>, k&nbsp;jehož funkcím budeme
přistupovat pouze s&nbsp;využitím poslední části názvu &ndash;
<strong>floats</strong>. Tento balíček slouží k&nbsp;operacím prováděným nad
řezy (<i>slice</i>) a poli (<i>array</i>) hodnot typu <strong>float64</strong>.
Jedná se tedy o velmi užitečné rozšíření základní knihovny programovacího
jazyka Go, díky jehož existenci lze ušetřit psaní mnoha programových smyček
(nalezení maximálního či minimálního prvku, výpočet sumy všech prvků atd.).
Možnosti tohoto balíčku otestujeme přímo v&nbsp;interaktivní smyčce (REPL)
implementované v&nbsp;rámci projektu <i>Gomacro</i>, už jen z&nbsp;toho důvodu,
že v&nbsp;výstupů je patrná jak hodnota výsledku (výsledků), tak i její
typ.</p>

<p>Nejprve je pochopitelně nutné balíček importovat:</p>

<pre>
gomacro&gt; <strong>import "gonum.org/v1/gonum/floats"</strong>
</pre>

<p>Následně vytvoříme dvojici řezů, z&nbsp;nichž každý ukazuje na pole o šesti
prvcích (mnoho dále popsaných operací vyžaduje, aby oba řezy měly shodný počet
prvků):</p>

<pre>
gomacro&gt; <strong>x := []float64{1,2,3,4,5,6}</strong>
&nbsp;
gomacro&gt; <strong>y := []float64{1,5,3,5,5,0}</strong>
</pre>

<p>Funkce <strong>Min</strong> a <strong>Max</strong> vyhledají prvek
s&nbsp;poli s&nbsp;minimální resp.&nbsp;maximální hodnotou (vrací se přímo
hodnota takového prvku):</p>

<pre>
gomacro&gt; <strong>floats.Min(x)</strong>
1       // float64
&nbsp;
gomacro&gt; <strong>floats.Max(x)</strong>
6       // float64
</pre>

<p>Podobným způsobem lze najít <i>indexy</i> prvků s&nbsp;minimální
resp.&nbsp;maximální hodnotou:</p>

<pre>
gomacro&gt; <strong>floats.MinIdx(x)</strong>
0       // int
&nbsp;
gomacro&gt; <strong>floats.MaxIdx(x)</strong>
5       // int
&nbsp;
gomacro&gt; <strong>floats.MinIdx(y)</strong>
5       // int
&nbsp;
gomacro&gt; <strong>floats.MaxIdx(y)</strong>
1       // int
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že pokud existuje několik
prvků s&nbsp;totožnou hodnotou, vrátí se index prvního z&nbsp;nich.</div></p>

<p>Funkce <strong>Sum</strong> vrátí součet prvků v&nbsp;poli, funkce
<strong>Prod</strong> naopak výsledek součinu všech prvků:</p>

<pre>
gomacro&gt; <strong>floats.Sum(x)</strong>
21      // float64
&nbsp;
gomacro&gt; <strong>floats.Prod(x)</strong>
720     // float64
</pre>

<p>Porovnání všech prvků ve dvou řezech zajišťuje funkce
<strong>Equal</strong>:</p>

<pre>
gomacro&gt; <strong>floats.Equal(x,x)</strong>
true    // bool
</pre>

<p>Porovnání všech prvků, ovšem na podobnost (do určitého rozsahu), nikoli na
totožnost:</p>

<pre>
x := []float64{1, 2, 3, 4, 5, 6}
y := []float64{1, 2, 3, 4, 5, 6}
z := []float64{1.0, 2.2, 2.8, 4.2, 4.8, 6.0}
&nbsp;
fmt.Printf("x:   %v\n", x)
fmt.Printf("y:   %v\n", y)
fmt.Printf("z:   %v\n", z)
&nbsp;
fmt.Printf("x~=y (±0,10)?: %t\n", floats.EqualApprox(x, y, 0.1))
fmt.Printf("x~=z (±0,05)?: %t\n", floats.EqualApprox(x, z, 0.05))
fmt.Printf("x~=z (±0,09)?: %t\n", floats.EqualApprox(x, z, 0.09))
fmt.Printf("x~=z (±0,10)?: %t\n", floats.EqualApprox(x, z, 0.10))
fmt.Printf("x~=z (±0,11)?: %t\n", floats.EqualApprox(x, z, 0.11))
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
x:   [1 2 3 4 5 6]
y:   [1 2 3 4 5 6]
z:   [1 2.2 2.8 4.2 4.8 6]
&nbsp;
x~=y (±0,10)?: true
x~=z (±0,05)?: false
x~=z (±0,09)?: false
x~=z (±0,10)?: true
x~=z (±0,11)?: true
</pre>

<p><div class="rs-tip-major">Poznámka: existují i další možnosti porovnání,
například porovnání hodnot ze dvou řezů, přičemž dvě hodnoty
<strong>NaN</strong> (<i>Not a Number</i>) jsou považovány za shodné
(v&nbsp;obecném případě to ovšem neplatí, protože porovnání dvou
<strong>NaN</strong> na ekvivalenci vrací podle normy hodnotu
<strong>false</strong> a nikoli <strong>true</strong>).</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Další funkce z&nbsp;balíčku <strong>gonum.org/v1/gonum/floats</strong></h2>

<p>Popišme si ještě některé další vybrané funkce, které nalezneme
v&nbsp;balíčku <strong>gonum.org/v1/gonum/floats</strong>. Často používanou
funkcí je funkce provádějící skalární součin prvků ze dvou řezů o shodné
délce:</p>

<pre>
gomacro&gt; <strong>floats.Dot(x, x)</strong>
91      // float64
gomacro&gt; <strong>floats.Dot(x, y)</strong>
65      // float64
</pre>

<p>Následující dvě funkce nazvané <strong>Reverse</strong> a
<strong>Scale</strong> změní obsah původního řezu. Nejedná se tedy o funkce
v&nbsp;matematickém významu (což je zvláštní, protože toto chování neodpovídá
pravidlům, které knihovna <i>Gonum</i> v&nbsp;jiných balíčcích dodržuje).</p>

<p>Otočení všech prvků v&nbsp;řezu:</p>

<pre>
gomacro&gt; <strong>floats.Reverse(x)</strong>
&nbsp;
gomacro&gt; <strong>x</strong>
[6 5 4 3 2 1]   // []float64
</pre>

<p>Změna měřítka prvků (vynásobení každého prvku konstantou):</p>

<pre>
gomacro&gt; <strong>floats.Scale(10, x)</strong>
&nbsp;
gomacro&gt; <strong>x</strong>
[60 50 40 30 20 10]     // []float64
</pre>

<p>Užitečná je i funkce nazvaná <strong>Within</strong>, která vrací index
<i>i</i> takového prvku z&nbsp;řezu <i>s</i>, pro který platí <i>s[i] &lt;= v
&lt; s[i+1]</i>. Funkci lze použít pouze pro řezy, v&nbsp;nichž jsou prvky
seřazeny vzestupně a současně řez obsahuje alespoň dva prvky (tyto podmínky
jsou testovány a pokud nejsou splněny, vyvolá se <strong>panic</strong>):</p>

<pre>
gomacro&gt; <strong>x := []float64{1,2,3,4,5,6}</strong>
&nbsp;
gomacro&gt; <strong>floats.Within(x, 3)</strong>
2       // int
&nbsp;
gomacro&gt; <strong>floats.Within(x, 3.5)</strong>
2       // int
&nbsp;
gomacro&gt; <strong>floats.Within(x, 10)</strong>
-1      // int
</pre>

<p>Vypočítat můžeme i takzvanou kumulativní sumu, což je nový řez, jehož první
prvek je zkopírován z&nbsp;původního řezu, druhý prvek obsahuje hodnotu prvního
sečtenou z&nbsp;hodnotou druhého prvku atd.:</p>

<pre>
gomacro&gt; <strong>floats.CumSum(x, y)</strong>
[1 6 9 14 19 19]        // []float64
&nbsp;
gomacro&gt; <strong>floats.CumSum(x, x)</strong>
[1 7 16 30 49 68]       // []float64
</pre>

<p>Zajímavá je funkce nazvaná <strong>Argsort</strong>. Tato funkce setřídí řez
předaný v&nbsp;prvním parametru, navíc ovšem do dalšího řezu (ten musí být
vytvořen) vloží původní indexy prvků. Tento druhý řez tedy musí být typu
<strong>[]int</strong> a nikoli <strong>[]float64</strong>:</p>

<pre>
gomacro&gt; <strong>y</strong>
[1 5 3 5 5 0]   // []float64
&nbsp;
gomacro&gt; <strong>indexes := [6]int{}</strong>
&nbsp;
gomacro&gt; <strong>floats.Argsort(y, indexes)</strong>
</pre>

<p>Řez <strong>y</strong> by měl být po provedení operace
<strong>Argsort</strong> setříděn a navíc by řez <strong>indexes</strong> měl
obsahovat původní indexy v&nbsp;nesetříděném řezu:</p>

<pre>
gomacro&gt; <strong>y</strong>
[0 1 3 5 5 5]   // []float64
&nbsp;
gomacro&gt; <strong>indexes</strong>
[5 0 2 1 3 4]   // [6]int
</pre>

<p><div class="rs-tip-major">Poznámka: zajímavé v&nbsp;tomto kontextu je, že
balíček <i>Gonum</i> prozatím nenabízí plnohodnotné &bdquo;indexování&ldquo;
s&nbsp;využitím obsahu jiného řezu, tedy operaci, kterou najdeme jak
v&nbsp;jazyku Julia, tak i v&nbsp;knihovně <i>NumPy</i> pro programovací jazyk
Python.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Jednorozměrné vektory</h2>

<p>Nyní se vrátíme k&nbsp;popisu balíčku
<strong>gonum.org/v1/gonum/mat</strong>, s&nbsp;jehož základním použitím jsme
se již seznámili minule. Ovšem v&nbsp;předchozím článku jsme se zabývali
převážně popisem práce s&nbsp;běžnými čtvercovými a obdélníkovými maticemi, i
když možnosti tohoto balíčku jsou ve skutečnosti větší. Pracovat lze i
s&nbsp;vektory, které jsou (minimálně z&nbsp;pohledu balíčku
<strong>mat</strong>) sloupcové. Výchozím typem vektorů je datová struktura
<i>vecdense</i> představující vektor s&nbsp;měnitelnými (<i>mutable</i>) prvky.
Interně se jedná o pole prvků, a proto je zde použito slovo
&bdquo;dense&ldquo;</p>

<p>Nový sloupcový vektor se vytvoří konstruktorem nazvaným
<strong>NewVecDense</strong>, a to následujícím způsobem:</p>

<pre>
gomacro&gt; <strong>v := mat.NewVecDense(10, nil)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(v)</strong>
⎡0⎤
⎢0⎥
⎢0⎥
⎢0⎥
⎢0⎥
⎢0⎥
⎢0⎥
⎢0⎥
⎢0⎥
⎣0⎦     // fmt.Formatter
</pre>

<p>V&nbsp;případě, že budeme chtít vektor inicializovat prvky se známou
hodnotou, použijeme sice stejný konstruktor, ale namísto druhé hodnoty
<strong>nil</strong> lze předat řez s&nbsp;hodnotami typu
<strong>float64</strong>. Volání konstruktoru tedy bude vypadat následovně:</p>

<pre>
gomacro&gt; <strong>v := mat.NewVecDense(10, []float64{1,2,3,4,5,6,7,8,9,10})</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(v)</strong>
⎡ 1⎤
⎢ 2⎥
⎢ 3⎥
⎢ 4⎥
⎢ 5⎥
⎢ 6⎥
⎢ 7⎥
⎢ 8⎥
⎢ 9⎥
⎣10⎦    // fmt.Formatter
</pre>

<p>U vektorů lze zjistit jejich velikost (délka zde vlastně odpovídá výšce) a
taktéž kapacitu:</p>

<pre>
gomacro&gt; <strong>v.Len()</strong>
10      // int
&nbsp;
gomacro&gt; <strong>v.Cap()</strong>
10      // int
</pre>

<p>Metoda <strong>Dims</strong> vrací dimenzi vektoru &ndash; <i>n</i> řádků a
jeden sloupec:</p>

<pre>
gomacro&gt; <strong>v.Dims()</strong>
10      // int
1       // int
</pre>

<p>Pochopitelně je možné vytvořit i řádkový vektor o to maticovou operací
transpozice zapisovanou metodou se jménem <strong>T</strong>:</p>

<pre>
gomacro&gt; <strong>v.T()</strong>
{Matrix:0xc001792870}   // gonum.org/v1/gonum/mat.Matrix
&nbsp;
gomacro&gt; <strong>mat.Formatted(v.T())</strong>
[ 1   2   3   4   5   6   7   8   9  10]        // fmt.Formatter
</pre>

<p><div class="rs-tip-major">Poznámka: výsledkem je v&nbsp;tomto případě matice
s&nbsp;jedním řádkem.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Získání řezu (slice) z&nbsp;vektoru</h2>

<p>Často je zapotřebí z&nbsp;vektoru získat pouze určitou část. V&nbsp;případě
polí a řezů (jakožto základních datových typů programovacího jazyka Go) je pro
tento účel použit operátor <i>řezu</i> (<i>slice</i>), ovšem u vektorů typu
<i>vecdense</i> je namísto toho nutné použít metodu nazvanou
<strong>SliceVec</strong>. Použití této metody je snadné, i když nutno
podotknout, že ne tak čitelné, jako použití skutečného operátoru pro provedení
řezu.</p>

<p>Nejprve vytvoříme nový vektor s&nbsp;deseti prvky:</p>

<pre>
gomacro&gt; <strong>v := mat.NewVecDense(10, []float64{1,2,3,4,5,6,7,8,9,10})</strong>
</pre>

<p>Následně vytvoříme řez tvořený prvky s&nbsp;indexy 4 a 5:</p>

<pre>
gomacro&gt; <strong>mat.Formatted(v.SliceVec(4, 6))</strong>
⎡5⎤
⎣6⎦     // fmt.Formatter
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že první prvek řezu je
určen &bdquo;včetně&ldquo;, zatímco druhý prvek &bdquo;kromě&ldquo; (uzavřený
vs.&nbsp;otevřený interval).</div></p>

<p>Podobně lze vytvořit řez obsahující všechny původní prvky:</p>

<pre>
gomacro&gt; <strong>mat.Formatted(v.SliceVec(0, 9))</strong>
⎡1⎤
⎢2⎥
⎢3⎥
⎢4⎥
⎢5⎥
⎢6⎥
⎢7⎥
⎢8⎥
⎣9⎦     // fmt.Formatter
</pre>

<p>Indexy prvků musí být kladná čísla &ndash; jinými slovy to znamená, že není
povolena počítat indexy od konce vektoru tak, jak to známe z&nbsp;některých
jiných knihoven:</p>

<pre>
gomacro&gt; <strong>mat.Formatted(v.SliceVec(0, -1))</strong>
mat: index out of range
</pre>

<p>Řez vektoru je skutečným řezem ve smyslu, že se jedná o &bdquo;pohled&ldquo;
na původní vektor. V&nbsp;dalším příkladu vytvoříme řez nazvaný
<strong>w</strong>, jehož obsah je nepřímo změněn modifikací obsahu původního
vektoru <strong>v</strong>:</p>

<pre>
gomacro&gt; <strong>v := mat.NewVecDense(10, []float64{1,2,3,4,5,6,7,8,9,10})</strong>
&nbsp;
gomacro&gt; <strong>w := v.SliceVec(0, 9)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(w)</strong>
⎡1⎤
⎢2⎥
⎢3⎥
⎢4⎥
⎢5⎥
⎢6⎥
⎢7⎥
⎢8⎥
⎣9⎦     // fmt.Formatter
&nbsp;
gomacro&gt; <strong>v.SetVec(5, 100)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(w)</strong>
⎡  1⎤
⎢  2⎥
⎢  3⎥
⎢  4⎥
⎢  5⎥
⎢100⎥
⎢  7⎥
⎢  8⎥
⎣  9⎦   // fmt.Formatter
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Čtení a modifikace prvků vektoru</h2>

<p>Způsob nastavení nové hodnoty prvku vektoru jsme již viděli <a
href="#k05">v&nbsp;předchozí kapitole</a>. Pro tento účel se používá metoda
nazvaná <strong>SetVec</strong>; opět tedy platí, že nelze použít přetížený
operátor:</p>

<pre>
gomacro&gt; <strong>v := mat.NewVecDense(10, []float64{1,2,3,4,5,6,7,8,9,10})</strong>
&nbsp;
gomacro&gt; <strong>for i := 0; i &lt; v.Len(); i++ {</strong>
. . . .      <strong>v.SetVec(i, 1.0 / float64(i))</strong>
. . . .  <strong>}</strong>
</pre>

<p>Změněný vektor bude mít opět deset prvků:</p>

<pre>
gomacro&gt; <strong>mat.Formatted(v)</strong>
⎡               +Inf⎤
⎢                  1⎥
⎢                0.5⎥
⎢ 0.3333333333333333⎥
⎢               0.25⎥
⎢                0.2⎥
⎢0.16666666666666666⎥
⎢0.14285714285714285⎥
⎢              0.125⎥
⎣ 0.1111111111111111⎦   // fmt.Formatter
</pre>

<p>Existují dvě metody určené pro přečtení hodnoty prvku z&nbsp;vektoru. První
metoda se jmenuje <strong>At</strong> a používá se i pro čtení prvků
z&nbsp;dvourozměrných matic (u sloupcových vektorů je druhý index vždy
nulový):</p>

<pre>
gomacro&gt; <strong>for i := 0; i &lt; v.Len(); i++ {</strong>
. . . .    <strong>fmt.Printf("%10.6f\n", v.At(i, 0))</strong>
. . . .  <strong>}</strong>

      +Inf
  1.000000
  0.500000
  0.333333
  0.250000
  0.200000
  0.166667
  0.142857
  0.125000
  0.111111
</pre>

<p>Druhá metoda se jmenuje <strong>AtVec</strong> a předává se jí jen jediný
index:</p>

<pre>
gomacro&gt; <strong>for i := 0; i &lt; w.Len(); i++ {</strong>
. . . .      <strong>fmt.Printf("%10.6f\n", w.AtVec(i))</strong>
. . . .  <strong>}</strong>
&nbsp;
 10.000000
  0.000000
 20.000000
  0.000000
 30.000000
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Operace nad vektory</h2>

<p>V&nbsp;této kapitole si popíšeme některé další operace, které lze provádět
s&nbsp;vektory. Nejdříve vytvoříme dvojici vektorů, které budou použity
v&nbsp;dalších příkazech:</p>

<pre>
gomacro&gt; <strong>v1 := mat.NewVecDense(5, nil)</strong>
&nbsp;
gomacro&gt; <strong>v2 := mat.NewVecDense(5, []float64{1,0,2,0,3})</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(v1)</strong>
⎡0⎤
⎢0⎥
⎢0⎥
⎢0⎥
⎣0⎦     // fmt.Formatter
&nbsp;
gomacro&gt; <strong>mat.Formatted(v2)</strong>
⎡1⎤
⎢0⎥
⎢2⎥
⎢0⎥
⎣3⎦     // fmt.Formatter
</pre>

<p>Třetí vektor bude použit jako cíl pro některé operace:</p>

<pre>
gomacro&gt; <strong>v := mat.NewVecDense(5, nil)</strong>
</pre>

<p>Operace součtu dvou vektorů realizovaná metodou &ndash; modifikuje se
v&nbsp;ní příjemce (<i>receiver</i>):</p>

<pre>
gomacro&gt; <strong>v.AddVec(v1, v2)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(v)</strong>
⎡1⎤
⎢0⎥
⎢2⎥
⎢0⎥
⎣3⎦     // fmt.Formatter
&nbsp;
gomacro&gt; <strong>v.AddVec(v2, v2)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(v)</strong>
⎡2⎤
⎢0⎥
⎢4⎥
⎢0⎥
⎣6⎦     // fmt.Formatter
</pre>

<p>Operace rozdílu vektorů, opět s&nbsp;modifikací příjemce:</p>

<pre>
gomacro&gt; <strong>v.SubVec(v1, v2)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(v)</strong>
⎡-1⎤
⎢ 0⎥
⎢-2⎥
⎢ 0⎥
⎣-3⎦    // fmt.Formatter
</pre>

<p>Změna měřítka, tj.&nbsp;vynásobení všech prvků vektoru nějakou
konstantou:</p>

<pre>
gomacro&gt; <strong>v.ScaleVec(10.0, v2)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(v)</strong>
⎡10⎤
⎢ 0⎥
⎢20⎥
⎢ 0⎥
⎣30⎦    // fmt.Formatter
</pre>

<p>Vynásobení dvou vektorů stylem prvek po prvku (nejedná se o vektorový
součin):</p>

<pre>
gomacro&gt; <strong>v.MulElemVec(v2, v2)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(v)</strong>
⎡1⎤
⎢0⎥
⎢4⎥
⎢0⎥
⎣9⎦     // fmt.Formatter
</pre>

<p>Podporována je i operace vynásobení matice a vektoru, samozřejmě za
předpokladu, že počet sloupců matice bude odpovídat počtu řádků sloupcového
vektoru:</p>

<pre>
gomacro&gt; <strong>m := mat.NewDense(3, 3, []float64{1,0,0,0,1,0,0,0,1})</strong>
&nbsp;
gomacro&gt; <strong>v3 := mat.NewVecDense(3, []float64{2,3,4})</strong>
&nbsp;
gomacro&gt; <strong>v := mat.NewVecDense(3, nil)</strong>
&nbsp;
gomacro&gt; <strong>v.MulVec(m, v3)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(v)</strong>
⎡2⎤
⎢3⎥
⎣4⎦     // fmt.Formatter
</pre>

<p>Vynásobení vektoru maticí reprezentující otočení okolo z-ové osy o
90&deg;:</p>

<pre>
gomacro&gt; <strong>m := mat.NewDense(3, 3, []float64{0,-1,0,1,0,0,0,0,1})</strong>
&nbsp;
gomacro&gt; <strong>v.MulVec(m, v3)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(v)</strong>
⎡-3⎤
⎢ 2⎥
⎣ 4⎦    // fmt.Formatter
</pre>

<p>Skalární součin dvou vektorů o stejné velikosti:</p>

<pre>
gomacro&gt; <strong>mat.Dot(v1, v2)</strong>
0       // float64
&nbsp;
gomacro&gt; <strong>mat.Dot(v2, v2)</strong>
14      // float64
</pre>

<p>Získání prvku s&nbsp;největší a nejmenší hodnotou:</p>

<pre>
gomacro&gt; <strong>mat.Max(v)</strong>
4       // float64
&nbsp;
gomacro&gt; <strong>mat.Min(v)</strong>
-3      // float64
</pre>

<p>Součet všech prvků vektoru:</p>

<pre>
gomacro&gt; <strong>mat.Sum(v)</strong>
3       // float64
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Obecné dvourozměrné matice</h2>

<p>I obecné dvourozměrné matice byly popsány v&nbsp;předchozí části seriálu o
programovacím jazyce Go, takže si jen ve stručnosti shrňme některé základní
operace. Matici vytváříme konstruktorem <strong>NewDense</strong>:</p>

<pre>
gomacro&gt; <strong>d := mat.NewDense(6, 5, nil)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(d)</strong>
⎡0  0  0  0  0⎤
⎢0  0  0  0  0⎥
⎢0  0  0  0  0⎥
⎢0  0  0  0  0⎥
⎢0  0  0  0  0⎥
⎣0  0  0  0  0⎦ // fmt.Formatter
</pre>

<p>Konstrukce matice s&nbsp;inicializací jejich prvků:</p>

<pre>
gomacro&gt; <strong>d := mat.NewDense(4, 3, []float64{1,2,3,4,5,6,7,8,9,10,11,12})</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(d)</strong>
⎡ 1   2   3⎤
⎢ 4   5   6⎥
⎢ 7   8   9⎥
⎣10  11  12⎦    // fmt.Formatter
</pre>

<p>Druhá matice, tentokrát se třemi řádky a čtyřmi sloupci:</p>

<pre>
gomacro&gt; <strong>d := mat.NewDense(3, 4, []float64{1,2,3,4,5,6,7,8,9,10,11,12})</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(d)</strong>
⎡ 1   2   3   4⎤
⎢ 5   6   7   8⎥
⎣ 9  10  11  12⎦        // fmt.Formatter
</pre>

<p>Čtvercová matice 3&times;3 prvky:</p>

<pre>
gomacro&gt; <strong>m := mat.NewDense(3, 3, []float64{1,2,3,4,5,6,7,8,9})</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(m)</strong>
⎡1  2  3⎤
⎢4  5  6⎥
⎣7  8  9⎦       // fmt.Formatter
</pre>

<p>Přečtení i-tého sloupce matice. Výsledkem je v&nbsp;tomto případě běžný řez
programovacího jazyka Go:</p>

<pre>
gomacro&gt; <strong>mat.Col(nil, 0, m)</strong>
[1 4 7] // []float64
&nbsp;
gomacro&gt; <strong>mat.Col(nil, 1, m)</strong>
[2 5 8] // []float64
&nbsp;
gomacro&gt; <strong>mat.Col(nil, 2, m)</strong>
[3 6 9] // []float64
&nbsp;
gomacro&gt; <strong>mat.Col(nil, 3, m)</strong>
mat: column index out of range
</pre>

<p>Přečtení j-tého řádku matice. Výsledkem je v&nbsp;tomto případě opět běžný
řez programovacího jazyka Go:</p>

<pre>
gomacro&gt; <strong>mat.Row(nil, 0, m)</strong>
[1 2 3] // []float64
&nbsp;
gomacro&gt; <strong>mat.Row(nil, 1, m)</strong>
[4 5 6] // []float64
&nbsp;
gomacro&gt; <strong>mat.Row(nil, 2, m)</strong>
[7 8 9] // []float64
&nbsp;
gomacro&gt; <strong>mat.Row(nil, 3, m)</strong>
mat: column index out of range
</pre>

<p>Výpočet determinantu matice 3&times;3 prvky:</p>

<pre>
gomacro&gt; <strong>mat.Det(m)</strong>
6.66133814775094e-16    // float64
</pre>

<p>Opět můžeme použít funkce pro získání prvku s&nbsp;nejmenší hodnotou,
největší hodnotou a pro součet (sumu) všech prvků v&nbsp;matici:</p>

<pre>
gomacro&gt; <strong>mat.Min(m)</strong>
1       // float64
&nbsp;
gomacro&gt; <strong>mat.Max(m)</strong>
9       // float64
&nbsp;
gomacro&gt; <strong>mat.Sum(m)</strong>
45      // float64
</pre>

<p>Poslední zajímavou metodou je metoda, která vrací diagonální matici (všechny
prvky kromě prvků na hlavní diagonále jsou nulové):</p>

<pre>
gomacro&gt; <strong>mat.Formatted(m.DiagView())</strong>
⎡1  0  0⎤
⎢0  5  0⎥
⎣0  0  9⎦       // fmt.Formatter
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Symetrické matice</h2>

<p>V&nbsp;knihovně <strong>mat</strong> existuje i konstruktor pro symetrické
matice. Chování tohoto konstruktoru je ovšem poněkud zvláštní &ndash; předat je
mu totiž nutné všechny prvky odpovídající velikosti matice. Například pro
matici 3&times;3 prvky (symetrická matice je vždy čtvercová) je nutné
konstruktoru předat devět hodnot prvků, i když se z&nbsp;těchto hodnot použije
jen šest prvků (horní trojúhelníková matice):</p>

<pre>
gomacro&gt; <strong>s := mat.NewSymDense(3, []float64{1,2,3,4,5,6,7,8,9})</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(s)</strong>
⎡1  2  3⎤
⎢2  5  6⎥
⎣3  6  9⎦       // fmt.Formatter
</pre>

<p>Tyto matice mají zachovávají většinu základních vlastností běžných matic,
tj.&nbsp;můžeme například získat informace o jejich kapacitě, velikosti
(v&nbsp;jednotlivých dimenzích) atd.:</p>

<pre>
gomacro&gt; <strong>s.Caps()</strong>
3       // int
3       // int
&nbsp;
gomacro&gt; <strong>s.Dims()</strong>
3       // int
3       // int
</pre>

<p>Vytvořit je možné i transformovanou matici, což je ovšem jen kopie matice
původní:</p>

<pre>
gomacro&gt; <strong>mat.Formatted(s.T())</strong>
⎡1  2  3⎤
⎢2  5  6⎥
⎣3  6  9⎦       // fmt.Formatter
</pre>

<p>Prvky symetrické matice se nastavují metodou <strong>SetSym</strong> (jiná
metoda ani není k&nbsp;dispozici). Tato metoda pochopitelně zachovává
&bdquo;symetričnost&ldquo; matice, tj.&nbsp;změní se buď jeden prvek na hlavní
diagonále nebo dvojice prvků:</p>

<pre>
gomacro&gt; <strong>s.SetSym(1, 0, -100)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(s)</strong>
⎡   1  -100     3⎤
⎢-100     5     6⎥
⎣   3     6     9⎦      // fmt.Formatter
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Diagonální matice</h2>

<p>Další variantou matic jsou diagonální matice. Ty lze vytvořit konstruktorem
<strong>NewDiagDense</strong>:</p>

<pre>
gomacro&gt; <strong>d := mat.NewDiagDense(10, nil)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(d)</strong>
⎡0  0  0  0  0  0  0  0  0  0⎤
⎢0  0  0  0  0  0  0  0  0  0⎥
⎢0  0  0  0  0  0  0  0  0  0⎥
⎢0  0  0  0  0  0  0  0  0  0⎥
⎢0  0  0  0  0  0  0  0  0  0⎥
⎢0  0  0  0  0  0  0  0  0  0⎥
⎢0  0  0  0  0  0  0  0  0  0⎥
⎢0  0  0  0  0  0  0  0  0  0⎥
⎢0  0  0  0  0  0  0  0  0  0⎥
⎣0  0  0  0  0  0  0  0  0  0⎦  // fmt.Formatter
</pre>

<p>Konstruktoru je možné předat hodnoty všech prvků na hlavní diagonále:</p>

<pre>
gomacro&gt; <strong>d := mat.NewDiagDense(10, []float64{1,2,3,4,5,6,7,8,9,10})</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(d)</strong>
⎡ 1   0   0   0   0   0   0   0   0   0⎤
⎢ 0   2   0   0   0   0   0   0   0   0⎥
⎢ 0   0   3   0   0   0   0   0   0   0⎥
⎢ 0   0   0   4   0   0   0   0   0   0⎥
⎢ 0   0   0   0   5   0   0   0   0   0⎥
⎢ 0   0   0   0   0   6   0   0   0   0⎥
⎢ 0   0   0   0   0   0   7   0   0   0⎥
⎢ 0   0   0   0   0   0   0   8   0   0⎥
⎢ 0   0   0   0   0   0   0   0   9   0⎥
⎣ 0   0   0   0   0   0   0   0   0  10⎦        // fmt.Formatter
</pre>

<p>A opět jsou k&nbsp;dispozici metody pro získání základních informací o
existující matici:</p>

<pre>
gomacro&gt; <strong>d.Diag()</strong>
10      // int
&nbsp;
gomacro&gt; <strong>d.Dims()</strong>
10      // int
10      // int
</pre>

<p>Pro nastavení hodnoty prvku diagonální matice se používá metoda
<strong>SetDiag</strong>:</p>

<pre>
gomacro&gt; <strong>d := mat.NewDiagDense(10, []float64{1,2,3,4,5,6,7,8,9,10})</strong>
&nbsp;
gomacro&gt; <strong>d.SetDiag(1, 100)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(d)</strong>
⎡  1    0    0    0    0    0    0    0    0    0⎤
⎢  0  100    0    0    0    0    0    0    0    0⎥
⎢  0    0    3    0    0    0    0    0    0    0⎥
⎢  0    0    0    4    0    0    0    0    0    0⎥
⎢  0    0    0    0    5    0    0    0    0    0⎥
⎢  0    0    0    0    0    6    0    0    0    0⎥
⎢  0    0    0    0    0    0    7    0    0    0⎥
⎢  0    0    0    0    0    0    0    8    0    0⎥
⎢  0    0    0    0    0    0    0    0    9    0⎥
⎣  0    0    0    0    0    0    0    0    0   10⎦      // fmt.Formatter
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Trojúhelníkové matice</h2>

<p>V&nbsp;knihovně <strong>mat</strong> jsou vývojářům k&nbsp;dispozici i
funkce a metody určené pro práci s&nbsp;trojúhelníkovými maticemi. Opět si
nejprve řekněme, jakým způsobem se tyto matice vytváří. Použít můžeme
konstruktor <strong>NewTriDense</strong>, kterému se předává jak velikost
trojúhelníkové matice (je pochopitelně čtvercová), tak i to, zda se jedná o
horní či dolní trojúhelníkovou matici. A opět platí, že je nutné zapsat všechny
prvky trojúhelníkové matice, i když se ve skutečnosti využijí pouze hodnoty
prvků na hlavní diagonále a horním resp.&nbsp;dolním trojúhelníku.</p>

<p>Horní trojúhelníková matice se vytváří takto:</p>

<pre>
gomacro&gt; <strong>t1 := mat.NewTriDense(3, mat.Upper, []float64{1,2,3,4,5,6,7,8,9})</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(t1)</strong>
⎡1  2  3⎤
⎢0  5  6⎥
⎣0  0  9⎦       // fmt.Formatter
</pre>

<p>Dolní trojúhelníková matice inicializovaná shodnými hodnotami se konstruuje
následovně:</p>

<pre>
gomacro&gt; <strong>t2 := mat.NewTriDense(3, mat.Lower, []float64{1,2,3,4,5,6,7,8,9})</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(t2)</strong>
⎡1  0  0⎤
⎢4  5  0⎥
⎣7  8  9⎦       // fmt.Formatter
</pre>

<p>Získat můžeme pohled obsahující pouze prvky na hlavní diagonále:</p>

<pre>
gomacro&gt; <strong>mat.Formatted(t1.DiagView())</strong>
⎡1  0  0⎤
⎢0  5  0⎥
⎣0  0  9⎦       // fmt.Formatter
&nbsp;
gomacro&gt; <strong>mat.Formatted(t2.DiagView())</strong>
⎡1  0  0⎤
⎢0  5  0⎥
⎣0  0  9⎦       // fmt.Formatter
</pre>

<p>Trojúhelníkové matice lze transponovat, čímž se z&nbsp;horní matice stane
dolní a naopak:</p>

<pre>
gomacro&gt; <strong>mat.Formatted(t1.T())</strong>
⎡1  0  0⎤
⎢2  5  0⎥
⎣3  6  9⎦       // fmt.Formatter
&nbsp;
gomacro&gt; <strong>mat.Formatted(t2.T())</strong>
⎡1  4  7⎤
⎢0  5  8⎥
⎣0  0  9⎦       // fmt.Formatter
</pre>

<p>Pro nastavení hodnot prvků trojúhelníkové matice slouží metoda
<strong>NewTriDense</strong>, která zajistí, aby se neměnily prvky v&nbsp;té
části trojúhelníkové matice, které musí být nulové:</p>

<pre>
gomacro&gt; <strong>t1 := mat.NewTriDense(3, mat.Upper, []float64{1,2,3,4,5,6,7,8,9})</strong>
&nbsp;
gomacro&gt; <strong>t1.SetTri(2, 0, 100)</strong>
mat: triangular set out of bounds
&nbsp;
gomacro&gt; <strong>t1.SetTri(0, 2, 100)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(t1)</strong>
⎡  1    2  100⎤
⎢  0    5    6⎥
⎣  0    0    9⎦ // fmt.Formatter
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Balíček <strong>stat</strong></h2>

<p>Třetím balíčkem, s&nbsp;jehož možnostmi se dnes ve stručnosti seznámíme, je
balíček nazvaný <strong>stat</strong>. Najdeme v&nbsp;něm různé funkce a
metody, které se týkají především statistických výpočtů, ovšem například i
lineární regrese (proložení naměřených či vypočtených bodů úsečkou) apod.
Většina základních funkcí pracuje s&nbsp;hodnotami uloženými v&nbsp;řezu hodnot
typu <strong>float64</strong>, většinou doplněných o další řez obsahující váhy
hodnot (výchozí váhou je 1.0).  Podrobnější informace o možnostech tohoto
balíčku budou uvedeny příště.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Výpočet průměrů, rozptylů a směrodatných odchylek</h2>

<p>Základní funkcí, která má všeobecné využití, je výpočet aritmetického
průměru (<i>AM=Arithmetic Mean</i>). Tato funkce se v&nbsp;knihovně
<strong>stat</strong> jmenuje <strong>Mean</strong>. Této funkci se předává řez
s&nbsp;hodnotami a popř.&nbsp;i další řez s&nbsp;vahami. Pokud je druhým
parametrem hodnota <strong>nil</strong>, budou váhy všech prvků rovny 1.0:</p>

<pre>
gomacro&gt; <strong>stat.Mean([]float64{1,2,3,4,5}, nil)</strong>
3       // float64
&nbsp;
gomacro&gt; <strong>stat.Mean([]float64{1,2,3,4,5}, []float64{1,1,1,1,1})</strong>
3       // float64
&nbsp;
gomacro&gt; <strong>stat.Mean([]float64{1,2,3,4,5}, []float64{1,1,1,1,10})</strong>
4.285714285714286       // float64
</pre>

<p>K&nbsp;dispozici je i funkce pro výpočet geometrického průměru
(<i>GM=Geometric Mean</i>) se stejnými vlastnostmi, jako je tomu u výše zmíněné
funkce <strong>Mean</strong>:</p>

<pre>
gomacro&gt; <strong>stat.GeometricMean([]float64{1,2,3,4,5}, nil)</strong>
2.605171084697352       // float64
&nbsp;
gomacro&gt; <strong>stat.GeometricMean([]float64{1,2,3,4,5}, []float64{1,1,1,1,1})</strong>
2.605171084697352       // float64
&nbsp;
gomacro&gt; <strong>stat.GeometricMean([]float64{1,2,3,4,5}, []float64{1,1,1,1,10})</strong>
3.9614192356754674      // float64
</pre>

<p>Vypočítat lze i harmonický průměr (<i>HM=Harmonic Mean</i>), a to
s&nbsp;využitím funkce <strong>HarmonicMean</strong>:</p>

<pre>
gomacro&gt; <strong>stat.HarmonicMean([]float64{1,2,3,4,5}, nil)</strong>
2.1897810218978098      // float64
&nbsp;
gomacro&gt; <strong>stat.HarmonicMean([]float64{1,2,3,4,5}, []float64{1,1,1,1,1})</strong>
2.1897810218978098      // float64
&nbsp;
gomacro&gt; <strong>stat.HarmonicMean([]float64{1,2,3,4,5}, []float64{1,1,1,1,10})</strong>
3.4285714285714293      // float64
</pre>

<p>V&nbsp;dalších příkladech budeme používat pole o sto prvcích naplněné
náhodnými hodnotami:</p>

<pre>
gomacro&gt; <strong>import "math/rand"</strong>
&nbsp;
gomacro&gt; <strong>ys := [100]float64{}</strong>
&nbsp;
gomacro&gt; <strong>for i := 0; i &lt; len(ys); i++ {</strong>
. . . .      <strong>ys[i] = 50.0 - float64(i) + 2.0*rand.Float64() - 1.0</strong>
. . . .  <strong>}</strong>
</pre>

<p>Výpočet aritmetického průměru:</p>

<pre>
gomacro&gt; <strong>stat.Mean(ys[:], nil)</strong>
0.48154185382982606     // float64
</pre>

<p>Výpočet směrodatné odchylky a standardní chyby (SE):</p>

<pre>
gomacro&gt; <strong>stat.StdDev(ys[:], nil)</strong>
28.95847713231853       // float64
&nbsp;
gomacro&gt; <strong>stat.StdErr(stat.StdDev(ys[:], nil), 100)</strong>
2.895847713231853       // float64
</pre>

<p>Aritmetický průměr i směrodatnou odchylku lze vypočítat jedinou funkcí
<strong>MeanStdDev</strong>, která vrací dvojici hodnot:</p>

<pre>
gomacro&gt; <strong>stat.MeanStdDev(ys[:], nil)</strong>
0.48154185382982606     // float64
28.95847713231853       // float64
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Výpočet entropie</h2>

<p>Vypočítat lze i entropii pro hodnoty, které se v&nbsp;sekvenci vyskytují
s&nbsp;různou pravděpodobností. Touto funkcí a jejím konkrétním významem se
budeme podrobněji zabývat příště, takže jen krátce:</p>

<pre>
gomacro&gt; <strong>stat.Entropy([]float64{0.25, 0.25, 0.25, 0.25})</strong>
1.3862943611198906      // float64
&nbsp;
gomacro&gt; <strong>stat.Entropy([]float64{0.20, 0.20, 0.20, 0.40})</strong>
1.3321790402101223      // float64
&nbsp;
gomacro&gt; <strong>stat.Entropy([]float64{0.10, 0.10, 0.10, 0.70})</strong>
0.9404479886553264      // float64
&nbsp;
gomacro&gt; <strong>stat.Entropy([]float64{0.00, 0.00, 0.00, 1.00})</strong>
0       // float64
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;posledním příkladu se hodnoty
vyskytovaly se 100% pravděpodobností, takže entropie takové zprávy je
nulová.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Korelace</h2>

<p>V&nbsp;knihovně <strong>stat</strong> nalezneme i funkce pro výpočet
korelace. Nejdříve si však připravíme dvojici řezů, které pro výpočet korelace
využijeme:</p>

<pre>
gomacro&gt; <strong>x := []float64{1,2,3,4,5,6}</strong>
&nbsp;
gomacro&gt; <strong>y := []float64{1,5,3,5,5,0}</strong>
</pre>

<p>Korelace řezu se sebou samým:</p>

<pre>
gomacro&gt; <strong>stat.Correlation(x, x, nil)</strong>
1       // float64
&nbsp;
gomacro&gt; <strong>stat.Correlation(y, y, nil)</strong>
1       // float64
</pre>

<p>Korelace mezi dvěma řezy:</p>

<pre>
gomacro&gt; <strong>stat.Correlation(x, y, nil)</strong>
-0.07195396418966687    // float64
</pre>

<p>Korelace mezi různými řezy, jejichž korespondující prvky se vždy liší pouze
o jedničku:</p>

<pre>
gomacro&gt; <strong>z := []float64{2,3,4,5,6,7}</strong>
&nbsp;
gomacro&gt; <strong>stat.Correlation(x, z, nil)</strong>
1       // float64
</pre>

<p>V&nbsp;dalším příkladu vypočítáme korelaci mezi vzestupnou a sestupnou řadou
šesti hodnot (zde se jedná o antikorelaci):</p>

<pre>
gomacro&gt; <strong>w := []float64{6,5,4,3,2,1}</strong>
&nbsp;
gomacro&gt; <strong>stat.Correlation(x, w, nil)</strong>
-1      // float64
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Kovariance</h2>

<p>Pro výpočet kovariance (<a
href="https://cs.wikipedia.org/wiki/Kovariance">https://cs.wikipedia.org/wiki/Kovariance</a>)
slouží funkce <strong>Covariance</strong>, která může sloužit pro zjištění, zda
jsou dvě veličiny či naměřené hodnoty na sobě lineárně závislé či nikoli:</p>

<pre>
gomacro&gt; <strong>stat.Covariance(x, x, nil)</strong>
3.5     // float64
&nbsp;
gomacro&gt; <strong>stat.Covariance(x, y, nil)</strong>
-0.3    // float64
&nbsp;
gomacro&gt; <strong>stat.Covariance(x, z, nil)</strong>
3.5     // float64
&nbsp;
gomacro&gt; <strong>stat.Covariance(x, w, nil)</strong>
-3.5    // float64
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Lineární regrese</h2>

<p>Poslední funkcí, se kterou se dnes setkáme, je funkce určená pro výpočet
lineární regrese (tedy proložení úsečky naměřenými hodnotami). Nejdříve si
připravíme dvojici řezů obsahujících x-ové a y-ové hodnoty:</p>

<pre>
gomacro&gt; <strong>xs := []float64{1,2,3,4,5}</strong>
gomacro&gt; <strong>ys := []float64{2,3,4,5,6}</strong>
</pre>

<p>Dále vypočteme posun a směrnici úsečky, kterou proložíme mezi naměřenými
body (tato úsečka bude procházet všemi body):</p>

<pre>
gomacro&gt; <strong>stat.LinearRegression(xs, ys, nil, false)</strong>
1       // float64
1       // float64
</pre>

<p>Posledním parametrem si můžeme vynutit, aby úsečka procházela počátkem
souřadného systému (což ovšem pro tyto konkrétní hodnoty moc nedává
význam):</p>

<pre>
gomacro&gt; <strong>stat.LinearRegression(xs, ys, nil, true)</strong>
0       // float64
1.2727272727272727      // float64
</pre>

<p>Zkusme nyní použít odlišné hodnoty, které představují body na úsečce, která
neprochází počátkem souřadného systému:</p>

<pre>
gomacro&gt; <strong>xs := []float64{1,2,3,4,5}</strong>
&nbsp;
gomacro&gt; <strong>ys := []float64{-2,0,2,4,6}</strong>
&nbsp;
gomacro&gt; <strong>stat.LinearRegression(xs, ys, nil, false)</strong>
-4      // float64
2       // float64
</pre>

<p>Nyní je posun roven -4 a směrnice 2.</p>

<p>Praktičtěji zaměřený příklad pro body, které se nepatrně odchylují od
ideálního průběhu funkce:</p>

<pre>
gomacro&gt; <strong>import "math/rand"</strong>
gomacro&gt; <strong>xs := [100]float64{}</strong>
gomacro&gt; <strong>ys := [100]float64{}</strong>
gomacro&gt; <strong>for i := 0; i &lt; len(xs); i++ {</strong>
. . . .      <strong>xs[i] = float64(i)</strong>
. . . .  <strong>}</strong>
</pre>

<p>Výpočet y-ových souřadnic bodů:</p>

<pre>
gomacro&gt; <strong>for i := 0; i &lt; len(ys); i++ {</strong>
. . . .      <strong>ys[i] = 50.0 - float64(i) + 2.0*rand.Float64() - 1.0</strong>
. . . .  <strong>}</strong>
</pre>

<p>Výpočet lineární regrese (posunu a směrnice):</p>

<pre>
gomacro&gt; <strong>stat.LinearRegression(xs[:], ys[:], nil, false)</strong>
49.88218549333264       // float64
-0.9979928007980367     // float64
</pre>

<img src="https://i.iinfo.cz/images/477/bar-graph-1.png" class="image-400679" alt="&#160;" width="580" height="400" />
<p><i>Obrázek 1: Průběh funkce (s&nbsp;náhodnými výchylkami), kterou lze
proložit úsečkou s&nbsp;posunem cca 50 a směrnicí cca -1.0.</i></p>

<p>Můžeme si vynutit, aby úsečka procházela počátkem souřadného systému (což
opět pro tyto konkrétní hodnoty nemá význam):</p>

<pre>
gomacro&gt; <strong>stat.LinearRegression(xs[:], ys[:], nil, true)</strong>
0       // float64
-0.24600005466739383    // float64
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah následující části seriálu</h2>

<p>V&nbsp;navazující části <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">seriálu o
programovacím jazyku Go</a> si ukážeme možnosti nabízené dalšími balíčky
z&nbsp;knihovny <i>Gonum</i>. Bude se jednat zejména o balíčky s&nbsp;funkcemi
pro numerickou derivaci a integraci, práci s&nbsp;náhodnými hodnotami
(resp.&nbsp;jejich sekvencemi), práci s&nbsp;grafovými strukturami aj.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně pět až šest megabajtů), můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>floats01.go</td><td>nalezení minimální a maximální hodnoty, výpočet sumy a produktu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/floats01.go">https://github.com/tisnik/go-root/blob/master/article_49/floats01.go</a></td></tr>
<tr><td> 2</td><td>floats02.go</td><td>nalezení indexu prvku s&nbsp;minimální resp.&nbsp;maximální hodnotou</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/floats02.go">https://github.com/tisnik/go-root/blob/master/article_49/floats02.go</a></td></tr>
<tr><td> 3</td><td>floats03.go</td><td>otočení prvků a změna měřítka</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/floats03.go">https://github.com/tisnik/go-root/blob/master/article_49/floats03.go</a></td></tr>
<tr><td> 4</td><td>floats04.go</td><td>přičtení, odečtení, vynásobení a vydělení řezu od jiného řezu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/floats04.go">https://github.com/tisnik/go-root/blob/master/article_49/floats04.go</a></td></tr>
<tr><td> 5</td><td>floats05.go</td><td>součet hodnot ze dvou řezů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/floats05.go">https://github.com/tisnik/go-root/blob/master/article_49/floats05.go</a></td></tr>
<tr><td> 6</td><td>floats06.go</td><td>rozdíl hodnot ze dvou řezů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/floats06.go">https://github.com/tisnik/go-root/blob/master/article_49/floats06.go</a></td></tr>
<tr><td> 7</td><td>floats07.go</td><td>součin hodnot ze dvou řezů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/floats07.go">https://github.com/tisnik/go-root/blob/master/article_49/floats07.go</a></td></tr>
<tr><td> 8</td><td>floats08.go</td><td>podíl hodnot ze dvou řezů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/floats08.go">https://github.com/tisnik/go-root/blob/master/article_49/floats08.go</a></td></tr>
<tr><td> 9</td><td>floats09.go</td><td>porovnání hodnot ze dvou řezů na shodnost</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/floats09.go">https://github.com/tisnik/go-root/blob/master/article_49/floats09.go</a></td></tr>
<tr><td>10</td><td>floats10.go</td><td>porovnání hodnot ze dvou řezů na podobnost</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/floats10.go">https://github.com/tisnik/go-root/blob/master/article_49/floats10.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>mat11.go</td><td>konstrukce jednorozměrného vektoru</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat11.go">https://github.com/tisnik/go-root/blob/master/article_49/mat11.go</a></td></tr>
<tr><td>12</td><td>mat12.go</td><td>konstrukce jednorozměrného vektoru s&nbsp;inicializací prvků</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat12.go">https://github.com/tisnik/go-root/blob/master/article_49/mat12.go</a></td></tr>
<tr><td>13</td><td>mat13.go</td><td>vytvoření řádkového vektoru transpozicí vektoru sloupcového</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat13.go">https://github.com/tisnik/go-root/blob/master/article_49/mat13.go</a></td></tr>
<tr><td>14</td><td>mat14.go</td><td>součet dvou vektorů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat14.go">https://github.com/tisnik/go-root/blob/master/article_49/mat14.go</a></td></tr>
<tr><td>15</td><td>mat15.go</td><td>rozdíl dvou vektorů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat15.go">https://github.com/tisnik/go-root/blob/master/article_49/mat15.go</a></td></tr>
<tr><td>16</td><td>mat16.go</td><td>vynásobení prvků vektorů konstantou</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat16.go">https://github.com/tisnik/go-root/blob/master/article_49/mat16.go</a></td></tr>
<tr><td>17</td><td>mat17.go</td><td>vynásobení prvků dvou vektorů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat17.go">https://github.com/tisnik/go-root/blob/master/article_49/mat17.go</a></td></tr>
<tr><td>18</td><td>mat18.go</td><td>vynásobení vektoru a matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat18.go">https://github.com/tisnik/go-root/blob/master/article_49/mat18.go</a></td></tr>
<tr><td>19</td><td>mat19.go</td><td>vynásobení vektoru a matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat19.go">https://github.com/tisnik/go-root/blob/master/article_49/mat19.go</a></td></tr>
<tr><td>20</td><td>mat20.go</td><td>další operace s&nbsp;vektory</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat20.go">https://github.com/tisnik/go-root/blob/master/article_49/mat20.go</a></td></tr>
<tr><td>21</td><td>mat21.go</td><td>konstrukce symetrické matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat21.go">https://github.com/tisnik/go-root/blob/master/article_49/mat21.go</a></td></tr>
<tr><td>22</td><td>mat22.go</td><td>základní vlastnosti symetrické matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat22.go">https://github.com/tisnik/go-root/blob/master/article_49/mat22.go</a></td></tr>
<tr><td>23</td><td>mat23.go</td><td>základní vlastnosti symetrické matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat23.go">https://github.com/tisnik/go-root/blob/master/article_49/mat23.go</a></td></tr>
<tr><td>24</td><td>mat24.go</td><td>metody běžné obdélníkové matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat24.go">https://github.com/tisnik/go-root/blob/master/article_49/mat24.go</a></td></tr>
<tr><td>25</td><td>mat25.go</td><td>získání diagonály matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat25.go">https://github.com/tisnik/go-root/blob/master/article_49/mat25.go</a></td></tr>
<tr><td>26</td><td>mat26.go</td><td>získání i-tého sloupce či j-tého řádku matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat26.go">https://github.com/tisnik/go-root/blob/master/article_49/mat26.go</a></td></tr>
<tr><td>27</td><td>mat27.go</td><td>konstrukce diagonální matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat27.go">https://github.com/tisnik/go-root/blob/master/article_49/mat27.go</a></td></tr>
<tr><td>28</td><td>mat28.go</td><td>základní vlastnosti diagonální matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat28.go">https://github.com/tisnik/go-root/blob/master/article_49/mat28.go</a></td></tr>
<tr><td>29</td><td>mat29.go</td><td>základní vlastnosti diagonální matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat29.go">https://github.com/tisnik/go-root/blob/master/article_49/mat29.go</a></td></tr>
<tr><td>30</td><td>mat30.go</td><td>konstrukce trojúhelníkové matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat30.go">https://github.com/tisnik/go-root/blob/master/article_49/mat30.go</a></td></tr>
<tr><td>31</td><td>mat31.go</td><td>základní vlastnosti trojúhelníkové matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat31.go">https://github.com/tisnik/go-root/blob/master/article_49/mat31.go</a></td></tr>
<tr><td>32</td><td>mat32.go</td><td>základní vlastnosti trojúhelníkové matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/mat32.go">https://github.com/tisnik/go-root/blob/master/article_49/mat32.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>stat01.go</td><td>výpočet průměrů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/stat01.go">https://github.com/tisnik/go-root/blob/master/article_49/stat01.go</a></td></tr>
<tr><td>34</td><td>stat02.go</td><td>výpočet geometrického průměru</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/stat02.go">https://github.com/tisnik/go-root/blob/master/article_49/stat02.go</a></td></tr>
<tr><td>35</td><td>stat03.go</td><td>výpočet harmonického průměru</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/stat03.go">https://github.com/tisnik/go-root/blob/master/article_49/stat03.go</a></td></tr>
<tr><td>36</td><td>stat04.go</td><td>výpočet směrodatné odchylky a standardní chyby</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/stat03.go">https://github.com/tisnik/go-root/blob/master/article_49/stat04.go</a></td></tr>
<tr><td>37</td><td>stat05.go</td><td>výpočet průměru a standardní chyby jedinou funkcí</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_49/stat03.go">https://github.com/tisnik/go-root/blob/master/article_49/stat05.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>The Gonum Numerical Computing Package<br />
<a href="https://www.gonum.org/post/introtogonum/">https://www.gonum.org/post/introtogonum/</a>
</li>

<li>Gomacro na GitHubu<br />
<a href="https://github.com/cosmos72/gomacro">https://github.com/cosmos72/gomacro</a>
</li>

<li>gophernotes - Use Go in Jupyter notebooks and nteract<br />
<a href="https://github.com/gopherdata/gophernotes">https://github.com/gopherdata/gophernotes</a>
</li>

<li>gonum<br />
<a href="https://github.com/gonum">https://github.com/gonum</a>
</li>

<li>go-gota/gota -  DataFrames and data wrangling in Go (Golang)<br />
<a href="https://porter.io/github.com/go-gota/gota">https://porter.io/github.com/go-gota/gota</a>
</li>

<li>A repository for plotting and visualizing data <br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>Gonum Numerical Packages<br />
<a href="https://www.gonum.org/">https://www.gonum.org/</a>
</li>

<li>Stránky projektu MinIO<br />
<a href="https://min.io/">https://min.io/</a>
</li>

<li>MinIO Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-quickstart-guide.html">https://docs.min.io/docs/minio-quickstart-guide.html</a>
</li>

<li>MinIO Go Client API Reference<br />
<a href="https://docs.min.io/docs/golang-client-api-reference">https://docs.min.io/docs/golang-client-api-reference</a>
</li>

<li>MinIO Python Client API Reference<br />
<a href="https://docs.min.io/docs/python-client-api-reference.html">https://docs.min.io/docs/python-client-api-reference.html</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>MinIO Client Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a>
</li>

<li>Analýza kvality zdrojových kódů Minia<br />
<a href="https://goreportcard.com/report/github.com/minio/minio">https://goreportcard.com/report/github.com/minio/minio</a>
</li>

<li>This is MinIO<br />
<a href="https://www.youtube.com/watch?v=vF0lQh0XOCs">https://www.youtube.com/watch?v=vF0lQh0XOCs</a>
</li>

<li>Running MinIO Standalone<br />
<a href="https://www.youtube.com/watch?v=dIQsPCHvHoM">https://www.youtube.com/watch?v=dIQsPCHvHoM</a>
</li>

<li>"Amazon S3 Compatible Storage in Kubernetes" - Rob Girard, Principal Tech Marketing Engineer, Minio<br />
<a href="https://www.youtube.com/watch?v=wlpn8K0jJ4U">https://www.youtube.com/watch?v=wlpn8K0jJ4U</a>
</li>

<li>Ginkgo<br />
<a href="http://onsi.github.io/ginkgo/">http://onsi.github.io/ginkgo/</a>
</li>

<li>Gomega<br />
<a href="https://onsi.github.io/gomega/">https://onsi.github.io/gomega/</a>
</li>

<li>Ginkgo's Preferred Matcher Library na GitHubu<br />
<a href="https://github.com/onsi/gomega/">https://github.com/onsi/gomega/</a>
</li>

<li>Provided Matchers<br />
<a href="http://onsi.github.io/gomega/#provided-matchers">http://onsi.github.io/gomega/#provided-matchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku goexpect<br />
<a href="https://godoc.org/github.com/google/goexpect">https://godoc.org/github.com/google/goexpect</a>
</li>

<li>Balíček goexpect<br />
<a href="https://github.com/google/goexpect">https://github.com/google/goexpect</a>
</li>

<li>Balíček go-expect<br />
<a href="https://github.com/Netflix/go-expect">https://github.com/Netflix/go-expect</a>
</li>

<li>Balíček gexpect<br />
<a href="https://github.com/ThomasRooney/gexpect">https://github.com/ThomasRooney/gexpect</a>
</li>

<li>Expect (originál naprogramovaný v&nbsp;TCL)<br />
<a href="https://core.tcl-lang.org/expect/index">https://core.tcl-lang.org/expect/index</a>
</li>

<li>Expect (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Expect">https://en.wikipedia.org/wiki/Expect</a>
</li>

<li>Pexpect<br />
<a href="https://pexpect.readthedocs.io/en/stable/">https://pexpect.readthedocs.io/en/stable/</a>
</li>

<li>Golang SSH Client: Multiple Commands, Crypto &amp; Goexpect Examples<br />
<a href="http://networkbit.ch/golang-ssh-client/">http://networkbit.ch/golang-ssh-client/</a>
</li>

<li>goblin na GitHubu<br />
<a href="https://github.com/franela/goblin">https://github.com/franela/goblin</a>
</li>

<li>Mocha framework<br />
<a href="https://mochajs.org/">https://mochajs.org/</a>
</li>

<li>frisby na GitHubu<br />
<a href="https://github.com/verdverm/frisby">https://github.com/verdverm/frisby</a>
</li>

<li>package frisby<br />
<a href="https://godoc.org/github.com/verdverm/frisby">https://godoc.org/github.com/verdverm/frisby</a>
</li>

<li>Frisby alternatives and similar packages (generováno)<br />
<a href="https://go.libhunt.com/frisby-alternatives">https://go.libhunt.com/frisby-alternatives</a>
</li>

<li>Cucumber for golang<br />
<a href="https://github.com/DATA-DOG/godog">https://github.com/DATA-DOG/godog</a>
</li>

<li>How to Use Godog for Behavior-driven Development in Go<br />
<a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go</a>
</li>

<li>Comparative Analysis Of GoLang Testing Frameworks<br />
<a href="https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks">https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks</a>
</li>

<li>A Quick Guide to Testing in Golang<br />
<a href="https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/">https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/</a>
</li>

<li>Tom's Obvious, Minimal Language.<br />
<a href="https://github.com/toml-lang/toml">https://github.com/toml-lang/toml</a>
</li>

<li>xml.org<br />
<a href="http://www.xml.org/">http://www.xml.org/</a>
</li>

<li>Soubory .properties<br />
<a href="https://en.wikipedia.org/wiki/.properties">https://en.wikipedia.org/wiki/.properties</a>
</li>

<li>Soubory INI<br />
<a href="https://en.wikipedia.org/wiki/INI_file">https://en.wikipedia.org/wiki/INI_file</a>
</li>

<li>JSON to YAML<br />
<a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a>
</li>

<li>Data Format Converter<br />
<a href="https://toolkit.site/format.html">https://toolkit.site/format.html</a>
</li>

<li>Viper na GitHubu<br />
<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>
</li>

<li>GoDotEnv na GitHubu<br />
<a href="https://github.com/joho/godotenv">https://github.com/joho/godotenv</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

