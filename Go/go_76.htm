<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Jazyk Go a textový terminál ve funkci základního prvku uživatelského rozhraní</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Jazyk Go a textový terminál ve funkci základního prvku uživatelského rozhraní</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Jazyk Go a textový terminál ve funkci základního prvku uživatelského rozhraní</a></p>
<p><a href="#k02">2. Knihovny pro využití textového terminálu určené pro jazyk Go</a></p>
<p><a href="#k03">3. Formátované a obarvené logy vytvářené s&nbsp;využitím knihovny <strong>zerolog</strong></a></p>
<p><a href="#k04">4. Tisk logovacích zpráv na standardní výstup s&nbsp;obarvením</a></p>
<p><a href="#k05">5. Tisk logovacích zpráv na chybový výstup s&nbsp;obarvením</a></p>
<p><a href="#k06">6. Větší množství atributů zobrazených v&nbsp;jedné logovací zprávě</a></p>
<p><a href="#k07">7. Zobrazení informace o chybě</a></p>
<p><a href="#k08">8. Podporované úrovně logovacích operací</a></p>
<p><a href="#k09">9. Nastavení minimální úrovně logovacích operací</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Jazyk Go a textový terminál ve funkci základního prvku uživatelského rozhraní</h2>

<p>Již mnohokrát jsme se na stránkách <a href="https://www.root.cz">Roota</a>
zabývali problematikou tvorby aplikací s&nbsp;plnohodnotným grafickým
uživatelským rozhraním, které se konkrétně (resp.&nbsp;v&nbsp;největší míře)
týkají článků o grafickém uživatelském rozhraní v&nbsp;Pythonu. Ovšem existuje
relativně velké množství aplikací popř.&nbsp;nástrojů či her, pro které může
být vhodnější použít &bdquo;pouhý&ldquo; textový terminál resp.&nbsp;textovou
konzoli. Příkladem mohou být aplikace, k&nbsp;nimž se přistupuje přes SSH,
systémové nástroje apod. Takové aplikace dělíme do dvou skupin. Do první
skupiny spadají interaktivně či neinteraktivně ovládané aplikace
s&nbsp;příkazovým řádkem. Příkladem takových aplikací mohou být správci balíčků
(<strong>dnf</strong>, <strong>apt-get</strong>, ...), které s&nbsp;uživatelem
interagují pouze několika otázkami typu Y/N. Dalším příkladem je nástroj
<strong>fdisk</strong> se složitějším systémem menu, z&nbsp;nichž se však
položka vybírá svým jménem (a nikoli například pohybem kurzoru).</p>

<img src="https://i.iinfo.cz/images/536/ipython1-1-1.png" class="image-443462" alt="dnf" width="644" height="429">
<p><i>Obrázek 1: Poměrně velké množství aplikací sice využívá rozšířených
možností textových terminálů, ovšem stále se jedná spíše o neinteraktivní
nástroje bez celoobrazovkového přístupu k&nbsp;terminálu. Dobrým příkladem
takových typů aplikací je příkaz <strong>dnf</strong>, který může
v&nbsp;některých případech zobrazit jednoduchou otázku a
&bdquo;interaktivně&ldquo; očekávat odpověď.</i></p>

<p>A do druhé skupiny aplikací určených pro běh v&nbsp;terminálu můžeme zařadit
aplikace s&nbsp;plnohodnotným textovým uživatelským rozhraním neboli <i>TUI
(Text User Interface)</i>. Takových aplikací dnes existuje celá řada. Zmínit
můžeme zejména celoobrazovkové textové editory (pochopitelně včetně <a
href="https://www.root.cz/n/vim/">Vimu</a> a <a
href="https://www.root.cz/n/emacs/">Emacsu</a>), dále Midnight Commander,
nástroj Aptitude, ale i některé hry používající celoobrazovkový textový režim
(<a href="https://github.com/hackndev/0verkill">0verkill</a>, <a
href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-61-cast-angband-adom-doomrl-a-dalsi-zname-roguelike-hry/#k02">Rogue</a>,
<a href="https://www.root.cz/clanky/nethack/">Nethack</a>, <a
href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-61-cast-angband-adom-doomrl-a-dalsi-zname-roguelike-hry/#k05">Angband</a>,
<a
href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-61-cast-angband-adom-doomrl-a-dalsi-zname-roguelike-hry/#k06">DoomRL</a>
atd.). Částečně sem spadá i hra <a
href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-63-cast-dwarf-fortress/">Dwarf
Fortress</a>, která by mohla běžet v&nbsp;terminálu, ale kvůli přenositelnosti
používá vlastní engine založený na zobrazení textů.</p>

<a href="https://www.root.cz/obrazek/116575/"><img src="https://i.iinfo.cz/images/377/games-61-30-prev.png" alt="DoomRL" height="232" width="370"></a>
<p><i>Obrázek 2: DoomRL – úvodní ASCII art použitý v&nbsp;této hře je takřka
dokonalý.</i></p>

<p>Textové uživatelské rozhraní je u některých aplikací volitelné. Dobrým
příkladem takového typu aplikace je <i>GNU Debugger</i>, který buď pracuje
v&nbsp;režimu příkazového řádku, nebo ho lze v&nbsp;případě potřeby přepnout do
režimu s&nbsp;celoobrazovkovým textovým uživatelským rozhraním. I o tvorbě
těchto aplikací jsme se ve stručnosti již zmínili v&nbsp;souvislosti
s&nbsp;balíčky <strong>GNU Readline</strong> a především
<strong>prompt_toolkit</strong>.  Odkazy na tyto články jsou obsahem <a
href="#k19">devatenácté kapitoly</a>.</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-8.png" class="image-360855" alt="gnu gdb" height="381" width="566">
<p><i>Obrázek 3: Nástroj GNU Debugger po zobrazení textového uživatelského
rozhraní (TUI) ve chvíli, kdy je nastaven breakpoint na vstupní bod (přesněji
řečeno na první příkaz) ve funkci <strong>main</strong>. Na levém okraji se
zobrazují jak breakpointy, tak i ukazatel na právě prováděný či krokovaný
příkaz.</i></p>

<p><div class="rs-tip-major">Poznámka: termín &bdquo;celoobrazovkový&ldquo;
nemá v&nbsp;kontextu dnešního článku takový význam, že by plocha aplikace
pokryla celou plochu monitoru (jako například při přehrávání videa), ale že
využije plochu terminálu. U reálných textových terminálů (pamatuje si je
někdo?) se skutečně jedná o celou obrazovku, ovšem dnes se naprostá většina
uživatelů setká pouze s&nbsp;emulátorem terminálu, který sám může být zobrazen
v&nbsp;okně a neběží tedy (striktně řečeno) na celé obrazovce (ovšem i tohoto
efektu je možné v&nbsp;případě potřeby dosáhnout).</div></p>

<a href="https://www.root.cz/obrazek/116568/"><img src="https://i.iinfo.cz/images/377/games-61-23-prev.png" alt="Angband" height="232" width="370"></a>
<p><i>Obrázek 4: Hra Angband s&nbsp;textovým uživatelským rozhraním ve verzi
pro Linux – podrobnější charakteristiky hrdiny.</i></p>

<p>U obou dvou výše zmíněných typů aplikací je nutné umět do určité míry
ovládat terminálový výstup, aby například bylo možné smazat znak/řádek,
zvýraznit text změnou jeho stylu, barvy textu, barvy pozadí atd. A u aplikací
s&nbsp;plnohodnotným textovým uživatelským rozhraním je pochopitelně nutné
terminál ovládat do ještě větší míry, aby bylo možné pracovat s&nbsp;okny,
menu, nápovědou a dalšími ovládacími prvky (<i>widgety</i>). Vzhledem
k&nbsp;tomu, že se textové terminály vyvíjejí už velmi dlouho (minimálně od
roku 1965, kdy vznikl první skutečný počítačový terminál <i>IBM 2741</i> jako
náhrada za dálnopisy) jsou rozdílné i jejich možnosti (vlastnosti) i způsob
jejich ovládání (většinou s&nbsp;využitím řídicích kódů, dnes většinou
založených na takzvaných <i>escape sekvencích</i> a několika dalších ASCII
znacích).</p>

<a href="https://i.iinfo.cz/images/357/ibm-4-1.jpg"><img src="https://i.iinfo.cz/images/357/ibm-4-1-prev.jpg" alt="ibm-4" width="370" height="264"></a>
<p><i>Obrázek 5: Část sálového počítače IBM System/360 Model 40 (rok výroby
1964). V&nbsp;pozadí můžeme vidět jednotky s&nbsp;magnetickými pásky (model IBM
2401), ovládací panel je umístěn přímo za slečnou. A slečna sedí u dálnopisu,
tedy přímého předchůdce počítačových terminálů.</i></p>

<p>Samozřejmě jsme mohli v&nbsp;průběhu předchozích desetiletí vidět snahu o
sjednocení ovládání terminálů, která probíhala paralelně s&nbsp;vytvářením
databáze obsahující vlastnosti terminálů (<i>terminfo</i> a <i>termcap</i>).
Existují také knihovny, které programátora dokážou odizolovat od
nízkoúrovňového přístupu k&nbsp;terminálům a jejich řízení s&nbsp;využitím
řídicích kódů. Jedná se především o knihovnu <i>curses</i> a jejího
následovníka <i>ncurses</i> (viz článek <a
href="https://www.root.cz/clanky/psani-aplikaci-pro-terminal-jak-funguje-knihovna-ncurses/">Psaní
aplikací pro terminál: jak funguje knihovna ncurses</a>, popř.&nbsp;o utility
spouštěné z&nbsp;příkazového řádku (<strong>tput</strong>,
<strong>tset</strong>, <strong>reset</strong> atd.).</p>

<a href="https://www.root.cz/obrazek/447796/"><img src="https://i.iinfo.cz/images/428/blessed1-1-prev.png" class="image-447796" alt="&#160;" width="370" height="208" /></a>
<p><i>Obrázek 6: Ovládací prvky vykreslené s&nbsp;využitím knihovny
Blessed-contrib (JavaScript).<br />
Zdroj: <a href="https://github.com/yaronn/blessed-contrib">https://github.com/yaronn/blessed-contrib</a>.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Knihovny pro využití textového terminálu určené pro jazyk Go</h2>

<p>V&nbsp;dnešním článku i v&nbsp;navazujících článcích se postupně zaměříme na
popis knihoven určených pro programovací jazyk Go. Tyto knihovny se od sebe
budou odlišovat svým zaměřením a můžeme je zhruba rozdělit do pěti
kategorií:</p>

<ol>

<li>Knihovny zlepšující logování a podporující barevné zvýraznění logovacích
zpráv na terminálu. Sem spadá například dále popsaný balíček
<strong>zerolog</strong>.</li>

<li>Knihovny pro podporu různých barev popředí a pozadí textu, změnu stylu
textu atd. Příkladem může být balíček <strong>aurora</strong>
popř.&nbsp;<strong>cfmt</strong>, <strong>go-colortext</strong> apod.</li>

<li>Knihovny pro zobrazení jednoduchých textových dialogů a boxů se zprávami.
Tuto problematiku řeší balíček <strong>box-cli-maker</strong>.</li>

<li>Knihovny pro tvorbu grafů, &bdquo;teploměrů&ldquo; atd. na ploše terminálu.
Příkladem je balíček <strong>asciigraph</strong>.</li>

<li>Knihovny určené pro tvorbu plnohodnotných textových uživatelských rozhraní
(TUI). Příkladem mohou být balíčky <strong>termui</strong>,
<strong>termbox-go</strong>, <strong>progressbar</strong> atd.</li>

</ol>

*** image ***
<p><i>Obrázek 7: Jednou z&nbsp;terminálových aplikací naprogramovaných v&nbsp;Go je utilitka <strong>gotop</strong>.<br />
Zdroj: <a href="https://github.com/xxxserxxx/gotop">https://github.com/xxxserxxx/gotop</a>.</i></p>

<p><div class="rs-tip-major">Poznámka: dnes použité demonstrační příklady byly
spuštěny v&nbsp;<strong>xtermu</strong> s&nbsp;nastavením světlého pozadí.
Použité barvy se (podle očekávání) budou lišit ve chvíli, kdy bude použito
tmavé pozadí popřípadě odlišný emulátor terminálu &ndash; to je cena, kterou je
nutné zaplatit (mj.) i za zpětnou kompatibilitu.</div></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-27.png" class="image-360874" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 8: Spuštění debuggeru, inicializace laděné aplikace, nastavení
breakpointu a doskok na breakpoint.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Formátované a obarvené logy vytvářené s&nbsp;využitím knihovny <strong>zerolog</strong></h2>

<p>Prvním balíčkem, s&nbsp;nímž se v&nbsp;dnešním článku setkáme, je balíček
nazvaný <strong>zerolog</strong>, přesněji řečeno plným jménem <i>Zero
Allocation JSON Logger</i>. Tento balíček rozšiřuje možnosti standardního
logovacího balíčku <strong>log</strong> o mnohé další vlastnosti, zejména o
výstup do snadno parsovatelného formátu JSON popř.&nbsp;alternativně o výstup
se zvýrazněním jednotlivých zpráv s&nbsp;využitím barev. Druhý způsob se
používá při vývoji a ladění aplikací, první pak může být použit při reálném
nasazení aplikace.</p>

<p>Podívejme se nyní na nejjednodušší použití tohoto balíčku, z&nbsp;něhož bude
patrné, jakým způsobem se jednotlivé zprávy vypisované do logu tvoří. Používá
se zde jednotný zápis:</p>

<pre>
log.<i>LogLevel()</i>.<i>TypAtributu(jméno, hodnota)</i>.<i>Msg(zpráva)</i>
</pre>

<p>přičemž atributů může být uvedeno prakticky libovolné množství.
V&nbsp;příkladu je logLevel nastaven na <i>Info</i>, což je třetí úroveň
z&nbsp;celkem sedmi definovaných úrovní.</p>

<p>Atributy se vždy skládají z&nbsp;dvojice jméno (řetězec) a hodnota, přičemž
hodnota musí odpovídat typu atributu &ndash; řetězec, celé číslo, pravdivostní
hodnota, slovník atd.:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/rs/zerolog/log"
)
&nbsp;
const Address = "localhost"
const Port = 8080
const Enabled = false
&nbsp;
func <strong>main</strong>() {
        log.Info().Msg("Started")
&nbsp;
        log.Info().Str("address", Address).Msg("Server address")
        log.Info().Int("port", Port).Msg("Server port")
        log.Info().Bool("enabled", Enabled).Msg("Server enabled")
&nbsp;
        log.Info().Msg("Finished")
}
</pre>

<p>Výsledkem by měly být zprávy ve formátu JSONu:</p>

*** image ***
<p><i>Obrázek 9: Zprávy zobrazené ve formátu JSON.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Tisk logovacích zpráv na standardní výstup s&nbsp;obarvením</h2>

<p>Knihovna <i>zerolog</i> umožňuje specifikaci výstupního proudu pro logovací
zprávy. V&nbsp;případě, že se explicitně provede přesměrování do standardního
výstupu, předpokládá se využití inteligentního terminálu a namísto JSON formátu
jsou zprávy vypsány s&nbsp;barevným zvýrazněním:</p>

<pre>
log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stdout})
</pre>

<p>Úplný zdrojový kód dnešního druhého demonstračního příkladu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
&nbsp;
        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)
&nbsp;
const Address = "localhost"
const Port = 8080
const Enabled = false
&nbsp;
func <strong>main</strong>() {
        <u>log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stdout})</u>
        log.Info().Msg("Started")
&nbsp;
        log.Info().Str("address", Address).Msg("Server address")
        log.Info().Int("port", Port).Msg("Server port")
        log.Info().Bool("enabled", Enabled).Msg("Server enabled")
&nbsp;
        log.Info().Msg("Finished")
}
</pre>

<p>Výsledkem by měly být zprávy s&nbsp;barevným zvýrazněním:</p>

*** image ***
<p><i>Obrázek 10: Zprávy &nbsp;barevným zvýrazněním vypsané na standardní
výstup na inteligentním terminálu.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Tisk logovacích zpráv na chybový výstup s&nbsp;obarvením</h2>

<p>Naprosto stejným postupem lze ovšem zajistit výstup na chybový výstup, který
je opět proveden s&nbsp;barevným zvýrazněním:</p>

<pre>
log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
</pre>

<p>Pro jistotu si opět zobrazme úplný zdrojový kód tohoto demonstračního
příkladu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
&nbsp;
        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)
&nbsp;
const Address = "localhost"
const Port = 8080
const Enabled = false
&nbsp;
func <strong>main</strong>() {
        <u>log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})</u>
        log.Info().Msg("Started")
&nbsp;
        log.Info().Str("address", Address).Msg("Server address")
        log.Info().Int("port", Port).Msg("Server port")
        log.Info().Bool("enabled", Enabled).Msg("Server enabled")
&nbsp;
        log.Info().Msg("Finished")
}
</pre>

<p>Výsledek:</p>

*** image ***
<p><i>Obrázek 11: Zprávy &nbsp;barevným zvýrazněním vypsané na chybový výstup
na inteligentním terminálu.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Větší množství atributů zobrazených v&nbsp;jedné logovací zprávě</h2>

<p>Velmi často je nutné v&nbsp;jedné logovací zprávě zobrazit větší množství
atributů. I to pochopitelně knihovna <i>zerolog</i> umožňuje, pouze si musíme
dát pozor na to, aby samotná zpráva (<strong>Msg</strong>) byla poslední
volanou metodou:</p>

<pre>
log.Info().
        Str("address", Address).
        Int("port", Port).
        Bool("enabled", Enabled).
        Msg("Server settings")
</pre>

<p><div class="rs-tip-major">Poznámka: formátování je standardní podle
specifikace samotného jazyka Go a nástroje <strong>go fmt</strong>.</div></p>

<p>Úplný zdrojový kód takto upraveného demonstračního příkladu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
&nbsp;
        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)
&nbsp;
const Address = "localhost"
const Port = 8080
const Enabled = false
&nbsp;
func <strong>main</strong>() {
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
        log.Info().Msg("Started")
&nbsp;
        <u>log.Info().</u>
                <u>Str("address", Address).</u>
                <u>Int("port", Port).</u>
                <u>Bool("enabled", Enabled).</u>
                <u>Msg("Server settings")</u>
&nbsp;
        log.Info().Msg("Finished")
}
</pre>

<p>Výsledek:</p>

*** image ***
<p><i>Obrázek 12: Logovací zpráva s&nbsp;větším množstvím atributů.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zobrazení informace o chybě</h2>

<p>Pro výpis informací o detekované chybě se používá tento zápis:</p>

<pre>
log.<i>LogLevel()</i>.<i>Err(hodnota typu error)</i>.<i>TypAtributu(jméno, hodnota)</i>.<i>Msg(zpráva)</i>
</pre>

<p>Typicky se používá úroveň logů <strong>Error</strong> nebo
<strong>Fatal</strong>, takže:</p>

<pre>
log.<strong>LogError()</strong>.<i>Err(hodnota typu error)</i>.<i>TypAtributu(jméno, hodnota)</i>.<i>Msg(zpráva)</i>
</pre>

<p>popř.:</p>

<pre>
log.<strong>LogFatal()</strong>.<i>Err(hodnota typu error)</i>.<i>TypAtributu(jméno, hodnota)</i>.<i>Msg(zpráva)</i>
</pre>

<p>nebo dokonce:</p>

<pre>
log.<strong>LogPanic()</strong>.<i>Err(hodnota typu error)</i>.<i>TypAtributu(jméno, hodnota)</i>.<i>Msg(zpráva)</i>
</pre>

<p>V&nbsp;následujícím demonstračním příkladu je chyba testována (a
popř.&nbsp;vypsána do logů) při pokusu o spuštění HTTP serveru:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "io"
        "os"
&nbsp;
        "net/http"
&nbsp;
        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)
&nbsp;
const Address = "localhost"
const Port = 8080
const Enabled = true
&nbsp;
func <strong>main</strong>() {
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
        log.Info().Msg("Started")
&nbsp;
        log.Info().
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        if Enabled {
                http.HandleFunc("/", handler)
                where := fmt.Sprintf("%s:%d", Address, Port)
                err := http.ListenAndServe(where, nil)
                if err != nil {
                        <u>log.Error().Err(err).Msg("Initialize server")</u>
                }
        }
        log.Info().Msg("Finished")
}
&nbsp;
func <strong>handler</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!")
}
</pre>

<p>Pokud se nyní pokusíme příklad spustit dvakrát, dojde k&nbsp;chybě, protože
první instance serveru si zabere specifikovaný port 8080:</p>

*** image ***
<p><i>Obrázek 13: Zobrazení informace o chybě.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Podporované úrovně logovacích operací</h2>

<p>Knihovna <i>zerolog</i> podporuje celkem sedm úrovní logovacích operací,
které jsou pojmenovány následovně (což je kompatibilní i s&nbsp;mnoha dalšími
podobně koncipovanými knihovnami):</p>

<pre>
<strong>panic</strong> (zerolog.PanicLevel, 5)
<strong>fatal</strong> (zerolog.FatalLevel, 4)
<strong>error</strong> (zerolog.ErrorLevel, 3)
<strong>warn</strong> (zerolog.WarnLevel, 2)
<strong>info</strong> (zerolog.InfoLevel, 1)
<strong>debug</strong> (zerolog.DebugLevel, 0)
<strong>trace</strong> (zerolog.TraceLevel, -1)
</pre>

<p>Prozatím jsme používali úroveň <strong>Strong</strong>, ale nikdo nám
samozřejmě nezabraňuje využít další úrovně, z&nbsp;nichž každá je určena
volanou funkcí z&nbsp;knihovny <i>zerolog</i>. Tento přístup je ukázán
v&nbsp;dalším demonstračním příkladu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
&nbsp;
        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)
&nbsp;
const Address = "localhost"
const Port = 8080
const Enabled = true
&nbsp;
func <strong>main</strong>() {
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
        log.Info().Msg("Started")
&nbsp;
        log.<u>Trace()</u>.
                Str("level", "trace").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.<u>Debug()</u>.
                Str("level", "debug").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.<u>Info()</u>.
                Str("level", "info").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.<u>Warn()</u>.
                Str("level", "warn").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.<u>Error()</u>.
                Str("level", "error").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.<u>Fatal()</u>.
                Str("level", "fatal").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.<u>Panic()</u>.
                Str("level", "panic").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Info().Msg("Finished")
}
</pre>

<p>Výsledek může vypadat následovně:</p>

*** image ***
<p><i>Obrázek 14: Zobrazení logovacích informací s&nbsp;různou úrovní.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Nastavení minimální úrovně logovacích operací</h2>

<p>Minimální úroveň logovacích informací bude odlišná pro vývoj (kdy budeme
vyžadovat podrobnější informace) a jiná pro produkční nasazení. Pro specifikaci
minimální úrovně, která se ještě zobrazuje, slouží funkce
<strong>SetGlobalLevel</strong>:</p>

<pre>
zerolog.SetGlobalLevel(zerolog.InfoLevel)
</pre>

<p>Příklad použití (uvedený jen pro úplnost):</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
&nbsp;
        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)
&nbsp;
const Address = "localhost"
const Port = 8080
const Enabled = true
&nbsp;
func <strong>main</strong>() {
        <u>zerolog.SetGlobalLevel(zerolog.InfoLevel)</u>
&nbsp;
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
        log.Info().Msg("Started")
&nbsp;
        log.Trace().
                Str("level", "trace").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Debug().
                Str("level", "debug").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Info().
                Str("level", "info").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Warn().
                Str("level", "warn").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Error().
                Str("level", "error").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Fatal().
                Str("level", "fatal").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Panic().
                Str("level", "panic").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Info().Msg("Finished")
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
&nbsp;
        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)
&nbsp;
const Address = "localhost"
const Port = 8080
const Enabled = true
&nbsp;
func <strong>main</strong>() {
        zerolog.SetGlobalLevel(zerolog.InfoLevel)
&nbsp;
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
        log.Info().Msg("Started")
&nbsp;
        log.Log().
                Str("level", "trace").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Info().Msg("Finished")
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "io"
        "os"
&nbsp;
        "net/http"
&nbsp;
        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)
&nbsp;
const Address = "localhost"
const Port = 8080
const Enabled = true
&nbsp;
func <strong>main</strong>() {
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
        log.Info().Msg("Started")
&nbsp;
        log.Info().
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        if Enabled {
                http.HandleFunc("/", handler)
                where := fmt.Sprintf("%s:%d", Address, Port)
                err := http.ListenAndServe(where, nil)
                if err != nil {
                        log.Error().Err(err).Msgf("Initialize server on address %s:%d", Address, Port)
                }
        }
        log.Info().Msg("Finished")
}
&nbsp;
func <strong>handler</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!")
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
&nbsp;
        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)
&nbsp;
const Address = "localhost"
const Port = 8080
const Enabled = true
&nbsp;
func <strong>main</strong>() {
        var rawData []byte = []byte("ěščřžýáíé")
&nbsp;
        zerolog.SetGlobalLevel(zerolog.InfoLevel)
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
&nbsp;
        log.Info().Msg("Started")
&nbsp;
        log.Trace().
                Str("level", "trace").
                Str("address", Address).
                Int("port", Port).
                Hex("raw data", rawData).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Debug().
                Str("level", "debug").
                Str("address", Address).
                Int("port", Port).
                Hex("raw data", rawData).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Info().
                Str("level", "info").
                Str("address", Address).
                Int("port", Port).
                Hex("raw data", rawData).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Warn().
                Str("level", "warn").
                Str("address", Address).
                Int("port", Port).
                Hex("raw data", rawData).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Error().
                Str("level", "error").
                Str("address", Address).
                Int("port", Port).
                Hex("raw data", rawData).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Fatal().
                Str("level", "fatal").
                Str("address", Address).
                Int("port", Port).
                Hex("raw data", rawData).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Panic().
                Str("level", "panic").
                Str("address", Address).
                Int("port", Port).
                Hex("raw data", rawData).
                Bool("enabled", Enabled).Msg("Server settings")
&nbsp;
        log.Info().Msg("Finished")
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/logrusorgru/aurora"
)
&nbsp;
func <strong>main</strong>() {
        var colorizer aurora.Aurora
        colorizer = aurora.NewAurora(true)
&nbsp;
        fmt.Println(colorizer.Red("Test"))
        fmt.Println(colorizer.Green("Test"))
        fmt.Println(colorizer.Blue("Test"))
        fmt.Println(colorizer.Cyan("Test"))
        fmt.Println(colorizer.Magenta("Test"))
        fmt.Println(colorizer.Yellow("Test"))
}
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/logrusorgru/aurora"
)
&nbsp;
func <strong>main</strong>() {
        var colorizer aurora.Aurora
        colorizer = aurora.NewAurora(false)
&nbsp;
        fmt.Println(colorizer.Red("Test"))
        fmt.Println(colorizer.Green("Test"))
        fmt.Println(colorizer.Blue("Test"))
        fmt.Println(colorizer.Cyan("Test"))
        fmt.Println(colorizer.Magenta("Test"))
        fmt.Println(colorizer.Yellow("Test"))
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "flag"
        "fmt"
&nbsp;
        "github.com/logrusorgru/aurora"
)
&nbsp;
var colorizer aurora.Aurora
&nbsp;
func <strong>init</strong>() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()
&nbsp;
        colorizer = aurora.NewAurora(*colors)
}
&nbsp;
func <strong>main</strong>() {
        fmt.Println(colorizer.Red("Test"))
        fmt.Println(colorizer.Green("Test"))
        fmt.Println(colorizer.Blue("Test"))
        fmt.Println(colorizer.Cyan("Test"))
        fmt.Println(colorizer.Magenta("Test"))
        fmt.Println(colorizer.Yellow("Test"))
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "flag"
        "fmt"
&nbsp;
        "github.com/logrusorgru/aurora"
)
&nbsp;
var colorizer aurora.Aurora
&nbsp;
func <strong>init</strong>() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()
&nbsp;
        colorizer = aurora.NewAurora(*colors)
}
&nbsp;
func <strong>main</strong>() {
        fmt.Println(colorizer.Red("Test"))
        fmt.Println(colorizer.Green("Test"))
        fmt.Println(colorizer.Blue("Test"))
        fmt.Println(colorizer.Cyan("Test"))
        fmt.Println(colorizer.Magenta("Test"))
        fmt.Println(colorizer.Yellow("Test"))
&nbsp;
        fmt.Println()
&nbsp;
        fmt.Println(colorizer.Bold(colorizer.Red("Test")))
        fmt.Println(colorizer.Bold(colorizer.Green("Test")))
        fmt.Println(colorizer.Bold(colorizer.Blue("Test")))
        fmt.Println(colorizer.Bold(colorizer.Cyan("Test")))
        fmt.Println(colorizer.Bold(colorizer.Magenta("Test")))
        fmt.Println(colorizer.Bold(colorizer.Yellow("Test")))
}
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "flag"
        "fmt"
&nbsp;
        "github.com/logrusorgru/aurora"
)
&nbsp;
var colorizer aurora.Aurora
&nbsp;
func <strong>init</strong>() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()
&nbsp;
        colorizer = aurora.NewAurora(*colors)
}
&nbsp;
func <strong>main</strong>() {
        fmt.Println(colorizer.Red("Test"))
        fmt.Println(colorizer.Green("Test"))
        fmt.Println(colorizer.Blue("Test"))
        fmt.Println(colorizer.Cyan("Test"))
        fmt.Println(colorizer.Magenta("Test"))
        fmt.Println(colorizer.Yellow("Test"))
&nbsp;
        fmt.Println()
&nbsp;
        fmt.Println(colorizer.Red("Test").Bold())
        fmt.Println(colorizer.Green("Test").Bold())
        fmt.Println(colorizer.Blue("Test").Bold())
        fmt.Println(colorizer.Cyan("Test").Bold())
        fmt.Println(colorizer.Magenta("Test").Bold())
        fmt.Println(colorizer.Yellow("Test").Bold())
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "flag"
        "fmt"
&nbsp;
        "github.com/logrusorgru/aurora"
)
&nbsp;
var colorizer aurora.Aurora
&nbsp;
func <strong>init</strong>() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()
&nbsp;
        colorizer = aurora.NewAurora(*colors)
}
&nbsp;
func <strong>main</strong>() {
        fmt.Println(colorizer.BgRed("Test"))
        fmt.Println(colorizer.BgGreen("Test"))
        fmt.Println(colorizer.BgBlue("Test"))
        fmt.Println(colorizer.BgCyan("Test"))
        fmt.Println(colorizer.BgMagenta("Test"))
        fmt.Println(colorizer.BgYellow("Test"))
&nbsp;
        fmt.Println()
&nbsp;
        fmt.Println(colorizer.BgRed("Test").Bold())
        fmt.Println(colorizer.BgGreen("Test").Bold())
        fmt.Println(colorizer.BgBlue("Test").Bold())
        fmt.Println(colorizer.BgCyan("Test").Bold())
        fmt.Println(colorizer.BgMagenta("Test").Bold())
        fmt.Println(colorizer.BgYellow("Test").Bold())
}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "flag"
        "fmt"
&nbsp;
        "github.com/logrusorgru/aurora"
)
&nbsp;
var colorizer aurora.Aurora
&nbsp;
func <strong>init</strong>() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()
&nbsp;
        colorizer = aurora.NewAurora(*colors)
}
&nbsp;
func <strong>main</strong>() {
        for i := uint8(0); i &lt; 24; i++ {
                message := fmt.Sprintf("Grayscale %d", i)
                fmt.Println(colorizer.Gray(i, message))
        }
}
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "flag"
        "fmt"
&nbsp;
        "github.com/logrusorgru/aurora"
)
&nbsp;
var colorizer aurora.Aurora
&nbsp;
func <strong>init</strong>() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()
&nbsp;
        colorizer = aurora.NewAurora(*colors)
}
&nbsp;
func <strong>main</strong>() {
        for i := uint8(0); i &lt; 24; i++ {
                message := fmt.Sprintf("Grayscale %d", i)
                fmt.Println(colorizer.BgGray(i, message))
        }
}
</pre>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "flag"
        "fmt"
&nbsp;
        "github.com/logrusorgru/aurora"
)
&nbsp;
var colorizer aurora.Aurora
&nbsp;
func <strong>init</strong>() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()
&nbsp;
        colorizer = aurora.NewAurora(*colors)
}
&nbsp;
func <strong>main</strong>() {
        for j := uint8(24); j &gt; 0; j-- {
                for i := uint8(0); i &lt; 24; i += 2 {
                        message := fmt.Sprintf(" [%2d %2d] ", i, j)
                        fmt.Print(colorizer.BgGray(j, colorizer.Gray(i, message)))
                }
                fmt.Println()
        }
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "flag"
        "fmt"
&nbsp;
        "github.com/logrusorgru/aurora"
)
&nbsp;
var colorizer aurora.Aurora
&nbsp;
func <strong>init</strong>() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()
&nbsp;
        colorizer = aurora.NewAurora(*colors)
}
&nbsp;
func <strong>main</strong>() {
        for j := uint8(16); j &lt; 231; j += 4 {
                for i := uint8(16); i &lt; 231; i += 2 {
                        fmt.Print(colorizer.Index(i, colorizer.BgIndex(j, "x")))
                }
                fmt.Println()
        }
}
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01-basic-usage</td><td>základní použití knihovny <strong>zerolog</strong>, výstup do formátu JSON</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/zerolog/01-basic-usage">https://github.com/tisnik/go-root/blob/master/article_76/zerolog/01-basic-usage</a></td></tr>
<tr><td> 2</td><td>02-output-to-stdout</td><td>tisk logovacích zpráv na standardní výstup s&nbsp;obarvením</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/zerolog/02-output-to-stdout">https://github.com/tisnik/go-root/blob/master/article_76/zerolog/02-output-to-stdout</a></td></tr>
<tr><td> 3</td><td>03-output-to-stderr</td><td>tisk logovacích zpráv na chybový výstup s&nbsp;obarvením</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/zerolog/03-output-to-stderr">https://github.com/tisnik/go-root/blob/master/article_76/zerolog/03-output-to-stderr</a></td></tr>
<tr><td> 4</td><td>04-chaining</td><td>větší množství atributů zobrazených v&nbsp;jedné logovací zprávě</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/zerolog/04-chaining">https://github.com/tisnik/go-root/blob/master/article_76/zerolog/04-chaining</a></td></tr>
<tr><td> 5</td><td>05-errors</td><td>zobrazení informace o chybě</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/zerolog/05-errors">https://github.com/tisnik/go-root/blob/master/article_76/zerolog/05-errors</a></td></tr>
<tr><td> 6</td><td>06-levels</td><td>podporované úrovně logovacích operací</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/zerolog/06-levels">https://github.com/tisnik/go-root/blob/master/article_76/zerolog/06-levels</a></td></tr>
<tr><td> 7</td><td>07-set-level</td><td>nastavení minimální úrovně logovacích operací</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/zerolog/07-set-level">https://github.com/tisnik/go-root/blob/master/article_76/zerolog/07-set-level</a></td></tr>
<tr><td> 8</td><td>08-no-level        </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/zerolog/08-no-level">https://github.com/tisnik/go-root/blob/master/article_76/zerolog/08-no-level</a></td></tr>
<tr><td> 9</td><td>09-format-message  </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/zerolog/09-format-message">https://github.com/tisnik/go-root/blob/master/article_76/zerolog/09-format-message</a></td></tr>
<tr><td>10</td><td>10-different-output</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/zerolog/10-different-output">https://github.com/tisnik/go-root/blob/master/article_76/zerolog/10-different-output</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>01-basic-usage         </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/aurora/01-basic-usage">https://github.com/tisnik/go-root/blob/master/article_76/aurora/01-basic-usage</a></td></tr>
<tr><td>12</td><td>02-disable-colors      </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/aurora/02-disable-colors">https://github.com/tisnik/go-root/blob/master/article_76/aurora/02-disable-colors</a></td></tr>
<tr><td>13</td><td>03-colors-flag         </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/aurora/03-colors-flag">https://github.com/tisnik/go-root/blob/master/article_76/aurora/03-colors-flag</a></td></tr>
<tr><td>14</td><td>04-bold-attribute      </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/aurora/04-bold-attribute">https://github.com/tisnik/go-root/blob/master/article_76/aurora/04-bold-attribute</a></td></tr>
<tr><td>15</td><td>05-bold-attribute-B    </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/aurora/05-bold-attribute-B">https://github.com/tisnik/go-root/blob/master/article_76/aurora/05-bold-attribute-B</a></td></tr>
<tr><td>16</td><td>06-background-colors   </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/aurora/06-background-colors">https://github.com/tisnik/go-root/blob/master/article_76/aurora/06-background-colors</a></td></tr>
<tr><td>17</td><td>07-grayscale-foreground</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/aurora/07-grayscale-foreground">https://github.com/tisnik/go-root/blob/master/article_76/aurora/07-grayscale-foreground</a></td></tr>
<tr><td>18</td><td>08-grayscale-background</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/aurora/08-grayscale-background">https://github.com/tisnik/go-root/blob/master/article_76/aurora/08-grayscale-background</a></td></tr>
<tr><td>19</td><td>09-grayscale-fg-and-bg </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/aurora/09-grayscale-fg-and-bg">https://github.com/tisnik/go-root/blob/master/article_76/aurora/09-grayscale-fg-and-bg</a></td></tr>
<tr><td>20</td><td>10-8-bit-colors        </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/aurora/10-8-bit-colors">https://github.com/tisnik/go-root/blob/master/article_76/aurora/10-8-bit-colors</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Tvorba aplikací a her s&nbsp;textovým uživatelským rozhraním s&nbsp;využitím knihovny Blessed<br />
<a href="https://www.root.cz/clanky/tvorba-aplikaci-a-her-s-textovym-uzivatelskym-rozhranim-s-vyuzitim-knihovny-blessed/">https://www.root.cz/clanky/tvorba-aplikaci-a-her-s-textovym-uzivatelskym-rozhranim-s-vyuzitim-knihovny-blessed/</a>
</li>

<li>Tvorba aplikací a her s&nbsp;textovým rozhraním s&nbsp;knihovnou Blessed (dokončení)<br />
<a href="https://www.root.cz/clanky/tvorba-aplikaci-a-her-s-textovym-rozhranim-s-knihovnou-blessed-dokonceni/">https://www.root.cz/clanky/tvorba-aplikaci-a-her-s-textovym-rozhranim-s-knihovnou-blessed-dokonceni/</a>
</li>

<li>A curated list of awesome Go frameworks, libraries and software<br />
<a href="https://awesome-go.com/">https://awesome-go.com/</a>
</li>

<li>Aurora<br />
<a href="https://github.com/logrusorgru/aurora">https://github.com/logrusorgru/aurora</a>
</li>

<li>colourize<br />
<a href="https://github.com/TreyBastian/colourize">https://github.com/TreyBastian/colourize</a>
</li>

<li>go-colortext<br />
<a href="https://github.com/daviddengcn/go-colortext">https://github.com/daviddengcn/go-colortext</a>
</li>

<li>blessed na PyPi<br />
<a href="https://pypi.org/project/blessed/">https://pypi.org/project/blessed/</a>
</li>

<li>blessed na GitHubu<br />
<a href="https://github.com/jquast/blessed">https://github.com/jquast/blessed</a>
</li>

<li>Blessed documentation!<br />
<a href="https://blessed.readthedocs.io/en/latest/">https://blessed.readthedocs.io/en/latest/</a>
</li>

<li>termbox-go na GitHubu<br />
<a href="https://github.com/nsf/termbox-go">https://github.com/nsf/termbox-go</a>
</li>

<li>termui na GitHubu<br />
<a href="https://github.com/gizak/termui">https://github.com/gizak/termui</a>
</li>

<li>blessed na GitHubu<br />
<a href="https://github.com/chjj/blessed">https://github.com/chjj/blessed</a>
</li>

<li>blessed-contrib na GitHubu<br />
<a href="https://github.com/yaronn/blessed-contrib">https://github.com/yaronn/blessed-contrib</a>
</li>

<li>tui-rs na GitHubu<br />
<a href="https://github.com/fdehau/tui-rs">https://github.com/fdehau/tui-rs</a>
</li>

<li>asciigraph<br />
<a href="https://github.com/guptarohit/asciigraph">https://github.com/guptarohit/asciigraph</a>
</li>

<li>Standardní balíček text/tabwriter<br />
<a href="https://golang.org/pkg/text/tabwriter/">https://golang.org/pkg/text/tabwriter/</a>
</li>

<li>Elastic tabstops: A better way to indent and align code<br />
<a href="https://nickgravgaard.com/elastic-tabstops/">https://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>ASCII Table Writer<br />
<a href="https://github.com/olekukonko/tablewriter">https://github.com/olekukonko/tablewriter</a>
</li>

<li>TablePrinter<br />
<a href="https://github.com/lensesio/tableprinter">https://github.com/lensesio/tableprinter</a>
</li>

<li>go-pretty<br />
<a href="https://github.com/jedib0t/go-pretty">https://github.com/jedib0t/go-pretty</a>
</li>

<li>What are the drawbacks of elastic tabstops?<br />
<a href="https://softwareengineering.stackexchange.com/questions/137290/what-are-the-drawbacks-of-elastic-tabstops">https://softwareengineering.stackexchange.com/questions/137290/what-are-the-drawbacks-of-elastic-tabstops</a>
</li>

<li>Elastic tabstop editors and plugins<br />
<a href="https://stackoverflow.com/questions/28652/elastic-tabstop-editors-and-plugins">https://stackoverflow.com/questions/28652/elastic-tabstop-editors-and-plugins</a>
</li>

<li>Příkaz gofmt<br />
<a href="https://golang.org/cmd/gofmt/">https://golang.org/cmd/gofmt/</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>zerolog<br />
<a href="https://github.com/rs/zerolog">https://github.com/rs/zerolog</a>
</li>

<li>Zero Allocation JSON Logger na Go.doc<br />
<a href="https://pkg.go.dev/github.com/rs/zerolog?utm_source=godoc">https://pkg.go.dev/github.com/rs/zerolog?utm_source=godoc</a>
</li>

<li>cfmt<br />
<a href="https://github.com/mingrammer/cfmt">https://github.com/mingrammer/cfmt</a>
</li>

<li>box-cli-maker<br />
<a href="https://github.com/Delta456/box-cli-maker">https://github.com/Delta456/box-cli-maker</a>
</li>

<li>Who uses zerolog<br />
<a href="https://github.com/rs/zerolog/wiki/Who-uses-zerolog">https://github.com/rs/zerolog/wiki/Who-uses-zerolog</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

