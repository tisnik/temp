<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Knihovny pro využití textového terminálu</a></p>
<p><a href="#k03">*** 3. Formátované a obarvené logy s&nbsp;využitím knihovny <strong>zerolog</strong></a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Knihovny pro využití textového terminálu</h2>

<p>U obou dvou výše zmíněných typů aplikací je nutné umět do určité míry ovládat terminálový výstup, aby například bylo možné smazat znak/řádek, zvýraznit text změnou jeho stylu, barvy textu, barvy pozadí atd. A u aplikací s&nbsp;plnohodnotným textovým uživatelským rozhraním je pochopitelně nutné terminál ovládat do ještě větší míry, aby bylo možné pracovat s&nbsp;okny, menu, nápovědou a dalšími ovládacími prvky (<i>widgety</i>). Vzhledem k&nbsp;tomu, že se textové terminály vyvíjejí už velmi dlouho (minimálně od roku 1965, kdy vznikl první skutečný počítačový terminál <i>IBM 2741</i> jako náhrada za dálnopisy) jsou rozdílné i jejich možnosti (vlastnosti) i způsob jejich ovládání (většinou s&nbsp;využitím řídicích kódů, dnes většinou založených na takzvaných <i>escape sekvencích</i> a několika dalších ASCII znacích).</p>

<a href="https://i.iinfo.cz/images/357/ibm-4-1.jpg"><img src="https://i.iinfo.cz/images/357/ibm-4-1-prev.jpg" alt="ibm-4" width="370" height="264"></a>
<p><i>Obrázek 5: Část sálového počítače IBM System/360 Model 40 (rok výroby 1964). V pozadí můžeme vidět jednotky s magnetickými pásky (model IBM 2401), ovládací panel je umístěn přímo za slečnou. A slečna sedí u dálnopisu, tedy přímého předchůdce počítačových terminálů.</i></p>

<p>Samozřejmě jsme mohli v&nbsp;průběhu předchozích desetiletí vidět snahu o sjednocení ovládání terminálů, která probíhala paralelně s&nbsp;vytvářením databáze obsahující vlastnosti terminálů (<i>terminfo</i> a <i>termcap</i>).  Existují také knihovny, které programátora dokážou odizolovat od nízkoúrovňového přístupu k&nbsp;terminálům a jejich řízení s&nbsp;využitím řídicích kódů. Jedná se především o knihovnu <i>curses</i> a jejího následovníka <i>ncurses</i> (viz článek <a href="https://www.root.cz/clanky/psani-aplikaci-pro-terminal-jak-funguje-knihovna-ncurses/">Psaní aplikací pro terminál: jak funguje knihovna ncurses</a>, popř.&nbsp;o utility spouštěné z&nbsp;příkazového řádku (<strong>tput</strong>, <strong>tset</strong>, <strong>reset</strong> atd.).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Formátované a obarvené logy s&nbsp;využitím knihovny <strong>zerolog</strong></h2>

<p></p>

<pre>
package main

import (
        "github.com/rs/zerolog/log"
)

const Address = "localhost"
const Port = 8080
const Enabled = false

func main() {
        log.Info().Msg("Started")

        log.Info().Str("address", Address).Msg("Server address")
        log.Info().Int("port", Port).Msg("Server port")
        log.Info().Bool("enabled", Enabled).Msg("Server enabled")

        log.Info().Msg("Finished")
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p></p>

<pre>
package main

import (
        "os"

        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)

const Address = "localhost"
const Port = 8080
const Enabled = false

func main() {
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stdout})
        log.Info().Msg("Started")

        log.Info().Str("address", Address).Msg("Server address")
        log.Info().Int("port", Port).Msg("Server port")
        log.Info().Bool("enabled", Enabled).Msg("Server enabled")

        log.Info().Msg("Finished")
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p></p>

<pre>
package main

import (
        "os"

        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)

const Address = "localhost"
const Port = 8080
const Enabled = false

func main() {
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
        log.Info().Msg("Started")

        log.Info().Str("address", Address).Msg("Server address")
        log.Info().Int("port", Port).Msg("Server port")
        log.Info().Bool("enabled", Enabled).Msg("Server enabled")

        log.Info().Msg("Finished")
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>

<pre>
package main

import (
        "os"

        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)

const Address = "localhost"
const Port = 8080
const Enabled = false

func main() {
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
        log.Info().Msg("Started")

        log.Info().
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Info().Msg("Finished")
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>

<pre>
package main

import (
        "fmt"
        "io"
        "os"

        "net/http"

        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)

const Address = "localhost"
const Port = 8080
const Enabled = true

func main() {
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
        log.Info().Msg("Started")

        log.Info().
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        if Enabled {
                http.HandleFunc("/", handler)
                where := fmt.Sprintf("%s:%d", Address, Port)
                err := http.ListenAndServe(where, nil)
                if err != nil {
                        log.Error().Err(err).Msg("Initialize server")
                }
        }
        log.Info().Msg("Finished")
}

func handler(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!")
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>

<pre>
package main

import (
        "os"

        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)

const Address = "localhost"
const Port = 8080
const Enabled = true

func main() {
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
        log.Info().Msg("Started")

        log.Trace().
                Str("level", "trace").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Debug().
                Str("level", "debug").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Info().
                Str("level", "info").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Warn().
                Str("level", "warn").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Error().
                Str("level", "error").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Fatal().
                Str("level", "fatal").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Panic().
                Str("level", "panic").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Info().Msg("Finished")
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>

<pre>
package main

import (
        "os"

        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)

const Address = "localhost"
const Port = 8080
const Enabled = true

func main() {
        zerolog.SetGlobalLevel(zerolog.InfoLevel)

        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
        log.Info().Msg("Started")

        log.Trace().
                Str("level", "trace").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Debug().
                Str("level", "debug").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Info().
                Str("level", "info").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Warn().
                Str("level", "warn").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Error().
                Str("level", "error").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Fatal().
                Str("level", "fatal").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Panic().
                Str("level", "panic").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Info().Msg("Finished")
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>

<pre>
package main

import (
        "os"

        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)

const Address = "localhost"
const Port = 8080
const Enabled = true

func main() {
        zerolog.SetGlobalLevel(zerolog.InfoLevel)

        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
        log.Info().Msg("Started")

        log.Log().
                Str("level", "trace").
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Info().Msg("Finished")
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>

<pre>
package main

import (
        "fmt"
        "io"
        "os"

        "net/http"

        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)

const Address = "localhost"
const Port = 8080
const Enabled = true

func main() {
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
        log.Info().Msg("Started")

        log.Info().
                Str("address", Address).
                Int("port", Port).
                Bool("enabled", Enabled).Msg("Server settings")

        if Enabled {
                http.HandleFunc("/", handler)
                where := fmt.Sprintf("%s:%d", Address, Port)
                err := http.ListenAndServe(where, nil)
                if err != nil {
                        log.Error().Err(err).Msgf("Initialize server on address %s:%d", Address, Port)
                }
        }
        log.Info().Msg("Finished")
}

func handler(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!")
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>

<pre>
package main

import (
        "os"

        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)

const Address = "localhost"
const Port = 8080
const Enabled = true

func main() {
        var rawData []byte = []byte("ěščřžýáíé")

        zerolog.SetGlobalLevel(zerolog.InfoLevel)
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})

        log.Info().Msg("Started")

        log.Trace().
                Str("level", "trace").
                Str("address", Address).
                Int("port", Port).
                Hex("raw data", rawData).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Debug().
                Str("level", "debug").
                Str("address", Address).
                Int("port", Port).
                Hex("raw data", rawData).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Info().
                Str("level", "info").
                Str("address", Address).
                Int("port", Port).
                Hex("raw data", rawData).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Warn().
                Str("level", "warn").
                Str("address", Address).
                Int("port", Port).
                Hex("raw data", rawData).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Error().
                Str("level", "error").
                Str("address", Address).
                Int("port", Port).
                Hex("raw data", rawData).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Fatal().
                Str("level", "fatal").
                Str("address", Address).
                Int("port", Port).
                Hex("raw data", rawData).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Panic().
                Str("level", "panic").
                Str("address", Address).
                Int("port", Port).
                Hex("raw data", rawData).
                Bool("enabled", Enabled).Msg("Server settings")

        log.Info().Msg("Finished")
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>

<pre>
package main

import (
        "fmt"

        "github.com/logrusorgru/aurora"
)

func main() {
        var colorizer aurora.Aurora
        colorizer = aurora.NewAurora(true)

        fmt.Println(colorizer.Red("Test"))
        fmt.Println(colorizer.Green("Test"))
        fmt.Println(colorizer.Blue("Test"))
        fmt.Println(colorizer.Cyan("Test"))
        fmt.Println(colorizer.Magenta("Test"))
        fmt.Println(colorizer.Yellow("Test"))
}
</pre>

<pre>
package main

import (
        "fmt"

        "github.com/logrusorgru/aurora"
)

func main() {
        var colorizer aurora.Aurora
        colorizer = aurora.NewAurora(false)

        fmt.Println(colorizer.Red("Test"))
        fmt.Println(colorizer.Green("Test"))
        fmt.Println(colorizer.Blue("Test"))
        fmt.Println(colorizer.Cyan("Test"))
        fmt.Println(colorizer.Magenta("Test"))
        fmt.Println(colorizer.Yellow("Test"))
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>

<pre>
package main

import (
        "flag"
        "fmt"

        "github.com/logrusorgru/aurora"
)

var colorizer aurora.Aurora

func init() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()

        colorizer = aurora.NewAurora(*colors)
}

func main() {
        fmt.Println(colorizer.Red("Test"))
        fmt.Println(colorizer.Green("Test"))
        fmt.Println(colorizer.Blue("Test"))
        fmt.Println(colorizer.Cyan("Test"))
        fmt.Println(colorizer.Magenta("Test"))
        fmt.Println(colorizer.Yellow("Test"))
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>

<pre>
package main

import (
        "flag"
        "fmt"

        "github.com/logrusorgru/aurora"
)

var colorizer aurora.Aurora

func init() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()

        colorizer = aurora.NewAurora(*colors)
}

func main() {
        fmt.Println(colorizer.Red("Test"))
        fmt.Println(colorizer.Green("Test"))
        fmt.Println(colorizer.Blue("Test"))
        fmt.Println(colorizer.Cyan("Test"))
        fmt.Println(colorizer.Magenta("Test"))
        fmt.Println(colorizer.Yellow("Test"))

        fmt.Println()

        fmt.Println(colorizer.Bold(colorizer.Red("Test")))
        fmt.Println(colorizer.Bold(colorizer.Green("Test")))
        fmt.Println(colorizer.Bold(colorizer.Blue("Test")))
        fmt.Println(colorizer.Bold(colorizer.Cyan("Test")))
        fmt.Println(colorizer.Bold(colorizer.Magenta("Test")))
        fmt.Println(colorizer.Bold(colorizer.Yellow("Test")))
}
</pre>

<pre>
package main

import (
        "flag"
        "fmt"

        "github.com/logrusorgru/aurora"
)

var colorizer aurora.Aurora

func init() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()

        colorizer = aurora.NewAurora(*colors)
}

func main() {
        fmt.Println(colorizer.Red("Test"))
        fmt.Println(colorizer.Green("Test"))
        fmt.Println(colorizer.Blue("Test"))
        fmt.Println(colorizer.Cyan("Test"))
        fmt.Println(colorizer.Magenta("Test"))
        fmt.Println(colorizer.Yellow("Test"))

        fmt.Println()

        fmt.Println(colorizer.Red("Test").Bold())
        fmt.Println(colorizer.Green("Test").Bold())
        fmt.Println(colorizer.Blue("Test").Bold())
        fmt.Println(colorizer.Cyan("Test").Bold())
        fmt.Println(colorizer.Magenta("Test").Bold())
        fmt.Println(colorizer.Yellow("Test").Bold())
}
</pre>


<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>

<pre>
package main

import (
        "flag"
        "fmt"

        "github.com/logrusorgru/aurora"
)

var colorizer aurora.Aurora

func init() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()

        colorizer = aurora.NewAurora(*colors)
}

func main() {
        fmt.Println(colorizer.BgRed("Test"))
        fmt.Println(colorizer.BgGreen("Test"))
        fmt.Println(colorizer.BgBlue("Test"))
        fmt.Println(colorizer.BgCyan("Test"))
        fmt.Println(colorizer.BgMagenta("Test"))
        fmt.Println(colorizer.BgYellow("Test"))

        fmt.Println()

        fmt.Println(colorizer.BgRed("Test").Bold())
        fmt.Println(colorizer.BgGreen("Test").Bold())
        fmt.Println(colorizer.BgBlue("Test").Bold())
        fmt.Println(colorizer.BgCyan("Test").Bold())
        fmt.Println(colorizer.BgMagenta("Test").Bold())
        fmt.Println(colorizer.BgYellow("Test").Bold())
}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
package main

import (
        "flag"
        "fmt"

        "github.com/logrusorgru/aurora"
)

var colorizer aurora.Aurora

func init() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()

        colorizer = aurora.NewAurora(*colors)
}

func main() {
        for i := uint8(0); i &lt; 24; i++ {
                message := fmt.Sprintf("Grayscale %d", i)
                fmt.Println(colorizer.Gray(i, message))
        }
}
</pre>

<pre>
package main

import (
        "flag"
        "fmt"

        "github.com/logrusorgru/aurora"
)

var colorizer aurora.Aurora

func init() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()

        colorizer = aurora.NewAurora(*colors)
}

func main() {
        for i := uint8(0); i &lt; 24; i++ {
                message := fmt.Sprintf("Grayscale %d", i)
                fmt.Println(colorizer.BgGray(i, message))
        }
}
</pre>

<p></p>

<pre>
package main

import (
        "flag"
        "fmt"

        "github.com/logrusorgru/aurora"
)

var colorizer aurora.Aurora

func init() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()

        colorizer = aurora.NewAurora(*colors)
}

func main() {
        for j := uint8(24); j &gt; 0; j-- {
                for i := uint8(0); i &lt; 24; i += 2 {
                        message := fmt.Sprintf(" [%2d %2d] ", i, j)
                        fmt.Print(colorizer.BgGray(j, colorizer.Gray(i, message)))
                }
                fmt.Println()
        }
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>

<pre>
package main

import (
        "flag"
        "fmt"

        "github.com/logrusorgru/aurora"
)

var colorizer aurora.Aurora

func init() {
        var colors = flag.Bool("colors", false, "enable or disable colors")
        flag.Parse()

        colorizer = aurora.NewAurora(*colors)
}

func main() {
        for j := uint8(16); j &lt; 231; j += 4 {
                for i := uint8(16); i &lt; 231; i += 2 {
                        fmt.Print(colorizer.Index(i, colorizer.BgIndex(j, "x")))
                }
                fmt.Println()
        }
}
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td>17</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td>18</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td>19</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
<tr><td>20</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_76/">https://github.com/tisnik/go-root/blob/master/article_76/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>A curated list of awesome Go frameworks, libraries and software<br />
<a href="https://awesome-go.com/">https://awesome-go.com/</a>
</li>

<li>Aurora<br />
<a href="https://github.com/logrusorgru/aurora">https://github.com/logrusorgru/aurora</a>
</li>

<li>colourize<br />
<a href="https://github.com/TreyBastian/colourize">https://github.com/TreyBastian/colourize</a>
</li>

<li>go-colortext<br />
<a href="https://github.com/daviddengcn/go-colortext">https://github.com/daviddengcn/go-colortext</a>
</li>

<li>blessed na PyPi<br />
<a href="https://pypi.org/project/blessed/">https://pypi.org/project/blessed/</a>
</li>

<li>blessed na GitHubu<br />
<a href="https://github.com/jquast/blessed">https://github.com/jquast/blessed</a>
</li>

<li>Blessed documentation!<br />
<a href="https://blessed.readthedocs.io/en/latest/">https://blessed.readthedocs.io/en/latest/</a>
</li>

<li>termbox-go na GitHubu<br />
<a href="https://github.com/nsf/termbox-go">https://github.com/nsf/termbox-go</a>
</li>

<li>termui na GitHubu<br />
<a href="https://github.com/gizak/termui">https://github.com/gizak/termui</a>
</li>

<li>blessed na GitHubu<br />
<a href="https://github.com/chjj/blessed">https://github.com/chjj/blessed</a>
</li>

<li>blessed-contrib na GitHubu<br />
<a href="https://github.com/yaronn/blessed-contrib">https://github.com/yaronn/blessed-contrib</a>
</li>

<li>tui-rs na GitHubu<br />
<a href="https://github.com/fdehau/tui-rs">https://github.com/fdehau/tui-rs</a>
</li>

<li>asciigraph<br />
<a href="https://github.com/guptarohit/asciigraph">https://github.com/guptarohit/asciigraph</a>
</li>

<li>Standardní balíček text/tabwriter<br />
<a href="https://golang.org/pkg/text/tabwriter/">https://golang.org/pkg/text/tabwriter/</a>
</li>

<li>Elastic tabstops: A better way to indent and align code<br />
<a href="https://nickgravgaard.com/elastic-tabstops/">https://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>ASCII Table Writer<br />
<a href="https://github.com/olekukonko/tablewriter">https://github.com/olekukonko/tablewriter</a>
</li>

<li>TablePrinter<br />
<a href="https://github.com/lensesio/tableprinter">https://github.com/lensesio/tableprinter</a>
</li>

<li>go-pretty<br />
<a href="https://github.com/jedib0t/go-pretty">https://github.com/jedib0t/go-pretty</a>
</li>

<li>What are the drawbacks of elastic tabstops?<br />
<a href="https://softwareengineering.stackexchange.com/questions/137290/what-are-the-drawbacks-of-elastic-tabstops">https://softwareengineering.stackexchange.com/questions/137290/what-are-the-drawbacks-of-elastic-tabstops</a>
</li>

<li>Elastic tabstop editors and plugins<br />
<a href="https://stackoverflow.com/questions/28652/elastic-tabstop-editors-and-plugins">https://stackoverflow.com/questions/28652/elastic-tabstop-editors-and-plugins</a>
</li>

<li>Příkaz gofmt<br />
<a href="https://golang.org/cmd/gofmt/">https://golang.org/cmd/gofmt/</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

