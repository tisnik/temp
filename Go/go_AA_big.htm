<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Číselné hodnoty s neomezeným rozsahem a přesností v programovacím jazyku Go: typ Decimal</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Číselné hodnoty s neomezeným rozsahem a přesností v programovacím jazyku Go: typ Decimal</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Číselné hodnoty s&nbsp;neomezeným rozsahem a přesností v&nbsp;programovacím jazyku Go: typ <strong>Decimal</strong></a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">3. Instalace balíčku <strong>shopspring/decimal</strong></a></p>
<p><a href="#k04">4. Nulová hodnota typu <strong>Decimal</strong></a></p>
<p><a href="#k05">5. Konstrukce hodnot typu <strong>Decimal</strong> s&nbsp;využitím inicializační celočíselné hodnoty</a></p>
<p><a href="#k06">6. Konstrukce hodnot typu <strong>Decimal</strong> s&nbsp;využitím inicializační hodnoty s&nbsp;plovoucí řádovou čárkou</a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">8. Převod obsahu řetězce na numerickou hodnotu typu <strong>Decimal</strong></a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Číselné hodnoty s&nbsp;neomezeným rozsahem a přesností v&nbsp;programovacím jazyku Go: typ <strong>Decimal</strong></h2>

<p><a href="https://www.root.cz/serialy/programovaci-jazyk-go/">V&nbsp;seriálu
o programovacím jazyce Go</a> jsme se již zabývali způsoby, jakými je možné
v&nbsp;tomto programovacím jazyce pracovat s&nbsp;hodnotami, které mají
neomezený rozsah a/nebo i přesnost [<a
href="https://www.root.cz/clanky/ciselne-hodnoty-s-neomezenym-rozsahem-a-presnosti-v-programovacim-jazyku-go-1/">1</a>]
[<a
href="https://www.root.cz/clanky/ciselne-hodnoty-s-neomezenym-rozsahem-a-presnosti-v-programovacim-jazyku-go-1/">2</a>].
Připomeňme si, že se pro tento účel používají datové struktury definované ve
standardním balíčku <strong>math/big</strong>; konkrétně se jedná o celá čísla
s&nbsp;neomezeným rozsahem (<strong>big.Int</strong>), zlomky, jejichž čitatele
i jmenovatele mají neomezený rozsah (<strong>big.Rat</strong>) a konečně
hodnoty s&nbsp;plovoucí řádovou čárkou (<strong>big.Float</strong>). Existují
ovšem situace, které vyžadují použití odlišných způsobů reprezentace rozsáhlých
numerických hodnot. A jedna z&nbsp;možných reprezentací je nabízena
v&nbsp;balíčku <a
href="https://github.com/shopspring/decimal">shopspring/decimal</a>. Jak již
název tohoto balíčku naznačuje, nejedná se o součást standardní knihovny, takže
je nutná jeho (triviální) instalace.</p>

<p><div class="rs-tip-major">Poznámka: pro Go existuje hned několik balíčků
s&nbsp;podobným jménem; k&nbsp;některým z&nbsp;nich se ještě vrátíme.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Interní reprezentace numerických hodnot</h2>

<pre>
</pre>


<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace balíčku <strong>shopspring/decimal</strong></h2>

<p>Samotná instalace balíčku <strong>shopspring/decimal</strong> je při použití
některé novější verze základních nástrojů programovacího jazyka Go jednoduchá.
Nejprve si vytvořte prázdný projekt příkazem:</p>

<pre>
$ <strong>go mod init decimal-1</strong>
</pre>

<p>Dále je nutné upravit soubor <strong>go.mod</strong>, který vznikne
předchozím příkazem, do podoby:</p>

<pre>
module decimal-1
&nbsp;
go 1.20
&nbsp;
<strong>require github.com/shopspring/decimal v1.3.1</strong>
</pre>

<p>Nyní je již možné ve zdrojových souborech projektu provést import balíčku
<strong>shopspring/decimal</strong> a začít používat zde definovaný datový typ
<strong>Decimal</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/shopspring/decimal"
)
&nbsp;
...
...
...
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Nulová hodnota typu <strong>Decimal</strong></h2>

<p>Již ve standardním balíčku <strong>math.big</strong> je zajištěno, že
explicitně neinicializovaná struktura daného typu <strong>big.Int</strong>,
<strong>big.Rat</strong> nebo <strong>big.Float</strong> je považována za
nulovou hodnotu, což může zjednodušovat zápis programů. Ostatně si to můžeme
velmi snadno ověřit tímto triviálním příkladem, v&nbsp;němž pouze definujeme
proměnné daného typu, ovšem bez jejich explicitní inicializace:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "math/big"
)
&nbsp;
func <strong>main</strong>() {
        var x big.Int
        var y big.Rat
        var z big.Float
&nbsp;
        fmt.Println("big.Int  ", x.Text(10))
        fmt.Println("big.Rat  ", y.String())
        fmt.Println("big.Float", z.Text('f', 10))
}
</pre>

<p>S&nbsp;těmito výsledky:</p>

<pre>
big.Int   0
big.Rat   0/1
big.Float 0.0000000000
</pre>

<p>Podobně je tomu i u datového typu <strong>Decimal</strong>, jehož
neinicializované proměnné jsou automaticky považovány za nulové hodnoty:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/shopspring/decimal"
)
&nbsp;
func <strong>main</strong>() {
        var d <u>decimal.Decimal</u>
        fmt.Println(d)
}
</pre>

<p>Po překladu a spuštění tohoto demonstračního příkladu se skutečně vypíše
nula:</p>

<pre>
0
</pre>

<p><div class="rs-tip-major">Poznámka: zde se počítá s&nbsp;tím, že
v&nbsp;jazyce Go je explicitně specifikováno, že všechny hodnoty (i hodnoty
prvků struktur) jsou inicializovány na nulu.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Konstrukce hodnot typu <strong>Decimal</strong> s&nbsp;využitím inicializační celočíselné hodnoty</h2>

<p>Hodnoty typu <strong>Decimal</strong> je pochopitelně možné vytvářet a
současně i inicializovat (na hodnotu odlišnou od nuly). Pro inicializaci lze
použít i celočíselné hodnoty, konkrétně hodnoty typu <strong>int32</strong> či
<strong>int</strong> (což je v&nbsp;současnosti na většině architektur vlastně
<strong>int64</strong>). Podívejme se nejdříve na ukázku použití konstruktoru,
který akceptuje hodnoty typu <strong>int32</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/shopspring/decimal"
)
&nbsp;
func <strong>main</strong>() {
        d0 := <u>decimal.NewFromInt32(0)</u>
        fmt.Println(d0)
&nbsp;
        d1 := <u>decimal.NewFromInt32(1234)</u>
        fmt.Println(d1)
&nbsp;
        d2 := <u>decimal.NewFromInt32(12345)</u>
        fmt.Println(d2)
&nbsp;
        d3 := <u>decimal.NewFromInt32(123456)</u>
        fmt.Println(d3)
&nbsp;
        d4 := <u>decimal.NewFromInt32(1234567)</u>
        fmt.Println(d4)
&nbsp;
        d5 := <u>decimal.NewFromInt32(12345678)</u>
        fmt.Println(d5)
}
</pre>

<p>Výsledky vypsané po překladu a spuštění tohoto demonstračního příkladu
pravděpodobně nebudou nijak překvapivé:</p>

<pre>
0
1234
12345
123456
1234567
12345678
</pre>

<p>Prakticky stejným způsobem, pouze s&nbsp;využitím odlišného konstruktoru,
můžeme pro inicializaci datového typu <strong>Decimal</strong> použít i hodnoty
typu <strong>int</strong> (tedy většinou <strong>int64</strong>):</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/shopspring/decimal"
)
&nbsp;
func <strong>main</strong>() {
        d0 := <u>decimal.NewFromInt(0)</u>
        fmt.Println(d0)
&nbsp;
        d1 := <u>decimal.NewFromInt(123456)</u>
        fmt.Println(d1)
&nbsp;
        d2 := <u>decimal.NewFromInt(123456789)</u>
        fmt.Println(d2)
&nbsp;
        d3 := <u>decimal.NewFromInt(12345678900000)</u>
        fmt.Println(d3)
&nbsp;
        d4 := <u>decimal.NewFromInt(1234567890000000000)</u>
        fmt.Println(d4)
}
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
0
123456
123456789
12345678900000
1234567890000000000
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;těchto případech je převod
pochopitelně proveden bez ztráty přesnosti a/nebo rozsahu.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Konstrukce hodnot typu <strong>Decimal</strong> s&nbsp;využitím inicializační hodnoty s&nbsp;plovoucí řádovou čárkou</h2>

<p>K&nbsp;inicializaci hodnot typu <strong>Decimal</strong> můžeme pochopitelně
použít i hodnotu s&nbsp;plovoucí řádovou čárkou, což v&nbsp;programovacím
jazyku Go znamená typy <strong>float32</strong> a <strong>float64</strong>. Na
tomto místě je ale dobré si uvědomit, že typ <strong>Decimal</strong> nedokáže
vyjádřit kladné a záporné nekonečno, takže při pokusu o převod těchto hodnot
dojde k&nbsp;pádu (<i>panic</i>) celého programu (ovšem víme již, že tento pád
lze zachytit).</p>

<p>Nejdříve si ukažme inicializaci s&nbsp;využitím vstupní hodnoty typu
<strong>float32</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "math"
&nbsp;
        "github.com/shopspring/decimal"
)
&nbsp;
func <strong>main</strong>() {
        d0 := <u>decimal.NewFromFloat32(0)</u>
        fmt.Println(d0)
&nbsp;
        d1 := <u>decimal.NewFromFloat32(1e10)</u>
        fmt.Println(d1)
&nbsp;
        d2 := <u>decimal.NewFromFloat32(1e-10)</u>
        fmt.Println(d2)
&nbsp;
        <i>// maximální podporovaný exponent</i>
        d3 := <u>decimal.NewFromFloat32(1.2e38)</u>
        fmt.Println(d3)
&nbsp;
        <i>// minimální podporovaný exponent</i>
        d4 := <u>decimal.NewFromFloat32(1.2e-38)</u>
        fmt.Println(d4)
&nbsp;
        <i>// de facto nula z pohledu float32</i>
        d5 := <u>decimal.NewFromFloat32(1.1e-100)</u>
        fmt.Println(d5)
&nbsp;
        <i>// kladné nekonečno</i>
        d6 := <u>decimal.NewFromFloat32(float32(math.Inf(1)))</u>
        fmt.Println(d6)
&nbsp;
        <i>// záporné nekonečno</i>
        d7 := <u>decimal.NewFromFloat32(float32(math.Inf(-1)))</u>
        fmt.Println(d7)
}
</pre>

<p>Prvních pět hodnot se převede bez problémů:</p>

<pre>
0
10000000000
0.0000000001
120000000000000000000000000000000000000
0.000000000000000000000000000000000000012
</pre>

<p>Šestá hodnota je pro <strong>float32</strong> tak malá, že se jedná o
nulu:</p>

<pre>
0
</pre>

<p>A kladné či záporné nekonečno převést nelze &ndash; právě zde dojde
k&nbsp;pádu aplikace:</p>

<pre>
panic: Cannot create a Decimal from +Inf
&nbsp;
goroutine 1 [running]:
github.com/shopspring/decimal.newFromFloat(0xc00010a270?, 0x0?, 0x0?)
        /home/ptisnovs/go/pkg/mod/github.com/shopspring/decimal@v1.3.1/decimal.go:286 +0x3d4
github.com/shopspring/decimal.NewFromFloat32(0x4d49f8?)
        /home/ptisnovs/go/pkg/mod/github.com/shopspring/decimal@v1.3.1/decimal.go:281 +0x65
main.main()
        /home/ptisnovs/src/go-root/article_AA/04_construct_from_float_32/construct_from_float32.go:29 +0x2c5
exit status 2
</pre>

<p>Podobně můžeme postupovat při použití numerických hodnot reprezentovaných
typem <strong>float64</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "math"
&nbsp;
        "github.com/shopspring/decimal"
)
&nbsp;
func <strong>main</strong>() {
        d0 := <u>decimal.NewFromFloat(0)</u>
        fmt.Println(d0)
&nbsp;
        d1 := <u>decimal.NewFromFloat(1e10)</u>
        fmt.Println(d1)
&nbsp;
        d2 := <u>decimal.NewFromFloat(1e-10)</u>
        fmt.Println(d2)
&nbsp;
        <i>// maximální exponent</i>
        d3 := <u>decimal.NewFromFloat(1.2e308)</u>
        fmt.Println(d3)
&nbsp;
        <i>// minimální exponent</i>
        d4 := <u>decimal.NewFromFloat(1.2e-308)</u>
        fmt.Println(d4)
&nbsp;
        <i>// tato hodnota je již de facto nulová</i>
        d5 := <u>decimal.NewFromFloat(1.1e-1000)</u>
        fmt.Println(d5)
&nbsp;
        <i>// kladné nekonečno</i>
        d6 := <u>decimal.NewFromFloat(math.Inf(1))</u>
        fmt.Println(d6)
&nbsp;
        <i>// záporné nekonečno</i>
        d7 := <u>decimal.NewFromFloat(math.Inf(-1))</u>
        fmt.Println(d7)
}
</pre>

<p>Podívejme se nyní na zobrazené výsledky, a to včetně pádu aplikace při
pokusu o převedení nekonečné hodnoty na typ <strong>Decimal</strong>:</p>

<pre>
0
10000000000
0.0000000001
120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012
0
panic: Cannot create a Decimal from +Inf
&nbsp;
goroutine 1 [running]:
github.com/shopspring/decimal.newFromFloat(0xc00010a270?, 0x0?, 0x0?)
        /home/ptisnovs/go/pkg/mod/github.com/shopspring/decimal@v1.3.1/decimal.go:286 +0x3d4
github.com/shopspring/decimal.NewFromFloat(0x4d49f8?)
        /home/ptisnovs/go/pkg/mod/github.com/shopspring/decimal@v1.3.1/decimal.go:262 +0x56
main.main()
        /home/ptisnovs/src/go-root/article_AA/05_construct_from_float/construct_from_float.go:29 +0x2c5
exit status 2
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Explicitní specifikace </h2>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/shopspring/decimal"
)
&nbsp;
func <strong>main</strong>() {
        d0 := <u>decimal.NewFromFloatWithExponent(123.456, 0)</u>
        fmt.Println(d0)
&nbsp;
        d1 := <u>decimal.NewFromFloatWithExponent(123.456, 1)</u>
        fmt.Println(d1)
&nbsp;
        d2 := <u>decimal.NewFromFloatWithExponent(123.456, 2)</u>
        fmt.Println(d2)
&nbsp;
        d3 := <u>decimal.NewFromFloatWithExponent(123.456, 3)</u>
        fmt.Println(d3)
&nbsp;
        d4 := <u>decimal.NewFromFloatWithExponent(123.456, -1)</u>
        fmt.Println(d4)
&nbsp;
        d5 := <u>decimal.NewFromFloatWithExponent(123.456, -2)</u>
        fmt.Println(d5)
&nbsp;
        d6 := <u>decimal.NewFromFloatWithExponent(123.456, -3)</u>
        fmt.Println(d6)
&nbsp;
        d7 := <u>decimal.NewFromFloatWithExponent(123.456, -4)</u>
        fmt.Println(d7)
}
</pre>

<p>Zajímavé bude sledovat, jak ovlivní předaná hodnota exponentu hodnotu, která
převodem na typ <strong>Decimal</strong> vznikne:</p>

<pre>
123
120
100
0
123.5
123.46
123.456
123.456
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Převod obsahu řetězce na numerickou hodnotu typu <strong>Decimal</strong></h2>

<p>Velmi často má programátor k&nbsp;dispozici numerickou hodnotu
v&nbsp;textové podobě, tj.&nbsp;reprezentovanou řetězcem. Takovou hodnotu lze
převést (naparsovat) na typ <strong>Decimal</strong> přímo, tj.&nbsp;bez
mezipřevodu na celá čísla nebo čísla s&nbsp;plovoucí řádovou čárkou. V&nbsp;tom
nejjednodušším případě můžeme pro parsing textu na <strong>Decimal</strong>
použít konstruktor nazvaný <strong>NewFromString</strong>, který ovšem vrací
dvě hodnoty &ndash; převedené číslo a rozhraní reprezentující chybu při
převodu. Pochopitelně pokud k&nbsp;chybě nenastane, bude hodnota chyby
nastavena na <strong>nil</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/shopspring/decimal"
)
&nbsp;
func <strong>main</strong>() {
        d0, err := <u>decimal.NewFromString("-0")</u>
        fmt.Println(d0, err)
        fmt.Println()
&nbsp;
        d1, err := <u>decimal.NewFromString("-1234567890.123456789")</u>
        fmt.Println(d1, err)
        fmt.Println()
&nbsp;
        d2, err := <u>decimal.NewFromString("1e1000")</u>
        fmt.Println(d2, err)
        fmt.Println()
&nbsp;
        d3, err := <u>decimal.NewFromString("1e-1000")</u>
        fmt.Println(d3, err)
        fmt.Println()
&nbsp;
        d4, err := <u>decimal.NewFromString("-1234567890e123456")</u>
        fmt.Println(d4, err)
        fmt.Println()
}
</pre>

<p>A takto vypadají výsledky (povšimněte si, že chyba je v&nbsp;těchto
případech vždy <strong>nil</strong>):</p>

<pre>
0 &lt;<strong>nil</strong>&gt;
&nbsp;
-1234567890.123456789 &lt;<strong>nil</strong>&gt;
&nbsp;
lt;<strong>nil</strong>&gt;
&nbsp;
lt;<strong>nil</strong>&gt;
&nbsp;
...
...
...
</pre>

<p><div class="rs-tip-major">Poznámka: poslední hodnota je obrovská, a proto
ani není vypsána.</div></p>

<p>Otestovat si můžeme i pokusy o převod řetězců, které číselné hodnoty
(v&nbsp;textové podobě) ve skutečnosti neobsahují:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/shopspring/decimal"
)
&nbsp;
func <strong>main</strong>() {
        d0, err := <u>decimal.NewFromString("-a")</u>
        fmt.Println(d0, err)
        fmt.Println()
&nbsp;
        d1, err := <u>decimal.NewFromString("-x.123456789")</u>
        fmt.Println(d1, err)
        fmt.Println()
&nbsp;
        d2, err := <u>decimal.NewFromString("1e100a")</u>
        fmt.Println(d2, err)
        fmt.Println()
}
</pre>

<p>V&nbsp;těchto případech získáme chyby s&nbsp;přesnější informací o provedené
operaci a problémech, které nastaly:</p>

<pre>
0 can't convert -a to decimal
&nbsp;
0 can't convert -x.123456789 to decimal
&nbsp;
0 can't convert 1e100a to decimal: exponent is not numeric
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/shopspring/decimal"
)
&nbsp;
func <strong>main</strong>() {
        d0 := decimal.RequireFromString("-a")
        fmt.Println(d0)
        fmt.Println()
&nbsp;
        d1 := decimal.RequireFromString("-x.123456789")
        fmt.Println(d1)
        fmt.Println()
&nbsp;
        d2 := decimal.RequireFromString("1e100a")
        fmt.Println(d2)
        fmt.Println()
}
</pre>

<pre>
panic: can't convert -a to decimal
&nbsp;
goroutine 1 [running]:
github.com/shopspring/decimal.RequireFromString(...)
        /home/ptisnovs/go/pkg/mod/github.com/shopspring/decimal@v1.3.1/decimal.go:243
main.main()
        /home/ptisnovs/src/go-root/article_AA/12_require_from_string/require_from_string_err.go:10 +0x208
exit status 2
</pre>



<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "regexp"
&nbsp;
        "github.com/shopspring/decimal"
)
&nbsp;
func <strong>main</strong>() {
        r := regexp.MustCompile("neco")
&nbsp;
        d0, err := decimal.NewFromFormattedString("-0", r)
        fmt.Println(d0, err)
        fmt.Println()
&nbsp;
        d1, err := decimal.NewFromFormattedString("-1234567890.123456789", r)
        fmt.Println(d1, err)
        fmt.Println()
&nbsp;
        d2, err := decimal.NewFromFormattedString("1e1000", r)
        fmt.Println(d2, err)
        fmt.Println()
&nbsp;
        d3, err := decimal.NewFromFormattedString("1e-1000", r)
        fmt.Println(d3, err)
        fmt.Println()
&nbsp;
        d4, err := decimal.NewFromFormattedString("-1234567890e123", r)
        fmt.Println(d4, err)
        fmt.Println()
}
</pre>

<pre>
0 &lt;<strong>nil</strong>&gt;
&nbsp;
-1234567890.123456789 &lt;<strong>nil</strong>&gt;
&nbsp;
lt;<strong>nil</strong>&gt;
&nbsp;
lt;<strong>nil</strong>&gt;
&nbsp;
-1234567890000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &lt;<strong>nil</strong>&gt;
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "regexp"
&nbsp;
        "github.com/shopspring/decimal"
)
&nbsp;
func <strong>main</strong>() {
        r := regexp.MustCompile(",")
&nbsp;
        d0, err := decimal.NewFromFormattedString("1,000", r)
        fmt.Println(d0, err)
        fmt.Println()
&nbsp;
        d1, err := decimal.NewFromFormattedString("1,000,000", r)
        fmt.Println(d1, err)
        fmt.Println()
&nbsp;
        d2, err := decimal.NewFromFormattedString("1.000", r)
        fmt.Println(d2, err)
        fmt.Println()
&nbsp;
        d3, err := decimal.NewFromFormattedString("1,000.000", r)
        fmt.Println(d3, err)
        fmt.Println()
}
</pre>

<pre>
1000 &lt;<strong>nil</strong>&gt;
&nbsp;
1000000 &lt;<strong>nil</strong>&gt;
&nbsp;
1 &lt;<strong>nil</strong>&gt;
&nbsp;
1000 &lt;<strong>nil</strong>&gt;
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "regexp"
&nbsp;
        "github.com/shopspring/decimal"
)
&nbsp;
func <strong>main</strong>() {
        r := regexp.MustCompile("\\$")
&nbsp;
        d0, err := decimal.NewFromFormattedString("$1000", r)
        fmt.Println(d0, err)
        fmt.Println()
&nbsp;
        d1, err := decimal.NewFromFormattedString("20.25$", r)
        fmt.Println(d1, err)
        fmt.Println()
&nbsp;
        r = regexp.MustCompile("Kč")
        d2, err := decimal.NewFromFormattedString("1000Kč", r)
        fmt.Println(d2, err)
        fmt.Println()
}
</pre>

<pre>
1000 &lt;<strong>nil</strong>&gt;
&nbsp;
20.25 &lt;<strong>nil</strong>&gt;
&nbsp;
1000 &lt;<strong>nil</strong>&gt;
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech <a
href="https://www.root.cz/clanky/ciselne-hodnoty-s-neomezenym-rozsahem-a-presnosti-v-programovacim-jazyku-go-1/">předminule</a>,
<a href="https://www.root.cz/clanky/ciselne-hodnoty-s-neomezenym-rozsahem-a-presnosti-v-programovacim-jazyku-go-2/">minule</a>
i dnes použitých demonstračních příkladů naprogramovaných v&nbsp;jazyku Go byly
uloženy do Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář, můžete namísto toho
použít odkazy na jednotlivé demonstrační příklady, které naleznete
v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_bigint_construction.go</td><td>konstrukce instance datového typu <strong>big.Int</strong> a tisk uložené hodnoty</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/01_bigint_construction.go">https://github.com/tisnik/go-root/blob/master/article_A8/01_bigint_construction.go</a></td></tr>
<tr><td> 2</td><td>02_bigint_add.go</td><td>aritmetická operace součtu a datový typ <strong>big.Int</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/02_bigint_add.go">https://github.com/tisnik/go-root/blob/master/article_A8/02_bigint_add.go</a></td></tr>
<tr><td> 3</td><td>03_bigint_large_numbers.go</td><td>aritmetická operace součinu a datový typ <strong>big.Int</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/03_bigint_large_numbers.go">https://github.com/tisnik/go-root/blob/master/article_A8/03_bigint_large_numbers.go</a></td></tr>
<tr><td> 4</td><td>04_factorial.go</td><td>výpočet faktoriálu s&nbsp;využitím datového typu <strong>big.Int</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/04_factorial.go">https://github.com/tisnik/go-root/blob/master/article_A8/04_factorial.go</a></td></tr>
<tr><td> 5</td><td>04_factorial_B.go</td><td>zjednodušený výpočet faktoriálu s&nbsp;využitím datového typu <strong>big.Int</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/04_factorial_B.go">https://github.com/tisnik/go-root/blob/master/article_A8/04_factorial_B.go</a></td></tr>
<tr><td> 6</td><td>05_bigint_print_base.go</td><td>převod hodnoty typu <strong>big.Int</strong> na text s&nbsp;volitelnou bází</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/05_bigint_print_base.go">https://github.com/tisnik/go-root/blob/master/article_A8/05_bigint_print_base.go</a></td></tr>
<tr><td> 7</td><td>06_bigint_as_bytes.go</td><td>zobrazení interní struktury hodnot typu <strong>big.Int</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/06_bigint_as_bytes.go">https://github.com/tisnik/go-root/blob/master/article_A8/06_bigint_as_bytes.go</a></td></tr>
<tr><td> 8</td><td>07_bigint_change_raw.go</td><td>modifikace interní struktury hodnot typu <strong>big.Int</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/07_bigint_change_raw.go">https://github.com/tisnik/go-root/blob/master/article_A8/07_bigint_change_raw.go</a></td></tr>
<tr><td> 9</td><td>08_bigint_change_raw.go</td><td>nastavení jednotlivých bajtů hodnoty typu <strong>big.Int</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/08_bigint_change_raw.go">https://github.com/tisnik/go-root/blob/master/article_A8/08_bigint_change_raw.go</a></td></tr>
<tr><td>10</td><td>09_bigint_from_string.go</td><td>konstrukce hodnoty <strong>big.Int</strong> z&nbsp;řetězce</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/09_bigint_from_string.go">https://github.com/tisnik/go-root/blob/master/article_A8/09_bigint_from_string.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>10_rationals_construction.go</td><td>konstrukce zlomku &ndash; hodnoty <strong>big.Rat</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/10_rationals_construction.go">https://github.com/tisnik/go-root/blob/master/article_A8/10_rationals_construction.go</a></td></tr>
<tr><td>12</td><td>11_rationals_add.go</td><td>součet dvou zlomků</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/11_rationals_add.go">https://github.com/tisnik/go-root/blob/master/article_A8/11_rationals_add.go</a></td></tr>
<tr><td>13</td><td>12_rationals_mul.go</td><td>operace součinu zlomků a vliv na přesnost a rozsah hodnoty</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/12_rationals_mul.go">https://github.com/tisnik/go-root/blob/master/article_A8/12_rationals_mul.go</a></td></tr>
<tr><td>14</td><td>13_rational_to_int.go</td><td>převod zlomku na celočíselného čitatele a jmenovatele</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/13_rational_to_int.go">https://github.com/tisnik/go-root/blob/master/article_A8/13_rational_to_int.go</a></td></tr>
<tr><td>15</td><td>14_rationals_to_float.go</td><td>převod zlomku na hodnotu s&nbsp;plovoucí řádovou čárkou</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/14_rationals_to_float.go">https://github.com/tisnik/go-root/blob/master/article_A8/14_rationals_to_float.go</a></td></tr>
<tr><td>16</td><td>15_pi_wallis_product.go</td><td>výpočet hodnoty &pi; (naivní varianta)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/15_pi_wallis_product.go">https://github.com/tisnik/go-root/blob/master/article_A8/15_pi_wallis_product.go</a></td></tr>
<tr><td>17</td><td>16_pi_wallis_product_limits.go</td><td>limity naivní varianty výpočtu hodnoty &pi;</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/16_pi_wallis_product_limits.go">https://github.com/tisnik/go-root/blob/master/article_A8/16_pi_wallis_product_limits.go</a></td></tr>
<tr><td>18</td><td>17_pi_better_wallis_product.go</td><td>vylepšená varianta výpočtu hodnoty &pi;</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/17_pi_better_wallis_product.go">https://github.com/tisnik/go-root/blob/master/article_A8/17_pi_better_wallis_product.go</a></td></tr>
<tr><td>19</td><td>18_rationals_div_zero.go</td><td>konstrukce zlomku s&nbsp;nulovým jmenovatelem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/18_rationals_div_zero.go">https://github.com/tisnik/go-root/blob/master/article_A8/18_rationals_div_zero.go</a></td></tr>
<tr><td>20</td><td>19_rationals_div_zero.go</td><td>operace, která vytvoří zlomek s&nbsp;nulovým jmenovatelem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A8/19_rationals_div_zero.go">https://github.com/tisnik/go-root/blob/master/article_A8/19_rationals_div_zero.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>01_bigfloat_construction.go</td><td>konstrukce hodnoty typu <strong>big.Float</strong>, základní aritmetické operace a zobrazení hodnoty</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/01_bigfloat_construction.go">https://github.com/tisnik/go-root/blob/master/article_A9/01_bigfloat_construction.go</a></td></tr>
<tr><td>22</td><td>02_bigfloat_add.go</td><td>zvýšení počtu cifer zobrazených za desetinnou čárkou (tečkou)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/02_bigfloat_add.go">https://github.com/tisnik/go-root/blob/master/article_A9/02_bigfloat_add.go</a></td></tr>
<tr><td>23</td><td>03_bigfloat_large_numbers.go</td><td>zobrazení velkých hodnot bez použití exponentu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/03_bigfloat_large_numbers.go">https://github.com/tisnik/go-root/blob/master/article_A9/03_bigfloat_large_numbers.go</a></td></tr>
<tr><td>24</td><td>04_bigfloat_small_numbers.go</td><td>zobrazení malých hodnot bez použití exponentu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/04_bigfloat_small_numbers.go">https://github.com/tisnik/go-root/blob/master/article_A9/04_bigfloat_small_numbers.go</a></td></tr>
<tr><td>25</td><td>05_bigfloat_exp_format.go</td><td>zobrazení numerických hodnot ve tvaru s&nbsp;exponentem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/05_bigfloat_exp_format.go">https://github.com/tisnik/go-root/blob/master/article_A9/05_bigfloat_exp_format.go</a></td></tr>
<tr><td>26</td><td>06_bigfloat_exp_format.go</td><td>zobrazení numerických hodnot ve tvaru s&nbsp;exponentem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/06_bigfloat_exp_format.go">https://github.com/tisnik/go-root/blob/master/article_A9/06_bigfloat_exp_format.go</a></td></tr>
<tr><td>27</td><td>07_hexa_mantissa.go</td><td>výpis hodnoty s&nbsp;využitím mantisy zapsané v&nbsp;hexadecimálním kódu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/07_hexa_mantissa.go">https://github.com/tisnik/go-root/blob/master/article_A9/07_hexa_mantissa.go</a></td></tr>
<tr><td>28</td><td>08_pi_wallis_product.go</td><td>výpočet hodnoty &pi; podruhé</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/08_pi_wallis_product.go">https://github.com/tisnik/go-root/blob/master/article_A9/08_pi_wallis_product.go</a></td></tr>
<tr><td>29</td><td>09_bigfloat_to_rat.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/09_bigfloat_to_rat.go">https://github.com/tisnik/go-root/blob/master/article_A9/09_bigfloat_to_rat.go</a></td></tr>
<tr><td>30</td><td>10_bigfloat_to_float64.go</td><td>převody mezi typem <strong>big.Float</strong> a zlomky</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/10_bigfloat_to_float64.go">https://github.com/tisnik/go-root/blob/master/article_A9/10_bigfloat_to_float64.go</a></td></tr>
<tr><td>31</td><td>11_bigfloat_to_float32.go</td><td>převod mezi typem <strong>big.Float</strong> a typy <strong>float64</strong> a <strong>float32</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/11_bigfloat_to_float32.go">https://github.com/tisnik/go-root/blob/master/article_A9/11_bigfloat_to_float32.go</a></td></tr>
<tr><td>32</td><td>12_precision.go</td><td>přesnost hodnot typu <strong>big.Float</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/12_precision.go">https://github.com/tisnik/go-root/blob/master/article_A9/12_precision.go</a></td></tr>
<tr><td>33</td><td>13_precision_B.go</td><td>přesnost hodnot typu <strong>big.Float</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/13_precision_B.go">https://github.com/tisnik/go-root/blob/master/article_A9/13_precision_B.go</a></td></tr>
<tr><td>34</td><td>14_positive_infinity.go</td><td>výsledek podílu 1/0</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/14_positive_infinity.go">https://github.com/tisnik/go-root/blob/master/article_A9/14_positive_infinity.go</a></td></tr>
<tr><td>35</td><td>15_negative_infinity.go</td><td>výsledek podílu -1/0</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/15_negative_infinity.go">https://github.com/tisnik/go-root/blob/master/article_A9/15_negative_infinity.go</a></td></tr>
<tr><td>36</td><td>16_inf_operations.go</td><td>povolené operace s&nbsp;nekonečny</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/16_inf_operations.go">https://github.com/tisnik/go-root/blob/master/article_A9/16_inf_operations.go</a></td></tr>
<tr><td>37</td><td>17_inf_operations.go</td><td>nepovolené operace s&nbsp;nekonečny: -&infin;+&infin;</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/17_inf_operations.go">https://github.com/tisnik/go-root/blob/master/article_A9/17_inf_operations.go</a></td></tr>
<tr><td>38</td><td>18_inf_operations.go</td><td>nepovolené operace s&nbsp;nekonečny: &infin;&times;0</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/18_inf_operations.go">https://github.com/tisnik/go-root/blob/master/article_A9/18_inf_operations.go</a></td></tr>
<tr><td>39</td><td>19_catch_panic.go</td><td>zachycení nepovolené operace s&nbsp;nekonečny</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/19_catch_panic.go">https://github.com/tisnik/go-root/blob/master/article_A9/19_catch_panic.go</a></td></tr>
<tr><td>40</td><td>20_div_by_zero.go</td><td>podíl 0/0</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A9/20_div_by_zero.go">https://github.com/tisnik/go-root/blob/master/article_A9/20_div_by_zero.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>41</td><td>01_zero_value</td><td>nulová hodnota datového typu <strong>Decimal</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AA/01_zero_value">https://github.com/tisnik/go-root/blob/master/article_AA/01_zero_value</a></td></tr>
<tr><td>42</td><td>02_construct_from_int_32</td><td>konstrukce hodnoty typu <strong>Decimal</strong> z&nbsp;celého čísla typu <strong>int32</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AA/02_construct_from_int_32">https://github.com/tisnik/go-root/blob/master/article_AA/02_construct_from_int_32</a></td></tr>
<tr><td>43</td><td>03_construct_from_int</td><td>konstrukce hodnoty typu <strong>Decimal</strong> z&nbsp;celého čísla typu <strong>int</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AA/03_construct_from_int">https://github.com/tisnik/go-root/blob/master/article_AA/03_construct_from_int</a></td></tr>
<tr><td>44</td><td>04_construct_from_float_32</td><td>konstrukce hodnoty typu <strong>Decimal</strong> z&nbsp;čísla typu <strong>float32</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AA/04_construct_from_float_32">https://github.com/tisnik/go-root/blob/master/article_AA/04_construct_from_float_32</a></td></tr>
<tr><td>45</td><td>05_construct_from_float</td><td>konstrukce hodnoty typu <strong>Decimal</strong> z&nbsp;čísla typu <strong>float64</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AA/05_construct_from_float">https://github.com/tisnik/go-root/blob/master/article_AA/05_construct_from_float</a></td></tr>
<tr><td>46</td><td>06_construct_from_float_with_exponent</td><td>konstrukce hodnoty typu <strong>Decimal</strong> z&nbsp;čísla typu <strong>float64</strong> se specifikací exponentu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AA/06_construct_from_float_with_exponent">https://github.com/tisnik/go-root/blob/master/article_AA/06_construct_from_float_with_exponent</a></td></tr>
<tr><td>47</td><td>07_construct_from_string</td><td>naparsování hodnoty typu <strong>Decimal</strong> z&nbsp;řetězce</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AA/07_construct_from_string">https://github.com/tisnik/go-root/blob/master/article_AA/07_construct_from_string</a></td></tr>
<tr><td>48</td><td>08_construct_from_formatted_string</td><td>naparsování hodnoty typu <strong>Decimal</strong> z&nbsp;naformátovaného řetězce</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AA/08_construct_from_formatted_string">https://github.com/tisnik/go-root/blob/master/article_AA/08_construct_from_formatted_string</a></td></tr>
<tr><td>49</td><td>09_construct_from_formatted_string</td><td>naparsování hodnoty typu <strong>Decimal</strong> z&nbsp;naformátovaného řetězce</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AA/09_construct_from_formatted_string">https://github.com/tisnik/go-root/blob/master/article_AA/09_construct_from_formatted_string</a></td></tr>
<tr><td>50</td><td>10_construct_from_formatted_string</td><td>naparsování hodnoty typu <strong>Decimal</strong> z&nbsp;naformátovaného řetězce</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AA/10_construct_from_formatted_string">https://github.com/tisnik/go-root/blob/master/article_AA/10_construct_from_formatted_string</a></td></tr>
<tr><td>51</td><td>11_construct_from_string_err</td><td>naparsování hodnoty typu <strong>Decimal</strong> z&nbsp;řetězce, který neobsahuje číselnou hodnotu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AA/11_construct_from_string_err">https://github.com/tisnik/go-root/blob/master/article_AA/11_construct_from_string_err</a></td></tr>
<tr><td>52</td><td>12_require_from_string</td><td>naparsování hodnoty typu <strong>Decimal</strong> z&nbsp;řetězce, který neobsahuje číselnou hodnotu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AA/12_require_from_string">https://github.com/tisnik/go-root/blob/master/article_AA/12_require_from_string</a></td></tr>
<tr><td>53</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AA/">https://github.com/tisnik/go-root/blob/master/article_AA/</a></td></tr>
<tr><td>54</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AA/">https://github.com/tisnik/go-root/blob/master/article_AA/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Číselné hodnoty s&nbsp;neomezeným rozsahem a přesností v&nbsp;programovacím jazyku Go (1)<br />
<a href="https://www.root.cz/clanky/ciselne-hodnoty-s-neomezenym-rozsahem-a-presnosti-v-programovacim-jazyku-go-1/">https://www.root.cz/clanky/ciselne-hodnoty-s-neomezenym-rozsahem-a-presnosti-v-programovacim-jazyku-go-1/</a>
</li>

<li>Číselné hodnoty s&nbsp;neomezeným rozsahem a přesností v&nbsp;programovacím jazyku Go (2)<br />
<a href="https://www.root.cz/clanky/ciselne-hodnoty-s-neomezenym-rozsahem-a-presnosti-v-programovacim-jazyku-go-2/">https://www.root.cz/clanky/ciselne-hodnoty-s-neomezenym-rozsahem-a-presnosti-v-programovacim-jazyku-go-2/</a>
</li>

<li>Balíček <strong>big</strong> pro jazyk Go<br />
<a href="https://pkg.go.dev/math/big">https://pkg.go.dev/math/big</a>
</li>

<li>Zdrojové kódu pro balíček <strong>big</strong><br />
<a href="https://cs.opensource.google/go/go/+/master:src/math/big/">https://cs.opensource.google/go/go/+/master:src/math/big/</a>
</li>

<li>Arbitrary-precision arithmetic<br />
<a href="https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic">https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic</a>
</li>

<li>Floating-point error mitigation<br />
<a href="https://en.wikipedia.org/wiki/Floating-point_error_mitigation">https://en.wikipedia.org/wiki/Floating-point_error_mitigation</a>
</li>

<li>Beating Floating Point at its Own Game: Posit Arithmetic<br />
<a href="http://www.johngustafson.net/pdfs/BeatingFloatingPoint.pdf">http://www.johngustafson.net/pdfs/BeatingFloatingPoint.pdf</a>
</li>

<li>Unum (number format)<br />
<a href="https://en.wikipedia.org/wiki/Unum_(number_format)">https://en.wikipedia.org/wiki/Unum_(number_format)</a>
</li>

<li>The GNU MPFR Library<br />
<a href="https://www.mpfr.org/">https://www.mpfr.org/</a>
</li>

<li>GMP: Arithmetic without limitations<br />
<a href="https://gmplib.org/">https://gmplib.org/</a>
</li>

<li>GNU MP 6.2.1 manual<br />
<a href="https://gmplib.org/manual/index">https://gmplib.org/manual/index</a>
</li>

<li>Anatomy of a posit number<br />
<a href="https://www.johndcook.com/blog/2018/04/11/anatomy-of-a-posit-number/">https://www.johndcook.com/blog/2018/04/11/anatomy-of-a-posit-number/</a>
</li>

<li>Better floating point: posits in plain language<br />
<a href="http://loyc.net/2019/unum-posits.html">http://loyc.net/2019/unum-posits.html</a>
</li>

<li>Posits, a New Kind of Number, Improves the Math of AI: The first posit-based processor core gave a ten-thousandfold accuracy boost<br />
<a href="https://spectrum.ieee.org/floating-point-numbers-posits-processor">https://spectrum.ieee.org/floating-point-numbers-posits-processor</a>
</li>

<li>Posit Standard Document (2022)<br />
<a href="https://posithub.org/khub_widget">https://posithub.org/khub_widget</a>
</li>

<li>Standard for Posit™ Arithmetic (2022)<br />
<a href="https://posithub.org/docs/posit_standard-2.pdf">https://posithub.org/docs/posit_standard-2.pdf</a>
</li>

<li>Posit Calculator<br />
<a href="https://posithub.org/widget/calculator/">https://posithub.org/widget/calculator/</a>
</li>

<li>SoftPosit<br />
<a href="https://gitlab.com/cerlane/SoftPosit">https://gitlab.com/cerlane/SoftPosit</a>
</li>

<li>PySigmoid<br />
<a href="https://github.com/mightymercado/PySigmoid">https://github.com/mightymercado/PySigmoid</a>
</li>

<li>sgpositpy<br />
<a href="https://github.com/xman/sgpositpy">https://github.com/xman/sgpositpy</a>
</li>

<li>SoftPosit.jl<br />
<a href="https://github.com/milankl/SoftPosit.jl">https://github.com/milankl/SoftPosit.jl</a>
</li>

<li>SigmoidNumbers.jl<br />
<a href="https://github.com/MohHizzani/SigmoidNumbers.jl">https://github.com/MohHizzani/SigmoidNumbers.jl</a>
</li>

<li>How many digits can float8, float16, float32, float64, and float128 contain?<br />
<a href="https://stackoverflow.com/questions/56514892/how-many-digits-can-float8-float16-float32-float64-and-float128-contain">https://stackoverflow.com/questions/56514892/how-many-digits-can-float8-float16-float32-float64-and-float128-contain</a>
</li>

<li>15. Floating Point Arithmetic: Issues and Limitations (Python documentation)<br />
<a href="https://docs.python.org/3/tutorial/floatingpoint.html">https://docs.python.org/3/tutorial/floatingpoint.html</a>
</li>

<li>Number limits, overflow, and roundoff<br />
<a href="https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:digital-information/xcae6f4a7ff015e7d:limitations-of-storing-numbers/a/number-limits-overflow-and-roundoff">https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:digital-information/xcae6f4a7ff015e7d:limitations-of-storing-numbers/a/number-limits-overflow-and-roundoff</a>
</li>

<li>The upper and lower limits of IEEE-754 standard<br />
<a href="https://math.stackexchange.com/questions/2607697/the-upper-and-lower-limits-of-ieee-754-standard">https://math.stackexchange.com/questions/2607697/the-upper-and-lower-limits-of-ieee-754-standard</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>
