<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Testování Go aplikací s využitím knihovny G&Omega;mega a frameworku Ginkgo</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Testování Go aplikací s využitím knihovny G&Omega;mega a frameworku Ginkgo</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Důležitému tématu testování aplikací s využitím jazyka Go se budeme zabývat i dnes, protože si popíšeme velmi zajímavou knihovnu nazvanou G&Omega;mega, kterou lze velmi snadno zkombinovat s&nbsp;frameworkem Ginkgo určeným pro tvorbu BDD testů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Testování Go aplikací s&nbsp;využitím knihovny G&Omega;mega a frameworku Ginkgo</a></p>
<p><a href="#k02">2. Knihovna Gomega</a></p>
<p><a href="#k03">3. Testovaná funkce pro výpočet faktoriálu</a></p>
<p><a href="#k04">4. Kostra jednotkových testů vytvořených s&nbsp;využitím knihovny Gomega</a></p>
<p><a href="#k05">5. Alternativní způsob zápisu jednotkových testů</a></p>
<p><a href="#k06">6. Porovnání numerických hodnot a použití klauzule <strong>SatisfyAll</strong></a></p>
<p><a href="#k07">7. Funkce pro výpočet faktoriálu vracející chybu</a></p>
<p><a href="#k08">8. Rozšíření jednotkových testů o podmínku, zda došlo či naopak nedošlo k&nbsp;chybě</a></p>
<p><a href="#k09">9. Zprávy vypsané ve chvíli, kdy je výpočet nekorektní</a></p>
<p><a href="#k10">10. Testování kolekcí</a></p>
<p><a href="#k11">11. Framework Ginkgo</a></p>
<p><a href="#k12">12. Příprava projektu pro otestování s&nbsp;využitím frameworku Ginkgo</a></p>
<p><a href="#k13">13. Vygenerování kostry sady BDD testů</a></p>
<p><a href="#k14">14. Vytvoření kostry BDD testu</a></p>
<p><a href="#k15">15. Implementace BDD testu</a></p>
<p><a href="#k16">16. Rozdělení složitějšího BDD testu do bloků</a></p>
<p><a href="#k17">17. Podrobnější výpis průběhu testů</a></p>
<p><a href="#k18">18. Chování frameworku Ginkgo při chybě</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Testování Go aplikací s&nbsp;využitím knihovny G&Omega;mega a frameworku Ginkgo</h2>

<p>Již několik částí <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">tohoto seriálu</a>
bylo věnováno problematice testování, ať již přímo psaní testů pro aplikace
vyvinuté v&nbsp;jazyku Go (<a
href="https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/">jednotkové
testy</a>, <a
href="https://www.root.cz/clanky/tvorba-bdd-testu-s-vyuzitim-jazyka-go-a-nastroje-godog/">BDD</a>),
nebo použití Go pro testování <a
href="https://www.root.cz/clanky/testovani-aplikaci-psanych-v-go-s-vyuzitim-knihoven-goblin-a-frisby/">REST
API</a>, <a
href="https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem/">testování
aplikací s&nbsp;textovým uživatelským rozhraním</a> atd. Tomuto důležitému
tématu se budeme věnovat i dnes, protože si popíšeme velmi zajímavou knihovnu
nazvanou <a href="https://onsi.github.io/gomega/">G&Omega;mega</a>, kterou lze
velmi snadno zkombinovat s&nbsp;frameworkem <a
href="https://github.com/onsi/ginkgo">Ginkgo</a> určeným pro tvorbu BDD
testů.</p>

<a href="https://www.root.cz/obrazek/398700/"><img src="https://i.iinfo.cz/images/567/ginkgo-1-prev.png" class="image-398700" alt="&#160;" width="370" height="119" /></a>
<p><i>Obrázek 1: Logo projektu G&Omega;mega</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Knihovna Gomega</h2>

<p>Knihovna nazvaná <i>Gomega</i> nabízí programátorům velké množství
takzvaných &bdquo;matcherů&ldquo;, což jsou &ndash; poněkud zjednodušeně řečeno
&ndash; funkce kontrolující, jestli byla splněna nějaká podmínka.
V&nbsp;případě, že podmínka splněna není, nahlásí se chyba, ovšem současně se
vypíšou i přesné okolnosti, za jakých došlo k&nbsp;nesplnění podmínky. Jedná se
o velmi užitečný mechanismus s&nbsp;vlastnostmi, kterých je v&nbsp;samotném
jazyku Go (bez použití dalších knihoven) poměrně těžké dosáhnout, protože
nejsou podporovány <i>aserce</i> a všechny podmínky je tak nutné zapisovat
explicitně s&nbsp;využitím konstrukce <strong>if</strong> (což je ovšem
informace, která se neobjeví ve výsledcích testů).</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti není knihovna
<i>Gomega</i> jedinou podobně koncipovanou knihovnou určenou pro Go.
V&nbsp;předchozích článcích jsme se již mohli seznámit s&nbsp;knihovnami <a
href="https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/#k12">GoConvey</a>
a <a
href="https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/#k05">Oglematchers</a>
s&nbsp;přibližně podobnou funkcionalitou.</div></p>

<p>Podívejme se nyní, jaké &bdquo;matchery&ldquo; v&nbsp;knihovně <i>Omega</i>
nalezneme. U každého matcheru je napsána oblast, které se týká i stručný popis
jeho činnosti:</p>

<table>
<tr><th>Jméno</th><th>Oblast</th><th>Stručný popis</th></tr>
<tr><td>Equal</td><td>obecné hodnoty</td><td>základní kontrola &ndash; ekvivalence</td></tr>
<tr><td>BeEquivalentTo</td><td>obecné hodnoty</td><td>test na ekvivalenci k&nbsp;zadané hodnotě</td></tr>
<tr><td>BeIdenticalTo</td><td>obecné hodnoty</td><td>test na identitu</td></tr>
<tr><td>BeAssignableToTypeOf</td><td>obecné hodnoty</td><td>test, zda je možné provést přiřazení</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>BeNil</td><td>nulové hodnoty</td><td>test na hodnotu <strong>nil</strong></td></tr>
<tr><td>BeZero</td><td>nulové hodnoty</td><td>test na nulu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>BeTrue</td><td>pravdivostní hodnoty</td><td>test na hodnotu <strong>true</strong></td></tr>
<tr><td>BeFalse</td><td>pravdivostní hodnoty</td><td>test na hodnotu <strong>false</strong></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>HaveOccurred</td><td>chyby</td><td>test zda došlo k&nbsp;chybě</td></tr>
<tr><td>Succeed</td><td>chyby</td><td>test zda nedošlo k&nbsp;chybě</td></tr>
<tr><td>MatchError</td><td>chyby</td><td>test zda došlo k&nbsp;určité chybě</td></tr>
<tr><td>Panic</td><td>chyby</td><td>test, zda se zavolala funkce <strong>panic</strong></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>BeClosed</td><td>kanály</td><td>kanál je uzavřen</td></tr>
<tr><td>Receive</td><td>kanály</td><td>kanál přijal zadaný prvek</td></tr>
<tr><td>BeSent</td><td>kanály</td><td>do kanálu byl odeslán zadaný prvek</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>BeAnExistingFile</td><td>soubory</td><td>kontrola existence souboru</td></tr>
<tr><td>BeARegularFile</td><td>soubory</td><td>kontrola existence běžného souboru (ne adresáře)</td></tr>
<tr><td>BeADirectory</td><td>soubory</td><td>kontrola existence adresáře</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>ContainSubstring</td><td>řetězce</td><td>test na existenci podřetězce</td></tr>
<tr><td>HavePrefix</td><td>řetězce</td><td>test na existenci prefixu řetězce</td></tr>
<tr><td>HaveSuffix</td><td>řetězce</td><td>test na existenci postfixu řetězce</td></tr>
<tr><td>MatchRegexp</td><td>řetězce</td><td>test, jestli řetězec odpovídá regulárnímu výrazu</td></tr>
<tr><td>MatchJSON</td><td>řetězce</td><td>dtto, ale pro řetězec obsahující reprezentaci JSONu</td></tr>
<tr><td>MatchXML</td><td>řetězce</td><td>dtto, ale pro řetězec obsahující reprezentaci XML</td></tr>
<tr><td>MatchYAML</td><td>řetězce</td><td>dtto, ale pro řetězec obsahující reprezentaci YAMLu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>HaveLen</td><td>kolekce</td><td>kolekce má zadanou velikost</td></tr>
<tr><td>HaveCap</td><td>kolekce</td><td>kolekce má zadanou kapacitu</td></tr>
<tr><td>ContainElement</td><td>kolekce</td><td>kolekce obsahuje element</td></tr>
<tr><td>BeElementOf</td><td>kolekce</td><td>element je prvkem kolekce</td></tr>
<tr><td>ConsistOf</td><td>kolekce</td><td>kolekce obsahuje</td></tr>
<tr><td>HaveKey</td><td>kolekce</td><td>mapa má dvojici se zadaným klíčem</td></tr>
<tr><td>HaveKeyWithValue</td><td>kolekce</td><td>mapa má dvojici se zadaným klíčem a hodnotou</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>BeNumerically</td><td>číselné hodnoty</td><td>test na hodnotu bez ohledu na typ</td></tr>
<tr><td>BeTemporally</td><td>číselné hodnoty</td><td>dtto, ale pro časové razítko</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>And</td><td>spojky</td><td>splněny musí být všechny podmínky</td></tr>
<tr><td>SatisfyAll</td><td>spojky</td><td>splněny musí být všechny podmínky</td></tr>
<tr><td>Or</td><td>spojky</td><td>splněna musí být alespoň jedna podmínka</td></tr>
<tr><td>SatisfyAny</td><td>spojky</td><td>splněna musí být alespoň jedna podmínka</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Not</td><td>spojky</td><td>logická negace podmínky</td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. Testovaná funkce pro výpočet faktoriálu</h2>

<p>Několik demonstračních příkladů, které si dnes ukážeme, bude z&nbsp;důvodu
stručnosti postaveno na testování klasické &bdquo;školní&ldquo; funkce určené
pro výpočet faktoriálu. Jeden z&nbsp;možných rekurzivních zápisů výpočtu
faktoriálu může vypadat následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
func <strong>Factorial</strong>(n int64) int64 {
        switch {
        case n &lt; 0:
                return 1
        case n == 0:
                return 1
        default:
                return n * Factorial(n-1)
        }
}
</pre>

<p><div class="rs-tip-major">Poznámka: první podmínka a vůbec použití datového
typu <strong>int64</strong> namísto <strong>uint64</strong> sice může vypadat
samoúčelně, ale má svůj význam, protože funkci později rozšíříme takovým
způsobem, aby pro neplatný vstup vracela chybu (i když existuje poměrně logické
rozšíření výpočtu faktoriálu i na záporná čísla s&nbsp;využitím gama
funkce).</div></p>

<p>V&nbsp;případě, že se jednotkové testy kontrolující činnost funkce
<strong>Factorial</strong> vytváří pouze s&nbsp;využitím standardní knihovny <a
href="https://godoc.org/testing">testing</a>, bude kód testů poměrně dlouhý,
protože je nutné explicitně zapsat a otestovat všechny podmínky jen pomocí
základních konstrukcí programovacího jazyka Go. Pokud nebudou testy založeny na
tabulce, může jejich zápis vypadat následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "testing"
)
&nbsp;
func <strong>TestFactorialForZero</strong>(t *testing.T) {
        result := Factorial(0)
        if result != 1 {
                t.Errorf("Expected that 0! == 1, but got %d instead", result)
        }
}
&nbsp;
func <strong>TestFactorialForOne</strong>(t *testing.T) {
        result := Factorial(1)
        if result != 1 {
                t.Errorf("Expected that 1! == 1, but got %d instead", result)
        }
}
&nbsp;
func <strong>TestFactorialForSmallNumber</strong>(t *testing.T) {
        result := Factorial(5)
        if result &lt;= 10 || result &gt;= 10000 {
                t.Errorf("Expected that 5! == is between 10..10000")
        }
}
&nbsp;
func <strong>TestFactorialForSmallNumberNegative</strong>(t *testing.T) {
        result := Factorial(20)
        if result &lt;= 10 || result &gt;= 10000 {
                t.Errorf("Expected that 20! == is between 10..10000")
        }
}
&nbsp;
func <strong>TestFactorialForTen</strong>(t *testing.T) {
        result := Factorial(10)
        expected := int64(3628800)
        if result != expected {
                t.Errorf("Expected that 10! == %d, but got %d instead", expected, result)
        }
}
&nbsp;
func <strong>TestFactorialForBigNumber</strong>(t *testing.T) {
        result := Factorial(20)
        if result &lt;= 0 {
                t.Errorf("Expected that 20! &gt; 0, but got negative number %d instead", result)
        }
}
&nbsp;
func <strong>TestFactorialForEvenBiggerNumber</strong>(t *testing.T) {
        result := Factorial(30)
        if result &lt;= 0 {
                t.Errorf("Expected that 30! &gt; 0, but got negative number %d instead", result)
        }
}
</pre>

<p>Výsledky takto naprogramovaných jednotkových testů získáme po spuštění
příkazu:</p>

<pre>
$ <strong>go test -v</strong>
</pre>

<p>Zobrazit by se měly následující zprávy informující uživatele o průběhu
celého testu:</p>

<pre>
=== RUN   TestFactorialForZero
--- PASS: TestFactorialForZero (0.00s)
=== RUN   TestFactorialForOne
--- PASS: TestFactorialForOne (0.00s)
=== RUN   TestFactorialForSmallNumber
--- PASS: TestFactorialForSmallNumber (0.00s)
=== RUN   TestFactorialForSmallNumberNegative
--- FAIL: TestFactorialForSmallNumberNegative (0.00s)
    factorial_test.go:31: Expected that 20! == is between 10..10000
=== RUN   TestFactorialForTen
--- PASS: TestFactorialForTen (0.00s)
=== RUN   TestFactorialForBigNumber
--- PASS: TestFactorialForBigNumber (0.00s)
=== RUN   TestFactorialForEvenBiggerNumber
--- FAIL: TestFactorialForEvenBiggerNumber (0.00s)
    factorial_test.go:53: Expected that 30! &gt; 0, but got negative number -8764578968847253504 instead
FAIL
exit status 1
FAIL    _/home/tester/go-root/article_45/factorial1        0.005s
</pre>

<p><div class="rs-tip-major">Poznámka: samozřejmě nám nic nebrání použít
&bdquo;table-driven&ldquo; přístup, který je v&nbsp;komunitě Go vývojářů velmi
oblíbený, zejména při tvorbě jednotkových testů pro funkce bez vedlejších
efektů. V&nbsp;našem konkrétním případě by bylo možné použít například takto
upravený &bdquo;table-driven&ldquo; test:</div></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "testing"
)
&nbsp;
type <strong>factorialEntry</strong> struct {
        n        int64
        expected int64
}
&nbsp;
func <strong>TestFactorial</strong>(t *testing.T) {
        var entries = []factorialEntry{
                {0, 1},
                {1, 1},
                {2, 2},
                {3, 6},
                {9, 362880},
                {10, 3628800},
                {20, 2432902008176640000},
                {-1, 1},
        }
        for _, entry := range entries {
                computed := Factorial(entry.n)
                if computed != entry.expected {
                        t.Errorf("%d! != %d, but %d", entry.n, computed, entry.expected)
                } else {
                        t.Logf("factorial computer correctly for input %d", entry.n)
                }
        }
}
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
=== RUN   TestFactorial
--- PASS: TestFactorial (0.00s)
    factorial_2_test.go:28: factorial computer correctly for input 0
    factorial_2_test.go:28: factorial computer correctly for input 1
    factorial_2_test.go:28: factorial computer correctly for input 2
    factorial_2_test.go:28: factorial computer correctly for input 3
    factorial_2_test.go:28: factorial computer correctly for input 9
    factorial_2_test.go:28: factorial computer correctly for input 10
    factorial_2_test.go:28: factorial computer correctly for input 20
    factorial_2_test.go:28: factorial computer correctly for input -1
PASS
ok      _/home/tester/temp/go-root/article_45/factorial1        0.004s
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Kostra jednotkových testů vytvořených s&nbsp;využitím knihovny Gomega</h2>

<p>Nyní si ukažme, jak by mohla vypadat kostra jednotkových testů
v&nbsp;případě, že kromě standardní knihovny <i>Testing</i> použijeme i
knihovnu <i>Gomega</i>. Nejdříve je nutné vytvořit strukturu představující
instanci <strong>Gomega</strong> a předat jí ukazatel na strukturu typu
<strong>testing.T</strong>:</p>

<pre>
g := <strong>NewGomegaWithT</strong>(t)
</pre>

<p>Následně již můžeme volat metody implementované touto strukturou a &ndash;
což je v&nbsp;praxi mnohem důležitější a užitečnější &ndash; tyto metody
zřetězit do podoby představující testovanou podmínku. Pokud tedy potřebujeme
otestovat, zda se faktoriál vstupní hodnoty 0 rovná jedničce, musíme
napsat:</p>

<pre>
g.<strong>Expect</strong>(Factorial(0)).<strong>To</strong>(<strong>Equal</strong>(int64(1)))
</pre>

<p><div class="rs-tip-major">Poznámka: přetypování je zde nutné, protože
v&nbsp;opačném případě by se porovnávaly jak hodnoty, tak i jejich typy. A
v&nbsp;programovacím jazyce Go platí (velmi rozumně!), že se neprovádí
automatické přetypování, a to ani za předpokladu, že <strong>int</strong> bude
aliasem typu <strong>int64</strong> (v&nbsp;závislosti na platformě).</div></p>

<p>První tři testy na vstupní hodnoty 0, 1 a 10 lze zapsat takto:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        . "github.com/onsi/gomega"
        "testing"
)
&nbsp;
func <strong>TestFactorialForZero</strong>(t *testing.T) {
        g := NewGomegaWithT(t)
        g.Expect(Factorial(0)).To(Equal(int64(1)))
}
&nbsp;
func <strong>TestFactorialForOne</strong>(t *testing.T) {
        g := NewGomegaWithT(t)
        g.Expect(Factorial(1)).To(Equal(int64(1)))
}
&nbsp;
func <strong>TestFactorialForTen</strong>(t *testing.T) {
        g := NewGomegaWithT(t)
        g.Expect(Factorial(10)).To(Equal(int64(3628800)))
}
</pre>

<p>Výsledek běhu takto zapsaných testů získáme opět příkazem:</p>

<pre>
$ <strong>go test -v</strong>
</pre>

<p>Zde konkrétně:</p>

<pre>
=== RUN   TestFactorialForZero
--- PASS: TestFactorialForZero (0.00s)
=== RUN   TestFactorialForOne
--- PASS: TestFactorialForOne (0.00s)
=== RUN   TestFactorialForTen
--- PASS: TestFactorialForTen (0.00s)
PASS
ok      factorial.go    0.005s
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Alternativní způsob zápisu jednotkových testů</h2>

<p>Alternativně je možné použít zápis, v&nbsp;němž se vyskytuje Unicode znak
&Omega; (jméno funkce) a nepoužívá se objekt získaný voláním
<strong>NewGomegaWithT</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        . "github.com/onsi/gomega"
        "testing"
)
&nbsp;
func <strong>TestFactorialForZero</strong>(t *testing.T) {
        RegisterTestingT(t)
        Ω(Factorial(0)).To(Equal(int64(1)))
}
&nbsp;
func <strong>TestFactorialForOne</strong>(t *testing.T) {
        RegisterTestingT(t)
        Ω(Factorial(1)).To(Equal(int64(1)))
}
&nbsp;
func <strong>TestFactorialForTen</strong>(t *testing.T) {
        RegisterTestingT(t)
        Ω(Factorial(10)).To(Equal(int64(3628800)))
}</pre>

<p><div class="rs-tip-major">Poznámka: připomeňme si, že ve zdrojových kódech
programovacího jazyka Go je možné použít celý rozsah znaků Unicode a pro
ukládání zdrojových souborů je vždy použito UTF-8, nezávisle na tom, jak je
nakonfigurovaný operační systém (to je velký krok kupředu oproti mnoha dalším
mainstreamovým jazykům).</div></p>

<p>Výsledek běhu takto zapsaných testů by měl být shodný s&nbsp;předchozím
příkladem:</p>

<pre>
=== RUN   TestFactorialForZero
--- PASS: TestFactorialForZero (0.00s)
=== RUN   TestFactorialForOne
--- PASS: TestFactorialForOne (0.00s)
=== RUN   TestFactorialForTen
--- PASS: TestFactorialForTen (0.00s)
PASS
ok      factorial.go    0.006s
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Porovnání numerických hodnot a použití klauzule <strong>SatisfyAll</strong></h2>

<p>Testy uvedené v&nbsp;předchozích dvou kapitolách sice byly zapsány
korektně, ale měly několik nevýhod. Především se muselo provádět explicitní
přetypování <strong>int</strong> na <strong>int64</strong> a taktéž nebylo
možné zapsat podmínky typu &bdquo;je menší&ldquo;, &bdquo;je větší&ldquo; atd.
Oba nedostatky lze vyřešit s&nbsp;využitím metody
<strong>BeNumerically</strong>, které se předá jak testovaná relace (relační
operátor zapsaný ve formě řetězce), tak i číselná hodnota. Případné konverze
jsou provedeny zcela automaticky takovým způsobem, aby se skutečně porovnávaly
hodnoty a nikoli i jejich typy:</p>

<pre>
g.Expect(Factorial(0)).To(<strong>BeNumerically("==", 1)</strong>)
g.Expect(Factorial(5)).To(<strong>BeNumerically("&lt;=", 10000)</strong>)
</pre>

<p>Navíc je možné specifikovat, že některé podmínky musí být splněny současně. K&nbsp;tomuto účelu se používá klauzule <strong>SatisfyAll</strong>, kterou lze zkrátit na <strong>And</strong>, ovšem první jméno je v&nbsp;oblasti testů příhodnější. Můžeme tedy relativně snadno napsat test kontrolující, jestli se výsledek výpočtu faktoriálu nachází v&nbsp;nastavených mezích:</p>

<pre>
g.Expect(Factorial(5)).To(<strong>SatisfyAll(BeNumerically("&gt;=", 10), BeNumerically("&lt;=", 10000))</strong>)
</pre>

<p><div class="rs-tip-major">Poznámka: pochopitelně se nemusíme omezovat pouze na dvě podmínky, které mají být splněny současně.</div></p>

<p>Podívejme se nyní na upravené a rozšířené jednotkové testy kontrolující činnost funkce pro výpočet faktoriálu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        . "github.com/onsi/gomega"
        "testing"
)
&nbsp;
func <strong>TestFactorialForZero</strong>(t *testing.T) {
        g := NewGomegaWithT(t)
        g.Expect(Factorial(0)).To(BeNumerically("==", 1))
}
&nbsp;
func <strong>TestFactorialForOne</strong>(t *testing.T) {
        g := NewGomegaWithT(t)
        g.Expect(Factorial(1)).To(BeNumerically("==", 1))
}
&nbsp;
func <strong>TestFactorialForTen</strong>(t *testing.T) {
        g := NewGomegaWithT(t)
        g.Expect(Factorial(10)).To(BeNumerically("==", 3628800))
}
&nbsp;
func <strong>TestFactorialForSmallNumber</strong>(t *testing.T) {
        g := NewGomegaWithT(t)
        g.Expect(Factorial(5)).To(SatisfyAll(BeNumerically("&gt;=", 10), BeNumerically("&lt;=", 10000)))
}
</pre>

<p>Výsledky, které získáme po spuštění těchto testů:</p>

<pre>
=== RUN   TestFactorialForZero
--- PASS: TestFactorialForZero (0.00s)
=== RUN   TestFactorialForOne
--- PASS: TestFactorialForOne (0.00s)
=== RUN   TestFactorialForTen
--- PASS: TestFactorialForTen (0.00s)
=== RUN   TestFactorialForSmallNumber
--- PASS: TestFactorialForSmallNumber (0.00s)
PASS
ok      factorial.go    0.006s
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Funkce pro výpočet faktoriálu vracející chybu</h2>

<p>Funkce pro výpočet faktoriálu, kterou jsme si ukázali <a href="#k03">ve
třetí kapitole</a> byla vytvořena ve stylu, který je očekáván u aplikací
naprogramovaných například v&nbsp;jazyku C. Chybový stav je v&nbsp;případě
potřeby signalizován speciální hodnotou. Pokud bychom například potřebovali
signalizovat, že výpočet faktoriálu záporného čísla nelze vypočítat, mohla by
se provést tato úprava:</p>

<pre>
func <strong>Factorial</strong>(n int64) int64 {
        switch {
        case n &lt; 0:
                return -1 // speciální chybová hodnota
        case n == 0:
                return 1
        default:
                return n * Factorial(n-1)
        }
}
</pre>

<p>V&nbsp;tomto případě se ovšem nejedná o idiomatický kód programovacího
jazyka Go. V&nbsp;Go je totiž dobrým zvykem, aby byla chyba signalizována
skutečným objektem reprezentujícím chybu. Pokud funkce vrací hodnotu
signalizující chybu, bývá tato hodnota vždy vrácena jako poslední. Výpočet
faktoriálu tedy můžeme přepsat následovně (stále se jedná o školní příklad
neaspirující na nejvyšší rychlost a nejnižší spotřebu operační paměti):</p>

<pre>
package <strong>main</strong>
&nbsp;
import "errors"
&nbsp;
func <strong>Factorial</strong>(n int64) (int64, <strong>error</strong>) {
        switch {
        case n &lt; 0:
                return 0, errors.New("math: factorial of negative number?!?")
        case n == 0:
                return 1, <strong>nil</strong>
        default:
                ret, err := Factorial(n - 1)
                if err != nil {
                        return 0, <strong>err</strong>
                }
                return n * ret, <strong>nil</strong>
        }
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Rozšíření jednotkových testů o podmínku, zda došlo či naopak nedošlo k&nbsp;chybě</h2>

<p>Pro zjištění, zda testovaná funkce vrátila či nevrátila chybu, slouží
klauzule <strong>HaveOccurred</strong> a <strong>Succed</strong>. Tyto klauzule
se používají pouze společně s&nbsp;případnou chybovou hodnotou
popř.&nbsp;hodnotou <strong>nil</strong>. Pokud pouze potřebujeme zjistit, že
došlo k&nbsp;očekávané chybě (vrácení struktury reprezentující chybu), můžeme
napsat:</p>

<pre>
_, err := Factorial(-1)
g.Expect(err).<strong>Should(HaveOccurred()</strong>)
</pre>

<p>Zápis opačné podmínky používá negovanou podmínku
<strong>ShouldNot</strong>:</p>

<pre>
_, err := Factorial(0)
g.Expect(err).<strong>ShouldNot(HaveOccurred()</strong>)
</pre>

<p>V&nbsp;tomto případě ovšem bývá lepší zapsat podmínku bez negace:</p>

<pre>
_, err := Factorial(0)
g.Expect(err).<strong>Should(Succeed()</strong>)
</pre>

<p>Zajímavé je, že například výše popsaná podmínka
<strong>BeNumerically</strong> je použitelná i ve chvíli, kdy porovnáváme dvě
návratové hodnoty funkce &ndash; vlastní hodnotu faktoriálu a případnou
informaci o chybě:</p>

<pre>
g.Expect(Factorial(10)).To(BeNumerically("==", 3628800))
g.Expect(Factorial(5)).To(SatisfyAll(BeNumerically("&gt;=", 10), BeNumerically("&lt;=", 10000)))
</pre>

<p>V&nbsp;tomto případě pochopitelně platí, že pokud funkce signalizuje chybu,
bude to testem detekováno, a to i tehdy, pokud by první vrácená hodnota byla
(čistě náhodou) korektní.</p>

<p>Podívejme se nyní na to, jakým způsobem lze rozšířit předchozí variantu
jednotkových testů o další podmínky:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        . "github.com/onsi/gomega"
        "testing"
)
&nbsp;
func <strong>TestFactorialForNegativeValue</strong>(t *testing.T) {
        g := NewGomegaWithT(t)
        _, err := Factorial(-1)
        g.Expect(err).Should(HaveOccurred())
}
&nbsp;
func <strong>TestFactorialForZero</strong>(t *testing.T) {
        g := NewGomegaWithT(t)
        result, err := Factorial(0)
        g.Expect(err).ShouldNot(HaveOccurred())
        g.Expect(result).To(BeNumerically("==", 1))
}
&nbsp;
func <strong>TestFactorialForOne</strong>(t *testing.T) {
        g := NewGomegaWithT(t)
        result, err := Factorial(0)
        g.Expect(err).Should(Succeed())
        g.Expect(result).To(BeNumerically("==", 1))
}
&nbsp;
func <strong>TestFactorialForTen</strong>(t *testing.T) {
        g := NewGomegaWithT(t)
        g.Expect(Factorial(10)).To(BeNumerically("==", 3628800))
}
&nbsp;
func <strong>TestFactorialForSmallNumber</strong>(t *testing.T) {
        g := NewGomegaWithT(t)
        g.Expect(Factorial(5)).To(SatisfyAll(BeNumerically("&gt;=", 10), BeNumerically("&lt;=", 10000)))
}
</pre>

<p>Očekávané výsledky testů:</p>

<pre>
=== RUN   TestFactorialForNegativeValue
--- PASS: TestFactorialForNegativeValue (0.00s)
=== RUN   TestFactorialForZero
--- PASS: TestFactorialForZero (0.00s)
=== RUN   TestFactorialForOne
--- PASS: TestFactorialForOne (0.00s)
=== RUN   TestFactorialForTen
--- PASS: TestFactorialForTen (0.00s)
=== RUN   TestFactorialForSmallNumber
--- PASS: TestFactorialForSmallNumber (0.00s)
PASS
ok      factorial.go    0.006s
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Zprávy vypsané ve chvíli, kdy je výpočet nekorektní</h2>

<p>Nyní si ukažme, jak se knihovna <i>Gomega</i> chová ve chvíli, kdy je
výpočet faktoriálu naprogramován nekorektně, tedy tak, aby vracel chybné
hodnoty. &bdquo;Rozbití&ldquo; výpočtu lze samozřejmě provést mnoha různými
způsoby, například špatně vypočtenou hodnotou pro rekurzivní výpočet:</p>

<pre>
package <strong>main</strong>
&nbsp;
import "errors"
&nbsp;
func <strong>Factorial</strong>(n int64) (int64, error) {
        switch {
        case n &lt; 0:
                return 0, errors.New("math: factorial of negative number?!?")
        case n == 0:
                return 1, nil
        default:
                ret, err := Factorial(<strong>n - 2</strong>)
                if err != nil {
                        return 0, err
                }
                return n * ret, nil
        }
}
</pre>

<p>Spuštění testů podle očekávání povede k&nbsp;detekci chyby, ovšem
zajímavější je sledovat, jaké informace se vypíšou. To je totiž velmi důležité
&ndash; setkal jsem se již s&nbsp;mnoha projekty (vytvořenými v&nbsp;jiném
programovacím jazyce), které při testování jen lakonicky vypíšou
&bdquo;assertion failed&ldquo; s&nbsp;již nedopsaným dodatkem &bdquo;hledej
Šmudlo&ldquo;. Knihovna Gomega je ve chvíli, kdy dojde k&nbsp;chybě, velmi
upovídaná, což je jen dobře (pokud naopak test projde bez chyby, nevypisuje se
žádná dodatečná informace a to je taky správné chování):</p>

<pre>
=== RUN   TestFactorialForNegativeValue
--- PASS: TestFactorialForNegativeValue (0.00s)
=== RUN   TestFactorialForZero
--- PASS: TestFactorialForZero (0.00s)
=== RUN   TestFactorialForOne
--- PASS: TestFactorialForOne (0.00s)
=== RUN   TestFactorialForTen
--- FAIL: TestFactorialForTen (0.00s)
    factorial_test.go:30: 
        Expected
            &lt;int64&gt;: 3840
        to be ==
            &lt;int&gt;: 3628800
=== RUN   TestFactorialForSmallNumber
--- FAIL: TestFactorialForSmallNumber (0.00s)
    factorial_test.go:35: 
        Unexpected non-nil/non-zero extra argument at index 1:
                &lt;*errors.errorString&gt;: &amp;errors.errorString{s:"math: factorial of negative number?!?"}
FAIL
exit status 1
FAIL    factorial.go    0.006s
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Testování kolekcí &ndash; řezů a map</h2>

<p>Podívejme se nyní ve stručnosti, jak lze testovat kolekce. Začneme řezem, u
nějž lze otestovat jeho velikost (počet prvků), kapacitu a zda obsahuje zadaný
prvek:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        . "github.com/onsi/gomega"
        "testing"
)
&nbsp;
func <strong>TestCollecions</strong>(t *testing.T) {
        g := NewGomegaWithT(t)
        c := []int{1, 2, 3, 4, 5}
        g.Expect(c).To(HaveLen(5))
        g.Expect(c).To(HaveCap(5))
        g.Expect(c).To(ContainElement(1))
        g.Expect(c).To(Not(ContainElement(42)))
}
</pre>

<p>Podobně můžeme testovat mapy (například výsledky nějaké funkce). Kromě výše
uvedených testů je možné zjistit, zda mapa obsahuje nějaký specifikovaný klíč
či nikoli:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        . "github.com/onsi/gomega"
        "testing"
)
&nbsp;
func <strong>TestCollecions</strong>(t *testing.T) {
        g := NewGomegaWithT(t)
&nbsp;
        m := make(map[string]int)
        m["one"] = 1
        m["two"] = 2
        m["three"] = 3
&nbsp;
        g.Expect(m).To(HaveLen(3))
        g.Expect(m).To(ContainElement(1))
        g.Expect(m).To(Not(ContainElement(42)))
        g.Expect(m).To(HaveKey("two"))
        g.Expect(m).To(Not(HaveKey("fourty two")))
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Framework Ginkgo</h2>

<p>Ve druhé části dnešního článku se ve stručnosti seznámíme s&nbsp;frameworkem
nazvaným <i>Ginkgo</i>, což je nástroj sloužící pro vytváření testů ve stylu
BDD (<i>Behavior Driven Development</i>), tedy testů popisujících očekávané
chování systému. Tento framework se velmi často kombinuje právě
s&nbsp;knihovnou <i>Gomega</i> popsanou v&nbsp;předchozích kapitolách.</p>

<a href="https://www.root.cz/obrazek/398701/"><img src="https://i.iinfo.cz/images/567/ginkgo-2-prev.png" class="image-398701" alt="&#160;" width="370" height="144" /></a>
<p><i>Obrázek 2: Logo frameworku Ginkgo</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Příprava projektu pro otestování s&nbsp;využitím frameworku Ginkgo</h2>

<p>Pro porovnání s&nbsp;předchozími demonstračními příklady budeme opět
testovat funkci pro výpočet faktoriálu. Tentokrát ovšem bude tato funkce
umístěna v&nbsp;balíčku nazvaném <strong>factorial</strong>:</p>

<pre>
package <strong>factorial</strong>
&nbsp;
func <strong>Factorial</strong>(n int64) int64 {
        switch {
        case n &lt; 0:
                return 1
        case n == 0:
                return 1
        default:
                return n * Factorial(n-1)
        }
}
</pre>

<p>Z&nbsp;balíčku, který se nyní skládá z&nbsp;jediného souboru, vytvoříme
modul, a to konkrétně příkazem:</p>

<pre>
$ <strong>go mod init factorial</strong>
</pre>

<p>Po spuštění předchozího příkazu by měl vzniknout soubor nazvaný
&bdquo;go.mod&ldquo; s&nbsp;následujícím obsahem:</p>

<pre>
module factorial
&nbsp;
go 1.13
</pre>

<p><div class="rs-tip-major">Poznámka: konkrétní verze Go se pochopitelně může
lišit.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Vygenerování kostry sady BDD testů</h2>

<p>Následně je nutné vytvořit kostru BDD testů. Ve skutečnosti je to velmi
snadné, protože tuto práci za nás odvede přímo framework Ginkgo. Postačuje
pouze použít příkaz:</p>

<pre>
$ <strong>ginkgo bootstrap</strong>
</pre>

<p>Po spuštění předchozího příkazu by měl vzniknout nový soubor nazvaný
&bdquo;factorial_suite_test.go&ldquo;, jehož obsah je následující:</p>

<pre>
package <strong>factorial_test</strong>
&nbsp;
import (
        "testing"

        . "github.com/onsi/ginkgo"
        . "github.com/onsi/gomega"
)
&nbsp;
func <strong>TestFactorial</strong>(t *testing.T) {
        RegisterFailHandler(Fail)
        RunSpecs(t, "Factorial Suite")
}
</pre>

<p>Po prvním spuštění testů příkazem:</p>

<pre>
$ <strong>ginkgo</strong>
</pre>

<p>By mělo dojít k&nbsp;úpravě obsahu souboru <strong>go.mod</strong>:</p>

<pre>
module factorial
&nbsp;
go 1.13
&nbsp;
require (
        github.com/onsi/ginkgo v1.10.3
        github.com/onsi/gomega v1.7.1
)
</pre>

<p>I souboru <strong>go.sum</strong> (povšimněte si mnoha závislostí):</p>

<pre>
github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
github.com/hpcloud/tail v1.0.0 h1:nfCOvKYfkgYP8hkirhJocXT2+zOD8yUNjXaWfTlyFKI=
github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=
github.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
github.com/onsi/ginkgo v1.10.3 h1:OoxbjfXVZyod1fmWYhI7SEyaD8B00ynP3T+D5GiyHOY=
github.com/onsi/ginkgo v1.10.3/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
github.com/onsi/gomega v1.7.1 h1:K0jcRCwNQM3vFGh1ppMtDh/+7ApJrjldlX8fA0jDTLQ=
github.com/onsi/gomega v1.7.1/go.mod h1:XdKZgCCFLUoM/7CFJVPcG8C1xQ1AJ0vpAezJrB7JYyY=
golang.org/x/net v0.0.0-20180906233101-161cd47e91fd h1:nTDtHvHSdCn1m6ITfMRqtOd/9+7a3s8RBNOZ3eYZzJA=
golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e h1:o3PsSEY8E4eXWkXrIP9YJALUkVZqzHJT5DOasTyn8Vs=
golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
golang.org/x/text v0.3.0 h1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=
golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/fsnotify.v1 v1.4.7 h1:xOHLXZwVvI9hhs+cLKq5+I5onOuwQLhQwiu63xxlHs4=
gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=
gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=
gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=
gopkg.in/yaml.v2 v2.2.4 h1:/eiJrUcujPVeJ3xlSWaiNi3uSVmDGBK1pDHUHAnao1I=
gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Vytvoření kostry BDD testu</h2>

<p>Následně je nutné vytvořit kostru BDD testu. K&nbsp;tomuto účelu slouží opět
nástroj <strong>ginkgo</strong>, tentokrát ovšem s&nbsp;přepínačem
<strong>generate</strong>, za nímž následuje jméno testu:</p>

<pre>
$ <strong>ginkgo generate factorial</strong>
</pre>

<p>Tento příkaz by měl vygenerovat soubor pojmenovaný
&bdquo;factorial_test.go&ldquo; s&nbsp;tímto obsahem:</p>

<pre>
package <strong>factorial_test</strong>
&nbsp;
import (
        . "github.com/onsi/ginkgo"
        . "github.com/onsi/gomega"

        . "factorial"
)
&nbsp;
var _ = <strong>Describe</strong>("Factorial", func() {
&nbsp;
})
</pre>

<p>Tento test, i když ve skutečnosti neobsahuje žádné podmínky, můžeme po
zakomentování nepoužitých importů spustit:</p>

<pre>
$ <strong>ginkgo</strong>
&nbsp;
Running Suite: Factorial Suite
==============================
Random Seed: 1575486131
Will run 0 of 0 specs
&nbsp;
&nbsp;
Ran 0 of 0 Specs in 0.000 seconds
SUCCESS! -- 0 Passed | 0 Failed | 0 Pending | 0 Skipped
PASS
&nbsp;
Ginkgo ran 1 suite in 670.848991ms
</pre>

<a href="https://www.root.cz/obrazek/398702/"><img src="https://i.iinfo.cz/images/567/ginkgo-3-prev.png" class="image-398702" alt="&#160;" width="370" height="128" /></a>
<p><i>Obrázek 3: Barevná podoba výstupu.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Implementace BDD testu</h2>

<p>Samotné kroky BDD testu se zapisují do volání funkce
<strong>Describe</strong>, a to konkrétně ve tvaru vnořených anonymních funkcí.
První anonymní funkce vytvoří kontext, v&nbsp;němž budou vybrané testy probíhat
a jednotlivé konkrétní kroky jsou pak reprezentovány anonymní funkcí uvnitř
<strong>It</strong>. Celek tak do značné míry připomíná <i>Mocha framework</i>
ze světa JavaScriptu a TypeScriptu:</p>

<pre>
package factorial_test
&nbsp;
import (
        . "github.com/onsi/ginkgo"
        . "github.com/onsi/gomega"
&nbsp;
        . "factorial"
)
&nbsp;
var _ = <strong>Describe</strong>("Factorial", func() {
        <strong>Context</strong>("For zero input", func() {
                <strong>It</strong>("should be one", func() {
                        Expect(Factorial(0)).To(Equal(int64(1)))
                })
        })
})
</pre>

<p>Tento prozatím jednoduchý test můžeme opět spustit. Tentokrát by se měla
vypsat informace o jednom úspěšně dokončeném testu:</p>

<pre>
$ <strong>ginkgo</strong>
&nbsp;
Running Suite: Factorial Suite
==============================
Random Seed: 1575486467
Will run 1 of 1 specs
&nbsp;
•
Ran 1 of 1 Specs in 0.000 seconds
SUCCESS! -- 1 Passed | 0 Failed | 0 Pending | 0 Skipped
PASS
&nbsp;
Ginkgo ran 1 suite in 710.057394ms
Test Suite Passed
</pre>

<a href="https://www.root.cz/obrazek/398703/"><img src="https://i.iinfo.cz/images/567/ginkgo-4-prev.png" class="image-398703" alt="&#160;" width="370" height="160" /></a>
<p><i>Obrázek 4: Barevná podoba výstupu.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Rozdělení složitějšího BDD testu do bloků</h2>

<p>Rozsáhlejší testovací scénáře je vhodné rozdělit do několika bloků
s&nbsp;odděleným kontextem. V&nbsp;našem konkrétním případě lze testovat
výpočet faktoriálů negativních čísel, dále pak výpočet faktoriálu nuly a
nakonec výpočet faktoriálu pro kladné vstupy:</p>

<pre>
package <strong>factorial_test</strong>
&nbsp;
import (
        . "github.com/onsi/ginkgo"
        . "github.com/onsi/gomega"

        . "factorial"
)
&nbsp;
var _ = <strong>Describe</strong>("Factorial", func() {
        <strong>Context</strong>("For negative input", func() {
                <strong>It</strong>("should be one", func() {
                        Expect(Factorial(-1)).To(Equal(int64(1)))
                        Expect(Factorial(-10)).To(Equal(int64(1)))
                })
        })
        <strong>Context</strong>("For zero input", func() {
                <strong>It</strong>("should be one", func() {
                        Expect(Factorial(0)).To(Equal(int64(1)))
                })
        })
        <strong>Context</strong>("For positive input", func() {
                <strong>It</strong>("should be n!", func() {
                        Expect(Factorial(1)).To(Equal(int64(1)))
                        Expect(Factorial(2)).To(Equal(int64(2)))
                        Expect(Factorial(9)).To(Equal(int64(362880)))
                        Expect(Factorial(10)).To(Equal(int64(3628800)))
                })
        })
})
</pre>

<p>Výsledek takto strukturovaných testů:</p>

<pre>
$ <strong>ginkgo</strong>
&nbsp;
Running Suite: Factorial Suite
==============================
Random Seed: 1575486790
Will run 3 of 3 specs
&nbsp;
•••
Ran 3 of 3 Specs in 0.000 seconds
SUCCESS! -- 3 Passed | 0 Failed | 0 Pending | 0 Skipped
PASS
&nbsp;
Ginkgo ran 1 suite in 697.181456ms
Test Suite Passed
</pre>

<a href="https://www.root.cz/obrazek/398704/"><img src="https://i.iinfo.cz/images/567/ginkgo-5-prev.png" class="image-398704" alt="&#160;" width="370" height="191" /></a>
<p><i>Obrázek 5: Barevná podoba výstupu.</i></p>


<p><a name="k17"></a></p>
<h2 id="k17">17. Podrobnější výpis průběhu testů</h2>

<p>V&nbsp;případě, že je zapotřebí vypsat podrobnější informace o probíhajících
testech, lze použít přepínač <strong>-v</strong> (<i>verbose</i>)
s&nbsp;následujícím účinkem:</p>

<a href="https://www.root.cz/obrazek/398705/"><img src="https://i.iinfo.cz/images/567/ginkgo-6-prev.png" class="image-398705" alt="&#160;" width="360" height="270" /></a>
<p><i>Obrázek 6: Podrobnější výpis průběhu testů.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Chování frameworku Ginkgo při chybě</h2>

<p>Pokud schválně poškodíme testovanou funkci tak, aby vracela nekorektní
výsledky, dojde pochopitelně k&nbsp;detekci této anomálie přímo
v&nbsp;testech:</p>

<pre>
package <strong>factorial</strong>
&nbsp;
func <strong>Factorial</strong>(n int64) int64 {
        switch {
        case n &lt; 0:
                return 1
        case n == 0:
                return 1
        default:
                return n * Factorial(n-2)
        }
}
</pre>

<p>V&nbsp;tomto případě Ginkgo společně s&nbsp;knihovnou Gomega ohlásí přesně,
k&nbsp;jakému problému došlo a na jakém řádku testu:</p>

<pre>
$ <strong>ginkgo</strong>
&nbsp;
Running Suite: Factorial Suite
==============================
Random Seed: 1575487214
Will run 3 of 3 specs
&nbsp;
••
------------------------------
• Failure [0.000 seconds]
Factorial
/home/ptisnovs/src/go-root/article_45/iteration7/factorial_test.go:10
  For positive input
  /home/ptisnovs/src/go-root/article_45/iteration7/factorial_test.go:22
    should be n! [It]
    /home/ptisnovs/src/go-root/article_45/iteration7/factorial_test.go:23
&nbsp;
    Expected
        &lt;int64&gt;: 945
    to equal
        &lt;int64&gt;: 362880
&nbsp;
    /home/ptisnovs/src/go-root/article_45/iteration7/factorial_test.go:26
------------------------------
&nbsp;
&nbsp;
Summarizing 1 Failure:
&nbsp;
[Fail] Factorial For positive input [It] should be n! 
/home/ptisnovs/src/go-root/article_45/iteration7/factorial_test.go:26
&nbsp;
Ran 3 of 3 Specs in 0.001 seconds
FAIL! -- 2 Passed | 1 Failed | 0 Pending | 0 Skipped
--- FAIL: TestFactorial (0.00s)
FAIL
&nbsp;
Ginkgo ran 1 suite in 697.239929ms
Test Suite Failed
</pre>

<a href="https://www.root.cz/obrazek/398706/"><img src="https://i.iinfo.cz/images/567/ginkgo-7-prev.png" class="image-398706" alt="&#160;" width="260" height="270" /></a>
<p><i>Obrázek 7: Podrobnější výpis průběhu testů.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně pět až šest megabajtů), můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>iteration1/</td><td>kostra projektu, který má být testován</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_45/iteration1/factorial.go">https://github.com/tisnik/go-root/blob/master/article_45/iteration1/</a></td></tr>
<tr><td> 2</td><td>iteration2</td><td>projekt s&nbsp;inicializovaným systémem modulů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_45/iteration2/factorial.go">https://github.com/tisnik/go-root/blob/master/article_45/iteration2/</a></td></tr>
<tr><td> 3</td><td>iteration3</td><td>vygenerovaná kostra sady testů projektem <strong>Ginkgo</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_45/iteration3/factorial.go">https://github.com/tisnik/go-root/blob/master/article_45/iteration3/</a></td></tr>
<tr><td> 4</td><td>iteration4</td><td>vytvořená kostra BDD testu projektem <strong>Ginkgo</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_45/iteration4/">https://github.com/tisnik/go-root/blob/master/article_45/iteration4/</a></td></tr>
<tr><td> 5</td><td>iteration5</td><td>první skutečný BDD test</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_45/iteration5/">https://github.com/tisnik/go-root/blob/master/article_45/iteration5/</a></td></tr>
<tr><td> 6</td><td>iteration6</td><td>sada tří BDD testů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_45/iteration6/">https://github.com/tisnik/go-root/blob/master/article_45/iteration6/</a></td></tr>
<tr><td> 7</td><td>iteration7</td><td>testy, které zhavarují kvůli špatně napsané funkci</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_45/iteration7/">https://github.com/tisnik/go-root/blob/master/article_45/iteration7/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>factorial1</td><td>funkce pro výpočet faktoriálu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_45/factorial1">https://github.com/tisnik/go-root/blob/master/article_45/factorial1</a></td></tr>
<tr><td> 9</td><td>factorial2</td><td>základní testy postavené nad <strong>Gomega</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_45/factorial2">https://github.com/tisnik/go-root/blob/master/article_45/factorial2</a></td></tr>
<tr><td>10</td><td>factorial2_omega</td><td>alternativní způsob zápisu testů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_45/factorial2_omega">https://github.com/tisnik/go-root/blob/master/article_45/factorial2_omega</a></td></tr>
<tr><td>11</td><td>factorial3</td><td>porovnání numerických hodnot a použití klauzule <strong>SatisfyAll</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_45/factorial3">https://github.com/tisnik/go-root/blob/master/article_45/factorial3</a></td></tr>
<tr><td>12</td><td>factorial4</td><td>rozšíření jednotkových testů o podmínku, zda došlo či naopak nedošlo k&nbsp;chybě</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_45/factorial4">https://github.com/tisnik/go-root/blob/master/article_45/factorial4</a></td></tr>
<tr><td>13</td><td>factorial5</td><td>zprávy vypsané ve chvíli, kdy je výpočet nekorektní</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_45/factorial5">https://github.com/tisnik/go-root/blob/master/article_45/factorial5</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>14</td><td>collections</td><td>testování vlastností řezu (slice)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_45/collections">https://github.com/tisnik/go-root/blob/master/article_45/collections</a></td></tr>
<tr><td>15</td><td>maps</td><td>testování vlastností mapy</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_45/maps">https://github.com/tisnik/go-root/blob/master/article_45/maps</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Ginkgo<br />
<a href="http://onsi.github.io/ginkgo/">http://onsi.github.io/ginkgo/</a>
</li>

<li>Gomega<br />
<a href="https://onsi.github.io/gomega/">https://onsi.github.io/gomega/</a>
</li>

<li>Ginkgo's Preferred Matcher Library na GitHubu<br />
<a href="https://github.com/onsi/gomega/">https://github.com/onsi/gomega/</a>
</li>

<li>Provided Matchers<br />
<a href="http://onsi.github.io/gomega/#provided-matchers">http://onsi.github.io/gomega/#provided-matchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku goexpect<br />
<a href="https://godoc.org/github.com/google/goexpect">https://godoc.org/github.com/google/goexpect</a>
</li>

<li>Balíček goexpect<br />
<a href="https://github.com/google/goexpect">https://github.com/google/goexpect</a>
</li>

<li>Balíček go-expect<br />
<a href="https://github.com/Netflix/go-expect">https://github.com/Netflix/go-expect</a>
</li>

<li>Balíček gexpect<br />
<a href="https://github.com/ThomasRooney/gexpect">https://github.com/ThomasRooney/gexpect</a>
</li>

<li>Expect (originál naprogramovaný v&nbsp;TCL)<br />
<a href="https://core.tcl-lang.org/expect/index">https://core.tcl-lang.org/expect/index</a>
</li>

<li>Expect (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Expect">https://en.wikipedia.org/wiki/Expect</a>
</li>

<li>Pexpect<br />
<a href="https://pexpect.readthedocs.io/en/stable/">https://pexpect.readthedocs.io/en/stable/</a>
</li>

<li>Golang SSH Client: Multiple Commands, Crypto &amp; Goexpect Examples<br />
<a href="http://networkbit.ch/golang-ssh-client/">http://networkbit.ch/golang-ssh-client/</a>
</li>

<li>goblin na GitHubu<br />
<a href="https://github.com/franela/goblin">https://github.com/franela/goblin</a>
</li>

<li>Mocha framework<br />
<a href="https://mochajs.org/">https://mochajs.org/</a>
</li>

<li>frisby na GitHubu<br />
<a href="https://github.com/verdverm/frisby">https://github.com/verdverm/frisby</a>
</li>

<li>package frisby<br />
<a href="https://godoc.org/github.com/verdverm/frisby">https://godoc.org/github.com/verdverm/frisby</a>
</li>

<li>Frisby alternatives and similar packages (generováno)<br />
<a href="https://go.libhunt.com/frisby-alternatives">https://go.libhunt.com/frisby-alternatives</a>
</li>

<li>Cucumber for golang<br />
<a href="https://github.com/DATA-DOG/godog">https://github.com/DATA-DOG/godog</a>
</li>

<li>How to Use Godog for Behavior-driven Development in Go<br />
<a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go</a>
</li>

<li>Comparative Analysis Of GoLang Testing Frameworks<br />
<a href="https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks">https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks</a>
</li>

<li>A Quick Guide to Testing in Golang<br />
<a href="https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/">https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/</a>
</li>

<li>Tom's Obvious, Minimal Language.<br />
<a href="https://github.com/toml-lang/toml">https://github.com/toml-lang/toml</a>
</li>

<li>xml.org<br />
<a href="http://www.xml.org/">http://www.xml.org/</a>
</li>

<li>Soubory .properties<br />
<a href="https://en.wikipedia.org/wiki/.properties">https://en.wikipedia.org/wiki/.properties</a>
</li>

<li>Soubory INI<br />
<a href="https://en.wikipedia.org/wiki/INI_file">https://en.wikipedia.org/wiki/INI_file</a>
</li>

<li>JSON to YAML<br />
<a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a>
</li>

<li>Data Format Converter<br />
<a href="https://toolkit.site/format.html">https://toolkit.site/format.html</a>
</li>

<li>Viper na GitHubu<br />
<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>
</li>

<li>GoDotEnv na GitHubu<br />
<a href="https://github.com/joho/godotenv">https://github.com/joho/godotenv</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

