<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
package main

import (
        "fmt"
        "net/http"
        "github.com/prometheus/client_golang/prometheus/promhttp"
        "os"
)

func main() {
        fmt.Println("Initializing HTTP server")
        http.Handle("/metrics", promhttp.Handler())
        err := http.ListenAndServe(":8080", nil)
        if err != nil {
                fmt.Println(err)
                os.Exit(2)
        }
}
</pre>


<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
package main

import (
        "fmt"
        "github.com/prometheus/client_golang/prometheus"
        "github.com/prometheus/client_golang/prometheus/promhttp"
        "net/http"
        "os"
        "time"
)

var counter = prometheus.NewCounter(prometheus.CounterOpts{
        Name: "number_of_ticks",
        Help: "The total number of ticks since the app is started",
})

func tick() {
        for {
                counter.Inc()
                time.Sleep(time.Second)
        }
}

func recordMetrics() {
        fmt.Println("Starting recording metrics")
        go tick()
}

func main() {
        recordMetrics()
        fmt.Println("Initializing HTTP server")
        http.Handle("/metrics", promhttp.Handler())
        err := http.ListenAndServe(":8080", nil)
        if err != nil {
                fmt.Println(err)
                os.Exit(2)
        }
}
</pre>


<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
package main

import (
        "fmt"
        "github.com/prometheus/client_golang/prometheus"
        "github.com/prometheus/client_golang/prometheus/promhttp"
        "net/http"
        "os"
        "time"
)

var counter = prometheus.NewCounter(prometheus.CounterOpts{
        Name: "number_of_ticks",
        Help: "The total number of ticks since the app is started",
})

func tick() {
        for {
                counter.Inc()
                time.Sleep(time.Second)
        }
}

func recordMetrics() {
        fmt.Println("Starting recording metrics")
        go tick()
}

func init() {
        prometheus.MustRegister(counter)
}

func main() {
        recordMetrics()
        fmt.Println("Initializing HTTP server")
        http.Handle("/metrics", promhttp.Handler())
        err := http.ListenAndServe(":8080", nil)
        if err != nil {
                fmt.Println(err)
                os.Exit(2)
        }
}
</pre>


<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
package main

import (
        "fmt"
        "github.com/prometheus/client_golang/prometheus"
        "github.com/prometheus/client_golang/prometheus/promauto"
        "github.com/prometheus/client_golang/prometheus/promhttp"
        "net/http"
        "os"
        "time"
)

var counter = promauto.NewCounter(prometheus.CounterOpts{
        Name: "number_of_ticks",
        Help: "The total number of ticks since the app is started",
})

func tick() {
        for {
                counter.Inc()
                time.Sleep(time.Second)
        }
}

func recordMetrics() {
        fmt.Println("Starting recording metrics")
        go tick()
}

func main() {
        recordMetrics()
        fmt.Println("Initializing HTTP server")
        http.Handle("/metrics", promhttp.Handler())
        err := http.ListenAndServe(":8080", nil)
        if err != nil {
                fmt.Println(err)
                os.Exit(2)
        }
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
package main

import (
        "fmt"
        "github.com/prometheus/client_golang/prometheus"
        "github.com/prometheus/client_golang/prometheus/promauto"
        "github.com/prometheus/client_golang/prometheus/promhttp"
        "net/http"
        "os"
        "runtime"
        "time"
)

var goroutines = promauto.NewGauge(prometheus.GaugeOpts{
        Name: "number_of_goroutines",
        Help: "Number of goroutines in the process",
})

func tick() {
        for {
                goroutines.Set(float64(runtime.NumGoroutine()))
                time.Sleep(time.Second)
        }
}

func recordMetrics() {
        fmt.Println("Starting recording metrics")
        go tick()
}

func main() {
        recordMetrics()
        fmt.Println("Initializing HTTP server")
        http.Handle("/metrics", promhttp.Handler())
        err := http.ListenAndServe(":8080", nil)
        if err != nil {
                fmt.Println(err)
                os.Exit(2)
        }
}
</pre>


<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
package main

import (
        "fmt"
        "github.com/prometheus/client_golang/prometheus"
        "github.com/prometheus/client_golang/prometheus/promauto"
        "github.com/prometheus/client_golang/prometheus/promhttp"
        "math/rand"
        "net/http"
        "os"
        "time"
)

var durations = promauto.NewSummary(prometheus.SummaryOpts{
        Name:       "request_durations",
        Help:       "Durations of requests.",
        Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
})

func tick() {
        for {
                v := rand.Float64()
                durations.Observe(v)
                time.Sleep(time.Second)
        }
}

func recordMetrics() {
        fmt.Println("Starting recording metrics")
        go tick()
}

func main() {
        recordMetrics()
        fmt.Println("Initializing HTTP server")
        http.Handle("/metrics", promhttp.Handler())
        err := http.ListenAndServe(":8080", nil)
        if err != nil {
                fmt.Println(err)
                os.Exit(2)
        }
}
</pre>


<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
package main

import (
        "fmt"
        "github.com/prometheus/client_golang/prometheus"
        "github.com/prometheus/client_golang/prometheus/promauto"
        "github.com/prometheus/client_golang/prometheus/promhttp"
        "math/rand"
        "net/http"
        "os"
        "time"
)

var durations = promauto.NewHistogram(prometheus.HistogramOpts{
        Name:    "request_durations",
        Help:    "Durations of requests.",
        Buckets: prometheus.LinearBuckets(0, 0.1, 10),
})

func tick() {
        for {
                v := rand.Float64()
                fmt.Println(v)
                durations.Observe(v)
                time.Sleep(time.Second)
        }
}

func recordMetrics() {
        fmt.Println("Starting recording metrics")
        go tick()
}

func main() {
        recordMetrics()
        fmt.Println("Initializing HTTP server")
        http.Handle("/metrics", promhttp.Handler())
        err := http.ListenAndServe(":8080", nil)
        if err != nil {
                fmt.Println(err)
                os.Exit(2)
        }
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
package main

import (
        "fmt"
        "github.com/prometheus/client_golang/prometheus"
        "github.com/prometheus/client_golang/prometheus/promauto"
        "github.com/prometheus/client_golang/prometheus/promhttp"
        "math/rand"
        "net/http"
        "os"
        "time"
)

var durations = promauto.NewHistogram(prometheus.HistogramOpts{
        Name:    "request_durations",
        Help:    "Durations of requests.",
        Buckets: prometheus.ExponentialBuckets(0.01, 2, 10),
})

func tick() {
        for {
                v := rand.Float64()
                fmt.Println(v)
                durations.Observe(v)
                time.Sleep(time.Second)
        }
}

func recordMetrics() {
        fmt.Println("Starting recording metrics")
        go tick()
}

func main() {
        recordMetrics()
        fmt.Println("Initializing HTTP server")
        http.Handle("/metrics", promhttp.Handler())
        err := http.ListenAndServe(":8080", nil)
        if err != nil {
                fmt.Println(err)
                os.Exit(2)
        }
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
package main

import (
        "fmt"
        "github.com/prometheus/client_golang/prometheus"
        "github.com/prometheus/client_golang/prometheus/promauto"
        "github.com/prometheus/client_golang/prometheus/promhttp"
        "io"
        "net/http"
        "os"
)

var pageRequests = promauto.NewCounterVec(prometheus.CounterOpts{
        Name: "page_requests",
        Help: "The total number page/URL requests",
},
        []string{"url"})

func countEndpoint(request *http.Request) {
        url := request.URL.String()
        fmt.Printf("Request URL: %s\n", url)
        pageRequests.With(prometheus.Labels{"url": url}).Inc()
}

func mainEndpoint(writer http.ResponseWriter, request *http.Request) {
        countEndpoint(request)
        io.WriteString(writer, "Hello world!\n")
}

func fooEndpoint(writer http.ResponseWriter, request *http.Request) {
        countEndpoint(request)
        io.WriteString(writer, "FOO!\n")
}

func barEndpoint(writer http.ResponseWriter, request *http.Request) {
        countEndpoint(request)
        io.WriteString(writer, "BAR!\n")
}

func main() {
        fmt.Println("Initializing HTTP server")

        http.HandleFunc("/", mainEndpoint)
        http.HandleFunc("/foo", fooEndpoint)
        http.HandleFunc("/bar", barEndpoint)
        http.Handle("/metrics", promhttp.Handler())

        err := http.ListenAndServe(":8080", nil)
        if err != nil {
                fmt.Println(err)
                os.Exit(2)
        }
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
package main

import (
	"fmt"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"io"
	"net/http"
	"os"
	"time"
)

var pageRequests = promauto.NewCounterVec(prometheus.CounterOpts{
	Name: "page_requests",
	Help: "The total number page/URL requests",
}, []string{"url"})

var histogram = promauto.NewHistogramVec(prometheus.HistogramOpts{
	Name:    "response_time",
	Help:    "Response time",
	Buckets: prometheus.LinearBuckets(0, 5, 20),
}, []string{"url"})

func countEndpoint(request *http.Request, start time.Time) {
	url := request.URL.String()
	fmt.Printf("Request URL: %s\n", url)
	duration := time.Since(start)
	fmt.Printf("Time to serve the page: %s\n", duration)

	// uprava citacu stranek
	pageRequests.With(prometheus.Labels{"url": url}).Inc()

	// uprava histogramu
	histogram.With(prometheus.Labels{"url": url}).Observe(float64(duration.Microseconds()))
}

func mainEndpoint(writer http.ResponseWriter, request *http.Request) {
	start := time.Now()
	io.WriteString(writer, "Hello world!\n")
	countEndpoint(request, start)
}

func fooEndpoint(writer http.ResponseWriter, request *http.Request) {
	start := time.Now()
	countEndpoint(request, start)
	io.WriteString(writer, "FOO!\n")
}

func barEndpoint(writer http.ResponseWriter, request *http.Request) {
	start := time.Now()
	io.WriteString(writer, "BAR!\n")
	countEndpoint(request, start)
}

func main() {
	fmt.Println("Initializing HTTP server")

	http.HandleFunc("/", mainEndpoint)
	http.HandleFunc("/foo", fooEndpoint)
	http.HandleFunc("/bar", barEndpoint)
	http.Handle("/metrics", promhttp.Handler())

	err := http.ListenAndServe(":8080", nil)
	if err != nil {
		fmt.Println(err)
		os.Exit(2)
	}
}
</pre>


<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně čtyři megabajty), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_basic_metrics.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_37/01_basic_metrics.go">https://github.com/tisnik/go-root/blob/master/article_37/01_basic_metrics.go</a></td></tr>
<tr><td> 2</td><td>02_not_registered_counter.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_37/02_not_registered_counter.go">https://github.com/tisnik/go-root/blob/master/article_37/02_not_registered_counter.go</a></td></tr>
<tr><td> 3</td><td>03_registered_counter.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_37/03_registered_counter.go">https://github.com/tisnik/go-root/blob/master/article_37/03_registered_counter.go</a></td></tr>
<tr><td> 4</td><td>04_automatic_registration.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_37/04_automatic_registration.go">https://github.com/tisnik/go-root/blob/master/article_37/04_automatic_registration.go</a></td></tr>
<tr><td> 5</td><td>05_gauge.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_37/05_gauge.go">https://github.com/tisnik/go-root/blob/master/article_37/05_gauge.go</a></td></tr>
<tr><td> 6</td><td>06_summary.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_37/06_summary.go">https://github.com/tisnik/go-root/blob/master/article_37/06_summary.go</a></td></tr>
<tr><td> 7</td><td>07_histogram.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_37/07_histogram.go">https://github.com/tisnik/go-root/blob/master/article_37/07_histogram.go</a></td></tr>
<tr><td> 8</td><td>08_histogram_exp_buckets.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_37/08_histogram_exp_buckets.go">https://github.com/tisnik/go-root/blob/master/article_37/08_histogram_exp_buckets.go</a></td></tr>
<tr><td> 9</td><td>09_counter_vec.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_37/09_counter_vec.go">https://github.com/tisnik/go-root/blob/master/article_37/09_counter_vec.go</a></td></tr>
<tr><td>10</td><td>10_histogram_vec.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_37/10_histogram_vec.go">https://github.com/tisnik/go-root/blob/master/article_37/10_histogram_vec.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

