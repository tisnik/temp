<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Projekt MinIO - jedna z nejužitečnějších aplikací naprogramovaných v Go</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Projekt MinIO - jedna z nejužitečnějších aplikací naprogramovaných v Go</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku se ve stručnosti seznámíme s projektem nazvaným MinIO. Jedná se o sadu několika služeb a nástrojů, které uživatelům poskytují distribuované datové úložiště určené pro ukládání obecných (nestrukturovaných) dat. K&nbsp;těmto datům lze přistupovat přes webové rozhraní, CLI klienta a samozřejmě i programově.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Projekt MinIO &ndash; jedna z&nbsp;nejužitečnějších aplikací naprogramovaných v&nbsp;Go</a></p>
<p><a href="#k02">2. MinIO a AWS S3</a></p>
<p><a href="#k03">3. Instalace služby MinIO i ovládací konzole <strong>mc</strong></a></p>
<p><a href="#k04">4. Spuštění služby MinIO na lokálním počítači</a></p>
<p><a href="#k05">5. Ovládání Minia z&nbsp;webového prohlížeče</a></p>
<p><a href="#k06">6. Ovládání Minia z&nbsp;příkazového řádku přes konzoli</a></p>
<p><a href="#k07">7. Instalace knihovny s&nbsp;rozhraním pro Minio (MinIO Client SDK)</a></p>
<p><a href="#k08">8. Kostra aplikace, která provede inicializaci klienta služby Minio</a></p>
<p><a href="#k09">9. Úprava příkladu &ndash; zadání parametrů připojení z&nbsp;příkazového řádku, výpis bucketů</a></p>
<p><a href="#k10">10. Typické chyby, které mohou nastat</a></p>
<p><a href="#k11">11. Výpis všech objektů ve zvoleném bucketu</a></p>
<p><a href="#k12">12. Podrobnější informace o objektech ve zvoleném bucketu</a></p>
<p><a href="#k13">13. Uložení objektu z&nbsp;bucketu do lokálního souboru</a></p>
<p><a href="#k14">14. Přečtení obsahu objektu s&nbsp;textem</a></p>
<p><a href="#k15">15. Alternativní způsob přístupu k&nbsp;obsahu objektu</a></p>
<p><a href="#k16">16. Poslání dat do Minia s&nbsp;jejich uložením do objektu</a></p>
<p><a href="#k17">17. Kopie objektu v&nbsp;rámci Minia bez jejich přesunu na lokální počítač</a></p>
<p><a href="#k18">18. Obsah následující části seriálu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Projekt MinIO &ndash; jedna z&nbsp;nejužitečnějších aplikací naprogramovaných v&nbsp;Go</h2>

<p>V&nbsp;dnešním článku se ve stručnosti seznámíme s&nbsp;projektem nazvaným
<i>MinIO</i>. Jedná se o sadu několika služeb a nástrojů, které uživatelům
poskytují distribuované datové úložiště určené pro ukládání obecných
(nestrukturovaných) dat. Typicky se jedná o soubory používané v&nbsp;oblasti AI
(<i>Artifical Intelligence</i>) a ML (<i>Machine Learning</i>), ovšem kromě
těchto populárních (a vlastně do značné míry i módních) oblastí IT je
pochopitelně možné službu MinIO použít i pro ukládání logů, souborů,
k&nbsp;nimž je zapotřebí rychle přistupovat z&nbsp;mnoha různých, mnohdy
vzájemně vzdálených oblastí (zde využijeme možnost distribuovaného systému),
jako centrální úložiště dokumentů, obrázků, videí, pochopitelně i obrazů
souborových systémů pro Docker apod. MinIO dosahuje velmi slušné rychlosti
přístupu k&nbsp;datům (při vhodně nadimenzované síti, která je většinou
limitujícím faktorem) a mj.&nbsp;i díky velmi dobré stabilitě ukazuje přednosti
<a href="https://www.root.cz/serialy/programovaci-jazyk-go/">programovacího
jazyka Go</a>, v&nbsp;němž je celý systém naprogramován.</p>

<img src="https://i.iinfo.cz/images/569/minio-1.png" class="image-399711" alt="&#160;" width="122" height="117" />
<p><i>Obrázek 1: Logo používané projektem MinIO.</i></p>

<p>Dnes se s&nbsp;projektem MinIO seznámíme především z&nbsp;pohledu vývojáře.
Nebudeme se tedy do všech podrobností zabývat tím, jak MinIO nasadit do
rozsáhlého systému s&nbsp;geograficky vzdálenými serverovnami, jak nastavit
distribuci dat atd. Zajímat nás budou především způsoby ukládání a načítání
dat, a to jak s&nbsp;využitím konzole ovládané z&nbsp;příkazového řádku, tak i
přes webové rozhraní. Ovšem prakticky vždy je nutné k&nbsp;datům přistupovat i
programově, což je obsahem <a href="#k07">druhé části dnešního článku</a>, kde
si ukážeme několik příkladů používajících poměrně snadno ovladatelnou knihovnu
nazvanou <i>MinIO Client SDK</i>.</p>

<a href="https://www.root.cz/obrazek/399712/"><img src="https://i.iinfo.cz/images/569/minio-2-prev.png" class="image-399712" alt="&#160;" width="370" height="205" /></a>
<p><i>Obrázek 2: Porovnání používání projektu MinIO a dalších podobných
technologií. Tato statistika je ovšem založena na počtu stažení, nikoli na
celkovém počtu instalací.</i></p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;dalším textu budu mnohdy namísto
MinIO psát pouze Minio (a to i v&nbsp;jiných pádech), což by &ndash; doufejme
&ndash; mělo vést k&nbsp;méně kostrbatým větám.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. MinIO a AWS S3</h2>

<p>Jedním z&nbsp;nejdůležitějších a v&nbsp;důsledku i nejpraktičtějších
vlastností projektu MinIO je fakt, že se pro přístup k&nbsp;datům používá
stejná technologie, jaká je implementována i v&nbsp;populární službě <i>Amazon
S3</i> či možná přesněji <i>AWS S3</i>. To mj.&nbsp;znamená, že dodávaný
<i>MinIO Client SDK</i> popsaný v&nbsp;navazujících kapitolách může sloužit jak
pro přístup k&nbsp;datům uloženým v&nbsp;Miniu, tak i k&nbsp;datům uloženým ve
cloudu na S3. Díky tomu lze například snadněji nastavit konfiguraci pro vývoj,
konfiguraci CI, zajistit si možnost využití veřejného cloudu (S3) nebo naopak
privátního cloudu (založeného na Miniu) atd. Navíc je <i>MinIO Client SDK</i>
určen jen pro přístup k&nbsp;datům a nikoli pro ovládání dalších služeb, takže
je jeho zahrnutí do vyvíjené aplikace méně náročné na systémové prostředky.
Musíme si totiž uvědomit, že přístup k&nbsp;datům je mnohdy zapotřebí i
z&nbsp;relativně málo výkonných zařízení IoT atd. (mj.&nbsp;i z&nbsp;tohoto
důvodu se MinIO co do snadnosti integrace porovnává s&nbsp;Redisem, i když
oblasti nasazení těchto dvou technologií jsou mnohdy značně odlišné).</p>

<p><div class="rs-tip-major">Poznámka: zkratka S3 vznikla ze sousloví
&bdquo;Simple Storage Service&ldquo; a skutečně se jedná o implementaci služby,
která je snadno použitelná, a to prakticky ve všech mainstreamových
programovacích jazycích.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace služby MinIO i ovládací konzole <strong>mc</strong></h2>

<p>Instalace služby (přesněji řečeno serverové části) projektu <i>MinIO</i> je
snadná a přímočará. Jelikož se jedná o aplikaci naprogramovanou v&nbsp;jazyce
Go, je služba dodávána ve formě jediného (i když relativně objemného)
spustitelného souboru. K&nbsp;dispozici je ovšem i obraz pro Docker, překlad
lze provést ze zdrojových souborů atd. Dnes se zaměříme na první způsob, tedy
na stažení již připravených souborů projektu <i>MinIO</i>. Musíme si pouze
vybrat soubor pro právě používaný operační systém a procesorovou architekturu.
Pro testování budu používat Linux a architekturu x86-64. Službu <i>MinIO</i>,
přesněji řečeno spustitelný binární soubor, který po svém spuštění službu
nabídne, získáme jednoduše jediným příkazem:</p>

<pre>
$ <strong>wget https://dl.min.io/server/minio/release/linux-amd64/minio</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: celková velikost tohoto souboru
přesahuje 40 megabajtů a stahování může být relativně pomalé. Může se stát, že
budete potřebovat i několik minut.</div></p>

<p>Následně je nutné nastavit příznak &bdquo;x&ldquo; pro stažený soubor, aby
bylo možné službu spustit přímo z&nbsp;příkazového řádku:</p>

<pre>
$ chmod +x minio
</pre>

<p>Dále pro jistotu otestujeme, zda je stažený soubor skutečně spustitelný:</p>

<pre>
$ ./minio version
Version: 2019-10-12T01:39:57Z
Release-Tag: RELEASE.2019-10-12T01-39-57Z
Commit-ID: bd106408462ecef70debf51f1e6179de950c5812
</pre>

<p>Podobným způsobem lokálně nainstalujeme i konzoli projektu <i>MinIO</i>. Ta
se jmenuje <strong>mc</strong>. Nejdříve stáhneme příslušný spustitelný soubor
pro zvolený operační systém a architekturu mikroprocesoru:</p>

<pre>
$ <strong>wget https://dl.min.io/client/mc/release/linux-amd64/mc</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: opět se připravte na spíše pomalejší
stahování.</div></p>

<p>Následně, podobně jako v&nbsp;předchozích krocích, nastavíme příznak
&bdquo;x&ldquo;, aby byla konzole spustitelná:</p>

<pre>
$ chmod +x mc
</pre>

<p>A ověříme si, že tomu tak skutečně je:</p>

<pre>
$ <strong>./mc version</strong>
&nbsp;
Version: 2019-10-09T22:54:57Z
Release-tag: RELEASE.2019-10-09T22-54-57Z
Commit-id: f93fe1330a3647b1afaff0ed8c188d2897bf391e
</pre>

<p><div class="rs-tip-major">Poznámka: jméno konzole <strong>mc</strong> může
kolidovat se známým souborovým manažerem <i>Midnight Commander</i>. To nám však
prozatím nebude příliš vadit, protože jsme provedli pouze lokální instalaci a
budeme tedy rozlišovat mezi těmito příkazy:</div></p>

<pre>
$ <strong>mc</strong>
$ <strong>./mc</strong>
</pre>

<p><div class="rs-tip-major">Poznámka 2: ovšem pochopitelně nám nic nebrání si
spustitelný soubor s&nbsp;konzolí služby MinIO přejmenovat.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Spuštění služby MinIO na lokálním počítači</h2>

<p>Pokud již máme připravený spustitelný soubor nazvaný <strong>minio</strong>,
je inicializace a následné spuštění služby MinIO na lokálním počítači otázkou
jediného příkazu. Musíme pouze specifikovat, že se má spustit server a na jakém
disku a adresáři budou umístěny soubory spravované službou MinIO:</p>

<pre>
$ <strong>./minio server /tmp/minio</strong>
&nbsp;
Endpoint:  http://10.0.0.29:9000  http://127.0.0.1:9000        
AccessKey: WDGGENVCJDQVFM3TBM88 
SecretKey: 8YxAW5qxYKBzo7qLGuqxuVDwK5NekY2k7v9ZIZ9C 
&nbsp;
Browser Access:
   http://10.0.0.29:9000  http://127.0.0.1:9000        
&nbsp;
Command-line Access: https://docs.min.io/docs/minio-client-quickstart-guide
   $ mc config host add myminio http://10.0.0.29:9000 WDGGENVCJDQVFM3TBM88 8YxAW5qxYKBzo7qLGuqxuVDwK5NekY2k7v9ZIZ9C
&nbsp;
Object API (Amazon S3 compatible):
   Go:         https://docs.min.io/docs/golang-client-quickstart-guide
   Java:       https://docs.min.io/docs/java-client-quickstart-guide
   Python:     https://docs.min.io/docs/python-client-quickstart-guide
   JavaScript: https://docs.min.io/docs/javascript-client-quickstart-guide
   .NET:       https://docs.min.io/docs/dotnet-client-quickstart-guide
</pre>

<p>Povšimněte si, že se po spuštění zobrazily všechny informace nutné pro
spuštění webového rozhraní, pro použití konzole ovládané z&nbsp;příkazového
řádku i pro instalaci SDK pro podporované programovací jazyky. Dále jsme
získali i dvojici klíčů, které použijeme v&nbsp;následujících kapitolách, a to
jak při přístupu přes webovou konzoli, tak i v&nbsp;demonstračních příkladech
založených na SDK Minia.</p>

<p><div class="rs-tip-major">Poznámka: pokud používáte Docker (a obraz se
serverem MinIO), ujistěte se, že je správně nastavené mapování portů, aby se
bylo možné k&nbsp;běžící instanci služby zvenku připojit.</div></p>

<p>Jestliže se spuštění služby Minio nepovedlo, je vhodné zkontrolovat, zda
adresář předaný při spuštění neobsahuje podadresáře mapované (přesněji řečeno
připojené) z&nbsp;jiného disku či souborového systému. Celý adresář by měl
(z&nbsp;pohledu Minia) ležet v&nbsp;jediném diskovém oddílu popř.&nbsp;ve
svazku spravovaném vlastním operačním systémem.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Ovládání Minia z&nbsp;webového prohlížeče</h2>

<p>Minio je možné částečně ovládat z&nbsp;webového prohlížeče, konkrétně ze
stránky, která byla zobrazena při spouštění služby:</p>

<pre>
$ <strong>./minio server /tmp/minio</strong>
&nbsp;
...
...
...
&nbsp;
Browser Access:
   http://10.0.0.29:9000  http://127.0.0.1:9000        
&nbsp;
...
...
...
</pre>

<p>Po otevření adresy (v&nbsp;našem případě lokální 127.0.0.1:9000) je nutné
zadat <i>AccessKey</i> (20 znaků) a <i>SecretKey</i> (40 znaků), které taktéž
známe, protože se opět zobrazily při spuštění služby:</p>

<pre>
$ <strong>./minio server /tmp/minio</strong>
&nbsp;
...
AccessKey: WDGGENVCJDQVFM3TBM88 
SecretKey: 8YxAW5qxYKBzo7qLGuqxuVDwK5NekY2k7v9ZIZ9C 
&nbsp;
...
...
...
</pre>

<img src="https://i.iinfo.cz/images/569/minio-3.png" class="image-399713" alt="&#160;" width="580" height="373" />
<p><i>Obrázek 3: Přihlašovací obrazovka, do které je nutné přenést AccessKey a
SecretKey.</i></p>

<img src="https://i.iinfo.cz/images/569/minio-4.png" class="image-399714" alt="&#160;" width="528" height="284" />
<p><i>Obrázek 4: Běžná copy&amp;paste procedura :-)</i></p>

<a href="https://www.root.cz/obrazek/399715/"><img src="https://i.iinfo.cz/images/569/minio-5-prev.png" class="image-399715" alt="&#160;" width="370" height="186" /></a>
<p><i>Obrázek 5: Data jsou v&nbsp;Miniu představována <strong>objekty</strong>,
které jsou ukládány do <strong>bucketů</strong>. Zpočátku je úložiště zcela
prázdné.</i></p>

<a href="https://www.root.cz/obrazek/399716/"><img src="https://i.iinfo.cz/images/569/minio-6-prev.png" class="image-399716" alt="&#160;" width="370" height="186" /></a>
<p><i>Obrázek 6: Přes ikonu <strong>+</strong> lze vytvořit nový bucket.
V&nbsp;příkladech budeme používat buckety &bdquo;foo&ldquo; a
&bdquo;bar&ldquo;.</i></p>

<a href="https://www.root.cz/obrazek/399717/"><img src="https://i.iinfo.cz/images/569/minio-7-prev.png" class="image-399717" alt="&#160;" width="370" height="186" /></a>
<p><i>Obrázek 7: V&nbsp;pravém dolním rohu je patrné kontextové menu získané po
rozkliku ikony <strong>+</strong>.</i></p>

<a href="https://www.root.cz/obrazek/399718/"><img src="https://i.iinfo.cz/images/569/minio-8-prev.png" class="image-399718" alt="&#160;" width="370" height="186" /></a>
<p><i>Obrázek 8: Uložení objektu do úložiště. Jedná se o obrázek dostupný na
adrese <a
href="https://blog.golang.org/go-brand/logos.jpg">https://blog.golang.org/go-brand/logos.jpg</a>.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Ovládání Minia z&nbsp;příkazového řádku přes konzoli</h2>

<p>Pro ovládání Minia, tj.&nbsp;především pro práci s&nbsp;<i>buckety</i> a
<i>objekty</i>, lze použít i nástroj pojmenovaný <strong>mc</strong>, který
jsme nainstalovali v&nbsp;rámci <a href="#k03">třetí kapitoly</a>. Tento
nástroj po svém spuštění bez parametrů vypíše všechny podporované příkazy:</p>

<pre>
ls       list buckets and objects
tree     list buckets and objects in a tree format
mb       make a bucket
rb       remove a bucket
cat      display object contents
head     display first 'n' lines of an object
pipe     stream STDIN to an object
share    generate URL for temporary access to an object
cp       copy objects
mirror   synchronize objects to a remote site
find     search for objects
sql      run sql queries on objects
stat     stat contents of objects
diff     list differences in object name, size, and date between buckets
rm       remove objects
event    manage object notifications
watch    watch for object events
policy   manage anonymous access to objects
admin    manage MinIO servers
session  manage saved sessions for cp command
config   manage mc configuration file
update   check for a new software update
version  print version info
</pre>

<p>Před použitím většiny operací, které ovládají službu Minio je nutné se
přihlásit, a to následujícím způsobem:</p>

<pre>
$ <strong>./mc config host add myminio http://10.0.0.29:9000 WDGGENVCJDQVFM3TBM88 8YxAW5qxYKBzo7qLGuqxuVDwK5NekY2k7v9ZIZ9C</strong>
&nbsp;
Added `myminio` successfully.
</pre>

<p>Další příkazy budou používat jméno &bdquo;myminio&ldquo;. Díky pojmenování
&bdquo;sezení&ldquo; je možné z&nbsp;jediného počítače v&nbsp;danou chvíli
ovládat i několik instancí Minia.</p>

<p><div class="rs-tip-major">Poznámka: tento nástroj ve větší míře využijeme
v&nbsp;navazující části tohoto seriálu.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Instalace knihovny s&nbsp;rozhraním pro Minio (Minio Client SDK)</h2>

<p>V&nbsp;této kapitole si ve stručnosti ukážeme, jakým způsobem lze
nainstalovat <i>Minio Client SDK</i>, což je poněkud dlouhý název pro knihovnu,
jenž programátorům zajišťuje rozhraní mezi programovacím jazykem a aplikací
v&nbsp;něm vyvíjené na jedné straně a službou Minio na straně druhé. Zaměříme
se na použití klienta v&nbsp;programovacím jazyku Go, i když je pochopitelně
možné Minio ovládat i z&nbsp;aplikací naprogramovaných v&nbsp;jiných
programovacích jazycích. Touto problematikou se však budeme zabývat až
příště.</p>

<p>SDK pro Go je postaveno na použití modulů, takže instalaci budeme muset
provést z&nbsp;projektu, který má systém modulů povolen. Vytvoření takového
projektu je ve skutečnosti velmi snadné, protože nám bude postačovat vytvoření
adresáře s&nbsp;prázdným projektem a inicializace systému modulů v&nbsp;tomto
adresáři:</p>

<pre>
$ <strong>mkdir minio1</strong>
&nbsp;
$ <strong>cd minio1</strong>
&nbsp;
$ <strong>go mod init minio1</strong>
&nbsp;
go: creating new go.mod: module minio1
</pre>

<p>Po zadání předchozích tří příkazů by měl v&nbsp;novém adresáři
&bdquo;minio1&ldquo; vzniknout soubor s&nbsp;názvem &bdquo;go.mod&ldquo;.
V&nbsp;následujícím kroku již nainstalujeme celé SDK:</p>

<pre>
$ <strong>go get github.com/minio/minio-go/v6</strong>
&nbsp;
go: finding github.com/minio/minio-go/v6 v6.0.44
go: finding github.com/minio/minio-go v6.0.14+incompatible
go: downloading github.com/minio/minio-go/v6 v6.0.44
go: downloading github.com/minio/minio-go v6.0.14+incompatible
go: extracting github.com/minio/minio-go v6.0.14+incompatible
go: extracting github.com/minio/minio-go/v6 v6.0.44
go: downloading golang.org/x/net v0.0.0-20190522155817-f3200d17e092
go: downloading golang.org/x/crypto v0.0.0-20190513172903-22d7a77e9e5f
go: downloading github.com/minio/sha256-simd v0.1.1
go: downloading gopkg.in/ini.v1 v1.42.0
go: extracting github.com/minio/sha256-simd v0.1.1
go: extracting gopkg.in/ini.v1 v1.42.0
go: extracting golang.org/x/net v0.0.0-20190522155817-f3200d17e092
go: extracting golang.org/x/crypto v0.0.0-20190513172903-22d7a77e9e5f
go: downloading golang.org/x/sys v0.0.0-20190422165155-953cdadca894
go: extracting golang.org/x/sys v0.0.0-20190422165155-953cdadca894
go: finding github.com/minio/sha256-simd v0.1.1
go: finding golang.org/x/crypto v0.0.0-20190513172903-22d7a77e9e5f
go: finding gopkg.in/ini.v1 v1.42.0
go: finding golang.org/x/sys v0.0.0-20190422165155-953cdadca894
</pre>

<p><div class="rs-tip-major">Poznámka: předchozí příkaz &bdquo;go get&ldquo; je
skutečně nutné zavolat z&nbsp;adresáře, v&nbsp;němž je připravena kostra
projektu založeného na modulech. V&nbsp;opačném případě bude &bdquo;go
get&ldquo; vypisovat poměrně kryptická chybová hlášení.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Kostra aplikace, která provede inicializaci klienta služby Minio</h2>

<p>Nyní, když již máme SDK pro službu Minio nainstalovaný, si můžeme vytvořit
kostru aplikace, po jejímž spuštění se provede inicializace klienta. Pro
úspěšné připojení je nutné znát minimálně tři údaje: URL, na němž je služba
Minio spuštěna, dále <i>Access Key ID</i>, což je řetězec o délce dvaceti znaků
a nakonec i <i>Secret Access Key</i> představovaný řetězcem o délce čtyřiceti
znaků. Všechny tři údaje již známe, protože je služba Minio vypsala při svém
spuštění (viz též <a href="#k03">třetí kapitolu</a>):</p>

<pre>
Endpoint:  http://10.0.0.29:9000  http://127.0.0.1:9000        
AccessKey: WDGGENVCJDQVFM3TBM88 
SecretKey: 8YxAW5qxYKBzo7qLGuqxuVDwK5NekY2k7v9ZIZ9C 
</pre>

<p>V&nbsp;prvním demonstračním příkladu tyto údaje pro jednoduchost přímo
zadáme do zdrojového kódu (což pochopitelně neznamená, že se jedná o
doporučení, kam podobné údaje ukládat :-):</p>

<pre>
endpoint := "127.0.0.1:9000"
&nbsp;
accessKeyID := "WDGGENVCJDQVFM3TBM88"
secretAccessKey := "8YxAW5qxYKBzo7qLGuqxuVDwK5NekY2k7v9ZIZ9C"
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že <i>endpoint</i> se
zadává bez udání protokolu.</div></p>

<p>Pro inicializaci klienta je nutné zavolat funkci <strong>New</strong>
z&nbsp;balíčku <strong>minio-go</strong>. Této funkci se předají všechny tři
výše zmíněné údaje a navíc i příznak oznamující, zda se má pro komunikaci
použít SSL/TLS či nikoli:</p>

<pre>
minioClient, err := minio.New(endpoint, accessKeyID, secretAccessKey, useSSL)
</pre>

<p>Funkce <strong>New</strong> vrací referenci na vytvořeného klienta
popř.&nbsp;strukturu s&nbsp;informací o chybě, která při inicializaci klienta
nastala. Prozatím si tuto strukturu popř.&nbsp;chybu pouze vypíšeme, což je
ostatně patrné i při pohledu na úplný zdrojový kód příkladu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/minio/minio-go/v6"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        endpoint := "127.0.0.1:9000"
&nbsp;
        <i>// it is needed to change the following two keys</i>
        accessKeyID := "WDGGENVCJDQVFM3TBM88"
        secretAccessKey := "8YxAW5qxYKBzo7qLGuqxuVDwK5NekY2k7v9ZIZ9C"
&nbsp;
        useSSL := true
&nbsp;
        <i>// initialize minio client object</i>
        minioClient, err := minio.New(endpoint, accessKeyID, secretAccessKey, useSSL)
        if err != nil {
                log.Fatalln(err)
        }
&nbsp;
        <i>// everything seems to be ok</i>
        log.Printf("%#v\n", minioClient) 
}
</pre>

<p>Po překladu (<strong>go build</strong>) a spuštění příkladu by se měly
vypsat informace o inicializovaném klientovi služby Minio:</p>

<pre>
2019/12/14 11:05:58 &amp;minio.Client{endpointURL:(*url.URL)(0xc000174000), credsProvider:(*credentials.Credentials)(0xc0000ae780), overrideSignerType:0, appInfo:struct { appName string; appVersion string }{appName:"", appVersion:""}, secure:true, httpClient:(*http.Client)(0xc000192c90), bucketLocCache:(*minio.bucketLocationCache)(0xc000284100), isTraceEnabled:false, traceErrorsOnly:false, traceOutput:io.Writer(nil), s3AccelerateEndpoint:"", region:"", random:(*rand.Rand)(0xc000192cf0), lookup:0}
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti dojde k&nbsp;inicializaci
klienta i ve chvíli, kdy budou klíče zadány špatně, protože se prozatím
neprovedlo připojení s&nbsp;ověřením klíčů.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Úprava příkladu &ndash; zadání parametrů připojení z&nbsp;příkazového řádku, výpis bucketů</h2>

<p>Předchozí demonstrační příklad byl sice jednoduchý, ovšem používali jsme
v&nbsp;něm údaje o připojení zapsané přímo do zdrojového kódu, což není
praktické. Proto příklad upravíme, a to takovým způsobem, aby se údaje nutné
pro připojení do služby Minio získávaly z&nbsp;příkazového řádku. Pro tento
účel použijeme standardní balíček <strong>flag</strong>:</p>

<pre>
var endpoint = flag.String("endpoint", "127.0.0.1:9000", "MinIO service endpoint")
var accessKeyID = flag.String("accessKeyID", "", "Access key ID for MinIO")
var secretAccessKey = flag.String("secretAccessKey", "", "Secret access key for MinIO")
var useSSL = flag.Bool("useSSL", false, "Use SSL for communication with MinIO")
flag.Parse()
</pre>

<p><div class="rs-tip-major">Poznámka: zapomenout nesmíme především na zavolání
funkce <strong>flag.Parse()</strong>.</div></p>

<p>Inicializace klienta je snadná, jen si musíme uvědomit, že příznaky získané
z&nbsp;příkazové řádky jsou ukazateli na řetězce a nikoli přímo řetězce:</p>

<pre>
minioClient, err := minio.New(*endpoint, *accessKeyID, *secretAccessKey, *useSSL)
if err != nil {
        log.Fatalln(err)
}
</pre>

<p>Dále demonstrační příklad rozšíříme takovým způsobem, aby se vypsaly všechny
<i>buckety</i>, které jsou v&nbsp;Miniu uloženy a jsou dostupné pro zvoleného
uživatele (specifikovaného klíčem). Použijeme funkci
<strong>ListBuckets</strong>, která vrátí buď chybu nebo seznam
<i>bucketů</i>:</p>

<pre>
func <strong>listBuckets</strong>(minioClient *minio.Client) {
        fmt.Println("List of buckets:")
&nbsp;
        buckets, err := minioClient.ListBuckets()
        if err != nil {
                log.Fatalln(err)
                return
        }
        for i, bucket := range buckets {
                fmt.Printf("%d\t%+v\n", i, bucket)
        }
}
</pre>

<p>Úplný zdrojový kód dnešního druhého demonstračního příkladu vypadá
následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;  
import (
        "flag"
        "fmt"
        "github.com/minio/minio-go/v6"
        "log"
)
&nbsp;  
func <strong>listBuckets</strong>(minioClient *minio.Client) {
        fmt.Println("List of buckets:")
&nbsp;  
        buckets, err := minioClient.ListBuckets()
        if err != nil {
                log.Fatalln(err)
                return
        }
        for i, bucket := range buckets {
                fmt.Printf("%d\t%+v\n", i, bucket)
        }
}
&nbsp;  
func <strong>main</strong>() {
        var endpoint = flag.String("endpoint", "127.0.0.1:9000", "MinIO service endpoint")
        var accessKeyID = flag.String("accessKeyID", "", "Access key ID for MinIO")
        var secretAccessKey = flag.String("secretAccessKey", "", "Secret access key for MinIO")
        var useSSL = flag.Bool("useSSL", false, "Use SSL for communication with MinIO")
        flag.Parse()
&nbsp;  
        <i>// initialize minio client object</i>
        minioClient, err := minio.New(*endpoint, *accessKeyID, *secretAccessKey, *useSSL)
        if err != nil {
                log.Fatalln(err)
        }
&nbsp;  
        <i>// everything seems to be ok</i>
        log.Printf("%#v\n", minioClient)
&nbsp;  
        listBuckets(minioClient)
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Typické chyby, které mohou nastat</h2>

<p>Nyní, když můžeme parametry připojení do Minia specifikovat na příkazovém
řádku, je možné se seznámit s&nbsp;typickými chybami, které mohou nastat.</p>

<p>Pokus o připojení s&nbsp;nekorektním <i>AccessKey</i>:</p>

<pre>
$ <strong>./minio3</strong>
&nbsp;
2019/12/14 11:52:53 &amp;minio.Client{endpointURL:(*url.URL)(0xc000158000), credsProvider:(*credentials.Credentials)(0xc00006c840), overrideSignerType:0, appInfo:struct { appName string; appVersion string }{appName:"", appVersion:""}, secure:false, httpClient:(*http.Client)(0xc00008f860), bucketLocCache:(*minio.bucketLocationCache)(0xc00000e7c0), isTraceEnabled:false, traceErrorsOnly:false, traceOutput:io.Writer(nil), s3AccelerateEndpoint:"", region:"", random:(*rand.Rand)(0xc00008f8c0), lookup:0}
List of buckets:
2019/12/14 11:52:53 <strong>Access Denied.</strong>
</pre>

<p>Chybný <i>SecretKey</i>:</p>

<pre>
$ <strong>./minio3 -accessKeyID=3V8WMANF061SGOIVR7AA -secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIl</strong>
&nbsp;
2019/12/14 13:02:11 &amp;minio.Client{endpointURL:(*url.URL)(0xc000178000), credsProvider:(*credentials.Credentials)(0xc0000ae7e0), overrideSignerType:0, appInfo:struct { appName string; appVersion string }{appName:"", appVersion:""}, secure:false, httpClient:(*http.Client)(0xc0000938c0), bucketLocCache:(*minio.bucketLocationCache)(0xc0000a0780), isTraceEnabled:false, traceErrorsOnly:false, traceOutput:io.Writer(nil), s3AccelerateEndpoint:"", region:"", random:(*rand.Rand)(0xc000093920), lookup:0}
List of buckets:
2019/12/14 13:02:11 <strong>The request signature we calculated does not match the signature you provided. Check your key and signing method.</strong>
</pre>

<p>Pokus o použití SSL/TLS u služby běžící přes HTTP:</p>

<pre>
$ <strong>./minio3 -accessKeyID=3V8WMANF061SGOIVR7AA -secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE -useSSL=true</strong>
&nbsp;
2019/12/14 13:02:27 &amp;minio.Client{endpointURL:(*url.URL)(0xc000158000), credsProvider:(*credentials.Credentials)(0xc00006c840), overrideSignerType:0, appInfo:struct { appName string; appVersion string }{appName:"", appVersion:""}, secure:true, httpClient:(*http.Client)(0xc00012db60), bucketLocCache:(*minio.bucketLocationCache)(0xc000239ae0), isTraceEnabled:false, traceErrorsOnly:false, traceOutput:io.Writer(nil), s3AccelerateEndpoint:"", region:"", random:(*rand.Rand)(0xc00012dbc0), lookup:0}
List of buckets:
2019/12/14 13:02:27 <strong>Get https://127.0.0.1:9000/: http: server gave HTTP response to HTTPS client</strong>
</pre>

<p>Úspěšné připojení s&nbsp;výpisem bucketů (existují dva):</p>

<pre>
$ <strong>./minio3 -accessKeyID=3V8WMANF061SGOIVR7AA -secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE</strong>
&nbsp;
2019/12/14 13:01:54 &amp;minio.Client{endpointURL:(*url.URL)(0xc000172000), credsProvider:(*credentials.Credentials)(0xc0000ac7e0), overrideSignerType:0, appInfo:struct { appName string; appVersion string }{appName:"", appVersion:""}, secure:false, httpClient:(*http.Client)(0xc0000938c0), bucketLocCache:(*minio.bucketLocationCache)(0xc00009e780), isTraceEnabled:false, traceErrorsOnly:false, traceOutput:io.Writer(nil), s3AccelerateEndpoint:"", region:"", random:(*rand.Rand)(0xc000093920), lookup:0}
List of buckets:
<strong>0       {Name:bar CreationDate:2019-12-14 10:30:57.918 +0000 UTC}</strong>
<strong>1       {Name:foo CreationDate:2019-12-14 12:01:10.533 +0000 UTC}</strong>
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výpis všech objektů ve zvoleném bucketu</h2>

<p>Ve třetím demonstračním příkladu si ukážeme, jakým způsobem je možné získat
seznam všech objektů, které jsou uloženy ve zvoleném bucketu. Tuto
funkcionalitu nabízí metoda <strong>listObjects</strong>, které je nutné předat
jméno bucketu, prefix (lze ho použít pro rychlou filtraci na straně služby),
příznak, zda se mají procházet i objekty v&nbsp;podadresářích a posledním
parametrem je kanál, který lze použít pro synchronizaci gorutiny, která by
objekty načítala.  V&nbsp;našem jednoduchém příkladu však kanál na konci funkce
<strong>listObjects</strong> pouze uzavřeme a nebudeme se starat o to, zda do
něj byla zapsána hodnota či nikoli:</p>

<pre>
func <strong>listObjects</strong>(minioClient *minio.Client, bucket string) {
        fmt.Println("List of objects for bucket:", bucket)
&nbsp;
        done := make(chan struct{})
        defer close(done)
&nbsp;
        objects := minioClient.ListObjects(bucket, "", false, done)
        for object := range objects {
                if object.Err != nil {
                        log.Println(object.Err)
                        return
                }
                fmt.Println(object)
        }
}
</pre>

<p>Výpis bude proveden v&nbsp;tomto (prozatím nijak neupraveném) formátu:</p>

<pre>
{"f2042bf5780d07253480fb8c64c60850-1" t.go 2019-12-14 16:10:38.411 +0000 UTC 56  0001-01-01 00:00:00 +0000 UTC map[] map[] { 02d6176db174dc93cb1b899f7c6078f08654445fe8cf1b6ce98d8855f66bdbf4} [] STANDARD &lt;nil&lt;}
</pre>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;  
import (
        "flag"
        "fmt"
        "github.com/minio/minio-go/v6"
        "log"
)
&nbsp;  
func <strong>listBuckets</strong>(minioClient *minio.Client) {
        fmt.Println("List of buckets:")
&nbsp;  
        buckets, err := minioClient.ListBuckets()
        if err != nil {
                log.Fatalln(err)
                return
        }
        for i, bucket := range buckets {
                fmt.Printf("%d\t%+v\n", i, bucket)
        }
}
&nbsp;  
func <strong>listObjects</strong>(minioClient *minio.Client, bucket string) {
        fmt.Println("List of objects for bucket:", bucket)
&nbsp;  
        done := make(chan struct{})
        defer close(done)
&nbsp;  
        objects := minioClient.ListObjects(bucket, "", false, done)
        for object := range objects {
                if object.Err != nil {
                        log.Println(object.Err)
                        return
                }
                fmt.Println(object)
        }
}
&nbsp;  
func <strong>main</strong>() {
        var endpoint = flag.String("endpoint", "127.0.0.1:9000", "MinIO service endpoint")
        var accessKeyID = flag.String("accessKeyID", "", "Access key ID for MinIO")
        var secretAccessKey = flag.String("secretAccessKey", "", "Secret access key for MinIO")
        var useSSL = flag.Bool("useSSL", false, "Use SSL for communication with MinIO")
        flag.Parse()
&nbsp;  
        <i>// initialize minio client object</i>
        minioClient, err := minio.New(*endpoint, *accessKeyID, *secretAccessKey, *useSSL)
        if err != nil {
                log.Fatalln(err)
        }
&nbsp;  
        <i>// everything seems to be ok</i>
        log.Printf("%#v\n", minioClient)
&nbsp;  
        listBuckets(minioClient)
        listObjects(minioClient, "foo")
}
</pre>

<p>Po spuštění tohoto příkladu by se nejdříve měly vypsat všechny buckety a
následně i objekty z&nbsp;bucketu &bdquo;foo&ldquo; (ty jsme přidali přes
webové rozhraní):</p>

<pre>
09:17 $ <strong>./minio4 -accessKeyID=3V8WMANF061SGOIVR7AA -secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE</strong>
&nbsp;
2019/12/16 09:17:45 &amp;minio.Client{endpointURL:(*url.URL)(0xc00015a000), credsProvider:(*credentials.Credentials)(0xc00006e840), overrideSignerType:0, appInfo:struct { appName string; appVersion string }{appName:"", appVersion:""}, secure:false, httpClient:(*http.Client)(0xc0000138f0), bucketLocCache:(*minio.bucketLocationCache)(0xc00000e7a0), isTraceEnabled:false, traceErrorsOnly:false, traceOutput:io.Writer(nil), s3AccelerateEndpoint:"", region:"", random:(*rand.Rand)(0xc000013950), lookup:0}
&nbsp;
List of buckets:
0       {Name:bar CreationDate:2019-12-14 10:30:57.918 +0000 UTC}
1       {Name:foo CreationDate:2019-12-14 17:13:38.282 +0000 UTC}
&nbsp;
List of objects for bucket: foo
{"f2042bf5780d07253480fb8c64c60850-1" t.go 2019-12-14 16:10:38.411 +0000 UTC 56  0001-01-01 00:00:00 +0000 UTC map[] map[] { 02d6176db174dc93cb1b899f7c6078f08654445fe8cf1b6ce98d8855f66bdbf4} [] STANDARD &lt;nil&lt;}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Podrobnější informace o objektech ve zvoleném bucketu</h2>

<p>O objektech, které jsou uloženy ve vybraném bucketu, je možné získat i
podrobnější informace. Ve struktuře popisující každý objekt, nalezneme
mj.&nbsp;i tyto atributy:</p>

<table>
<tr><th>#</th><th>Atribut</th><th>Význam</th></tr>
<tr><td>1</td><td>Key</td><td>klíč (jednoznačný v&nbsp;rámci bucketu)</td></tr>
<tr><td>2</td><td>Size</td><td>velikost v&nbsp;bajtech (nikoli ve znacích, i když jde o JSON, XML atd.)</td></tr>
<tr><td>3</td><td>LastModified</td><td>čas poslední modifikace</td></tr>
<tr><td>4</td><td>ETag</td><td>MD5 heš (128 bitů reprezentovaných třiceti dvěma hexadecimálními číslicemi)</td></tr>
</table>

<p>Z&nbsp;tohoto důvodu je možné upravit funkci pro výpis informací o objektech
tak, aby se vypsaly potřebné atributy (viz zvýrazněný řádek):</p>

<pre>
func <strong>listObjects</strong>(minioClient *minio.Client, bucket string, prefix string) {
        fmt.Println("List of objects for bucket:", bucket)
&nbsp;
        done := make(chan struct{})
        defer close(done)
&nbsp;
        objects := minioClient.ListObjects(bucket, prefix, false, done)
        for object := range objects {
                if object.Err != nil {
                        log.Println(object.Err)
                        return
                }
                <strong>fmt.Printf("Key: %s,  Size: %d,  Tag: %s\n", object.Key, object.Size, object.ETag)</strong>
        }
}
</pre>

<p>Takto upravený příklad zobrazí podrobnější informace o objektu s&nbsp;klíčem
&bdquo;logos.jpg&ldquo;, délkou 48913 bajtů a tagem nastaveným na
&bdquo;f95e4a85dafc56313883f8571cfc8143&ldquo;:</p>

<pre>
$ <strong>./minio5 -accessKeyID=3V8WMANF061SGOIVR7AA -secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE</strong>
&nbsp;
2019/12/14 16:43:51 &amp;minio.Client{endpointURL:(*url.URL)(0xc00015a000), credsProvider:(*credentials.Credentials)(0xc00006e840), overrideSignerType:0, appInfo:struct { appName string; appVersion string }{appName:"", appVersion:""}, secure:false, httpClient:(*http.Client)(0xc0000138f0), bucketLocCache:(*minio.bucketLocationCache)(0xc00000e7c0), isTraceEnabled:false, traceErrorsOnly:false, traceOutput:io.Writer(nil), s3AccelerateEndpoint:"", region:"", random:(*rand.Rand)(0xc000013950), lookup:0}
List of buckets:
0       {Name:bar CreationDate:2019-12-14 10:30:57.918 +0000 UTC}
1       {Name:foo CreationDate:2019-12-14 12:01:10.533 +0000 UTC}
List of objects for bucket: foo
<strong>Key: logos.jpg,  Size: 48913,  Tag: "f95e4a85dafc56313883f8571cfc8143-1"</strong>
</pre>

<p>Úplný zdrojový kód takto upraveného demonstračního příkladu vypadá
následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "flag"
        "fmt"
        "github.com/minio/minio-go/v6"
        "log"
)
&nbsp;
func <strong>listBuckets</strong>(minioClient *minio.Client) {
        fmt.Println("List of buckets:")
&nbsp;
        buckets, err := minioClient.ListBuckets()
        if err != nil {
                log.Fatalln(err)
                return
        }
        for i, bucket := range buckets {
                fmt.Printf("%d\t%+v\n", i, bucket)
        }
}
&nbsp;
func <strong>listObjects</strong>(minioClient *minio.Client, bucket string, prefix string) {
        fmt.Println("List of objects for bucket:", bucket)
&nbsp;
        done := make(chan struct{})
        defer close(done)
&nbsp;
        objects := minioClient.ListObjects(bucket, prefix, false, done)
        for object := range objects {
                if object.Err != nil {
                        log.Println(object.Err)
                        return
                }
                fmt.Printf("Key: %s,  Size: %d,  Tag: %s\n", object.Key, object.Size, object.ETag)
        }
}
&nbsp;
func <strong>main</strong>() {
        var endpoint = flag.String("endpoint", "127.0.0.1:9000", "MinIO service endpoint")
        var accessKeyID = flag.String("accessKeyID", "", "Access key ID for MinIO")
        var secretAccessKey = flag.String("secretAccessKey", "", "Secret access key for MinIO")
        var useSSL = flag.Bool("useSSL", false, "Use SSL for communication with MinIO")
        var objectPrefix = flag.String("prefix", "", "Prefix for objects to be listed")
        flag.Parse()
&nbsp;
        <i>// initialize minio client object</i>
        minioClient, err := minio.New(*endpoint, *accessKeyID, *secretAccessKey, *useSSL)
        if err != nil {
                log.Fatalln(err)
        }
&nbsp;
        <i>// everything seems to be ok</i>
        log.Printf("%#v\n", minioClient)
&nbsp;
        listBuckets(minioClient)
        listObjects(minioClient, "foo", *objectPrefix)
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Uložení objektu z&nbsp;bucketu do lokálního souboru</h2>

<p>Velmi často se setkáme s&nbsp;požadavkem, aby se nějaký objekt zkopíroval
z&nbsp;Minia do lokálního souboru. K&nbsp;tomuto problému lze přistoupit dvěma
způsoby &ndash; buď se použijí obecné funkce pro přístup k&nbsp;obsahu objektu,
nebo se zavolá specializovaná metoda nazvaná <strong>FGetObject</strong>, která
se o přečtení obsahu objektu a jeho uložení do lokálního souboru automaticky
postará. Této metodě je nutné předat název bucketu, klíč objektu, jméno
lokálního souboru a popř.&nbsp;další parametry (ty jsou uloženy ve struktuře,
která může být prázdná):</p>

<pre>
err = minioClient.FGetObject("foo", "logos.jpg", "logos.jpg", minio.GetObjectOptions{})
if err != nil {
        log.Fatalln(err)
}
</pre>

<p>Po spuštění této metody je vhodné se přesvědčit, zda se stažení skutečně
podařilo:</p>

<pre>
$ <strong>file logos.jpg </strong>
&nbsp;
logos.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 1600x878, frames 3
</pre>

<p>Úplný zdrojový kód demonstračního příkladu, který kopii objektu do lokálního
souboru provede, může vypadat následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "flag"
        "github.com/minio/minio-go/v6"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        var endpoint = flag.String("endpoint", "127.0.0.1:9000", "MinIO service endpoint")
        var accessKeyID = flag.String("accessKeyID", "", "Access key ID for MinIO")
        var secretAccessKey = flag.String("secretAccessKey", "", "Secret access key for MinIO")
        var useSSL = flag.Bool("useSSL", false, "Use SSL for communication with MinIO")
        flag.Parse()
&nbsp;
        <i>// initialize minio client object</i>
        minioClient, err := minio.New(*endpoint, *accessKeyID, *secretAccessKey, *useSSL)
        if err != nil {
                log.Fatalln(err)
        }
&nbsp;
        <i>// everything seems to be ok</i>
        log.Printf("%#v\n", minioClient)
&nbsp;
        err = minioClient.FGetObject("foo", "logos.jpg", "logos.jpg", minio.GetObjectOptions{})
        if err != nil {
                log.Fatalln(err)
        }
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Přečtení obsahu objektu s&nbsp;textem</h2>

<p>Mnohdy potřebujeme obsah objektu programově přečíst z&nbsp;úložiště Minia a
ihned zpracovat. V&nbsp;takovém případě ovšem není vhodné použít výše zmíněnou
metodu <strong>FGetObject</strong> a posléze soubor znovu načíst do aplikace.
Jak z&nbsp;paměťového, tak i výkonnostního hlediska je lepší obsah objektu
přečíst přímo (bez meziuložení do souboru), k&nbsp;čemuž slouží metoda nazvaná
<strong>GetObject</strong> s&nbsp;prakticky stejnými parametry, jaké má metoda
<strong>FGetObject</strong> (pochopitelně chybí jméno souboru):</p>

<pre>
object, err := minioClient.GetObject(bucket, objectName, minio.GetObjectOptions{})
if err != nil {
        log.Fatalln(err)
}
defer object.Close()
</pre>

<p>Výše uvedeným postupem získáme strukturu implementující standardní rozhraní
<strong>Reader</strong>, což nám například umožňuje zpracovávat obsah
(textového) objektu řádek po řádku:</p>

<pre>
scanner := bufio.NewScanner(object)
scanner.Split(bufio.ScanLines)
&nbsp;
for scanner.Scan() {
        fmt.Println(scanner.Text())
}
</pre>

<a href="https://www.root.cz/obrazek/399719/"><img src="https://i.iinfo.cz/images/569/minio-9-prev.png" class="image-399719" alt="&#160;" width="370" height="186" /></a>
<p><i>Obrázek 9: Založení nového objektu pod klíčem &bdquo;t.go&ldquo;, jehož
obsahem je text. Tento soubor použijeme v&nbsp;příkladu popsaném v&nbsp;této
kapitole</i></p>

<p>Opět se podívejme na úplný výpis demonstračního příkladu, který načte nově
vytvořený objekt s&nbsp;obsahem získaným ze zdrojového (textového) souboru:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "bufio"
        "flag"
        "fmt"
        "github.com/minio/minio-go/v6"
        "log"
)
&nbsp;
func <strong>printObject</strong>(minioClient *minio.Client, bucket string, objectName string) {
        object, err := minioClient.GetObject(bucket, objectName, minio.GetObjectOptions{})
        if err != nil {
                log.Fatalln(err)
        }
        defer object.Close()
&nbsp;
        scanner := bufio.NewScanner(object)
        scanner.Split(bufio.ScanLines)
&nbsp;
        for scanner.Scan() {
                fmt.Println(scanner.Text())
        }
}
&nbsp;
func <strong>main</strong>() {
        var endpoint = flag.String("endpoint", "127.0.0.1:9000", "MinIO service endpoint")
        var accessKeyID = flag.String("accessKeyID", "", "Access key ID for MinIO")
        var secretAccessKey = flag.String("secretAccessKey", "", "Secret access key for MinIO")
        var useSSL = flag.Bool("useSSL", false, "Use SSL for communication with MinIO")
        flag.Parse()
&nbsp;
        <i>// initialize minio client object</i>
        minioClient, err := minio.New(*endpoint, *accessKeyID, *secretAccessKey, *useSSL)
        if err != nil {
                log.Fatalln(err)
        }
&nbsp;
        <i>// everything seems to be ok</i>
        log.Printf("%#v\n", minioClient)
&nbsp;
        printObject(minioClient, "foo", "t.go")
}
</pre>

<pre>
17:28 $ <strong>./minio7 -accessKeyID=3V8WMANF061SGOIVR7AA -secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE</strong>
&nbsp;
2019/12/14 17:28:06 &amp;minio.Client{endpointURL:(*url.URL)(0xc000172000), credsProvider:(*credentials.Credentials)(0xc0000ac7e0), overrideSignerType:0, appInfo:struct { appName string; appVersion string }{appName:"", appVersion:""}, secure:false, httpClient:(*http.Client)(0xc0000938c0), bucketLocCache:(*minio.bucketLocationCache)(0xc00009e780), isTraceEnabled:false, traceErrorsOnly:false, traceOutput:io.Writer(nil), s3AccelerateEndpoint:"", region:"", random:(*rand.Rand)(0xc000093920), lookup:0}
&nbsp;
package main
&nbsp;
func main() {
        println(`foo "bar" baz`)
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Alternativní způsob přístupu k&nbsp;obsahu objektu</h2>

<p>Obsah zvoleného objektu, který získáme z&nbsp;Minia, lze zpracovat různými
způsoby. Stačí si uvědomit, že stále pracujeme s&nbsp;objektem implementujícím
rozhraní <i>Reader</i>, takže lze použít všechny funkce a metody, které
s&nbsp;tímto rozhraním dokáží spolupracovat. V&nbsp;dalším demonstračním
příkladu je ukázáno použití funkce <strong>ioutil.ReadAll</strong>, která nám
umožní načíst všechna data poskytovaná <i>Readerem</i> a vrátit je jako řez
(<i>slice</i>) bajtů:</p>

<pre>
$ <strong>go doc ioutil.ReadAll</strong>
&nbsp;
func ReadAll(r io.Reader) ([]byte, error)
    ReadAll reads from r until an error or EOF and returns the data it read. A
    successful call returns err == nil, not err == EOF. Because ReadAll is
    defined to read from src until EOF, it does not treat an EOF from Read as an
    error to be reported.
</pre>

<p>Celý řez bajtů posléze snadno převedeme na řetězec a vytiskneme:</p>

<pre>
object, err := minioClient.GetObject(bucket, objectName, minio.GetObjectOptions{})
if err != nil {
        log.Fatalln(err)
}
defer object.Close()
&nbsp;
bytes, err := ioutil.ReadAll(object)
if err != nil {
        log.Fatalln(err)
}
fmt.Println(string(bytes))
</pre>

<p>Opět si ukažme úplný zdrojový kód tohoto demonstračního příkladu:</p>

<pre>
package <strong>main</strong>
  
import (
        "flag"
        "fmt"
        "github.com/minio/minio-go/v6"
        "io/ioutil"
        "log"
)
&nbsp;
func <strong>printObject</strong>(minioClient *minio.Client, bucket string, objectName string) {
        object, err := minioClient.GetObject(bucket, objectName, minio.GetObjectOptions{})
        if err != nil {
                log.Fatalln(err)
        }
        defer object.Close()
&nbsp;
        bytes, err := ioutil.ReadAll(object)
        if err != nil {
                log.Fatalln(err)
        }
        fmt.Println(string(bytes))
}
&nbsp;
func <strong>main</strong>() {
        var endpoint = flag.String("endpoint", "127.0.0.1:9000", "MinIO service endpoint")
        var accessKeyID = flag.String("accessKeyID", "", "Access key ID for MinIO")
        var secretAccessKey = flag.String("secretAccessKey", "", "Secret access key for MinIO")
        var useSSL = flag.Bool("useSSL", false, "Use SSL for communication with MinIO")
        flag.Parse()
&nbsp;
        <i>// initialize minio client object</i>
        minioClient, err := minio.New(*endpoint, *accessKeyID, *secretAccessKey, *useSSL)
        if err != nil {
                log.Fatalln(err)
        }
&nbsp;
        <i>// everything seems to be ok</i>
        log.Printf("%#v\n", minioClient)
&nbsp;
        printObject(minioClient, "foo", "t.go")
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Poslání dat do Minia s&nbsp;jejich uložením do objektu</h2>

<p>V&nbsp;předchozích kapitolách jsme si ukázali, jak lze získat obsah objektu
z&nbsp;úložiště Minia. Víme, jak se obsah objektu uloží do souboru metodou
<strong>FGetObject</strong> popř.&nbsp;získá ve formě sekvence bajtů metodou
<strong>GetObject</strong>. Existuje pochopitelně i opačný postup,
tj.&nbsp;poslání dat do Minia s&nbsp;jejich uložením. Pokud jsou data uložená
v&nbsp;lokálním souboru, je situace jednoduchá, neboť lze použít metodu
<strong>FPutObject</strong>:</p>

<pre>
length, err := <strong>minioClient.FPutObject</strong>("foo", "minio9.go", "minio9.go", minio.PutObjectOptions{
        ContentType: "text/plain;charset=UTF-8",
})
if err != nil {
        fmt.Println(err)
        return
}
fmt.Println("Successfully uploaded bytes: ", length)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že je možné uvést i typ
obsahu, což může být užitečné při jeho dalším zpracování.</div></p>

<p>V&nbsp;dalším demonstračním příkladu se nejdříve do úložiště Minia pošle
textový soubor se zdrojovým textem a následně se zpětně přečte a vypíše jeho
obsah:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "flag"
        "fmt"
        "github.com/minio/minio-go/v6"
        "io/ioutil"
        "log"
)
&nbsp;
func <strong>printObject</strong>(minioClient *minio.Client, bucket string, objectName string) {
        object, err := minioClient.GetObject(bucket, objectName, minio.GetObjectOptions{})
        if err != nil {
                log.Fatalln(err)
        }
        defer object.Close()
&nbsp;
        bytes, err := ioutil.ReadAll(object)
        if err != nil {
                log.Fatalln(err)
        }
        fmt.Println(string(bytes))
}
&nbsp;
func <strong>main</strong>() {
        var endpoint = flag.String("endpoint", "127.0.0.1:9000", "MinIO service endpoint")
        var accessKeyID = flag.String("accessKeyID", "", "Access key ID for MinIO")
        var secretAccessKey = flag.String("secretAccessKey", "", "Secret access key for MinIO")
        var useSSL = flag.Bool("useSSL", false, "Use SSL for communication with MinIO")
        flag.Parse()
&nbsp;
        <i>// initialize minio client object</i>
        minioClient, err := minio.New(*endpoint, *accessKeyID, *secretAccessKey, *useSSL)
        if err != nil {
                log.Fatalln(err)
        }
&nbsp;
        <i>// everything seems to be ok</i>
        log.Printf("%#v\n", minioClient)
&nbsp;
        length, err := minioClient.FPutObject("foo", "minio9.go", "minio9.go", minio.PutObjectOptions{
                ContentType: "text/plain;charset=UTF-8",
        })
        if err != nil {
                fmt.Println(err)
                return
        }
        fmt.Println("Successfully uploaded bytes: ", length)
&nbsp;
        printObject(minioClient, "foo", "minio9.go")
}
</pre>

<p>Výsledek může vypadat takto (je zkrácený):</p>

<pre>
17:42 $ <strong>./minio9 -accessKeyID=3V8WMANF061SGOIVR7AA -secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE</strong>
&nbsp;
2019/12/14 17:47:29 &amp;minio.Client{endpointURL:(*url.URL)(0xc00015a000), credsProvider:(*credentials.Credentials)(0xc00006e840), overrideSignerType:0, appInfo:struct { appName string; appVersion string }{appName:"", appVersion:""}, secure:false, httpClient:(*http.Client)(0xc0000138f0), bucketLocCache:(*minio.bucketLocationCache)(0xc00000e7a0), isTraceEnabled:false, traceErrorsOnly:false, traceOutput:io.Writer(nil), s3AccelerateEndpoint:"", region:"", random:(*rand.Rand)(0xc000013950), lookup:0}
&nbsp;
Successfully uploaded bytes:  1299
...
...
...
</pre>

<a href="https://www.root.cz/obrazek/399720/"><img src="https://i.iinfo.cz/images/569/minio-10-prev.png" class="image-399720" alt="&#160;" width="370" height="186" /></a>
<p><i>Obrázek 10: V&nbsp;úložišti byl vytvořen nový objekt uložený pod klíčem
&bdquo;minio9.go&ldquo;.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Kopie objektu v&nbsp;rámci Minia bez jejich přesunu na lokální počítač</h2>

<p>Poslední operací, s&nbsp;níž se dnes seznámíme, je kopie objektu
v&nbsp;rámci Minia, bez nutnosti přesunu dat na lokální počítač (což je obecně
velmi pomalá operace, protože pro Minio je úzkým hrdlem síťové rozhraní).
Samotnou kopii objektu zajišťuje metoda <strong>CopyObject</strong>:</p>

<pre>
err = minioClient.CopyObject(dst, src)
if err != nil {
        log.Fatalln(err)
}
</pre>

<p>Této metodě je nutné předat dvě struktury reprezentující cílový a zdrojový
objekt. Pro vytvoření těchto struktur existují funkce&ndash;konstruktory
nazvané <strong>NewSourceInfo</strong> a <strong>NewDestinationInfo</strong>,
kterým je nutné předat minimálně jméno bucketu a jméno objektu:</p>

<pre>
src := minio.NewSourceInfo(bucket, from, nil)
dst, err := minio.NewDestinationInfo(bucket, to, nil, nil)
</pre>

<p><div class="rs-tip-major">Poznámka: je tedy možné, aby se kopie provedla
mezi dvěma rozdílnými buckety.</div></p>

<p>Úplný zdrojový kód dnešního posledního demonstračního příkladu, který
zkopíruje objekt s&nbsp;klíčem &bdquo;minio9.go&ldquo; do objektu
&bdquo;minio10.go&ldquo;, vypadá následovně:</p>

<pre>
package main
&nbsp;
import (
        "flag"
        "fmt"
        "github.com/minio/minio-go/v6"
        "io/ioutil"
        "log"
)
&nbsp;
func <strong>printObject</strong>(minioClient *minio.Client, bucket string, objectName string) {
        object, err := minioClient.GetObject(bucket, objectName, minio.GetObjectOptions{})
        if err != nil {
                log.Fatalln(err)
        }
        defer object.Close()
&nbsp;
        bytes, err := ioutil.ReadAll(object)
        if err != nil {
                log.Fatalln(err)
        }
        fmt.Println(string(bytes))
}
&nbsp;
func <strong>copyObject</strong>(minioClient *minio.Client, bucket string, from string, to string) {
        src := minio.NewSourceInfo(bucket, from, nil)
        dst, err := minio.NewDestinationInfo(bucket, to, nil, nil)
        if err != nil {
                log.Fatalln(err)
        }
&nbsp;
        err = minioClient.CopyObject(dst, src)
        if err != nil {
                log.Fatalln(err)
        }
}
&nbsp;
func <strong>main</strong>() {
        var endpoint = flag.String("endpoint", "127.0.0.1:9000", "MinIO service endpoint")
        var accessKeyID = flag.String("accessKeyID", "", "Access key ID for MinIO")
        var secretAccessKey = flag.String("secretAccessKey", "", "Secret access key for MinIO")
        var useSSL = flag.Bool("useSSL", false, "Use SSL for communication with MinIO")
        flag.Parse()
&nbsp;
        <i>// initialize minio client object</i>
        minioClient, err := minio.New(*endpoint, *accessKeyID, *secretAccessKey, *useSSL)
        if err != nil {
                log.Fatalln(err)
        }
&nbsp;
        <i>// everything seems to be ok</i>
        log.Printf("%#v\n", minioClient)
&nbsp;
        printObject(minioClient, "foo", "minio9.go")
        copyObject(minioClient, "foo", "minio9.go", "minio10.go")
        printObject(minioClient, "foo", "minio10.go")
}
</pre>

<a href="https://www.root.cz/obrazek/399721/"><img src="https://i.iinfo.cz/images/569/minio-11-prev.png" class="image-399721" alt="&#160;" width="370" height="186" /></a>
<p><i>Obrázek 11: Objekty &bdquo;minio9.go&ldquo; a &bdquo;minio10.go&ldquo; by
měly mít totožný obsah.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah následující části seriálu</h2>

<p>V&nbsp;navazující části tohoto seriálu si ukážeme další (již poněkud
komplikovanější) operace nabízené SDK, ovšem nezapomeneme ani na použití
nástroje <strong>mc</strong> a na ukázku využití služby Minia z&nbsp;dalších
programovacích jazyků, zejména z&nbsp;Pythonu, jenž se v&nbsp;souvislosti
s&nbsp;Miniem i s&nbsp;AWS S3 používá velmi často.</p>

<a href="https://www.root.cz/obrazek/399722/"><img src="https://i.iinfo.cz/images/569/minio-12-prev.png" class="image-399722" alt="&#160;" width="370" height="106" /></a>
<p><i>Obrázek 12: Vybraný objekt či objekty je možné z&nbsp;úložiště smazat.
Prozatím jsme nenastavovali uživatelská práva, takže smazání je
proveditelné.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně pět až šest megabajtů), můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>minio1.go</td><td>kostra aplikace, která provede inicializaci klienta služby Minio</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_46/minio01/minio1.go">https://github.com/tisnik/go-root/blob/master/article_46/minio01/minio1.go</a></td></tr>
<tr><td> 2</td><td>minio2.go</td><td>zadání parametrů připojení z&nbsp;příkazového řádku</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_46/minio02/minio2.go">https://github.com/tisnik/go-root/blob/master/article_46/minio02/minio2.go</a></td></tr>
<tr><td> 3</td><td>minio3.go</td><td>zadání parametrů připojení z&nbsp;příkazového řádku, výpis bucketů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_46/minio03/minio3.go">https://github.com/tisnik/go-root/blob/master/article_46/minio03/minio3.go</a></td></tr>
<tr><td> 4</td><td>minio4.go</td><td>výpis všech objektů ve zvoleném bucketu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_46/minio04/minio4.go">https://github.com/tisnik/go-root/blob/master/article_46/minio04/minio4.go</a></td></tr>
<tr><td> 5</td><td>minio5.go</td><td>podrobnější informace o objektech ve zvoleném bucketu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_46/minio05/minio5.go">https://github.com/tisnik/go-root/blob/master/article_46/minio05/minio5.go</a></td></tr>
<tr><td> 6</td><td>minio6.go</td><td>uložení objektu z&nbsp;bucketu do lokálního souboru</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_46/minio06/minio6.go">https://github.com/tisnik/go-root/blob/master/article_46/minio06/minio6.go</a></td></tr>
<tr><td> 7</td><td>minio7.go</td><td>přečtení obsahu objektu s&nbsp;textem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_46/minio07/minio7.go">https://github.com/tisnik/go-root/blob/master/article_46/minio07/minio7.go</a></td></tr>
<tr><td> 8</td><td>minio8.go</td><td>alternativní způsob přístupu k&nbsp;obsahu objektu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_46/minio08/minio8.go">https://github.com/tisnik/go-root/blob/master/article_46/minio08/minio8.go</a></td></tr>
<tr><td> 9</td><td>minio9.go</td><td>poslání dat do Minia s&nbsp;jejich uložením do objektu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_46/minio09/minio9.go">https://github.com/tisnik/go-root/blob/master/article_46/minio09/minio9.go</a></td></tr>
<tr><td>10</td><td>minio10.go</td><td>kopie objektu v&nbsp;rámci Minia bez jejich přesunu na lokální počítač</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_46/minio10/minio10.go">https://github.com/tisnik/go-root/blob/master/article_46/minio10/minio10.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránky projektu MinIO<br />
<a href="https://min.io/">https://min.io/</a>
</li>

<li>MinIO Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-quickstart-guide.html">https://docs.min.io/docs/minio-quickstart-guide.html</a>
</li>

<li>MinIO Go Client API Reference<br />
<a href="https://docs.min.io/docs/golang-client-api-reference">https://docs.min.io/docs/golang-client-api-reference</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>MinIO Client Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a>
</li>

<li>Analýza kvality zdrojových kódů Minia<br />
<a href="https://goreportcard.com/report/github.com/minio/minio">https://goreportcard.com/report/github.com/minio/minio</a>
</li>

<li>This is MinIO<br />
<a href="https://www.youtube.com/watch?v=vF0lQh0XOCs">https://www.youtube.com/watch?v=vF0lQh0XOCs</a>
</li>

<li>Running MinIO Standalone<br />
<a href="https://www.youtube.com/watch?v=dIQsPCHvHoM">https://www.youtube.com/watch?v=dIQsPCHvHoM</a>
</li>

<li>"Amazon S3 Compatible Storage in Kubernetes" - Rob Girard, Principal Tech Marketing Engineer, Minio<br />
<a href="https://www.youtube.com/watch?v=wlpn8K0jJ4U">https://www.youtube.com/watch?v=wlpn8K0jJ4U</a>
</li>

<li>Ginkgo<br />
<a href="http://onsi.github.io/ginkgo/">http://onsi.github.io/ginkgo/</a>
</li>

<li>Gomega<br />
<a href="https://onsi.github.io/gomega/">https://onsi.github.io/gomega/</a>
</li>

<li>Ginkgo's Preferred Matcher Library na GitHubu<br />
<a href="https://github.com/onsi/gomega/">https://github.com/onsi/gomega/</a>
</li>

<li>Provided Matchers<br />
<a href="http://onsi.github.io/gomega/#provided-matchers">http://onsi.github.io/gomega/#provided-matchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku goexpect<br />
<a href="https://godoc.org/github.com/google/goexpect">https://godoc.org/github.com/google/goexpect</a>
</li>

<li>Balíček goexpect<br />
<a href="https://github.com/google/goexpect">https://github.com/google/goexpect</a>
</li>

<li>Balíček go-expect<br />
<a href="https://github.com/Netflix/go-expect">https://github.com/Netflix/go-expect</a>
</li>

<li>Balíček gexpect<br />
<a href="https://github.com/ThomasRooney/gexpect">https://github.com/ThomasRooney/gexpect</a>
</li>

<li>Expect (originál naprogramovaný v&nbsp;TCL)<br />
<a href="https://core.tcl-lang.org/expect/index">https://core.tcl-lang.org/expect/index</a>
</li>

<li>Expect (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Expect">https://en.wikipedia.org/wiki/Expect</a>
</li>

<li>Pexpect<br />
<a href="https://pexpect.readthedocs.io/en/stable/">https://pexpect.readthedocs.io/en/stable/</a>
</li>

<li>Golang SSH Client: Multiple Commands, Crypto &amp; Goexpect Examples<br />
<a href="http://networkbit.ch/golang-ssh-client/">http://networkbit.ch/golang-ssh-client/</a>
</li>

<li>goblin na GitHubu<br />
<a href="https://github.com/franela/goblin">https://github.com/franela/goblin</a>
</li>

<li>Mocha framework<br />
<a href="https://mochajs.org/">https://mochajs.org/</a>
</li>

<li>frisby na GitHubu<br />
<a href="https://github.com/verdverm/frisby">https://github.com/verdverm/frisby</a>
</li>

<li>package frisby<br />
<a href="https://godoc.org/github.com/verdverm/frisby">https://godoc.org/github.com/verdverm/frisby</a>
</li>

<li>Frisby alternatives and similar packages (generováno)<br />
<a href="https://go.libhunt.com/frisby-alternatives">https://go.libhunt.com/frisby-alternatives</a>
</li>

<li>Cucumber for golang<br />
<a href="https://github.com/DATA-DOG/godog">https://github.com/DATA-DOG/godog</a>
</li>

<li>How to Use Godog for Behavior-driven Development in Go<br />
<a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go</a>
</li>

<li>Comparative Analysis Of GoLang Testing Frameworks<br />
<a href="https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks">https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks</a>
</li>

<li>A Quick Guide to Testing in Golang<br />
<a href="https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/">https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/</a>
</li>

<li>Tom's Obvious, Minimal Language.<br />
<a href="https://github.com/toml-lang/toml">https://github.com/toml-lang/toml</a>
</li>

<li>xml.org<br />
<a href="http://www.xml.org/">http://www.xml.org/</a>
</li>

<li>Soubory .properties<br />
<a href="https://en.wikipedia.org/wiki/.properties">https://en.wikipedia.org/wiki/.properties</a>
</li>

<li>Soubory INI<br />
<a href="https://en.wikipedia.org/wiki/INI_file">https://en.wikipedia.org/wiki/INI_file</a>
</li>

<li>JSON to YAML<br />
<a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a>
</li>

<li>Data Format Converter<br />
<a href="https://toolkit.site/format.html">https://toolkit.site/format.html</a>
</li>

<li>Viper na GitHubu<br />
<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>
</li>

<li>GoDotEnv na GitHubu<br />
<a href="https://github.com/joho/godotenv">https://github.com/joho/godotenv</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>
