<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Reflexe v programovacím jazyce Go</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Reflexe v programovacím jazyce Go</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Reflexe v&nbsp;programovacím jazyce Go</a></p>
<p><a href="#k02">*** 2. Standardní balíček <strong>reflect</strong></a></p>
<p><a href="#k03">*** 3. Funkce <strong>reflect.ValueOf</strong> a datový typ <strong>Value</strong></a></p>
<p><a href="#k04">*** 4. Příklady použití funkce <strong>reflect.ValueOf</strong></a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Reflexe v&nbsp;programovacím jazyce Go</h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Standardní balíček <strong>reflect</strong></h2>

<p>Většina funkcionality, která se týká reflexe v&nbsp;jazyku Go, je dostupná přes standardní balíček <strong>reflect</strong>. Veřejné funkce a další symboly tohoto balíčku jsou pochopitelně zdokumentovány a některé nejdůležitější vlastnosti budou popsány a ukázány v&nbsp;navazujících kapitolách. Mimochodem &ndash; celou dokumentaci si můžete přečíst <a href="">na stránkách s&nbsp;dokumentací</a>, nebo si je můžete zobrazit příkazem <strong>go doc reflect</strong>:</p>

<pre>
$ <strong>go doc reflect</strong>
&nbsp;
package reflect // import "reflect"
&nbsp;
Package reflect implements run-time reflection, allowing a program to manipulate
objects with arbitrary types. The typical use is to take a value with static
type interface{} and extract its dynamic type information by calling TypeOf,
which returns a Type.
&nbsp;
A call to ValueOf returns a Value representing the run-time data. Zero takes a
Type and returns a Value representing a zero value for that type.
&nbsp;
See "The Laws of Reflection" for an introduction to reflection in Go:
https://golang.org/doc/articles/laws_of_reflection.html
&nbsp;
...
...
...
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Funkce <strong>reflect.ValueOf</strong> a datový typ <strong>Value</strong></h2>

<p>Jednou ze základních operací implementovaných ve standardním balíčku <strong>reflect</strong> je získání konkrétní hodnoty uložené v&nbsp;obecném rozhraní <strong>any</strong> neboli <strong>interface{}</strong>. Co to znamená? Existují situace, zejména v&nbsp;případě, že píšeme obecný kód, v&nbsp;nichž víme, že do nějaké funkce nebo metody se může předat libovolná hodnota (tedy <strong>any</strong>), popř.&nbsp;libovolná hodnota typu, který implementuje nějaké (obecnější) rozhraní. Překladač tedy bude pracovat právě s&nbsp;těmito zmíněnými typy &ndash; <strong>any</strong> popř.&nbsp;<strong>interface X</strong>. Ovšem v&nbsp;čase běhu (runtime) se samozřejmě do oné funkce nebo metody předává nějaká konkrétní hodnota: datová struktura (resp.&nbsp;datový typ), která vyhovuje (<i>satisfy</i>) zvolenému rozhraní. A jen pro připomenutí &ndash; prázdnému rozhraní, tj.&nbsp;typu <strong>any</strong>, vyhovuje hodnota libovolného typu, protože implementuje všechny předepsané metody (což je u prázdného rozhraní prázdná množina).</p>

<p>Vraťme se nyní k&nbsp;funkci <strong>reflect.ValueOf</strong>. Ta jako svůj argument akceptuje hodnotu libovolného typu a vrací strukturu (datový typ) nazvaný <strong>Value</strong>. Přes tuto strukturu budeme moci hodnotu zkoumat &ndash; získat její typ, modifikovat ji atd.:</p>

<pre>
$ <strong>go doc reflect.ValueOf</strong>
&nbsp;
package reflect // import "reflect"
&nbsp;
func ValueOf(i any) Value
    ValueOf returns a new Value initialized to the concrete value stored in the
    interface i. ValueOf(nil) returns the zero Value.
</pre>

<p></p>

<pre>
type <strong>Value</strong> struct {
        <i>// Has unexported fields.</i>
}
</pre>

<pre>
func (v Value) <strong>Addr</strong>() Value
func (v Value) <strong>Bool</strong>() bool
func (v Value) <strong>Bytes</strong>() []byte
func (v Value) <strong>Call</strong>(in []Value) []Value
func (v Value) <strong>CallSlice</strong>(in []Value) []Value
func (v Value) <strong>CanAddr</strong>() bool
func (v Value) <strong>CanComplex</strong>() bool
func (v Value) <strong>CanConvert</strong>(t Type) bool
func (v Value) <strong>CanFloat</strong>() bool
func (v Value) <strong>CanInt</strong>() bool
func (v Value) <strong>CanInterface</strong>() bool
func (v Value) <strong>CanSet</strong>() bool
func (v Value) <strong>CanUint</strong>() bool
func (v Value) <strong>Cap</strong>() int
func (v Value) <strong>Clear</strong>()
func (v Value) <strong>Close</strong>()
func (v Value) <strong>Comparable</strong>() bool
func (v Value) <strong>Complex</strong>() complex128
func (v Value) <strong>Convert</strong>(t Type) Value
func (v Value) <strong>Elem</strong>() Value
func (v Value) <strong>Equal</strong>(u Value) bool
func (v Value) <strong>Field</strong>(i int) Value
func (v Value) <strong>FieldByIndex</strong>(index []int) Value
func (v Value) <strong>FieldByIndexErr</strong>(index []int) (Value, error)
func (v Value) <strong>FieldByName</strong>(name string) Value
func (v Value) <strong>FieldByNameFunc</strong>(match func(string) bool) Value
func (v Value) <strong>Float</strong>() float64
func (v Value) <strong>Grow</strong>(n int)
func (v Value) <strong>Index</strong>(i int) Value
func (v Value) <strong>Int</strong>() int64
func (v Value) <strong>Interface</strong>() (i any)
func (v Value) <strong>InterfaceData</strong>() [2]uintptr
func (v Value) <strong>IsNil</strong>() bool
func (v Value) <strong>IsValid</strong>() bool
func (v Value) <strong>IsZero</strong>() bool
func (v Value) <strong>Kind</strong>() Kind
func (v Value) <strong>Len</strong>() int
func (v Value) <strong>MapIndex</strong>(key Value) Value
func (v Value) <strong>MapKeys</strong>() []Value
func (v Value) <strong>MapRange</strong>() *MapIter
func (v Value) <strong>Method</strong>(i int) Value
func (v Value) <strong>MethodByName</strong>(name string) Value
func (v Value) <strong>NumField</strong>() int
func (v Value) <strong>NumMethod</strong>() int
func (v Value) <strong>OverflowComplex</strong>(x complex128) bool
func (v Value) <strong>OverflowFloat</strong>(x float64) bool
func (v Value) <strong>OverflowInt</strong>(x int64) bool
func (v Value) <strong>OverflowUint</strong>(x uint64) bool
func (v Value) <strong>Pointer</strong>() uintptr
func (v Value) <strong>Recv</strong>() (x Value, ok bool)
func (v Value) <strong>Send</strong>(x Value)
func (v Value) <strong>Set</strong>(x Value)
func (v Value) <strong>SetBool</strong>(x bool)
func (v Value) <strong>SetBytes</strong>(x []byte)
func (v Value) <strong>SetCap</strong>(n int)
func (v Value) <strong>SetComplex</strong>(x complex128)
func (v Value) <strong>SetFloat</strong>(x float64)
func (v Value) <strong>SetInt</strong>(x int64)
func (v Value) <strong>SetIterKey</strong>(iter *MapIter)
func (v Value) <strong>SetIterValue</strong>(iter *MapIter)
func (v Value) <strong>SetLen</strong>(n int)
func (v Value) <strong>SetMapIndex</strong>(key, elem Value)
func (v Value) <strong>SetPointer</strong>(x unsafe.Pointer)
func (v Value) <strong>SetString</strong>(x string)
func (v Value) <strong>SetUint</strong>(x uint64)
func (v Value) <strong>SetZero</strong>()
func (v Value) <strong>Slice</strong>(i, j int) Value
func (v Value) <strong>Slice3</strong>(i, j, k int) Value
func (v Value) <strong>String</strong>() string
func (v Value) <strong>TryRecv</strong>() (x Value, ok bool)
func (v Value) <strong>TrySend</strong>(x Value) bool
func (v Value) <strong>Type</strong>() Type
func (v Value) <strong>Uint</strong>() uint64
func (v Value) <strong>UnsafeAddr</strong>() uintptr
func (v Value) <strong>UnsafePointer</strong>() unsafe.Pointer
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Příklady použití funkce <strong>reflect.ValueOf</strong></h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "reflect"
)
&nbsp;
func <strong>main</strong>() {
        x := 42
        v := reflect.ValueOf(x)
        fmt.Println(x)
        fmt.Println(v)
}
</pre>

<pre>
42
42
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "reflect"
)
&nbsp;
func <strong>main</strong>() {
        x := 42
        v := reflect.ValueOf(x)
        fmt.Printf("value %v of type %T\n", x, x)
        fmt.Printf("value %v of type %T\n", v, v)
}
</pre>

<pre>
value 42 of type int
value 42 of type reflect.Value
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "reflect"
)
&nbsp;
func <strong>main</strong>() {
        var x interface{} = 42
        v := reflect.ValueOf(x)
        fmt.Printf("value %v of type %T\n", x, x)
        fmt.Printf("value %v of type %T\n", v, v)
}
</pre>

<p></p>

<pre>
value 42 of type int
value 42 of type reflect.Value
</pre>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "reflect"
)
&nbsp;
func <strong>main</strong>() {
        var x interface{} = nil
        v := reflect.ValueOf(x)
        fmt.Printf("value %v of type %T\n", x, x)
        fmt.Printf("value %v of type %T\n", v, v)
}
</pre>

<p></p>

<pre>
value &lt;nil&gt; of type &lt;nil&gt;
value &lt;invalid reflect.Value&gt; of type reflect.Value
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "reflect"
)
&nbsp;
func <strong>test_get_type</strong>(x any) {
        value := reflect.ValueOf(x)
        fmt.Println(x)
        fmt.Println(value)
        fmt.Println()
}
&nbsp;
func <strong>main</strong>() {
        x := 42
        test_get_type(x)
&nbsp;
        y := true
        test_get_type(y)
&nbsp;
        z := "foobar"
        test_get_type(z)
&nbsp;
        w := 1 + 2i
        test_get_type(w)
}
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "reflect"
)
&nbsp;
func <strong>test_get_type</strong>(x any) {
        value := reflect.ValueOf(x)
        fmt.Println(x)
        fmt.Println(value)
        fmt.Println()
}
&nbsp;
type <strong>user</strong> struct {
        name    string
        surname string
}
&nbsp;
func <strong>main</strong>() {
        var nil1 *int = nil
        test_get_type(nil1)
&nbsp;
        var nil2 *bool = nil
        test_get_type(nil2)
&nbsp;
        var nil3 *string = nil
        test_get_type(nil3)
&nbsp;
        var nil4 *user = nil
        test_get_type(nil4)
}
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "reflect"
)
&nbsp;
func <strong>test_get_type</strong>(x any) {
        value := reflect.ValueOf(x)
        fmt.Printf("value %v of type %T\n", x, x)
        fmt.Printf("value %v of type %T\n", value, value)
        fmt.Println()
}
&nbsp;
func <strong>main</strong>() {
        x := 42
        test_get_type(x)
&nbsp;
        y := true
        test_get_type(y)
&nbsp;
        z := "foobar"
        test_get_type(z)
&nbsp;
        w := 1 + 2i
        test_get_type(w)
}
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "reflect"
)
&nbsp;
func <strong>test_get_type</strong>(x any) {
        value := reflect.ValueOf(x)
        fmt.Printf("value %v of type %T\n", x, x)
        fmt.Printf("value %v of type %T\n", value, value)
        fmt.Println()
}
&nbsp;
type <strong>user</strong> struct {
        name    string
        surname string
}
&nbsp;
func <strong>main</strong>() {
        var nil1 *int = nil
        test_get_type(nil1)
&nbsp;
        var nil2 *bool = nil
        test_get_type(nil2)
&nbsp;
        var nil3 *string = nil
        test_get_type(nil3)
&nbsp;
        var nil4 *user = nil
        test_get_type(nil4)
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;jazyce Go, které jsou určené pro
překlad s&nbsp;využitím standardního překladače jazyka Go, byly uloženy do Git
repositáře, jenž je dostupný na adrese <a
href="https://github.com/RedHatOfficial/GoCourse">https://github.com/RedHatOfficial/GoCourse</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
</table>

get_type_empty_interface.go
get_type.go
get_types.go
get_types_nil.go
value_of_empty_interface.go
value_of.go
value_of_type.go
values_of.go
values_of_nil.go
values_of_type.go
values_of_type_nil.go


<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Laws of Reflection<br />
<a href="https://go.dev/blog/laws-of-reflection">https://go.dev/blog/laws-of-reflection</a>
</li>

<li>Standardní balíček <strong>reflect</strong><br />
<a href="https://pkg.go.dev/reflect">https://pkg.go.dev/reflect</a>
</li>

<li>Reflection in Go: Use cases and tutorial<br />
<a href="https://blog.logrocket.com/reflection-go-use-cases-tutorial/">https://blog.logrocket.com/reflection-go-use-cases-tutorial/</a>
</li>

<li>Reflection in Golang<br />
<a href="https://www.geeksforgeeks.org/reflection-in-golang/">https://www.geeksforgeeks.org/reflection-in-golang/</a>
</li>

<li>Reflexe (programování)<br />
<a href="https://cs.wikipedia.org/wiki/Reflexe_(programov%C3%A1n%C3%AD)">https://cs.wikipedia.org/wiki/Reflexe_(programov%C3%A1n%C3%AD)</a>
</li>

<li>Reflective programming<br />
<a href="https://en.wikipedia.org/wiki/Reflective_programming">https://en.wikipedia.org/wiki/Reflective_programming</a>
</li>

<li>go2js<br />
<a href="https://github.com/tredoe/go2js">https://github.com/tredoe/go2js</a>
</li>

<li>GitHub repositář projektu GopherJS<br />
<a href="https://github.com/gopherjs/gopherjs">https://github.com/gopherjs/gopherjs</a>
</li>

<li>How to use GopherJS to turn Go code into a JavaScript library<br />
<a href="https://medium.com/@kentquirk/how-to-use-gopherjs-to-turn-go-code-into-a-javascript-library-1e947703db7a">https://medium.com/@kentquirk/how-to-use-gopherjs-to-turn-go-code-into-a-javascript-library-1e947703db7a</a>
</li>

<li>Source to source compiler<br />
<a href="https://en.wikipedia.org/wiki/Source-to-source_compiler">https://en.wikipedia.org/wiki/Source-to-source_compiler</a>
</li>

<li>Binary recompiler<br />
<a href="https://en.wikipedia.org/wiki/Binary_recompiler">https://en.wikipedia.org/wiki/Binary_recompiler</a>
</li>

<li>py2many na GitHubu<br />
<a href="https://github.com/py2many/py2many">https://github.com/py2many/py2many</a>
</li>

<li>py2many na PyPi<br />
<a href="https://pypi.org/project/py2many/">https://pypi.org/project/py2many/</a>
</li>

<li>Awesome Transpilers<br />
<a href="https://github.com/milahu/awesome-transpilers">https://github.com/milahu/awesome-transpilers</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

