<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

valueof

<pre>
package main

import (
        "fmt"
        "reflect"
)

func main() {
        x := 42
        v := reflect.ValueOf(x)
        fmt.Println(x)
        fmt.Println(v)
}
</pre>

valueof type

<pre>
package main

import (
        "fmt"
        "reflect"
)

func main() {
        x := 42
        v := reflect.ValueOf(x)
        fmt.Printf("value %v of type %T\n", x, x)
        fmt.Printf("value %v of type %T\n", v, v)
}
</pre>

<pre>
package main

import (
        "fmt"
        "reflect"
)

func test_get_type(x any) {
        value := reflect.ValueOf(x)
        fmt.Println(x)
        fmt.Println(value)
        fmt.Println()
}

type user struct {
        name    string
        surname string
}

func main() {
        var nil1 interface{} = nil
        test_get_type(nil1)
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
package main

import (
        "fmt"
        "reflect"
)

func test_get_type(x any) {
        value := reflect.ValueOf(x)
        fmt.Println(x)
        fmt.Println(value)
        fmt.Println()
}

func main() {
        x := 42
        test_get_type(x)

        y := true
        test_get_type(y)

        z := "foobar"
        test_get_type(z)

        w := 1 + 2i
        test_get_type(w)
}
</pre>

<pre>
package main

import (
        "fmt"
        "reflect"
)

func test_get_type(x any) {
        value := reflect.ValueOf(x)
        fmt.Println(x)
        fmt.Println(value)
        fmt.Println()
}

type user struct {
        name    string
        surname string
}

func main() {
        var nil1 *int = nil
        test_get_type(nil1)

        var nil2 *bool = nil
        test_get_type(nil2)

        var nil3 *string = nil
        test_get_type(nil3)

        var nil4 *user = nil
        test_get_type(nil4)
}
</pre>

<pre>
package main

import (
        "fmt"
        "reflect"
)

func test_get_type(x any) {
        value := reflect.ValueOf(x)
        fmt.Printf("value %v of type %T\n", x, x)
        fmt.Printf("value %v of type %T\n", value, value)
        fmt.Println()
}

func main() {
        x := 42
        test_get_type(x)

        y := true
        test_get_type(y)

        z := "foobar"
        test_get_type(z)

        w := 1 + 2i
        test_get_type(w)
}
</pre>

<pre>
package main

import (
        "fmt"
        "reflect"
)

func test_get_type(x any) {
        value := reflect.ValueOf(x)
        fmt.Printf("value %v of type %T\n", x, x)
        fmt.Printf("value %v of type %T\n", value, value)
        fmt.Println()
}

type user struct {
        name    string
        surname string
}

func main() {
        var nil1 *int = nil
        test_get_type(nil1)

        var nil2 *bool = nil
        test_get_type(nil2)

        var nil3 *string = nil
        test_get_type(nil3)

        var nil4 *user = nil
        test_get_type(nil4)
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;jazyce Go, které jsou určené pro
překlad s&nbsp;využitím standardního překladače jazyka Go, byly uloženy do Git
repositáře, jenž je dostupný na adrese <a
href="https://github.com/RedHatOfficial/GoCourse">https://github.com/RedHatOfficial/GoCourse</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Laws of Reflection<br />
<a href="https://go.dev/blog/laws-of-reflection">https://go.dev/blog/laws-of-reflection</a>
</li>

<li>Standardní balíček <strong>reflect</strong><br />
<a href="https://pkg.go.dev/reflect">https://pkg.go.dev/reflect</a>
</li>

<li>Reflection in Go: Use cases and tutorial<br />
<a href="https://blog.logrocket.com/reflection-go-use-cases-tutorial/">https://blog.logrocket.com/reflection-go-use-cases-tutorial/</a>
</li>

<li>Reflection in Golang<br />
<a href="https://www.geeksforgeeks.org/reflection-in-golang/">https://www.geeksforgeeks.org/reflection-in-golang/</a>
</li>

<li>go2js<br />
<a href="https://github.com/tredoe/go2js">https://github.com/tredoe/go2js</a>
</li>

<li>GitHub repositář projektu GopherJS<br />
<a href="https://github.com/gopherjs/gopherjs">https://github.com/gopherjs/gopherjs</a>
</li>

<li>How to use GopherJS to turn Go code into a JavaScript library<br />
<a href="https://medium.com/@kentquirk/how-to-use-gopherjs-to-turn-go-code-into-a-javascript-library-1e947703db7a">https://medium.com/@kentquirk/how-to-use-gopherjs-to-turn-go-code-into-a-javascript-library-1e947703db7a</a>
</li>

<li>Source to source compiler<br />
<a href="https://en.wikipedia.org/wiki/Source-to-source_compiler">https://en.wikipedia.org/wiki/Source-to-source_compiler</a>
</li>

<li>Binary recompiler<br />
<a href="https://en.wikipedia.org/wiki/Binary_recompiler">https://en.wikipedia.org/wiki/Binary_recompiler</a>
</li>

<li>py2many na GitHubu<br />
<a href="https://github.com/py2many/py2many">https://github.com/py2many/py2many</a>
</li>

<li>py2many na PyPi<br />
<a href="https://pypi.org/project/py2many/">https://pypi.org/project/py2many/</a>
</li>

<li>Awesome Transpilers<br />
<a href="https://github.com/milahu/awesome-transpilers">https://github.com/milahu/awesome-transpilers</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

