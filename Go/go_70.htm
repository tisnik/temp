<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p></p>

https://nickgravgaard.com/elastic-tabstops/images/columnblocks_coloured.gif

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto článku se často budeme zmiňovat o řídicím znaku <strong>Tab</strong>, takže možná stojí za zmínku, že demonstrační příklady, které budou dnes ukázány v&nbsp;navazujících kapitolách, prošly před importem do redakčního systému konverzí, které znaky <strong>Tab</strong> nahradilo za mezery (i když se pro <a href="https://golang.org/doc/effective_go#formatting">programovací jazyk Go oficiálně doporučují <strong>Taby</strong></a>). Z&nbsp;tohoto důvodu je lepší zdrojové kódy příkladů získat přímo z&nbsp;repositáře uvedeného <a href="#k19">v&nbsp;devatenácté kapitole</a>.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p></p>

<pre>
package main
&nbsp;
import (
        "fmt"
        "os"
        "text/tabwriter"
)
&nbsp;
const (
        MinWidth         = 0
        TabWidth         = 0
        Padding          = 1
        PaddingCharacter = ' '
        Flags            = 0
)
&nbsp;
func main() {
        w := tabwriter.NewWriter(os.Stdout, MinWidth, TabWidth, Padding, PaddingCharacter, Flags)
        fmt.Fprintln(w, "1\t2\t3")
        fmt.Fprintln(w, "4\t5\t6")
        fmt.Fprintln(w, "7\t8\t9")
        w.Flush()
&nbsp;
        fmt.Println()
&nbsp;
        w = tabwriter.NewWriter(os.Stdout, MinWidth, TabWidth, Padding, PaddingCharacter, Flags)
        fmt.Fprintln(w, "foo\tbar\tbaz")
        fmt.Fprintln(w, "foo\tbar\tbaz")
        fmt.Fprintln(w, "foo\tbar\tbaz")
        w.Flush()
}
</pre>

<pre>
1 2 3
4 5 6
7 8 9
&nbsp;
foo bar baz
foo bar baz
foo bar baz
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
package main
&nbsp;
import (
        "fmt"
        "os"
        "text/tabwriter"
)
&nbsp;
const (
        MinWidth         = 0
        TabWidth         = 0
        Padding          = 1
        PaddingCharacter = ' '
        Flags            = 0
)
&nbsp;
func main() {
        w := tabwriter.NewWriter(os.Stdout, MinWidth, TabWidth, Padding, PaddingCharacter, Flags)
        fmt.Fprintln(w, "1\t1\t1")
        fmt.Fprintln(w, "22\t22\t22")
        fmt.Fprintln(w, "333\t333\t333")
        fmt.Fprintln(w, "4444\t4444\t4444")
        w.Flush()
&nbsp;
        fmt.Println()
&nbsp;
        w = tabwriter.NewWriter(os.Stdout, MinWidth, TabWidth, Padding, PaddingCharacter, Flags)
        fmt.Fprintln(w, "f\tb\tb")
        fmt.Fprintln(w, "foo\tbar\tbaz")
        fmt.Fprintln(w, "foobar\tbarbaz\tbazfoo")
        w.Flush()
}
</pre>

<pre>
1    1    1
22   22   22
333  333  333
4444 4444 4444
&nbsp;
f      b      b
foo    bar    baz
foobar barbaz bazfoo
</pre>

<pre>
package main
&nbsp;
import (
        "fmt"
        "os"
        "text/tabwriter"
)
&nbsp;
const (
        TabWidth         = 0
        Padding          = 1
        PaddingCharacter = ' '
        Flags            = 0
)
&nbsp;
func main() {
        for minWidth := 0; minWidth &lt; 10; minWidth++ {
                fmt.Printf("Min width = %d\n", minWidth)
                w := tabwriter.NewWriter(os.Stdout, minWidth, TabWidth, Padding, PaddingCharacter, Flags)
                fmt.Fprintln(w, "1\t1\t1")
                fmt.Fprintln(w, "22\t22\t22")
                fmt.Fprintln(w, "333\t333\t333")
                fmt.Fprintln(w, "4444\t4444\t4444")
                w.Flush()
                fmt.Println()
        }
}
</pre>

<pre>
Min width = 0
1    1    1
22   22   22
333  333  333
4444 4444 4444
&nbsp;
Min width = 1
1    1    1
22   22   22
333  333  333
4444 4444 4444
&nbsp;
Min width = 2
1    1    1
22   22   22
333  333  333
4444 4444 4444
&nbsp;
Min width = 3
1    1    1
22   22   22
333  333  333
4444 4444 4444
&nbsp;
Min width = 4
1    1    1
22   22   22
333  333  333
4444 4444 4444
&nbsp;
Min width = 5
1    1    1
22   22   22
333  333  333
4444 4444 4444
&nbsp;
Min width = 6
1     1     1
22    22    22
333   333   333
4444  4444  4444
&nbsp;
Min width = 7
1      1      1
22     22     22
333    333    333
4444   4444   4444
&nbsp;
Min width = 8
1       1       1
22      22      22
333     333     333
4444    4444    4444
&nbsp;
Min width = 9
1        1        1
22       22       22
333      333      333
4444     4444     4444
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
package main
&nbsp;
import (
        "fmt"
        "os"
        "text/tabwriter"
)
&nbsp;
const (
        MinWidth         = 0
        TabWidth         = 0
        PaddingCharacter = ' '
        Flags            = 0
)
&nbsp;
func main() {
        for padding := 0; padding &lt; 10; padding++ {
                fmt.Printf("padding = %d\n", padding)
                w := tabwriter.NewWriter(os.Stdout, MinWidth, TabWidth, padding, PaddingCharacter, Flags)
                fmt.Fprintln(w, "1\t1\t1")
                fmt.Fprintln(w, "22\t22\t22")
                fmt.Fprintln(w, "333\t333\t333")
                fmt.Fprintln(w, "4444\t4444\t4444")
                w.Flush()
                fmt.Println()
        }
}
</pre>

<pre>
padding = 0
1   1   1
22  22  22
333 333 333
444444444444
&nbsp;
padding = 1
1    1    1
22   22   22
333  333  333
4444 4444 4444
&nbsp;
padding = 2
1     1     1
22    22    22
333   333   333
4444  4444  4444
&nbsp;
padding = 3
1      1      1
22     22     22
333    333    333
4444   4444   4444
&nbsp;
padding = 4
1       1       1
22      22      22
333     333     333
4444    4444    4444
&nbsp;
padding = 5
1        1        1
22       22       22
333      333      333
4444     4444     4444
&nbsp;
padding = 6
1         1         1
22        22        22
333       333       333
4444      4444      4444
&nbsp;
padding = 7
1          1          1
22         22         22
333        333        333
4444       4444       4444
&nbsp;
padding = 8
1           1           1
22          22          22
333         333         333
4444        4444        4444
&nbsp;
padding = 9
1            1            1
22           22           22
333          333          333
4444         4444         4444

</pre>
<pre>
package main
&nbsp;
import (
        "fmt"
        "os"
        "text/tabwriter"
)
&nbsp;
const (
        MinWidth         = 0
        TabWidth         = 0
        PaddingCharacter = '.'
        Flags            = 0
)
&nbsp;
func main() {
        for padding := 0; padding &lt; 10; padding++ {
                fmt.Printf("padding = %d\n", padding)
                w := tabwriter.NewWriter(os.Stdout, MinWidth, TabWidth, padding, PaddingCharacter, Flags)
                fmt.Fprintln(w, "1\t1\t1")
                fmt.Fprintln(w, "22\t22\t22")
                fmt.Fprintln(w, "333\t333\t333")
                fmt.Fprintln(w, "4444\t4444\t4444")
                w.Flush()
                fmt.Println()
        }
}
</pre>

<pre>
padding = 0
1...1...1
22..22..22
333.333.333
444444444444
&nbsp;
padding = 1
1....1....1
22...22...22
333..333..333
4444.4444.4444
&nbsp;
padding = 2
1.....1.....1
22....22....22
333...333...333
4444..4444..4444
&nbsp;
padding = 3
1......1......1
22.....22.....22
333....333....333
4444...4444...4444
&nbsp;
padding = 4
1.......1.......1
22......22......22
333.....333.....333
4444....4444....4444
&nbsp;
padding = 5
1........1........1
22.......22.......22
333......333......333
4444.....4444.....4444
&nbsp;
padding = 6
1.........1.........1
22........22........22
333.......333.......333
4444......4444......4444
&nbsp;
padding = 7
1..........1..........1
22.........22.........22
333........333........333
4444.......4444.......4444
&nbsp;
padding = 8
1...........1...........1
22..........22..........22
333.........333.........333
4444........4444........4444
&nbsp;
padding = 9
1............1............1
22...........22...........22
333..........333..........333
4444.........4444.........4444
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
package main
&nbsp;
import (
        "fmt"
        "os"
        "text/tabwriter"
)
&nbsp;
const (
        TabWidth         = 0
        Padding          = 1
        PaddingCharacter = ' '
        Flags            = tabwriter.AlignRight
)
&nbsp;
func main() {
        for minWidth := 0; minWidth &lt; 10; minWidth++ {
                fmt.Printf("Min width = %d\n", minWidth)
                w := tabwriter.NewWriter(os.Stdout, minWidth, TabWidth, Padding, PaddingCharacter, Flags)
                fmt.Fprintln(w, "1\t1\t1")
                fmt.Fprintln(w, "22\t22\t22")
                fmt.Fprintln(w, "333\t333\t333")
                fmt.Fprintln(w, "4444\t4444\t4444")
                w.Flush()
                fmt.Println()
        }
}
</pre>

<pre>
Min width = 0
    1    11
   22   2222
  333  333333
 4444 44444444
&nbsp;
Min width = 1
    1    11
   22   2222
  333  333333
 4444 44444444
&nbsp;
Min width = 2
    1    11
   22   2222
  333  333333
 4444 44444444
&nbsp;
Min width = 3
    1    11
   22   2222
  333  333333
 4444 44444444
&nbsp;
Min width = 4
    1    11
   22   2222
  333  333333
 4444 44444444
&nbsp;
Min width = 5
    1    11
   22   2222
  333  333333
 4444 44444444
&nbsp;
Min width = 6
     1     11
    22    2222
   333   333333
  4444  44444444
&nbsp;
Min width = 7
      1      11
     22     2222
    333    333333
   4444   44444444
&nbsp;
Min width = 8
       1       11
      22      2222
     333     333333
    4444    44444444
&nbsp;
Min width = 9
        1        11
       22       2222
      333      333333
     4444     44444444
</pre>

<pre>
package main
&nbsp;
import (
        "fmt"
        "os"
        "text/tabwriter"
)
&nbsp;
const (
        TabWidth         = 0
        Padding          = 1
        PaddingCharacter = ' '
        Flags            = tabwriter.AlignRight | tabwriter.Debug
)
&nbsp;
func main() {
        for minWidth := 0; minWidth &lt; 10; minWidth++ {
                fmt.Printf("Min width = %d\n", minWidth)
                w := tabwriter.NewWriter(os.Stdout, minWidth, TabWidth, Padding, PaddingCharacter, Flags)
                fmt.Fprintln(w, "1\t1\t1")
                fmt.Fprintln(w, "22\t22\t22")
                fmt.Fprintln(w, "333\t333\t333")
                fmt.Fprintln(w, "4444\t4444\t4444")
                w.Flush()
                fmt.Println()
        }
}
</pre>

<pre>
Min width = 0
    1|    1|1
   22|   22|22
  333|  333|333
 4444| 4444|4444
&nbsp;
Min width = 1
    1|    1|1
   22|   22|22
  333|  333|333
 4444| 4444|4444
&nbsp;
Min width = 2
    1|    1|1
   22|   22|22
  333|  333|333
 4444| 4444|4444
&nbsp;
Min width = 3
    1|    1|1
   22|   22|22
  333|  333|333
 4444| 4444|4444
&nbsp;
Min width = 4
    1|    1|1
   22|   22|22
  333|  333|333
 4444| 4444|4444
&nbsp;
Min width = 5
    1|    1|1
   22|   22|22
  333|  333|333
 4444| 4444|4444
&nbsp;
Min width = 6
     1|     1|1
    22|    22|22
   333|   333|333
  4444|  4444|4444
&nbsp;
Min width = 7
      1|      1|1
     22|     22|22
    333|    333|333
   4444|   4444|4444
&nbsp;
Min width = 8
       1|       1|1
      22|      22|22
     333|     333|333
    4444|    4444|4444
&nbsp;
Min width = 9
        1|        1|1
       22|       22|22
      333|      333|333
     4444|     4444|4444
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
package main
&nbsp;
import (
        "fmt"
        "os"
        "text/tabwriter"
)
&nbsp;
const (
        TabWidth         = 0
        Padding          = 1
        PaddingCharacter = ' '
        Flags            = tabwriter.AlignRight
)
&nbsp;
func main() {
        for minWidth := 0; minWidth &lt; 10; minWidth++ {
                fmt.Printf("Min width = %d\n", minWidth)
                w := tabwriter.NewWriter(os.Stdout, minWidth, TabWidth, Padding, PaddingCharacter, Flags)
                fmt.Fprintln(w, "1\t1\t1\t")
                fmt.Fprintln(w, "22\t22\t22\t")
                fmt.Fprintln(w, "333\t333\t333\t")
                fmt.Fprintln(w, "4444\t4444\t4444\t")
                w.Flush()
                fmt.Println()
        }
}
</pre>

<pre>
Min width = 0
    1    1    1
   22   22   22
  333  333  333
 4444 4444 4444
&nbsp;
Min width = 1
    1    1    1
   22   22   22
  333  333  333
 4444 4444 4444
&nbsp;
Min width = 2
    1    1    1
   22   22   22
  333  333  333
 4444 4444 4444
&nbsp;
Min width = 3
    1    1    1
   22   22   22
  333  333  333
 4444 4444 4444
&nbsp;
Min width = 4
    1    1    1
   22   22   22
  333  333  333
 4444 4444 4444
&nbsp;
Min width = 5
    1    1    1
   22   22   22
  333  333  333
 4444 4444 4444
&nbsp;
Min width = 6
     1     1     1
    22    22    22
   333   333   333
  4444  4444  4444
&nbsp;
Min width = 7
      1      1      1
     22     22     22
    333    333    333
   4444   4444   4444
&nbsp;
Min width = 8
       1       1       1
      22      22      22
     333     333     333
    4444    4444    4444
&nbsp;
Min width = 9
        1        1        1
       22       22       22
      333      333      333
     4444     4444     4444
</pre>

<pre>
package main
&nbsp;
import (
        "fmt"
        "os"
        "text/tabwriter"
)
&nbsp;
const (
        TabWidth         = 0
        Padding          = 1
        PaddingCharacter = ' '
        Flags            = tabwriter.AlignRight | tabwriter.Debug
)
&nbsp;
func main() {
        for minWidth := 0; minWidth &lt; 10; minWidth++ {
                fmt.Printf("Min width = %d\n", minWidth)
                w := tabwriter.NewWriter(os.Stdout, minWidth, TabWidth, Padding, PaddingCharacter, Flags)
                fmt.Fprintln(w, "1\t1\t1\t")
                fmt.Fprintln(w, "22\t22\t22\t")
                fmt.Fprintln(w, "333\t333\t333\t")
                fmt.Fprintln(w, "4444\t4444\t4444\t")
                w.Flush()
                fmt.Println()
        }
}
</pre>

<pre>
Min width = 0
    1|    1|    1|
   22|   22|   22|
  333|  333|  333|
 4444| 4444| 4444|
&nbsp;
Min width = 1
    1|    1|    1|
   22|   22|   22|
  333|  333|  333|
 4444| 4444| 4444|
&nbsp;
Min width = 2
    1|    1|    1|
   22|   22|   22|
  333|  333|  333|
 4444| 4444| 4444|
&nbsp;
Min width = 3
    1|    1|    1|
   22|   22|   22|
  333|  333|  333|
 4444| 4444| 4444|
&nbsp;
Min width = 4
    1|    1|    1|
   22|   22|   22|
  333|  333|  333|
 4444| 4444| 4444|
&nbsp;
Min width = 5
    1|    1|    1|
   22|   22|   22|
  333|  333|  333|
 4444| 4444| 4444|
&nbsp;
Min width = 6
     1|     1|     1|
    22|    22|    22|
   333|   333|   333|
  4444|  4444|  4444|
&nbsp;
Min width = 7
      1|      1|      1|
     22|     22|     22|
    333|    333|    333|
   4444|   4444|   4444|
&nbsp;
Min width = 8
       1|       1|       1|
      22|      22|      22|
     333|     333|     333|
    4444|    4444|    4444|
&nbsp;
Min width = 9
        1|        1|        1|
       22|       22|       22|
      333|      333|      333|
     4444|     4444|     4444|
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
package main
&nbsp;
import (
        "fmt"
        "os"
        "text/tabwriter"
)
&nbsp;
const (
        MinWidth         = 5
        TabWidth         = 0
        Padding          = 1
        PaddingCharacter = ' '
        Flags            = tabwriter.AlignRight | tabwriter.Debug
)
&nbsp;
// Factorial computes factorial for given n that might be positive integer
func Factorial(n int64) int64 {
        switch {
        case n &lt; 0:
                return 1
        case n == 0:
                return 1
        default:
                return n * Factorial(n-1)
        }
}
&nbsp;
func main() {
        w := tabwriter.NewWriter(os.Stdout, MinWidth, TabWidth, Padding, PaddingCharacter, Flags)
        fmt.Fprintln(w, "n\tn!\t")
&nbsp;
        for n := 0; n &lt;= 20; n++ {
                fmt.Fprintf(w, "%d\t%d\t\n", n, Factorial(int64(n)))
        }
&nbsp;
        w.Flush()
}
</pre>

<pre>
    n|                  n!|
    0|                   1|
    1|                   1|
    2|                   2|
    3|                   6|
    4|                  24|
    5|                 120|
    6|                 720|
    7|                5040|
    8|               40320|
    9|              362880|
   10|             3628800|
   11|            39916800|
   12|           479001600|
   13|          6227020800|
   14|         87178291200|
   15|       1307674368000|
   16|      20922789888000|
   17|     355687428096000|
   18|    6402373705728000|
   19|  121645100408832000|
   20| 2432902008176640000|
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
package main
&nbsp;
import (
        "fmt"
        "os"
        "text/tabwriter"
)
&nbsp;
const (
        MinWidth         = 5
        TabWidth         = 0
        Padding          = 1
        PaddingCharacter = ' '
        Flags            = tabwriter.AlignRight | tabwriter.Debug
)
&nbsp;
// Factorial computes factorial for given n that might be positive integer
func Factorial(n int64) int64 {
        switch {
        case n &lt; 0:
                return 1
        case n == 0:
                return 1
        default:
                return n * Factorial(n-1)
        }
}
&nbsp;
func main() {
        w := tabwriter.NewWriter(os.Stdout, MinWidth, TabWidth, Padding, PaddingCharacter, Flags)
        fmt.Fprintln(w, "n\tn!\t")
&nbsp;
        for n := 0; n &lt;= 20; n++ {
                fmt.Fprintf(w, "%d\t", n)
                result := Factorial(int64(n))
                fmt.Fprintf(w, "%d\t", result)
                fmt.Fprintln(w)
        }
&nbsp;
        w.Flush()
}
</pre>

<pre>
    n|                  n!|
    0|                   1|
    1|                   1|
    2|                   2|
    3|                   6|
    4|                  24|
    5|                 120|
    6|                 720|
    7|                5040|
    8|               40320|
    9|              362880|
   10|             3628800|
   11|            39916800|
   12|           479001600|
   13|          6227020800|
   14|         87178291200|
   15|       1307674368000|
   16|      20922789888000|
   17|     355687428096000|
   18|    6402373705728000|
   19|  121645100408832000|
   20| 2432902008176640000|
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>


<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
package main
&nbsp;
import (
        "os"

        "github.com/olekukonko/tablewriter"
)
&nbsp;
func main() {
        data := [][]string{
                []string{"A", "The Good", "500"},
                []string{"B", "The Very very Bad Man", "288"},
                []string{"C", "The Ugly", "120"},
                []string{"D", "The Gopher", "800"},
        }
&nbsp;
        table := tablewriter.NewWriter(os.Stdout)
        table.SetHeader([]string{"Name", "Sign", "Rating"})
&nbsp;
        for _, v := range data {
                table.Append(v)
        }
        table.Render()
}
</pre>

<pre>
+------+-----------------------+--------+
| NAME |         SIGN          | RATING |
+------+-----------------------+--------+
| A    | The Good              |    500 |
| B    | The Very very Bad Man |    288 |
| C    | The Ugly              |    120 |
| D    | The Gopher            |    800 |
+------+-----------------------+--------+
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
package main

import (
        "os"

        "github.com/olekukonko/tablewriter"
)

func main() {
        data := [][]string{
                []string{"A", "The Good", "500"},
                []string{"B", "The Very very Bad Man", "288"},
                []string{"C", "The Ugly", "120"},
                []string{"D", "The Gopher", "800"},
        }

        table := tablewriter.NewWriter(os.Stdout)
        table.SetHeader([]string{"Name", "Sign", "Rating"})
        table.SetBorder(false)

        for _, v := range data {
                table.Append(v)
        }
        table.Render()
}
</pre>

<pre>
  NAME |         SIGN          | RATING  
-------+-----------------------+---------
  A    | The Good              |    500  
  B    | The Very very Bad Man |    288  
  C    | The Ugly              |    120  
  D    | The Gopher            |    800  
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
package main

import (
        "os"

        "github.com/olekukonko/tablewriter"
)

func main() {
        data := [][]string{
                []string{"A", "The Good", "500"},
                []string{"B", "The Very very Bad Man", "288"},
                []string{"C", "The Ugly", "120"},
                []string{"D", "The Gopher", "800"},
        }

        table := tablewriter.NewWriter(os.Stdout)
        table.SetHeader([]string{"Name", "Sign", "Rating"})
        table.SetFooter([]string{"", "Sum", "1708"})

        for _, v := range data {
                table.Append(v)
        }
        table.Render()
}
</pre>

<pre>
+------+-----------------------+--------+
| NAME |         SIGN          | RATING |
+------+-----------------------+--------+
| A    | The Good              |    500 |
| B    | The Very very Bad Man |    288 |
| C    | The Ugly              |    120 |
| D    | The Gopher            |    800 |
+------+-----------------------+--------+
|                 SUM          |  1708  |
+------+-----------------------+--------+
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01-tabwriter-basic-usage.go                   </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/01-tabwriter-basic-usage.go">https://github.com/tisnik/go-root/blob/master/article_70/01-tabwriter-basic-usage.go</a></td></tr>
<tr><td> 2</td><td>02-tabwriter-different-column-widths.go       </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/02-tabwriter-different-column-widths.go">https://github.com/tisnik/go-root/blob/master/article_70/02-tabwriter-different-column-widths.go</a></td></tr>
<tr><td> 3</td><td>03-tabwriter-min-width.go                     </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/03-tabwriter-min-width.go">https://github.com/tisnik/go-root/blob/master/article_70/03-tabwriter-min-width.go</a></td></tr>
<tr><td> 4</td><td>04-tabwriter-padding.go                       </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/04-tabwriter-padding.go">https://github.com/tisnik/go-root/blob/master/article_70/04-tabwriter-padding.go</a></td></tr>
<tr><td> 5</td><td>05-tabwriter-padding-character.go             </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/05-tabwriter-padding-character.go">https://github.com/tisnik/go-root/blob/master/article_70/05-tabwriter-padding-character.go</a></td></tr>
<tr><td> 6</td><td>06-tabwriter-align-right.go                   </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/06-tabwriter-align-right.go">https://github.com/tisnik/go-root/blob/master/article_70/06-tabwriter-align-right.go</a></td></tr>
<tr><td> 7</td><td>07-tabwriter-align-right-debug.go             </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/07-tabwriter-align-right-debug.go">https://github.com/tisnik/go-root/blob/master/article_70/07-tabwriter-align-right-debug.go</a></td></tr>
<tr><td> 8</td><td>08-tabwriter-align-right-trailing-tab.go      </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/08-tabwriter-align-right-trailing-tab.go">https://github.com/tisnik/go-root/blob/master/article_70/08-tabwriter-align-right-trailing-tab.go</a></td></tr>
<tr><td> 9</td><td>09-tabwriter-align-right-trailing-tab-debug.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/09-tabwriter-align-right-trailing-tab-debug.go">https://github.com/tisnik/go-root/blob/master/article_70/09-tabwriter-align-right-trailing-tab-debug.go</a></td></tr>
<tr><td>10</td><td>10-tabwriter-factorial.go                     </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/10-tabwriter-factorial.go">https://github.com/tisnik/go-root/blob/master/article_70/10-tabwriter-factorial.go</a></td></tr>
<tr><td>11</td><td>11-tabwriter-factorial-multiprint.go          </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/11-tabwriter-factorial-multiprint.go">https://github.com/tisnik/go-root/blob/master/article_70/11-tabwriter-factorial-multiprint.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td>12-tablewriter-basic-usage.go                 </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/12-tablewriter-basic-usage.go">https://github.com/tisnik/go-root/blob/master/article_70/12-tablewriter-basic-usage.go</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/">https://github.com/tisnik/go-root/blob/master/article_70/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/">https://github.com/tisnik/go-root/blob/master/article_70/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/">https://github.com/tisnik/go-root/blob/master/article_70/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_70/">https://github.com/tisnik/go-root/blob/master/article_70/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Standardní balíček text/tabwriter<br />
<a href="https://golang.org/pkg/text/tabwriter/">https://golang.org/pkg/text/tabwriter/</a>
</li>

<li>Elastic tabstops: A better way to indent and align code<br />
<a href="https://nickgravgaard.com/elastic-tabstops/">https://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>ASCII Table Writer<br />
<a href="https://github.com/olekukonko/tablewriter">https://github.com/olekukonko/tablewriter</a>
</li>

<li>TablePrinter<br />
<a href="https://github.com/lensesio/tableprinter">https://github.com/lensesio/tableprinter</a>
</li>

<li>go-pretty<br />
<a href="https://github.com/jedib0t/go-pretty">https://github.com/jedib0t/go-pretty</a>
</li>

<li>What are the drawbacks of elastic tabstops?<br />
<a href="https://softwareengineering.stackexchange.com/questions/137290/what-are-the-drawbacks-of-elastic-tabstops">https://softwareengineering.stackexchange.com/questions/137290/what-are-the-drawbacks-of-elastic-tabstops</a>
</li>

<li>Elastic tabstop editors and plugins<br />
<a href="https://stackoverflow.com/questions/28652/elastic-tabstop-editors-and-plugins">https://stackoverflow.com/questions/28652/elastic-tabstop-editors-and-plugins</a>
</li>

<li>Příkaz gofmt<br />
<a href="https://golang.org/cmd/gofmt/">https://golang.org/cmd/gofmt/</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

