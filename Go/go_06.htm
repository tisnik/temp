<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. Výrazy a operátory v&nbsp;programovacím jazyce Go</a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p>V&nbsp;pořadí již šestý článek o programovacím jazyku Go je rozdělen do tří částí. V&nbsp;úvodní části se seznámíme s&nbsp;příkazem <strong>goto</strong> a zejména se situacemi, v&nbsp;nichž se tento příkaz <i>nemá</i> používat, protože Go programátorům nabízí lepší výrazové prostředky. Uvidíme také, že jeho použití v&nbsp;reálných zdrojových kódech je ve skutečnosti <a href="#k05">dosti nízké</a>. <a href="#k06">Ve druhé části článku</a> se budeme věnovat důležité problematice a tou je řešení potenciálních chybových stavů v&nbsp;programech. V&nbsp;programovacím jazyce Go se chyby musí testovat explicitně, ovšem pro případné uvolnění prostředků a zotavení se používá zvláštní konstrukce nazvaná <strong>defer</strong> (nalezneme ji například i v&nbsp;jazyce Swift atd.) společně s&nbsp;funkcemi <strong>panic()</strong> a <strong>recover()</strong>. <a href="#k15">Závěrečná část článku</a> je věnována problematice použití operátorů v&nbsp;programovacím jazyce Go.</p>

<p>Podívejme se nejdříve na příkaz <strong>goto</strong>. S&nbsp;tímto příkazem se můžeme velmi často setkat v&nbsp;těch programovacích jazycích, které <strong>goto</strong> využívají namísto skutečných strukturovaných příkazů. Mezi tyto jazyky patří především starší dialekty BASICu; viz též články, v&nbsp;nichž jsme se těmito prehistorickými jazyky zabývali [<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">1</a>] [<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/">2</a>] [<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/">3</a>] [<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-dokonceni/">4</a>]. V&nbsp;některých jazycích, které strukturované konstrukce obsahují, se <strong>goto</strong> používá méně často, například při výskoku z&nbsp;vnořených smyček, při obsluze chybových stavů, při implementaci programových smyček s&nbsp;testem uprostřed či při implementaci konečného automatu.</p>

<p><div class="rs-tip-major">Poznámka: příkaz <strong>goto</strong> je možné doimplementovat například i do Pythonu, pro nějž dokonce vznikla i podpůrná knihovna <a href="https://github.com/snoack/python-goto/">https://github.com/snoack/python-goto/</a>. Příkaz <strong>goto</strong> se <a href="http://lua-users.org/wiki/GotoStatement">objevuje i v&nbsp;jazyku Lua</a>.</div></p>

<p>Příkaz <strong>goto</strong> se ve své nejjednodušší (a nejzbytečnější variantě) může napsat následujícím způsobem:</p>

<pre>
package main

import "fmt"

func main() {
        i := 10
Next_i:
        fmt.Printf("%2d\n", i)
        i--
        if i &gt;= 0 {
                goto Next_i
        }
}
</pre>

<p>V&nbsp;tomto příkladu je ukázána realizace počítané programové smyčky stylem, jaký možná pamatujete z&nbsp;osmibitových BASICů:</p>

<pre>
10
 9
 8
 7
 6
 5
 4
 3
 2
 1
 0
</pre>

<p>Povšimněte si, že se v&nbsp;Go používají pojmenovaná návěští (<i>label</i>), na rozdíl od již zmíněných starších BASICů či <a href="http://www.tutorialspoint.com/pascal/pascal_goto_statement.htm">Pascalu</a>, kde byla návěští jen celočíselná (což ještě více znepříjemňuje praktické použití <strong>goto</strong>).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Další možnosti použití příkazu <strong>goto</strong>: výskok z&nbsp;vnořených smyček a výskok ze struktury <strong>switch</strong></h2>

<p>V&nbsp;jazyku Go je možné příkaz <strong>goto</strong> použít pro výskok z&nbsp;vnořených smyček popř.&nbsp;pro výskok z&nbsp;konstrukce <strong>switch</strong>. S&nbsp;prvním zmíněným použitím se můžeme setkat, i když méně často, než je tomu v&nbsp;C, protože Go podporuje (<a href="">jak již víme</a>) příkaz <strong>break návěští</strong>:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        for i := 1; i &lt;= 10; i++ {
                for j := 1; j &lt;= 10; j++ {
                        fmt.Printf("%3d ", i*j)
                        if i*j == 42 {
                                fmt.Println("\nodpověď nalezena!\n")
                                goto Exit
                        }
                }
                fmt.Println()
        }
Exit:
}
</pre>

<p>Výsledek by měl vypadat takto:</p>

<pre>
  1   2   3   4   5   6   7   8   9  10 
  2   4   6   8  10  12  14  16  18  20 
  3   6   9  12  15  18  21  24  27  30 
  4   8  12  16  20  24  28  32  36  40 
  5  10  15  20  25  30  35  40  45  50 
  6  12  18  24  30  36  42 
odpověď nalezena!
</pre>

<p>Výskok z&nbsp;konstrukce <strong>switch</strong> lze příkazem <strong>goto</strong> realizovat následujícím způsobem:</p>

<pre>
package main
&nbsp;
func classify(x int) string {
        switch x {
        case 0:
                return "nula"
        case 2, 4, 6, 8:
                goto SudeCislo
        case 1, 3, 5, 7, 9:
                goto LicheCislo
        default:
                goto JineCislo
        }
JineCislo:
        return "?"
SudeCislo:
        return "sudé číslo"
LicheCislo:
        return "liché číslo"
}
&nbsp;
func main() {
        for x := 0; x &lt;= 10; x++ {
                println(x, classify(x))
        }
}
</pre>

<p>Po spuštění tohoto příkladu by se na terminálu měly objevit následující řádky:</p>

<pre>
0 nula
1 liché číslo
2 sudé číslo
3 liché číslo
4 sudé číslo
5 liché číslo
6 sudé číslo
7 liché číslo
8 sudé číslo
9 liché číslo
10 ?
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Nekorektní použití příkazu <strong>goto</strong></h2>

<p>V&nbsp;této kapitole si ukážeme příklady, v&nbsp;nichž se naopak příkaz <strong>goto</strong> nesmí použít, protože by případný skok přeskočil některou důležitou část programu.</p>

<p>Příkazem <strong>goto</strong> se nesmí přeskočit deklarace proměnné, kterou následně použijeme. Tento příklad tedy nepůjde přeložit:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        goto Next
        i := 10
Next:
        fmt.Printf("%2d\n", i)
}
</pre>

<pre>
./04_goto_bad_usage_A.go:13:7: goto Next jumps over declaration of i at ./04_goto_bad_usage_A.go:14:4
</pre>

<p>Taktéž není možné skočit do smyčky popř.&nbsp;do větve strukturovaných příkazů <strong>if</strong> a <strong>switch</strong>. Z&nbsp;tohoto důvodu nebude možné přeložit ani další program:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        i := 10
        goto IntoIf
        if i &gt; 0 {
        IntoIf:
                fmt.Printf("%2d\n", i)
        }
}
</pre>

<pre>
./05_goto_bad_usage_B.go:14:7: goto IntoIf jumps into block starting at ./05_goto_bad_usage_B.go:15:11
</pre>

<p>A ani tento program, který se snaží o skok do programové smyčky. Namísto bezproblémového překladu se totiž objeví stejné chybové hlášení, jako v&nbsp;příkladu předchozím:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        goto IntoLoop
&nbsp;
        for i := 0; i &lt; 10; i++ {
        IntoLoop:
                fmt.Printf("%2d\n", i)
        }
}
</pre>

<pre>
./06_goto_bad_usage_C.go:13:7: goto IntoLoop jumps into block starting at ./06_goto_bad_usage_C.go:15:26
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Jak často se <strong>goto</strong> používá v&nbsp;reálných programech</h2>

<p>V&nbsp;mnoha studijních materiálech se můžeme dočíst, že použití příkazu <strong>goto</strong> je známkou špatného programátorského stylu. Tento názor, který je reprezentován známým článkem <a href="http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html">Go To Statement Considered Harmful</a> vznikl v&nbsp;dobách, kdy mnohé programovací jazyky (a nejedná se jen o zmíněný BASIC) neobsahovaly všechny konstrukce nutné pro strukturované programování. Na druhou stranu se ovšem nezmiňují ty případy, kdy má použití <strong>goto</strong> smysl, tj.&nbsp;zejména řešení algoritmů typu implementace konečného automatu, řešení některých podmínek diskutovaných například <a href="https://koblents.com/Ches/Links/Month-Mar-2013/20-Using-Goto-in-Linux-Kernel-Code/">v&nbsp;kódu kernelu</a> apod. Goto má dnes význam pouze tam, kde již nedostačují další konstrukce jazyka &ndash; což je ovšem v&nbsp;Go relativně malé množství případů, určitě menší než například v&nbsp;jazyku C (vzhledem k&nbsp;chybějící konstrukci pro výskok z&nbsp;více smyček a taktéž kvůli chybějícímu <strong>defer</strong>).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Výsledky analýz zdrojových kódů</h2>

<table>
<tr><th>Počet použití</th><th>Klíčové slovo</th></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
</table>

<table>
<tr><th>Počet použití</th><th>Klíčové slovo</th></tr>
<tr><td></td><td></td></tr>
</table>



<p><a name="k06"></a></p>
<h2 id="k06">6. Příkaz <strong>defer</strong></h2>

<pre>
package main

import "fmt"

func on_finish() {
        fmt.Println("Finished")
}

func main() {
        defer on_finish()

        for i := 10; i &gt;= 0; i-- {
                fmt.Printf("%2d\n", i)
        }
        fmt.Println("Finishing main() function")
}
</pre>

<pre>
10
 9
 8
 7
 6
 5
 4
 3
 2
 1
 0
Finishing main() function
Finished
</pre>

<pre>
package main

import "fmt"

func main() {
        defer (func() { fmt.Println("Finished") })()

        for i := 10; i &gt;= 0; i-- {
                fmt.Printf("%2d\n", i)
        }
        fmt.Println("Finishing main() function")
}
</pre>

<pre>
10
 9
 8
 7
 6
 5
 4
 3
 2
 1
 0
Finishing main() function
Finished
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Volání funkce s&nbsp;parametry v&nbsp;bloku <strong>defer</strong></h2>

<pre>
package main

import "fmt"

func on_finish(message string) {
        fmt.Println(message)
}

func main() {
        defer on_finish("Finished")

        for i := 10; i &gt;= 0; i-- {
                fmt.Printf("%2d\n", i)
        }
        fmt.Println("Finishing main() function")
}
</pre>

<pre>
10
 9
 8
 7
 6
 5
 4
 3
 2
 1
 0
Finishing main() function
Finished
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Pořadí volání funkcí zaregistrovaných s&nbsp;využitím příkazu <strong>defer</strong></h2>

<pre>
package main

import "fmt"

func on_finish(i int) {
        fmt.Printf("Defer #%2d\n", i)
}

func main() {
        for i := 0; i &lt;= 10; i++ {
                defer on_finish(i)
        }
        fmt.Println("Finishing main() function")
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vyhodnocení parametrů funkcí zaregistrovaných příkazem <strong>defer</strong></h2>

<pre>
package main

import "fmt"

func function(i int) {
        fmt.Printf("Defer %2d\n", i)
}

func main() {
        x := 0

        fmt.Printf("Current x value = %2d\n", x)
        defer function(x)

        x++

        fmt.Printf("Current x value = %2d\n", x)
        defer function(x)

        x++
        fmt.Printf("Current x value = %2d\n", x)
}
</pre>

<pre>
package main

import "fmt"

func function(a []int) {
        fmt.Printf("Defer %v\n", a)
}

func main() {
        var x = []int{1, 2, 3}

        fmt.Printf("Current x value = %v\n", x)
        defer function(x)

        x[0] = 0

        fmt.Printf("Current x value = %v\n", x)
        defer function(x)

        x[1] = 0

        fmt.Printf("Current x value = %v\n", x)
        defer function(x)

        x[2] = 0

        fmt.Printf("Current x value = %v\n", x)
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Defer a příkaz <strong>return</strong></h2>

<pre>
package main

import "fmt"

func function(x int) {
        fmt.Printf("Defer %d\n", x)
}

func classify(x int) string {
        defer function(x)
        switch x {
        case 0:
                return "nula"
        case 2, 4, 6, 8:
                return "sudé číslo"
        case 1, 3, 5, 7, 9:
                return "liché číslo"
        default:
                return "?"
        }
}

func main() {
        for x := 0; x &lt;= 10; x++ {
                println(x, classify(x))
        }
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Praktické použití příkazu <strong>defer</strong></h2>

<pre>
package main

import (
        "fmt"
        "io"
        "os"
)

func closeFile(file *os.File) {
        fmt.Printf("Closing file '%s'\n", file.Name())
        file.Close()
}

func copyFile(srcName, dstName string) (written int64, err error) {
        src, err := os.Open(srcName)
        if err != nil {
                fmt.Printf("Cannot open file '%s' for reading\n", srcName)
                return
        } else {
                fmt.Printf("File '%s' opened for reading\n", srcName)
        }
        defer closeFile(src)

        dst, err := os.Create(dstName)
        if err != nil {
                fmt.Printf("Cannot create destination file '%s'\n", dstName)
                return
        } else {
                fmt.Printf("File '%s' opened for writing\n", dstName)
        }
        defer closeFile(dst)

        return io.Copy(dst, src)
}

func testCopyFile(srcName, dstName string) {
        copied, err := copyFile(srcName, dstName)
        if err != nil {
                fmt.Printf("copyFile('%s', '%s') failed!!!\n", srcName, dstName)
        } else {
                fmt.Printf("Copied %d bytes\n", copied)
        }
        fmt.Println()
}

func main() {
        testCopyFile("14_defer_practical_usage.go", "new.go")
        testCopyFile("tento_soubor_neexistuje", "new.go")
        testCopyFile("14_defer_practical_usage.go", "")
        testCopyFile("14_defer_practical_usage.go", "/dev/full")
        testCopyFile("/dev/null", "new2.go")
}
</pre>

<pre>
package main

import (
        "fmt"
        "io"
        "os"
)

func copyFile(srcName, dstName string) (written int64, err error) {
        src, err := os.Open(srcName)
        if err != nil {
                return
        }
        defer src.Close()

        dst, err := os.Create(dstName)
        if err != nil {
                return
        }
        defer dst.Close()

        return io.Copy(dst, src)
}

func testCopyFile(srcName, dstName string) {
        copied, err := copyFile(srcName, dstName)
        if err != nil {
                fmt.Printf("copyFile('%s', '%s') failed!!!\n", srcName, dstName)
        } else {
                fmt.Printf("Copied %d bytes\n", copied)
        }
        fmt.Println()
}

func main() {
        testCopyFile("14_defer_practical_usage.go", "new.go")
        testCopyFile("tento_soubor_neexistuje", "new.go")
        testCopyFile("14_defer_practical_usage.go", "")
        testCopyFile("14_defer_practical_usage.go", "/dev/full")
        testCopyFile("/dev/null", "new2.go")
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Ovlivnění návratové hodnoty funkce v&nbsp;bloku <strong>defer</strong></h2>

<pre>
package main

import "fmt"

func funkce1() (i int) {
        i = 1
        return
}

func funkce2() (i int) {
        defer func() { i = 2 }()
        return 1
}

func funkce3() (i int) {
        defer func() { i += 2 }()
        return 1
}

func main() {
        fmt.Printf("Návratová hodnota funkce1: %d\n", funkce1())
        fmt.Printf("Návratová hodnota funkce2: %d\n", funkce2())
        fmt.Printf("Návratová hodnota funkce3: %d\n", funkce3())
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Funkce <strong>panic</strong></h2>

<pre>
package main

import (
        "fmt"
        "io"
        "os"
)

func closeFile(file *os.File) {
        fmt.Printf("Closing file '%s'\n", file.Name())
        file.Close()
}

func copyFile(srcName, dstName string) (written int64, err error) {
        src, err := os.Open(srcName)
        if err != nil {
                panic(err)
        }
        defer closeFile(src)

        dst, err := os.Create(dstName)
        if err != nil {
                panic(err)
        }
        defer closeFile(dst)

        return io.Copy(dst, src)
}

func testCopyFile(srcName, dstName string) {
        copied, err := copyFile(srcName, dstName)
        if err != nil {
                fmt.Printf("copyFile('%s', '%s') failed!!!\n", srcName, dstName)
        } else {
                fmt.Printf("Copied %d bytes\n", copied)
        }
        fmt.Println()
}

func main() {
        testCopyFile("14_defer_practical_usage.go", "new.go")
        // testCopyFile("tento_soubor_neexistuje", "new.go")
        testCopyFile("new.go", "")
        testCopyFile("14_defer_practical_usage.go", "/dev/full")
        testCopyFile("/dev/null", "new2.go")
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Funkce <strong>recover</strong></h2>

<pre>
package main

import (
        "fmt"
        "io"
        "os"
)

func closeFile(file *os.File) {
        fmt.Printf("Closing file '%s'\n", file.Name())
        file.Close()
}

func copyFile(srcName, dstName string) (written int64, err error) {
        defer func() {
                if rec := recover(); rec != nil {
                        fmt.Println("Recovered in copyFile", rec)
                }
        }()
        src, err := os.Open(srcName)
        if err != nil {
                panic(err)
        }
        defer closeFile(src)

        dst, err := os.Create(dstName)
        if err != nil {
                panic(err)
        }
        defer closeFile(dst)

        return io.Copy(dst, src)
}

func testCopyFile(srcName, dstName string) {
        copied, err := copyFile(srcName, dstName)
        if err != nil {
                fmt.Printf("copyFile('%s', '%s') failed!!!\n", srcName, dstName)
        } else {
                fmt.Printf("Copied %d bytes\n", copied)
        }
        fmt.Println()
}

func main() {
        testCopyFile("14_defer_practical_usage.go", "new.go")
        // testCopyFile("tento_soubor_neexistuje", "new.go")
        testCopyFile("new.go", "")
        testCopyFile("14_defer_practical_usage.go", "/dev/full")
        testCopyFile("/dev/null", "new2.go")
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Výrazy a operátory v&nbsp;programovacím jazyce Go</h2>

<p>Ve třetí části článku se budeme zabývat problematikou operátorů. Operátory určené pro manipulaci s&nbsp;číselnými, pravdivostními, řetězcovými aj.&nbsp;hodnotami tvoří podstatnou část syntaxe v&nbsp;prakticky všech mainstreamových jazycích (výjimkou jsou lispovské jazyky či Forth, které ovšem nepatří mezi mainstream). V&nbsp;programovacím jazyku Go nalezneme celkem základních 26 operátorů, k&nbsp;nimž navíc ještě musíme připočíst operátory spojené s&nbsp;přiřazením:</p>


<p>Zajímavá je tabulka s&nbsp;prioritami operátorů. Ta je totiž poměrně jednoduchá, zejména v&nbsp;porovnání s&nbsp;tabulkami, které mnozí čtenáři pravděpodobně znají z&nbsp;jazyků C, C++ či Javy. Nejvyšší prioritu mají unární operátory (s&nbsp;jediným operandem) a následně existuje pouze pět priorit, které si můžete zapamatovat s&nbsp;využitím <a href="https://yourbasic.org/golang/operator-priority/">mnemotechnické pomůcky MACAO</a>:</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Unární operátory</h2>

<p></p>

<pre>
package main

import "fmt"

func message(channel chan int) {
        code, status := <-channel

        fmt.Printf("received code: %d and status: %t\n", code, status)
}

func main() {
        // unární operátory + a -
        i := 42
        fmt.Println(+i)
        fmt.Println(-i)

        // unární operátor ^
        i = 0
        fmt.Println(^i)
        i++
        fmt.Println(^i)

        // unární operátor !
        b := false
        fmt.Println(!b)

        // unární operátory & a *
        fmt.Println(&i)

        p_i := &i
        fmt.Println(*p_i)

        // unární operátor <-
        channel := make(chan int)
        go message(channel)
        channel <- 1
}
</pre>


<p><a name="k17"></a></p>
<h2 id="k17">17. Relační operátory</h2>

<pre>
package main

import "fmt"

func main() {
        x := 42
        y := 0

        fmt.Println(x < y)
        fmt.Println(x &lt;= y)
        fmt.Println(x == y)
        fmt.Println(x &gt;= y)
        fmt.Println(x > y)
        fmt.Println(x != y)

        fmt.Println()

        fx := 1e10
        fy := -2.3e56

        fmt.Println(fx < fy)
        fmt.Println(fx &lt;= fy)
        fmt.Println(fx == fy)
        fmt.Println(fx &gt;= fy)
        fmt.Println(fx > fy)
        fmt.Println(fx != fy)

        fmt.Println()

        bx := true
        by := false

        fmt.Println(bx == by)
        fmt.Println(bx != by)

        fmt.Println()
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Dělení, zbytek po dělení a bitové posuny</h2>

<pre>
package main

import "fmt"

func compute_div_mod(x, y int) {
        fmt.Printf("%3d / %2d = %3d   %3d %% %2d = %3d\n", x, y, x/y, x, y, x%y)
}

func main() {
        compute_div_mod(10, 3)
        compute_div_mod(-10, 3)
        compute_div_mod(10, -3)
        compute_div_mod(-10, -3)

        fmt.Println()

        for i := 1; i &lt;= 10; i++ {
                compute_div_mod(100, i)
        }
}
</pre>

<pre>
package main

import "fmt"

func compute_div_mod(x, y int) {
        fmt.Printf("%3d / %2d = %3d   %3d %% %2d = %3d\n", x, y, x/y, x, y, x%y)
}

func main() {
        compute_div_mod(10, 0)
}
</pre>

<pre>
package main

import "fmt"

func main() {
        x := 1

        for i := 0; i &lt;= 10; i++ {
                fmt.Printf("%d &lt;&lt; %2d == %4d\n", x, i, x&lt;&lt;i)
        }

        fmt.Println()

        x = 10000000

        for i := 0; i &lt;= 10; i++ {
                fmt.Printf("%d &gt;&gt; %2d == %4d\n", x, i, x&gt;&gt;i)
        }

}
</pre>

<pre>
package main

import "fmt"

func main() {
        x := 1

        for i := uint(0); i &lt;= 10; i++ {
                fmt.Printf("%d &lt;&lt; %2d == %4d\n", x, i, x&lt;&lt;i)
        }

        fmt.Println()

        x = 10000000

        for i := uint(0); i &lt;= 10; i++ {
                fmt.Printf("%d &gt;&gt; %2d == %4d\n", x, i, x&gt;&gt;i)
        }

}
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
doslova několik kilobajtů), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_goto.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/01_goto.go">https://github.com/tisnik/go-fedora/blob/master/article_06/01_goto.go</a></td></tr>
<tr><td> 2</td><td>02_goto_from_inner_loop.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/02_goto_from_inner_loop.go">https://github.com/tisnik/go-fedora/blob/master/article_06/02_goto_from_inner_loop.go</a></td></tr>
<tr><td> 3</td><td>03_goto_from_switch.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/03_goto_from_switch.go">https://github.com/tisnik/go-fedora/blob/master/article_06/03_goto_from_switch.go</a></td></tr>
<tr><td> 4</td><td>04_goto_bad_usage_A.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/04_goto_bad_usage_A.go">https://github.com/tisnik/go-fedora/blob/master/article_06/04_goto_bad_usage_A.go</a></td></tr>
<tr><td> 5</td><td>05_goto_bad_usage_B.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/05_goto_bad_usage_B.go">https://github.com/tisnik/go-fedora/blob/master/article_06/05_goto_bad_usage_B.go</a></td></tr>
<tr><td> 6</td><td>06_goto_bad_usage_C.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/06_goto_bad_usage_C.go">https://github.com/tisnik/go-fedora/blob/master/article_06/06_goto_bad_usage_C.go</a></td></tr>
<tr><td> 7</td><td>07_defer.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/07_defer.go">https://github.com/tisnik/go-fedora/blob/master/article_06/07_defer.go</a></td></tr>
<tr><td> 8</td><td>08_defer_func.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/08_defer_func.go">https://github.com/tisnik/go-fedora/blob/master/article_06/08_defer_func.go</a></td></tr>
<tr><td> 9</td><td>09_defer_with_parameters.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/09_defer_with_parameters.go">https://github.com/tisnik/go-fedora/blob/master/article_06/09_defer_with_parameters.go</a></td></tr>
<tr><td>10</td><td>10_more_defers.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/10_more_defers.go">https://github.com/tisnik/go-fedora/blob/master/article_06/10_more_defers.go</a></td></tr>
<tr><td>11</td><td>11_defer_arguments_evaluation.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/11_defer_arguments_evaluation.go">https://github.com/tisnik/go-fedora/blob/master/article_06/11_defer_arguments_evaluation.go</a></td></tr>
<tr><td>12</td><td>12_defer_arguments_evaluation.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/12_defer_arguments_evaluation.go">https://github.com/tisnik/go-fedora/blob/master/article_06/12_defer_arguments_evaluation.go</a></td></tr>
<tr><td>13</td><td>13_defer_on_all_returns.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/13_defer_on_all_returns.go">https://github.com/tisnik/go-fedora/blob/master/article_06/13_defer_on_all_returns.go</a></td></tr>
<tr><td>14</td><td>14_defer_practical_usage.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/14_defer_practical_usage.go">https://github.com/tisnik/go-fedora/blob/master/article_06/14_defer_practical_usage.go</a></td></tr>
<tr><td>15</td><td>15_defer_practical_usage.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/15_defer_practical_usage.go">https://github.com/tisnik/go-fedora/blob/master/article_06/15_defer_practical_usage.go</a></td></tr>
<tr><td>16</td><td>16_defer_return_values.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/16_defer_return_values.go">https://github.com/tisnik/go-fedora/blob/master/article_06/16_defer_return_values.go</a></td></tr>
<tr><td>17</td><td>17_panic.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/17_panic.go">https://github.com/tisnik/go-fedora/blob/master/article_06/17_panic.go</a></td></tr>
<tr><td>18</td><td>18_panic_recover.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/18_panic_recover.go">https://github.com/tisnik/go-fedora/blob/master/article_06/18_panic_recover.go</a></td></tr>
<tr><td>19</td><td>19_unary_operators.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/19_unary_operators.go">https://github.com/tisnik/go-fedora/blob/master/article_06/19_unary_operators.go</a></td></tr>
<tr><td>20</td><td>20_relational_operators.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/20_relational_operators.go">https://github.com/tisnik/go-fedora/blob/master/article_06/20_relational_operators.go</a></td></tr>
<tr><td>21</td><td>21_div_mod.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/21_div_mod.go">https://github.com/tisnik/go-fedora/blob/master/article_06/21_div_mod.go</a></td></tr>
<tr><td>22</td><td>22_div_by_zero.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/22_div_by_zero.go">https://github.com/tisnik/go-fedora/blob/master/article_06/22_div_by_zero.go</a></td></tr>
<tr><td>23</td><td>23_bit_shift_negative_shift.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/23_bit_shift_negative_shift.go">https://github.com/tisnik/go-fedora/blob/master/article_06/23_bit_shift_negative_shift.go</a></td></tr>
<tr><td>24</td><td>24_bit_shifts.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/24_bit_shifts.go">https://github.com/tisnik/go-fedora/blob/master/article_06/24_bit_shifts.go</a></td></tr>
<tr><td>25</td><td>25_bit_shift_assignment.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/25_bit_shift_assignment.go">https://github.com/tisnik/go-fedora/blob/master/article_06/25_bit_shift_assignment.go</a></td></tr>
<tr><td>26</td><td></td><td>26_bit_operators.go</td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_06/26_bit_operators.go">https://github.com/tisnik/go-fedora/blob/master/article_06/26_bit_operators.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go <br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

