<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Reflexe v programovacím jazyce Go</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
package main

import (
        "fmt"
        "reflect"
)

func test_check_type(x any) {
        value := reflect.ValueOf(x)
        typ := value.Type()
        fmt.Printf("value %v of type %s\n", value, typ)
}

type user struct {
        id   int
        name string
}

func main() {
        x1 := 42
        test_check_type(x1)

        x2 := 3.14
        test_check_type(x2)

        x4 := 1 + 2i
        test_check_type(x4)

        x5 := true
        test_check_type(x5)

        x6 := '?'
        test_check_type(x6)

        x7 := "foobar"
        test_check_type(x7)

        x8 := [...]int{1, 2, 3}
        test_check_type(x8)

        x9 := []int{1, 2, 3}
        test_check_type(x9)

        x10 := make(map[int]string)
        test_check_type(x10)

        x11 := user{}
        test_check_type(x11)

        x12 := func(x int) int { return x + 1 }
        test_check_type(x12)

        //var x13 interface{} = nil
        //test_check_type(x13)
}
</pre>

<pre>
value 42 of type int
value 3.14 of type float64
value (1+2i) of type complex128
value true of type bool
value 63 of type int32
value foobar of type string
value [1 2 3] of type [3]int
value [1 2 3] of type []int
value map[] of type map[int]string
value {0 } of type main.user
value 0x4824c0 of type func(int) int
</pre>

<pre>
panic: reflect: call of reflect.Value.Type on zero Value
&nbsp;
goroutine 1 [running]:
reflect.Value.typeSlow({0x0?, 0x0?, 0x49f48f?})
        /usr/local/go/src/reflect/value.go:2699 +0x113
reflect.Value.Type(...)
        /usr/local/go/src/reflect/value.go:2694
main.test_check_type({0x0?, 0x0?})
        /home/ptisnovs/src/GoCourse/lesson14/check_types_1.go:10 +0xaf
main.main()
        /home/ptisnovs/src/GoCourse/lesson14/check_types_1.go:54 +0x1b9
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
package main

import (
        "fmt"
        "reflect"
)

func into_type(value reflect.Value, typ reflect.Type) {
        switch typ.Name() {
        case "int":
                fallthrough
        case "int32":
                realValue := value.Int()
                fmt.Println("is an integer with value", realValue)
        case "float64":
                realValue := value.Float()
                fmt.Println("is a float64 with value", realValue)
        case "complex128":
                realValue := value.Complex()
                fmt.Println("is a complex128 with value", realValue)
        case "bool":
                realValue := value.Bool()
                fmt.Println("is a boolean with value", realValue)
        case "string":
                realValue := value.String()
                fmt.Println("is a string with value", realValue)
        case "user":
                realValue := value.String()
                fmt.Println("is an user with value", realValue)
        default:
                fmt.Println("is ***unknown***")
        }
}

func test_check_type(x any) {
        value := reflect.ValueOf(x)
        typ := value.Type()
        fmt.Printf("value %v ", value)
        into_type(value, typ)
}

type user struct {
        id   int
        name string
}

func main() {
        x1 := 42
        test_check_type(x1)

        x2 := 3.14
        test_check_type(x2)

        x4 := 1 + 2i
        test_check_type(x4)

        x5 := true
        test_check_type(x5)

        x6 := '?'
        test_check_type(x6)

        x7 := "foobar"
        test_check_type(x7)

        x8 := [...]int{1, 2, 3}
        test_check_type(x8)

        x9 := []int{1, 2, 3}
        test_check_type(x9)

        x10 := make(map[int]string)
        test_check_type(x10)

        x11 := user{}
        test_check_type(x11)

        x12 := func(x int) int { return x + 1 }
        test_check_type(x12)

        //var x13 interface{} = nil
        //test_check_type(x13)
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p></p>

<pre>
const (
        Invalid Kind = iota
        Bool
        Int
        Int8
        Int16
        Int32
        Int64
        Uint
        Uint8
        Uint16
        Uint32
        Uint64
        Uintptr
        Float32
        Float64
        Complex64
        Complex128
        Array
        Chan
        Func
        Interface
        Map
        Pointer
        Slice
        String
        Struct
        UnsafePointer
)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p></p>

<pre>
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;jazyce Go, které jsou určené pro
překlad s&nbsp;využitím standardního překladače jazyka Go, byly uloženy do Git
repositáře, jenž je dostupný na adrese <a
href="https://github.com/RedHatOfficial/GoCourse">https://github.com/RedHatOfficial/GoCourse</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>type_assertion_1.go</td><td>typové aserce (bez použití rozhraní)</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/type_assertion_1.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/type_assertion_1.go</a></td></tr>
<tr><td> 2</td><td>type_assertion_2.go</td><td>typové aserce a rozhraní</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/type_assertion_2.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/type_assertion_2.go</a></td></tr>
<tr><td> 3</td><td>type_assertion_3.go</td><td>typové aserce a rozhraní i konkrétní datové struktury</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/type_assertion_3.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/type_assertion_3.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 4</td><td>shapes_1.go</td><td>základní typová aserce s&nbsp;vynucením konverze bez testu</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/shapes_1.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/shapes_1.go</a></td></tr>
<tr><td> 5</td><td>shapes_2.go</td><td>běhová výjimka při předání hodnoty s&nbsp;odlišným typem</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/shapes_2.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/shapes_2.go</a></td></tr>
<tr><td> 6</td><td>shapes_3.go</td><td>test prováděný přímo v&nbsp;běhové aserci</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/shapes_3.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/shapes_3.go</a></td></tr>
<tr><td> 7</td><td>shapes_4.go</td><td>pokus o typovou aserci s&nbsp;nekompatibilními typy</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/shapes_4.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/shapes_4.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>type_switch_1.go</td><td>rozeskok s&nbsp;typovou konverzí</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/type_switch_1.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/type_switch_1.go</a></td></tr>
<tr><td> 9</td><td>type_switch_2.go</td><td>rozeskok s&nbsp;typovou konverzí</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/type_switch_2.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/type_switch_2.go</a></td></tr>
<tr><td>10</td><td>type_switch_3.go</td><td>rozeskok s&nbsp;typovou konverzí</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/type_switch_3.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/type_switch_3.go</a></td></tr>
<tr><td>11</td><td>type_switch_4.go</td><td>rozeskok s&nbsp;typovou konverzí</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/type_switch_4.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/type_switch_4.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td>value_of.go</td><td>základní způsob použití funkce <strong>reflect.ValueOf</strong></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/value_of.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/value_of.go</a></td></tr>
<tr><td>13</td><td>value_of_type.go</td><td>typ získaný funkcí <strong>reflect.ValueOf</strong></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/value_of_type.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/value_of_type.go</a></td></tr>
<tr><td>14</td><td>value_of_interface.go</td><td>odvození typu hodnoty uložené v&nbsp;proměnné typu prázdné rozhraní</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/value_of_interface.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/value_of_interface.go</a></td></tr>
<tr><td>15</td><td>value_of_empty_interface.go</td><td>typ <strong>nil</strong> a prázdné rozhraní</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/value_of_empty_interface.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/value_of_empty_interface.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>values_of.go</td><td>reflexe pro libovolný primitivní datový typ</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/values_of.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/values_of.go</a></td></tr>
<tr><td>17</td><td>values_of_type.go</td><td>reflexe s&nbsp;výpisem typu libovolné hodnoty</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/values_of_type.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/values_of_type.go</a></td></tr>
<tr><td>18</td><td>values_of_nil.go</td><td>reflexe pro různé hodnoty <strong>nil</strong></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/values_of_nil.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/values_of_nil.go</a></td></tr>
<tr><td>19</td><td>values_of_type_nil.go</td><td>reflexe s&nbsp;výpisem typu pro různé hodnoty <strong>nil</strong></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/values_of_type_nil.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/values_of_type_nil.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>20</td><td>get_type.go</td><td>získání informace o typu z&nbsp;<strong>reflect.ValueOf</strong> pro konkrétní hodnoty</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/get_type.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/get_type.go</a></td></tr>
<tr><td>21</td><td>get_type_interface.go</td><td>získání informace o typu z&nbsp;<strong>reflect.ValueOf</strong> pro rozhraní</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/get_type_interface.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/get_type_interface.go</a></td></tr>
<tr><td>22</td><td>get_type_empty_interface.go</td><td>získání informace o typu z&nbsp;<strong>reflect.ValueOf</strong> pro prázdná rozhraní</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/get_type_empty_interface.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/get_type_empty_interface.go</a></td></tr>
<tr><td>23</td><td>get_types.go</td><td>získání informace o typech</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/get_types.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/get_types.go</a></td></tr>
<tr><td>24</td><td>get_types_nil.go</td><td>získání informace o typu hodnot <strong>nil</strong></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/get_types_nil.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/get_types_nil.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>25</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td>26</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td>27</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td>28</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td>29</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
<tr><td>30</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson14/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>The Laws of Reflection<br />
<a href="https://go.dev/blog/laws-of-reflection">https://go.dev/blog/laws-of-reflection</a>
</li>

<li>Standardní balíček <strong>reflect</strong><br />
<a href="https://pkg.go.dev/reflect">https://pkg.go.dev/reflect</a>
</li>

<li>Reflection in Go: Use cases and tutorial<br />
<a href="https://blog.logrocket.com/reflection-go-use-cases-tutorial/">https://blog.logrocket.com/reflection-go-use-cases-tutorial/</a>
</li>

<li>Reflection in Golang<br />
<a href="https://www.geeksforgeeks.org/reflection-in-golang/">https://www.geeksforgeeks.org/reflection-in-golang/</a>
</li>

<li>Reflexe (programování)<br />
<a href="https://cs.wikipedia.org/wiki/Reflexe_(programov%C3%A1n%C3%AD)">https://cs.wikipedia.org/wiki/Reflexe_(programov%C3%A1n%C3%AD)</a>
</li>

<li>Reflective programming<br />
<a href="https://en.wikipedia.org/wiki/Reflective_programming">https://en.wikipedia.org/wiki/Reflective_programming</a>
</li>

<li>go2js<br />
<a href="https://github.com/tredoe/go2js">https://github.com/tredoe/go2js</a>
</li>

<li>GitHub repositář projektu GopherJS<br />
<a href="https://github.com/gopherjs/gopherjs">https://github.com/gopherjs/gopherjs</a>
</li>

<li>How to use GopherJS to turn Go code into a JavaScript library<br />
<a href="https://medium.com/@kentquirk/how-to-use-gopherjs-to-turn-go-code-into-a-javascript-library-1e947703db7a">https://medium.com/@kentquirk/how-to-use-gopherjs-to-turn-go-code-into-a-javascript-library-1e947703db7a</a>
</li>

<li>Source to source compiler<br />
<a href="https://en.wikipedia.org/wiki/Source-to-source_compiler">https://en.wikipedia.org/wiki/Source-to-source_compiler</a>
</li>

<li>Binary recompiler<br />
<a href="https://en.wikipedia.org/wiki/Binary_recompiler">https://en.wikipedia.org/wiki/Binary_recompiler</a>
</li>

<li>py2many na GitHubu<br />
<a href="https://github.com/py2many/py2many">https://github.com/py2many/py2many</a>
</li>

<li>py2many na PyPi<br />
<a href="https://pypi.org/project/py2many/">https://pypi.org/project/py2many/</a>
</li>

<li>Awesome Transpilers<br />
<a href="https://github.com/milahu/awesome-transpilers">https://github.com/milahu/awesome-transpilers</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>
