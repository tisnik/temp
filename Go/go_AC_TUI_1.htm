<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Textová uživatelská rozhraní naprogramovaná v jazyku Go</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Textová uživatelská rozhraní naprogramovaná v jazyku Go</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Textová uživatelská rozhraní naprogramovaná v&nbsp;jazyku Go</a></p>
<p><a href="#k02">2. Interaktivní příkazový řádek s&nbsp;historií, automatickým doplňováním atd.</a></p>
<p><a href="#k03">3. Balíček <strong>go-prompt</strong> pro aplikace naprogramované v&nbsp;jazyku Go</a></p>
<p><a href="#k04">4. Příklady použití balíčku <strong>go-prompt</strong></a></p>
<p><a href="#k05">*** 5. Knihovny pro ovládání terminálu i pro tvorbu plnohodnotných TUI</a></p>
<p><a href="#k06">*** 6. Vybrané knihovny pro Go</a></p>
<p><a href="#k07">*** 7. Práce s&nbsp;textovým terminálem s&nbsp;využitím knihovny <strong>tcell</strong></a></p>
<p><a href="#k08">*** 8. Koncept událostí (<i>event</i>)</a></p>
<p><a href="#k09">*** 9. Kostra programu, který dokáže vypsat obarvený text na terminál a reagovat na stisk kláves</a></p>
<p><a href="#k10">*** 10. Korektní ukončení programu</a></p>
<p><a href="#k11">*** 11. Vykreslení okna do plochy terminálu, reakce na změnu velikosti terminálu</a></p>
<p><a href="#k12">*** 12. Kreslení na plochu terminálu s&nbsp;využitím myši</a></p>
<p><a href="#k13">*** 13. Podporované styly zpráv vypisovaných na plochu terminálu</a></p>
<p><a href="#k14">*** 14. Standardní barvová paleta terminálů (a její nedodržování)</a></p>
<p><a href="#k15">*** 15. Světlý vs.&nbsp;tmavý text na ploše terminálu</a></p>
<p><a href="#k16">*** 16. Specifikace 24bitové barvy popředí (textů)</a></p>
<p><a href="#k17">*** 17. Specifikace 24bitové barvy pozadí</a></p>
<p><a href="#k18">*** 18. Změna stylu zobrazení textového kurzoru na vybraných terminálech</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Textová uživatelská rozhraní naprogramovaná v&nbsp;jazyku Go</h2>

<p>Již mnohokrát jsme si <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">v&nbsp;seriálu o
programovacím jazyku Go</a> řekli, že se tento jazyk primárně používá pro
tvorbu síťových utilit, mikroslužeb či dokonce ucelených webových aplikací. Je
to ostatně logické, protože právě v&nbsp;těchto oblastech se využijí prakticky
všechny užitečné vlastnosti tohoto programovacího jazyka, zejména pak podpora
pro práci s&nbsp;<i>gorutinami</i>, komunikace mezi gorutinami s&nbsp;využitím
<i>kanálů</i> a v&nbsp;neposlední řadě taktéž možnost přeložit nástroj
naprogramovaný v&nbsp;jazyku Go do jediného binárního souboru (pro určenou
platformu), který nevyžaduje prakticky žádnou instalaci (na rozdíl od aplikací
v&nbsp;některých jiných jazycích, v&nbsp;nichž je nutné zajistit buď
kompatibilní dynamicky linkované knihovny či dokonce celý <i>runtime</i> daného
programovacího jazyka).</p>

<p>To však samozřejmě neznamená, že by se jazyk Go nemohl využívat i
v&nbsp;dalších oblastech. Sice se (s&nbsp;poměrně velkou pravděpodobností)
prozatím neprosadí například pro tvorbu her, ovšem naproti tomu nalezneme velké
množství nástrojů naprogramovaných právě v&nbsp;jazyce Go, které se ovládají
interaktivně příkazy zadávanými z&nbsp;příkazového řádku (<i>command line</i>)
nebo které dokonce obsahují plnohodnotné <a
href="https://github.com/rothgar/awesome-tuis">textové uživatelské rozhraní</a>
(<i>TUI</i>). Příklady takových projektů jsou &bdquo;lazy&ldquo; aplikace od
<i>Jesse Duffielda</i> (ke kterým se někdy vrátíme) nebo <i>fjira</i> (prozatím
tomuto textovému rozhraní pro JIRu ovšem chybí některé možnosti nabízené
standardním webovým klientem):</p>

<ol>

<li>lazygit<br />
<a href="https://github.com/jesseduffield/lazygit">https://github.com/jesseduffield/lazygit</a>
</li>

<li>lazydocker<br />
<a href="https://github.com/jesseduffield/lazydocker">https://github.com/jesseduffield/lazydocker</a>
</li>

<li>lazynpm<br />
<a href="https://github.com/jesseduffield/lazynpm">https://github.com/jesseduffield/lazynpm</a>
</li>

<li>fjira<br />
<a href="https://github.com/mk-5/fjira">https://github.com/mk-5/fjira</a>
</li>

</ol>



<p><a name="k02"></a></p>
<h2 id="k02">2. Interaktivní příkazový řádek s&nbsp;historií, automatickým doplňováním atd.</h2>

<p>U poměrně velkého množství aplikací se s&nbsp;výhodou využije ovládání
s&nbsp;využitím interaktivního příkazového řádku, který je doplněn o množství
pomocných technik &ndash; možností editace, doplněním historie, schránky,
automatickým doplňováním atd. atd. Takové aplikace tedy používají interaktivní
smyčku REPL (<a
href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">Read-Eval-Print
Loop</a>), tj.&nbsp;aplikace se spustí, vypíše tzv.&nbsp;výzvu (<i>prompt</i>)
uživateli, akceptuje zadané příkazy, nějakým způsobem je vykoná a opět vypíše
výzvu. Zde je již většinou nutné investovat více času na přípravu prostředí
aplikace, protože dnes uživatelé (po právu) vyžadují, aby nástroj
s&nbsp;vlastní interaktivní smyčkou REPL podporoval historii příkazů,
vyhledávání v&nbsp;historii, obarvení vstupů, podporu pro automatické
doplňování příkazů atd. atd.</p>

<a href="https://www.root.cz/obrazek/358439/"><img src="https://i.iinfo.cz/images/472/golang-20-1-prev.png" class="image-358439" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 2: Velmi dobrým příkladem aplikace s&nbsp;interaktivní smyčkou
REPL je IPython.</i></p>

<p>Pro aplikace s&nbsp;interaktivní smyčkou REPL programované v&nbsp;jazyku Go
vzniklo několik knihoven, které nabízí některé či všechny výše uvedené a
vyžadované funkce. Jedná se například o tyto knihovny:</p>

<ul>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

</ul>



<p><a name="k03"></a></p>
<h2 id="k03">3. Balíček <strong>go-prompt</strong> pro aplikace naprogramované v&nbsp;jazyku Go</h2>

<p>Pravděpodobně nejpoužívanějším balíčkem pro Go, který zajišťuje interaktivní
REPL, je balíček nazvaný <strong>go-prompt</strong>, jenž je inspirován
podobným balíčkem pro Python nazvaným <strong>prompt_toolkit</strong>.
S&nbsp;<strong>go-prompt</strong> jsme se již v&nbsp;tomto seriálu setkali,
takže si pouze ve stručnosti uveďme jeho základní vlastnosti a způsob jeho
použití. Tento balíček nabízí uživatelům následující funkce:</p>

<ol>

<li>Plnohodnotnou editaci na příkazovém řádku, samozřejmě včetně možnosti
přesunu kurzoru s&nbsp;využitím příkazů Ctrl+znak, specializovaných kláves
Home, End atd.</li>

<li>Mazání textu před kurzorem, za kurzorem, smazání slova apod.</li>

<li>Automatické doplňování příkazů na základě tabulky, kterou je možné
dynamicky měnit.</li>

<li>Kontextovou nápovědu s&nbsp;dostupnými příkazy, a to včetně popisu
jednotlivých příkazů.</li>

<li>Historii již zapsaných příkazů.</li>

<li>Fuzzy vyhledávání příkazů.</li>

</ol>



<p><a name="k04"></a></p>
<h2 id="k04">4. Příklady použití balíčku <strong>go-prompt</strong></h2>

<p>Základním příkazem, který nalezneme v&nbsp;balíčku
<strong>go-prompt</strong>, je příkaz <strong>Input</strong>, který většinu
výše zmíněné funkcionality nabízí a kterému lze předat jinou funkci použitou
pro doplňování příkazů a nabízení všech v&nbsp;dané chvíli dostupných
alternativ:</p>

<pre>
package <strong>main</strong>
&nbsp;
import "github.com/c-bata/go-prompt"
&nbsp;
func <strong>completer</strong>(in prompt.Document) []prompt.Suggest {
        return []prompt.Suggest{}
}
&nbsp;
func <strong>main</strong>() {
        login := prompt.Input("Login: ", completer)
        password := prompt.Input("Password: ", completer)
        println(login)
        println(password)
}
</pre>

<a href="https://www.root.cz/obrazek/358443/"><img src="https://i.iinfo.cz/images/472/golang-20-5-prev.png" class="image-358443" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 3: Povšimněte si, že se stiskem klávesy <strong>Ctrl+A</strong>
či <strong>Home</strong> můžeme bez problémů přesunout na začátek vstupního
řádku. Všechny ostatní editační příkazy budou taktéž funkční.</i></p>

<p>A takto lze zajistit automatické doplňování příkazů:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/c-bata/go-prompt"
        "os"
)
&nbsp;
func <strong>executor</strong>(t string) {
        switch t {
        case "exit":
                fallthrough
        case "quit":
                os.Exit(0)
        case "help":
                println("HELP:\nexit\nquit")
        default:
                println("Nothing happens")
        }
}
&nbsp;
func <strong>completer</strong>(in prompt.Document) []prompt.Suggest {
        return []prompt.Suggest{
                {Text: "help"},
                {Text: "exit"},
                {Text: "quit"},
        }
}
&nbsp;
func <strong>main</strong>() {
        p := prompt.New(executor, completer)
        p.Run()
}
</pre>

<a href="https://www.root.cz/obrazek/358445/"><img src="https://i.iinfo.cz/images/472/golang-20-7-prev.png" class="image-358445" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 4: Po spuštění se pouze očekává příkaz, žádná nápověda se
nevypíše.</i></p>

<a href="https://www.root.cz/obrazek/358446/"><img src="https://i.iinfo.cz/images/472/golang-20-8-prev.png" class="image-358446" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 5: Vrácením kurzoru se zobrazí tabulka se všemi dostupnými
příkazy.</i></p>

<a href="https://www.root.cz/obrazek/358447/"><img src="https://i.iinfo.cz/images/472/golang-20-9-prev.png" class="image-358447" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 6: Nápověda prozatím <strong>není</strong> kontextová, ovšem
klávesou <strong>Tab</strong> lze příkaz doplnit.</i></p>

<a href="https://www.root.cz/obrazek/358448/"><img src="https://i.iinfo.cz/images/472/golang-20-10-prev.png" class="image-358448" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 7: Doplněný příkaz se zobrazí odlišnou barvou.</i></p>

<p>A nakonec si ukažme zajištění kontextové nápovědy k&nbsp;vybíraným
příkazům:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/c-bata/go-prompt"
        "os"
)
&nbsp;
func <strong>executor</strong>(t string) {
        switch t {
        case "exit":
                fallthrough
        case "quit":
                os.Exit(0)
        case "help":
                println("HELP:\nexit\nquit")
        default:
                println("Nothing happens")
        }
        return
}
&nbsp;
func <strong>completer</strong>(in prompt.Document) []prompt.Suggest {
        s := []prompt.Suggest{
                {Text: "help", Description: "show help with all commands"},
                {Text: "exit", Description: "quit the application"},
                {Text: "quit", Description: "quit the application"},
        }
        return prompt.FilterHasPrefix(s, in.GetWordBeforeCursor(), true)
}
&nbsp;
func <strong>main</strong>() {
        p := prompt.New(executor, completer)
        p.Run()
}
</pre>

<a href="https://www.root.cz/obrazek/358451/"><img src="https://i.iinfo.cz/images/472/golang-20-13-prev.png" class="image-358451" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 8: Zobrazení všech příkazů i s&nbsp;nápovědou.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Knihovny pro ovládání terminálu i pro tvorbu plnohodnotných TUI</h2>

<p>Pro aplikace s&nbsp;příkazovým řádkem nebo s&nbsp;plnohodnotnou smyčkou REPL
v&nbsp;naprosté většině případů plně dostačuje funkcionalita nabízená výše
zmíněným balíčkem <strong>go-prompt</strong>. Ovšem v&nbsp;mnoha aplikacích by
bylo vhodné nabídnout uživatelům plnohodnotné textové uživatelské rozhraní.
Knihoven resp.&nbsp;přesněji řečeno balíčků pro tvorbu textového uživatelského
rozhraní v&nbsp;jazyku Go existuje celá řada (minimálně desítky). Jak se ovšem
tyto knihovny od sebe odlišují a lze z&nbsp;nich vybrat tu nejlepší? Do značné
míry záleží na požadavcích programátora, protože knihovny pro tvorbu textového
uživatelského rozhraní je možné rozdělit do několika kategorií:</p>

<ul>

<li>U některých aplikací požadujeme poměrně malé množství dostupných funkcí.
Typicky se jedná o možnost změny pozice textového kurzoru, změnu barvy
vykreslování znaků, změnu stylu vykreslování znaků (podtržené atd.), čtení
kláves bez čekání na stisk Enter a výpis znaku. Příkladem mohou být různé hry
běžící v&nbsp;textovém režimu.</li>

<li>Další skupina aplikací již vyžaduje některé sofistikovanější funkce,
například možnost definice obdélníkových oken, které mohou tvořit základní
abstrakci nad textovým terminálem. Ve světě jazyka C tuto vrstvu abstrakce
nabízí známá knihovna <i>ncurses</i> a její obdobu nalezneme i v&nbsp;jazyce
Go.</li>

<li>Ve třetí skupině aplikací se nachází ty aplikace, které již potřebují
vykreslit složitější a unifikované ovládací prvky (<i>widgety</i>), mezi něž
patří tlačítka, výběrové seznamy, zatrhávací boxy, vstupní textová pole atd.
Ovšem mnohé knihovny nabízí i další užitečné prvky, mezi něž patří různé typy
grafů (zobrazovaných v&nbsp;textovém režimu) apod.</li>

<li>A konečně ve čtvrté skupině nalezneme takové aplikace, které vyžadují
&bdquo;plnohodnotné GUI, ovšem pracující v&nbsp;textovém režimu&ldquo;. Takové
aplikace již pracují s&nbsp;okny (které se mohou překrývat), ovládacími prvky,
reagují na události od uživatele atd. V&nbsp;krátkosti &ndash; moderní variantu
kdysi populární knihovny <i>Turbo Vision</i>. I takové knihovny pro jazyk Go
nalezneme, i když prozatím v&nbsp;podobě, která zdaleka není finální.</li>

</ul>

<a href="http://www.root.cz/obrazek/229450/"><img src="http://i.iinfo.cz/images/386/tp01-prev.png" class="image-229450" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek 9: Ukázka možností kdysi populární knihovny TurboVision: dialog
se základními informacemi o IDE Turbo Pascal 7.0.</i></p>

<a href="http://www.root.cz/obrazek/229456/"><img src="http://i.iinfo.cz/images/571/bp02-prev.png" class="image-229456" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek 10: Další ukázka použití TurboVision: textové uživatelské
vývojové prostředí Borland Pascal.</i></p>

<p>Z&nbsp;výše uvedeného seznamu je pravděpodobně patrné, že nebude existovat
jedna knihovna, která by vyhovovala všem požadavkům. Z&nbsp;tohoto důvodu se
postupně seznámíme s&nbsp;několika různými knihovnami a u každé si na
příkladech ukážeme její silné stránky i to, kdy je již vhodnější přejít
k&nbsp;odlišně koncipované knihovně.</p>

<p><div class="rs-tip-major">Poznámka: i programy, které jsou založeny na
textovém uživatelském rozhraní, je možné ovládat s&nbsp;využitím myši. Záleží
jen na programátorovi, zda bude myš použita standardním způsobem (pro výběr
textu) či zda ji bude možné použít i pro ovládání jednotlivých TUI prvků
aplikace (tlačítka, výběrové boxy, přesuny oken atd.).</div></p>

<img src="https://i.iinfo.cz/images/133/prompt-toolkit-5-8.png" class="image-335561" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 11: Typická aplikace s&nbsp;plnohodnotným menu v&nbsp;TUI &ndash;
Midnight Commander.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vybrané knihovny pro Go</h2>

<p>Mezi knihovny určené pro programovací jazyk Go, které programátorům nabízí
spíše základní funkce určené pro ovládání textového terminálu, patří
<i>termbox-go</i> a taktéž knihovna <i>tcell</i>. První z&nbsp;těchto knihoven
nalezneme na GitHubu, konkrétně na adrese <a
href="https://github.com/nsf/termbox-go">https://github.com/nsf/termbox-go</a>.
Tato knihovna již sice oficiálně není udržována, ale je stále používána
v&nbsp;některých projektech a o její popularitě svědčí i relativně vysoký počet
&bdquo;hvězdiček&ldquo;. Naproti tomu druhá zmíněná knihovna, kterou nalezneme
na stránce <a
href="https://github.com/gdamore/tcell">https://github.com/gdamore/tcell</a>,
je stále vyvíjena a dokonce pro ni existuje i komerční podpora. Ukázky použití
této knihovny budou uvedeny v&nbsp;navazujících kapitolách.</p>

<p>A jaký je stav knihoven, které nabízí textové ovládací prvky či dokonce
plnohodnotné textové uživatelské rozhraní? Příkladem takové knihovny může být
knihovna nazvaná <i>termui</i>, kterou nalezneme na GitHubu na adrese <a
href="https://github.com/gizak/termui">https://github.com/gizak/termui</a>.
V&nbsp;této knihovně programátor najde relativně velké množství prvků určených
pro zobrazování informací (spíše než typicky ovládacích prvků). To znamená, že
se tato knihovna hodí například pro implementaci různých <i>dashboardů</i>. Na
druhé straně spektra můžeme najít knihovnu <i>gocui</i> (<a
href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>).
Tato knihovna byla použita například v&nbsp;nástroji <i>kcli</i> (<a
href="https://github.com/cswank/kcli">https://github.com/cswank/kcli</a>),
s&nbsp;nímž jsme se setkali v&nbsp;článcích o Apache Kafce.</p>

<img src="https://i.iinfo.cz/images/437/kcli-1.png" class="image-450789" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/legalcode.cs&quot;&gt;CC-BY&lt;/a&gt;" width="617" height="401" />
<p><i>Obrázek 12: Nápověda ke klávesovým zkratkám nástroje
<strong>kcli</strong>.</i></p>

<p>Zapomenout nesmíme ani na knihovnu <i>tview</i> popř.&nbsp;na její fork
pojmenovaný <i>cview</i>. S&nbsp;možnostmi nabízenými touto knihovnou se
seznámíme v&nbsp;samostatném článku.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Práce s&nbsp;textovým terminálem s&nbsp;využitím knihovny <strong>tcell</strong></h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. Koncept událostí (<i>event</i>)</h2>

<p>Při programování grafických uživatelských rozhraní je často používán pojem
události (<strong>event(s)</strong>). Událostmi řízené programování je ostatně
s&nbsp;programováním GUI prakticky neoddělitelně spojeno. Každý widget může
v&nbsp;průběhu svého života generovat nějaké události. Naprostá většina
událostí vzniká tak, že uživatel s&nbsp;widgetem interaktivně pracuje
(například stlačí tlačítko zobrazené na obrazovce). Ke každému widgetu je
příslušná jedna &bdquo;implicitní&ldquo; událost, na kterou reaguje. Tato
událost se nastavuje pomocí změny vlastnosti widgetu, což bude ukázáno
v&nbsp;demonstračních příkladech v&nbsp;následujících kapitolách. Kromě
implicitní události lze na widgety navázat i další události, například tlačítko
(<strong>button</strong>) může reagovat i na stlačení klávesy na klávesnici, na
pravé tlačítko myši či na rolování kolečkem myši.</p>

<p>V&nbsp;textových uživatelských rozhraních se s&nbsp;událostmi může pracovat
naprosto stejným způsobem &ndash; ovšem za předpokladu, že příslušná TUI
knihovna podporuje přímou manipulaci s&nbsp;widgety. V&nbsp;případě knihovny
<i>tcell</i> tomu tak ovšem není &ndash; zde se pracuje na nižší úrovni. I tak
je však <i>tcell</i> na událostech postavena, ovšem nyní jsou události spojené
přímo s&nbsp;akcemi uživatele s&nbsp;terminálem a nikoli s&nbsp;jednotlivými
ovládacími prvky. Událostí může být stisk klávesy, stisk tlačítka myši (pokud
je práce s&nbsp;myší povolena), vložení textu ze schránky, ale například i
změna velikosti okna terminálu. Na všechny tyto události může aplikace
adekvátním způsobem reagovat.</p>

<pre>
for {
        screen.Show()
&nbsp;
        ev := screen.PollEvent()
&nbsp;
        switch ev := ev.(type) {
        case *tcell.EventResize:
                screen.Sync()
        case *tcell.EventKey:
                if ev.Key() == tcell.KeyEscape || ev.Key() == tcell.KeyCtrlC {
                        return
                } else if ev.Rune() == 'C' || ev.Rune() == 'c' {
                        screen.Clear()
                }
        }
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Kostra programu, který dokáže vypsat obarvený text na terminál a reagovat na stisk kláves</h2>

<pre>
package main

import (
        "log"

        tcell "github.com/gdamore/tcell/v2"
)

func drawText(s tcell.Screen, x1, y1, x2, y2 int, style tcell.Style, text string) {
        row := y1
        col := x1
        for _, r := range []rune(text) {
                s.SetContent(col, row, r, nil, style)
                col++
                if col >= x2 {
                        row++
                        col = x1
                }
                if row > y2 {
                        break
                }
        }
}

func main() {
        defStyle := tcell.StyleDefault.Background(tcell.ColorReset).Foreground(tcell.ColorReset)

        screen, err := tcell.NewScreen()
        if err != nil {
                log.Fatalf("%+v", err)
        }

        err = screen.Init()
        if err != nil {
                log.Fatalf("%+v", err)
        }

        screen.SetStyle(defStyle)
        screen.Clear()
        drawText(screen, 5, 5, 20, 20, defStyle, "Hello, world!")

        defer func() {
                screen.Fini()
        }()

        for {
                screen.Show()

                ev := screen.PollEvent()

                switch ev := ev.(type) {
                case *tcell.EventResize:
                        screen.Sync()
                case *tcell.EventKey:
                        if ev.Key() == tcell.KeyEscape || ev.Key() == tcell.KeyCtrlC {
                                return
                        } else if ev.Rune() == 'C' || ev.Rune() == 'c' {
                                screen.Clear()
                        }
                }
        }
}
</pre>

<pre>
package main

import (
        "log"

        tcell "github.com/gdamore/tcell/v2"
)

func drawText(s tcell.Screen, x1, y1, x2, y2 int, style tcell.Style, text string) {
        row := y1
        col := x1
        for _, r := range []rune(text) {
                s.SetContent(col, row, r, nil, style)
                col++
                if col >= x2 {
                        row++
                        col = x1
                }
                if row > y2 {
                        break
                }
        }
}

func main() {
        defStyle := tcell.StyleDefault.Background(tcell.ColorReset).Foreground(tcell.ColorReset)

        screen, err := tcell.NewScreen()
        if err != nil {
                log.Fatalf("%+v", err)
        }

        err = screen.Init()
        if err != nil {
                log.Fatalf("%+v", err)
        }

        screen.SetStyle(defStyle)
        screen.Clear()
        drawText(screen, 5, 5, 20, 20, defStyle, "Hello, world!")

        quit := func() {
                maybePanic := recover()
                screen.Fini()
                if maybePanic != nil {
                        panic(maybePanic)
                }
        }
        defer quit()

        for {
                screen.Show()

                ev := screen.PollEvent()

                switch ev := ev.(type) {
                case *tcell.EventResize:
                        screen.Sync()
                case *tcell.EventKey:
                        if ev.Key() == tcell.KeyEscape || ev.Key() == tcell.KeyCtrlC {
                                return
                        } else if ev.Rune() == 'C' || ev.Rune() == 'c' {
                                screen.Clear()
                        }
                }
        }
}
</pre>

<pre>
package main

import (
        "fmt"
        "log"

        tcell "github.com/gdamore/tcell/v2"
)

func drawText(s tcell.Screen, x1, y1, x2, y2 int, style tcell.Style, text string) {
        row := y1
        col := x1
        for _, r := range []rune(text) {
                s.SetContent(col, row, r, nil, style)
                col++
                if col >= x2 {
                        row++
                        col = x1
                }
                if row > y2 {
                        break
                }
        }
}

func drawBox(s tcell.Screen, x1, y1, x2, y2 int, style tcell.Style, text string) {
        if y2 < y1 {
                y1, y2 = y2, y1
        }
        if x2 < x1 {
                x1, x2 = x2, x1
        }

        // Fill background
        for row := y1; row <= y2; row++ {
                for col := x1; col <= x2; col++ {
                        s.SetContent(col, row, ' ', nil, style)
                }
        }

        // Draw borders
        for col := x1; col <= x2; col++ {
                s.SetContent(col, y1, tcell.RuneHLine, nil, style)
                s.SetContent(col, y2, tcell.RuneHLine, nil, style)
        }
        for row := y1 + 1; row < y2; row++ {
                s.SetContent(x1, row, tcell.RuneVLine, nil, style)
                s.SetContent(x2, row, tcell.RuneVLine, nil, style)
        }

        // Only draw corners if necessary
        if y1 != y2 && x1 != x2 {
                s.SetContent(x1, y1, tcell.RuneULCorner, nil, style)
                s.SetContent(x2, y1, tcell.RuneURCorner, nil, style)
                s.SetContent(x1, y2, tcell.RuneLLCorner, nil, style)
                s.SetContent(x2, y2, tcell.RuneLRCorner, nil, style)
        }

        drawText(s, x1+1, y1+1, x2-1, y2-1, style, text)
}

func drawBoxAroundScreen(screen tcell.Screen, style tcell.Style) {
        const offset = 5
        xmax, ymax := screen.Size()
        drawBox(screen, offset, offset, xmax-offset, ymax-offset, style, fmt.Sprintf("[%d, %d]", xmax, ymax))
}

func main() {
        defStyle := tcell.StyleDefault.Background(tcell.ColorBlack).Foreground(tcell.ColorReset)
        boxStyle := tcell.StyleDefault.Foreground(tcell.ColorWhite).Background(tcell.ColorDarkBlue)

        screen, err := tcell.NewScreen()
        if err != nil {
                log.Fatalf("%+v", err)
        }

        err = screen.Init()
        if err != nil {
                log.Fatalf("%+v", err)
        }

        screen.SetStyle(defStyle)
        screen.Clear()
        drawBoxAroundScreen(screen, boxStyle)

        quit := func() {
                maybePanic := recover()
                screen.Fini()
                if maybePanic != nil {
                        panic(maybePanic)
                }
        }
        defer quit()

        for {
                screen.Show()

                ev := screen.PollEvent()

                switch ev := ev.(type) {
                case *tcell.EventResize:
                        //screen.Sync()
                        screen.Clear()
                        drawBoxAroundScreen(screen, boxStyle)
                case *tcell.EventKey:
                        if ev.Key() == tcell.KeyEscape || ev.Key() == tcell.KeyCtrlC {
                                return
                        } else if ev.Rune() == 'C' || ev.Rune() == 'c' {
                                screen.Clear()
                        }
                }
        }
}
</pre>

<pre>
package main

import (
        "log"

        tcell "github.com/gdamore/tcell/v2"
)

func drawStar(s tcell.Screen, x, y int, style tcell.Style) {
        s.SetContent(x, y, '*', nil, style)
}

func main() {
        defStyle := tcell.StyleDefault.Background(tcell.ColorBlack).Foreground(tcell.ColorReset)
        starStyle := tcell.StyleDefault.Foreground(tcell.ColorRed).Background(tcell.ColorBlack)

        screen, err := tcell.NewScreen()
        if err != nil {
                log.Fatalf("%+v", err)
        }

        err = screen.Init()
        if err != nil {
                log.Fatalf("%+v", err)
        }

        screen.EnableMouse()
        screen.SetStyle(defStyle)
        screen.Clear()

        quit := func() {
                maybePanic := recover()
                screen.Fini()
                if maybePanic != nil {
                        panic(maybePanic)
                }
        }
        defer quit()

        for {
                screen.Show()

                ev := screen.PollEvent()

                switch ev := ev.(type) {
                case *tcell.EventResize:
                        screen.Sync()
                case *tcell.EventKey:
                        if ev.Key() == tcell.KeyEscape || ev.Key() == tcell.KeyCtrlC {
                                return
                        } else if ev.Rune() == 'C' || ev.Rune() == 'c' {
                                screen.Clear()
                        }
                case *tcell.EventMouse:
                        if ev.Buttons() == tcell.Button1 {
                                x, y := ev.Position()
                                drawStar(screen, x, y, starStyle)
                        }

                }
        }
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů naprogramovaných
v&nbsp;jazyku Go byly uloženy do Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář, můžete namísto toho
použít odkazy na jednotlivé demonstrační příklady, které naleznete
v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>03_simple_input.go</td><td>vstupní příkazový řádek realizovaný balíčkem <strong>go-prompt</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_20/03_simple_input.go">https://github.com/tisnik/go-root/blob/master/article_20/03_simple_input.go</a></td></tr>
<tr><td> 2</td><td>04_prompt.go</td><td>vstupní příkazový řádek s&nbsp;historií</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_20/04_prompt.go">https://github.com/tisnik/go-root/blob/master/article_20/04_prompt.go</a></td></tr>
<tr><td> 3</td><td>05_basic_completer.go</td><td>nabízení slov/příkazů pro automatické doplnění</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_20/05_basic_completer.go">https://github.com/tisnik/go-root/blob/master/article_20/05_basic_completer.go</a></td></tr>
<tr><td> 4</td><td>06_prefix_completer.go</td><td>vylepšení automatického doplňování příkazů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_20/06_prefix_completer.go">https://github.com/tisnik/go-root/blob/master/article_20/06_prefix_completer.go</a></td></tr>
<tr><td> 5</td><td>07_completion_description.go</td><td>popis jednotlivých příkazů zobrazovaný uživateli</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_20/07_completion_description.go">https://github.com/tisnik/go-root/blob/master/article_20/07_completion_description.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AC/">https://github.com/tisnik/go-root/blob/master/article_AC/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AC/">https://github.com/tisnik/go-root/blob/master/article_AC/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AC/">https://github.com/tisnik/go-root/blob/master/article_AC/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Tvorba aplikací a her s&nbsp;textovým uživatelským rozhraním s&nbsp;využitím knihovny Blessed<br />
<a href="https://www.root.cz/clanky/tvorba-aplikaci-a-her-s-textovym-uzivatelskym-rozhranim-s-vyuzitim-knihovny-blessed/">https://www.root.cz/clanky/tvorba-aplikaci-a-her-s-textovym-uzivatelskym-rozhranim-s-vyuzitim-knihovny-blessed/</a>
</li>

<li>Tvorba aplikací a her s&nbsp;textovým rozhraním s&nbsp;knihovnou Blessed (dokončení)<br />
<a href="https://www.root.cz/clanky/tvorba-aplikaci-a-her-s-textovym-rozhranim-s-knihovnou-blessed-dokonceni/">https://www.root.cz/clanky/tvorba-aplikaci-a-her-s-textovym-rozhranim-s-knihovnou-blessed-dokonceni/</a>
</li>

<li>Text-Based User Interfaces<br />
<a href="https://appliedgo.net/tui/">https://appliedgo.net/tui/</a>
</li>

<li>PTerm: A powerful TUI framework written in Go<br />
<a href="https://pterm.sh/">https://pterm.sh/</a>
</li>

<li>termbox-go<br />
<a href="https://github.com/nsf/termbox-go">https://github.com/nsf/termbox-go</a>
</li>

<li>tcell<br />
<a href="https://github.com/gdamore/tcell">https://github.com/gdamore/tcell</a>
</li>

<li>termui<br />
<a href="https://github.com/gizak/termui">https://github.com/gizak/termui</a>
</li>

<li>GOCUI &ndash; Go Console User Interface<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Fork předešlého<br />
<a href="https://github.com/jesseduffield/gocui">https://github.com/jesseduffield/gocui</a>
</li>

<li>CLUI<br />
<a href="https://github.com/VladimirMarkelov/clui">https://github.com/VladimirMarkelov/clui</a>
</li>

<li>tview &ndash; Rich Interactive Widgets for Terminal UIs<br />
<a href="https://github.com/rivo/tview">https://github.com/rivo/tview</a>
</li>

<li>cview<br />
<a href="https://code.rocket9labs.com/tslocum/cview">https://code.rocket9labs.com/tslocum/cview</a>
</li>

<li>ANSI Escape Code &ndash; Colors<br />
<a href="https://en.wikipedia.org/wiki/ANSI_escape_code#Colors">https://en.wikipedia.org/wiki/ANSI_escape_code#Colors</a>
</li>

<li>A curated list of awesome Go frameworks, libraries and software<br />
<a href="https://awesome-go.com/">https://awesome-go.com/</a>
</li>

<li>Aurora<br />
<a href="https://github.com/logrusorgru/aurora">https://github.com/logrusorgru/aurora</a>
</li>

<li>colourize<br />
<a href="https://github.com/TreyBastian/colourize">https://github.com/TreyBastian/colourize</a>
</li>

<li>go-colortext<br />
<a href="https://github.com/daviddengcn/go-colortext">https://github.com/daviddengcn/go-colortext</a>
</li>

<li>blessed na PyPi<br />
<a href="https://pypi.org/project/blessed/">https://pypi.org/project/blessed/</a>
</li>

<li>blessed na GitHubu<br />
<a href="https://github.com/jquast/blessed">https://github.com/jquast/blessed</a>
</li>

<li>Blessed documentation!<br />
<a href="https://blessed.readthedocs.io/en/latest/">https://blessed.readthedocs.io/en/latest/</a>
</li>

<li>termbox-go na GitHubu<br />
<a href="https://github.com/nsf/termbox-go">https://github.com/nsf/termbox-go</a>
</li>

<li>termui na GitHubu<br />
<a href="https://github.com/gizak/termui">https://github.com/gizak/termui</a>
</li>

<li>blessed na GitHubu<br />
<a href="https://github.com/chjj/blessed">https://github.com/chjj/blessed</a>
</li>

<li>blessed-contrib na GitHubu<br />
<a href="https://github.com/yaronn/blessed-contrib">https://github.com/yaronn/blessed-contrib</a>
</li>

<li>tui-rs na GitHubu<br />
<a href="https://github.com/fdehau/tui-rs">https://github.com/fdehau/tui-rs</a>
</li>

<li>asciigraph<br />
<a href="https://github.com/guptarohit/asciigraph">https://github.com/guptarohit/asciigraph</a>
</li>

<li>Standardní balíček text/tabwriter<br />
<a href="https://golang.org/pkg/text/tabwriter/">https://golang.org/pkg/text/tabwriter/</a>
</li>

<li>Elastic tabstops: A better way to indent and align code<br />
<a href="https://nickgravgaard.com/elastic-tabstops/">https://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>ASCII Table Writer<br />
<a href="https://github.com/olekukonko/tablewriter">https://github.com/olekukonko/tablewriter</a>
</li>

<li>TablePrinter<br />
<a href="https://github.com/lensesio/tableprinter">https://github.com/lensesio/tableprinter</a>
</li>

<li>go-pretty<br />
<a href="https://github.com/jedib0t/go-pretty">https://github.com/jedib0t/go-pretty</a>
</li>

<li>cfmt<br />
<a href="https://github.com/mingrammer/cfmt">https://github.com/mingrammer/cfmt</a>
</li>

<li>box-cli-maker<br />
<a href="https://github.com/Delta456/box-cli-maker">https://github.com/Delta456/box-cli-maker</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>lazygit<br />
<a href="https://github.com/jesseduffield/lazygit">https://github.com/jesseduffield/lazygit</a>
</li>

<li>lazydocker<br />
<a href="https://github.com/jesseduffield/lazydocker">https://github.com/jesseduffield/lazydocker</a>
</li>

<li>lazynpm<br />
<a href="https://github.com/jesseduffield/lazynpm">https://github.com/jesseduffield/lazynpm</a>
</li>

<li>Awesome TUIs &ndash; list of projects that provide terminal user interfaces<br />
<a href="https://github.com/rothgar/awesome-tuis">https://github.com/rothgar/awesome-tuis</a>
</li>

<li>fjira<br />
<a href="https://github.com/mk-5/fjira">https://github.com/mk-5/fjira</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

