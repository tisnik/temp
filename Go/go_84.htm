<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Lexikální a syntaktická analýza zdrojových kódů jazyka Go (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Lexikální a syntaktická analýza zdrojových kódů jazyka Go (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Lexikální a syntaktická analýza zdrojových kódů jazyka Go (dokončení)</a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Lexikální a syntaktická analýza zdrojových kódů jazyka Go (dokončení)</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
package main

import (
        "fmt"
        "go/ast"
        "go/parser"
        "go/token"
)

// zdrojový kód, který se má naparsovat
const source = `
package main

func main() {
    var x = 10
    var y = 20

    if x > 0 {
    }

    if x != y {
    }

    if 0 < x {
    }
}
`

func getValue(n ast.Expr) string {
        switch v := n.(type) {
        case *ast.BasicLit:
                return v.Value
        case *ast.Ident:
                return v.Name
        case *ast.ArrayType:
                if v.Len == nil {
                        return fmt.Sprintf("Slice of %s\n", v.Elt)
                } else {
                        return fmt.Sprintf("Array of %s\n", v.Elt)
                }
        default:
                return fmt.Sprintf("Unrecognized type %T\n", v)
        }
}

// funkce volaná při průchodu AST
func inspectCallback(n ast.Node) bool {
        // pokud se jedná o volání funkce, vrátí se hodnota + true
        ifStatement, found := n.(*ast.IfStmt)
        if found {
                fmt.Print("if statement")
                condition := ifStatement.Cond
                binaryExpr, found := condition.(*ast.BinaryExpr)
                if found {
                        fmt.Print(" with binary condition")
                        left := getValue(binaryExpr.X)
                        right := getValue(binaryExpr.Y)
                        operand := binaryExpr.Op
                        fmt.Printf(" %s %s %s", left, operand, right)
                }
                fmt.Println()
        }
        return true
}

func main() {
        // struktura reprezentující množinu zdrojových kódů
        fileSet := token.NewFileSet()

        // konstrukce parseru a parsing zdrojového kódu
        file, err := parser.ParseFile(fileSet, "", source, parser.ParseComments)
        if err != nil {
                panic(err)
        }

        // zahájení průchodu abstraktním syntaktickým stromem
        ast.Inspect(file, inspectCallback)
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
package main

import (
        "fmt"
        "go/ast"
        "go/parser"
        "go/token"
)

// zdrojový kód, který se má naparsovat
const source = `
package main

func main() {
    var x = 10
    var y = 20

    if x > 0 {
    }

    if x != y {
    }

    if 0 < x {
    }

    if 0 > 1 {
    }
}
`

const (
        nodeTypeLiteral = iota
        nodeTypeIdentifier
        nodeTypeArray
        nodeTypeUnknown
)

func getValueAndType(n ast.Expr) (string, int) {
        switch v := n.(type) {
        case *ast.BasicLit:
                return v.Value, nodeTypeLiteral
        case *ast.Ident:
                return v.Name, nodeTypeIdentifier
        case *ast.ArrayType:
                if v.Len == nil {
                        return fmt.Sprintf("Slice of %s\n", v.Elt), nodeTypeArray
                } else {
                        return fmt.Sprintf("Array of %s\n", v.Elt), nodeTypeArray
                }
        default:
                return fmt.Sprintf("Unrecognized type %T\n", v), nodeTypeUnknown
        }
}

// funkce volaná při průchodu AST
func inspectCallback(n ast.Node) bool {
        // pokud se jedná o volání funkce, vrátí se hodnota + true
        ifStatement, found := n.(*ast.IfStmt)
        if found {
                fmt.Print("if statement")
                condition := ifStatement.Cond
                binaryExpr, found := condition.(*ast.BinaryExpr)
                if found {
                        fmt.Print(" with binary condition")
                        leftValue, leftType := getValueAndType(binaryExpr.X)
                        rightValue, rightType := getValueAndType(binaryExpr.Y)
                        operand := binaryExpr.Op
                        fmt.Printf(" %s %s %s", leftValue, operand, rightValue)
                        if leftType == nodeTypeLiteral && rightType == nodeTypeIdentifier {
                                fmt.Print(" (Yoda style condition detected)")
                        }
                }
                fmt.Println()
        }
        return true
}

func main() {
        // struktura reprezentující množinu zdrojových kódů
        fileSet := token.NewFileSet()

        // konstrukce parseru a parsing zdrojového kódu
        file, err := parser.ParseFile(fileSet, "", source, parser.ParseComments)
        if err != nil {
                panic(err)
        }

        // zahájení průchodu abstraktním syntaktickým stromem
        ast.Inspect(file, inspectCallback)
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
package main

import (
	"fmt"
	"strconv"
	"strings"
)

// původní výraz v infixové notaci
// 1 + 2 * (3 + 4) + 5 * (6 - 7)

// výraz převedený do postfixové notace
const expr = "1 2 3 4 + * + 5 6 7 - * +"

// primitivní neoptimalizovaná varianta zásobníku
type Stack struct {
	stack []int
}

// uložení hodnoty na zásobník
func (stack *Stack) Push(value int) {
	stack.stack = append(stack.stack, value)
}

// přečtení hodnoty ze zásobníku s kontrolou, zda není zásobník prázdný
func (stack *Stack) Pop() (int, error) {
	if stack.Empty() {
		return -1, fmt.Errorf("Empty stack")
	}

	// index nejvyššího prvku na zásobníku
	tos := len(stack.stack) - 1

	// přečtení elementru ze zásobníku
	element := stack.stack[tos]

	// odstranění elementu ze zásobníku
	stack.stack = stack.stack[:tos]
	return element, nil
}

// test, zda je zásobník prázdný
func (stack *Stack) Empty() bool {
	return len(stack.stack) == 0
}

// vyhodnocení výrazu zapsaného v postfixové notaci
func evaluate(expr string) (Stack, error) {
	// všechny dostupné aritmetické operátory
	operators := map[string]interface{}{
		"+": nil,
		"-": nil,
		"*": nil,
		"/": nil,
	}

	// rozdělení původního výrazu na jednotlivé části
	parts := strings.Fields(expr)

	// zásobník operandů (na začátku prázdný)
	var stack Stack

	// postupné zpracování jednotlivých částí původního výrazu
	for _, part := range parts {
		// test, zda se jedná o operátor
		_, isOperator := operators[part]
		if isOperator {
			// našli jsme operátor
			// -> provést zvolenou operaci
			//    + uložit výsledek na zásobník
			err := performArithmeticOperation(&stack, part)
			if err != nil {
				return stack, err
			}
		} else {
			// nejedná se o operátor
			// -> zkusíme tedy vstup zpracovat jako číslo
			val, err := strconv.Atoi(part)
			if err != nil {
				// neočekávaný vstup
				return stack, fmt.Errorf("Incorrect input: %s", part)
			} else {
				// našli jsme číselnou hodnotu
				// ta se uloží na zásobník operandů
				stack.Push(val)
			}
		}
	}

	// nyní by měl zásobník operandů obsahovat jedinou hodnotu
	return stack, nil
}

// provedení vybrané aritmetické operace
func performArithmeticOperation(stack *Stack, operator string) error {
	// získat druhý operand ze zásobníku
	y, err := stack.Pop()
	if err != nil {
		return err
	}

	// získat první operand ze zásobníku
	x, err := stack.Pop()
	if err != nil {
		return err
	}

	var result int

	// vlastní provedení operace
	switch operator {
	case "+":
		result = x + y
	case "-":
		result = x - y
	case "*":
		result = x * y
	case "/":
		result = x / y
	}

	// uložení výsledku operace zpět na zásobník
	stack.Push(result)

	return nil
}

// tisk obsahu zásobníku operandů
func printStack(stack Stack) {
	if stack.Empty() {
		fmt.Println("Empty stack!")
		return
	}

	// zásobník není prázdný, proto postupně vytiskneme uložené operandy
	for !stack.Empty() {
		value, _ := stack.Pop()
		fmt.Printf("%d\n", value)
	}
}

func main() {
	stack, err := evaluate(expr)
	if err != nil {
		fmt.Println(err)
		return
	}
	printStack(stack)
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
package main

import (
	"fmt"
	"strconv"
	"strings"
)

// původní výraz v infixové notaci
// 1 + 2 * (3 + 4) + 5 * (6 - 7)

// výraz převedený do postfixové notace
const expr = "1 2 3 4 + * + 5 6 7 - * +"

// primitivní neoptimalizovaná varianta zásobníku
type Stack struct {
	stack []int
}

// uložení hodnoty na zásobník
func (stack *Stack) Push(value int) {
	stack.stack = append(stack.stack, value)
}

// přečtení hodnoty ze zásobníku s kontrolou, zda není zásobník prázdný
func (stack *Stack) Pop() (int, error) {
	if stack.Empty() {
		return -1, fmt.Errorf("Empty stack")
	}

	// index nejvyššího prvku na zásobníku
	tos := len(stack.stack) - 1

	// přečtení elementru ze zásobníku
	element := stack.stack[tos]

	// odstranění elementu ze zásobníku
	stack.stack = stack.stack[:tos]
	return element, nil
}

// test, zda je zásobník prázdný
func (stack *Stack) Empty() bool {
	return len(stack.stack) == 0
}

// funkce provádějící výpočet na základě použitého operátoru
type Operator func(int, int) int

// vyhodnocení výrazu zapsaného v postfixové notaci
func evaluate(expr string) (Stack, error) {
	// všechny dostupné aritmetické operátory
	operators := map[string]Operator{
		"+": func(x int, y int) int { return x + y },
		"-": func(x int, y int) int { return x - y },
		"*": func(x int, y int) int { return x * y },
		"/": func(x int, y int) int { return x / y },
	}

	// rozdělení původního výrazu na jednotlivé části
	parts := strings.Fields(expr)

	// zásobník operandů (na začátku prázdný)
	var stack Stack

	// postupné zpracování jednotlivých částí původního výrazu
	for _, part := range parts {
		// test, zda se jedná o operátor
		operator, isOperator := operators[part]
		if isOperator {
			// našli jsme operátor
			// -> provést zvolenou operaci
			//    + uložit výsledek na zásobník
			err := performArithmeticOperation(&stack, operator)
			if err != nil {
				return stack, err
			}
		} else {
			// nejedná se o operátor
			// -> zkusíme tedy vstup zpracovat jako číslo
			val, err := strconv.Atoi(part)
			if err != nil {
				// neočekávaný vstup
				return stack, fmt.Errorf("Incorrect input: %s", part)
			} else {
				// našli jsme číselnou hodnotu
				// ta se uloží na zásobník operandů
				stack.Push(val)
			}
		}
	}

	// nyní by měl zásobník operandů obsahovat jedinou hodnotu
	return stack, nil
}

// provedení vybrané aritmetické operace
func performArithmeticOperation(stack *Stack, operator Operator) error {
	// získat druhý operand ze zásobníku
	y, err := stack.Pop()
	if err != nil {
		return err
	}

	// získat první operand ze zásobníku
	x, err := stack.Pop()
	if err != nil {
		return err
	}

	// vlastní provedení operace
	result := operator(x, y)

	// uložení výsledku operace zpět na zásobník
	stack.Push(result)

	return nil
}

// tisk obsahu zásobníku operandů
func printStack(stack Stack) {
	if stack.Empty() {
		fmt.Println("Empty stack!")
		return
	}

	// zásobník není prázdný, proto postupně vytiskneme uložené operandy
	for !stack.Empty() {
		value, _ := stack.Pop()
		fmt.Printf("%d\n", value)
	}
}

func main() {
	stack, err := evaluate(expr)
	if err != nil {
		fmt.Println(err)
		return
	}
	printStack(stack)
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech <a
href="https://www.root.cz/clanky/lexikalni-a-syntakticka-zdrojovych-kodu-jazyka-go/">předminule</a>,
<a href="">minule</a>
i dnes použitých demonstračních příkladů byly uloženy do nového Git repositáře,
který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>ast01.go</td><td>syntaktická analýza v&nbsp;Go &ndash; balíčky <strong>go/token</strong> a <strong>go/parser</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast01.go">https://github.com/tisnik/go-root/blob/master/article_82/ast01.go</a></td></tr>
<tr><td> 2</td><td>ast02.go</td><td>čitelný výpis obsahu abstraktního syntaktického stromu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast02.go">https://github.com/tisnik/go-root/blob/master/article_82/ast02.go</a></td></tr>
<tr><td> 3</td><td>ast03.go</td><td>průchod abstraktním syntaktickým stromem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast03.go">https://github.com/tisnik/go-root/blob/master/article_82/ast03.go</a></td></tr>
<tr><td> 4</td><td>ast04.go</td><td>návrhový vzor Visitor</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast04.go">https://github.com/tisnik/go-root/blob/master/article_82/ast04.go</a></td></tr>
<tr><td> 5</td><td>ast05.go</td><td>zobrazení hloubky uzlu v&nbsp;AST</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast05.go">https://github.com/tisnik/go-root/blob/master/article_82/ast05.go</a></td></tr>
<tr><td> 6</td><td>ast06.go</td><td>koncové uzly v&nbsp;AST</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast06.go">https://github.com/tisnik/go-root/blob/master/article_82/ast06.go</a></td></tr>
<tr><td> 7</td><td>ast07.go</td><td>AST zkonstruovaný pro sekvenci příkazů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast07.go">https://github.com/tisnik/go-root/blob/master/article_82/ast07.go</a></td></tr>
<tr><td> 8</td><td>ast08.go</td><td>výrazy se závorkami a s&nbsp;různými prioritami operátorů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast08.go">https://github.com/tisnik/go-root/blob/master/article_82/ast08.go</a></td></tr>
<tr><td> 9</td><td>ast09.go</td><td>konstrukce AST pro jediný výraz</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast09.go">https://github.com/tisnik/go-root/blob/master/article_82/ast09.go</a></td></tr>
<tr><td>10</td><td>ast10.go</td><td>typy uzlů v&nbsp;AST</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast10.go">https://github.com/tisnik/go-root/blob/master/article_82/ast10.go</a></td></tr>
<tr><td>11</td><td>ast11.go</td><td>podrobnější výpis informací o uzlech v&nbsp;AST</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast11.go">https://github.com/tisnik/go-root/blob/master/article_82/ast11.go</a></td></tr>
<tr><td>12</td><td>ast12.go</td><td>složitější aritmetické výrazy, zjednodušení zobrazení AST</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast12.go">https://github.com/tisnik/go-root/blob/master/article_82/ast12.go</a></td></tr>
<tr><td>13</td><td>ast13.go</td><td>logické výrazy</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast13.go">https://github.com/tisnik/go-root/blob/master/article_82/ast13.go</a></td></tr>
<tr><td>14</td><td>ast14.go</td><td>výrazy obsahující operace s&nbsp;poli či řezy</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast14.go">https://github.com/tisnik/go-root/blob/master/article_82/ast14.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>lexer1.go</td><td>tokenizace zdrojového kódu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/lexer1.go">https://github.com/tisnik/go-root/blob/master/article_82/lexer1.go</a></td></tr>
<tr><td>16</td><td>lexer2.go</td><td>zahození komentářů při tokenizaci</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/lexer2.go">https://github.com/tisnik/go-root/blob/master/article_82/lexer2.go</a></td></tr>
<tr><td>17</td><td>lexer3.go</td><td>tokenizace nesmyslné sekvence identifikátorů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/lexer3.go">https://github.com/tisnik/go-root/blob/master/article_82/lexer3.go</a></td></tr>
<tr><td>18</td><td>lexer4.go</td><td>tokenizace kódu s&nbsp;neznámými symboly</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/lexer4.go">https://github.com/tisnik/go-root/blob/master/article_82/lexer4.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>walk1.go</td><td>automatický průchod AST s&nbsp;výpisem aritmetických výrazů a podvýrazů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/walk1.go">https://github.com/tisnik/go-root/blob/master/article_83/walk1.go</a></td></tr>
<tr><td>20</td><td>walk2.go</td><td>explicitní průchod stromem &ndash; rekurzivní algoritmus</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/walk2.go">https://github.com/tisnik/go-root/blob/master/article_83/walk2.go</a></td></tr>
<tr><td>21</td><td>walk3.go</td><td>rekurzivní průchod stromem s&nbsp;rekonstrukcí aritmetického výrazu v&nbsp;infixové podobě</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/walk3.go">https://github.com/tisnik/go-root/blob/master/article_83/walk3.go</a></td></tr>
<tr><td>22</td><td>walk4.go</td><td>rozšíření předchozího kódu o zpracování výrazů se závorkami</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/walk4.go">https://github.com/tisnik/go-root/blob/master/article_83/walk4.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>rpn1.go</td><td>převod aritmetických výrazů z&nbsp;infixové notace do notace postfixové</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/rpn1.go">https://github.com/tisnik/go-root/blob/master/article_83/rpn1.go</a></td></tr>
<tr><td>24</td><td>rpn2.go</td><td>převod logických výrazů z&nbsp;infixové notace do notace postfixové</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/rpn2.go">https://github.com/tisnik/go-root/blob/master/article_83/rpn2.go</a></td></tr>
<tr><td>25</td><td>rpn3.go</td><td>nepatrná úprava &ndash; logický výraz se závorkami</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/rpn3.go">https://github.com/tisnik/go-root/blob/master/article_83/rpn3.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>func_call_1.go</td><td>detekce volání funkcí při zpracování AST</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/func_call_1.go">https://github.com/tisnik/go-root/blob/master/article_83/func_call_1.go</a></td></tr>
<tr><td>27</td><td>func_call_2.go</td><td>základní informace o argumentech volané funkce</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/func_call_2.go">https://github.com/tisnik/go-root/blob/master/article_83/func_call_2.go</a></td></tr>
<tr><td>28</td><td>func_call_3.go</td><td>podrobnější informace o argumentech volané funkce</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/func_call_3.go">https://github.com/tisnik/go-root/blob/master/article_83/func_call_3.go</a></td></tr>
<tr><td>29</td><td>func_call_4.go</td><td>informace o argumentech typu pole či řez (nějakého typu)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/func_call_4.go">https://github.com/tisnik/go-root/blob/master/article_83/func_call_4.go</a></td></tr>
<tr><td>30</td><td>func_call_5.go</td><td>rozlišení volání funkce od volání metody</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_83/func_call_5.go">https://github.com/tisnik/go-root/blob/master/article_83/func_call_5.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>condition1.go</td><td>praktický příklad: detekce zápisu &bdquo;yoda výrazů&ldquo;</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_84/condition1.go">https://github.com/tisnik/go-root/blob/master/article_84/condition1.go</a></td></tr>
<tr><td>32</td><td>condition2.go</td><td>praktický příklad: detekce zápisu &bdquo;yoda výrazů&ldquo;</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_84/condition2.go">https://github.com/tisnik/go-root/blob/master/article_84/condition2.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_84/">https://github.com/tisnik/go-root/blob/master/article_84/</a></td></tr>
<tr><td>34</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_84/">https://github.com/tisnik/go-root/blob/master/article_84/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Cool Stuff With Go’s AST Package Pt 1<br />
<a href="https://medium.com/swlh/cool-stuff-with-gos-ast-package-pt-1-981460cddcd7">https://medium.com/swlh/cool-stuff-with-gos-ast-package-pt-1-981460cddcd7</a>
</li>

<li>Cool Stuff With Go’s AST Package Pt 2<br />
<a href="https://medium.com/swlh/cool-stuff-with-gos-ast-package-pt-2-e4d39ab7e9db">https://medium.com/swlh/cool-stuff-with-gos-ast-package-pt-2-e4d39ab7e9db</a>
</li>

<li>Code generation in Go using abstract syntax trees (AST)<br />
<a href="https://blog.stein.wtf/posts/go-abstract-syntax-tree-code-generation">https://blog.stein.wtf/posts/go-abstract-syntax-tree-code-generation</a>
</li>

<li>Shunting-yard algorithm<br />
<a href="https://en.wikipedia.org/wiki/Shunting-yard_algorithm">https://en.wikipedia.org/wiki/Shunting-yard_algorithm</a>
</li>

<li>Abstract syntax tree<br />
<a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">https://en.wikipedia.org/wiki/Abstract_syntax_tree</a>
</li>

<li>Lexical analysis<br />
<a href="https://en.wikipedia.org/wiki/Lexical_analysis">https://en.wikipedia.org/wiki/Lexical_analysis</a>
</li>

<li>Parser<br />
<a href="https://en.wikipedia.org/wiki/Parsing#Parser">https://en.wikipedia.org/wiki/Parsing#Parser</a>
</li>

<li>Golang AST Package<br />
<a href="https://golangdocs.com/golang-ast-package">https://golangdocs.com/golang-ast-package</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>go/ast</strong><br />
<a href="https://pkg.go.dev/go/ast">https://pkg.go.dev/go/ast</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>go/scanner</strong><br />
<a href="https://pkg.go.dev/go/scanner">https://pkg.go.dev/go/scanner</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>go/parser</strong><br />
<a href="https://pkg.go.dev/go/parser">https://pkg.go.dev/go/parser</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>go/token</strong><br />
<a href="https://pkg.go.dev/go/token">https://pkg.go.dev/go/token</a>
</li>

<li>AP8, IN8 Regulární jazyky<br />
<a href="http://statnice.dqd.cz/home:inf:ap8">http://statnice.dqd.cz/home:inf:ap8</a>
</li>

<li>AP9, IN9 Konečné automaty<br />
<a href="http://statnice.dqd.cz/home:inf:ap9">http://statnice.dqd.cz/home:inf:ap9</a>
</li>

<li>AP10, IN10 Bezkontextové jazyky<br />
<a href="http://statnice.dqd.cz/home:inf:ap10">http://statnice.dqd.cz/home:inf:ap10</a>
</li>

<li>AP11, IN11 Zásobníkové automaty, Syntaktická analýza<br />
<a href="http://statnice.dqd.cz/home:inf:ap11">http://statnice.dqd.cz/home:inf:ap11</a>
</li>

<li>Introduction to YACC<br />
<a href="https://www.geeksforgeeks.org/introduction-to-yacc/">https://www.geeksforgeeks.org/introduction-to-yacc/</a>
</li>

<li>Introduction of Lexical Analysis<br />
<a href="https://www.geeksforgeeks.org/introduction-of-lexical-analysis/?ref=lbp">https://www.geeksforgeeks.org/introduction-of-lexical-analysis/?ref=lbp</a>
</li>

<li>Tvorba grafů a diagramů s využitím doménově specifického jazyka nástroje Graphviz<br />
<a href="https://www.root.cz/clanky/tvorba-grafu-a-diagramu-s-vyuzitim-domenove-specifickeho-jazyka-nastroje-graphviz/">https://www.root.cz/clanky/tvorba-grafu-a-diagramu-s-vyuzitim-domenove-specifickeho-jazyka-nastroje-graphviz/</a>
</li>

<li>Popis příkazu <strong>gofmt</strong><br />
<a href="https://pkg.go.dev/cmd/gofmt">https://pkg.go.dev/cmd/gofmt</a>
</li>

<li>Popis příkazu <strong>govet</strong><br />
<a href="https://pkg.go.dev/cmd/vet">https://pkg.go.dev/cmd/vet</a>
</li>

<li>Repositář nástroje <strong>errcheck</strong><br />
<a href="https://github.com/kisielk/errcheck">https://github.com/kisielk/errcheck</a>
</li>

<li>Repositář nástroje <strong>goconst</strong><br />
<a href="https://github.com/jgautheron/goconst">https://github.com/jgautheron/goconst</a>
</li>

<li>Repositář nástroje <strong>gocyclo</strong><br />
<a href="https://github.com/fzipp/gocyclo">https://github.com/fzipp/gocyclo</a>
</li>

<li>Repositář nástroje <strong>ineffassign</strong><br />
<a href="https://github.com/gordonklaus/ineffassign">https://github.com/gordonklaus/ineffassign</a>
</li>

<li>Repositář nástroje <strong>gosec</strong><br />
<a href="https://github.com/securego/gosec">https://github.com/securego/gosec</a>
</li>

<li>Repositář nástroje <strong>go-critic</strong><br />
<a href="https://github.com/go-critic/go-critic">https://github.com/go-critic/go-critic</a>
</li>

<li>Seznam testů prováděných nástrojem <strong>go-critic</strong><br />
<a href="https://go-critic.com/overview">https://go-critic.com/overview</a>
</li>

<li>Welcome go-critic<br />
<a href="https://itnext.io/welcome-go-critic-a26b6e30f1c6">https://itnext.io/welcome-go-critic-a26b6e30f1c6</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>LR syntaktický analyzátor<br />
<a href="https://cs.wikipedia.org/wiki/LR_syntaktick%C3%BD_analyz%C3%A1tor">https://cs.wikipedia.org/wiki/LR_syntaktick%C3%BD_analyz%C3%A1tor</a>
</li>

<li>Kategorie:Algoritmy syntaktické analýzy<br />
<a href="https://cs.wikipedia.org/wiki/Kategorie:Algoritmy_syntaktick%C3%A9_anal%C3%BDzy">https://cs.wikipedia.org/wiki/Kategorie:Algoritmy_syntaktick%C3%A9_anal%C3%BDzy</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

