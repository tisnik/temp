<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Pokročilejší použití vstupně-výstupních funkcí standardní knihovny programovacího jazyka Go</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Pokročilejší použití vstupně-výstupních funkcí standardní knihovny programovacího jazyka Go</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Pokročilejší použití vstupně-výstupních funkcí standardní knihovny programovacího jazyka Go</a></p>
<p><a href="#k02">*** 2. Krátké zopakování: rozhraní <strong>Reader</strong> a <strong>Writer</strong> a jejich význam v&nbsp;systému jazyka Go</a></p>
<p><a href="#k03">*** 3. Roura (pipe) vytvořená v&nbsp;operační paměti</a></p>
<p><a href="#k04">*** 4. Rozhraní <strong>Seeker</strong> a jeho varianty</a></p>
<p><a href="#k05">*** 5. Přesun (<i>seek</i>) při čtení dat ze souboru</a></p>
<p><a href="#k06">*** 6. Přesun (<i>seek</i>) při zápisu dat do souboru</a></p>
<p><a href="#k07">*** 7. Vytvoření řídkého souboru (<i>sparse file</i>)</a></p>
<p><a href="#k08">*** 8. Použití rozhraní <strong>MultiWriter</strong> pro souběžné zpracování výstupních dat</a></p>
<p><a href="#k09">*** 9. Využití rozhraní <strong>StringWriter</strong></a></p>
<p><a href="#k10">*** 10. Načítání řetězců &ndash; rozhraní <strong>Reader</strong> z&nbsp;balíčku <strong>bufio</strong></a></p>
<p><a href="#k11">*** 11. Chování readeru při dosažení konce souboru</a></p>
<p><a href="#k12">*** 12. Přečtení sekvence bajtů z&nbsp;bufferovaného vstupu</a></p>
<p><a href="#k13">*** 13. Zápis dat s&nbsp;jejich komprimací s&nbsp;využitím algoritmu Deflate</a></p>
<p><a href="#k14">*** 14. Konfigurace komprimačního algoritmu</a></p>
<p><a href="#k15">*** 15. Přímé získání zkomprimovaných dat přes rouru (<i>pipe</i>)</a></p>
<p><a href="#k16">*** 16. Ukázka použití <strong>MultiWriteru</strong> pro současnou komprimaci dat do více souborů s&nbsp;různě nastaveným algoritmem</a></p>
<p><a href="#k17">*** 17. Využití <i>hex dumperu</i> (nejenom) pro ladicí účely</a></p>
<p><a href="#k18">*** 18. Konverze binárních dat s&nbsp;využitím kódování BASE64</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Pokročilejší použití vstupně-výstupních funkcí standardní knihovny programovacího jazyka Go</h2>

<table>
<tr><th>Typ operace</th><th>Čtení</th><th>Zápis</th></tr>
<tr><td>jednotlivých bajtů</td><td><a href="https://www.root.cz/clanky/vstupne-vystupni-funkce-standardni-knihovny-programovaciho-jazyka-go/#k03">io.ByteReader</a></td><td><a href="https://www.root.cz/clanky/vstupne-vystupni-funkce-standardni-knihovny-programovaciho-jazyka-go/#k07">io.ByteWriter</a></td></tr>
<tr><td>jednotlivých znaků</td><td><a href="https://www.root.cz/clanky/vstupne-vystupni-funkce-standardni-knihovny-programovaciho-jazyka-go/#k06">io.RuneReader</a></td><td>&times;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>jednotlivých bajtů s&nbsp;bufferem</td><td><a href="https://www.root.cz/clanky/vstupne-vystupni-funkce-standardni-knihovny-programovaciho-jazyka-go/#k09">io.ByteScanner</a></td><td>&times;</td></tr>
<tr><td>jednotlivých znaků s&nbsp;bufferem</td><td><a href="https://www.root.cz/clanky/vstupne-vystupni-funkce-standardni-knihovny-programovaciho-jazyka-go/#k11">io.RuneScanner</a></td><td>&times;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>bloku bajtů</td><td><a href="https://www.root.cz/clanky/vstupne-vystupni-funkce-standardni-knihovny-programovaciho-jazyka-go/#k12">io.Reader</a></td><td><a href="https://www.root.cz/clanky/vstupne-vystupni-funkce-standardni-knihovny-programovaciho-jazyka-go/#k15">io.Writer</a></td></tr>
</table>

<table>
<tr><th>Rozhraní</th><th>Implementované operace</th></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: některé demonstrační příklady popsané v&nbsp;navazujících kapitolách vytvářejí binární soubory. Ty je možné si prohlédnout několika způsoby, typicky s&nbsp;využitím hexa prohlížečů, o nichž jsme se zmínili v&nbsp;článku <a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním</a>. V&nbsp;dnešním článku budeme konkrétně využitívat nástroj <a href="https://github.com/vim/vim/tree/master/src/xxd">xxd</a> popsaný <a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/#k07">zde</a>. Jak je z&nbsp;výše zmíněného odkazu patrné, je nástroj <strong>xxd</strong> součástí nástrojů postavených okolo <a href="https://www.root.cz/n/vim/">textového editoru Vim</a>.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Krátké zopakování: rozhraní <strong>Reader</strong> a <strong>Writer</strong> a jejich význam v&nbsp;systému jazyka Go</h2>

<p></p>

<p><a href=""></a></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "io"
        "log"
        "os"
)
&nbsp;
const filename = "test_input.txt"
const buffer_size = 16
&nbsp;
func <strong>main</strong>() {
        reader, err := os.Open(filename)
        if err != nil {
                log.Fatal(err)
        }
        defer reader.Close()
&nbsp;
        buffer := make([]byte, buffer_size)
&nbsp;
        for {
                read, err := reader.Read(buffer)
&nbsp;
                if read &gt; 0 {
                        fmt.Printf("read %d bytes\n", read)
                        fmt.Println(buffer[:read])
                }
&nbsp;
                if err == io.EOF {
                        fmt.Println("reached end of file")
                        break
                }
&nbsp;
                if err != nil {
                        fmt.Printf("other error %v\n", err)
                        break
                }
        }
}
</pre>

<p></p>

<pre>
read 16 bytes
[108 105 110 101 32 35 49 10 108 105 110 101 32 35 50 10]
read 16 bytes
[108 105 110 101 32 35 51 10 108 105 110 101 32 35 52 10]
read 8 bytes
[108 105 110 101 32 35 53 10]
reached end of file
</pre>

<p><a href=""></a></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "os"
)
&nbsp;
const filename = "test_output.txt"
const message = "Hello world!"
&nbsp;
func <strong>main</strong>() {
        writer, err := os.Create(filename)
        if err != nil {
                log.Fatal(err)
        }
        defer writer.Close()
&nbsp;
        buffer := []byte(message)
        written, err := writer.Write(buffer)
&nbsp;
        if written &gt; 0 {
                fmt.Printf("written %d bytes\n", written)
        }
&nbsp;
        if err != nil {
                fmt.Printf("I/O error %v\n", err)
        }
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Roura (pipe) vytvořená v&nbsp;operační paměti</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "io"
)
&nbsp;
func <strong>main</strong>() {
        reader, writer := io.Pipe()
&nbsp;
        go func() {
                fmt.Fprint(writer, "Hello Mario!")
                writer.Close()
        }()
&nbsp;
        buffer := make([]byte, 100)
&nbsp;
        read, err := reader.Read(buffer)
        if err != nil {
                panic(err)
        } else {
                if read &gt; 0 {
                        fmt.Printf("read %d bytes translated into '%s'\n", read, buffer)
                }
        }
}
</pre>

<pre>
read 12 bytes translated into 'Hello Mario!'
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "bytes"
        "fmt"
        "io"
)
&nbsp;
func <strong>main</strong>() {
        reader, writer := io.Pipe()
&nbsp;
        go func() {
                fmt.Fprint(writer, "Hello Mario!")
                writer.Close()
        }()
&nbsp;
        buffer := new(bytes.Buffer)
        buffer.ReadFrom(reader)
&nbsp;
        fmt.Printf("Message read from pipe: '%s'\n", buffer.String())
}
</pre>

<pre>
Message read from pipe: 'Hello Mario!'
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Rozhraní <strong>Seeker</strong> a jeho varianty</h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "io"
        "strings"
)
&nbsp;
const input_string = "*** Hello world! ***"
const buffer_size = 6
&nbsp;
func <strong>main</strong>() {
        reader := strings.NewReader(input_string)
&nbsp;
        buffer := make([]byte, buffer_size)
&nbsp;
        for {
                read, err := reader.Read(buffer)
&nbsp;
                if read &gt; 0 {
                        fmt.Printf("read %d bytes translated into '%s'\n", read, buffer[:read])
                }
&nbsp;
                if err == io.EOF {
                        fmt.Println("reached end of file")
                        break
                }
&nbsp;
                if err != nil {
                        fmt.Printf("other error %v\n", err)
                        break
                }
        }
}
</pre>

<pre>
read 6 bytes translated into '*** He'
read 6 bytes translated into 'llo wo'
read 6 bytes translated into 'rld! *'
read 2 bytes translated into '**'
reached end of file
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "io"
        "strings"
)
&nbsp;
const input_string = "*** Hello world! ***"
const buffer_size = 6
&nbsp;
func <strong>main</strong>() {
        reader := strings.NewReader(input_string)
&nbsp;
        buffer := make([]byte, buffer_size)
        reader.Seek(4, io.SeekStart)
&nbsp;
        for {
                read, err := reader.Read(buffer)
&nbsp;
                if read &gt; 0 {
                        fmt.Printf("read %d bytes translated into '%s'\n", read, buffer[:read])
                }
&nbsp;
                if err == io.EOF {
                        fmt.Println("reached end of file")
                        break
                }
&nbsp;
                if err != nil {
                        fmt.Printf("other error %v\n", err)
                        break
                }
        }
}
</pre>

<pre>
read 6 bytes translated into 'Hello '
read 6 bytes translated into 'world!'
read 4 bytes translated into ' ***'
reached end of file
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "io"
        "strings"
)
&nbsp;
const input_string = "*** Hello world! ***"
const buffer_size = 6
&nbsp;
func <strong>main</strong>() {
        reader := strings.NewReader(input_string)
&nbsp;
        buffer := make([]byte, buffer_size)
        reader.Seek(-10, io.SeekEnd)
&nbsp;
        for {
                read, err := reader.Read(buffer)
&nbsp;
                if read &gt; 0 {
                        fmt.Printf("read %d bytes translated into '%s'\n", read, buffer[:read])
                }
&nbsp;
                if err == io.EOF {
                        fmt.Println("reached end of file")
                        break
                }
&nbsp;
                if err != nil {
                        fmt.Printf("other error %v\n", err)
                        break
                }
        }
}
</pre>

<pre>
read 6 bytes translated into 'world!'
read 4 bytes translated into ' ***'
reached end of file
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "io"
        "strings"
)
&nbsp;
const input_string = "****** Hello world! ******[END]"
const buffer_size = 6
&nbsp;
func <strong>main</strong>() {
        reader := strings.NewReader(input_string)
&nbsp;
        buffer := make([]byte, buffer_size)
&nbsp;
        for {
                read, err := reader.Read(buffer)
&nbsp;
                if read &gt; 0 {
                        fmt.Printf("read %d bytes translated into '%s'\n", read, buffer[:read])
                        reader.Seek(7, io.SeekCurrent)
                }
&nbsp;
                if err == io.EOF {
                        fmt.Println("reached end of file")
                        break
                }
&nbsp;
                if err != nil {
                        fmt.Printf("other error %v\n", err)
                        break
                }
        }
}
</pre>

<pre>
read 6 bytes translated into '******'
read 6 bytes translated into 'world!'
read 5 bytes translated into '[END]'
reached end of file
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "io"
        "log"
        "os"
)
&nbsp;
const filename = "small.bin"
&nbsp;
func <strong>writeMark</strong>(writer io.Writer) {
        buffer := []byte("**")
        written, err := writer.Write(buffer)
&nbsp;
        if written &gt; 0 {
                fmt.Printf("written %d bytes\n", written)
        }
&nbsp;
        if err != nil {
                fmt.Printf("I/O error %v\n", err)
        }
}
&nbsp;
func <strong>main</strong>() {
        writer, err := os.Create(filename)
        if err != nil {
                log.Fatal(err)
        }
        defer writer.Close()
&nbsp;
        writeMark(writer)
        writer.Seek(100, io.SeekCurrent)
        writeMark(writer)
        writer.Seek(100, io.SeekCurrent)
        writeMark(writer)
}
</pre>

<pre>
0000000: 2a 2a 00 00 00 00 00 00 00 00 00 00 00 00 00 00  **..............
0000010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0000020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0000030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0000040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0000050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0000060: 00 00 00 00 00 00 2a 2a 00 00 00 00 00 00 00 00  ......**........
0000070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0000080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0000090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000c0: 00 00 00 00 00 00 00 00 00 00 00 00 2a 2a        ............**
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vytvoření řídkého souboru (<i>sparse file</i>)</h2>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "io"
        "log"
        "os"
)
&nbsp;
const filename = "huge.bin"
&nbsp;
func <strong>writeMark</strong>(writer io.Writer) {
        buffer := []byte("**")
        written, err := writer.Write(buffer)
&nbsp;
        if written &gt; 0 {
                fmt.Printf("written %d bytes\n", written)
        }
&nbsp;
        if err != nil {
                fmt.Printf("I/O error %v\n", err)
        }
}
&nbsp;
func <strong>main</strong>() {
        writer, err := os.Create(filename)
        if err != nil {
                log.Fatal(err)
        }
        defer writer.Close()
&nbsp;
        writeMark(writer)
        writer.Seek(1000000, io.SeekCurrent)
        writeMark(writer)
        writer.Seek(1000000, io.SeekCurrent)
        writeMark(writer)
}
</pre>

<pre>
0000000: 2a 2a 00 00 00 00 00 00 00 00 00 00 00 00 00 00  **..............
0000010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0000020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0000030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0000040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
...
...
...
00f41f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00f4200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00f4210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00f4220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00f4230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00f4240: 00 00 2a 2a 00 00 00 00 00 00 00 00 00 00 00 00  ..**............
00f4250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00f4260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00f4270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00f4280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00f4290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
...
...
...
01e8440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
01e8450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
01e8460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
01e8470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
01e8480: 00 00 00 00 2a 2a                                ....**
</pre>

<p></p>

<pre>
$ <strong>ls -ls huge.bin </strong>
&nbsp;
12 -rw-r--r-- 1 tester tester 2000006 dub 28 09:50 huge.bin
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
package main

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "io"
        "log"
        "os"
)

const filename1 = "test_output_1.txt"
const filename2 = "test_output_2.txt"
const message = "Hello world!"

func main() {
        writer1, err := os.Create(filename1)
        if err != nil {
                log.Fatal(err)
        }
        defer writer1.Close()

        writer2, err := os.Create(filename2)
        if err != nil {
                log.Fatal(err)
        }
        defer writer2.Close()

        writer := io.MultiWriter(writer1, writer2)

        buffer := []byte(message)

        written, err := writer.Write(buffer)

        if written > 0 {
                fmt.Printf("written %d bytes\n", written)
        }

        if err != nil {
                fmt.Printf("I/O error %v\n", err)
        }
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
package main

import (
        "fmt"
        "log"
        "os"
)

const filename = "test_output.txt"
const message = "Hello world!"

func main() {
        writer, err := os.Create(filename)
        if err != nil {
                log.Fatal(err)
        }
        defer writer.Close()

        written, err := writer.WriteString(message)

        if written > 0 {
                fmt.Printf("written %d bytes\n", written)
        }

        if err != nil {
                fmt.Printf("I/O error %v\n", err)
        }
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
package main

import (
        "bufio"
        "fmt"
        "io"
        "log"
        "os"
)

const filename = "test_input.txt"
const buffer_size = 16

func main() {
        reader, err := os.Open(filename)
        if err != nil {
                log.Fatal(err)
        }
        defer reader.Close()

        bufferedReader := bufio.NewReader(reader)

        for {
                str, err := bufferedReader.ReadString('\n')

                fmt.Printf("read string with size %d bytes: %s", len(str), str)

                if err == io.EOF {
                        fmt.Println("\nreached end of file")
                        break
                }

                if err != nil {
                        fmt.Printf("\nother error %v\n", err)
                        break
                }
        }
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
package main

import (
        "bufio"
        "fmt"
        "io"
        "log"
        "os"
)

const filename = "test_input_no_eoln.txt"
const buffer_size = 16

func main() {
        reader, err := os.Open(filename)
        if err != nil {
                log.Fatal(err)
        }
        defer reader.Close()

        bufferedReader := bufio.NewReader(reader)

        for {
                str, err := bufferedReader.ReadString('\n')

                fmt.Printf("read string with size %d bytes: %s", len(str), str)

                if err == io.EOF {
                        fmt.Println("\nreached end of file")
                        break
                }

                if err != nil {
                        fmt.Printf("\nother error %v\n", err)
                        break
                }
        }
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
package main

import (
        "bufio"
        "fmt"
        "io"
        "log"
        "os"
)

const filename = "test_input_no_eoln.txt"
const buffer_size = 16

func main() {
        reader, err := os.Open(filename)
        if err != nil {
                log.Fatal(err)
        }
        defer reader.Close()

        bufferedReader := bufio.NewReader(reader)

        for {
                array, err := bufferedReader.ReadBytes('\n')

                fmt.Printf("read array of bytes with size %d bytes: %v\n", len(array), array)

                if err == io.EOF {
                        fmt.Println("reached end of file")
                        break
                }

                if err != nil {
                        fmt.Printf("other error %v\n", err)
                        break
                }
        }
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
package main

import (
        "compress/gzip"
        "fmt"
        "log"
        "os"
)

const filename = "test_output.txt.gz"
const message = "Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello "

func main() {
        writer, err := os.Create(filename)
        if err != nil {
                log.Fatal(err)
        }
        defer writer.Close()

        gzipWriter := gzip.NewWriter(writer)
        defer gzipWriter.Close()

        buffer := []byte(message)
        written, err := gzipWriter.Write(buffer)

        if written >= 0 {
                fmt.Printf("written %d bytes\n", written)
        }

        if err != nil {
                fmt.Printf("I/O error %v\n", err)
        }
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
package main

import (
        "compress/gzip"
        "fmt"
        "log"
        "os"
)

const filename = "test_output.txt.gz"
const message = "Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello "

func main() {
        writer, err := os.Create(filename)
        if err != nil {
                log.Fatal(err)
        }
        defer writer.Close()

        gzipWriter, err := gzip.NewWriterLevel(writer, gzip.BestCompression)
        if err != nil {
                log.Fatal(err)
        }

        defer gzipWriter.Close()

        buffer := []byte(message)
        written, err := gzipWriter.Write(buffer)

        if written >= 0 {
                fmt.Printf("written %d bytes\n", written)
        }

        if err != nil {
                fmt.Printf("I/O error %v\n", err)
        }
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
package main

import (
        "compress/gzip"
        "fmt"
        "io"
)

const message = "Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello "

func main() {
        reader, writer := io.Pipe()

        gzipWriter := gzip.NewWriter(writer)

        go func() {
                buffer := []byte(message)
                written, err := gzipWriter.Write(buffer)

                if written >= 0 {
                        fmt.Printf("written %d bytes\n", written)
                }

                if err != nil {
                        fmt.Printf("I/O error %v\n", err)
                }

                gzipWriter.Close()
                writer.Close()
        }()

        buffer := make([]byte, 100)

        for {
                read, err := reader.Read(buffer)

                if read > 0 {
                        fmt.Printf("read %d bytes:", read)
                        for i := 0; i < read; i++ {
                                fmt.Printf(" %02x", buffer[i])
                        }
                        fmt.Println()
                }

                if err == io.EOF {
                        fmt.Println("reached end of file")
                        break
                }

                if err != nil {
                        fmt.Printf("other error %v\n", err)
                        break
                }

        }
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
package main

import (
	"compress/gzip"
	"fmt"
	"io"
	"log"
	"os"
	"strings"
)

const filename1 = "test_output.txt.1.gz"
const filename2 = "test_output.txt.2.gz"
const filename3 = "test_output.txt.3.gz"
const filename4 = "test_output.txt.4.gz"

func fileWriter(filename string) io.WriteCloser {
	writer, err := os.Create(filename)
	if err != nil {
		log.Fatal(err)
	}
	return writer
}

func gzipWriter(writer io.Writer, compressionLevel int) io.WriteCloser {
	gzipWriter, err := gzip.NewWriterLevel(writer, compressionLevel)
	if err != nil {
		log.Fatal(err)
	}
	return gzipWriter
}

func writeMessage(writer io.Writer, message string) {
	buffer := []byte(message)
	written, err := writer.Write(buffer)

	if written >= 0 {
		fmt.Printf("written %d bytes\n", written)
	}

	if err != nil {
		fmt.Printf("I/O error %v\n", err)
	}
}

func main() {
	message := strings.Repeat("Hello ", 100)

	writer1 := fileWriter(filename1)
	defer writer1.Close()

	writer2 := fileWriter(filename2)
	defer writer2.Close()

	writer3 := fileWriter(filename3)
	defer writer3.Close()

	writer4 := fileWriter(filename4)
	defer writer4.Close()

	gzipWriter1 := gzipWriter(writer1, gzip.BestCompression)
	defer gzipWriter1.Close()

	gzipWriter2 := gzipWriter(writer2, gzip.BestSpeed)
	defer gzipWriter2.Close()

	gzipWriter3 := gzipWriter(writer3, gzip.HuffmanOnly)
	defer gzipWriter3.Close()

	gzipWriter4 := gzipWriter(writer4, gzip.NoCompression)
	defer gzipWriter4.Close()

	writer := io.MultiWriter(gzipWriter1, gzipWriter2, gzipWriter3, gzipWriter4)

<p>V&nbsp;dnešním posledním demonstračním příkladu si ukážeme způsob použití dalšího datového typu implementujícího rozhraní <strong>io.Writer</strong>. Jedná se o datový typ <strong>base64</strong>, který &ndash; jak již jeho název správně napovídá &ndash; .</p>

<table>
<tr><th>Index</th><th>Znak</th><th>Index</th><th>Znak</th><th>Index</th><th>Znak</th><th>Index</th><th>Znak</th></tr>
<tr><td>0 </td><td>A</td><td>16</td><td>Q</td><td>32</td><td>g</td><td>48</td><td>w</td></tr>
<tr><td>1 </td><td>B</td><td>17</td><td>R</td><td>33</td><td>h</td><td>49</td><td>x</td></tr>
<tr><td>2 </td><td>C</td><td>18</td><td>S</td><td>34</td><td>i</td><td>50</td><td>y</td></tr>
<tr><td>3 </td><td>D</td><td>19</td><td>T</td><td>35</td><td>j</td><td>51</td><td>z</td></tr>
<tr><td>4 </td><td>E</td><td>20</td><td>U</td><td>36</td><td>k</td><td>52</td><td>0</td></tr>
<tr><td>5 </td><td>F</td><td>21</td><td>V</td><td>37</td><td>l</td><td>53</td><td>1</td></tr>
<tr><td>6 </td><td>G</td><td>22</td><td>W</td><td>38</td><td>m</td><td>54</td><td>2</td></tr>
<tr><td>7 </td><td>H</td><td>23</td><td>X</td><td>39</td><td>n</td><td>55</td><td>3</td></tr>
<tr><td>8 </td><td>I</td><td>24</td><td>Y</td><td>40</td><td>o</td><td>56</td><td>4</td></tr>
<tr><td>9 </td><td>J</td><td>25</td><td>Z</td><td>41</td><td>p</td><td>57</td><td>5</td></tr>
<tr><td>10</td><td>K</td><td>26</td><td>a</td><td>42</td><td>q</td><td>58</td><td>6</td></tr>
<tr><td>11</td><td>L</td><td>27</td><td>b</td><td>43</td><td>r</td><td>59</td><td>7</td></tr>
<tr><td>12</td><td>M</td><td>28</td><td>c</td><td>44</td><td>s</td><td>60</td><td>8</td></tr>
<tr><td>13</td><td>N</td><td>29</td><td>d</td><td>45</td><td>t</td><td>61</td><td>9</td></tr>
<tr><td>14</td><td>O</td><td>30</td><td>e</td><td>46</td><td>u</td><td>62</td><td>+</td></tr>
<tr><td>15</td><td>P</td><td>31</td><td>f</td><td>47</td><td>v</td><td>63</td><td>/</td></tr>
</table>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/base64"
        "fmt"
        "log"
        "os"
)
&nbsp;
const filename = "test_output.base64"
const message = "*** Hello world! ***"
&nbsp;
func <strong>main</strong>() {
        writer, err := os.Create(filename)
        if err != nil {
                log.Fatal(err)
        }
        defer writer.Close()
&nbsp;
        base64Encoder := base64.NewEncoder(base64.RawStdEncoding, writer)
        defer base64Encoder.Close()
&nbsp;
        buffer := []byte(message)
        written, err := base64Encoder.Write(buffer)
&nbsp;
        if written &gt;= 0 {
                fmt.Printf("written %d bytes\n", written)
        }
&nbsp;
        if err != nil {
                fmt.Printf("I/O error %v\n", err)
        }
}
</pre>


<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně dva megabajty), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Soubor</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_io_reader_read.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/01_io_reader_read.go">https://github.com/tisnik/go-root/blob/master/article_23/01_io_reader_read.go</a></td></tr>
<tr><td> 2</td><td>02_io_writer_write.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/02_io_writer_write.go">https://github.com/tisnik/go-root/blob/master/article_23/02_io_writer_write.go</a></td></tr>
<tr><td> 3</td><td>03_memory_pipe.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/03_memory_pipe.go">https://github.com/tisnik/go-root/blob/master/article_23/03_memory_pipe.go</a></td></tr>
<tr><td> 4</td><td>04_memory_pipe_bytes_buffer.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/04_memory_pipe_bytes_buffer.go">https://github.com/tisnik/go-root/blob/master/article_23/04_memory_pipe_bytes_buffer.go</a></td></tr>
<tr><td> 5</td><td>05_simple_string_reader.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/05_simple_string_reader.go">https://github.com/tisnik/go-root/blob/master/article_23/05_simple_string_reader.go</a></td></tr>
<tr><td> 6</td><td>06_reader_seeker_absolute.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/06_reader_seeker_absolute.go">https://github.com/tisnik/go-root/blob/master/article_23/06_reader_seeker_absolute.go</a></td></tr>
<tr><td> 7</td><td>07_reader_seeker_from_end.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/07_reader_seeker_from_end.go">https://github.com/tisnik/go-root/blob/master/article_23/07_reader_seeker_from_end.go</a></td></tr>
<tr><td> 8</td><td>08_reader_seeker_relative.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/08_reader_seeker_relative.go">https://github.com/tisnik/go-root/blob/master/article_23/08_reader_seeker_relative.go</a></td></tr>
<tr><td> 9</td><td>09_writer_seeker.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/09_writer_seeker.go">https://github.com/tisnik/go-root/blob/master/article_23/09_writer_seeker.go</a></td></tr>
<tr><td>10</td><td>10_writer_seeker_sparse_file.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/10_writer_seeker_sparse_file.go">https://github.com/tisnik/go-root/blob/master/article_23/10_writer_seeker_sparse_file.go</a></td></tr>
<tr><td>11</td><td>11_multi_writer.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/11_multi_writer.go">https://github.com/tisnik/go-root/blob/master/article_23/11_multi_writer.go</a></td></tr>
<tr><td>12</td><td>12_string_writer.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/12_string_writer.go">https://github.com/tisnik/go-root/blob/master/article_23/12_string_writer.go</a></td></tr>
<tr><td>13</td><td>13_bufio_reader_read_string.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/13_bufio_reader_read_string.go">https://github.com/tisnik/go-root/blob/master/article_23/13_bufio_reader_read_string.go</a></td></tr>
<tr><td>14</td><td>14_bufio_reader_other_file.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/14_bufio_reader_other_file.go">https://github.com/tisnik/go-root/blob/master/article_23/14_bufio_reader_other_file.go</a></td></tr>
<tr><td>15</td><td>15_bufio_reader_read_bytes.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/15_bufio_reader_read_bytes.go">https://github.com/tisnik/go-root/blob/master/article_23/15_bufio_reader_read_bytes.go</a></td></tr>
<tr><td>16</td><td>16_gzip_writer.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/16_gzip_writer.go">https://github.com/tisnik/go-root/blob/master/article_23/16_gzip_writer.go</a></td></tr>
<tr><td>17</td><td>17_gzip_writer_compression_level.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/17_gzip_writer_compression_level.go">https://github.com/tisnik/go-root/blob/master/article_23/17_gzip_writer_compression_level.go</a></td></tr>
<tr><td>18</td><td>18_gzip_writer_fifo.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/18_gzip_writer_fifo.go">https://github.com/tisnik/go-root/blob/master/article_23/18_gzip_writer_fifo.go</a></td></tr>
<tr><td>19</td><td>19_gzip_multiwriter.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/19_gzip_multiwriter.go">https://github.com/tisnik/go-root/blob/master/article_23/19_gzip_multiwriter.go</a></td></tr>
<tr><td>20</td><td>20_hex_dumper.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/20_hex_dumper.go">https://github.com/tisnik/go-root/blob/master/article_23/20_hex_dumper.go</a></td></tr>
<tr><td>21</td><td>21_base_64_encoder.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_23/21_base_64_encoder.go">https://github.com/tisnik/go-root/blob/master/article_23/21_base_64_encoder.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním
https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

