<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Projekt Gonum Numerical Packages (Gonum)</a></p>
<p><a href="#k03">*** 3. Podpora resp.&nbsp;nepodpora SIMD operací v&nbsp;jazyku Go a možná řešení</a></p>
<p><a href="#k04">*** 4. Projekt <strong>narray</strong> využívající možností dnešních mikroprocesorů</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Předchozí články o rozsáhlém světu &bdquo;array programmingu&ldquo;</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Projekt Gonum Numerical Packages (Gonum)</h2>

<p>Samotný programovací jazyk Go obsahuje podporu pro práci s&nbsp;maticemi a
řezy (ostatně se jedná o základní datové typy tohoto jazyka). Práce
s&nbsp;těmito datovými strukturami je podporována i ve standardní knihovně
jazyka. Ovšem například v&nbsp;porovnání se známou a velmi často používanou
knihovnou <i>NumPy</i> ze světa Pythonu (nebo s&nbsp;možnostmi Matlabu či R)
jsou možnosti standardní instalace Go v&nbsp;této oblasti mnohem menší. Ovšem
některé operace, které známe z&nbsp;<i>NumPy</i>, byly implementovány
v&nbsp;sadě knihoven, které jsou součástí projektu nazvaného jednoduše <i>Gonum
Numerical Packages</i>. Tento projekt obsahuje zejména knihovnu pro práci
s&nbsp;maticemi (naprosté základy si ukážeme níže a více se jim budeme věnovat
příště), algoritmy lineární algebry, podporu pro tvorbu grafů, podporu práce
s&nbsp;takzvanými &bdquo;datovými rámci&ldquo; (ve světě Pythonu se používá
<i>pandas</i>) atd.</p>

<img src="https://i.iinfo.cz/images/669/gophernotes1-4.png" class="image-400282" alt="&#160;" width="343" height="332" />
<p><i>Obrázek 4: Logo projektu Gonum Numerical Packages.</i></p>

<p><div class="rs-tip-major">Poznámka: na tomto místě je však vhodné
poznamenat, že integrace <i>NumPy</i> do <i>Pythonu</i> je mnohem lepší, než je
tomu v&nbsp;případě projektu <i>Gonum</i>. Je tomu tak z&nbsp;toho důvodu, že
jazyk Go nepodporuje přetěžování operátorů, takže například není možné
implementovat maticové operace &bdquo;přirozenou&ldquo; cestou (zrovna příklad
<i>NumPy</i> ukazuje, že přetěžování operátorů, pokud je použito rozumně, může
být velmi užitečné).</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Podpora resp.&nbsp;nepodpora SIMD operací v&nbsp;jazyku Go a možná řešení</h2>

automatická vektorizace prováděná překladačem
  =ne
  =jen gccgo

intrinsic
   = v Go není a nebude dostupná
implementace v jiném jazyku, zajištění rozhraní pro Go
   = Go assembler, extern, cgo

Assembler v go je zvlášní, ovšem lze ho nakonec použít



<p><a name="k04"></a></p>
<h2 id="k04">4. Projekt <strong>narray</strong> využívající možností dnešních mikroprocesorů</h2>

https://github.com/akualab/narray/blob/master/na32/arrayfuncs_amd64.s



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
module narray-demos

go 1.18

require github.com/akualab/narray v0.0.0-20150719231847-f1469ca2dcda // indirect
</pre>

go: downloading github.com/akualab/narray v0.0.0-20150719231847-f1469ca2dcda
go: added github.com/akualab/narray v0.0.0-20150719231847-f1469ca2dcda

<pre>
github.com/akualab/narray v0.0.0-20150719231847-f1469ca2dcda h1:nQDCnea62a0m8ftKitrMXZfKrj0jBTcewPjTQLF6ZFo=
github.com/akualab/narray v0.0.0-20150719231847-f1469ca2dcda/go.mod h1:6YzkTn3pv9xhDO6WcNUd3bot0eMQ5Zc8/X+IaAfSJOU=
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
package main

import (
        "fmt"

        narray "github.com/akualab/narray/na32"
)

func main() {
        scalar := narray.New()
        vector := narray.New(10)
        matrix := narray.New(4, 3)
        cube := narray.New(3, 4, 5)

        fmt.Println(scalar)
        fmt.Println(vector)
        fmt.Println(matrix)
        fmt.Println(cube)
}
</pre>

<pre>
package main

import (
        "fmt"

        narray "github.com/akualab/narray/na64"
)

func main() {
        scalar := narray.New()
        vector := narray.New(10)
        matrix := narray.New(4, 3)
        cube := narray.New(3, 4, 5)

        fmt.Println(scalar)
        fmt.Println(vector)
        fmt.Println(matrix)
        fmt.Println(cube)
}
</pre>

<pre>
narray rank:   0
narray shape:  []
[] =&gt; 0.000000

narray rank:   1
narray shape:  [10]
[ 0] =&gt; 0.000000
[ 1] =&gt; 0.000000
[ 2] =&gt; 0.000000
[ 3] =&gt; 0.000000
[ 4] =&gt; 0.000000
[ 5] =&gt; 0.000000
[ 6] =&gt; 0.000000
[ 7] =&gt; 0.000000
[ 8] =&gt; 0.000000
[ 9] =&gt; 0.000000

narray rank:   2
narray shape:  [4 3]
[ 0 0] =&gt; 0.000000
[ 0 1] =&gt; 0.000000
[ 0 2] =&gt; 0.000000
[ 1 0] =&gt; 0.000000
[ 1 1] =&gt; 0.000000
[ 1 2] =&gt; 0.000000
[ 2 0] =&gt; 0.000000
[ 2 1] =&gt; 0.000000
[ 2 2] =&gt; 0.000000
[ 3 0] =&gt; 0.000000
[ 3 1] =&gt; 0.000000
[ 3 2] =&gt; 0.000000

narray rank:   3
narray shape:  [3 4 5]
[ 0 0 0] =&gt; 0.000000
[ 0 0 1] =&gt; 0.000000
[ 0 0 2] =&gt; 0.000000
[ 0 0 3] =&gt; 0.000000
[ 0 0 4] =&gt; 0.000000
[ 0 1 0] =&gt; 0.000000
[ 0 1 1] =&gt; 0.000000
[ 0 1 2] =&gt; 0.000000
[ 0 1 3] =&gt; 0.000000
[ 0 1 4] =&gt; 0.000000
[ 0 2 0] =&gt; 0.000000
...
...
...
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
package main

import (
        "fmt"

        narray "github.com/akualab/narray/na64"
)

func main() {
        vector := narray.NewArray([]float64{1, 2, 3}, 3)
        matrix := narray.NewArray([]float64{1, 2, 3, 4, 5, 6}, 3, 2)
        cube := narray.NewArray([]float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, 3, 2, 2)

        fmt.Println(vector)
        fmt.Println(matrix)
        fmt.Println(cube)
}
</pre>

<pre>
narray rank:   1
narray shape:  [3]
[ 0] =&gt; 1.000000
[ 1] =&gt; 2.000000
[ 2] =&gt; 3.000000

narray rank:   2
narray shape:  [3 2]
[ 0 0] =&gt; 1.000000
[ 0 1] =&gt; 2.000000
[ 1 0] =&gt; 3.000000
[ 1 1] =&gt; 4.000000
[ 2 0] =&gt; 5.000000
[ 2 1] =&gt; 6.000000

narray rank:   3
narray shape:  [3 2 2]
[ 0 0 0] =&gt; 1.000000
[ 0 0 1] =&gt; 2.000000
[ 0 1 0] =&gt; 3.000000
[ 0 1 1] =&gt; 4.000000
[ 1 0 0] =&gt; 5.000000
[ 1 0 1] =&gt; 6.000000
[ 1 1 0] =&gt; 7.000000
[ 1 1 1] =&gt; 8.000000
[ 2 0 0] =&gt; 9.000000
[ 2 0 1] =&gt; 10.000000
[ 2 1 0] =&gt; 11.000000
[ 2 1 1] =&gt; 12.000000
</pre>

<pre>
package main

import (
        "fmt"

        narray "github.com/akualab/narray/na64"
)

func main() {
        vector := narray.NewArray([]float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, 12)
        matrix := vector.Reshape(4, 3)

        fmt.Println(vector)
        fmt.Println(matrix)
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
package main

import (
        "fmt"

        narray "github.com/akualab/narray/na64"
)

func main() {
        vector1 := narray.NewArray([]float64{1, 2, 3, 4, 5}, 5)

        sum := vector1.Sum()
        fmt.Println(sum)
}
</pre>

<pre>
15
</pre>

<pre>
package main

import (
        "fmt"

        narray "github.com/akualab/narray/na64"
)

func main() {
        vector1 := narray.NewArray([]float64{1, 2, 3, 4, 5}, 5)

        prod := vector1.Prod()
        fmt.Println(prod)
}
</pre>

<pre>
120
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
package main

import (
        "fmt"

        narray "github.com/akualab/narray/na64"
)

func main() {
        vector1 := narray.NewArray([]float64{1, 2, 3, 4, 5}, 5)
        vector2 := narray.NewArray([]float64{1, 2, 3, 4, 5}, 5)

        vector3 := narray.Add(nil, vector1, vector2)
        fmt.Println(vector1)
        fmt.Println(vector2)
        fmt.Println(vector3)
}
</pre>

<pre>
narray rank:   1
narray shape:  [5]
[ 0] =&gt; 1.000000
[ 1] =&gt; 2.000000
[ 2] =&gt; 3.000000
[ 3] =&gt; 4.000000
[ 4] =&gt; 5.000000

narray rank:   1
narray shape:  [5]
[ 0] =&gt; 1.000000
[ 1] =&gt; 2.000000
[ 2] =&gt; 3.000000
[ 3] =&gt; 4.000000
[ 4] =&gt; 5.000000

narray rank:   1
narray shape:  [5]
[ 0] =&gt; 2.000000
[ 1] =&gt; 4.000000
[ 2] =&gt; 6.000000
[ 3] =&gt; 8.000000
[ 4] =&gt; 10.000000
</pre>

<pre>
package main

import (
        "fmt"

        narray "github.com/akualab/narray/na64"
)

func main() {
        vector1 := narray.NewArray([]float64{1, 2, 3, 4, 5}, 5)
        vector2 := narray.NewArray([]float64{1, 2, 3, 4, 5}, 5)
        vector3 := narray.New(5)

        narray.Add(vector3, vector1, vector2)
        fmt.Println(vector1)
        fmt.Println(vector2)
        fmt.Println(vector3)
}
</pre>

<pre>
narray rank:   1
narray shape:  [5]
[ 0] =&gt; 1.000000
[ 1] =&gt; 2.000000
[ 2] =&gt; 3.000000
[ 3] =&gt; 4.000000
[ 4] =&gt; 5.000000

narray rank:   1
narray shape:  [5]
[ 0] =&gt; 1.000000
[ 1] =&gt; 2.000000
[ 2] =&gt; 3.000000
[ 3] =&gt; 4.000000
[ 4] =&gt; 5.000000

narray rank:   1
narray shape:  [5]
[ 0] =&gt; 2.000000
[ 1] =&gt; 4.000000
[ 2] =&gt; 6.000000
[ 3] =&gt; 8.000000
[ 4] =&gt; 10.000000
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
package main

import (
        "fmt"

        narray "github.com/akualab/narray/na64"
)

func main() {
        vector1 := narray.NewArray([]float64{1, 2, 3, 4, 5}, 5)

        dotProduct := narray.Dot(vector1, vector1)
        fmt.Println(dotProduct)
        fmt.Println(1*1 + 2*2 + 3*3 + 4*4 + 5*5)
}
</pre>

<pre>
55
55
</pre>

<pre>
package main

import (
        "fmt"

        narray "github.com/akualab/narray/na64"
)

func main() {
        vector1 := narray.NewArray([]float64{1, 2, 3}, 3)
        vector2 := narray.NewArray([]float64{4, 5, 6}, 3)
        vector3 := narray.NewArray([]float64{7, 8, 9}, 3)

        dotProduct := narray.Dot(vector1, vector2, vector3)
        fmt.Println(dotProduct)
}
</pre>

<pre>
270
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
package main

import (
        "fmt"

        narray "github.com/akualab/narray/na64"
)

func main() {
        vector := narray.NewArray([]float64{1, 2, 3}, 3)
        matrix := narray.NewArray([]float64{1, 2, 3, 4, 5, 6}, 3, 2)
        cube := narray.NewArray([]float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, 3, 2, 2)

        fmt.Println(vector)
        fmt.Println(matrix)
        fmt.Println(cube)

        vector.WriteFile("vector.dat")
        matrix.WriteFile("matrix.dat")
        cube.WriteFile("cube.dat")
}
</pre>

<pre>
{"rank":1,"shape":[3],"data":[1,2,3],"strides":[1]}
</pre>

<pre>
{"rank":2,"shape":[3,2],"data":[1,2,3,4,5,6],"strides":[2,1]}
</pre>

<pre>
{"rank":3,"shape":[3,2,2],"data":[1,2,3,4,5,6,7,8,9,10,11,12],"strides":[4,2,1]}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
package main

import (
        "fmt"
        "log"

        narray "github.com/akualab/narray/na64"
)

func main() {
        vector, err := narray.ReadFile("vector.dat")
        if err != nil {
                log.Panic(err)
        }

        matrix, err := narray.ReadFile("matrix.dat")
        if err != nil {
                log.Panic(err)
        }

        cube, err := narray.ReadFile("cube.dat")
        if err != nil {
                log.Panic(err)
        }

        fmt.Println(vector)
        fmt.Println(matrix)
        fmt.Println(cube)
}
</pre>

<pre>
narray rank:   1
narray shape:  [3]
[ 0] =&gt; 1.000000
[ 1] =&gt; 2.000000
[ 2] =&gt; 3.000000

narray rank:   2
narray shape:  [3 2]
[ 0 0] =&gt; 1.000000
[ 0 1] =&gt; 2.000000
[ 1 0] =&gt; 3.000000
[ 1 1] =&gt; 4.000000
[ 2 0] =&gt; 5.000000
[ 2 1] =&gt; 6.000000

narray rank:   3
narray shape:  [3 2 2]
[ 0 0 0] =&gt; 1.000000
[ 0 0 1] =&gt; 2.000000
[ 0 1 0] =&gt; 3.000000
[ 0 1 1] =&gt; 4.000000
[ 1 0 0] =&gt; 5.000000
[ 1 0 1] =&gt; 6.000000
[ 1 1 0] =&gt; 7.000000
[ 1 1 1] =&gt; 8.000000
[ 2 0 0] =&gt; 9.000000
[ 2 0 1] =&gt; 10.000000
[ 2 1 0] =&gt; 11.000000
[ 2 1 1] =&gt; 12.000000
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
package main

import (
        "fmt"
        "log"

        narray "github.com/akualab/narray/na64"
)

func main() {
        vector := narray.NewArray([]float64{1, 2, 3}, 3)
        matrix := narray.NewArray([]float64{1, 2, 3, 4, 5, 6}, 3, 2)
        cube := narray.NewArray([]float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, 3, 2, 2)

        j, err := vector.ToJSON()
        if err != nil {
                log.Panic(err)
        }

        fmt.Println(j)

        j, err = matrix.ToJSON()
        if err != nil {
                log.Panic(err)
        }

        fmt.Println(j)

        j, err = cube.ToJSON()
        if err != nil {
                log.Panic(err)
        }
        fmt.Println(j)
}
</pre>

<pre>
{"rank":1,"shape":[3],"data":[1,2,3],"strides":[1]}

{"rank":2,"shape":[3,2],"data":[1,2,3,4,5,6],"strides":[2,1]}

{"rank":3,"shape":[3,2,2],"data":[1,2,3,4,5,6,7,8,9,10,11,12],"strides":[4,2,1]}
</pre>

<pre>
{
  "rank": 1,
  "shape": [
    3
  ],
  "data": [
    1,
    2,
    3
  ],
  "strides": [
    1
  ]
}
</pre>

<pre>
{
  "rank": 2,
  "shape": [
    3,
    2
  ],
  "data": [
    1,
    2,
    3,
    4,
    5,
    6
  ],
  "strides": [
    2,
    1
  ]
}
</pre>

<pre>
{
  "rank": 3,
  "shape": [
    3,
    2,
    2
  ],
  "data": [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12
  ],
  "strides": [
    4,
    2,
    1
  ]
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
package main

import (
        "fmt"

        narray "github.com/akualab/narray/na64"
)

func main() {
        vector1 := narray.NewArray([]float64{1, 2, 3, 4, 5}, 5)
        vector2 := narray.New(5)

        narray.AddConst(vector2, vector1, 100)
        fmt.Println(vector1)
        fmt.Println(vector2)
}
</pre>

<pre>
narray rank:   1
narray shape:  [5]
[ 0] =&gt; 1.000000
[ 1] =&gt; 2.000000
[ 2] =&gt; 3.000000
[ 3] =&gt; 4.000000
[ 4] =&gt; 5.000000

narray rank:   1
narray shape:  [5]
[ 0] =&gt; 101.000000
[ 1] =&gt; 102.000000
[ 2] =&gt; 103.000000
[ 3] =&gt; 104.000000
[ 4] =&gt; 105.000000
</pre>

<pre>
package main

import (
        "fmt"

        narray "github.com/akualab/narray/na64"
)

func main() {
        vector1 := narray.NewArray([]float64{1, 2, 3, 4, 5}, 5)
        vector2 := narray.NewArray([]float64{1, 2, 3, 4, 5}, 5)

        narray.AddScaled(vector1, vector2, 100)
        fmt.Println(vector1)
        fmt.Println(vector2)
}
</pre>

<pre>
narray rank:   1
narray shape:  [5]
[ 0] =&gt; 101.000000
[ 1] =&gt; 202.000000
[ 2] =&gt; 303.000000
[ 3] =&gt; 404.000000
[ 4] =&gt; 505.000000

narray rank:   1
narray shape:  [5]
[ 0] =&gt; 1.000000
[ 1] =&gt; 2.000000
[ 2] =&gt; 3.000000
[ 3] =&gt; 4.000000
[ 4] =&gt; 5.000000
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Předchozí články o rozsáhlém světu &bdquo;array programmingu&ldquo;</h2>

<p>Programovacími jazyky, které jsou z&nbsp;větší či menší míry odvozeny od
APL, jsme se již na stránkách Roota zabývali v&nbsp;několika článcích. Odkazy
na tyto články naleznete pod odstavcem:</p>

<ol>

<li>Jazyky umožňující operace s&nbsp;poli aneb rozsáhlý svět &bdquo;array programmingu&ldquo;<br />
<a href="https://www.root.cz/clanky/jazyky-umoznujici-operace-s-poli-aneb-rozsahly-svet-bdquo-array-programmingu-ldquo/">https://www.root.cz/clanky/jazyky-umoznujici-operace-s-poli-aneb-rozsahly-svet-bdquo-array-programmingu-ldquo/</a>
</li>

<li>Specializované jazyky pro práci s&nbsp;N-dimenzionálními poli: jazyk J<br />
<a href="https://www.root.cz/clanky/specializovane-jazyky-pro-praci-s-n-dimenzionalnimi-poli-jazyk-j/">https://www.root.cz/clanky/specializovane-jazyky-pro-praci-s-n-dimenzionalnimi-poli-jazyk-j/</a>
</li>

<li>Programovací jazyky odvozené od APL: BQN a ivy aneb 1~×`1↓↕10<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-odvozene-od-apl-bqn-a-ivy-aneb-1-1-10/">https://www.root.cz/clanky/programovaci-jazyky-odvozene-od-apl-bqn-a-ivy-aneb-1-1-10/</a>
</li>

<li>Programovací jazyk K: důkaz, že mezi námi žijí mimozemšťané<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane/">https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane/</a>
</li>

<li>Programovací jazyk K: důkaz, že mezi námi žijí mimozemšťané (dokončení)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane-dokonceni/">https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane-dokonceni/</a>
</li>

<li>Programování mainframů: jazyk APL<br />
<a href="https://www.root.cz/clanky/programovani-mainframu-jazyk-apl/">https://www.root.cz/clanky/programovani-mainframu-jazyk-apl/</a>
</li>

<li>Programovací jazyk APL: programování bez smyček<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-apl-programovani-bez-smycek/">https://www.root.cz/clanky/programovaci-jazyk-apl-programovani-bez-smycek/</a>
</li>

<li>Programovací jazyk APL - dokončení<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-apl-dokonceni/">https://www.root.cz/clanky/programovaci-jazyk-apl-dokonceni/</a>
</li>

<li>Oslava 55 let od vzniku první implementace jazyka APL<br />
<a href="https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/">https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/</a>
</li>

</ol>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; na dnešní poměry
relativní malý, dnes má přibližně patnáct až šestnáct megabajtů), můžete
namísto toho použít odkazy na jednotlivé příklady, které naleznete
v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_narray_na32.go</td><td>konstrukce pole s&nbsp;nulovými prvky typu <strong>float32</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/01_narray_na32.go">https://github.com/tisnik/go-root/blob/master/article_95/01_narray_na32.go</a></td></tr>
<tr><td> 2</td><td>02_narray_na64.go</td><td>konstrukce pole s&nbsp;nulovými prvky typu <strong>float64</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/02_narray_na64.go">https://github.com/tisnik/go-root/blob/master/article_95/02_narray_na64.go</a></td></tr>
<tr><td> 3</td><td>03_new_array.go</td><td>konstrukce pole se specifikací hodnot prvků</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/03_new_array.go">https://github.com/tisnik/go-root/blob/master/article_95/03_new_array.go</a></td></tr>
<tr><td> 4</td><td>04_reshape.go</td><td>funkce pro změnu tvaru pole (<i>reshape</i>)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/04_reshape.go">https://github.com/tisnik/go-root/blob/master/article_95/04_reshape.go</a></td></tr>
<tr><td> 5</td><td>05_sum.go</td><td>součet všech prvků pole</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/05_sum.go">https://github.com/tisnik/go-root/blob/master/article_95/05_sum.go</a></td></tr>
<tr><td> 6</td><td>06_prod.go</td><td>součin všech prvků pole</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/06_prod.go">https://github.com/tisnik/go-root/blob/master/article_95/06_prod.go</a></td></tr>
<tr><td> 7</td><td>07_add.go</td><td>součet prvků dvou vektorů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/07_add.go">https://github.com/tisnik/go-root/blob/master/article_95/07_add.go</a></td></tr>
<tr><td> 8</td><td>08_add.go</td><td>součet prvků do s&nbsp;uložením do určeného vektoru</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/08_add.go">https://github.com/tisnik/go-root/blob/master/article_95/08_add.go</a></td></tr>
<tr><td> 9</td><td>09_dot.go</td><td>skalární součin dvou vektorů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/09_dot.go">https://github.com/tisnik/go-root/blob/master/article_95/09_dot.go</a></td></tr>
<tr><td>10</td><td>10_dot.go</td><td>skalární součin tří vektorů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/10_dot.go">https://github.com/tisnik/go-root/blob/master/article_95/10_dot.go</a></td></tr>
<tr><td>11</td><td>11_writefile.go</td><td>serializace pole do souboru</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/11_writefile.go">https://github.com/tisnik/go-root/blob/master/article_95/11_writefile.go</a></td></tr>
<tr><td>12</td><td>12_readfile.go</td><td>deserializace pole ze souboru</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/12_readfile.go">https://github.com/tisnik/go-root/blob/master/article_95/12_readfile.go</a></td></tr>
<tr><td>13</td><td>13_to_json.go</td><td>serializace pole do formátu JSON</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/13_to_json.go">https://github.com/tisnik/go-root/blob/master/article_95/13_to_json.go</a></td></tr>
<tr><td>14</td><td>14_add_constant.go</td><td>funkce pro přičtení konstanty ke všem prvkům pole</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/14_add_constant.go">https://github.com/tisnik/go-root/blob/master/article_95/14_add_constant.go</a></td></tr>
<tr><td>15</td><td>15_add_scaled.go</td><td>kombinace add a add_constant</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/15_add_scaled.go">https://github.com/tisnik/go-root/blob/master/article_95/15_add_scaled.go</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/">https://github.com/tisnik/go-root/blob/master/article_95/</a></td></tr>
<tr><td>17</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/">https://github.com/tisnik/go-root/blob/master/article_95/</a></td></tr>
<tr><td>18</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/">https://github.com/tisnik/go-root/blob/master/article_95/</a></td></tr>
<tr><td>19</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/">https://github.com/tisnik/go-root/blob/master/article_95/</a></td></tr>
<tr><td>20</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_95/">https://github.com/tisnik/go-root/blob/master/article_95/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Package narray<br />
<a href="https://github.com/akualab/narray">https://github.com/akualab/narray</a>
</li>

<li>Dokumentace k&nbsp;balíčku narray/na32<br />
<a href="https://pkg.go.dev/github.com/akualab/narray/na32">https://pkg.go.dev/github.com/akualab/narray/na32</a>
</li>

<li>Dokumentace k&nbsp;balíčku narray/na64<br />
<a href="https://pkg.go.dev/github.com/akualab/narray/na64">https://pkg.go.dev/github.com/akualab/narray/na64</a>
</li>

<li>The Gonum Numerical Computing Package<br />
<a href="https://www.gonum.org/post/introtogonum/">https://www.gonum.org/post/introtogonum/</a>
</li>

<li>Gonum Numerical Packages<br />
<a href="https://www.gonum.org/">https://www.gonum.org/</a>
</li>

<li>Accelerating data processing in Go with SIMD instructions<br />
<a href="https://docs.google.com/presentation/d/1MYg8PyhEf0oIvZ9YU2panNkVXsKt5UQBl_vGEaCeB1k/htmlpresent#!">https://docs.google.com/presentation/d/1MYg8PyhEf0oIvZ9YU2panNkVXsKt5UQBl_vGEaCeB1k/htmlpresent#!</a>
</li>

<li>Programovací jazyk Go a assembler<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-go-a-assembler/">https://www.root.cz/clanky/programovaci-jazyk-go-a-assembler/</a>
</li>

<li>Programovací jazyk Go a assembler (2.část)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-go-a-assembler-2-cast/">https://www.root.cz/clanky/programovaci-jazyk-go-a-assembler-2-cast/</a>
</li>

<li>Programovací jazyk Go a assembler (3.část)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-go-a-assembler-3-cast/">https://www.root.cz/clanky/programovaci-jazyk-go-a-assembler-3-cast/</a>
</li>

<li>Comparison of programming languages (array)<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(array)">https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(array)</a>
</li>

<li>Julia (front page)<br />
<a href="http://julialang.org/">http://julialang.org/</a>
</li>

<li>Julia &ndash; dokumentace<br />
<a href="http://docs.julialang.org/">http://docs.julialang.org/</a>
</li>

<li>Julia &ndash; repositář na GitHubu<br />
<a href="https://github.com/JuliaLang/julia">https://github.com/JuliaLang/julia</a>
</li>

<li>Julia (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29">https://en.wikipedia.org/wiki/Julia_%28programming_language%29</a>
</li>

<li>IJulia<br />
<a href="https://github.com/JuliaLang/IJulia.jl">https://github.com/JuliaLang/IJulia.jl</a>
</li>

<li>Introducing Julia<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia">https://en.wikibooks.org/wiki/Introducing_Julia</a>
</li>

<li>Julia: the REPL<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL">https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL</a>
</li>

<li>Month of Julia<br />
<a href="https://github.com/DataWookie/MonthOfJulia">https://github.com/DataWookie/MonthOfJulia</a>
</li>

<li>Learn X in Y minutes (where X=Julia)<br />
<a href="https://learnxinyminutes.com/docs/julia/">https://learnxinyminutes.com/docs/julia/</a>
</li>

<li>New Julia language seeks to be the C for scientists<br />
<a href="http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html">http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html</a>
</li>

<li>Julia: A Fast Dynamic Language for Technical Computing<br />
<a href="http://karpinski.org/publications/2012/julia-a-fast-dynamic-language">http://karpinski.org/publications/2012/julia-a-fast-dynamic-language</a>
</li>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Wiki<br />
<a href="https://aplwiki.com/wiki/">https://aplwiki.com/wiki/</a>
</li>

<li>The Array Cast<br />
<a href="https://www.arraycast.com/episodes/episode-03-what-is-an-array">https://www.arraycast.com/episodes/episode-03-what-is-an-array</a>
</li>

<li>EnthusiastiCon 2019 &ndash; An Introduction to APL<br />
<a href="https://www.youtube.com/watch?v=UltnvW83_CQ">https://www.youtube.com/watch?v=UltnvW83_CQ</a>
</li>

<li>Dyalog<br />
<a href="https://www.dyalog.com/">https://www.dyalog.com/</a>
</li>

<li>Try APL!<br />
<a href="https://tryapl.org/">https://tryapl.org/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

