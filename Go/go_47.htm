<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Další možnosti nabízené projektem MinIO</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Další možnosti nabízené projektem MinIO</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhém článku o projektu MinIO se seznámíme s&nbsp;některými dalšími vlastnostmi této alternativy k AWS S3. Ukážeme si přístup do úložiště Minia z&nbsp;jazyka Python, popíšeme si možnosti řízení přístupu k objektům a řekneme si, které vlastnosti S3 Minio nepodporuje.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Další možnosti nabízené projektem MinIO</a></p>
<p><a href="#k02">2. Spuštění Minia</a></p>
<p><a href="#k03">3. Nejdůležitější funkce a metody z&nbsp;SDK Minia pro Go</a></p>
<p><a href="#k04">4. Přečtení informací o objektu uloženém v&nbsp;Miniu</a></p>
<p><a href="#k05">5. Přístup do úložiště Minia z&nbsp;aplikací naprogramovaných v&nbsp;Pythonu</a></p>
<p><a href="#k06">6. Vytvoření instance klienta pro připojení k&nbsp;Miniu</a></p>
<p><a href="#k07">7. Nastavení údajů nutných pro připojení k&nbsp;Miniu z&nbsp;příkazového řádku</a></p>
<p><a href="#k08">8. Vytištění všech bucketů, které jsou klientovi dostupné</a></p>
<p><a href="#k09">9. Zjištění základních informací o objektech uložených do zvoleného bucketu</a></p>
<p><a href="#k10">10. Přečtení objektu z&nbsp;Minia a uložení jeho obsahu do souboru</a></p>
<p><a href="#k11">11. Programové přečtení obsahu vybraného objektu</a></p>
<p><a href="#k12">12. Načtení textového obsahu z&nbsp;vybraného objektu</a></p>
<p><a href="#k13">13. Uložení obsahu souboru do Minia</a></p>
<p><a href="#k14">14. Přístupová práva k&nbsp;bucketu</a></p>
<p><a href="#k15">15. Přečtení informací o přístupových právech k&nbsp;bucketu</a></p>
<p><a href="#k16">16. Změna přístupových práv k&nbsp;bucketu</a></p>
<p><a href="#k17">17. Přiřazení verze k&nbsp;objektům, uložení více verzí objektu se stejným jménem</a></p>
<p><a href="#k18">18. Konfigurace životního cyklu objektů</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Další možnosti nabízené projektem MinIO</h2>

<p><a
href="https://www.root.cz/clanky/projekt-minio-jedna-z-nejuzitecnejsich-aplikaci-naprogramovanych-v-go/">V&nbsp;úvodním
článku</a> o projektu MinIO, který vyšel v&nbsp;úterý, jsme se seznámili se
základními koncepty, na nichž je toto objektové úložiště postaveno. Taktéž jsme
si řekli, že MinIO lze ovládat podobným způsobem jako známé cloudové úložiště
<a href="https://aws.amazon.com/s3/">AWS S3</a> (<i>S3=Simple Storage
Service</i>) a je tak možné tento projekt nasadit do privátního clusteru,
použít ho jako lokální úložiště, využít MinIO pro vývoj a testování aplikací,
které v&nbsp;reálném nasazení použijí AWS S3 atd. atd.</p>

<p>Všechny demonstrační příklady ukázané minule byly vyvinuty <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">v&nbsp;programovacím
jazyku Go</a>, což však v&nbsp;žádném případě neznamená, že se jedná o jediný
jazyk, ve kterém mohou být psány aplikace, které k&nbsp;Miniu přistupují.
K&nbsp;dispozici je šest oficiálních klientů pro šest platforem:</p>

<table>
<tr><th>#</th><th>Jazyk/platforma</th><th>Klient</th></tr>
<tr><td>1</td><td>Go</td><td><a href="https://docs.min.io/docs/golang-client-api-reference.html">https://docs.min.io/docs/golang-client-api-reference.html</a></td></tr>
<tr><td>2</td><td>Python</td><td><a href="https://docs.min.io/docs/python-client-api-reference.html">https://docs.min.io/docs/python-client-api-reference.html</a></td></tr>
<tr><td>3</td><td>Java</td><td><a href="https://docs.min.io/docs/java-client-api-reference.html">https://docs.min.io/docs/java-client-api-reference.html</a></td></tr>
<tr><td>4</td><td>.NET</td><td><a href="https://docs.min.io/docs/dotnet-client-api-reference.html">https://docs.min.io/docs/dotnet-client-api-reference.html</a></td></tr>
<tr><td>5</td><td>JavaScript</td><td><a href="https://docs.min.io/docs/javascript-client-api-reference.html">https://docs.min.io/docs/javascript-client-api-reference.html</a></td></tr>
<tr><td>6</td><td>Haskell</td><td><a href="https://docs.min.io/docs/haskell-client-api-reference.html">https://docs.min.io/docs/haskell-client-api-reference.html</a></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: na tomto místě je dobré upozornit na to,
že mezi jednotlivými klienty existují rozdíly. Například některé metody
dostupné pro Go nenajdeme v&nbsp;klientovi pro Python atd. Ovšem všechny
základní operace popsané dnes i minule, jsou podporovány napříč
jazyky/platformami.</div></p>

<a href="https://www.root.cz/obrazek/400165/"><img src="https://i.iinfo.cz/images/322/minio2-1-prev.png" class="image-400165" alt="&#160;" width="370" height="137" /></a>
<p><i>Obrázek 1: Služba MinIO aktivně upozorňuje administrátory ve chvíli, kdy
se pokouší pracovat se starší verzí, což nastalo i v&nbsp;našem případě &ndash;
verze, která byla ještě v&nbsp;době vydání první verze článku aktuální, je dnes
již považována za zastaralou a je nabídnuta možnost reinstalace (která je
mimochodem bezproblémová).</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Spuštění Minia</h2>

<p>Všechny dnes ukázané demonstrační příklady vyžadují, aby na systému běžela
instance služby Minia s&nbsp;nastaveným úložištěm. Minio lze spustit
z&nbsp;Dockeru (k&nbsp;dispozici je oficiální obraz) či přímo s&nbsp;využitím
binárního spustitelného souboru &ndash; viz popis instalace uvedený minule:</p>

<pre>
$ <strong>./minio server /tmp/minio/</strong>
&nbsp;
Endpoint:  http://10.0.0.29:9000  http://127.0.0.1:9000        
AccessKey: <strong>WDGGENVCJDQVFM3TBM88 </strong>
SecretKey: <strong>8YxAW5qxYKBzo7qLGuqxuVDwK5NekY2k7v9ZIZ9C </strong>
&nbsp;
Browser Access:
   http://10.0.0.29:9000  http://127.0.0.1:9000        
&nbsp;
Command-line Access: https://docs.min.io/docs/minio-client-quickstart-guide
   $ mc config host add myminio http://10.0.0.29:9000 WDGGENVCJDQVFM3TBM88 8YxAW5qxYKBzo7qLGuqxuVDwK5NekY2k7v9ZIZ9C
&nbsp;
Object API (Amazon S3 compatible):
   Go:         https://docs.min.io/docs/golang-client-quickstart-guide
   Java:       https://docs.min.io/docs/java-client-quickstart-guide
   Python:     https://docs.min.io/docs/python-client-quickstart-guide
   JavaScript: https://docs.min.io/docs/javascript-client-quickstart-guide
   .NET:       https://docs.min.io/docs/dotnet-client-quickstart-guide
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Nejdůležitější funkce a metody z&nbsp;SDK Minia pro Go</h2>

<p><a
href="https://www.root.cz/clanky/projekt-minio-jedna-z-nejuzitecnejsich-aplikaci-naprogramovanych-v-go/">V&nbsp;úvodním
článku o Miniu</a> jsme se seznámili s&nbsp;některými funkcemi a metodami
nabízenými SDK určeným pro programovací jazyk Go. Připomeňme si ve stručnosti,
o jaké funkce a metody se jednalo:</p>

<table>
<tr><th>#</th><th>Funkce/metoda</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>minio.New</td><td>vytvoří novou instanci klienta, který reprezentuje připojení k&nbsp;Miniu (ostatní metody tuto instanci používají jako příjemce &ndash; <i>receiver</i>)</td></tr>
<tr><td>2</td><td>minio.Client.ListBuckets</td><td>získání seznamu všech dostupných bucketů</td></tr>
<tr><td>3</td><td>minio.Client.ListObjects</td><td>získání seznamu objektů v&nbsp;určitém bucketu</td></tr>
<tr><td>4</td><td>minio.Client.GetObject</td><td>přečtení obsahu vybraného objektu, obsah je reprezentován objektem <strong>Reader</strong></td></tr>
<tr><td>5</td><td>minio.Client.FGetObject</td><td>uložení obsahu vybraného objektu z&nbsp;úložiště do lokálního souboru</td></tr>
<tr><td>6</td><td>minio.Client.FPutObject</td><td>kopie dat ze souboru do vybraného objektu v&nbsp;úložišti</td></tr>
<tr><td>7</td><td>minio.Client.CopyObject</td><td>kopie objektu v&nbsp;rámci úložiště (i mezi různými buckety)</td></tr>
</table>

<p>Funkce <strong>minio.New</strong> vytvoří novou instanci klienta, který
reprezentuje připojení k&nbsp;Miniu (tedy ke službě obsluhující úložiště). Je
možné, aby se v&nbsp;jedné aplikaci použilo větší množství klientů, protože se
například může jednat o implementaci message brokera s&nbsp;více úložišti,
synchronizační službu atd.:</p>

<pre>
minioClient, err := <strong>minio.New(endpoint, accessKeyID, secretAccessKey, useSSL)</strong>
if err != nil {
        log.Fatalln(err)
}
</pre>

<p>Dále jsme si popsali metodu nazvanou
<strong>minio.Client.ListBucket</strong>, která vrátí seznam všech dostupných
bucketů. Použití této metody je většinou snadné (i když je nutné kontrolovat,
zda nedošlo k&nbsp;chybě):</p>

<pre>
fmt.Println("List of buckets:")
&nbsp;
buckets, err := <strong>minioClient.ListBuckets()</strong>
if err != nil {
        log.Fatalln(err)
        return
}
for i, bucket := range buckets {
        fmt.Printf("%d\t%+v\n", i, bucket)
}
</pre>

<p>Třetí důležitou metodou je metoda pojmenovaná
<strong>minio.Client.ListObjects</strong> sloužící pro získání seznamu objektů
v&nbsp;určitém bucketu. Ovšem tato metoda nabízí i další možnosti použití,
protože lze specifikovat prefix klíče objektu a taktéž příznak, zda se má
vyhledávání provádět rekurzivně. Navíc tato metoda používá i kanál
(<i>channel</i>) pro oznámení, že již došlo k&nbsp;ukončení vyhledávání:</p>

<pre>
fmt.Println("List of objects for bucket:", bucket)
&nbsp;
done := make(chan struct{})
defer close(done)
&nbsp;
objects := <strong>minioClient.ListObjects(bucket, prefix, false, done)</strong>
for object := range objects {
        if object.Err != nil {
                log.Println(object.Err)
                return
        }
        <strong>fmt.Printf("Key: %s,  Size: %d,  Tag: %s\n", object.Key, object.Size, object.ETag)</strong>
}
</pre>

<p>Další metoda se jmenuje <strong>minio.Client.FGetObject</strong> a slouží
pro přečtení obsahu vybraného objektu a uložení tohoto obsahu do lokálního
souboru:</p>

<pre>
err = <strong>minioClient.FGetObject("foo", "logos.jpg", "logos.jpg", minio.GetObjectOptions{})</strong>
if err != nil {
        log.Fatalln(err)
}
</pre>

<p>Opakem metody <strong>minio.Client.FGetObject</strong> je metoda
<strong>minio.Client.FPutObject</strong>, která naopak obsah lokálního souboru
přenese do úložiště pod zadaným jménem bucketu a klíče (=jména objektu):</p>

<pre>
length, err := <strong>minioClient.FPutObject("foo", "minio9.go", "minio9.go", minio.PutObjectOptions{</strong>
        <strong>ContentType: "text/plain;charset=UTF-8",</strong>
})
if err != nil {
        fmt.Println(err)
}
</pre>

<p>A nakonec nesmíme zapomenout na metodu
<strong>minio.Client.GetObject</strong>, která slouží pro přečtení obsahu
objektu. Z&nbsp;pohledu aplikace se vrací objekt implementující rozhraní
<strong>Reader</strong>, takže lze použít prakticky všechny funkce, které
s&nbsp;Readerem pracují (včetně komprimace streamu atd. atd.):</p>

<pre>
object, err := <strong>minioClient.GetObject(bucket, objectName, minio.GetObjectOptions{})</strong>
if err != nil {
        log.Fatalln(err)
}
defer object.Close()
&nbsp;
bytes, err := ioutil.ReadAll(object)
if err != nil {
        log.Fatalln(err)
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Přečtení informací o objektu uloženém v&nbsp;Miniu</h2>

<p>V&nbsp;některých případech je nutné zjistit informace o objektu, který je
v&nbsp;Miniu uložen. Připomeňme si, že objekt je určen jménem bucketu a klíčem
(což je taktéž jméno), přičemž na jména bucketů jsou kladena podobná omezení,
jako na URL či cesty v&nbsp;adresářové struktuře. Samotný objekt přitom není
reprezentován pouze svým obsahem (sekvence bajtů), ale i dalšími metadaty,
typicky příznaky přístupu, časovými razítky, určením typu dat
(<i>content-type</i>) a v&nbsp;S3 i verzí (což je ovšem vlastnost, kterou Minio
prozatím nepodporuje). Pro přečtení těchto informací slouží metoda
<strong>minio.Client.StatObject</strong>:</p>

<table>
<tr><th>#</th><th>Funkce/metoda</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>minio.Client.StatObject</td><td>získání podrobnějších informací o objektu</td></tr>
</table>

<p>Přečtení informací o objektu je jednoduché, pouze nesmíme zapomenout na
správnou reakci na případný chybový stav:</p>

<pre>
info, err := minioClient.StatObject(bucket, name, minio.StatObjectOptions{})
if err != nil {
        log.Fatalln(err)
}
</pre>

<p>Nejprve se podívejme na zdrojový kód demonstračního příkladu, posléze si
ukážeme, jaké informace jsme získali:</p>

<pre>
package <strong>main</strong>
&nbsp;  
import (
        "flag"
        "fmt"
        "github.com/minio/minio-go/v6"
        "log"
)
&nbsp;  
func <strong>listBuckets</strong>(minioClient *minio.Client) {
        fmt.Println("List of buckets:")
&nbsp;  
        buckets, err := minioClient.ListBuckets()
        if err != nil {
                log.Fatalln(err)
                return
        }
        for i, bucket := range buckets {
                fmt.Printf("%d\t%+v\n", i, bucket)
        }
}
&nbsp;  
func <strong>getObjectInfo</strong>(minioClient *minio.Client, bucket string, name string) {
        fmt.Printf("Info for object %s in bucket %s\n", name, bucket)
&nbsp;  
        info, err := minioClient.StatObject(bucket, name, minio.StatObjectOptions{})
        if err != nil {
                log.Fatalln(err)
        }
&nbsp;  
        fmt.Printf("Key:          %s\nSize:         %d\nTag:          %s\nContent-type: %s\n", info.Key, info.Size, info.ETag, info.ContentType)
}
&nbsp;  
func <strong>main</strong>() {
        var endpoint = flag.String("endpoint", "127.0.0.1:9000", "MinIO service endpoint")
        var accessKeyID = flag.String("accessKeyID", "", "Access key ID for MinIO")
        var secretAccessKey = flag.String("secretAccessKey", "", "Secret access key for MinIO")
        var useSSL = flag.Bool("useSSL", false, "Use SSL for communication with MinIO")
        flag.Parse()
&nbsp;  
        <i>// initialize minio client object</i>
        minioClient, err := minio.New(*endpoint, *accessKeyID, *secretAccessKey, *useSSL)
        if err != nil {
                log.Fatalln(err)
        }
&nbsp;  
        <i>// everything seems to be ok</i>
        log.Printf("%#v\n", minioClient)
&nbsp;  
        listBuckets(minioClient)
        fmt.Println()
        getObjectInfo(minioClient, "foo", "minio9.go")
        fmt.Println()
        getObjectInfo(minioClient, "foo", "logos.jpg")
        fmt.Println()
        getObjectInfo(minioClient, "foo", "something_else")
}
</pre>

<p>Po spuštění tohoto příkladu by se měly zobrazit informace o dvou
existujících objektech se jmény &bdquo;minio9.go&ldquo; a
&bdquo;logos.jpg&ldquo; a o neexistujícím objektu
&bdquo;something_else&ldquo;:</p>

<pre>
$ <strong>./minio11 -accessKeyID=3V8WMANF061SGOIVR7AA -secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE</strong>
&nbsp;
2019/12/17 10:28:06 &amp;minio.Client{endpointURL:(*url.URL)(0xc000172000), credsProvider:(*credentials.Credentials)(0xc0000ac7e0), overrideSignerType:0, appInfo:struct { appName string; appVersion string }{appName:"", appVersion:""}, secure:false, httpClient:(*http.Client)(0xc0000938c0), bucketLocCache:(*minio.bucketLocationCache)(0xc00009e780), isTraceEnabled:false, traceErrorsOnly:false, traceOutput:io.Writer(nil), s3AccelerateEndpoint:"", region:"", random:(*rand.Rand)(0xc000093920), lookup:0}
List of buckets:
0       {Name:bar CreationDate:2019-12-14 10:30:57.918 +0000 UTC}
1       {Name:foo CreationDate:2019-12-14 17:13:38.282 +0000 UTC}
&nbsp;
Info for object minio9.go in bucket foo
Key:          minio9.go
Size:         1304
Tag:          34a37b73d9402b51201f42569f506d4b-1
Content-type: text/plain;charset=UTF-8
&nbsp;
Info for object logos.jpg in bucket foo
Key:          logos.jpg
Size:         48913
Tag:          f95e4a85dafc56313883f8571cfc8143-1
Content-type: image/jpeg
&nbsp;
Info for object something_else in bucket foo
2019/12/17 10:28:06 The specified key does not exist.
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se zobrazil klíč
objektu, jeho tag (ve skutečnosti MD5 heš) a především pak typ obsahu, který je
ovšem nutné nastavit při zakládání objektu.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Přístup do úložiště Minia z&nbsp;aplikací naprogramovaných v&nbsp;Pythonu</h2>

<p>Ve druhé části dnešního článku si ukážeme, jakým způsobem lze přistupovat do
úložiště Minia z&nbsp;aplikací, které jsou naprogramované <a
href="https://www.root.cz/n/python/">v&nbsp;Pythonu</a>. Uvidíme, že až na
několik rozdílů je přístup z&nbsp;Pythonu prakticky totožný, jako přístup
z&nbsp;aplikací naprogramovaných v&nbsp;jazyku Go, pochopitelně
s&nbsp;přihlédnutím k&nbsp;tomu, že v&nbsp;Pythonu se používají odlišné jmenné
konvence, než je tomu v&nbsp;Go. Taktéž se liší způsob zpracování chyb &ndash;
v&nbsp;Pythonu se používají klasické výjimky, zatímco Go se spoléhá na
struktury typu <strong>error</strong>.</p>

<p>Před spuštěním demonstračních příkladů zmíněných v&nbsp;navazujících
kapitolách je nutné mít nainstalován Pythonovský balíček nazvaný jednoduše
<strong>minio</strong>. Tento balíček je <a
href="https://pypi.org/project/minio/">dostupný</a> na <a
href="https://pypi.org/">PyPi</a>, takže je jeho instalace jednoduchá.
Použijeme nástroj <strong>pip3</strong> určený pro Python 3 (protože pro <a
href="https://www.python.org/downloads/release/python-2716/">Python 2</a> se
již <a href="https://pythonclock.org/">odpočítává posledních několik dnů
jeho oficiální podpory</a>):</p>

<pre>
$ <strong>pip3 install --user minio</strong>
&nbsp;
Collecting minio
  Downloading https://files.pythonhosted.org/packages/14/46/60bff78df1b112cc50f95c5ffb2e14aaf9aa279a5219845b55c56f214383/minio-5.0.5-py2.py3-none-any.whl      (62kB)
      100% |████████████████████████████████| 71kB 1.7MB/s
      Requirement already satisfied: certifi in /usr/lib/python3.7/site-packages (from minio)
      Requirement already satisfied: urllib3 in /usr/lib/python3.7/site-packages (from minio)
      Requirement already satisfied: pytz in /usr/lib/python3.7/site-packages (from minio)
      Requirement already satisfied: python-dateutil in ./.local/lib/python3.7/site-packages (from minio)
      Requirement already satisfied: six&gt;=1.5 in ./.local/lib/python3.7/site-packages (from python-dateutil-&gt;minio)
      Installing collected packages: minio
      Successfully installed minio-5.0.5
</pre>

<p>Většina funkcí a metod, které jsme si již popsali v&nbsp;souvislosti
s&nbsp;SDK pro programovací jazyk Go, existuje i v&nbsp;Pythonu. Ovšem kvůli
tomu, že jmenné konvence jsou v&nbsp;Pythonu odlišné a liší se i možnosti
volání funkcí/metod (nepovinné parametry atd.), je ovládání Minia
z&nbsp;Pythonu poněkud rozdílné. Ostatně se stačí podívat na následující
tabulku s&nbsp;porovnáním jmen funkcí/metod v&nbsp;jazyku Go a jazyku
Python:</p>

<table>
<tr><th>#</th><th>Funkce/metoda v&nbsp;Go</th><th>Funkce/metoda v&nbsp;Pythonu</th></tr>
<tr><td>1</td><td>minio.New (konstruktor)</td><td>minio.Minio (de facto konstruktor)</td></tr>
<tr><td>2</td><td>minio.Client.ListBuckets</td><td>minio.Minio.list_buckets</td></tr>
<tr><td>3</td><td>minio.Client.ListObjects</td><td>minio.Minio.list_objects</td></tr>
<tr><td>4</td><td>minio.Client.GetObject</td><td>minio.Minio.get_object</td></tr>
<tr><td>5</td><td>minio.Client.FGetObject</td><td>minio.Minio.fget_object</td></tr>
<tr><td>6</td><td>minio.Client.FPutObject</td><td>minio.Minio.fput_object</td></tr>
<tr><td>7</td><td>minio.Client.CopyObject</td><td>minio.Minio.copy_object</td></tr>
<tr><td>8</td><td>minio.Client.StatObject</td><td>minio.Minio.stat_object</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: v&nbsp;předchozí tabulce jsou vypsány
pouze ty funkce, které jsou skutečně v&nbsp;demonstračních příkladech
použity.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vytvoření instance klienta pro připojení k&nbsp;Miniu</h2>

<p>Nejprve si ukažme aplikaci, které pouze vytvoří instanci klienta sloužícího
pro připojení k&nbsp;Miniu. Jedná se o obdobu <a
href="https://github.com/tisnik/go-root/blob/master/article_46/minio01/minio1.go">prvního
demonstračního příkladu z&nbsp;předchozího článku</a>:</p>

<pre>
from minio import Minio
from minio.error import ResponseError
&nbsp;
endpoint = "127.0.0.1:9000"
accessKeyID = "3V8WMANF061SGOIVR7AA"
secretAccessKey = "AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE"
useSSL = True
&nbsp;
minioClient = Minio(endpoint,
                    access_key=accessKeyID,
                    secret_key=secretAccessKey,
                    secure=useSSL)
&nbsp;
print(minioClient)
</pre>

<p>Po spuštění se pouze zobrazí základní informace o nově vytvořeném objektu, a
to bez toho, aby se  klient pokoušel o připojení k&nbsp;Miniu:</p>

<pre>
$ <strong>python3 minio1.py</strong>
&nbsp;
&lt;minio.api.Minio object at 0x7fa8955c5550&gt;
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Nastavení údajů nutných pro připojení k&nbsp;Miniu z&nbsp;příkazového řádku</h2>

<p>Předchozí demonstrační příklad náležitě upravíme, a to takovým způsobem, aby
se údaje nutné pro připojení do služby Minio získávaly z&nbsp;příkazového
řádku. Pro tento účel použijeme standardní balíček <strong>argparse</strong>,
který se však používá odlišným způsobem, než balíček <strong>flag</strong>
v&nbsp;jazyce Go:</p>

<pre>
import argparse
&nbsp;
from minio import Minio
from minio.error import ResponseError
&nbsp;
&nbsp;
parser = argparse.ArgumentParser()
parser.add_argument("--endpoint", default="127.0.0.1:9000",
                    help="MinIO service endpoint")
parser.add_argument("--accessKeyID", default="",
                    help="Access key ID for MinIO")
parser.add_argument("--secretAccessKey", default="",
                    help="Secret access key for MinIO")
parser.add_argument("--enable-ssl", dest="useSSL", action="store_true",
                    help="Use SSL for communication with MinIO")
parser.add_argument("--disable-ssl", dest="useSSL", action="store_false",
                    help="Don't SSL for communication with MinIO")
args = parser.parse_args()
&nbsp;
minioClient = Minio(args.endpoint,
                    access_key=args.accessKeyID,
                    secret_key=args.secretAccessKey,
                    secure=args.useSSL)
&nbsp;
print(minioClient)
</pre>

<p>Opět si můžeme ukázat chování příkladu po jeho spuštění, tentokrát se
specifikací všech potřebných údajů:</p>

<pre>
$ <strong>python3 minio2.py --accessKeyID=3V8WMANF061SGOIVR7AA --secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE --disable-ssl</strong>
&nbsp;
&lt;minio.api.Minio object at 0x7fec0933c710&gt;
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vytištění všech bucketů, které jsou klientovi dostupné</h2>

<p>Třetí demonstrační příklad naprogramovaný v&nbsp;Pythonu rozšíříme takovým
způsobem, aby se vypsaly všechny <i>buckety</i>, které jsou v&nbsp;Miniu
uloženy a jsou dostupné pro zvoleného uživatele (specifikovaného klíčem).
Použijeme metodu <strong>list_buckets</strong>, která vrátí seznam
<i>bucketů</i> (chyba je zde hlášena formou výjimky, na rozdíl od Go):</p>

<pre>
import argparse
&nbsp;
from minio import Minio
from minio.error import ResponseError
&nbsp;
&nbsp;
def <strong>list_buckets</strong>(minioClient):
    buckets = minioClient.list_buckets()
    for bucket in buckets:
        print(bucket.name, bucket.creation_date)
&nbsp;
&nbsp;
parser = argparse.ArgumentParser()
parser.add_argument("--endpoint", default="127.0.0.1:9000",
                    help="MinIO service endpoint")
parser.add_argument("--accessKeyID", default="",
                    help="Access key ID for MinIO")
parser.add_argument("--secretAccessKey", default="",
                    help="Secret access key for MinIO")
parser.add_argument("--enable-ssl", dest="useSSL", action="store_true",
                    help="Use SSL for communication with MinIO")
parser.add_argument("--disable-ssl", dest="useSSL", action="store_false",
                    help="Don't SSL for communication with MinIO")
args = parser.parse_args()
&nbsp;
minioClient = Minio(args.endpoint,
                    access_key=args.accessKeyID,
                    secret_key=args.secretAccessKey,
                    secure=args.useSSL)
list_buckets(minioClient)
</pre>

<p>Příklad výstupu pro platné klíče a existující úložiště:</p>

<pre>
$ <strong>python3 minio3.py --accessKeyID=3V8WMANF061SGOIVR7AA --secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE --disable-ssl</strong>
&nbsp;
bar 2019-12-14 10:30:57.918000+00:00
foo 2019-12-14 17:13:38.282000+00:00
</pre>

<p>Chyba v&nbsp;případě, že je zadán neplatný klíč:</p>

<pre>
$ <strong>python3 minio3.py --accessKeyID=3V8WMANF061SGOIVR7AA --secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIl --disable-ssl</strong>
&nbsp;
Traceback (most recent call last):
  File "minio3.py", line 30, in <module>
    list_buckets(minioClient)
  File "minio3.py", line 8, in list_buckets
    buckets = minioClient.list_buckets()
  File "/home/ptisnovs/.local/lib/python3.7/site-packages/minio/api.py", line 385, in list_buckets
    raise ResponseError(response, method).get_exception()
minio.error.SignatureDoesNotMatch: SignatureDoesNotMatch: message: The request signature we calculated does not match the signature you provided.
</pre>

<p>Chyba v&nbsp;případě, že vyžadujeme připojení přes SSL/TSL, ovšem služba je
nakonfigurována odlišným způsobem:</p>

<pre>
$ <strong>python3 minio3.py --accessKeyID=3V8WMANF061SGOIVR7AA --secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE --enable-ssl</strong>
&nbsp;
Traceback (most recent call last):
...
...
...
urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='127.0.0.1', port=9000): Max retries exceeded with url: / (Caused by SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:866)'),))
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Zjištění základních informací o objektech uložených do zvoleného bucketu</h2>

<p>Další skript je obdobou <a
href="https://github.com/tisnik/go-root/blob/master/article_46/minio03/minio3.go">třetího
příkladu z&nbsp;předchozího článku</a>. Po jeho spuštění se vypíšou všechny
objekty uložené ve zvoleném bucketu. Pro získání seznamu objektů se používá
metoda <strong>list_objects</strong> objektu typu <strong>Minio</strong>:</p>

<pre>
import argparse
&nbsp;
from minio import Minio
from minio.error import ResponseError
&nbsp;
&nbsp;&nbsp;
def <strong>list_buckets</strong>(minioClient):
    buckets = minioClient.list_buckets()
    for bucket in buckets:
        print(bucket.name, bucket.creation_date)
&nbsp;
&nbsp;
def <strong>list_objects</strong>(minioClient, bucket):
    print("List of objects for bucket:", bucket)
    objects = minioClient.list_objects(bucket, prefix="", recursive=False)
    for object in objects:
        print(object.bucket_name, object.last_modified, object.etag,
              object.size, object.object_name)
&nbsp;
&nbsp;
parser = argparse.ArgumentParser()
parser.add_argument("--endpoint", default="127.0.0.1:9000",
                    help="MinIO service endpoint")
parser.add_argument("--accessKeyID", default="",
                    help="Access key ID for MinIO")
parser.add_argument("--secretAccessKey", default="",
                    help="Secret access key for MinIO")
parser.add_argument("--enable-ssl", dest="useSSL", action="store_true",
                    help="Use SSL for communication with MinIO")
parser.add_argument("--disable-ssl", dest="useSSL", action="store_false",
                    help="Don't SSL for communication with MinIO")
args = parser.parse_args()
&nbsp;
minioClient = Minio(args.endpoint,
                    access_key=args.accessKeyID,
                    secret_key=args.secretAccessKey,
                    secure=args.useSSL)
list_buckets(minioClient)
list_objects(minioClient, "foo")
</pre>

<p>Následuje ukázka, jakým způsobem se informace o objektech vypíšou. Nejprve
je vypsáno jméno bucketu, potom čas modifikace objektu, MD5 heš, velikost
objektu v&nbsp;bajtech a nakonec i jméno objektu:</p>

<pre>
$ <strong>python3 minio4.py --accessKeyID=3V8WMANF061SGOIVR7AA --secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE --disable-ssl</strong>
&nbsp;
bar 2019-12-14 10:30:57.918000+00:00
foo 2019-12-14 17:13:38.282000+00:00
&nbsp;
List of objects for bucket: foo
foo 2019-12-14 12:01:10.533000+00:00 f95e4a85dafc56313883f8571cfc8143-1 48913 logos.jpg
foo 2019-12-14 17:13:38.282000+00:00 f3025fabac6f9648eb6408911379b595-1 1304 minio10.go
foo 2019-12-14 17:09:38.517000+00:00 34a37b73d9402b51201f42569f506d4b-1 1304 minio9.go
foo 2019-12-14 16:10:38.411000+00:00 f2042bf5780d07253480fb8c64c60850-1 56 t.go
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Přečtení objektu z&nbsp;Minia a uložení jeho obsahu do souboru</h2>

<p>V&nbsp;dalším demonstračním příkladu se setkáme s&nbsp;metodou nazvanou
<strong>fget_object</strong>, která je určena pro přečtení obsahu objektu a
jeho uložení do lokálního souboru. Této metodě, která je obdobou Go metody
<strong>FGetObject</strong>, je nutné předat název bucketu, klíč objektu, jméno
lokálního souboru a popř.&nbsp;další parametry předané v&nbsp;nepovinných
argumentech:</p>

<pre>
import argparse
&nbsp;
from minio import Minio
from minio.error import ResponseError
&nbsp;
&nbsp;
parser = argparse.ArgumentParser()
parser.add_argument("--endpoint", default="127.0.0.1:9000",
                    help="MinIO service endpoint")
parser.add_argument("--accessKeyID", default="",
                    help="Access key ID for MinIO")
parser.add_argument("--secretAccessKey", default="",
                    help="Secret access key for MinIO")
parser.add_argument("--enable-ssl", dest="useSSL", action="store_true",
                    help="Use SSL for communication with MinIO")
parser.add_argument("--disable-ssl", dest="useSSL", action="store_false",
                    help="Don't SSL for communication with MinIO")
args = parser.parse_args()
&nbsp;
minioClient = Minio(args.endpoint,
                    access_key=args.accessKeyID,
                    secret_key=args.secretAccessKey,
                    secure=args.useSSL)
&nbsp;
minioClient.fget_object("foo", "logos.jpg", "logos.jpg")
</pre>

<p>Po spuštění tohoto příkladu by se měl v&nbsp;aktuálním adresáři objevit
soubor se jménem &bdquo;logos.go&ldquo; obsahující šestici log programovacího
jazyka Go:</p>

<pre>
$ <strong>python3 minio6.py --accessKeyID=3V8WMANF061SGOIVR7AA --secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE --disable-ssl</strong>
</pre>

<p>Pro jistotu se o výsledku přesvědčíme:</p>

<pre>
$ <strong>file logos.jpg </strong>
&nbsp;
logos.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 1600x878, frames 3
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Programové přečtení obsahu vybraného objektu</h2>

<p>Ve chvíli, kdy je nutné obsah objektu z&nbsp;úložiště přečíst a nějakým
způsobem zpracovat, použijeme namísto metody <strong>fget_object</strong>
metodu nazvanou <strong>get_object</strong> (tedy bez &bdquo;f&ldquo; na
začátku). Tato metoda umožňuje, aby se s&nbsp;její návratovou hodnotou
pracovalo stejným způsobem, jakoby se jednalo o otevřený soubor:</p>

<pre>
import argparse
&nbsp;
from minio import Minio
from minio.error import ResponseError
&nbsp;
&nbsp;
def <strong>print_object</strong>(minioClient, bucket, object_name):
    try:
        data = minioClient.get_object(bucket, object_name)
        for line in data.readlines():
            print(line)
    except ResponseError as err:
        print(err)
&nbsp;
&nbsp;
parser = argparse.ArgumentParser()
parser.add_argument("--endpoint", default="127.0.0.1:9000",
                    help="MinIO service endpoint")
parser.add_argument("--accessKeyID", default="",
                    help="Access key ID for MinIO")
parser.add_argument("--secretAccessKey", default="",
                    help="Secret access key for MinIO")
parser.add_argument("--enable-ssl", dest="useSSL", action="store_true",
                    help="Use SSL for communication with MinIO")
parser.add_argument("--disable-ssl", dest="useSSL", action="store_false",
                    help="Don't SSL for communication with MinIO")
args = parser.parse_args()
&nbsp;
minioClient = Minio(args.endpoint,
                    access_key=args.accessKeyID,
                    secret_key=args.secretAccessKey,
                    secure=args.useSSL)

print_object(minioClient, "foo", "t.go")
</pre>

<p>Po spuštění tohoto demonstračního příkladu ovšem zjistíme, že je obsah
zpracováván jako pole bajtů, nikoli jako skutečné (Unicode) řetězce:</p>

<pre>
$ <strong>python3 minio7.py --accessKeyID=3V8WMANF061SGOIVR7AA --secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE --disable-ssl</strong>
&nbsp;
b'package main\n'
b'\n'
b'func main() {\n'
b'\tprintln(`foo "bar" baz`)\n'
b'}\n'
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Načtení textového obsahu z&nbsp;vybraného objektu</h2>

<p>Ve chvíli, kdy objekt obsahuje textová data, je nutné provést (alespoň
v&nbsp;Pythonu 3) jejich dekódování do řetězce, a to konkrétně s&nbsp;využitím
metody <strong>decode</strong>. V&nbsp;případě objektu obsahujícího zdrojové
kódy v&nbsp;Go je situace jednoduchá, protože kódování je definitoricky
nastaveno na UTF-8:</p>

<pre>
data = minioClient.get_object(bucket, object_name)
for line in data.readlines():
    print(<strong>line.decode('utf-8')[:-1]</strong>)
</pre>

<p><div class="rs-tip-major">Poznámka: pomocí <strong>[:-1]</strong> zajistíme
odstranění konce řádku, neboť ten je tištěn automaticky funkcí
<strong>print</strong>.</div></p>

<p>Dekódování by mělo zajistit, že se obsah vybraného objektu skutečně zpracuje
(zde jen vytiskne) jako sekvence textových řádků a nikoli sekvence polí
bajtů:</p>

<pre>
$ <strong>python3 minio7B.py --accessKeyID=3V8WMANF061SGOIVR7AA --secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE --disable-ssl</strong>
package main
&nbsp;
func main() {
        println(`foo "bar" baz`)
}
</pre>

<p>Opět se podívejme na kompletní zdrojový kód demonstračního příkladu, který
výše popsané dekódování používá:</p>

<pre>
import argparse
&nbsp;
from minio import Minio
from minio.error import ResponseError
&nbsp;
&nbsp;
def <strong>print_object</strong>(minioClient, bucket, object_name):
    try:
        data = minioClient.get_object(bucket, object_name)
        for line in data.readlines():
            print(line.decode('utf-8')[:-1])
    except ResponseError as err:
        print(err)
&nbsp;
&nbsp;
parser = argparse.ArgumentParser()
parser.add_argument("--endpoint", default="127.0.0.1:9000",
                    help="MinIO service endpoint")
parser.add_argument("--accessKeyID", default="",
                    help="Access key ID for MinIO")
parser.add_argument("--secretAccessKey", default="",
                    help="Secret access key for MinIO")
parser.add_argument("--enable-ssl", dest="useSSL", action="store_true",
                    help="Use SSL for communication with MinIO")
parser.add_argument("--disable-ssl", dest="useSSL", action="store_false",
                    help="Don't SSL for communication with MinIO")
args = parser.parse_args()
&nbsp;
minioClient = Minio(args.endpoint,
                    access_key=args.accessKeyID,
                    secret_key=args.secretAccessKey,
                    secure=args.useSSL)
&nbsp;
print_object(minioClient, "foo", "t.go")
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Uložení obsahu souboru do Minia</h2>

<p>V&nbsp;posledním příkladu naprogramovaném v&nbsp;Pythonu použijeme metodu
<strong>fput_object</strong> pro uložení obsahu lokálního souboru do úložiště
Minia. V&nbsp;tomto konkrétním případě do Minia pošleme přímo zdrojové kódy
spuštěného  skriptu:</p>

<pre>
import argparse
&nbsp;
from minio import Minio
from minio.error import ResponseError
&nbsp;
&nbsp;
parser = argparse.ArgumentParser()
parser.add_argument("--endpoint", default="127.0.0.1:9000",
                    help="MinIO service endpoint")
parser.add_argument("--accessKeyID", default="",
                    help="Access key ID for MinIO")
parser.add_argument("--secretAccessKey", default="",
                    help="Secret access key for MinIO")
parser.add_argument("--enable-ssl", dest="useSSL", action="store_true",
                    help="Use SSL for communication with MinIO")
parser.add_argument("--disable-ssl", dest="useSSL", action="store_false",
                    help="Don't SSL for communication with MinIO")
args = parser.parse_args()
&nbsp;
minioClient = Minio(args.endpoint,
                    access_key=args.accessKeyID,
                    secret_key=args.secretAccessKey,
                    secure=args.useSSL)
&nbsp;
minioClient.fput_object("foo", "minio9.py", "minio9.py", content_type="text/plain")
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Přístupová práva k&nbsp;bucketu</h2>

<p>Z&nbsp;webového rozhraní lze nastavit základní přístupová práva
k&nbsp;vybranému bucketu:</p>

<a href="https://www.root.cz/obrazek/400166/"><img src="https://i.iinfo.cz/images/322/minio2-2-prev.png" class="image-400166" alt="&#160;" width="370" height="167" /></a>
<p><i>Obrázek 2: Dvojice bucketů vytvořených v&nbsp;rámci předchozího článku.</i></p>

<img src="https://i.iinfo.cz/images/322/minio2-3.png" class="image-400167" alt="&#160;" width="618" height="182" />
<p><i>Obrázek 3: Dialog pro nastavení přístupových práv k&nbsp;bucketu může být
poněkud matoucí. Poslední řádek není ukládán, slouží pro nastavení nových
práv.</i></p>

<img src="https://i.iinfo.cz/images/322/minio2-4.png" class="image-400168" alt="&#160;" width="618" height="228" />
<p><i>Obrázek 4: Takto vypadají konkrétně nastavená práva.</i></p>

<p>Ve skutečnosti jsou ovšem přístupová práva přiřazována pro jednotlivé
operace:</p>

<ol>
<li>PutObject</li>
<li>DeleteObject</li>
<li>GetBucketLocation</li>
<li>ListBucketMultipartUploads</li>
<li>AbortMultipartUpload</li>
</ol>

<p>atd. Tato práva lze nastavit metodou <strong>SetBucketPolicy</strong> a
přečíst metodou <strong>GetBucketPolicy</strong>, což je téma, kterému se
budeme věnovat v&nbsp;navazujících dvou kapitolách.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Přečtení informací o přístupových právech k&nbsp;bucketu</h2>

<p>Ve třetí části článku se budeme věnovat některým dalším užitečným funkcím a
metodám, tentokrát opět při použití klienta resp.&nbsp;aplikace vytvářené
v&nbsp;programovacím jazyce Go. Použijeme zde metodu nazvanou
<strong>GetBucketPolicy</strong>, která vrátí informace o přístupových právech
k&nbsp;objektům v&nbsp;zadaném bucketu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "flag"
        "fmt"
        "github.com/minio/minio-go/v6"
        "log"
)
&nbsp;
func <strong>printBucketPolicy</strong>(minioClient *minio.Client, bucket string) {
        fmt.Printf("Policy for bucket: %s\n", bucket)
        policy, err := minioClient.GetBucketPolicy(bucket)
        if err != nil {
                log.Fatalln(err)
        }
        fmt.Println(policy)
        fmt.Println()
}
&nbsp;
func <strong>main</strong>() {
        var endpoint = flag.String("endpoint", "127.0.0.1:9000", "MinIO service endpoint")
        var accessKeyID = flag.String("accessKeyID", "", "Access key ID for MinIO")
        var secretAccessKey = flag.String("secretAccessKey", "", "Secret access key for MinIO")
        var useSSL = flag.Bool("useSSL", false, "Use SSL for communication with MinIO")
        flag.Parse()
&nbsp;
        <i>// initialize minio client object</i>
        minioClient, err := minio.New(*endpoint, *accessKeyID, *secretAccessKey, *useSSL)
        if err != nil {
                log.Fatalln(err)
        }
&nbsp;
        <i>// everything seems to be ok</i>
        log.Printf("%#v\n", minioClient)
&nbsp;
        printBucketPolicy(minioClient, "foo")
        printBucketPolicy(minioClient, "readonly")
        printBucketPolicy(minioClient, "writeonly")
        printBucketPolicy(minioClient, "readwrite")
}
</pre>

<p>Po spuštění příkladu se zobrazí informace o bucketem, které jsme vytvořili a
nastavili v&nbsp;rámci <a href="#k14">předchozí kapitoly</a>:</p>

<pre>
$ <strong>./minio13 -accessKeyID=3V8WMANF061SGOIVR7AA -secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE</strong>
&nbsp;
2019/12/18 09:44:27 &amp;minio.Client{endpointURL:(*url.URL)(0xc000176000), credsProvider:(*credentials.Credentials)(0xc0000b47e0), overrideSignerType:0, appInfo:struct { appName string; appVersion string }{appName:"", appVersion:""}, secure:false, httpClient:(*http.Client)(0xc00009b8c0), bucketLocCache:(*minio.bucketLocationCache)(0xc0000a6780), isTraceEnabled:false, traceErrorsOnly:false, traceOutput:io.Writer(nil), s3AccelerateEndpoint:"", region:"", random:(*rand.Rand)(0xc00009b920), lookup:0}
Policy for bucket: foo
&nbsp;
&nbsp;
Policy for bucket: readonly
{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"AWS":["*"]},"Action":["s3:GetBucketLocation","s3:ListBucket"],"Resource":["arn:aws:s3:::readonly"]},{"Effect":"Allow","Principal":{"AWS":["*"]},"Action":["s3:GetObject"],"Resource":["arn:aws:s3:::readonly/*"]}]}
&nbsp;
Policy for bucket: writeonly
{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"AWS":["*"]},"Action":["s3:GetBucketLocation","s3:ListBucketMultipartUploads"],"Resource":["arn:aws:s3:::writeonly"]},{"Effect":"Allow","Principal":{"AWS":["*"]},"Action":["s3:AbortMultipartUpload","s3:DeleteObject","s3:ListMultipartUploadParts","s3:PutObject"],"Resource":["arn:aws:s3:::writeonly/*"]}]}
&nbsp;
Policy for bucket: readwrite
{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"AWS":["*"]},"Action":["s3:GetBucketLocation","s3:ListBucket","s3:ListBucketMultipartUploads"],"Resource":["arn:aws:s3:::readwrite"]},{"Effect":"Allow","Principal":{"AWS":["*"]},"Action":["s3:DeleteObject","s3:GetObject","s3:ListMultipartUploadParts","s3:PutObject","s3:AbortMultipartUpload"],"Resource":["arn:aws:s3:::readwrite/*"]}]}
</pre>

<p>Vidíme, že práva jsou vrácena ve formě řetězce obsahujícího strukturu
reprezentovanou v&nbsp;JSONu. Tuto strukturu je výhodné poslat do filtru pro
pretty-printing JSONu, aby byly výsledky čitelnější.</p>

<p>Bucket &bdquo;readonly&ldquo;:</p>

<pre>
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": [
          "*"
        ]
      },
      "Action": [
        "s3:GetBucketLocation",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::readonly"
      ]
    },
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": [
          "*"
        ]
      },
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::readonly/*"
      ]
    }
  ]
}
</pre>

<p>Bucket &bdquo;writeonly&ldquo;:</p>

<pre>
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": [
          "*"
        ]
      },
      "Action": [
        "s3:GetBucketLocation",
        "s3:ListBucketMultipartUploads"
      ],
      "Resource": [
        "arn:aws:s3:::writeonly"
      ]
    },
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": [
          "*"
        ]
      },
      "Action": [
        "s3:AbortMultipartUpload",
        "s3:DeleteObject",
        "s3:ListMultipartUploadParts",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::writeonly/*"
      ]
    }
  ]
}
</pre>

<p>Bucket &bdquo;readwrite&ldquo;:</p>

<pre>
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": [
          "*"
        ]
      },
      "Action": [
        "s3:GetBucketLocation",
        "s3:ListBucket",
        "s3:ListBucketMultipartUploads"
      ],
      "Resource": [
        "arn:aws:s3:::readwrite"
      ]
    },
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": [
          "*"
        ]
      },
      "Action": [
        "s3:DeleteObject",
        "s3:GetObject",
        "s3:ListMultipartUploadParts",
        "s3:PutObject",
        "s3:AbortMultipartUpload"
      ],
      "Resource": [
        "arn:aws:s3:::readwrite/*"
      ]
    }
  ]
}
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že práva jsou nastavována
pro jednotlivé konkrétní <i>operace</i>, nejedná se tedy o pouhé čtení či
zápis.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Změna přístupových práv k&nbsp;bucketu</h2>

<p>Změnu přístupových práv k&nbsp;bucketu na úrovni jednotlivých operací lze
realizovat metodou <strong>SetBucketPolicy</strong>. Této metodě je nutné
předat řetězec obsahující validní JSON se specifikací povolených operací. Pro
jednoduchost tento JSON vytvoříme skutečně v&nbsp;řetězci, ovšem v&nbsp;praxi
je lepší použít <i>marshalling</i> (zajímavé je, že tato operace není přímo
podporována v&nbsp;SDK pro Minio v&nbsp;Go):</p>

<pre>
policyReadOnly := `{"Version": "2012-10-17","Statement": [{"Effect":"Allow","Principal":{"AWS": ["*"]},"Resource": ["arn:aws:s3:::readonly/*"],"Sid": "", "Action":["s3:GetObject","s3:PutObject"]}]}`
&nbsp;
err = <strong>minioClient.SetBucketPolicy("readonly", policyReadOnly)</strong>
if err != nil {
        fmt.Println(err)
        return
}
</pre>

<p>V&nbsp;dalším příkladu je tato možnost ukázána &ndash; nastavíme v&nbsp;něm
nová práva pro bucket &bdquo;readonly&ldquo;, který byl původně určen skutečně
pouze pro čtení:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "flag"
        "fmt"
        "github.com/minio/minio-go/v6"
        "log"
)
&nbsp;
func <strong>printBucketPolicy</strong>(minioClient *minio.Client, bucket string) {
        fmt.Printf("Policy for bucket: %s\n", bucket)
        policy, err := minioClient.GetBucketPolicy(bucket)
        if err != nil {
                log.Fatalln(err)
        }
        fmt.Println(policy)
        fmt.Println()
}
&nbsp;
func <strong>main</strong>() {
        var endpoint = flag.String("endpoint", "127.0.0.1:9000", "MinIO service endpoint")
        var accessKeyID = flag.String("accessKeyID", "", "Access key ID for MinIO")
        var secretAccessKey = flag.String("secretAccessKey", "", "Secret access key for MinIO")
        var useSSL = flag.Bool("useSSL", false, "Use SSL for communication with MinIO")
        flag.Parse()
&nbsp;
        <i>// initialize minio client object</i>
        minioClient, err := minio.New(*endpoint, *accessKeyID, *secretAccessKey, *useSSL)
        if err != nil {
                log.Fatalln(err)
        }
&nbsp;
        <i>// everything seems to be ok</i>
        log.Printf("%#v\n", minioClient)
&nbsp;
        policyFoo := `{"Version": "2012-10-17","Statement": [{"Effect":"Allow","Principal":{"AWS": ["*"]},"Resource": ["arn:aws:s3:::foo/*"],"Sid": "", "Action":["s3:PutObject"]}]}`
        err = minioClient.SetBucketPolicy("foo", policyFoo)
        if err != nil {
                fmt.Println(err)
                return
        }
&nbsp;
        policyReadOnly := `{"Version": "2012-10-17","Statement": [{"Effect":"Allow","Principal":{"AWS": ["*"]},"Resource": ["arn:aws:s3:::readonly/*"],"Sid": "", "Action":["s3:GetObject","s3:PutObject"]}]}`
        err = minioClient.SetBucketPolicy("readonly", policyReadOnly)
        if err != nil {
                fmt.Println(err)
                return
        }
&nbsp;
        printBucketPolicy(minioClient, "foo")
        printBucketPolicy(minioClient, "readonly")
        printBucketPolicy(minioClient, "writeonly")
        printBucketPolicy(minioClient, "readwrite")
}
</pre>

<p>Spuštění příkladu:</p>

<pre>
$ <strong>./minio14 -accessKeyID=3V8WMANF061SGOIVR7AA -secretAccessKey=AHTM6+74n1Z8DZRZ4V7o83QcnYRnTEVblVb8sIlE</strong>
&nbsp;
2019/12/18 10:09:31 &amp;minio.Client{endpointURL:(*url.URL)(0xc00015a000), credsProvider:(*credentials.Credentials)(0xc00006e840), overrideSignerType:0, appInfo:struct { appName string; appVersion string }{appName:"", appVersion:""}, secure:false, httpClient:(*http.Client)(0xc0000138f0), bucketLocCache:(*minio.bucketLocationCache)(0xc00000e7c0), isTraceEnabled:false, traceErrorsOnly:false, traceOutput:io.Writer(nil), s3AccelerateEndpoint:"", region:"", random:(*rand.Rand)(0xc000013950), lookup:0}
&nbsp;
Policy for bucket: foo
{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"AWS":["*"]},"Action":["s3:PutObject"],"Resource":["arn:aws:s3:::foo/*"]}]}
&nbsp;
Policy for bucket: readonly
{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"AWS":["*"]},"Action":["s3:PutObject","s3:GetObject"],"Resource":["arn:aws:s3:::readonly/*"]}]}
&nbsp;
Policy for bucket: writeonly
{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"AWS":["*"]},"Action":["s3:GetBucketLocation","s3:ListBucketMultipartUploads"],"Resource":["arn:aws:s3:::writeonly"]},{"Effect":"Allow","Principal":{"AWS":["*"]},"Action":["s3:AbortMultipartUpload","s3:DeleteObject","s3:ListMultipartUploadParts","s3:PutObject"],"Resource":["arn:aws:s3:::writeonly/*"]}]}
&nbsp;
Policy for bucket: readwrite
{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"AWS":["*"]},"Action":["s3:GetBucketLocation","s3:ListBucket","s3:ListBucketMultipartUploads"],"Resource":["arn:aws:s3:::readwrite"]},{"Effect":"Allow","Principal":{"AWS":["*"]},"Action":["s3:AbortMultipartUpload","s3:DeleteObject","s3:GetObject","s3:ListMultipartUploadParts","s3:PutObject"],"Resource":["arn:aws:s3:::readwrite/*"]}]}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Přiřazení verze k&nbsp;objektům, uložení více verzí objektu se stejným jménem</h2>

<p>V&nbsp;této kapitole si ukážeme, že některé vlastnosti, které uživatelům
nabízí AWS S3, prozatím v&nbsp;Miniu nenajdeme. Ostatně si můžeme ocitovat
slova jednoho z&nbsp;vývojářů Minia:</p>

<p><i>&bdquo;Amazon keeps introducing new features to stay ahead of others.
Minio will instead focus on minimalist design. We only need to implement what
we see as a core functionality for object storage. "Core" is defined as bare
essential features to store and retrieve objects.&ldquo;</i></p>

<p>Jednou z&nbsp;vlastností, kterou v&nbsp;Miniu nenalezneme, je podpora pro
&bdquo;verzování&ldquo; objektů, tj.&nbsp;možnost mít jeden objekt uložený ve
více verzích. V&nbsp;Miniu je nutné použít jiný přístup, například:</p>

<p><i>&bdquo;Idea of application layer versioning is to show that "versioning"
doesn't belong to the core. Saving newer objects with .1, .2 and so on (or with
a timestamp suffix) is a simple idea that applications may do it themselves. I
proposed to do it inside Minio library just for convenience.&ldquo;</i></p>

<p>Na druhou stranu ovšem SDK pro Go umožňuje verzování povolit, ovšem funkční
bude pouze při připojení do AWS S3. V&nbsp;dalším příkladu je jeden objekt
uložen v&nbsp;deseti verzích:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "flag"
        "fmt"
        "github.com/minio/minio-go/v6"
        "log"
)
&nbsp;
func <strong>createBucket</strong>(minioClient *minio.Client, bucket string) {
        err := minioClient.MakeBucket(bucket, "us-east-1")
        if err != nil {
                log.Fatalln(err)
        }
        log.Println("New bucket has been created")
}
&nbsp;
func <strong>enableVersioning</strong>(minioClient *minio.Client, bucket string) {
        err := minioClient.EnableVersioning(bucket)
        if err != nil {
                log.Fatalln(err)
        }
        log.Println("Versioning has been enabled")
}
&nbsp;
func <strong>uploadFile</strong>(minioClient *minio.Client, bucket string, filename string) {
        length, err := minioClient.FPutObject(bucket, filename, filename, minio.PutObjectOptions{
                ContentType: "text/plain;charset=UTF-8",
        })
        if err != nil {
                fmt.Println(err)
                return
        }
        fmt.Println("Successfully uploaded bytes: ", length)
}
&nbsp;
func <strong>main</strong>() {
        var endpoint = flag.String("endpoint", "127.0.0.1:9000", "MinIO service endpoint")
        var accessKeyID = flag.String("accessKeyID", "", "Access key ID for MinIO")
        var secretAccessKey = flag.String("secretAccessKey", "", "Secret access key for MinIO")
        var useSSL = flag.Bool("useSSL", false, "Use SSL for communication with MinIO")
        flag.Parse()
&nbsp;
        <i>// initialize minio client object</i>
        minioClient, err := minio.New(*endpoint, *accessKeyID, *secretAccessKey, *useSSL)
        if err != nil {
                log.Fatalln(err)
        }
&nbsp;
        <i>// everything seems to be ok</i>
        log.Printf("%#v\n", minioClient)
&nbsp;
        createBucket(minioClient, "versioned")
        enableVersioning(minioClient, "versioned")
&nbsp;
        for i := 1; i &lt; 10; i++ {
                uploadFile(minioClient, "versioned", "minio13.go")
        }
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Konfigurace životního cyklu objektů</h2>

<p>Další vlastnost, kterou v&nbsp;Miniu nelze použít, je konfigurace životního
cyklu objektů. V&nbsp;AWS S3 je totiž možné určit, po jakou dobu budou objekty
v&nbsp;S3 uložené platné. Je tak možné rozlišit například mezi logy, zdrojovými
daty pro analýzu AI/ML, skutečná data (například obsah CRM) atd. Pro úplnost si
ukažme, jak se takové nastavení může provést. Tentokrát se nepoužívá formát
JSON, ale XML:</p>

<pre>
&lt;LifecycleConfiguration&gt;
    &lt;Rule&gt;
        &lt;ID&gt;expire-bucket&lt;/ID&gt;
	&lt;Prefix&gt;&lt;/Prefix&gt;
	&lt;Status&gt;Enabled&lt;/Status&gt;
	&lt;Expiration&gt;
	    &lt;Days&gt;` + strconv.Itoa(days) + `&lt;/Days&gt;
	&lt;/Expiration&gt;
    &lt;/Rule&gt;
&lt;/LifecycleConfiguration&gt;`
&nbsp;
</pre>

<p>Celý příklad (nefunkční v&nbsp;Miniu):</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
	"flag"
	"github.com/minio/minio-go/v6"
	"log"
	"strconv"
)
&nbsp;
func <strong>createBucket</strong>(minioClient *minio.Client, bucket string) {
	err := minioClient.MakeBucket(bucket, "us-east-1")
	if err != nil {
		log.Fatalln(err)
	}
	log.Println("New bucket has been created")
}
&nbsp;
func <strong>setExpiration</strong>(minioClient *minio.Client, bucket string, days int) {
	rules := `
&lt;LifecycleConfiguration&gt;
    &lt;Rule&gt;
        &lt;ID&gt;expire-bucket&lt;/ID&gt;
	&lt;Prefix&gt;&lt;/Prefix&gt;
	&lt;Status&gt;Enabled&lt;/Status&gt;
	&lt;Expiration&gt;
	    &lt;Days&gt;` + strconv.Itoa(days) + `&lt;/Days&gt;
	&lt;/Expiration&gt;
    &lt;/Rule&gt;
&lt;/LifecycleConfiguration&gt;`
&nbsp;
	println(rules)
	err := minioClient.SetBucketLifecycle(bucket, rules)
	if err != nil {
		log.Fatalln(err)
	}
	log.Println("Expiration has been configured")
}
&nbsp;
func <strong>main</strong>() {
	var endpoint = flag.String("endpoint", "127.0.0.1:9000", "MinIO service endpoint")
	var accessKeyID = flag.String("accessKeyID", "", "Access key ID for MinIO")
	var secretAccessKey = flag.String("secretAccessKey", "", "Secret access key for MinIO")
	var useSSL = flag.Bool("useSSL", false, "Use SSL for communication with MinIO")
	flag.Parse()
&nbsp;
	<i>// initialize minio client object</i>
	minioClient, err := minio.New(*endpoint, *accessKeyID, *secretAccessKey, *useSSL)
	if err != nil {
		log.Fatalln(err)
	}
&nbsp;
	<i>// everything seems to be ok</i>
	log.Printf("%#v\n", minioClient)
&nbsp;
	<i>//createBucket(minioClient, "temporary")</i>
	setExpiration(minioClient, "temporary", 1)
}
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně pět až šest megabajtů), můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>minio11</td><td>přečtení metainformací o objektu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_47/minio11/minio11.go">https://github.com/tisnik/go-root/blob/master/article_47/minio11/minio11.go</a></td></tr>
<tr><td> 2</td><td>minio12</td><td>použití metody <strong>ComposeObject</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_47/minio12/minio12.go">https://github.com/tisnik/go-root/blob/master/article_47/minio12/minio12.go</a></td></tr>
<tr><td> 3</td><td>minio13</td><td>přečtení informací o přístupových právech k&nbsp;bucketu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_47/minio13/minio13.go">https://github.com/tisnik/go-root/blob/master/article_47/minio13/minio13.go</a></td></tr>
<tr><td> 4</td><td>minio14</td><td>změna přístupových práv k&nbsp;bucketu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_47/minio14/minio14.go">https://github.com/tisnik/go-root/blob/master/article_47/minio14/minio14.go</a></td></tr>
<tr><td> 5</td><td>minio15</td><td>povolení verzování objektů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_47/minio15/minio15.go">https://github.com/tisnik/go-root/blob/master/article_47/minio15/minio15.go</a></td></tr>
<tr><td> 6</td><td>minio16</td><td>přečtení &bdquo;lifecycle&ldquo; bucketu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_47/minio16/minio16.go">https://github.com/tisnik/go-root/blob/master/article_47/minio16/minio16.go</a></td></tr>
<tr><td> 7</td><td>minio17</td><td>nastavení doby expirace objektů v&nbsp;bucketu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_47/minio17/minio17.go">https://github.com/tisnik/go-root/blob/master/article_47/minio17/minio17.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>python/minio1.py</td><td>kostra aplikace, která provede inicializaci klienta služby Minio</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_47/python/minio1.py">https://github.com/tisnik/go-root/blob/master/article_47/python/minio1.py</a></td></tr>
<tr><td> 9</td><td>python/minio2.py</td><td>zadání parametrů připojení z&nbsp;příkazového řádku</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_47/python/minio2.py">https://github.com/tisnik/go-root/blob/master/article_47/python/minio2.py</a></td></tr>
<tr><td>10</td><td>python/minio3.py</td><td>zadání parametrů připojení z&nbsp;příkazového řádku, výpis bucketů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_47/python/minio3.py">https://github.com/tisnik/go-root/blob/master/article_47/python/minio3.py</a></td></tr>
<tr><td>11</td><td>python/minio4.py</td><td>výpis všech objektů ve zvoleném bucketu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_47/python/minio4.py">https://github.com/tisnik/go-root/blob/master/article_47/python/minio4.py</a></td></tr>
<tr><td>12</td><td>python/minio6.py</td><td>uložení objektu z&nbsp;bucketu do lokálního souboru</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_47/python/minio6.py">https://github.com/tisnik/go-root/blob/master/article_47/python/minio6.py</a></td></tr>
<tr><td>13</td><td>python/minio7.py</td><td>programové přečtení obsahu vybraného objektu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_47/python/minio7.py">https://github.com/tisnik/go-root/blob/master/article_47/python/minio7.py</a></td></tr>
<tr><td>14</td><td>python/minio8.py</td><td>zpracování objektu s&nbsp;textovým obsahem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_47/python/minio8.py">https://github.com/tisnik/go-root/blob/master/article_47/python/minio8.py</a></td></tr>
<tr><td>15</td><td>python/minio9.py</td><td>uložení obsahu souboru do Minia</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_47/python/minio9.py">https://github.com/tisnik/go-root/blob/master/article_47/python/minio9.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránky projektu MinIO<br />
<a href="https://min.io/">https://min.io/</a>
</li>

<li>MinIO Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-quickstart-guide.html">https://docs.min.io/docs/minio-quickstart-guide.html</a>
</li>

<li>MinIO Go Client API Reference<br />
<a href="https://docs.min.io/docs/golang-client-api-reference">https://docs.min.io/docs/golang-client-api-reference</a>
</li>

<li>MinIO Python Client API Reference<br />
<a href="https://docs.min.io/docs/python-client-api-reference.html">https://docs.min.io/docs/python-client-api-reference.html</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>MinIO Client Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a>
</li>

<li>Analýza kvality zdrojových kódů Minia<br />
<a href="https://goreportcard.com/report/github.com/minio/minio">https://goreportcard.com/report/github.com/minio/minio</a>
</li>

<li>This is MinIO<br />
<a href="https://www.youtube.com/watch?v=vF0lQh0XOCs">https://www.youtube.com/watch?v=vF0lQh0XOCs</a>
</li>

<li>Running MinIO Standalone<br />
<a href="https://www.youtube.com/watch?v=dIQsPCHvHoM">https://www.youtube.com/watch?v=dIQsPCHvHoM</a>
</li>

<li>"Amazon S3 Compatible Storage in Kubernetes" - Rob Girard, Principal Tech Marketing Engineer, Minio<br />
<a href="https://www.youtube.com/watch?v=wlpn8K0jJ4U">https://www.youtube.com/watch?v=wlpn8K0jJ4U</a>
</li>

<li>Ginkgo<br />
<a href="http://onsi.github.io/ginkgo/">http://onsi.github.io/ginkgo/</a>
</li>

<li>Gomega<br />
<a href="https://onsi.github.io/gomega/">https://onsi.github.io/gomega/</a>
</li>

<li>Ginkgo's Preferred Matcher Library na GitHubu<br />
<a href="https://github.com/onsi/gomega/">https://github.com/onsi/gomega/</a>
</li>

<li>Provided Matchers<br />
<a href="http://onsi.github.io/gomega/#provided-matchers">http://onsi.github.io/gomega/#provided-matchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku goexpect<br />
<a href="https://godoc.org/github.com/google/goexpect">https://godoc.org/github.com/google/goexpect</a>
</li>

<li>Balíček goexpect<br />
<a href="https://github.com/google/goexpect">https://github.com/google/goexpect</a>
</li>

<li>Balíček go-expect<br />
<a href="https://github.com/Netflix/go-expect">https://github.com/Netflix/go-expect</a>
</li>

<li>Balíček gexpect<br />
<a href="https://github.com/ThomasRooney/gexpect">https://github.com/ThomasRooney/gexpect</a>
</li>

<li>Expect (originál naprogramovaný v&nbsp;TCL)<br />
<a href="https://core.tcl-lang.org/expect/index">https://core.tcl-lang.org/expect/index</a>
</li>

<li>Expect (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Expect">https://en.wikipedia.org/wiki/Expect</a>
</li>

<li>Pexpect<br />
<a href="https://pexpect.readthedocs.io/en/stable/">https://pexpect.readthedocs.io/en/stable/</a>
</li>

<li>Golang SSH Client: Multiple Commands, Crypto &amp; Goexpect Examples<br />
<a href="http://networkbit.ch/golang-ssh-client/">http://networkbit.ch/golang-ssh-client/</a>
</li>

<li>goblin na GitHubu<br />
<a href="https://github.com/franela/goblin">https://github.com/franela/goblin</a>
</li>

<li>Mocha framework<br />
<a href="https://mochajs.org/">https://mochajs.org/</a>
</li>

<li>frisby na GitHubu<br />
<a href="https://github.com/verdverm/frisby">https://github.com/verdverm/frisby</a>
</li>

<li>package frisby<br />
<a href="https://godoc.org/github.com/verdverm/frisby">https://godoc.org/github.com/verdverm/frisby</a>
</li>

<li>Frisby alternatives and similar packages (generováno)<br />
<a href="https://go.libhunt.com/frisby-alternatives">https://go.libhunt.com/frisby-alternatives</a>
</li>

<li>Cucumber for golang<br />
<a href="https://github.com/DATA-DOG/godog">https://github.com/DATA-DOG/godog</a>
</li>

<li>How to Use Godog for Behavior-driven Development in Go<br />
<a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go</a>
</li>

<li>Comparative Analysis Of GoLang Testing Frameworks<br />
<a href="https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks">https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks</a>
</li>

<li>A Quick Guide to Testing in Golang<br />
<a href="https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/">https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/</a>
</li>

<li>Tom's Obvious, Minimal Language.<br />
<a href="https://github.com/toml-lang/toml">https://github.com/toml-lang/toml</a>
</li>

<li>xml.org<br />
<a href="http://www.xml.org/">http://www.xml.org/</a>
</li>

<li>Soubory .properties<br />
<a href="https://en.wikipedia.org/wiki/.properties">https://en.wikipedia.org/wiki/.properties</a>
</li>

<li>Soubory INI<br />
<a href="https://en.wikipedia.org/wiki/INI_file">https://en.wikipedia.org/wiki/INI_file</a>
</li>

<li>JSON to YAML<br />
<a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a>
</li>

<li>Data Format Converter<br />
<a href="https://toolkit.site/format.html">https://toolkit.site/format.html</a>
</li>

<li>Viper na GitHubu<br />
<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>
</li>

<li>GoDotEnv na GitHubu<br />
<a href="https://github.com/joho/godotenv">https://github.com/joho/godotenv</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

