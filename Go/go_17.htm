<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Vytvoření a spuštění jednotkového testu</a></p>
<p><a href="#k03">*** 3. Otestování funkcí a metod, které nejsou viditelné mimo svůj balíček</a></p>
<p><a href="#k04">*** 4. Výsledky testů v&nbsp;případě nesplnění nějaké testované podmínky</a></p>
<p><a href="#k05">*** 5. Okamžité ukončení jednotkového testu v&nbsp;případě detekce chyby</a></p>
<p><a href="#k06">*** 6. Jednotkové testy řízené tabulkami</a></p>
<p><a href="#k07">*** 7. Výběr testů pro spuštění na základě specifikovaného vzorku</a></p>
<p><a href="#k08">*** 8. Výběr testů na základě štítku (tagu)</a></p>
<p><a href="#k09">*** 9. Zjištění, které části programového kódu jsou pokryty jednotkovými testy</a></p>
<p><a href="#k10">*** 10. Nástroj <i>go-carpet</i></a></p>
<p><a href="#k11">*** 11. Ukázka použití nástroje <i>go-carpet</i></a></p>
<p><a href="#k12">*** 12. Nástroj <i>GoConvey</i></a></p>
<p><a href="#k13">*** 13. Použití webového uživatelského rozhraní nástroje <i>GoConvey</i></a></p>
<p><a href="#k14">*** 14. GoConvey a BDD testy</a></p>
<p><a href="#k15">*** 15. Pořadí spouštění jednotlivých kroků definovaných v&nbsp;BDD testech</a></p>
<p><a href="#k16">*** 16. Mockování funkcí a metod pro potřeby jednotkových testů</a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vytvoření a spuštění jednotkového testu</h2>

<pre>
package main

func <strong>Add</strong>(x int, y int) int {
        return x + y
}

func <strong>main</strong>() {
        println(Add(1, 2))
}
</pre>

<pre>
package main

import "testing"

func <strong>TestAdd</strong>(t *testing.T) {
        result := Add(1, 2)
        if result != 3 {
                t.Error("1+2 should be 3, got ", result, "instead")
        }
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Otestování funkcí a metod, které nejsou viditelné mimo svůj balíček</h2>

<pre>
package main

func <strong>add</strong>(x int, y int) int {
        return x + y
}

func <strong>main</strong>() {
        println(add(1, 2))
}
</pre>

<pre>
package main

import "testing"

func <strong>TestAdd</strong>(t *testing.T) {
        result := add(1, 2)
        if result != 3 {
                t.Error("1+2 should be 3, got ", result, "instead")
        }
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výsledky testů v&nbsp;případě nesplnění nějaké testované podmínky</h2>

<pre>
package main

func <strong>add</strong>(x int, y int) int {
        return x - y
}

func <strong>main</strong>() {
        println(add(1, 2))
}
</pre>

<pre>
package main

import "testing"

func <strong>TestAdd</strong>(t *testing.T) {
        result := add(1, 2)
        if result != 3 {
                t.Error("1+2 should be 3, got ", result, "instead")
        }

        result = add(10, 20)
        if result != 30 {
                t.Error("10+20 should be 30, got ", result, "instead")
        }
}

func <strong>TestAddZero</strong>(t *testing.T) {
        result := add(1, 0)
        if result != 1 {
                t.Error("1+0 should be 1, got ", result, "instead")
        }
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Okamžité ukončení jednotkového testu v&nbsp;případě detekce chyby</h2>

<pre>
package main

import "testing"

func <strong>TestAdd</strong>(t *testing.T) {
        result := add(1, 2)
        if result != 3 {
                t.Log("1+2 should be 3, got ", result, "instead")
                t.FailNow()
        }

        result = add(10, 20)
        if result != 30 {
                t.Log("10+20 should be 30, got ", result, "instead")
                t.FailNow()
        }
}

func <strong>TestAddZero</strong>(t *testing.T) {
        result := add(1, 0)
        if result != 1 {
                t.Log("1+0 should be 1, got ", result, "instead")
                t.FailNow()
        }
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Jednotkové testy řízené tabulkami</h2>

<pre>
package main

func <strong>add</strong>(x int32, y int32) int32 {
        return x + y
}

func <strong>main</strong>() {
        println(add(1, 2))
}
</pre>

<pre>
package main

import (
        "fmt"
        "math"
        "testing"
)

type AddTest struct {
        x        int32
        y        int32
        expected int32
}

func <strong>TestAdd</strong>(t *testing.T) {
        var addTestInput = []AddTest{
                {0, 0, 0},
                {1, 0, 1},
                {2, 0, 2},
                {2, 1, 3},
                {2, -2, 0},
                {math.MaxInt32, 0, math.MaxInt32},
                {math.MaxInt32, 1, math.MinInt32},
                {math.MaxInt32, math.MinInt32, -1},
        }

        for _, i := range addTestInput {
                result := add(i.x, i.y)
                if result != i.expected {
                        msg := fmt.Sprintf("%d + %d should be %d, got %d instead",
                                i.x, i.y, i.expected, result)
                        t.Error(msg)
                }
        }
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Výběr testů pro spuštění na základě specifikovaného vzorku</h2>

<pre>
package main

func <strong>add</strong>(x int32, y int32) int32 {
        return x + y
}

func <strong>main</strong>() {
        println(add(1, 2))
}
</pre>

<pre>
package main

import (
        "fmt"
        "math"
        "testing"
)

type AddTest struct {
        x        int32
        y        int32
        expected int32
}

func <strong>checkAdd</strong>(t *testing.T, testInputs []AddTest) {
        for _, i := range testInputs {
                result := add(i.x, i.y)
                if result != i.expected {
                        msg := fmt.Sprintf("%d + %d should be %d, got %d instead",
                                i.x, i.y, i.expected, result)
                        t.Error(msg)
                }
        }
}

func <strong>TestAddBasicValues</strong>(t *testing.T) {
        var addTestInput = []AddTest{
                {0, 0, 0},
                {1, 0, 1},
                {2, 0, 2},
                {2, 1, 3},
        }
        checkAdd(t, addTestInput)
}

func <strong>TestAddNegativeValues</strong>(t *testing.T) {
        var addTestInput = []AddTest{
                {0, 0, 0},
                {1, 0, 1},
                {2, 0, 2},
                {2, 1, 3},
                {2, -2, 0},
        }
        checkAdd(t, addTestInput)
}

func <strong>TestAddMinValues</strong>(t *testing.T) {
        var addTestInput = []AddTest{
                {math.MinInt32, 0, math.MinInt32},
                {math.MinInt32, 1, math.MinInt32 + 1},
        }
        checkAdd(t, addTestInput)
}

func <strong>TestAddMaxValues</strong>(t *testing.T) {
        var addTestInput = []AddTest{
                {math.MaxInt32, 0, math.MaxInt32},
                {math.MaxInt32, 1, math.MinInt32},
                {math.MaxInt32, math.MinInt32, -1},
        }
        checkAdd(t, addTestInput)
}

func <strong>TestAddMinMaxValues</strong>(t *testing.T) {
        var addTestInput = []AddTest{
                {math.MinInt32, 0, math.MinInt32},
                {math.MinInt32, 1, math.MinInt32 + 1},
                {math.MaxInt32, 0, math.MaxInt32},
                {math.MaxInt32, 1, math.MinInt32},
                {math.MaxInt32, math.MinInt32, -1},
        }
        checkAdd(t, addTestInput)
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Výběr testů na základě štítku (tagu)</h2>

<pre>
package main

import "testing"

func <strong>TestAdd</strong>(t *testing.T) {
        result := add(1, 2)
        if result != 3 {
                t.Error("1+2 should be 3, got ", result, "instead")
        }
}
</pre>

<pre>
// +build fast

package main

import (
        "fmt"
        "testing"
)

type AddTest struct {
        x        int32
        y        int32
        expected int32
}

func <strong>checkAdd</strong>(t *testing.T, testInputs []AddTest) {
        for _, i := range testInputs {
                result := add(i.x, i.y)
                if result != i.expected {
                        msg := fmt.Sprintf("%d + %d should be %d, got %d instead",
                                i.x, i.y, i.expected, result)
                        t.Error(msg)
                }
        }
}

func <strong>TestAddBasicValues</strong>(t *testing.T) {
        var addTestInput = []AddTest{
                {0, 0, 0},
                {1, 0, 1},
                {2, 0, 2},
                {2, 1, 3},
        }
        checkAdd(t, addTestInput)
}

func <strong>TestAddNegativeValues</strong>(t *testing.T) {
        var addTestInput = []AddTest{
                {0, 0, 0},
                {1, 0, 1},
                {2, 0, 2},
                {2, 1, 3},
                {2, -2, 0},
        }
        checkAdd(t, addTestInput)
}
</pre>

<pre>
// +build slow

package main

import (
        "fmt"
        "math"
        "testing"
)

type AddTest struct {
        x        int32
        y        int32
        expected int32
}

func <strong>checkAdd</strong>(t *testing.T, testInputs []AddTest) {
        for _, i := range testInputs {
                result := add(i.x, i.y)
                if result != i.expected {
                        msg := fmt.Sprintf("%d + %d should be %d, got %d instead",
                                i.x, i.y, i.expected, result)
                        t.Error(msg)
                }
        }
}

func <strong>TestAddMinValues</strong>(t *testing.T) {
        var addTestInput = []AddTest{
                {math.MinInt32, 0, math.MinInt32},
                {math.MinInt32, 1, math.MinInt32 + 1},
        }
        checkAdd(t, addTestInput)
}

func <strong>TestAddMaxValues</strong>(t *testing.T) {
        var addTestInput = []AddTest{
                {math.MaxInt32, 0, math.MaxInt32},
                {math.MaxInt32, 1, math.MinInt32},
                {math.MaxInt32, math.MinInt32, -1},
        }
        checkAdd(t, addTestInput)
}

func <strong>TestAddMinMaxValues</strong>(t *testing.T) {
        var addTestInput = []AddTest{
                {math.MinInt32, 0, math.MinInt32},
                {math.MinInt32, 1, math.MinInt32 + 1},
                {math.MaxInt32, 0, math.MaxInt32},
                {math.MaxInt32, 1, math.MinInt32},
                {math.MaxInt32, math.MinInt32, -1},
        }
        checkAdd(t, addTestInput)
}
</pre>

<pre>
$ <strong>go test -v </strong>
&nbsp;
=== RUN   TestAdd
--- PASS: TestAdd (0.00s)
PASS
ok      _/home/tester/go-root/article_17/tests08   0.003s
</pre>

<pre>
$ <strong>go test -v </strong>
&nbsp;
=== RUN   TestAdd
--- PASS: TestAdd (0.00s)
PASS
ok      _/home/tester/go-root/article_17/tests08   0.003s
tester@tester-ThinkPad-T410 ~/go-root/article_17/tests08 $ go test -v -tags fast
=== RUN   TestAddBasicValues
--- PASS: TestAddBasicValues (0.00s)
=== RUN   TestAddNegativeValues
--- PASS: TestAddNegativeValues (0.00s)
=== RUN   TestAdd
--- PASS: TestAdd (0.00s)
PASS
ok      _/home/tester/go-root/article_17/tests08   0.004s
</pre>

<pre>
$ <strong>go test -v -tags slow</strong>
&nbsp;
=== RUN   TestAddMinValues
--- PASS: TestAddMinValues (0.00s)
=== RUN   TestAddMaxValues
--- PASS: TestAddMaxValues (0.00s)
=== RUN   TestAddMinMaxValues
--- PASS: TestAddMinMaxValues (0.00s)
=== RUN   TestAdd
--- PASS: TestAdd (0.00s)
PASS
ok      _/home/tester/go-root/article_17/tests08   0.004s
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Zjištění, které části programového kódu jsou pokryty jednotkovými testy</h2>

<pre>
package factorial

func <strong>Factorial</strong>(n int64) int64 {
        switch {
        case n < 0:
                return 1
        case n == 0:
                return 1
        default:
                return n * Factorial(n-1)
        }
}
</pre>

<pre>
package factorial_test

import (
        "factorial"
        "testing"
)

func <strong>TestFactorialForZero</strong>(t *testing.T) {
        result := factorial.Factorial(0)
        if result != 1 {
                t.Errorf("Expected 0! == 1, but got %d instead", result)
        }
}

func <strong>TestFactorialForTen</strong>(t *testing.T) {
        result := factorial.Factorial(10)
        expected := int64(3628800)
        if result != expected {
                t.Errorf("Expected 0! == %d, but got %d instead", expected, result)
        }
}
</pre>

<pre>
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Nástroj <i>go-carpet</i></h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. Ukázka použití nástroje <i>go-carpet</i></h2>

<pre>
</pre>

*** image ***
<p><i>Obrázek 1: </i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Nástroj <i>GoConvey</i></h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. Použití webového uživatelského rozhraní nástroje <i>GoConvey</i></h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. GoConvey a BDD testy</h2>

<pre>
package factorial

func <strong>Factorial</strong>(n int64) int64 {
        switch {
        case n < 0:
                return 1
        case n == 0:
                return 1
        default:
                return n * Factorial(n-1)
        }
}
</pre>

<pre>
package factorial

import(
        "testing"
        . "github.com/smartystreets/goconvey/convey"
)

func <strong>TestFactorial</strong>(t *testing.T) {
        Convey("0! should be equal 1", t, func() {
                So(Factorial(0), ShouldEqual, 1)
        })
}

func <strong>TestFactorial2</strong>(t *testing.T) {
        Convey("10! should be greater than 1", t, func() {
                So(Factorial(10), ShouldBeGreaterThan, 1)
        })
        Convey("10! should be between 1 and 10000000", t, func() {
                So(Factorial(10), ShouldBeBetween, 1, 10000000)
        })
}
</pre>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Pořadí spouštění jednotlivých kroků definovaných v&nbsp;BDD testech</h2>

<pre>
package slices

import (
        "testing"
        . "github.com/smartystreets/goconvey/convey"
)

func <strong>TestSliceManipulation</strong>(t *testing.T) {
        Convey("Given an empty slice", t, func() {
                s := []int{}

                Convey("The slice should be empty initially", func() {
                        So(s, ShouldBeEmpty)
                })

                Convey("When an item is added", func() {
                        s = append(s, 1)

                        Convey("The slice should not be empty", func() {
                                So(s, ShouldNotBeEmpty)
                        })
                        Convey("The slice length should be one", func() {
                                So(len(s), ShouldEqual, 1)
                        })
                        Convey("And length should NOT be zero, of course", func() {
                                So(len(s), ShouldNotEqual, 0)
                        })
                        Convey("When another item is added", func() {
                                s = append(s, 2)

                                Convey("The slice length should be two", func() {
                                        So(len(s), ShouldEqual, 2)
                                })
                                Convey("And length should NOT be zero, of course", func() {
                                        So(len(s), ShouldNotEqual, 1)
                                })
                        })

                        Convey("Now the slice length should be one again", func() {
                                So(len(s), ShouldEqual, 1)
                        })
                })
                Convey("And now the slice should be empty again", func() {
                        So(s, ShouldBeEmpty)
                })
        })
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Mockování funkcí a metod pro potřeby jednotkových testů</h2>

<p>Při testování aplikací, zejména při psaní jednotkových testů, se poměrně často dostaneme do situace, kdy potřebujeme nahradit nějakou funkci či metodu používanou v&nbsp;reálné aplikaci za &bdquo;falešnou&ldquo; funkci resp.&nbsp;metodu vytvořenou pouze pro účely testů. V&nbsp;programovacím jazyku Go je možné pro tvorbu a použití takových &bdquo;falešných&ldquo; funkcí použít hned několik různých knihoven, které se od sebe odlišují jak svými možnostmi, tak i způsobem zápisu či deklarace očekávaného chování testované aplikace. Ovšem pro lepší pochopení celé problematiky si dnes ukážeme, jak lze mockování (většinou) provést pouze s&nbsp;využitím základních možností programovacího jazyka Go, zejména s&nbsp;použitím rozhraní.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Převody měn</h2>

<pre>
func <strong>get_exchange_rate_from_url</strong>(code string) float64 {
        const URL = "https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt"

        response, err := http.Get(URL)
        if err != nil {
                panic("Connection refused")
        }
        defer response.Body.Close()

        fmt.Printf("Status: %s\n", response.Status)
        fmt.Printf("Content length: %d\n", response.ContentLength)

        scanner := bufio.NewScanner(response.Body)
        for scanner.Scan() {
                s := strings.Split(scanner.Text(), "|")
                if len(s) == 5 {
                        code_str := s[3]
                        rate_str := strings.Replace(s[4], ",", ".", 1)
                        if code == code_str {
                                rate_f, err := strconv.ParseFloat(rate_str, 64)
                                if err != nil {
                                        panic(err)
                                }
                                return rate_f
                        }
                }
        }

        return 0
}
</pre>

<pre>
func <strong>exchange</strong>(amount float64, code string) float64 {
        rate := get_exchange_rate_(code)
        return rate * amount
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Vytvoření mocku funkce <strong>get_exchange_rate_from_url</strong></h2>

<pre>
package main

import (
        "bufio"
        "fmt"
        "net/http"
        "os"
        "strconv"
        "strings"
)

type ExchangeDataGetter func(code string) float64

type ExchangeGetter struct {
        get_exchange_rate ExchangeDataGetter
}

func <strong>NewExchangeGetter</strong>(g ExchangeDataGetter) *ExchangeGetter {
        return &ExchangeGetter{get_exchange_rate: g}
}

func <strong>get_exchange_rate_from_url</strong>(code string) float64 {
        const URL = "https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt"

        response, err := http.Get(URL)
        if err != nil {
                panic("Connection refused")
        }
        defer response.Body.Close()

        fmt.Printf("Status: %s\n", response.Status)
        fmt.Printf("Content length: %d\n", response.ContentLength)

        scanner := bufio.NewScanner(response.Body)
        for scanner.Scan() {
                s := strings.Split(scanner.Text(), "|")
                if len(s) == 5 {
                        code_str := s[3]
                        rate_str := strings.Replace(s[4], ",", ".", 1)
                        if code == code_str {
                                rate_f, err := strconv.ParseFloat(rate_str, 64)
                                if err != nil {
                                        panic(err)
                                }
                                return rate_f
                        }
                }
        }

        return 0
}

func <strong>get_exchange_rate_from_file</strong>(code string) float64 {
        const FILENAME = "kurzy.txt"

        file, err := os.Open(FILENAME)
        if err != nil {
                panic(err)
        }
        defer file.Close()

        scanner := bufio.NewScanner(file)
        for scanner.Scan() {
                s := strings.Split(scanner.Text(), "|")
                if len(s) == 5 {
                        code_str := s[3]
                        rate_str := strings.Replace(s[4], ",", ".", 1)
                        if code == code_str {
                                rate_f, err := strconv.ParseFloat(rate_str, 64)
                                if err != nil {
                                        panic(err)
                                }
                                return rate_f
                        }
                }
        }

        return 0
}

func <strong>mocked_get_exchange_rate</strong>(code string) float64 {
        return 21.5
}

func (g *ExchangeGetter) exchange(amount float64, code string) float64 {
        rate := g.get_exchange_rate(code)
        return rate * amount
}

func <strong>main</strong>() {
        g := NewExchangeGetter(get_exchange_rate_from_file)
        fmt.Printf("%5.2f\n", g.exchange(10, "USD"))
        g2 := NewExchangeGetter(mocked_get_exchange_rate)
        fmt.Printf("%5.2f\n", g2.exchange(10, "USD"))
}
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně jeden megabajt), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_17/">https://github.com/tisnik/go-root/blob/master/article_17/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_17/">https://github.com/tisnik/go-root/blob/master/article_17/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_17/">https://github.com/tisnik/go-root/blob/master/article_17/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_17/">https://github.com/tisnik/go-root/blob/master/article_17/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_17/">https://github.com/tisnik/go-root/blob/master/article_17/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_17/">https://github.com/tisnik/go-root/blob/master/article_17/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_17/">https://github.com/tisnik/go-root/blob/master/article_17/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_17/">https://github.com/tisnik/go-root/blob/master/article_17/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_17/">https://github.com/tisnik/go-root/blob/master/article_17/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

