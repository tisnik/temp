<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Go a skriptovací jazyky</a></p>
<p><a href="#k02">2. Doménově specifické jazyky</a></p>
<p><a href="#k03">3. Obecné skriptovací jazyky versus doménově specifické jazyky (DSL)</a></p>
<p><a href="#k04">4. Projekt <strong>Gval</strong></a></p>
<p><a href="#k05">*** 5. Příklad typu &bdquo;Hello world!&ldquo;</a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Go a skriptovací jazyky</h2>

<p><a href="https://www.root.cz/serialy/programovaci-jazyk-go/">V&nbsp;seriálu
o programovacím jazyce Go</a> jsme se již několikrát zmínili o možnosti
zkombinování tohoto staticky typovaného a překládaného (kompilovaného)
programovacího jazyka s&nbsp;nějakým interpretrem, typicky s&nbsp;interpretrem
vhodného vyššího programovacího jazyka. Díky této kombinaci je například možné
&bdquo;skriptovat&ldquo; aplikaci naprogramovanou v&nbsp;Go, rozšiřovat tuto
aplikaci o další logiku, upravovat či definovat nová &bdquo;business&ldquo;
pravidla atd. Většinou je tato možnost rozšiřování možností aplikace
s&nbsp;využitím skriptů výhodná pro všechny spolupracující strany &ndash; firma
produkující daný software vlastně zadarmo získá další aplikační oblast,
zákazník či uživatel si takto může aplikaci upravit ke svým potřebám a
popř.&nbsp;na úpravách může spolupracovat i další společnost/vývojáři nezávislí
na autorech původního software (dlouholetým příkladem z&nbsp;praxe jsou
například CADy a jejich nadstavby).</p>

<p>Prozatím jsme se v&nbsp;praktické části seriálu o Go věnovali způsobům
vestavění interpretru <a
href="https://www.root.cz/serialy/programovaci-jazyk-lua/">programovacího
jazyka Lua</a> do aplikace naprogramované v&nbsp;Go. Kombinace Lua+Go
resp.&nbsp;obecněji řečeno Lua+staticky typovaný překládaný jazyk je velmi
běžná a vlastně i logická, protože právě jazyk Lua je navržen s&nbsp;ohledem na
jeho relativně snadnou &bdquo;vložitelnost&ldquo; (<i>embed</i>) do větších
aplikací. Důvodem, proč jsou některé hry, například <i>Escape from Monkey
Island</i>, <i>Grim Fandango</i>, <i>Fish Fillets</i>, <i>Neverwinter
Nights</i> či <i>MDK2</i> z&nbsp;menší či větší části naprogramované právě
v&nbsp;<i>Lue</i>, spočívá v&nbsp;tom, že kombinace nízkoúrovňového a
skriptovacího jazyka umožňuje soustředit se při vývoji na podstatné věci
&ndash; herní engine vytvořit co nejefektivnější s&nbsp;využitím všech možností
nízkoúrovňového jazyka a naopak herní scénář a logiku hry naskriptovat
s&nbsp;co největším urychlením cyklu oprava&ndash;překlad&ndash;spuštění (viz
též <a href="#k20">odkazy na konci dnešního článku</a>).</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti existuje hned několik
projektů, které programátorům používajícím programovací jazyk Go zpřístupňují
interpret skriptovacího jazyka Lua. Jedná se o projekty <a
href="https://github.com/yuin/gopher-lua">Gopher-Lua</a>, <a
href="https://github.com/Shopify/go-lua">go-lua</a> a taktéž <a
href="https://github.com/aarzilli/golua">golua</a> (interface k&nbsp;původnímu
céčkovému interpretru). Rozšířením knihovny Gopher-Lua je <a
href="https://github.com/alexeyco/binder">Binder</a>.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Doménově specifické jazyky</h2>

<p>Doménově specifické jazyky (<i>DSL &ndash; Domain-Specific Language</i>)
jsou velmi důležitou součástí informatiky a mnohé z&nbsp;nich jsou velmi
úspěšné a rozšířené do mnoha oblastí. Za připomenutí stojí například <i>jazyk
pro popis regulárních výrazů</i>, jenž je podporován jak mnoha nástroji, tak i
knihovnami, popř.&nbsp;je přímo součástí některých obecných programovacích
jazyků (Perl apod.). I v&nbsp;některých dalších případech je tento přístup
velmi užitečný a rozšířený, ostatně například SQL je s&nbsp;velkou
pravděpodobností <a href="https://www.tiobe.com/tiobe-index/">nejpopulárnějším
samostatně chápaným doménově specifickým jazykem</a> neboli DSL vůbec, protože
umožňuje snadné optimalizace dotazů a vůbec pokládání dotazů čitelným,
pochopitelným a přenositelným způsobem. Dalším doménově specifickým jazykem,
s&nbsp;nímž jsme se již na stránkách Roota v&nbsp;rámci několika článků
seznámili, je jazyk <i>Gherkin</i> určený pro popis chování systémů a pro psaní
BDD testů. Dalším příkladem je <a
href="https://www.root.cz/clanky/graficky-metaformat-postscript/">PostScript</a>.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Obecné skriptovací jazyky versus doménově specifické jazyky (DSL)</h2>

<p>Mnohé z&nbsp;doménově specifických jazyků nejsou <a
href="https://cs.wikipedia.org/wiki/Turingovsk%C3%A1_%C3%BAplnost">Turingovsky
kompletní (úplný)</a>, což však není nedostatek, ale mnohdy naopak požadovaná
vlastnost. Příkladem mohou být DSL, v&nbsp;nichž není možné zapsat programové
smyčky ani rekurzi &ndash; tudíž je většinou výpočet resp.&nbsp;vyhodnocení
výrazu časově dosti přesně určené. Další DSL neumožňují explicitní alokaci
paměti, což může být v&nbsp;dané oblasti použití taktéž výhodné. Nasazení DSL
oproti plnohodnotnému jazyku tedy může být výhodné, protože cíleně omezené
možnosti takového jazyka můžeme chápat jako formu &bdquo;sémantického
sandboxingu&ldquo; (právě proto jsou regulární výrazy <i>regulární</i>).</p>

<p><div class="rs-tip-major">Poznámka: na tomto místě je zajímavé zmínit
PostScript, který je sice DSL, konkrétně specifickým jazykem pro popis
tiskových stran, ovšem oproti mnoha jiným DSL je Turingovsky kompletní. To
například umožňuje vykreslování procedurální grafiky (viz například <a
href="https://www.root.cz/clanky/fraktaly-v-signaturach-a-dalsi-hacky/#k03">tyto
příklady</a>), ovšem pokud tyto zcela korektní PostScriptové soubory spustíte
na podnikové tiskárně, můžete se dočkat nemilého překvapení
v&nbsp;několikahodinové odstávce, popř.&nbsp;nepříjemného e-mailu z&nbsp;IT
oddělení :-)</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Projekt <strong>Gval</strong></h2>

<p>V&nbsp;dnešním článku si popíšeme doménově specifický jazyk nazvaný
<i>Gval</i>, což je zkratka odvozená ze sousloví &bdquo;Go eVALuate&ldquo;.
Toto sousloví je poměrně přiléhavé, protože se skutečně jedná o DSL zaměřený na
vyhodnocování (<i>evaluate</i>) výrazů, přičemž tyto výrazy mohou být
v&nbsp;některých případech i poměrně komplikované. Jejich syntaxe je odvozena
od samotného programovacího jazyka Go, jak ostatně uvidíme v&nbsp;navazujících
kapitolách, v&nbsp;nichž si ukážeme praktické příklady.</p>

<p>Tento DSL lze použít například při zpracování konfiguračních souborů
(například můžeme nastavit limit počtu workerů na výraz "2*CPU_threads" namísto
pracného nastavování konkrétní číselné hodnoty) nebo i v&nbsp;dialozích a
formulářích grafického uživatelského rozhraní. Příkladem může být vstupní pole
pro odhad pracnosti, do kterého takto můžeme zadat "3*8*60" namísto nutnosti
počítání výsledné hodnoty v&nbsp;nějakém jiném nástroji (ostatně informační
systémy jsou tady od toho, aby nám práci zjednodušovaly a nikoli ji dělaly
složitější &ndash; což se mnohdy děje).</p>

<p><div class="rs-tip-major">Poznámka: to, jaké pojmenované (symbolické)
konstanty je možné ve výrazech použít, je samozřejmě plně v&nbsp;rukou
programátora &ndash; výraz tedy v&nbsp;žádném případě nemá přístup
k&nbsp;celému stavovému prostoru aplikace.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Příklad typu &bdquo;Hello world!&ldquo;</h2>


<pre>
package main

import (
        "fmt"
        "os"

        "github.com/PaesslerAG/gval"
)

func main() {
        // parametry předávané vyhodnocovanému výrazu
        parameters := map[string]interface{}{"name": "World"}

        // vyhodnocení výrazu
        value, err := gval.Evaluate(`"Hello " + name + "!"`, parameters)
        if err != nil {
                // kód pro zpracování chyby při vyhodnocování výrazu
                fmt.Println(err)
                os.Exit(1)
        }

        // výpis výsledku výrazu
        fmt.Print(value)
}
</pre>

<pre>
module gval01
&nbsp;
go 1.16
&nbsp;
require github.com/PaesslerAG/gval v1.1.1
</pre>

<pre>
github.com/PaesslerAG/gval v1.1.1 h1:4d7pprU9876+m3rc08X33UjGip8oV1kkm8Gh5GBuTss=
github.com/PaesslerAG/gval v1.1.1/go.mod h1:Fa8gfkCmUsELXgayr8sfL/sw+VzCVoa03dcOcR/if2w=
github.com/PaesslerAG/jsonpath v0.1.0/go.mod h1:4BzmtoM/PI8fPO4aQGIusjGxGir2BzcV0grWtFzq1Y8=
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
package main

import (
        "fmt"
        "os"

        "github.com/PaesslerAG/gval"
)

func main() {
        // parametry předávané vyhodnocovanému výrazu
        parameters := make(map[string]interface{})

        // vyhodnocení výrazu
        value, err := gval.Evaluate("6*7", parameters)
        if err != nil {
                // kód pro zpracování chyby při vyhodnocování výrazu
                fmt.Println(err)
        }

        // výpis výsledku výrazu
        fmt.Print(value)
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
package main

import (
        "fmt"
        "os"

        "github.com/PaesslerAG/gval"
)

func main() {
        // parametry předávané vyhodnocovanému výrazu
        parameters := make(map[string]interface{})

        // vyhodnocení výrazu
        value, err := gval.Evaluate("2 + 4*10", parameters)
        if err != nil {
                // kód pro zpracování chyby při vyhodnocování výrazu
                fmt.Println(err)
        }

        // výpis výsledku výrazu
        fmt.Print(value)
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
package main

import (
        "fmt"
        "os"

        "github.com/PaesslerAG/gval"
)

func main() {
        // parametry předávané vyhodnocovanému výrazu
        parameters := make(map[string]interface{})

        // vyhodnocení výrazu
        value, err := gval.Evaluate("2*x + y", parameters)
        if err != nil {
                // kód pro zpracování chyby při vyhodnocování výrazu
                fmt.Println(err)
        }

        // výpis výsledku výrazu
        fmt.Print(value)
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
package main

import (
        "fmt"
        "os"

        "github.com/PaesslerAG/gval"
)

func main() {
        // parametry předávané vyhodnocovanému výrazu
        parameters := map[string]interface{}{
                "x": 10,
                "y": 20,
        }

        // vyhodnocení výrazu
        value, err := gval.Evaluate("2*x + y", parameters)
        if err != nil {
                // kód pro zpracování chyby při vyhodnocování výrazu
                fmt.Println(err)
        }

        // výpis výsledku výrazu
        fmt.Print(value)
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
package main

import (
        "fmt"
        "os"

        "github.com/PaesslerAG/gval"
)

func main() {
        // parametry předávané vyhodnocovanému výrazu
        parameters := map[string]interface{}{
                "x": 10,
                "y": 20,
                "z": 0,
                "w": -1,
        }

        // vyhodnocení výrazu
        value, err := gval.Evaluate("2*x + y", parameters)
        if err != nil {
                // kód pro zpracování chyby při vyhodnocování výrazu
                fmt.Println(err)
        }

        // výpis výsledku výrazu
        fmt.Print(value)
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td>varianta programu typu &bdquo;Hello world&ldquo; založená na <strong>gval</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_78/">https://github.com/tisnik/go-root/blob/master/article_78/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_78/">https://github.com/tisnik/go-root/blob/master/article_78/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_78/">https://github.com/tisnik/go-root/blob/master/article_78/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_78/">https://github.com/tisnik/go-root/blob/master/article_78/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_78/">https://github.com/tisnik/go-root/blob/master/article_78/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_78/">https://github.com/tisnik/go-root/blob/master/article_78/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_78/">https://github.com/tisnik/go-root/blob/master/article_78/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_78/">https://github.com/tisnik/go-root/blob/master/article_78/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_78/">https://github.com/tisnik/go-root/blob/master/article_78/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_78/">https://github.com/tisnik/go-root/blob/master/article_78/</a></td></tr>
</table>
<table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>A curated list of awesome Go frameworks, libraries and software<br />
<a href="https://awesome-go.com/">https://awesome-go.com/</a>
</li>

<li>Gval na GitHubu<br />
<a href="https://github.com/PaesslerAG/gval">https://github.com/PaesslerAG/gval</a>
</li>

<li>Dokumentace k&nbsp;balíčku Gval<br />
<a href="https://coveralls.io/github/PaesslerAG/gval?branch=master">https://coveralls.io/github/PaesslerAG/gval?branch=master</a>
</li>

<li>Gval code coverage report<br />
<a href="https://coveralls.io/github/PaesslerAG/gval?branch=master">https://coveralls.io/github/PaesslerAG/gval?branch=master</a>
</li>

<li>Gopher-Lua<br />
<a href="https://github.com/yuin/gopher-lua">https://github.com/yuin/gopher-lua</a>
</li>

<li>Go-lua<br />
<a href="https://github.com/Shopify/go-lua">https://github.com/Shopify/go-lua</a>
</li>

<li>Binder<br />
<a href="https://github.com/alexeyco/binder">https://github.com/alexeyco/binder</a>
</li>

<li>Kooperace mezi jazykem Lua a nativním (céčkovým) kódem<br />
<a href="https://www.root.cz/clanky/kooperace-mezi-jazykem-lua-a-nativnim-ceckovym-kodem/">https://www.root.cz/clanky/kooperace-mezi-jazykem-lua-a-nativnim-ceckovym-kodem/</a>
</li>

<li>Kooperace mezi jazykem Lua a nativním (céčkovým) kódem: knihovna FFI<br />
<a href="https://www.root.cz/clanky/kooperace-mezi-jazykem-lua-a-nativnim-ceckovym-kodem-knihovna-ffi/">https://www.root.cz/clanky/kooperace-mezi-jazykem-lua-a-nativnim-ceckovym-kodem-knihovna-ffi/</a>
</li>

<li>Skriptovací jazyk Lua v&nbsp;aplikacích naprogramovaných v&nbsp;Go<br />
<a href="https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/">https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/</a>
</li>

<li>Jazyk Joker: dialekt Clojure naprogramovaný v&nbsp;Go<br />
<a href="https://www.root.cz/clanky/jazyk-joker-dialekt-clojure-naprogramovany-v-go/">https://www.root.cz/clanky/jazyk-joker-dialekt-clojure-naprogramovany-v-go/</a>
</li>

<li>Behave na GitHubu<br />
<a href="https://github.com/behave/behave">https://github.com/behave/behave</a>
</li>

<li>behave 1.2.6 (PyPi)<br />
<a href="https://pypi.python.org/pypi/behave">https://pypi.python.org/pypi/behave</a>
</li>

<li>Dokumentace k Behave<br />
<a href="http://behave.readthedocs.io/en/latest/">http://behave.readthedocs.io/en/latest/</a>
</li>

<li>Příklady použití Behave<br />
<a href="https://github.com/behave/behave.example">https://github.com/behave/behave.example</a>
</li>

<li>Domain-specific language<br />
<a href="https://en.wikipedia.org/wiki/Domain-specific_language">https://en.wikipedia.org/wiki/Domain-specific_language</a>
</li>

<li>Turingovská úplnost<br />
<a href="https://cs.wikipedia.org/wiki/Turingovsk%C3%A1_%C3%BAplnost">https://cs.wikipedia.org/wiki/Turingovsk%C3%A1_%C3%BAplnost</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

