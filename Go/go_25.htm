<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Ladění aplikací naprogramovaných v Go s využitím GNU Debuggeru a debuggeru Delve</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Ladění aplikací naprogramovaných v Go s využitím GNU Debuggeru a debuggeru Delve</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Důležitou součástí vývoje aplikací je samozřejmě i jejich ladění, k němuž lze v případě programovacího jazyka Go využít jak vhodně nakonfigurovaný GNU Debugger, tak i debugger nazvaný Delve, který je určen primárně pro potřeby Go. Možnosti obou debuggerů si dnes popíšeme.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Ladění aplikací naprogramovaných v Go s využitím GNU Debuggeru a debuggeru Delve</a></p>
<p><a href="#k02">2. Klasický GNU Debugger</a></p>
<p><a href="#k03">3. Příprava aplikací napsaných v&nbsp;Go pro ladění v&nbsp;GNU Debuggeru</a></p>
<p><a href="#k04">4. Orientace v&nbsp;laděném kódu</a></p>
<p><a href="#k05">5. Spuštění programu, nastavení breakpointů a krokování</a></p>
<p><a href="#k06">6. Využití TUI GNU Debuggeru</a></p>
<p><a href="#k07">7. Příkaz <strong>display</strong></a></p>
<p><a href="#k08">8. Informace o lokálních proměnných, zobrazení datových typů programovacího jazyka Go</a></p>
<p><a href="#k09">9. Zobrazení prvků struktur</a></p>
<p><a href="#k10">10. Informace o zásobníkových rámcích a o vláknech</a></p>
<p><a href="#k11">11. Debugger Delve</a></p>
<p><a href="#k12">12. Spuštění debuggeru, načtení aplikace a nastavení breakpointů</a></p>
<p><a href="#k13">13. Zobrazení obsahu datových typů programovacího jazyka Go</a></p>
<p><a href="#k14">14. Zobrazení obsahu zásobníku</a></p>
<p><a href="#k15">15. Demonstrační příklad využívající gorutiny</a></p>
<p><a href="#k16">16. Základní informace o gorutinách</a></p>
<p><a href="#k17">17. Demonstrační příklad používající kanály</a></p>
<p><a href="#k18">18. Základní informace o kanálech</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Ladění aplikací naprogramovaných v&nbsp;Go s&nbsp;využitím GNU Debuggeru a debuggeru Delve</h2>

<p>Důležitou součástí vývoje aplikací je samozřejmě i jejich ladění.
V&nbsp;případě programovacího jazyka Go je možné využít hned několika
prostředků usnadňujících ladění. Kromě nástrojů určených pro měření a následnou
analýzu různých metrik (sem spadá i standardní profiler, nástroj pro trasování
programu při testování, popř.&nbsp;standardní balíček <strong>expvar</strong>,
který si popíšeme příště) se samozřejmě jedná o i o debuggery. Využít je možné
klasický <a href="https://www.gnu.org/software/gdb/">GNU Debugger</a>, ovšem
s&nbsp;několika omezeními, které vyplývají z&nbsp;toho, že programovací jazyk
Go má některé vlastnosti, s&nbsp;nimiž se v&nbsp;GNU Debuggeru původně
nepočítalo (například goroutiny). Základní seznámení s&nbsp;možnostmi GNU
Debuggeru je věnována <a href="#k02">první část článku</a>. Ovšem kromě toho
existuje i debugger určený přímo pro ekosystém programovacího jazyka Go. Tento
debugger se jmenuje Delve a jeho popisem se budeme zabývat <a href="#k11">ve
druhé části</a> dnešního článku.</p>

<p><div class="rs-tip-major">Poznámka: jak GNU Debugger, tak i Delve se
primárně ovládají z&nbsp;příkazového řádku. Ovšem oba debuggery jsou současně
navrženy takovým způsobem, aby je bylo možné ovládat programově a vytvořit tak
nad nimi textové uživatelské rozhraní, grafické uživatelské rozhraní či tyto
debuggery zařadit do integrovaných vývojových prostředí. Dnes se ovšem budeme
zabývat ovládáním těchto debuggerů z&nbsp;příkazového řádku, což je
způsob, který dokáže jejich možnosti využít bezezbytku.</div></p>

<p>Kromě debuggerů používaných pro aplikace běžící v&nbsp;uživatelském prostoru
samozřejmě existují i nástroje využívané pro ladění jádra popř.&nbsp;pro ladění
základních knihoven. Jak může vypadat použití jednotlivých nástrojů na celém
&bdquo;stacku&ldquo;, tj.&nbsp;od trasování/ladění samotné uživatelské aplikace
až přes řešení problémů přímo v&nbsp;jádře operačního systému, je naznačeno na
následujícím schématu:</p>

<pre>
+----------+
|          |..... gdb
| aplikace |
|          |..... SystemTap
+----------+
     |
     |
     |...... ltrace
     |
     v
+----------+
|          |..... gdb
|  glibc   |
|          |..... SystemTap
+----------+
     |
     |
     |...... strace
     |
     v
+----------+
|          |..... SystemTap
|  jádro   |
|          |..... KGDB
+----------+
</pre>

<p>Vidíme, že dnes popisovaný GNU Debugger je možné použít jak na úrovni ladění
aplikace, tak i knihoven. Kromě toho ho lze využít i pro &bdquo;pitvu&ldquo;
těch nativních aplikací, které byly kvůli nějakému problému zabity jádrem
systému a byl pro ně vygenerován takzvaný &bdquo;core dump&ldquo;.</p>

<p><div class="rs-tip-major">Poznámka: způsob využití <strong>strace</strong>
společně s&nbsp;aplikacemi naprogramovanými v&nbsp;Go si ukážeme
v&nbsp;některém z&nbsp;dalších pokračování tohoto seriálu.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Klasický GNU Debugger</h2>

<p>Nejprve si popíšeme základní operace, které nám nabízí GNU Debugger při
ladění aplikací vyvinutých v&nbsp;programovacím jazyku Go. GNU Debugger
v&nbsp;současnosti oficiálně podporuje následující programovací jazyky:</p>

<table>
<tr><th>#</th><th>Jazyk</th></tr>
<tr><td>1</td><td>Ada</td></tr>
<tr><td>2</td><td>Assembly</td></tr>
<tr><td>3</td><td>C</td></tr>
<tr><td>4</td><td>C++</td></tr>
<tr><td>5</td><td>D</td></tr>
<tr><td>6</td><td>Fortran</td></tr>
<tr><td>7</td><td>Go</td></tr>
<tr><td>8</td><td>Objective-C</td></tr>
<tr><td>9</td><td>OpenCL</td></tr>
<tr><td>10</td><td>Modula-2</td></tr>
<tr><td>11</td><td>Pascal</td></tr>
<tr><td>12</td><td>Rust</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: jazyky jsou seřazeny podle abecedy,
nikoli podle frekvence používání či oblíbenosti.</div></p>

<p>Nástroj <i>GNU Debugger</i>, který je taktéž někdy podle své spustitelné
(binární) části pojmenováván <strong>gdb</strong>, primárně používá ke
komunikaci s&nbsp;uživatelem příkazový řádek, ale alternativně lze použít i
jednoduché TUI (textové uživatelské rozhraní) či protokol pro nepřímé ovládání
debuggeru a v&nbsp;případě potřeby je možné k&nbsp;laděné aplikaci přidat
relativně krátký &bdquo;stub&ldquo; sloužící pro přímé ladění takové aplikace
(touto nepochybně zajímavou problematikou se však dnes nebudeme zabývat).
Většina často používaných příkazů zapisovaných na příkazový řádek má i svoji
zkrácenou podobu (<i>b=break</i>, <i>bt=backtrace</i>, <i>c=continue</i>,
<i>f=frame</i>) a navíc je možné používat klávesu <strong>[Tab]</strong>
určenou pro automatické doplnění celého jména příkazu či jeho parametru
(doplňování je kontextové). Pokud je správně nastavený terminál, bude fungovat
i historie příkazového řádku, a to stejným způsobem, jaký známe ze shellu (BASH
atd.). Alternativně je možné využít <strong>gdbtui</strong>
s&nbsp;celoobrazovkovým výstupem a alespoň částečně se tak přiblížit možnostem
debuggerů s&nbsp;plnohodnotným grafickým uživatelským rozhraním.</p>

<p>Práce s&nbsp;příkazovým řádkem <i>GNU Debuggeru</i> sice programátorům
přináší velkou flexibilitu, ovšem je pochopitelné, že některým uživatelům
příkazová řádka nemusí vyhovovat. To však &ndash; alespoň teoreticky &ndash;
nemusí být nepřekonatelným problémem, protože již v&nbsp;úvodní kapitole jsme
si řekli, že GDB je navržen takovým způsobem, aby se nad ním daly vytvářet
různé nadstavby vybavené více či méně konformním textovým či grafickým
uživatelským rozhraním. O nadstavbách vytvořených nad <i>GNU Debuggerem</i>
jsem již napsal krátký seriál na &bdquo;konkurenčním&ldquo; webu <a
href="http://www.mojefedora.cz">http://www.mojefedora.cz</a>, takže si dnes o
každé nadstavbě řekneme pouze základní informace (nejdůležitější informací je
v&nbsp;době Googlu samozřejmě jméno nadstavby :-), zbytek se již dá dohledat na
stránkách vývojářů toho kterého nástroje).</p>

<p>Nástroj nazvaný <i>cgdb</i>, o němž jsem se zmínil <a
href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/#k07">zde</a>,
je založený na knihovně <i>curses</i> resp.&nbsp;<i>ncurses</i>, tudíž ho je
možné využít v&nbsp;terminálu, na stroji připojeném přes SSH atd. Ve svém
základním nastavení nástroj <i>cgdb</i> rozděluje okno terminálu (konzole) na
dvě části. V&nbsp;horní části je zobrazen zdrojový kód laděné aplikace a
v&nbsp;části dolní pak rozhraní samotného <i>GNU Debuggeru</i>. Mezi oběma
částmi je možné se s&nbsp;využitím několika klávesových zkratek přepínat,
přičemž je nutné poznamenat, že většinu složitějších příkazů je možné zadávat
jen v&nbsp;rozhraní <i>GNU Debuggeru</i>. Horní část slouží zejména pro dobrou
orientaci v&nbsp;laděném programu, pro zobrazení nastavených breakpointů
(v&nbsp;základním nastavení je použita červená barva) a taktéž pro zobrazení
místa, v&nbsp;němž se právě nachází laděný program (v&nbsp;základním nastavení
je tento řádek zobrazen zeleně).</p>

<a href="http://www.root.cz/obrazek/249940/"><img src="https://i.iinfo.cz/images/615/debuggers-2-prev.png" class="image-249940" alt="&#160;" height="243" width="370" /></a>
<p><i>Obrázek 1: Ladění programu v&nbsp;cgdb. Na řádku 21 je nastaven
breakpoint, proto je tento řádek zvýrazněn červeně. Řízení programu přešlo na
řádek číslo 23 (zvýrazněno zeleně) a v&nbsp;dolní části si vývojář
s&nbsp;využitím příkazu <strong>print</strong> vypsal obsah dvou lokálních
proměnných.</i></p>

<p>O nástroji nazvaném <i>Data Display Debugger</i>, který je známý i pod svojí
zkratkou <i>DDD</i>, taktéž vznikl <a
href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">článek
na serveru mojefedora.cz</a>, takže si zde pouze ve stručnosti řekněme, že
<i>Data Display Debugger</i> je nadstavbou nad <i>GNU Debuggerem</i>, která
nabízí uživatelům při ladění aplikací plnohodnotné grafické uživatelské
rozhraní, jehož jednotlivé ovládací prvky a jejich chování sice mohou působit
zastarale (což je způsobeno použitou GUI knihovnou), ve skutečnosti je však
celé uživatelské rozhraní <i>Data Display Debuggeru</i> velmi flexibilní, což
vynikne především při použití dvou a více monitorů (to je dnes pro vývojáře asi
standardní konfigurace). Příkladem flexibility GUI jsou například
&bdquo;odtrhávací&ldquo; menu (<i>tear off menu</i>), které je možné velmi
snadno změnit na nemodální dialogy s&nbsp;nabídkou příkazů. <i>Data Display
Debugger</i> lze využít i pro komunikaci s&nbsp;dalšími debuggery, například
s&nbsp;debuggerem jazyka Perl, debuggerem skriptů psaných v&nbsp;BASHi a
v&nbsp;neposlední řadě taktéž pro ovládání <i>pydb</i>, což je jeden
z&nbsp;debuggerů používaných vývojáři používajícími programovací jazyk
Python.</p>

<a href="http://www.root.cz/obrazek/249941/"><img src="https://i.iinfo.cz/images/615/debuggers-3-prev.png" class="image-249941" alt="&#160;" height="270" width="320" /></a>
<p><i>Obrázek 2: Ukázka grafického uživatelského rozhraní programu Data Display
Debugger. V&nbsp;horní části můžeme vidět okno se zdrojovým kódem,
v&nbsp;prostřední části pak výpis odpovídajícího strojového kódu a spodní
třetina GUI obsahuje klasický příkazový řádek GNU Debuggeru. K&nbsp;dispozici
je i dialogové okno se základními a často používanými příkazy.</i></p>

<p>I o dalším nástroji pojmenovaném <i>Nemiver</i> již <a
href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">vyšel
samostatný článek</a>. Tento nástroj opět komunikuje s&nbsp;GNU Debuggerem,
ovšem na rozdíl od DDD postaveného nad postarší GUI knihovnou je <i>Nemiver</i>
primárně určený pro desktopové prostředí GNOME se všemi přednostmi a zápory,
které to přináší. <i>Nemiver</i> tak uživatelům nabízí přehledné prostředí,
které ovšem není tak flexibilní jako DDD a taktéž například možnosti zobrazení
složitějších datových struktur (různých lineárně vázaných seznamů, stromů či
obecnějších grafových struktur) jsou v&nbsp;<i>Nemiveru</i> omezené. Pokud ale
někdo pouze potřebuje odkrokovat několik funkcí a neprovádět žádné složitější
operace, může být tento nástroj pro takového uživatele dobrým řešením.</p>

<a href="http://www.root.cz/obrazek/249942/"><img src="https://i.iinfo.cz/images/615/debuggers-4-prev.png" class="image-249942" alt="&#160;" height="270" width="346" /></a>
<p><i>Obrázek 3: Ukázka grafického uživatelského rozhraní nástroje Nemiver při
ladění uživatelské aplikace. V&nbsp;dolní části si povšimněte
&bdquo;oušek&ldquo; jednotlivých podoken.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Příprava aplikací napsaných v&nbsp;Go pro ladění v&nbsp;GNU Debuggeru</h2>

<p>U aplikací naprogramovaných například v&nbsp;céčku je jediným požadavkem na
bezproblémové použití GNU Debuggeru vypnutí optimalizací a přidání ladicích
informací. Podobně je tomu i v&nbsp;případě, že budeme chtít ladit aplikace
vytvořené v&nbsp;jazyku Go, navíc se ovšem ještě kvůli lepší kompatibilitě
doporučuje vypnutí komprimace ladicích informací ve výsledném binárním
souboru.</p>

<p>První pokusy s&nbsp;GNU Debuggerem učiníme při ladění a krokování
následujícího prográmku, který po svém spuštění sečte dvě hodnoty a vypíše
výsledek výpočtu na standardní výstup:</p>

<pre>
package <strong>main</strong>
&nbsp;
import "fmt"
&nbsp;
func <strong>main</strong>() {
        x := 10
        y := 20
&nbsp;
        z := x + y
&nbsp;
        fmt.Printf("%d + %d = %d\n", x, y, z)
}
</pre>

<p>Tento program přeložíme, ovšem při samotném překladu explicitně nastavíme
některé nestandardní parametry překladače i linkeru. Zejména se vypne inlining
funkcí a automatické použití registrů pro některé proměnné. Taktéž se zakáže
již zmíněná komprimace ladicích informací:</p>

<pre>
$ <strong>go build -ldflags=-compressdwarf=false -gcflags=all="-N -l" 01_add.go</strong>
</pre>

<p>Po prvním spuštění GNU Debuggeru se zobrazí varování, že nebylo možné
nakonfigurovat pomocný modul používaný při ladění aplikací naprogramovaných
v&nbsp;Go. Současně se zobrazí i přesný návod, jak tento problém napravit:</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-1.png" class="image-360848" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 4: První spuštění GNU Debuggeru s&nbsp;informacemi o tom, že se
nepodařilo inicializovat pomocný skript používaný při ladění Go
aplikací.</i></p>

<p>Jakmile výše navržené nastavení provedeme, bude již nové spuštění GNU
Debuggeru bezproblémové:</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-2.png" class="image-360849" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 5: Načtení přeloženého programu do GNU Debuggeru.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Orientace v&nbsp;laděném kódu</h2>

<p>V&nbsp;případě, že jsou do binárního souboru laděné aplikace přiloženy i
ladicí symboly, lze v&nbsp;GNU Debuggeru relativně snadno pracovat přímo se
zdrojovým kódem a využívat jména funkcí, jména proměnných, parametrů funkcí
atd. Taktéž je možné prohlížet obsah datových struktur, polí, popř.&nbsp;i
řezů, který bude správně interpretován. Nyní si ukažme některé příkazy, které
využijete prakticky při každém ladění. Debugger přitom bude spuštěn a bude do
něho načtena binární verze prvního příkladu:</p>

<pre>
$ <strong>gdb 01_add</strong>
</pre>

<p>Základním příkazem, který se může hodit například při nastavování
breakpointů, je příkaz <strong>info functions</strong>, který vypíše jak
všechny funkce z&nbsp;aplikace, tak i přímo či nepřímo volané funkce (pro zápis
tohoto příkazu použijte klávesu <strong>[Tab]</strong> pro kontextové
doplňování):</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-3.png" class="image-360850" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 6: Zobrazení seznamu všech funkcí nalezených v&nbsp;načteném
binárním programu a/nebo binární knihovně po zadání příkazu <strong>list
functions</strong>.</i></p>

<p><div class="rs-tip-major">Poznámka: povšimněte si důležité novinky &ndash;
na rozdíl od jazyka C mají všechny funkce naprogramované v&nbsp;Go po překladu
plný název obsahující mj.&nbsp;i jméno balíčku. To v&nbsp;praxi znamená, že
vstupní funkce se nejmenuje pouze <strong>main</strong>, ale
<strong>balíček.main</strong>, v&nbsp;našem případě <strong>main.main</strong>.
Tento formát je dodržen i u názvů metod, u nichž je specifikován příjemce
v&nbsp;závorkách.</div></p>

<p>Dalším užitečným příkazem je příkaz <strong>list</strong>, který ve svém
výchozím nastavení vypíše deset řádků zdrojového kódu. Opakováním příkazu (či
pouhým stlačením klávesy <strong>Enter</strong>, což má stejný význam, jako
explicitní opakování posledního příkazu) se zobrazí dalších deset řádků
atd.:</p>

<pre>
(gdb) <strong>list</strong>
1       package main
2
3       import "fmt"
4
5       func main() {
6               x := 10
7               y := 20
8
9               z := x + y
10
</pre>

<p>K&nbsp;příkazu <strong>list</strong> je možné explicitně přidat i číslo
prvního a posledního vypisovaného řádku, což je výhodné v&nbsp;případě, že
z&nbsp;nějakého chybového hlášení víte, na kterém řádku k&nbsp;chybě došlo.</p>

<pre>
(gdb) <strong>list 5,10</strong>
5       func main() {
6               x := 10
7               y := 20
8
9               z := x + y
10
</pre>

<p>Užitečnější je však použití příkazu <strong>list</strong> společně se jménem
funkce, protože nemusíte složitě zjišťovat, na jakém řádku je hledaná funkce
zapsána (ani v&nbsp;jakém je souboru):</p>

<pre>
(gdb) <strong>list main.main</strong>
1       package main
2
3       import "fmt"
4
5       func main() {
6               x := 10
7               y := 20
8
9               z := x + y
10
</pre>

<p>Pokud chcete jméno funkce vybrat ze seznamu, stačí napsat jen příkaz
<strong>list</strong>, mezeru a potom stlačit klávesu
<strong>[Tab]</strong>.</p>

<p>Užitečné mohou být i další varianty příkazu <strong>info</strong>:</p>

<pre>
(gdb) <strong>info</strong>
info address -- Describe where symbol SYM is stored
info all-registers -- List of all registers and their contents
info args -- Argument variables of current stack frame
info auto-load -- Print current status of auto-loaded files
info auto-load-scripts -- Print the list of automatically loaded Python scripts
info auxv -- Display the inferior's auxiliary vector
...
...
...
info warranty -- Various kinds of warranty you do not have
info watchpoints -- Status of specified watchpoints (all watchpoints if no argument)
info win -- List of all displayed windows
&nbsp;
Type "help info" followed by info subcommand name for full documentation.
Type "apropos word" to search for commands related to "word".
Command name abbreviations are allowed if unambiguous.
</pre>

<p>Například:</p>

<pre>
(gdb) <strong>info line</strong>
Line 5 of "/home/tester/go-root/article_25/01_add.go" starts at address 0x49dc40 &lt;main.main&gt;
   and ends at 0x49dc58 &lt;main.main+24&gt;.
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Spuštění programu, nastavení breakpointů a krokování</h2>

<p>Nyní se podíváme na způsob spuštění laděné aplikace přímo v&nbsp;GNU
Debuggeru. To je ve skutečnosti velmi jednoduché a přímočaré, protože postačuje
zadat příkaz <strong>run</strong> či jen <strong>r</strong>:</p>

<pre>
(gdb) <strong>r</strong>
Starting program: /home/tester/temp/go-root/article_25/01_add 
10 + 20 = 30
[Inferior 1 (process 4244) exited normally]
</pre>

<p><div class="rs-tip-major">Poznámka: při prvních sezeních s&nbsp;GNU
Debuggerem je vhodné si vytisknout <a
href="https://darkdust.net/files/GDB%20Cheat%20Sheet.pdf">GDB
Cheatsheet</a>.</div></p>

<p>Na libovolnou funkci, řádek či dokonce jednotlivou strojovou instrukci je
možné zaregistrovat breakpoint. Pokud se běh programu dostane na breakpoint, je
jeho běh přerušen a řízení se vrátí zpět uživateli do debuggeru. Nejjednodušeji
se nastavuje breakpoint na vstupním bodě nějaké (libovolně zvolené) funkce.
V&nbsp;tomto případě postačuje zadat příkaz <strong>break</strong> se jménem
funkce:</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-4.png" class="image-360851" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 7: Nastavení breakpointu na první příkaz ve funkcí
<strong>main</strong>. Plné jméno této funkce musí obsahovat i balíček, tedy
<strong>main.main</strong>.</i></p>

<p><div class="rs-tip-major">Poznámka: opět si povšimněte, že plné jméno funkce
je tvořeno názvem balíčku, tečkou a samotným jménem funkce (viz předchozí
kapitolu, kde jsme zmínili i metody). V&nbsp;některých případech však GNU
Debugger nemusí tečku správně interpretovat, takže je nutné úplné jméno funkce
zapsat do uvozovek.</div></p>

<p>Pokud nyní program znovu spustíme, zastaví se na právě nastaveném
breakpointu:</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-5.png" class="image-360852" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 8: Po spuštění programu příkazem <strong>r</strong> nebo <strong>run</strong> se jeho běh zastaví na breakpointu, tj.&nbsp;na prvním příkazu ve funkci <strong>main</strong>.</i></p>

<p>Nyní máme možnost pokračovat v&nbsp;běhu (<strong>c/continue</strong>), ale
zajímavější je použít příkaz <strong>n/next</strong>, který vykoná pouze jediný
programový řádek a posléze se běh programu opět zastaví. Vykonávaný řádek se
přitom vždy vypíše (pokud tedy nemáme zobrazeno TUI, potom se GNU Debugger
chová odlišně):</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-6.png" class="image-360853" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 9: Krokování jednotlivými příkazy pomocí příkazu
<strong>n</strong> nebo <strong>next</strong>.</i></p>

<p><div class="rs-tip-major">Poznámka: užitečná je i další vlastnost GNU
Debuggeru &ndash; při stisku klávesy Enter se zopakuje poslední příkaz, což je
zvlášť výhodné u příkazu <strong>n</strong>.</div></p>

<p>O tom, že GNU Debugger není žádné ořezávátko, možná svědčí i to, že se
v&nbsp;průběhu ladění může použít mj.&nbsp;i příkaz <strong>print</strong>
akceptující různé typy výrazů, lokální i globální proměnné, formátování
atd.:</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-7.png" class="image-360854" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 10: Po vykonání posledního příkazu ve funkci <strong>main</strong>
se program pochopitelně ukončí.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Využití TUI GNU Debuggeru</h2>

<p>Pro úplnost se ještě podívejme na to, jak vypadá TUI (textové uživatelské
rozhraní) zabudované do GNU Debuggeru, přesněji řečeno do jeho novějších verzí.
TUI je nutné povolit, a to buď spuštěním GNU Debuggeru nikoli příkazem
<strong>gdb</strong>, ale příkazem <strong>gdbtui</strong>, popř.&nbsp;kdykoli
při běhu GNU Debuggeru příkazem:</p>

<pre>
(gdb) <strong>tui enable</strong>
</pre>

<img src="https://i.iinfo.cz/images/338/go-debugging-8.png" class="image-360855" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 11: GNU Debugger po zobrazení textového uživatelského rozhraní ve
chvíli, kdy je nastaven breakpoint na vstupní bod (přesněji řečeno na první
příkaz) ve funkci <strong>main</strong>. Na levém okraji se zobrazují jak
breakpointy, tak i ukazatel na právě prováděný či krokovaný příkaz.</i></p>

<p>V&nbsp;základním nastavení je terminál rozdělen do dvou oken &ndash; první
okno obsahuje zdrojový kód, druhé pak klasické rozhraní příkazového řádku. Ve
skutečnosti je však možné zobrazit i další okna, například speciální okno
s&nbsp;registry atd. V&nbsp;okně se zdrojovým kódem se navíc zobrazují
breakpointy a další důležité informace, takže &bdquo;režim TUI&ldquo; může být
pro mnohé vývojáře velmi užitečný (dokonce si dovolím říct, že je časově
výhodnější se naučit pracovat v&nbsp;tomto režimu, než řešit problémy
s&nbsp;různými GUI nadstavbami nad GNU Debuggerem).</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-9.png" class="image-360856" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 12: Krokování programu (příkaz <strong>n/next</strong>) při
zobrazeném TUI. Zatímco znak breakpointu zůstal (pochopitelně) na svém místě,
ukazatel na právě prováděný příkaz se přesunul.</i></p>

<p><div class="rs-tip-major">Poznámka: podrobnější informace o TUI získáte
příkazem <strong>help tui</strong>, všechny příkazy, které se TUI zabývají pak
příkazem <strong>apropos tui</strong>:</div></p>

<pre>
(gdb) <strong>apropos tui</strong>
set tui -- TUI configuration variables
set tui active-border-mode -- Set the attribute mode to use for the active TUI window border
set tui border-kind -- Set the kind of border for TUI windows
set tui border-mode -- Set the attribute mode to use for the TUI window borders
show tui -- TUI configuration variables
show tui active-border-mode -- Show the attribute mode to use for the active TUI window border
show tui border-kind -- Show the kind of border for TUI windows
show tui border-mode -- Show the attribute mode to use for the TUI window borders
tui -- Text User Interface commands
tui reg -- TUI commands to control the register window
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Příkaz <strong>display</strong></h2>

<p>Již v&nbsp;předchozích kapitolách jsme si řekli, že libovolnou proměnnou (či
dokonce výsledek nějakého složitějšího výrazu) je možné zobrazit příkazem
<strong>print</strong>. Velmi často, zejména při ladění různých programových
smyček, je však zapotřebí neustále zjišťovat hodnoty několika proměnných, a to
v&nbsp;každém sledovaném kroku. V&nbsp;tomto případě je pochopitelně opakované
použití příkazu <strong>print</strong> nepříjemné, ovšem GNU Debugger obsahuje
ještě jeden příkaz: <strong>display</strong>:</p>

<pre>
(gdb) <strong>help display</strong>
Print value of expression EXP each time the program stops.
/FMT may be used before EXP as in the "print" command.
/FMT "i" or "s" or including a size-letter is allowed,
as in the "x" command, and then EXP is used to get the address to examine
and examining is done as in the "x" command.
&nbsp;
With no argument, display all currently requested auto-display expressions.
Use "undisplay" to cancel display requests previously made.
</pre>

<p>Tímto příkazem je tedy možné &bdquo;zaregistrovat&ldquo; ty výrazy, které se
mají neustále vyhodnocovat, a to v&nbsp;každém kroku ladění. Podívejme se na
praktické použití tohoto velmi užitečného příkazu:</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-10.png" class="image-360857" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 13: Při krokování funkcí <strong>main.main</strong> budeme
sledovat obsah lokálních proměnných <strong>x</strong>, <strong>y</strong> a
<strong>z</strong>. Povšimněte si, že ihned po vstupu do funkce mají tyto
proměnné nedefinovanou hodnotu.</i></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-11.png" class="image-360858" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 14: Třikrát jsme spustili příkaz <strong>next</strong>, takže se
provedly první tři řádky s&nbsp;příkazy ve funkci <strong>main.main</strong>.
Před provedením příkazu na řádku 11 jsou všechny sledované proměnné
inicializované a mají očekávané hodnoty.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Informace o lokálních proměnných, zobrazení datových typů programovacího jazyka Go</h2>

<p>Nyní si ukážeme, jak dobře (či špatně) dokáže GNU Debugger sledovat hodnoty
lokálních proměnných ve chvíli, kdy jsou použity datové typy specifické pro
programovací jazyk Go. Začneme aplikací, v&nbsp;níž se používá jedno pole a
několik řezů (<i>slice</i>):</p>

<pre>
package <strong>main</strong>
&nbsp;
import "fmt"
&nbsp;
func <strong>main</strong>() {
        var a1 [20]int
&nbsp;
        for i := 0; i &lt; len(a1); i++ {
                a1[i] = i + 1
        }
&nbsp;
        var slice1 []int = a1[:]
        var slice2 []int = a1[5:15]
        slice3 := slice2[5:]
&nbsp;
        fmt.Println(a1)
        fmt.Println(slice1)
        fmt.Println(slice2)
        fmt.Println(slice3)
}
</pre>

<p>Překlad aplikace:</p>

<pre>
$ <strong>go build -ldflags=-compressdwarf=false -gcflags=all="-N -l" 02_arrays_slices.go</strong>
</pre>

<p>Spuštění debuggeru:</p>

<pre>
$ <strong>gdb 02_arrays_slices</strong>
</pre>

<p>Nyní již můžeme sledovat chování debuggeru při krokování jednotlivými
příkazy ve funkci <strong>main.main</strong>:</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-14.png" class="image-360861" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 15: Načtení aplikace do GNU Debuggeru a zobrazení jejího
zdrojového kódu.</i></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-12.png" class="image-360859" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 16: Po nastavení breakpointu a spuštění programu se dostaneme
před první příkaz funkce <strong>main.main</strong>.</i></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-13.png" class="image-360860" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 17: Příkazem <strong>info locals</strong> zobrazíme informaci o
všech lokálních proměnných funkce, ve které se nacházíme.</i></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-15.png" class="image-360862" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 18: Příkazem <strong>n</strong> přejdeme až na řádek, v&nbsp;němž
jsou všechny lokální proměnné inicializovány.</i></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-16.png" class="image-360863" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 19: Zobrazení obsahu řezů (slices).</i></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-17.png" class="image-360864" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 20: Pseudofunkcemi <strong>$cap()</strong> a
<strong>$len()</strong> můžeme získat informace o kapacitě řezu a o jeho délce
(což jsou dvě hodnoty, které se od sebe mohou lišit).</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Zobrazení prvků struktur</h2>

<p>Podobným způsobem si můžeme vyzkoušet, jak dobře dokáže GNU Debugger
zobrazit informace o strukturách (záznamech). Pro toto otestování použijeme
zdrojový kód s&nbsp;novým datovým typem představujícím uživatelsky definovanou
datovou strukturu pojmenovanou jednoduše <strong>User</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import "fmt"
&nbsp;
type <strong>User</strong> struct {
        id      uint32
        name    string
        surname string
}
&nbsp;
func <strong>main</strong>() {
        user1 := User{
                id:      1,
                name:    "Linus",
                surname: "Torvalds"}
&nbsp;
        fmt.Println(user1)
&nbsp;
        user1.id = 2
        user1.name = "Steve"
        user1.surname = "Ballmer"
&nbsp;
        fmt.Println(user1)
}
</pre>

<p>Opět si ukažme chování GNU Debuggeru:</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-19.png" class="image-360866" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 21: Načtení aplikace do GNU Debuggeru a zobrazení jejího
zdrojového kódu. Nastavení breakpointu a zobrazení informace o datovém typu
<strong>User</strong>.</i></p>

<p>Použili jsme zde nový příkaz <strong>whatis</strong>:</p>

<pre>
(gdb) <strong>help whatis</strong>
Print data type of expression EXP.
Only one level of typedefs is unrolled.  See also "ptype".
</pre>

<img src="https://i.iinfo.cz/images/338/go-debugging-18.png" class="image-360865" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 22: Zajímavá (ale nijak nebezpečná) situace, která nastala ve
chvíli, kdy není obsah datové struktury inicializován, tj.&nbsp;její prvky
mohou obsahovat jakoukoli hodnotu.</i></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-20.png" class="image-360867" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 23: I samotná inicializace datové struktury je krokovatelná;
v&nbsp;tomto případě se skládá ze třech kroků.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Informace o zásobníkových rámcích a o vláknech</h2>

<p>Při ladění se velmi často dostaneme do situace, kdy je nutné sledovat obsah
zásobníkových rámců (<i>stack frame</i>). V&nbsp;GNU Debuggeru se pro tento
účel používá příkaz <strong>info frame</strong>, který je použitelný i při
ladění aplikací naprogramovaných v&nbsp;jazyku Go (i když tento jazyk používá
jiný formát rámců, mj.&nbsp;i kvůli podpoře gorutin atd.). Tuto funkcionalitu
otestujeme na příkladu, v&nbsp;němž se rekurzivně počítá hodnota
faktoriálu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import "fmt"
&nbsp;
func <strong>factorial</strong>(x uint) uint {
        if x == 0 {
                return 1
        } else {
                return x * factorial(x-1)
        }
}
&nbsp;
func <strong>main</strong>() {
        fmt.Println(factorial(4))
}
</pre>

<p>Breakpoint přitom nastavíme na příkaz <strong>return 1</strong>, který je
umístěn v&nbsp;podmínce zaručující, že již došlo k&nbsp;celé zavinovací
(<i>winding</i>) fázi rekurze:</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-21.png" class="image-360868" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 24: Načtení laděného programu a nastavení breakpointu.</i></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-22.png" class="image-360869" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 25: Spuštění programu (ten se zastaví na breakpointu) a vytištění
obsahu aktuálního zásobníkového rámce příkazem <strong>info
frame</strong>.</i></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-23.png" class="image-360870" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 26: Zobrazit si můžeme i takzvaný <strong>backtrace</strong>,
z&nbsp;něhož lze vyčíst historii zavinovací fáze rekurzivního výpočtu.</i></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-24.png" class="image-360871" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 27: Získat je možné i seznam běžících gorutin
popř.&nbsp;fyzických vláken. Zásobníkové rámce se poté vypíšou pro vybrané
vlákno.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Debugger Delve</h2>

<p>Ve druhé části dnešního článku se seznámíme s&nbsp;některými základními
možnostmi, které jsou nabízeny debuggerem Delve. Na rozdíl od GNU Debuggeru,
který podporuje mnoho programovacích jazyků i formátů souborů/knihoven, je
Delve určen primárně pro použití těmi vývojáři, kteří používají programovací
jazyk Go. Delve je přitom pro Go programátory doporučovaným primárním
debuggerem, což mj.&nbsp;znamená, že práce na vylepšení kooperace mezi Go a GNU
Debuggerem mají relativně nízkou prioritu. I to může být jeden z&nbsp;důvodů,
proč je doporučován přechod na tento debugger, i když je nutné již na úvod
poznamenat, že ne všechny funkce, které jsou dostupné v&nbsp;GNU Debuggeru
nalezneme i v&nbsp;nástroji Delve.</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-25.png" class="image-360872" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 28: Přepínače, s&nbsp;nimiž je možné spustit debugger
Delve.</i></p>

<p>Debugger Delve se nainstaluje podobně, jako jakýkoli jiný balíček připravený
pro programovací jazyk Go:</p>

<pre>
$ <strong>go get -u github.com/go-delve/delve/cmd/dlv</strong>
</pre>

<p>Po instalaci se pro jistotu přesvědčte, že v&nbsp;proměnné prostředí
<strong>PATH</strong> je nastavena i cesta do adresáře
<strong>~/go/bin/</strong>.</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-26.png" class="image-360873" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 29: Část seznamu všech příkazů debuggeru Delve.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Spuštění debuggeru, načtení aplikace a nastavení breakpointů</h2>

<p>Debugger Delve se spouští příkazem <strong>dlv</strong>. Při spuštění je
nutné specifikovat, jaká operace se má provést. Pro ladění a krokování aplikací
se použije operace <strong>debug</strong> a v&nbsp;tomto případě je debuggeru
nutné předat i jméno balíčku popř.&nbsp;jméno souboru se zdrojovým kódem
(samotný překlad nemusíme provést):</p>

<pre>
$ <strong>dlv debug 01_add.go</strong>
</pre>

<p>Breakpoint se nastavuje stejným příkazem <strong>b</strong>, jako v&nbsp;GNU
Debuggeru:</p>

<pre>
(dlv) <strong>b man.main</strong>
</pre>

<p>Následně se může program spustit příkazem <strong>c</strong> (continue).</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-27.png" class="image-360874" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 30: Spuštění debuggeru, inicializace laděné aplikace, nastavení
breakpointu a doskok na breakpoint.</i></p>

<p>Příkazy <strong>n</strong> a <strong>locals</strong> pracují podobně, jako
v&nbsp;GNU Debuggeru:</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-28.png" class="image-360875" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 31: Výpis obsahu lokálních proměnných, přičemž pouze dvě
z&nbsp;nich jsou v&nbsp;daný okamžik inicializovány.</i></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-29.png" class="image-360876" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 32: Krokovat je možné i kódem, který se spouští při opouštění
aplikace.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Zobrazení obsahu datových typů programovacího jazyka Go</h2>

<p>Debugger Delve pochopitelně dokáže pracovat s&nbsp;hodnotami libovolného
datového typu programovacího jazyka Go. Pro otestování těchto funkcí použijeme
ty stejné demonstrační příklady, jako tomu bylo u GNU Debuggeru:</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-30.png" class="image-360877" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 33: Zobrazení obsahu (prvků) pole a řezu. Povšimněte si, že
v&nbsp;případě řezu se zobrazí jak kapacita, tak i aktuální délka.</i></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-31.png" class="image-360878" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 34: Zobrazení obsahu uživatelsky definované datové struktury
(záznamu).</i></p>

<p>Další možnosti jsou popsány v&nbsp;nápovědě:</p>

<pre>
(dlv) <strong>help print</strong>
Evaluate an expression.
&nbsp;
        [goroutine <n>] [frame <m>] print <expression>
&nbsp;
See $GOPATH/src/github.com/go-delve/delve/Documentation/cli/expr.md for a description of supported expressions.
</pre>

<pre>
(dlv) <strong>help locals</strong>
Print local variables.
&nbsp;
        [goroutine &lt;n&gt;] [frame &lt;m&gt;] locals [-v] [&lt;regex&gt;]
&nbsp;
The name of variables that are shadowed in the current scope will be shown in parenthesis.
&nbsp;
If regex is specified only local variables with a name matching it will be returned. If -v is specified more information about each local variable will be shown.
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Zobrazení obsahu zásobníku</h2>

<p>I v&nbsp;Delve je pochopitelně možné zobrazit obsah zásobníku,
resp.&nbsp;přesněji řečeno obsah jednotlivých zásobníkových rámců. Tuto
funkcionalitu si opět vyzkoušíme na demonstračním příkladu, v&nbsp;němž je
implementován rekurzivní výpočet faktoriálu. Breakpoint nastavíme na příkaz
<strong>return 1</strong>, jenž je zavolaný při ukončení zavinovací fáze
rekurze:</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-32.png" class="image-360879" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 35: Zastavení běhu programu (resp.&nbsp;aktuální gorutiny) na
řádku <strong>return 1</strong>.</i></p>

<p>Následně je možné použít příkaz <strong>stack</strong> pro zobrazení historie volání funkcí:</p>

<pre>
(dlv) <strong>help stack</strong>
Print stack trace.
&nbsp;
        [goroutine &lt;n&gt;] [frame &lt;m&gt;] stack [&lt;depth&gt;] [-full] [-offsets] [-defer] [-a &lt;n&gt;] [-adepth &lt;depth&gt;]
&nbsp;
        -full           every stackframe is decorated with the value of its local variables and arguments.
        -offsets        prints frame offset of each frame.
        -defer          prints deferred function call stack for each frame.
        -a &lt;n&gt;          prints stacktrace of n ancestors of the selected goroutine (target process must have tracebackancestors enabled)
        -adepth &lt;depth&gt; configures depth of ancestor stacktrace
</pre>

<img src="https://i.iinfo.cz/images/338/go-debugging-33.png" class="image-360880" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 36: Zobrazení obsahu zásobníkových rámců.</i></p>

<p>Podrobnější informace poskytne příkaz <strong>stack -full</strong>:</p>

<pre>
(dlv) <strong>stack -full</strong>
&nbsp;
0  0x00000000004a0b70 in main.factorial
   at ./04_factorial.go:7
       x = 0
       ~r1 = 0
&nbsp;
1  0x00000000004a0b94 in main.factorial
   at ./04_factorial.go:9
       x = 1
       ~r1 = 0
&nbsp;
2  0x00000000004a0b94 in main.factorial
   at ./04_factorial.go:9
       x = 2
       ~r1 = 0
&nbsp;
3  0x00000000004a0b94 in main.factorial
   at ./04_factorial.go:9
       x = 3
       ~r1 = 0
&nbsp;
4  0x00000000004a0b94 in main.factorial
   at ./04_factorial.go:9
       x = 4
       ~r1 = 0
&nbsp;
5  0x00000000004a0bee in main.main
   at ./04_factorial.go:14
&nbsp;
6  0x000000000042da0f in runtime.main
   at /opt/go/src/runtime/proc.go:200
       needUnlock = false
       g = (*runtime.g)(0xc000000180)
       fn = (unreadable empty OP stack)
&nbsp;
7  0x0000000000457a81 in runtime.goexit
   at /opt/go/src/runtime/asm_amd64.s:1337
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Demonstrační příklad využívající gorutiny</h2>

<p>Pro zjištění informací o gorutinách použijeme jiný demonstrační příklad,
který po svém spuštění inicializuje a spustí tři další gorutiny, jenž budou
pracovat současně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "time"
)
&nbsp;
func <strong>print_chars</strong>() {
        for ch := 'a'; ch &lt;= 'z'; ch++ {
                fmt.Printf("%c", ch)
                time.Sleep(200 * time.Millisecond)
        }
}
&nbsp;
func <strong>print_dots</strong>() {
        for i := 0; i &lt; 30; i++ {
                fmt.Print(".")
                time.Sleep(200 * time.Millisecond)
        }
}
&nbsp;
func <strong>print_spaces</strong>() {
        for i := 0; i &lt; 60; i++ {
                fmt.Print(" ")
                time.Sleep(110 * time.Millisecond)
        }
}
&nbsp;
func <strong>main</strong>() {
        fmt.Println("main begin")
        go print_chars()
        go print_spaces()
        go print_dots()
        time.Sleep(6 * time.Second)
        fmt.Println("main end")
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Základní informace o gorutinách</h2>

<p>Po nastavení breakpointu na řádek:</p>

<pre>
time.Sleep(6 * time.Second)
</pre>

<p>si můžeme zobrazit všechny gorutiny, a to příkazem
<strong>goroutines</strong>. Příkaz <strong>gorutine</strong> (bez
&bdquo;s&ldquo; na konci) slouží pro zobrazení podrobnějších informací o
aktuálně sledované gorutině:</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-34.png" class="image-360881" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 37: Informace o aktuálně sledované gorutině i seznam všech dalších gorutin.</i></p>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že Delve nepoužívá příkaz
<strong>info ...něco...</strong>, což poněkud prodlužuje seznam základních
příkazů.</div></p>

<p>Další informace samozřejmě opět poskytne nápověda:</p>

<pre>
(dlv) <strong>help goroutine</strong>
Shows or changes current goroutine
...
...
...
</pre>

<p>a:</p>

<pre>
(dlv) <strong>help goroutines</strong>
List program goroutines.
&nbsp;
        goroutines [-u (default: user location)|-r (runtime location)|-g (go statement location)|-s (start location)] [ -t (stack trace)]
&nbsp;
Print out info for every goroutine. The flag controls what information is shown along with each goroutine:
&nbsp;
        -u      displays location of topmost stackframe in user code
        -r      displays location of topmost stackframe (including frames inside private runtime functions)
        -g      displays location of go instruction that created the goroutine
        -s      displays location of the start function
        -t      displays stack trace of goroutine
&nbsp;
If no flag is specified the default is -u.
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Demonstrační příklad používající kanály</h2>

<p>Kanály slouží mj.&nbsp;i pro předávání dat mezi gorutinami. Z&nbsp;pohledu
debuggeru Delve se jedná o běžný datový typ (i když interně dosti
komplikovaný), jehož obsah lze snadno zobrazit.  To si ověříme na následujícím
příkladu:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func message(id int, channel chan int) {
        fmt.Printf("gorutina %d\n", id)
        channel &lt;- 1
}
&nbsp;
func main() {
        channel := make(chan int)
&nbsp;
        fmt.Println("main begin")
        go message(1, channel)
&nbsp;
        fmt.Println("waiting...")
&nbsp;
        code, status := &lt;-channel
&nbsp;
        fmt.Printf("received code: %d and status: %t\n", code, status)
        fmt.Println("main end")
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Základní informace o kanálech</h2>

<p>Informace o kanálu, resp.&nbsp;přesněji řečeno o obsahu proměnné typu kanál,
se zobrazí příkazem <strong>print</strong> nebo zkráceně jen
<strong>p</strong>:</p>

<img src="https://i.iinfo.cz/images/338/go-debugging-35.png" class="image-360882" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 38: Zobrazení informací o kanálu po jeho inicializaci
v&nbsp;debuggeru.</i></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-36.png" class="image-360883" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 39: Druhá obrazovka naznačující, jak je kanál ve skutečnosti
složitou datovou strukturou.</i></p>

<img src="https://i.iinfo.cz/images/338/go-debugging-37.png" class="image-360884" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 40: V&nbsp;této chvíli běží v&nbsp;aplikaci dvě gorutiny.</i></p>

<p>Podrobnější informace o frontě vytvořené pro předávání zpráv přes kanál:</p>

<pre>
(dlv) <strong>p channel.sendq</strong>
waitq&lt;int&gt; {
        first: *sudog&lt;int&gt; {
                g: *(*runtime.g)(0xc000001080),
                isSelect: false,
                next: *runtime.sudog nil,
                prev: *runtime.sudog nil,
                elem: *1,
                acquiretime: 0,
                releasetime: 0,
                ticket: 0,
                parent: *runtime.sudog nil,
                waitlink: *runtime.sudog nil,
                waittail: *runtime.sudog nil,
                c: *(*runtime.hchan)(0xc000080060),},
        last: *sudog&lt;int&gt; {
                g: *(*runtime.g)(0xc000001080),
                isSelect: false,
                next: *runtime.sudog nil,
                prev: *runtime.sudog nil,
                elem: *1,
                acquiretime: 0,
                releasetime: 0,
                ticket: 0,
                parent: *runtime.sudog nil,
                waitlink: *runtime.sudog nil,
                waittail: *runtime.sudog nil,
                c: *(*runtime.hchan)(0xc000080060),},}
</pre>

<img src="https://i.iinfo.cz/images/338/go-debugging-38.png" class="image-360885" alt="&#160;" width="566" height="381" />
<p><i>Obrázek 41: Přepnutí na jinou gorutinu, která se bude sledovat.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech šesti dnes použitých demonstračních příkladů byly
uloženy do Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně dva megabajty), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Soubor</th><th>Popis</th><th>Cesta</th></tr>
<tr><td>1</td><td>01_add.go</td><td>jednoduchý program, který sečte dvojici celočíselných hodnot</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_25/01_add.go">https://github.com/tisnik/go-root/blob/master/article_25/01_add.go</a></td></tr>
<tr><td>2</td><td>02_arrays_slices.go</td><td>základní operace s&nbsp;poli a s&nbsp;řezy</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_25/02_arrays_slices.go">https://github.com/tisnik/go-root/blob/master/article_25/02_arrays_slices.go</a></td></tr>
<tr><td>3</td><td>03_structs.go</td><td>práce se strukturami (záznamy)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_25/03_structs.go">https://github.com/tisnik/go-root/blob/master/article_25/03_structs.go</a></td></tr>
<tr><td>4</td><td>04_factorial.go</td><td>rekurzivní výpočet faktoriálu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_25/04_factorial.go">https://github.com/tisnik/go-root/blob/master/article_25/04_factorial.go</a></td></tr>
<tr><td>5</td><td>05_goroutines.go</td><td>spuštění dvou gorutin</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_25/05_goroutines.go">https://github.com/tisnik/go-root/blob/master/article_25/05_goroutines.go</a></td></tr>
<tr><td>6</td><td>06_channels.go</td><td>gorutiny a kanály</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_25/06_channels.go">https://github.com/tisnik/go-root/blob/master/article_25/06_channels.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

