<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Lexémy a tokeny (tokenizace)</a></p>
<p><a href="#k03">*** 3. Syntaktická analýza (parsing)</a></p>
<p><a href="#k04">*** 4. Abstraktní syntaktický strom</a></p>
<p><a href="#k05">*** 5. Syntaktická analýza v&nbsp;Go &ndash; balíčky <strong>go/token</strong> a <strong>go/parser</strong></a></p>
<p><a href="#k06">*** 6. Čitelný výpis obsahu abstraktního syntaktického stromu</a></p>
<p><a href="#k07">*** 7. Průchod abstraktním syntaktickým stromem</a></p>
<p><a href="#k08">*** 8. Návrhový vzor Visitor</a></p>
<p><a href="#k09">*** 9. Zobrazení hloubky uzlu v&nbsp;AST</a></p>
<p><a href="#k10">*** 10. Koncové uzly v&nbsp;AST</a></p>
<p><a href="#k11">*** 11. AST zkonstruovaný pro sekvenci příkazů</a></p>
<p><a href="#k12">*** 12. Výrazy se závorkami a s&nbsp;různými prioritami operátorů</a></p>
<p><a href="#k13">*** 13. Konstrukce AST pro jediný výraz</a></p>
<p><a href="#k14">*** 14. Typy uzlů v&nbsp;AST</a></p>
<p><a href="#k15">*** 15. Podrobnější výpis informací o uzlech v&nbsp;AST</a></p>
<p><a href="#k16">*** 16. Složitější aritmetické výrazy, zjednodušení zobrazení AST</a></p>
<p><a href="#k17">*** 17. Logické výrazy</a></p>
<p><a href="#k18">*** 18. Výrazy obsahující operace s&nbsp;poli či řezy</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Lexémy a tokeny (tokenizace)</h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Syntaktická analýza (parsing)</h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. Abstraktní syntaktický strom</h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. Syntaktická analýza v&nbsp;Go &ndash; balíčky <strong>go/token</strong> a <strong>go/parser</strong></h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
&nbsp;
        "go/parser"
        "go/token"
)
&nbsp;
<i>// zdrojový kód, který se má naparsovat</i>
const source = `
package main
&nbsp;
var answer int = 42
`
&nbsp;
func <strong>main</strong>() {
        <i>// struktura reprezentující množinu zdrojových kódů</i>
        fileSet := token.NewFileSet()
&nbsp;
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        f, err := parser.ParseFile(fileSet, "", source, parser.AllErrors)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        <i>// výpis hodnoty typu *ast.File</i>
        fmt.Printf("%#v", f)
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Čitelný výpis obsahu abstraktního syntaktického stromu</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
&nbsp;
        "go/ast"
        "go/parser"
        "go/token"
)
&nbsp;
<i>// zdrojový kód, který se má naparsovat</i>
const source = `
package main
&nbsp;
var answer int = 42
`
&nbsp;
func <strong>main</strong>() {
        <i>// struktura reprezentující množinu zdrojových kódů</i>
        fileSet := token.NewFileSet()
&nbsp;
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        f, err := parser.ParseFile(fileSet, "", source, parser.AllErrors)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        <i>// čitelný výpis obsahu abstraktího syntaktického stromu</i>
        err = ast.Print(fileSet, f)
        if err != nil {
                panic(err)
        }
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Průchod abstraktním syntaktickým stromem</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
&nbsp;
        "go/ast"
        "go/parser"
        "go/token"
)
&nbsp;
<i>// zdrojový kód, který se má naparsovat</i>
const source = `
package main
&nbsp;
var answer int = 42
`
&nbsp;
<i>// funkce volaná při průchodu AST</i>
func inspectCallback(n ast.Node) bool {
        <i>// dosáhli jsme koncového uzlu?</i>
        if n == nil {
                return false
        }
&nbsp;
        <i>// tisk typu uzlu</i>
        fmt.Printf("%T\n", n)
        return true
}
&nbsp;
func <strong>main</strong>() {
        <i>// struktura reprezentující množinu zdrojových kódů</i>
        fileSet := token.NewFileSet()
&nbsp;
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        f, err := parser.ParseFile(fileSet, "", source, parser.AllErrors)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Inspect(f, inspectCallback)
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Návrhový vzor Visitor</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
&nbsp;
        "go/ast"
        "go/parser"
        "go/token"
)
&nbsp;
<i>// zdrojový kód, který se má naparsovat</i>
const source = `
package main
&nbsp;
var answer int = 42
`
&nbsp;
<i>// nový datový typ implementující rozhraní ast.Visitor</i>
type <strong>visitor</strong> int
&nbsp;
<i>// implementace (jediné) funkce předepsané v rozhraní ast.Visitor</i>
func (v visitor) <strong>Visit</strong>(n ast.Node) ast.Visitor {
        <i>// dosáhli jsme koncového uzlu?</i>
        if n == nil {
                return nil
        }
&nbsp;
        <i>// tisk pozice a typu uzlu</i>
        fmt.Printf("%T\n", n)
        return v + 1
}
&nbsp;
func <strong>main</strong>() {
        <i>// struktura reprezentující množinu zdrojových kódů</i>
        fileSet := token.NewFileSet()
&nbsp;
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        f, err := parser.ParseFile(fileSet, "", source, parser.AllErrors)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        var v visitor
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Walk(v, f)
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Zobrazení hloubky uzlu v&nbsp;AST</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "strings"
&nbsp;
        "go/ast"
        "go/parser"
        "go/token"
)

<i>// zdrojový kód, který se má naparsovat</i>
const source = `
package main
&nbsp;
var answer int = 42
`
&nbsp;
<i>// nový datový typ implementující rozhraní ast.Visitor</i>
type <strong>visitor</strong> int
&nbsp;
<i>// implementace (jediné) funkce předepsané v rozhraní ast.Visitor</i>
func (v visitor) <strong>Visit</strong>(n ast.Node) ast.Visitor {
        <i>// dosáhli jsme koncového uzlu?</i>
        if n == nil {
                return nil
        }
&nbsp;
        <i>// tisk pozice a typu uzlu</i>
        fmt.Printf("%3d\t", v)
        fmt.Printf("%s%T\n", strings.Repeat("\t", int(v)), n)
        return v + 1
}
&nbsp;
func <strong>main</strong>() {
        <i>// struktura reprezentující množinu zdrojových kódů</i>
        fileSet := token.NewFileSet()
&nbsp;
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        f, err := parser.ParseFile(fileSet, "", source, parser.AllErrors)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        var v visitor
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Walk(v, f)
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Koncové uzly v&nbsp;AST</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "strings"
&nbsp;
        "go/ast"
        "go/parser"
        "go/token"
)
&nbsp;
<i>// zdrojový kód, který se má naparsovat</i>
const source = `
package main
&nbsp;
var answer int = 42
`
&nbsp;
<i>// nový datový typ implementující rozhraní ast.Visitor</i>
type <strong>visitor</strong> int
&nbsp;
<i>// implementace (jediné) funkce předepsané v rozhraní ast.Visitor</i>
func (v visitor) <strong>Visit</strong>(n ast.Node) ast.Visitor {
        <i>// dosáhli jsme koncového uzlu?</i>
        if n == nil {
&nbsp;
                <i>// tisk pozice a typu uzlu</i>
                fmt.Printf("%3d\t", v)
                fmt.Printf("%s%T\n", strings.Repeat("\t", int(v)), n)
                return nil
        }
&nbsp;
        <i>// tisk pozice a typu uzlu</i>
        fmt.Printf("%3d\t", v)
        fmt.Printf("%s%T\n", strings.Repeat("\t", int(v)), n)
        return v + 1
}
&nbsp;
func <strong>main</strong>() {
        <i>// struktura reprezentující množinu zdrojových kódů</i>
        fileSet := token.NewFileSet()
&nbsp;
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        f, err := parser.ParseFile(fileSet, "", source, parser.AllErrors)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        var v visitor
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Walk(v, f)
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. AST zkonstruovaný pro sekvenci příkazů</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "strings"
&nbsp;
        "go/ast"
        "go/parser"
        "go/token"
)
&nbsp;
<i>// zdrojový kód, který se má naparsovat</i>
const source = `
package main
&nbsp;
var x int = 6
var y int = 7
var answer int = x * y
`
&nbsp;
<i>// nový datový typ implementující rozhraní ast.Visitor</i>
type <strong>visitor</strong> int
&nbsp;
<i>// implementace (jediné) funkce předepsané v rozhraní ast.Visitor</i>
func (v visitor) <strong>Visit</strong>(n ast.Node) ast.Visitor {
        <i>// dosáhli jsme koncového uzlu?</i>
        if n == nil {
&nbsp;
                <i>// tisk pozice a typu uzlu</i>
                fmt.Printf("%3d\t", v)
                fmt.Printf("%s%T\n", strings.Repeat("\t", int(v)), n)
                return nil
        }
&nbsp;
        <i>// tisk pozice a typu uzlu</i>
        fmt.Printf("%3d\t", v)
        fmt.Printf("%s%T\n", strings.Repeat("\t", int(v)), n)
        return v + 1
}
&nbsp;
func <strong>main</strong>() {
        <i>// struktura reprezentující množinu zdrojových kódů</i>
        fileSet := token.NewFileSet()
&nbsp;
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        f, err := parser.ParseFile(fileSet, "", source, parser.AllErrors)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        var v visitor
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Walk(v, f)
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Výrazy se závorkami a s&nbsp;různými prioritami operátorů</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "strings"
&nbsp;
        "go/ast"
        "go/parser"
        "go/token"
)
&nbsp;
<i>// zdrojový kód, který se má naparsovat</i>
const source = `
package main
&nbsp;
var x int = 5
var y int = 6
var answer int = (1 + x) * (2 + y)
`
&nbsp;
<i>// nový datový typ implementující rozhraní ast.Visitor</i>
type <strong>visitor</strong> int
&nbsp;
<i>// implementace (jediné) funkce předepsané v rozhraní ast.Visitor</i>
func (v visitor) <strong>Visit</strong>(n ast.Node) ast.Visitor {
        <i>// dosáhli jsme koncového uzlu?</i>
        if n == nil {
&nbsp;
                <i>// tisk pozice a typu uzlu</i>
                fmt.Printf("%3d\t", v)
                fmt.Printf("%s%T\n", strings.Repeat("\t", int(v)), n)
                return nil
        }
&nbsp;
        <i>// tisk pozice a typu uzlu</i>
        fmt.Printf("%3d\t", v)
        fmt.Printf("%s%T\n", strings.Repeat("\t", int(v)), n)
        return v + 1
}
&nbsp;
func <strong>main</strong>() {
        <i>// struktura reprezentující množinu zdrojových kódů</i>
        fileSet := token.NewFileSet()
&nbsp;
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        f, err := parser.ParseFile(fileSet, "", source, parser.AllErrors)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        var v visitor
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Walk(v, f)
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Konstrukce AST pro jediný výraz</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "strings"
&nbsp;
        "go/ast"
        "go/parser"
)
&nbsp;
<i>// výraz, který se má naparsovat</i>
const source = `
(1 + x) * (2 + y)
`
&nbsp;
<i>// nový datový typ implementující rozhraní ast.Visitor</i>
type <strong>visitor</strong> int
&nbsp;
<i>// implementace (jediné) funkce předepsané v rozhraní ast.Visitor</i>
func (v visitor) <strong>Visit</strong>(n ast.Node) ast.Visitor {
        <i>// dosáhli jsme koncového uzlu?</i>
        if n == nil {
&nbsp;
                <i>// tisk pozice a typu uzlu</i>
                fmt.Printf("%3d\t", v)
                fmt.Printf("%s%T\n", strings.Repeat("\t", int(v)), n)
                return nil
        }
&nbsp;
        <i>// tisk pozice a typu uzlu</i>
        fmt.Printf("%3d\t", v)
        fmt.Printf("%s%T\n", strings.Repeat("\t", int(v)), n)
        return v + 1
}
&nbsp;
func <strong>main</strong>() {
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        f, err := parser.ParseExpr(source)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        var v visitor
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Walk(v, f)
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Typy uzlů v&nbsp;AST</h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Podrobnější výpis informací o uzlech v&nbsp;AST</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "strings"
&nbsp;
        "go/ast"
        "go/parser"
)
&nbsp;
<i>// výraz, který se má naparsovat</i>
const source = `
(1 + x) * (2 + y)
`
&nbsp;
<i>// nový datový typ implementující rozhraní ast.Visitor</i>
type <strong>visitor</strong> int
&nbsp;
<i>// implementace (jediné) funkce předepsané v rozhraní ast.Visitor</i>
func (v visitor) <strong>Visit</strong>(n ast.Node) ast.Visitor {
        <i>// dosáhli jsme koncového uzlu?</i>
        if n == nil {
                return nil
        }
&nbsp;
        <i>// tisk pozice a typu uzlu</i>
        fmt.Printf("%3d\t", v)
        var s string
&nbsp;
        switch x := n.(type) {
        case *ast.BasicLit:
                s = "Literal: " + x.Value
        case *ast.Ident:
                s = "Identifier: " + x.Name
        case *ast.BinaryExpr:
                s = "Binary operator: " + x.Op.String()
        case *ast.ParenExpr:
                s = "Expression in parenthesis"
        }
&nbsp;
        indent := strings.Repeat("\t", int(v))
        if s != "" {
                fmt.Printf("%s%s\n", indent, s)
        } else {
                fmt.Printf("%s%T\n", indent, n)
        }
        return v + 1
}
&nbsp;
func <strong>main</strong>() {
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        f, err := parser.ParseExpr(source)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        var v visitor
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Walk(v, f)
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Složitější aritmetické výrazy, zjednodušení zobrazení AST</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "strings"
&nbsp;
        "go/ast"
        "go/parser"
)

<i>// výraz, který se má naparsovat</i>
const source = `
((1 + x * 2) * -(2 + y / -z)) % (x + -y + -z)
`
&nbsp;
<i>// nový datový typ implementující rozhraní ast.Visitor</i>
type <strong>visitor</strong> int
&nbsp;
<i>// implementace (jediné) funkce předepsané v rozhraní ast.Visitor</i>
func (v visitor) <strong>Visit</strong>(n ast.Node) ast.Visitor {
        <i>// dosáhli jsme koncového uzlu?</i>
        if n == nil {
                return nil
        }
&nbsp;
        <i>// tisk pozice a typu uzlu</i>
        fmt.Printf("%3d\t", v)
        var s string
&nbsp;
        switch x := n.(type) {
        case *ast.BasicLit:
                s = "Literal: " + x.Value
        case *ast.Ident:
                s = "Identifier: " + x.Name
        case *ast.UnaryExpr:
                s = "Unary operator: " + x.Op.String()
        case *ast.BinaryExpr:
                s = "Binary operator: " + x.Op.String()
        case *ast.ParenExpr:
                s = "Expression in parenthesis"
        }
&nbsp;
        indent := strings.Repeat("\t", int(v))
        if s != "" {
                fmt.Printf("%s%s\n", indent, s)
        } else {
                fmt.Printf("%s%T\n", indent, n)
        }
        return v + 1
}
&nbsp;
func <strong>main</strong>() {
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        f, err := parser.ParseExpr(source)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        var v visitor
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Walk(v, f)
}
</pre>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "strings"
&nbsp;
        "go/ast"
        "go/parser"
)
&nbsp;
<i>// výraz, který se má naparsovat</i>
const source = `
((1 + x * 2) * -(2 + y / -z)) % (x + -y + -z)
`
&nbsp;
<i>// nový datový typ implementující rozhraní ast.Visitor</i>
type <strong>visitor</strong> int
&nbsp;
<i>// implementace (jediné) funkce předepsané v rozhraní ast.Visitor</i>
func (v visitor) <strong>Visit</strong>(n ast.Node) ast.Visitor {
        <i>// dosáhli jsme koncového uzlu?</i>
        if n == nil {
                return nil
        }
&nbsp;
        <i>// tisk pozice a typu uzlu</i>
        fmt.Printf("%3d\t", v)
        var s string
&nbsp;
        switch x := n.(type) {
        case *ast.BasicLit:
                s = x.Value
        case *ast.Ident:
                s = x.Name
        case *ast.UnaryExpr:
                s = x.Op.String()
        case *ast.BinaryExpr:
                s = x.Op.String()
        case *ast.ParenExpr:
                s = "("
        }
&nbsp;
        indent := strings.Repeat("  ", int(v))
        if s != "" {
                fmt.Printf("%s%s\n", indent, s)
        } else {
                fmt.Printf("%s%T\n", indent, n)
        }
        return v + 1
}
&nbsp;
func <strong>main</strong>() {
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        f, err := parser.ParseExpr(source)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        var v visitor
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Walk(v, f)
}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Logické výrazy</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "strings"
&nbsp;
        "go/ast"
        "go/parser"
)
&nbsp;
<i>// výraz, který se má naparsovat</i>
const source = `
a &amp;&amp; b || c
`
&nbsp;
<i>// nový datový typ implementující rozhraní ast.Visitor</i>
type <strong>visitor</strong> int
&nbsp;
<i>// implementace (jediné) funkce předepsané v rozhraní ast.Visitor</i>
func (v visitor) <strong>Visit</strong>(n ast.Node) ast.Visitor {
        <i>// dosáhli jsme koncového uzlu?</i>
        if n == nil {
                return nil
        }
&nbsp;
        <i>// tisk pozice a typu uzlu</i>
        fmt.Printf("%3d\t", v)
        var s string
&nbsp;
        switch x := n.(type) {
        case *ast.BasicLit:
                s = x.Value
        case *ast.Ident:
                s = x.Name
        case *ast.UnaryExpr:
                s = x.Op.String()
        case *ast.BinaryExpr:
                s = x.Op.String()
        case *ast.ParenExpr:
                s = "("
        }
&nbsp;
        indent := strings.Repeat("  ", int(v))
        if s != "" {
                fmt.Printf("%s%s\n", indent, s)
        } else {
                fmt.Printf("%s%T\n", indent, n)
        }
        return v + 1
}
&nbsp;
func <strong>main</strong>() {
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        f, err := parser.ParseExpr(source)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        var v visitor
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Walk(v, f)
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Výrazy obsahující operace s&nbsp;poli či řezy</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "strings"
&nbsp;
        "go/ast"
        "go/parser"
)
&nbsp;
<i>// výraz, který se má naparsovat</i>
const source = `
array1[10] + array2[x] + array3[a*b+c*d]
`
&nbsp;
<i>// nový datový typ implementující rozhraní ast.Visitor</i>
type <strong>visitor</strong> int
&nbsp;
<i>// implementace (jediné) funkce předepsané v rozhraní ast.Visitor</i>
func (v visitor) <strong>Visit</strong>(n ast.Node) ast.Visitor {
        <i>// dosáhli jsme koncového uzlu?</i>
        if n == nil {
                return nil
        }
&nbsp;
        <i>// tisk pozice a typu uzlu</i>
        fmt.Printf("%3d\t", v)
        var s string
&nbsp;
        switch x := n.(type) {
        case *ast.BasicLit:
                s = x.Value
        case *ast.Ident:
                s = x.Name
        case *ast.UnaryExpr:
                s = x.Op.String()
        case *ast.BinaryExpr:
                s = x.Op.String()
        case *ast.IndexExpr:
                s = "["
        case *ast.ParenExpr:
                s = "("
        }
&nbsp;
        indent := strings.Repeat("  ", int(v))
        if s != "" {
                fmt.Printf("%s%s\n", indent, s)
        } else {
                fmt.Printf("%s%T\n", indent, n)
        }
        return v + 1
}
&nbsp;
func <strong>main</strong>() {
        <i>// konstrukce parseru a parsing zdrojového kódu</i>
        f, err := parser.ParseExpr(source)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        var v visitor
&nbsp;
        <i>// zahájení průchodu abstraktním syntaktickým stromem</i>
        ast.Walk(v, f)
}
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>ast01.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast01.go">https://github.com/tisnik/go-root/blob/master/article_82/ast01.go</a></td></tr>
<tr><td> 2</td><td>ast02.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast02.go">https://github.com/tisnik/go-root/blob/master/article_82/ast02.go</a></td></tr>
<tr><td> 3</td><td>ast03.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast03.go">https://github.com/tisnik/go-root/blob/master/article_82/ast03.go</a></td></tr>
<tr><td> 4</td><td>ast04.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast04.go">https://github.com/tisnik/go-root/blob/master/article_82/ast04.go</a></td></tr>
<tr><td> 5</td><td>ast05.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast05.go">https://github.com/tisnik/go-root/blob/master/article_82/ast05.go</a></td></tr>
<tr><td> 6</td><td>ast06.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast06.go">https://github.com/tisnik/go-root/blob/master/article_82/ast06.go</a></td></tr>
<tr><td> 7</td><td>ast07.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast07.go">https://github.com/tisnik/go-root/blob/master/article_82/ast07.go</a></td></tr>
<tr><td> 8</td><td>ast08.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast08.go">https://github.com/tisnik/go-root/blob/master/article_82/ast08.go</a></td></tr>
<tr><td> 9</td><td>ast09.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast09.go">https://github.com/tisnik/go-root/blob/master/article_82/ast09.go</a></td></tr>
<tr><td>10</td><td>ast10.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast10.go">https://github.com/tisnik/go-root/blob/master/article_82/ast10.go</a></td></tr>
<tr><td>11</td><td>ast11.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast11.go">https://github.com/tisnik/go-root/blob/master/article_82/ast11.go</a></td></tr>
<tr><td>12</td><td>ast12.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast12.go">https://github.com/tisnik/go-root/blob/master/article_82/ast12.go</a></td></tr>
<tr><td>13</td><td>ast13.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast13.go">https://github.com/tisnik/go-root/blob/master/article_82/ast13.go</a></td></tr>
<tr><td>14</td><td>ast14.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_82/ast14.go">https://github.com/tisnik/go-root/blob/master/article_82/ast14.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Abstract syntax tree<br />
<a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">https://en.wikipedia.org/wiki/Abstract_syntax_tree</a>
</li>

<li>Lexical analysis<br />
<a href="https://en.wikipedia.org/wiki/Lexical_analysis">https://en.wikipedia.org/wiki/Lexical_analysis</a>
</li>

<li>Parser<br />
<a href="https://en.wikipedia.org/wiki/Parsing#Parser">https://en.wikipedia.org/wiki/Parsing#Parser</a>
</li>

<li>Golang AST Package<br />
<a href="https://golangdocs.com/golang-ast-package">https://golangdocs.com/golang-ast-package</a>
</li>

<li>Popis příkazu <strong>gofmt</strong><br />
<a href="https://pkg.go.dev/cmd/gofmt">https://pkg.go.dev/cmd/gofmt</a>
</li>

<li>Popis příkazu <strong>govet</strong><br />
<a href="https://pkg.go.dev/cmd/vet">https://pkg.go.dev/cmd/vet</a>
</li>

<li>Repositář nástroje <strong>errcheck</strong><br />
<a href="https://github.com/kisielk/errcheck">https://github.com/kisielk/errcheck</a>
</li>

<li>Repositář nástroje <strong>goconst</strong><br />
<a href="https://github.com/jgautheron/goconst">https://github.com/jgautheron/goconst</a>
</li>

<li>Repositář nástroje <strong>gocyclo</strong><br />
<a href="https://github.com/fzipp/gocyclo">https://github.com/fzipp/gocyclo</a>
</li>

<li>Repositář nástroje <strong>ineffassign</strong><br />
<a href="https://github.com/gordonklaus/ineffassign">https://github.com/gordonklaus/ineffassign</a>
</li>

<li>Repositář nástroje <strong>gosec</strong><br />
<a href="https://github.com/securego/gosec">https://github.com/securego/gosec</a>
</li>

<li>Repositář nástroje <strong>go-critic</strong><br />
<a href="https://github.com/go-critic/go-critic">https://github.com/go-critic/go-critic</a>
</li>

<li>Seznam testů prováděných nástrojem <strong>go-critic</strong><br />
<a href="https://go-critic.com/overview">https://go-critic.com/overview</a>
</li>

<li>Welcome go-critic<br />
<a href="https://itnext.io/welcome-go-critic-a26b6e30f1c6">https://itnext.io/welcome-go-critic-a26b6e30f1c6</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

