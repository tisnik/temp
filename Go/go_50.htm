<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba grafů v jazyce Go</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba grafů v jazyce Go</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V padesáté části seriálu o programovacím jazyce Go navážeme na předchozí dva články, v nichž jsme si popsali některé možnosti nabízené projektem Gonum v oblasti numerické matematiky. Dnes si popíšeme dvě knihovny určené pro tvorbu grafů (naměřených hodnot, průběhů funkcí atd.).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba grafů v&nbsp;jazyce Go</a></p>
<p><a href="#k02">2. Knihovna <strong>glot</strong></a></p>
<p><a href="#k03">3. Graf s&nbsp;naměřenými hodnotami vykreslený knihovnou <strong>glot</strong></a></p>
<p><a href="#k04">4. Změna stylu vykreslování, specifikace rozsahů hodnot na osách x a y</a></p>
<p><a href="#k05">5. Vykreslení několika průběhů do jediného grafu</a></p>
<p><a href="#k06">6. Nastavení vyšší kvality zobrazení &ndash; použití antialiasingu</a></p>
<p><a href="#k07">7. Specifikace titulku grafu a popisů obou jeho os</a></p>
<p><a href="#k08">8. Vykreslení průběhu funkce</a></p>
<p><a href="#k09">9. Automatický výpočet hodnot funkce při použití metody <strong>AddFunc2d</strong></a></p>
<p><a href="#k10">10. Vykreslení průběhů několika funkcí do jediného grafu</a></p>
<p><a href="#k11">11. Nastavení hodnot zobrazovaných na osách</a></p>
<p><a href="#k12">12. Sloupcové grafy</a></p>
<p><a href="#k13">13. Zobrazení průběhu funkce se dvěma nezávislými proměnnými</a></p>
<p><a href="#k14">14. Knihovna <strong>plot</strong> z&nbsp;projektu Gonum</a></p>
<p><a href="#k15">15. Prázdný graf obsahující pouze legendu a osy</a></p>
<p><a href="#k16">16. Graf s&nbsp;naměřenými hodnotami vykreslený knihovnou <strong>plot</strong></a></p>
<p><a href="#k17">17. Změna popisků na osách grafu</a></p>
<p><a href="#k18">18. Zobrazení průběhů dvou funkcí v&nbsp;jediném grafu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba grafů v&nbsp;jazyce Go</h2>

<p>V&nbsp;předchozích dvou částech [<a
href="https://www.root.cz/clanky/gophernotes-kombinace-interaktivniho-prostredi-jupyteru-s-jazykem-go/">1</a>] [<a
href="https://www.root.cz/clanky/popis-vybranych-balicku-nabizenych-projektem-gonum/">2</a>]
<a href="https://www.root.cz/serialy/programovaci-jazyk-go/">seriálu o
programovacím jazyce Go</a> jsme se zabývali popisem některých možností
poskytovaných sadou knihoven dodávaných v&nbsp;rámci projektu <i>Gonum</i>.
Připomeňme si, že tento projekt programátorům poskytuje sadu funkcí, metod a
datových typů z&nbsp;oblasti numerické matematiky, lineární algebry, grafových
algoritmů atd. Většina výsledků je tištěna v&nbsp;textové podobě, ovšem mnohdy
budeme potřebovat i grafický výstup, zejména zobrazení dat popř.&nbsp;funkcí ve
formě grafů. Pro jazyk Go existuje hned několik takových knihoven, které se od
sebe odlišují jak poskytovanými možnostmi (jaké grafy lze vytvářet, do jaké
míry je jejich styl modifikovatelný atd.), tak i použitým <i>back endem</i>,
tedy knihovnou či nástrojem sloužím pro vlastní vykreslení grafu. Dnes se
seznámíme především s&nbsp;knihovnou nazvanou <i>glot</i>, ovšem ukážeme si i
základní grafy poskytované knihovnou <i>plot</i>, která pochází přímo
z&nbsp;projektu <i>Gonum</i>.</p>

<a href="https://www.root.cz/obrazek/400911/"><img src="https://i.iinfo.cz/images/124/matplotlib-1-prev.png" class="image-400911" alt="&#160;" width="358" height="270" /></a>
<p><i>Obrázek 1: V&nbsp;oblasti tvorby grafů nalezneme poměrně velké množství
různých nástrojů. Některé z&nbsp;těchto nástrojů jsou určeny pro jeden
konkrétní programovací jazyk (typicky pro R či pro jazyk Julia), další mohou
být obecnější. V&nbsp;oblasti open source patří mezi tyto nástroje například
populární knihovna <strong>Matplotlib</strong> pro programovací jazyk
Python.</i></p>

<p><div class="rs-tip-major">Poznámka: dnes popisovaná dvojice knihoven je sice
použitelná v&nbsp;poměrně velkém množství případů, ovšem programovací jazyk Go
se většinou používá pro tvorbu odlišných typů aplikací, typicky aplikací
s&nbsp;REST API rozhraním apod. Pokud vám tedy možnosti popisovaných knihoven
nebudou vyhovovat, může být užitečnější se zaměřit na použití odlišných
knihoven, které &bdquo;pouze&ldquo; poskytují data ve vhodném formátu, která
jsou následně zpracována a vykreslena do plochy HTML stránky s&nbsp;využitím
možností poskytovaných <i>canvasem</i> a programovacím jazykem JavaScript.  <a
href="https://github.com/brentp/go-chartjs">Jednu z&nbsp;takto koncipovaných
knihoven</a> si ve stručnosti popíšeme příště. Navíc uvidíme, že kvůli silnému
typovému systému jazyka Go a některým omezením volání funkcí (neexistence
<i>keywords</i> parametrů) nemusí být tvorba grafů v&nbsp;tomto jazyce tak
elegantní, jako v&nbsp;případě použití jazyka R, Matlabu či populární kombinace
<a href="https://www.root.cz/n/python/">Python</a>+<a
href="https://github.com/tisnik/presentations/blob/master/linuxdays2019/numpy/numpy.pdf">NumPy</a>+<a
href="https://www.root.cz/clanky/pouziti-moviepy-spolecne-s-matplotlibem-pro-tvorbu-animovanych-grafu/">Matplotlib</a>.</div></p>

<a href="https://www.root.cz/obrazek/400912/"><img src="https://i.iinfo.cz/images/124/matplotlib-2-prev.png" class="image-400912" alt="&#160;" width="358" height="270" /></a>
<p><i>Obrázek 2: Ukázka dalších možností poskytovaných knihovnou <strong>Matplotlib</strong>.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Knihovna <strong>glot</strong></h2>

<p>První knihovnou, která umožňuje v&nbsp;programovacím jazyce Go vykreslovat
některé typy grafů, je knihovna, která se jmenuje <strong>glot</strong>. Tento
název je odvozen od známého nástroje <i>Gnuplot</i>, který již <a
href="https://www.root.cz/serialy/gnuplot/">byl na stránkách Rootu popsán</a>.
Knihovna <i>glot</i> je totiž ve skutečnosti rozhraním mezi programovacím
jazykem Go a právě nástrojem <i>Gnuplot</i>, z&nbsp;čehož vyplývají některé
vlastnosti této knihovny, například závislost podporovaných výstupních formátů
na tom, jak byl <i>Gnuplot</i> přeložen. Knihovna <i>glot</i> sice
v&nbsp;aktuální verzi podporuje jen omezené množství grafů (v&nbsp;porovnání
s&nbsp;možnostmi <i>Gnuplotu</i>, ale například i <i>Matplotlibu</i>), ovšem
její vývoj není zdaleka ukončen, takže se pravděpodobně dočkáme dalších (dnes
chybějících) funkcí, popř.&nbsp;rozšíření možností již implementovaných
funkcí.</p>

<a href="https://www.root.cz/obrazek/400913/"><img src="https://i.iinfo.cz/images/124/matplotlib-3-prev.png" class="image-400913" alt="&#160;" width="358" height="270" /></a>
<p><i>Obrázek 3: Ještě jeden typ grafu vykreslený s&nbsp;využitím knihovny
<strong>Matplotlib</strong>.</i></p>

<p>Knihovna <i>glot</i> se nainstaluje stejným způsobem, jako jakákoli jiná
knihovna určená pro ekosystém programovacího jazyka Go, konkrétně příkazem
<strong>go get</strong>:</p>

<pre>
$ <strong>go get github.com/Arafatk/glot</strong>
</pre>

<p>Kromě toho je však nutné nainstalovat i vlastní <i>Gnuplot</i>:</p>

<pre>
$ <strong>sudo dnf install gnuplot-x11</strong>
</pre>

<p>popř.:</p>

<pre>
$ <strong>sudo apt-get install gnuplot-x11</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: kvůli závislosti na dalších balíčcích
tedy není instalace <i>glotu</i> tak přímočará, jak jsme jinak ve světě Go
zvyklí.</div></p>

<a href="https://www.root.cz/obrazek/400914/"><img src="https://i.iinfo.cz/images/124/matplotlib-4-prev.png" class="image-400914" alt="&#160;" width="358" height="270" /></a>
<p><i>Obrázek 4: Knihovna Matplotlib umožňuje i tvorbu trojrozměrných grafů,
projekcí 3D funkcí atd.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Graf s&nbsp;naměřenými hodnotami vykreslený knihovnou <strong>glot</strong></h2>

<p>Ukažme si nyní některé základní možnosti, které nám současná verze knihovny
<i>glot</i> nabízí. Nejprve vykreslíme jednoduchý graf, v&nbsp;němž budou
vyneseny &bdquo;naměřené&ldquo; hodnoty, které budou vyobrazeny jako jednotlivé
body. Naměřené hodnoty pro jednoduchost budeme reprezentovat sekvencí pevně
zadaných hodnot, a to i v&nbsp;několika dalších demonstračních příkladech
(samozřejmě je však možné příslušné hodnoty získat libovolným jiným
způsobem):</p>

<pre>
[]int32{1, 2, 4, 8, 9, 8, 4, 2, 1}
</pre>

<p>Před samotným vykreslením je nutné vytvořit objekt (datovou strukturu)
představující graf. K&nbsp;tomu slouží konstruktor nazvaný
<strong>NewPlot</strong>, kterému je nutné mj.&nbsp;předat informaci o tom, zda
se bude vykreslovat 2D či 3D graf:</p>

<pre>
plot, err := glot.NewPlot(2, false, false)
if err != nil {
        panic(err)
}
</pre>

<p><div class="rs-tip-major">Poznámka: po ukončení práce s&nbsp;grafem by se
mělo provést i jeho uzavření (deinicializace). Jedná se o typický případ, kdy
v&nbsp;programovacím jazyce Go použijeme konstrukci
<strong>defer</strong>:</div></p>

<pre>
defer plot.Close()
</pre>

<p>Dále je nutné do grafu přidat měřené body se specifikací jména vykreslené
řady/funkce i způsobu jejich vykreslení (zde formou jednotlivých bodů &ndash;
&bdquo;points&ldquo;):</p>

<pre>
plot.AddPointGroup("Measured data", "points", []int32{1, 2, 4, 8, 9, 8, 4, 2, 1})
</pre>

<p>Nakonec se výsledek uloží buď do rastrového souboru (PNG, GIF, JPEG) nebo do
formátu s&nbsp;vektorovým výstupem (PDF atd.):</p>

<pre>
plot.SavePlot("glot01.png")
</pre>

<p>Úplný zdrojový kód dnešního <a
href="https://github.com/tisnik/go-root/blob/master/article_50/glot01.go">prvního
demonstračního příkladu</a> vypadá takto:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/Arafatk/glot"
)
&nbsp;
func <strong>main</strong>() {
        plot, err := glot.NewPlot(2, false, false)
        if err != nil {
                panic(err)
        }
&nbsp;
        plot.AddPointGroup("Measured data", "points", []int32{1, 2, 4, 8, 9, 8, 4, 2, 1})
        plot.SavePlot("glot01.png")
}
</pre>

<img src="https://i.iinfo.cz/images/458/glot-1.png" class="image-400889" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 5: Graf s&nbsp;vynesenými naměřenými body vytvořený prvním
demonstračním příkladem.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Změna stylu vykreslování, specifikace rozsahů hodnot na osách x a y</h2>

<p>Ve druhém parametru metody <strong>AddPointGroup</strong> je nutné
specifikovat styl vykreslování hodnot. V&nbsp;prvním příkladu byly použity
jednotlivé body, ovšem hodnoty je možné spojit úsečkami:</p>

<pre>
plot.AddPointGroup("Measured data", "lines", []int32{1, 2, 4, 8, 9, 8, 4, 2, 1})
</pre>

<p>S&nbsp;následujícím výsledkem:</p>

<img src="https://i.iinfo.cz/images/458/glot-2.png" class="image-400890" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 6: Změna stylu vykreslování grafu &ndash; body jsou spojeny úsečkami.</i></p>

<p>K&nbsp;dispozici jsou následující styly vykreslování:</p>

<table>
<tr><th> #</th><th>Styl</th></tr>
<tr><td> 1</td><td>lines</td></tr>
<tr><td> 2</td><td>points</td></tr>
<tr><td> 3</td><td>linepoints</td></tr>
<tr><td> 4</td><td>impulses</td></tr>
<tr><td> 5</td><td>dots</td></tr>
<tr><td> 6</td><td>bar</td></tr>
<tr><td> 7</td><td>steps</td></tr>
<tr><td> 8</td><td>fill</td></tr>
<tr><td> 9</td><td>id</td></tr>
<tr><td>10</td><td>histogram</td></tr>
<tr><td>11</td><td>circle</td></tr>
<tr><td>12</td><td>errorbars</td></tr>
<tr><td>13</td><td>boxerrorbars</td></tr>
<tr><td>14</td><td>boxes</td></tr>
<tr><td>15</td><td>lp</td></tr>
</table>

<p>Úplný zdrojový kód <a
href="https://github.com/tisnik/go-root/blob/master/article_50/glot02.go">takto
upraveného demonstračního příkladu</a> vypadá následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/Arafatk/glot"
)
&nbsp;
func <strong>main</strong>() {
        plot, err := glot.NewPlot(2, false, false)
        if err != nil {
                panic(err)
        }
&nbsp;
        plot.AddPointGroup("Measured data", "lines", []int32{1, 2, 4, 8, 9, 8, 4, 2, 1})
        plot.SavePlot("glot02.png")
}
</pre>

<p>Graf je možné upravovat i dalšími způsoby. Typickým požadavkem je
specifikace rozsahu hodnot na x-ové a y-ové ose. To lze provést metodami
nazvanými <strong>SetXrange</strong> a <strong>SetYrange</strong>:</p>

<pre>
plot.SetXrange(-2, 10)
plot.SetYrange(0, 10)
</pre>

<p><div class="rs-tip-major">Poznámka: zajímavé je, že rozsahy jsou určeny
celými čísly a ne hodnotami s&nbsp;plovoucí řádovou čárkou. Pravděpodobně se
jedná o nedomyšlenost v&nbsp;návrhu knihovny, protože podobné omezení
v&nbsp;původním <i>Gnuplotu</i> <a
href="http://gnuplot.sourceforge.net/docs_4.2/node294.html">nenajdeme</a>
(autor článku posílá patch s&nbsp;opravou).</div></p>

<img src="https://i.iinfo.cz/images/458/glot-3.png" class="image-400891" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 7: Graf, v&nbsp;němž byly změněny rozsahy na x-ové i y-ové ose.</i></p>

<p>Opět se samozřejmě podíváme na <a
href="https://github.com/tisnik/go-root/blob/master/article_50/glot03.go">úplný
zdrojový kód tohoto demonstračního příkladu</a>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/Arafatk/glot"
)
&nbsp;
func <strong>main</strong>() {
        plot, err := glot.NewPlot(2, false, false)
        if err != nil {
                panic(err)
        }
&nbsp;
        plot.AddPointGroup("Measured data", "lines", []int32{1, 2, 4, 8, 9, 8, 4, 2, 1})
        plot.SetXrange(-2, 10)
        plot.SetYrange(0, 10)
        plot.SavePlot("glot03.png")
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vykreslení několika průběhů do jediného grafu</h2>

<p>Do jediného grafu je možné v&nbsp;případě potřeby (a ta je poměrně častá)
vykreslit i větší množství průběhů, přičemž je možné nezávisle nastavovat i
styly vykreslování jednotlivých částí grafu. Každý průběh je označen legendou,
která se předává jako první parametr metody <strong>AddPointGroup</strong>,
popř.&nbsp;dalších dále zmíněných metod určených pro přidání nějakého objektu
do grafu:</p>

<pre>
plot.AddPointGroup("Measured data", "lines", []float32{1.2, 1.9, 3.9, 8.2, 9.5, 8.1, 4.1, 1.8, 1.5})
plot.AddPointGroup("Expected data", "lines", []float32{1, 2, 4, 8, 9, 8, 4, 2, 1})
</pre>

<p>Samozřejmě lze zvolit odlišné styly vykreslování:</p>

<pre>
plot.AddPointGroup("Measured data", "points", []float32{1.2, 1.9, 3.9, 8.2, 9.5, 8.1, 4.1, 1.8, 1.5})
plot.AddPointGroup("Expected data", "lines", []float32{1, 2, 4, 8, 9, 8, 4, 2, 1})
</pre>

<p>Zdrojový kód programu, který vytvoří graf se dvěma průběhy, může v&nbsp;tom
nejjednodušším případě <a
href="https://github.com/tisnik/go-root/blob/master/article_50/glot04.go">vypadat
následovně</a>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/Arafatk/glot"
)
&nbsp;
func <strong>main</strong>() {
        plot, err := glot.NewPlot(2, false, false)
        if err != nil {
                panic(err)
        }
&nbsp;
        plot.AddPointGroup("Measured data", "lines", []float32{1.2, 1.9, 3.9, 8.2, 9.5, 8.1, 4.1, 1.8, 1.5})
        plot.AddPointGroup("Expected data", "lines", []float32{1, 2, 4, 8, 9, 8, 4, 2, 1})
&nbsp;
        plot.SetXrange(-2, 10)
        plot.SetYrange(0, 10)
        plot.SavePlot("glot04.png")
}
</pre>

<img src="https://i.iinfo.cz/images/458/glot-4.png" class="image-400892" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 8: Graf, do něhož byly zakresleny dva průběhy.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Nastavení vyšší kvality zobrazení &ndash; použití antialiasingu</h2>

<p>Všechny předchozí grafy nevypadají na obrazovce monitoru a v&nbsp;použitém
standardním rozlišení 640&times;480 pixelů příliš pěkně, a to mj.&nbsp;i
z&nbsp;toho důvodu, že jsou patrné &bdquo;schody&ldquo; na všech úsečkách,
které nejsou vodorovné nebo naopak svislé. Tento typický vzorek, který je
výsledkem aplikace klasického slavného <i>Bresenhamova algoritmu</i>, je však
možné odstranit aplikací některého z&nbsp;algoritmů, který úsečky vykreslí
s&nbsp;využitím antialiasingu (což vyžaduje použití více barvových odstínů). I
<i>Gnuplot</i> a tím pádem i na něm postavená knihovna <i>glot</i> tuto možnost
nabízí, a to konkrétně při použití back endu představovaného knihovnou
<i>Cairo</i>. Potíž ovšem nastává při použití metody <strong>SavePlot</strong>,
protože v&nbsp;této metodě <a
href="https://github.com/Arafatk/glot/blob/master/common.go#L173">se mění
nastavení</a> parametru <strong>terminal</strong>, jehož parametry <a
href="https://github.com/Arafatk/glot/blob/master/common.go#L199">jsou omezeny
na &bdquo;png&ldquo; a &bdquo;pdf&ldquo;</a> (opět se jedná o nedostatek
současné verze). Namísto metody <strong>SavePlot</strong> by bylo vhodné
zavolat tyto příkazy nástroje <i>Gnuplot</i>:</p>

<pre>
set terminal pngcairo
set output <i>jméno_souboru.png</i>
replot
</pre>

<p>Tyto příkazy sice nemají přímou obdobu v&nbsp;knihovně <i>glot</i>, což
ovšem nevadí, protože je možné namísto nich použít &bdquo;univerzální&ldquo;
metodu nazvanou <strong>Cmd</strong> nebo <strong>CheckedCmd</strong>:</p>

<pre>
plot.Cmd("set terminal pngcairo")
plot.Cmd("set output 'glot05.png'")
plot.Cmd("replot")
</pre>

<p>resp.:</p>

<pre>
plot.Checked("set terminal pngcairo")
plot.Checked("set output 'glot05.png'")
plot.Checked("replot")
</pre>

<p><div class="rs-tip-major">Poznámka: metody <strong>Cmd</strong> a
<strong>CheckedCmd</strong> se od sebe odlišují &ndash; první z&nbsp;těchto
metod vrací hodnotu typu <strong>error</strong> (nebo <strong>nil</strong>
pokud k&nbsp;chybě nedošlo), zatímco druhá metoda při detekci chyby přímo
zavolá funkci <strong>panic()</strong>.</div></p>

<p>Demonstrační příklad, který vytiskne graf ve vyšší kvalitě, by tedy <a
href="https://github.com/tisnik/go-root/blob/master/article_50/glot05.go">mohl
vypadat následovně</a>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/Arafatk/glot"
)
&nbsp;
func <strong>main</strong>() {
        plot, err := glot.NewPlot(2, false, false)
        if err != nil {
                panic(err)
        }
        defer plot.Close()
&nbsp;
        plot.AddPointGroup("Measured data", "lines", []float32{1.2, 1.9, 3.9, 8.2, 9.5, 8.1, 4.1, 1.8, 1.5})
        plot.AddPointGroup("Expected data", "lines", []float32{1, 2, 4, 8, 9, 8, 4, 2, 1})
&nbsp;
        plot.SetXrange(-2, 10)
        plot.SetYrange(0, 10)
        plot.Cmd("set terminal pngcairo")
        plot.Cmd("set output 'glot05.png'")
        plot.Cmd("replot")
}
</pre>

<img src="https://i.iinfo.cz/images/458/glot-5.png" class="image-400893" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 9: Antialiasing použitý při vykreslování.</i></p>

<p>Vzhledem k&nbsp;tomu, že požadavek na uložení grafu do rastrového obrázku ve
vyšší kvalitě bude pravděpodobně velmi častý, vytvoříme pro tento účel novou
metodu. Ovšem rozšíření datového typu z&nbsp;jiného balíčku o novou metodu není
přímo možné &ndash; musíme namísto toho zabalit původní datový typ do nového
uživatelsky definovaného typu:</p>

<pre>
type <strong>Plot</strong> struct {
        *glot.Plot
}
</pre>

<p>Pro tento nový typ (v&nbsp;aktuálním balíčku) je již vytvoření nové metody
triviální:</p>

<pre>
func (plot *Plot) <strong>Save</strong>(filename string) {
        plot.Cmd("set terminal pngcairo")
        plot.Cmd("set output '" + filename + "'")
        plot.Cmd("replot")
}
</pre>

<p>Nesmíme samozřejmě zapomenout na konstruktor pro nový datový typ, který
nahradí konstruktor výchozí:</p>

<pre>
func <strong>NewPlot</strong>(dimensions int) *Plot {
        plot, err := glot.NewPlot(dimensions, false, false)
        if err != nil {
                panic(err)
        }
        return &amp;Plot{plot}
}
</pre>

<p><a
href="https://github.com/tisnik/go-root/blob/master/article_50/glot06.go">Upravený
kód příkladu</a> tedy může vypadat například takto:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/Arafatk/glot"
)
&nbsp;
type <strong>Plot</strong> struct {
        *glot.Plot
}
&nbsp;
func (plot *Plot) <strong>Save</strong>(filename string) {
        plot.Cmd("set terminal pngcairo")
        plot.Cmd("set output '" + filename + "'")
        plot.Cmd("replot")
}
&nbsp;
func <strong>NewPlot</strong>(dimensions int) *Plot {
        plot, err := glot.NewPlot(dimensions, false, false)
        if err != nil {
                panic(err)
        }
        return &amp;Plot{plot}
}
&nbsp;
func <strong>main</strong>() {
        plot := NewPlot(2)
        defer plot.Close()
&nbsp;
        plot.AddPointGroup("Measured data", "lines", []float32{1.2, 1.9, 3.9, 8.2, 9.5, 8.1, 4.1, 1.8, 1.5})
        plot.AddPointGroup("Expected data", "lines", []float32{1, 2, 4, 8, 9, 8, 4, 2, 1})
&nbsp;
        plot.SetXrange(-2, 10)
        plot.SetYrange(0, 10)
        plot.Save("glot06.png")
}
</pre>

<img src="https://i.iinfo.cz/images/458/glot-6.png" class="image-400894" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 10: Výsledek běhu šestého demonstračního příkladu (aplikace
antialiasingu).</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Specifikace titulku grafu a popisů obou jeho os</h2>

<p>Knihovna <i>glot</i> umožňuje i další manipulace s&nbsp;vytvářeným grafem.
Například je možné specifikovat titulek grafu (typicky zobrazený nahoře, což je
však možné v&nbsp;případě potřeby změnit) i popisky obou os. Pro tento účel se
používá trojice metod se jmény <strong>SetTitle</strong>,
<strong>SetXLabel</strong> a <strong>SetYLabel</strong>:</p>

<pre>
plot.SetTitle("Plot #7")
plot.SetXLabel("t")
plot.SetYLabel("m/s")
</pre>

<p>Samozřejmě nezapomeneme ani na úplný zdrojový kód takto upraveného
příkladu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/Arafatk/glot"
)
&nbsp;
type <strong>Plot</strong> struct {
        *glot.Plot
}
&nbsp;
func (plot *Plot) <strong>Save</strong>(filename string) {
        plot.Cmd("set terminal pngcairo")
        plot.Cmd("set output '" + filename + "'")
        plot.Cmd("replot")
}
&nbsp;
func <strong>NewPlot</strong>(dimensions int) *Plot {
        plot, err := glot.NewPlot(dimensions, false, false)
        if err != nil {
                panic(err)
        }
        return &amp;Plot{plot}
&nbsp;
}
&nbsp;
func <strong>main</strong>() {
        plot := NewPlot(2)
        defer plot.Close()
&nbsp;
        plot.AddPointGroup("Measured data", "lines", []float32{1.2, 1.9, 3.9, 8.2, 9.5, 8.1, 4.1, 1.8, 1.5})
        plot.AddPointGroup("Expected data", "lines", []float32{1, 2, 4, 8, 9, 8, 4, 2, 1})
&nbsp;
        plot.SetTitle("Plot #7")
        plot.SetXLabel("t")
        plot.SetYLabel("m/s")
&nbsp;
        plot.SetXrange(-2, 10)
        plot.SetYrange(0, 10)
        plot.Save("glot07.png")
}
</pre>

<img src="https://i.iinfo.cz/images/458/glot-7.png" class="image-400895" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 11: Graf, u něhož byl nastavený titulek i popisky obou os.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vykreslení průběhu funkce</h2>

<p>V&nbsp;mnoha případech je nutné do grafu vynést průběh nějaké funkce na
určeném intervalu. V&nbsp;tomto případě můžeme při tvorbě grafu postupovat
několika různými způsoby. Můžeme například vypočítat všechny hodnoty funkce na
zadaném intervalu pro předem nastavený počet bodů, řekněme 100 bodů (což
odpovídá počtu lomených čar, které aproximují průběh funkce):</p>

<pre>
const points = 100
</pre>

<p>Dále musíme vytvořit řez obsahující dvojici řezů typu
<strong>float64</strong>. První z&nbsp;těchto řezů bude sloužit pro uložení
x-ových souřadnic bodů, druhý pro uložený y-ových souřadnic.
V&nbsp;následujícím úryvku kódu je ukázáno, jak se tento &bdquo;řez řezů&ldquo;
v&nbsp;programovacím jazyce Go zkonstruuje:</p>

<pre>
pts := make([][]float64, 2)
for i := 0; i &lt; 2; i++ {
        pts[i] = make([]float64, points)
}
for i := 0; i &lt; points; i++ {
        x := float64(i) * 2.0 * math.Pi / points
        pts[0][i] = x
        pts[1][i] = math.Sin(x)
}
</pre>

<p>Tento řez je následně předán nám již známé metodě
<strong>AddPointGroup</strong>:</p>

<pre>
plot.AddPointGroup("sin t", "lines", pts)
</pre>

<p>S&nbsp;výsledkem:</p>

<img src="https://i.iinfo.cz/images/458/glot-8.png" class="image-400896" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 12: Vykreslení průběhu funkce. Ve skutečnosti je hladká křivka
nahrazena 99 úsečkami.</i></p>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá takto:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "github.com/Arafatk/glot"
        "math"
)
&nbsp;
type <strong>Plot</strong> struct {
        *glot.Plot
}
&nbsp;
func (plot *Plot) <strong>Save</strong>(filename string) {
        plot.Cmd("set terminal pngcairo")
        plot.Cmd("set output '" + filename + "'")
        plot.Cmd("replot")
}
&nbsp;
func <strong>NewPlot</strong>(dimensions int) *Plot {
        plot, err := glot.NewPlot(dimensions, false, false)
        if err != nil {
                panic(err)
        }
        return &amp;Plot{plot}

}
&nbsp;
const points = 100
&nbsp;
func <strong>main</strong>() {
        plot := NewPlot(2)
        defer plot.Close()
&nbsp;
        pts := make([][]float64, 2)
        for i := 0; i &lt; 2; i++ {
                pts[i] = make([]float64, points)
        }
        for i := 0; i &lt; points; i++ {
                x := float64(i) * 2.0 * math.Pi / points
                pts[0][i] = x
                pts[1][i] = math.Sin(x)
        }
        plot.AddPointGroup("sin t", "lines", pts)
&nbsp;
        plot.SetTitle("Plot #8")
        plot.SetXLabel("t")
        plot.SetYLabel("sin t")

        plot.Save("glot08.png")
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Automatický výpočet hodnot funkce při použití metody <strong>AddFunc2d</strong></h2>

<p>Existuje však ještě jeden způsob vykreslení funkce, který je ve většině
případů lepší a poněkud obecnější. Tento způsob spočívá v&nbsp;použití metody
nazvané <strong>AddFunc2d</strong>. Této metodě se předává čtveřice
parametrů:</p>

<ol>
<li>Jméno průběhu (label)</li>
<li>Styl vykreslování (&bdquo;lines&ldquo;, &bdquo;points&ldquo; atd.)</li>
<li>Řez s&nbsp;x-ovými hodnotami</li>
<li>Funkce, která se má vykreslit (připomeňme si, že v&nbsp;Go jsou funkce plnohodnotným datovým typem)</li>
</ol>

<p>Příklad použití pro funkci <strong>math.Sin</strong>:</p>

<pre>
function := func(t float64) float64 {
        return math.Sin(t)
}
&nbsp;
plot.AddFunc2d("sin t", "lines", pointsX[:], function)
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti lze předat přímo
<strong>math.Sin</strong>.</div></p>

<img src="https://i.iinfo.cz/images/458/glot-9.png" class="image-400897" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 13: Vykreslení průběhu funkce.</i></p>

<p>Opět si ukažme, jak vypadá celý zdrojový kód příkladu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/Arafatk/glot"
        "math"
)
&nbsp;
type <strong>Plot</strong> struct {
        *glot.Plot
}
&nbsp;
func (plot *Plot) <strong>Save</strong>(filename string) {
        plot.Cmd("set terminal pngcairo")
        plot.Cmd("set output '" + filename + "'")
        plot.Cmd("replot")
}
&nbsp;
func <strong>NewPlot</strong>(dimensions int) *Plot {
        plot, err := glot.NewPlot(dimensions, false, false)
        if err != nil {
                panic(err)
        }
        return &amp;Plot{plot}

}
&nbsp;
const points = 100
&nbsp;
func <strong>main</strong>() {
        plot := NewPlot(2)
        defer plot.Close()
&nbsp;
        var pointsX [points]float64
        for i := 0; i &lt; points; i++ {
                pointsX[i] = float64(i) * 2.0 * math.Pi / points
        }
        function := func(t float64) float64 {
                return math.Sin(t)
        }
        plot.AddFunc2d("sin t", "lines", pointsX[:], function)
&nbsp;
        plot.SetTitle("Plot #9")
        plot.SetXLabel("t")
        plot.SetYLabel("sin t")
&nbsp;
        plot.Save("glot09.png")
}
</pre>

<p>V&nbsp;dalším příkladu změníme rozsah hodnot na x-ové i y-ové ose:</p>

<pre>
plot.SetXrange(0, int(math.Round(2.0*math.Pi)))
plot.SetYrange(-1, 1)
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;současnosti je možné nastavit
pouze celočíselné rozsahy.</div></p>

<img src="https://i.iinfo.cz/images/458/glot-10.png" class="image-400898" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 14: Vykreslení průběhu funkce v&nbsp;odlišném rozsahu.</i></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/Arafatk/glot"
        "math"
)
&nbsp;
type <strong>Plot</strong> struct {
        *glot.Plot
}
&nbsp;
func (plot *Plot) <strong>Save</strong>(filename string) {
        plot.Cmd("set terminal pngcairo")
        plot.Cmd("set output '" + filename + "'")
        plot.Cmd("replot")
}
&nbsp;
func <strong>NewPlot</strong>(dimensions int) *Plot {
        plot, err := glot.NewPlot(dimensions, false, false)
        if err != nil {
                panic(err)
        }
        return &amp;Plot{plot}
&nbsp;
}
&nbsp;
const points = 100
&nbsp;
func <strong>main</strong>() {
        plot := NewPlot(2)
        defer plot.Close()
&nbsp;
        var pointsX [points]float64
        for i := 0; i &lt; points; i++ {
                pointsX[i] = float64(i) * 2.0 * math.Pi / points
        }
        function := func(t float64) float64 {
                return math.Sin(t)
        }
        plot.AddFunc2d("sin t", "lines", pointsX[:], function)
&nbsp;
        plot.SetTitle("Plot #10")
        plot.SetXLabel("t")
        plot.SetYLabel("sin t")
&nbsp;
        plot.SetXrange(0, int(math.Round(2.0*math.Pi)))
        plot.SetYrange(-1, 1)
        plot.Save("glot10.png")
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vykreslení průběhů několika funkcí do jediného grafu</h2>

<p>Nyní se můžeme pokusit vykreslit několik funkcí do jediného grafu. Pro
ilustraci možností knihovny <i>glot</i> (a tím pádem i nástroje <i>Gnuplot</i>)
použijeme trojici anonymních funkcí, z&nbsp;nichž každá slouží pro vyčíslení
hodnoty sinu s&nbsp;určitým posunutím (nulový posun, posun o 2&pi;/3 a posun o
-2&pi;3):</p>

<pre>
function1 := func(t float64) float64 {
        return math.Sin(t)
}
&nbsp;
function2 := func(t float64) float64 {
        return math.Sin(t + 2.0*math.Pi/3)
}
&nbsp;
function3 := func(t float64) float64 {
        return math.Sin(t - 2.0*math.Pi/3)
}
</pre>

<p>Všechny tři funkce lze přidat do grafu s&nbsp;využitím nám již známé metody
<strong>AddFunc2d</strong>:</p>

<pre>
plot.AddFunc2d("sin t", "lines", pointsX[:], function1)
plot.AddFunc2d("sin t+2{/Symbol p}/3", "lines", pointsX[:], function2)
plot.AddFunc2d("sin t-2{/Symbol p}/3", "lines", pointsX[:], function3)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, jakým způsobem se
zapisuje symbol &pi; tak, aby s&nbsp;ním korektně pracoval i nástroj
<i>Gnuplot</i>.</div></p>

<p>Výsledkem by měl být následující graf:</p>

<img src="https://i.iinfo.cz/images/458/glot-11.png" class="image-400898" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 11: Průběh tří funkcí vykreslený do jediného grafu.</i></p>

<p>Opět si pochopitelně ukážeme úplný zdrojový kód tohoto upraveného
demonstračního příkladu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/Arafatk/glot"
        "math"
)
&nbsp;
type <strong>Plot</strong> struct {
        *glot.Plot
}
&nbsp;
func (plot *Plot) <strong>Save</strong>(filename string) {
        plot.Cmd("set terminal pngcairo")
        plot.Cmd("set output '" + filename + "'")
        plot.Cmd("replot")
}
&nbsp;
func <strong>NewPlot</strong>(dimensions int) *Plot {
        plot, err := glot.NewPlot(dimensions, false, false)
        if err != nil {
                panic(err)
        }
        return &amp;Plot{plot}
&nbsp;
}
&nbsp;
const points = 100
&nbsp;
func <strong>main</strong>() {
        plot := NewPlot(2)
        defer plot.Close()
&nbsp;
        var pointsX [points]float64
        for i := 0; i &lt; points; i++ {
                pointsX[i] = float64(i) * 2.0 * math.Pi / points
        }
&nbsp;
        function1 := func(t float64) float64 {
                return math.Sin(t)
        }
&nbsp;
        function2 := func(t float64) float64 {
                return math.Sin(t + 2.0*math.Pi/3)
        }
&nbsp;
        function3 := func(t float64) float64 {
                return math.Sin(t - 2.0*math.Pi/3)
        }
&nbsp;
        plot.AddFunc2d("sin t", "lines", pointsX[:], function1)
        plot.AddFunc2d("sin t+2{/Symbol p}/3", "lines", pointsX[:], function2)
        plot.AddFunc2d("sin t-2{/Symbol p}/3", "lines", pointsX[:], function3)
&nbsp;
        plot.SetTitle("Plot #11")
        plot.SetXLabel("t")
        plot.SetYLabel("y")
&nbsp;
        plot.SetXrange(0, int(math.Round(2.0*math.Pi)))
        plot.SetYrange(-1, 1)
        plot.Save("glot11.png")
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Nastavení hodnot zobrazovaných na osách</h2>

<p>U goniometrických funkcí jsou popisky x-ové osy odvozené od nastaveného
rozsahu (0 až 6 resp.&nbsp;0 až 7) spíše matoucí. Lepší by bylo, aby se na tuto
osu zobrazily hodnoty odvozené od čísla &pi;, protože pracujeme s&nbsp;jeho
násobky a zlomky. K&nbsp;tomuto účelu sice prozatím neexistuje přímý příkaz
v&nbsp;knihovně <i>glot</i>, ovšem můžeme použít metodu
<strong>CheckedCmd</strong> pro předání libovolného příkazu nástroji
<i>Gnuplot</i>. Toto řešení může vypadat následovně:</p>

<pre>
plot.CheckedCmd(`set xtics ('0' 0, '{/Symbol p}' pi, '2{/Symbol p}' 2*pi)`)
</pre>

<p>Výsledek může vypadat takto:</p>

<img src="https://i.iinfo.cz/images/458/glot-12.png" class="image-400899" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 12: Graf, u nějž jsou specifikovány hodnoty zobrazené na x-ové
ose.</i></p>

<p>Úplný výpis takto rozšířeného demonstračního příkladu vypadá následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/Arafatk/glot"
        "math"
)
&nbsp;
type <strong>Plot</strong> struct {
        *glot.Plot
}
&nbsp;
func (plot *Plot) <strong>Save</strong>(filename string) {
        plot.Cmd("set terminal pngcairo")
        plot.Cmd("set output '" + filename + "'")
        plot.Cmd("replot")
}
&nbsp;
func <strong>NewPlot</strong>(dimensions int) *Plot {
        plot, err := glot.NewPlot(dimensions, false, false)
        if err != nil {
                panic(err)
        }
        return &amp;Plot{plot}
&nbsp;
}
&nbsp;
const points = 100
&nbsp;
func <strong>main</strong>() {
        plot := NewPlot(2)
        defer plot.Close()
&nbsp;
        var pointsX [points]float64
        for i := 0; i &lt; points; i++ {
                pointsX[i] = float64(i) * 2.0 * math.Pi / points
        }
&nbsp;
        function1 := func(t float64) float64 {
                return math.Sin(t)
        }
&nbsp;
        function2 := func(t float64) float64 {
                return math.Sin(t + 2.0*math.Pi/3)
        }
&nbsp;
        function3 := func(t float64) float64 {
                return math.Sin(t - 2.0*math.Pi/3)
        }
&nbsp;
        plot.AddFunc2d("sin t", "lines", pointsX[:], function1)
        plot.AddFunc2d("sin t+2{/Symbol p}/3", "lines", pointsX[:], function2)
        plot.AddFunc2d("sin t-2{/Symbol p}/3", "lines", pointsX[:], function3)
&nbsp;
        plot.SetTitle("Plot #12")
        plot.SetXLabel("t")
        plot.SetYLabel("y")
&nbsp;
        plot.SetXrange(0, 1+int(math.Round(2.0*math.Pi)))
        plot.SetYrange(-1, 1)
        plot.CheckedCmd(`set xtics ('0' 0, '{/Symbol p}' pi, '2{/Symbol p}' 2*pi)`)
        plot.Save("glot12.png")
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Sloupcové grafy</h2>

<p>Dalším typem grafu, s&nbsp;nímž se velmi často setkáme, jsou sloupcové
grafy. Jejich použití si poněkud netradičně ukážeme na průběhu funkce
<i>sinc</i>:</p>

<pre>
function1 := func(t float64) float64 {
        // limita
        if t == 0.0 {
                return 1.0
        }
        return math.Sin(t) / t
}
</pre>

<p>Vykreslení běžného průběhu funkce s&nbsp;využitím lomené čáry:</p>

<pre>
plot.AddFunc2d("sinc t", "lines", pointsX[:], function1)
</pre>

<p>Vykreslení sloupcového grafu:</p>

<pre>
plot.AddFunc2d("sinc t", "boxes", pointsX[:], function1)
</pre>

<p>Povšimněte si, že takto nakonfigurovaný sloupcový graf má relativní šířky
sloupců rovné 1.0 (sloupce se dotýkají hranami) a navíc nejsou jednotlivé
sloupce vyplněné:</p>

<img src="https://i.iinfo.cz/images/458/glot-13.png" class="image-400900" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 13: Sloupcový graf, relativní šířka sloupců je rovna 1.0, sloupce
jsou nevyplněné.</i></p>

<p>Celý kód příkladu je následující:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/Arafatk/glot"
        "math"
)
&nbsp;
type <strong>Plot</strong> struct {
        *glot.Plot
}
&nbsp;
func (plot *Plot) <strong>Save</strong>(filename string) {
        plot.Cmd("set terminal pngcairo")
        plot.Cmd("set output '" + filename + "'")
        plot.Cmd("replot")
}
&nbsp;
func <strong>NewPlot</strong>(dimensions int) *Plot {
        plot, err := glot.NewPlot(dimensions, false, false)
        if err != nil {
                panic(err)
        }
        return &amp;Plot{plot}
&nbsp;
}
&nbsp;
const points = 50
&nbsp;
func <strong>main</strong>() {
        plot := NewPlot(2)
        defer plot.Close()
&nbsp;
        var pointsX [points]float64
        for i := 0; i &lt; points; i++ {
                pointsX[i] = float64(i) * 2.0 * math.Pi / points
        }
&nbsp;
        function1 := func(t float64) float64 {
                // limita
                if t == 0.0 {
                        return 1.0
                }
                return math.Sin(t) / t
        }
&nbsp;
        plot.AddFunc2d("sinc t", "boxes", pointsX[:], function1)
&nbsp;
        plot.SetTitle("Plot #13")
        plot.SetXLabel("t")
        plot.SetYLabel("y")
&nbsp;
        plot.SetXrange(0, 1+int(math.Round(2.0*math.Pi)))
        plot.SetYrange(-1, 1)
        plot.CheckedCmd(`set xtics ('0' 0, '{/Symbol p}' pi, '2{/Symbol p}' 2*pi)`)
        plot.Save("glot13.png")
}
</pre>

<p>Nastavit je možné i výplň sloupců (zde prozatím bez uvedení barvy výplně) a
jejich relativní šířky. Šířka 0.5 znamená, že sloupce budou stejně široké jako
mezery mezi nimi:</p>

<pre>
plot.CheckedCmd("set style fill solid")
plot.CheckedCmd("set boxwidth 0.5 relative")
</pre>

<img src="https://i.iinfo.cz/images/458/glot-14.png" class="image-400901" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 14: Sloupcový graf, relativní šířka sloupců je rovna 1/2, sloupce
jsou vyplněné.</i></p>

<p>Opět si ukážeme příslušný příklad:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/Arafatk/glot"
        "math"
)
&nbsp;
type <strong>Plot</strong> struct {
        *glot.Plot
}
&nbsp;
func (plot *Plot) <strong>Save</strong>(filename string) {
        plot.Cmd("set terminal pngcairo")
        plot.Cmd("set output '" + filename + "'")
        plot.Cmd("replot")
}
&nbsp;
func <strong>NewPlot</strong>(dimensions int) *Plot {
        plot, err := glot.NewPlot(dimensions, false, false)
        if err != nil {
                panic(err)
        }
        return &amp;Plot{plot}
&nbsp;
}
&nbsp;
const points = 50
&nbsp;
func <strong>main</strong>() {
        plot := NewPlot(2)
        defer plot.Close()
&nbsp;
        var pointsX [points]float64
        for i := 0; i &lt; points; i++ {
                pointsX[i] = float64(i) * 2.0 * math.Pi / points
        }
&nbsp;
        function1 := func(t float64) float64 {
                // limita
                if t == 0.0 {
                        return 1.0
                }
                return math.Sin(t) / t
        }
&nbsp;
        plot.AddFunc2d("sinc t", "boxes", pointsX[:], function1)
&nbsp;
        plot.CheckedCmd("set style fill solid")
        plot.CheckedCmd("set boxwidth 0.5 relative")
&nbsp;
        plot.SetTitle("Plot #14")
        plot.SetXLabel("t")
        plot.SetYLabel("y")
&nbsp;
        plot.SetXrange(0, 1+int(math.Round(2.0*math.Pi)))
        plot.SetYrange(-1, 1)
        plot.CheckedCmd(`set xtics ('0' 0, '{/Symbol p}' pi, '2{/Symbol p}' 2*pi)`)
        plot.Save("glot14.png")
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Zobrazení průběhu funkce se dvěma nezávislými proměnnými</h2>

<p>Další typ grafu, s&nbsp;nímž se dnes seznámíme, je trojrozměrný graf, ve
kterém se zobrazuje funkce typu <i>[z]=f(x, y)</i> pro vybrané vstupní hodnoty
<i>x</i> a <i>y</i> (jedná se tedy o odlišný typ grafu, než je tomu u grafů ze
<a href="https://www.root.cz/obrazek/400913/">třetího</a> a <a
href="https://www.root.cz/obrazek/400914/">čtvrtého</a> obrázku). Před
zobrazením této funkce je nejprve nutné připravit dva řezy. První řez bude
obsahovat x-ové souřadnice bodů, druhý řez y-ové souřadnice. Pokud například
budeme chtít vykreslit spirálu, budou x-ové a y-ové souřadnice nezávislých
hodnot opisovat kružnici:</p>

<pre>
var pointsX [points]float64
var pointsY [points]float64
for i := 0; i &lt; points; i++ {
        t := float64(i) * 8.0 * math.Pi / points
        pointsX[i] = math.Sin(t)
        pointsY[i] = math.Cos(t)
}
</pre>

<p>Hodnotu funkce odpovídající z-ovým souřadnicím získáme pomocí malého triku
&ndash; nezávisle na předaných parametrech budeme vracet rostoucí posloupnost
hodnot typu <strong>float64</strong>:</p>

<pre>
z := 0.0
function1 := func(u, v float64) float64 {
        z = z + 1.0
        return z
}
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se v&nbsp;tomto
případě jedná o <i>uzávěr</i> (<i>closure</i>).</div></p>

<img src="https://i.iinfo.cz/images/458/glot-15.png" class="image-400902" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 15: Spirála vykreslená do 3D grafu.</i></p>

<p>Pro vykreslení funkce v&nbsp;3D prostoru se používá metoda
<strong>AddFunc3d</strong>:</p>

<pre>
plot.AddFunc3d("spiral", "points", pointsX[:], pointsY[:], function1)
</pre>

<p>Opět si ukažme úplný zdrojový kód tohoto příkladu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/Arafatk/glot"
        "math"
)
&nbsp;
type <strong>Plot</strong> struct {
        *glot.Plot
}
&nbsp;
func (plot *Plot) <strong>Save</strong>(filename string) {
        plot.Cmd("set terminal pngcairo")
        plot.Cmd("set output '" + filename + "'")
        plot.Cmd("replot")
}
&nbsp;
func <strong>NewPlot</strong>(dimensions int) *Plot {
        plot, err := glot.NewPlot(dimensions, false, false)
        if err != nil {
                panic(err)
        }
        return &amp;Plot{plot}
&nbsp;
}
&nbsp;
const points = 400
&nbsp;
func <strong>main</strong>() {
        plot := NewPlot(3)
        defer plot.Close()
&nbsp;
        var pointsX [points]float64
        var pointsY [points]float64
        for i := 0; i &lt; points; i++ {
                t := float64(i) * 8.0 * math.Pi / points
                pointsX[i] = math.Sin(t)
                pointsY[i] = math.Cos(t)
        }
&nbsp;
        z := 0.0
        function1 := func(u, v float64) float64 {
                z = z + 1.0
                return z
        }
&nbsp;
        plot.AddFunc3d("spiral", "points", pointsX[:], pointsY[:], function1)
&nbsp;
        plot.SetTitle("Plot #15")
        plot.SetXLabel("t")
        plot.SetYLabel("y")
&nbsp;
        plot.Save("glot15.png")
}
</pre>

<p>Nepatrnou úpravou dosáhneme vykreslení funkce v&nbsp;3D pomocí lomené čáry:</p>

<pre>
plot.AddFunc3d("spiral", "lines", pointsX[:], pointsY[:], function1)
</pre>

<p>S&nbsp;výsledky:</p>

<img src="https://i.iinfo.cz/images/458/glot-16.png" class="image-400903" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 16: Spirála vykreslená do 3D grafu.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Knihovna <strong>plot</strong> z&nbsp;projektu Gonum</h2>

<p>Druhou knihovnou určenou pro tvorbu grafů, o níž se dnes alespoň ve
stručnosti zmíníme, je knihovna nazvaná jednoduše <strong>plot</strong>, jejíž
repositář se nachází na adrese <a
href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>. Jedná
se o součást projektu <i>Gonum</i>, ovšem v&nbsp;případě potřeby lze knihovnu
<strong>plot</strong> použít nezávisle na ostatních balíčcích, které
v&nbsp;Gonum nalezneme. Na rozdíl od výše popsané knihovny <i>glot</i>, která
závisí na nástroji <i>Gnuplot</i> (a nejedná se tedy o &bdquo;čistý&ldquo; Go
projekt, se všemi z&nbsp;toho plynoucími důsledky), je <i>plot</i> vytvořena
pouze v&nbsp;jazyku Go, což mj.&nbsp;znamená její snadnější instalaci
popř.&nbsp;bezproblémové použití v&nbsp;dalších aplikacích.</p>

<p>Samotná instalace této knihovny (tedy její stažení a překlad) je pro
programátory používající jazyk Go triviální:</p>

<pre>
$ <strong>go get gonum.org/v1/plot/...</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: dnes se seznámíme pouze se základními
vlastnostmi knihovny <i>plot</i>. Další možnosti, které tato knihovna
uživatelům nabízí, budou vysvětleny a na demonstračních příkladech ukázány
příště.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Prázdný graf obsahující pouze legendu a osy</h2>

<p>Nejprve si ukážeme, jak se v&nbsp;knihovně <i>plot</i> vykresluje prázdný
graf, který obsahuje pouze legendu a osy. Strukturu popisující graf vytvoříme
konstruktorem <strong>plot.New()</strong>:</p>

<pre>
p, err := plot.New()
if err != nil {
        panic(err)
}
</pre>

<p>Při vykreslování grafu je nutné zadat rozlišení výsledného obrázku. To se
však nespecifikuje v&nbsp;pixelech, ale v&nbsp;absolutních délkových jednotkách
(milimetry, typografické body atd.). Vzhledem k&nbsp;tomu, že se pro přepočet
rozlišení na pixely používá metoda převzatá z&nbsp;<a
href="https://en.wikipedia.org/wiki/PostScript#Units_of_length">PostScriptu</a>,
můžeme rozlišení 640&times;480 pixelů specifikovat v&nbsp;palcích takto:</p>

<pre>
const resX = 20.0 / 3.0 * vg.Inch
const resY = 5.0 * vg.Inch
</pre>

<p>Posledním krokem je vykreslení do zvoleného výstupního souboru, samozřejmě
s&nbsp;kontrolou chyby:</p>

<pre>
err = p.Save(resX, resY, "plot01.png")
if err != nil {
        panic(err)
}
</pre>

<img src="https://i.iinfo.cz/images/80/plot1-1.png" class="image-400905" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 17: Prázdný graf vykreslený knihovnou
<strong>plot</strong>.</i></p>

<p>Celý příklad bude vypadat následovně:</p>

<pre>
package main
&nbsp;
import (
        "gonum.org/v1/plot"
        "gonum.org/v1/plot/vg"
)
&nbsp;
const resX = 20.0 / 3.0 * vg.Inch
const resY = 5.0 * vg.Inch
&nbsp;
func main() {
        p, err := plot.New()
        if err != nil {
                panic(err)
        }
&nbsp;
        err = p.Save(resX, resY, "plot01.png")
        if err != nil {
                panic(err)
        }
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Graf s&nbsp;naměřenými hodnotami vykreslený knihovnou <strong>plot</strong></h2>

<p>Do grafu nyní přidáme několik naměřených hodnot. Ty budeme specifikovat
polem popř.&nbsp;řezem:</p>

<pre>
input := [...]int32{1, 2, 4, 8, 9, 8, 4, 2, 1}
</pre>

<p>Z&nbsp;těchto hodnot se vytvoří pole hodnot typu
<strong>plotter.XYs</strong>, tedy pole obsahující struktury nesoucí x-ové a
y-ové souřadnice bodů. V&nbsp;jazyce Go je nutné použít explicitní zápis:</p>

<pre>
points := make(plotter.XYs, len(input))
for i := range points {
        points[i].X = float64(i)
        points[i].Y = float64(input[i])
}
</pre>

<p>A nakonec příslušný průběh přidáme do grafu pomocí metody
<strong>AddLinePoints</strong>, což se vlastně příliš neliší od postupu
použitého v&nbsp;knihovně <i>glot</i>:</p>

<pre>
err = plotutil.AddLinePoints(p, "Measured data", points)
if err != nil {
        panic(err)
}
</pre>

<p>Výsledek:</p>

<img src="https://i.iinfo.cz/images/80/plot1-2.png" class="image-400906" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 18: Graf s&nbsp;naměřenými hodnotami vykreslený knihovnou
<strong>plot</strong>.</i></p>

<p>Zdrojový kód druhého demonstračního příkladu používajícího knihovnu
<i>plot</i>:</p>

<pre>
package main
&nbsp;
import (
        "gonum.org/v1/plot"
        "gonum.org/v1/plot/plotter"
        "gonum.org/v1/plot/plotutil"
        "gonum.org/v1/plot/vg"
)
&nbsp;
const resX = 20.0 / 3.0 * vg.Inch
const resY = 5.0 * vg.Inch
&nbsp;
func main() {
        p, err := plot.New()
        if err != nil {
                panic(err)
        }
&nbsp;
        input := [...]int32{1, 2, 4, 8, 9, 8, 4, 2, 1}
&nbsp;
        points := make(plotter.XYs, len(input))
        for i := range points {
                points[i].X = float64(i)
                points[i].Y = float64(input[i])
        }
        err = plotutil.AddLinePoints(p, "Measured data", points)
        if err != nil {
                panic(err)
        }
&nbsp;
        err = p.Save(resX, resY, "plot02.png")
        if err != nil {
                panic(err)
        }
}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Změna popisků na osách grafu</h2>

<p><a href="#k07">V&nbsp;sedmé kapitole</a> jsme si ukázali, jakým způsobem se
mění titulek grafu popř.&nbsp;popisky obou os v&nbsp;knihovně <i>glot</i>. Při
použití alternativní knihovny <i>plot</i> je ve skutečnosti tato změna ještě
jednodušší, protože pouze postačuje nastavit několik atributů:</p>

<pre>
p.Title.Text = "Plot #3"
p.X.Label.Text = "X"
p.Y.Label.Text = "Y"
</pre>

<p>S&nbsp;výsledkem zobrazeným na devatenáctém obrázku:</p>

<img src="https://i.iinfo.cz/images/80/plot1-3.png" class="image-400907" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 19: Graf se změněným titulkem i popiskami obou os.</i></p>

<p>Třetí varianta příkladu založeného na knihovně <i>plot</i> bude vypadat
takto:</p>

<pre>
package main
&nbsp;
import (
        "gonum.org/v1/plot"
        "gonum.org/v1/plot/plotter"
        "gonum.org/v1/plot/plotutil"
        "gonum.org/v1/plot/vg"
)
&nbsp;
const resX = 20.0 / 3.0 * vg.Inch
const resY = 5.0 * vg.Inch
&nbsp;
func main() {
        p, err := plot.New()
        if err != nil {
                panic(err)
        }
&nbsp;
        input := [...]int32{1, 2, 4, 8, 9, 8, 4, 2, 1}
&nbsp;
        points := make(plotter.XYs, len(input))
        for i := range points {
                points[i].X = float64(i)
                points[i].Y = float64(input[i])
        }
&nbsp;
        p.Title.Text = "Plot #3"
        p.X.Label.Text = "X"
        p.Y.Label.Text = "Y"
&nbsp;
        err = plotutil.AddLinePoints(p, "Measured data", points)
        if err != nil {
                panic(err)
        }
&nbsp;
        err = p.Save(resX, resY, "plot03.png")
        if err != nil {
                panic(err)
        }
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Zobrazení průběhů dvou funkcí v&nbsp;jediném grafu</h2>

<p>Graf s&nbsp;několika průběhy, s&nbsp;jehož tvorbou v&nbsp;<i>glotu</i> jsme
se seznámili <a href="#k10">v&nbsp;desáté kapitole</a>, je možné při použití
knihovny <i>plot</i> vytvořit předáním dalších parametrů do funkce
<strong>AddLinePoints</strong>. Povšimněte si, že se (kromě prvního parametru,
což je struktura typu graf) vždy předává dvojice parametrů jméno
průběhu+příslušné body (x,y):</p>

<pre>
err = plotutil.AddLinePoints(p, "Expected data", points1, "Measured data", points2)
if err != nil {
        panic(err)
}
</pre>

<p>Výsledek může vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/80/plot1-4.png" class="image-400908" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 20: Výsledek běhu čtvrtého příkladu používajícího knihovnu
<strong>plot</strong>.</i></p>

<p>Nakonec si uveďme zdrojový kód dnešního posledního demonstračního
příkladu:</p>

<pre>
package main
&nbsp;
import (
        "gonum.org/v1/plot"
        "gonum.org/v1/plot/plotter"
        "gonum.org/v1/plot/plotutil"
        "gonum.org/v1/plot/vg"
&nbsp;
        "math/rand"
)
&nbsp;
const resX = 20.0 / 3.0 * vg.Inch
const resY = 5.0 * vg.Inch
&nbsp;
func main() {
        p, err := plot.New()
        if err != nil {
                panic(err)
        }
&nbsp;
        input := [...]int32{1, 2, 4, 8, 9, 8, 4, 2, 1}
&nbsp;
        points1 := make(plotter.XYs, len(input))
        points2 := make(plotter.XYs, len(input))
        for i := range input {
                points1[i].X = float64(i)
                points2[i].X = float64(i)
                points1[i].Y = float64(input[i])
                points2[i].Y = float64(input[i]) + rand.Float64()/2.0 - 0.5
        }
&nbsp;
        p.Title.Text = "Plot #3"
        p.X.Label.Text = "X"
        p.Y.Label.Text = "Y"
&nbsp;
        err = plotutil.AddLinePoints(p, "Expected data", points1, "Measured data", points2)
        if err != nil {
                panic(err)
        }
&nbsp;
        err = p.Save(resX, resY, "plot04.png")
        if err != nil {
                panic(err)
        }
}
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně pět až šest megabajtů), můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>glot01.go</td><td>graf s&nbsp;naměřenými hodnotami vykreslený knihovnou <strong>glot</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot01.go">https://github.com/tisnik/go-root/blob/master/article_50/glot01.go</a></td></tr>
<tr><td> 2</td><td>glot02.go</td><td>změna stylu vykreslování</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot02.go">https://github.com/tisnik/go-root/blob/master/article_50/glot02.go</a></td></tr>
<tr><td> 3</td><td>glot03.go</td><td>specifikace rozsahů hodnot na osách x a y</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot03.go">https://github.com/tisnik/go-root/blob/master/article_50/glot03.go</a></td></tr>
<tr><td> 4</td><td>glot04.go</td><td>vykreslení několika průběhů do jediného grafu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot04.go">https://github.com/tisnik/go-root/blob/master/article_50/glot04.go</a></td></tr>
<tr><td> 5</td><td>glot05.go</td><td>nastavení vyšší kvality zobrazení &ndash; použití antialiasingu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot05.go">https://github.com/tisnik/go-root/blob/master/article_50/glot05.go</a></td></tr>
<tr><td> 6</td><td>glot06.go</td><td>vylepšení a refaktoring předchozího příkladu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot06.go">https://github.com/tisnik/go-root/blob/master/article_50/glot06.go</a></td></tr>
<tr><td> 7</td><td>glot07.go</td><td>specifikace titulku grafu a popisů obou jeho os</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot07.go">https://github.com/tisnik/go-root/blob/master/article_50/glot07.go</a></td></tr>
<tr><td> 8</td><td>glot08.go</td><td>vykreslení průběhu funkce</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot08.go">https://github.com/tisnik/go-root/blob/master/article_50/glot08.go</a></td></tr>
<tr><td> 9</td><td>glot09.go</td><td>automatický výpočet hodnot funkce při použití metody <strong>AddFunc2d</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot09.go">https://github.com/tisnik/go-root/blob/master/article_50/glot09.go</a></td></tr>
<tr><td>10</td><td>glot10.go</td><td>specifikace rozsahů hodnot na osách x a y</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot10.go">https://github.com/tisnik/go-root/blob/master/article_50/glot10.go</a></td></tr>
<tr><td>11</td><td>glot11.go</td><td>vykreslení průběhů několika funkcí do jediného grafu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot11.go">https://github.com/tisnik/go-root/blob/master/article_50/glot11.go</a></td></tr>
<tr><td>12</td><td>glot12.go</td><td>nastavení hodnot zobrazovaných na osách</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot12.go">https://github.com/tisnik/go-root/blob/master/article_50/glot12.go</a></td></tr>
<tr><td>13</td><td>glot13.go</td><td>vykreslení sloupcového grafu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot13.go">https://github.com/tisnik/go-root/blob/master/article_50/glot13.go</a></td></tr>
<tr><td>14</td><td>glot14.go</td><td>vykreslení vyplněného sloupcového grafu, určení šířky sloupců</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot14.go">https://github.com/tisnik/go-root/blob/master/article_50/glot14.go</a></td></tr>
<tr><td>15</td><td>glot15.go</td><td>zobrazení průběhu funkce se dvěma nezávislými proměnnými</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot15.go">https://github.com/tisnik/go-root/blob/master/article_50/glot15.go</a></td></tr>
<tr><td>16</td><td>glot16.go</td><td>zobrazení průběhu funkce se dvěma nezávislými proměnnými</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/glot16.go">https://github.com/tisnik/go-root/blob/master/article_50/glot16.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>plot01.go</td><td>prázdný graf obsahující pouze legendu a osy</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/plot01.go">https://github.com/tisnik/go-root/blob/master/article_50/plot01.go</a></td></tr>
<tr><td>18</td><td>plot02.go</td><td>graf s&nbsp;naměřenými hodnotami vykreslený knihovnou <strong>plot</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/plot02.go">https://github.com/tisnik/go-root/blob/master/article_50/plot02.go</a></td></tr>
<tr><td>19</td><td>plot03.go</td><td>změna popisků na osách</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/plot03.go">https://github.com/tisnik/go-root/blob/master/article_50/plot03.go</a></td></tr>
<tr><td>20</td><td>plot04.go</td><td>zobrazení průběhů dvou funkcí v&nbsp;jediném grafu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/plot04.go">https://github.com/tisnik/go-root/blob/master/article_50/plot04.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>package glot<br />
<a href="https://godoc.org/github.com/Arafatk/glot">https://godoc.org/github.com/Arafatk/glot</a>
</li>

<li>Gnuplotting: Output terminals<br />
<a href="http://www.gnuplotting.org/output-terminals/">http://www.gnuplotting.org/output-terminals/</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1">https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://blog.gopheracademy.com/advent-2018/introducing-glot/">https://blog.gopheracademy.com/advent-2018/introducing-glot/</a>
</li>

<li>Glot is a plotting library for Golang built on top of gnuplot<br />
<a href="https://github.com/Arafatk/glot">https://github.com/Arafatk/glot</a>
</li>

<li>Example plots (gonum/plot)<br />
<a href="https://github.com/gonum/plot/wiki/Example-plots">https://github.com/gonum/plot/wiki/Example-plots</a>
</li>

<li>A repository for plotting and visualizing data (gonum/plot)<br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>golang library to make https://chartjs.org/ plots<br />
<a href="https://github.com/brentp/go-chartjs">https://github.com/brentp/go-chartjs</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>The Gonum Numerical Computing Package<br />
<a href="https://www.gonum.org/post/introtogonum/">https://www.gonum.org/post/introtogonum/</a>
</li>

<li>Gomacro na GitHubu<br />
<a href="https://github.com/cosmos72/gomacro">https://github.com/cosmos72/gomacro</a>
</li>

<li>gophernotes - Use Go in Jupyter notebooks and nteract<br />
<a href="https://github.com/gopherdata/gophernotes">https://github.com/gopherdata/gophernotes</a>
</li>

<li>gonum<br />
<a href="https://github.com/gonum">https://github.com/gonum</a>
</li>

<li>go-gota/gota -  DataFrames and data wrangling in Go (Golang)<br />
<a href="https://porter.io/github.com/go-gota/gota">https://porter.io/github.com/go-gota/gota</a>
</li>

<li>A repository for plotting and visualizing data <br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>Gonum Numerical Packages<br />
<a href="https://www.gonum.org/">https://www.gonum.org/</a>
</li>

<li>Stránky projektu MinIO<br />
<a href="https://min.io/">https://min.io/</a>
</li>

<li>MinIO Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-quickstart-guide.html">https://docs.min.io/docs/minio-quickstart-guide.html</a>
</li>

<li>MinIO Go Client API Reference<br />
<a href="https://docs.min.io/docs/golang-client-api-reference">https://docs.min.io/docs/golang-client-api-reference</a>
</li>

<li>MinIO Python Client API Reference<br />
<a href="https://docs.min.io/docs/python-client-api-reference.html">https://docs.min.io/docs/python-client-api-reference.html</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>MinIO Client Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a>
</li>

<li>Analýza kvality zdrojových kódů Minia<br />
<a href="https://goreportcard.com/report/github.com/minio/minio">https://goreportcard.com/report/github.com/minio/minio</a>
</li>

<li>This is MinIO<br />
<a href="https://www.youtube.com/watch?v=vF0lQh0XOCs">https://www.youtube.com/watch?v=vF0lQh0XOCs</a>
</li>

<li>Running MinIO Standalone<br />
<a href="https://www.youtube.com/watch?v=dIQsPCHvHoM">https://www.youtube.com/watch?v=dIQsPCHvHoM</a>
</li>

<li>"Amazon S3 Compatible Storage in Kubernetes" - Rob Girard, Principal Tech Marketing Engineer, Minio<br />
<a href="https://www.youtube.com/watch?v=wlpn8K0jJ4U">https://www.youtube.com/watch?v=wlpn8K0jJ4U</a>
</li>

<li>Ginkgo<br />
<a href="http://onsi.github.io/ginkgo/">http://onsi.github.io/ginkgo/</a>
</li>

<li>Gomega<br />
<a href="https://onsi.github.io/gomega/">https://onsi.github.io/gomega/</a>
</li>

<li>Ginkgo's Preferred Matcher Library na GitHubu<br />
<a href="https://github.com/onsi/gomega/">https://github.com/onsi/gomega/</a>
</li>

<li>Provided Matchers<br />
<a href="http://onsi.github.io/gomega/#provided-matchers">http://onsi.github.io/gomega/#provided-matchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku goexpect<br />
<a href="https://godoc.org/github.com/google/goexpect">https://godoc.org/github.com/google/goexpect</a>
</li>

<li>Balíček goexpect<br />
<a href="https://github.com/google/goexpect">https://github.com/google/goexpect</a>
</li>

<li>Balíček go-expect<br />
<a href="https://github.com/Netflix/go-expect">https://github.com/Netflix/go-expect</a>
</li>

<li>Balíček gexpect<br />
<a href="https://github.com/ThomasRooney/gexpect">https://github.com/ThomasRooney/gexpect</a>
</li>

<li>Expect (originál naprogramovaný v&nbsp;TCL)<br />
<a href="https://core.tcl-lang.org/expect/index">https://core.tcl-lang.org/expect/index</a>
</li>

<li>Expect (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Expect">https://en.wikipedia.org/wiki/Expect</a>
</li>

<li>Pexpect<br />
<a href="https://pexpect.readthedocs.io/en/stable/">https://pexpect.readthedocs.io/en/stable/</a>
</li>

<li>Golang SSH Client: Multiple Commands, Crypto &amp; Goexpect Examples<br />
<a href="http://networkbit.ch/golang-ssh-client/">http://networkbit.ch/golang-ssh-client/</a>
</li>

<li>goblin na GitHubu<br />
<a href="https://github.com/franela/goblin">https://github.com/franela/goblin</a>
</li>

<li>Mocha framework<br />
<a href="https://mochajs.org/">https://mochajs.org/</a>
</li>

<li>frisby na GitHubu<br />
<a href="https://github.com/verdverm/frisby">https://github.com/verdverm/frisby</a>
</li>

<li>package frisby<br />
<a href="https://godoc.org/github.com/verdverm/frisby">https://godoc.org/github.com/verdverm/frisby</a>
</li>

<li>Frisby alternatives and similar packages (generováno)<br />
<a href="https://go.libhunt.com/frisby-alternatives">https://go.libhunt.com/frisby-alternatives</a>
</li>

<li>Cucumber for golang<br />
<a href="https://github.com/DATA-DOG/godog">https://github.com/DATA-DOG/godog</a>
</li>

<li>How to Use Godog for Behavior-driven Development in Go<br />
<a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go</a>
</li>

<li>Comparative Analysis Of GoLang Testing Frameworks<br />
<a href="https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks">https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks</a>
</li>

<li>A Quick Guide to Testing in Golang<br />
<a href="https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/">https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/</a>
</li>

<li>Tom's Obvious, Minimal Language.<br />
<a href="https://github.com/toml-lang/toml">https://github.com/toml-lang/toml</a>
</li>

<li>xml.org<br />
<a href="http://www.xml.org/">http://www.xml.org/</a>
</li>

<li>Soubory .properties<br />
<a href="https://en.wikipedia.org/wiki/.properties">https://en.wikipedia.org/wiki/.properties</a>
</li>

<li>Soubory INI<br />
<a href="https://en.wikipedia.org/wiki/INI_file">https://en.wikipedia.org/wiki/INI_file</a>
</li>

<li>JSON to YAML<br />
<a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a>
</li>

<li>Data Format Converter<br />
<a href="https://toolkit.site/format.html">https://toolkit.site/format.html</a>
</li>

<li>Viper na GitHubu<br />
<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>
</li>

<li>GoDotEnv na GitHubu<br />
<a href="https://github.com/joho/godotenv">https://github.com/joho/godotenv</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

