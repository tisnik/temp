<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Gophernotes: kombinace interaktivního prostředí Jupyteru s jazykem Go</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Gophernotes: kombinace interaktivního prostředí Jupyteru s jazykem Go</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve výzkumu v oblastech numerických výpočtů, simulací, ML a AI se poměrně razantním způsobem prosadil jazyk Python. Ovšem i zde můžeme použít další programovací jazyky. Relativním nováčkem na tomto poli je jazyk Go, pro nějž postupně vznikají potřebné knihovny a podpůrné aplikace.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Gophernotes: kombinace interaktivního prostředí Jupyteru s&nbsp;jazykem Go</a></p>
<p><a href="#k02">2. Projekt Gonum Numerical Packages (Gonum)</a></p>
<p><a href="#k03">3. Projekt Gomacro</a></p>
<p><a href="#k04">4. Klávesové zkratky použitelné v&nbsp;interaktivní smyčce projektu Gomacro</a></p>
<p><a href="#k05">5. Základní použití interaktivní smyčky REPL projektu Gomacro</a></p>
<p><a href="#k06">6. Manipulace s&nbsp;maticemi (v&nbsp;REPL)</a></p>
<p><a href="#k07">7. Zobrazení vybraného obsahu rozsáhlých matic</a></p>
<p><a href="#k08">8. Transpozice a součet matic</a></p>
<p><a href="#k09">9. Maticový součin a podobné operace</a></p>
<p><a href="#k10">10. Použití projektu Gophernotes společně s&nbsp;Jupyter notebookem</a></p>
<p><a href="#k11">11. Spuštění Gophernotes v&nbsp;Dockeru</a></p>
<p><a href="#k12">12. Kombinace projektů Gophernotes, Gonum a Gomacro</a></p>
<p><a href="#k13">13. Použití Markdownu</a></p>
<p><a href="#k14">14. Matematická sazba</a></p>
<p><a href="#k15">15. Víceřádkové vzorce</a></p>
<p><a href="#k16">16. Načtení rastrových obrázků</a></p>
<p><a href="#k17">17. Načtení vektorových obrázků ve formátu SVG</a></p>
<p><a href="#k18">18. Obsah navazující části seriálu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Gophernotes: kombinace interaktivního prostředí Jupyteru s&nbsp;jazykem Go</h2>

<p><i>&bdquo;There is a tension, especially in scientific computing, between
ease and simplicity&ldquo;</i></p>

<p>V&nbsp;dnešním článku si popíšeme potenciálně velmi užitečný nástroj nazvaný
<i>Gophernotes</i>, který uživatelům (a zdaleka se nemusí jednat pouze o
vývojáře) používajícím programovací jazyk <i>Go</i> zpřístupňuje interaktivní
prostředí založené na známém projektu <a
href="https://jupyter.org/">Jupyter</a>, který vznikl z&nbsp;neméně známého a
používaného projektu <i>IPython Notebook</i>. Toto interaktivní prostředí,
které se zobrazuje přímo ve webovém prohlížeči, obsahuje klasickou smyčku REPL
(Read&ndash;Eval&ndash;Print&ndash;Loop), což mj.&nbsp;znamená, že se
jednotlivé výrazy zapsané uživatelem mohou ihned vyhodnocovat s&nbsp;prakticky
okamžitou zpětnou vazbou. Navíc však nástroj Gophernotes dokáže do okna
prohlížeče vykreslovat základní grafy, a to jak s&nbsp;přímým využitím
předaných dat (vektory či sekvence čísel), tak i při specifikaci funkce, jejíž
průběh se má vykreslit (existují zde ovšem mnohá omezení, kterými se budu
zabývat v&nbsp;navazujících kapitolách). Třešničkou na dortu je podpora pro
práci se vzorci psanými v&nbsp;TeXu či LaTeXu.</p>

<img src="https://i.iinfo.cz/images/669/gophernotes1-1.png" class="image-400279" alt="&#160;" width="708" height="762" />
<p><i>Obrázek 1: Klasický IPython notebook &ndash; nástroj, který umožňoval
interaktivní ovládání interpretru Pythonu z&nbsp;GUI, nabízel všechny možnosti
konzolového IPythonu a navíc i podporoval práci s&nbsp;grafickými objekty
(rastrové obrázky, grafy, diagramy atd.).</i></p>

<p>Celé grafické uživatelské rozhraní <a
href="https://github.com/gopherdata/gophernotes">Gophernotes</a> napodobuje
diář (<i>notebook</i>), do kterého se zapisují jak poznámky, tak i programový
kód a jeho výsledek, takže se tento systém může hodit i pro tvorbu
(interaktivních) prezentací, použití sdílené pracovní plochy atd. Ostatně
v&nbsp;tomto ohledu není přístup zvolený autory nijak nový ani přelomový,
protože například i populární Matlab používá podobnou technologii (i když
založenou na jiném programovacím jazyku).</p>

<img src="https://i.iinfo.cz/images/669/gophernotes1-2.png" class="image-400280" alt="&#160;" width="928" height="966" />D</p>
<p><i>Obrázek 2: Použití Pythonu v&nbsp;Jupyteru při výpočtu fraktálů.
Složitější numerické výpočty jsou jednou z&nbsp;oblastí, v&nbsp;níž by bylo
výhodnější použít jiný programovací jazyk, resp.&nbsp;přesněji jeho jádro
propojené s&nbsp;Jupyterem.<br />
<a href="https://github.com/vassilikitsios/fractals/blob/master/fractals.ipynb">Zdroj</a></i></p>

<p>Již v&nbsp;úvodním odstavci jsme si řekli, že Gophernotes je založen na
projektu Jupyter. Ve skutečnosti Gophernotes do Jupyteru doplňuje modul
(takzvaný <i>kernel</i>) zajišťující interakci s&nbsp;jazykem Go, podobně jako
existují další podobné moduly určené pro programovací jazyky <a
href="https://www.root.cz/n/python/">Python</a>, <a
href="https://www.root.cz/serialy/programovaci-jazyk-julia/">Julia</a>, <a
href="https://www.root.cz/serialy/programovaci-jazyk-lua/">Lua</a>, <a
href="https://www.root.cz/clanky/jazyky-hy-a-clojure-py-moderni-dialekty-lispu-urcene-pro-python-vm/">jazyk
Hy</a> atd. V&nbsp;případě jazyka Go je ovšem situace poněkud složitější,
protože Go je primárně překladačem. Aby bylo možné zkombinovat možnosti
interpretru a klasického překladače, vznikl projekt pojmenovaný <i>Gomacro</i>,
o jehož některých možnostech se zmíníme v&nbsp;navazujících kapitolách.</p>

<a href="https://www.root.cz/obrazek/400281/"><img src="https://i.iinfo.cz/images/669/gophernotes1-3-prev.png" class="image-400281" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 3: Nejenom pro numerické výpočty může být ideální kombinací jazyk
Julia a projekt Jupyter notebook.<br />
<a href="http://web.stanford.edu/group/farmshare/cgi-bin/wiki/index.php/Ipython">Zdroj</a></i></p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti existuje hned několik
kernelů pro Go: IGo, gopherlab a právě Gophernotes.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Projekt Gonum Numerical Packages (Gonum)</h2>

<p>Samotný programovací jazyk Go obsahuje podporu pro práci s&nbsp;maticemi a
řezy (ostatně se jedná o základní datové typy tohoto jazyka). Práce
s&nbsp;těmito datovými strukturami je podporována i ve standardní knihovně
jazyka. Ovšem například v&nbsp;porovnání se známou a velmi často používanou
knihovnou <i>NumPy</i> ze světa Pythonu (nebo s&nbsp;možnostmi Matlabu či R)
jsou možnosti standardní instalace Go v&nbsp;této oblasti mnohem menší. Ovšem
některé operace, které známe z&nbsp;<i>NumPy</i>, byly implementovány
v&nbsp;sadě knihoven, které jsou součástí projektu nazvaného jednoduše <i>Gonum
Numerical Packages</i>. Tento projekt obsahuje zejména knihovnu pro práci
s&nbsp;maticemi (naprosté základy si ukážeme níže a více se jim budeme věnovat
příště), algoritmy lineární algebry, podporu pro tvorbu grafů, podporu práce
s&nbsp;takzvanými &bdquo;datovými rámci&ldquo; (ve světě Pythonu se používá
<i>pandas</i>) atd.</p>

<img src="https://i.iinfo.cz/images/669/gophernotes1-4.png" class="image-400282" alt="&#160;" width="343" height="332" />
<p><i>Obrázek 4: Logo projektu Gonum Numerical Packages.</i></p>

<p><div class="rs-tip-major">Poznámka: na tomto místě je však vhodné
poznamenat, že integrace <i>NumPy</i> do <i>Pythonu</i> je mnohem lepší, než je
tomu v&nbsp;případě projektu <i>Gonum</i>. Je tomu tak z&nbsp;toho důvodu, že
jazyk Go nepodporuje přetěžování operátorů, takže například není možné
implementovat maticové operace &bdquo;přirozenou&ldquo; cestou (zrovna příklad
<i>NumPy</i> ukazuje, že přetěžování operátorů, pokud je použito rozumně, může
být velmi užitečné).</div></p>

<p>Samotnou sadu knihoven z&nbsp;projektu <i>Gonum Numerical Packages</i>
nainstalujeme (pro aktivního uživatele) snadno, konkrétně příkazem &bdquo;go
get&ldquo;:</p>

<pre>
$ <strong>go get -u gonum.org/v1/gonum/...</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: při instalaci více knihoven současně
nezapomeňte na uvedení tří teček na konci cesty v&nbsp;&bdquo;go
get&ldquo;.</div></p>

<p>S&nbsp;některými vlastnostmi knihovnu <strong>mat</strong> z&nbsp;projektu
<i>Gonum</i> se setkáme po instalaci projektu <i>Gomacro</i>.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Projekt Gomacro</h2>

<p>Jak jsme si již řekli <a href="#k01">v&nbsp;úvodní kapitole</a>, aby bylo
možné programovací jazyk Go zařadit do nástrojů typu <i>Jupyter</i>, je nutné,
aby byl k&nbsp;dispozici buď přímo klasický interpret, nebo alespoň překladač
umožňující postupný překlad jednotlivých výrazů, funkcí a metod s&nbsp;jejich
následným spouštěním a zpracováním výsledků. A právě tato funkcionalita je
nabízena projektem nazvaným <i>Gomacro</i>, který dokáže pracovat jako
interpret jazyka Go a nabízí programátorům i plnohodnotnou smyčku REPL.</p>

<p>Instalace tohoto projektu se opět provede příkazem &bdquo;go get&ldquo;:</p>

<pre>
$ <strong>go get -u github.com/cosmos72/gomacro</strong>
</pre>

<p>Dále je nutné se přesvědčit o tom, že je adresář
<strong>$HOME/go/bin</strong> zařazen do proměnné prostředí
<strong>PATH</strong>. V&nbsp;opačném případě by totiž nebylo možné příkaz
<strong>gomacro</strong> volat odkudkoli (což platí i pro další nástroje
naprogramované v&nbsp;jazyku Go a instalované příkazem &bdquo;go
get&ldquo;).</p>

<p>Pokud je <strong>$HOME/go/bin</strong> vložen do proměnné prostředí
<strong>PATH</strong>, bude možné Gomacro spustit:</p>

<pre>
$ <strong>gomacro</strong>
&nbsp;
// GOMACRO, an interactive Go interpreter with generics and macros
// Copyright (C) 2018-2019 Massimiliano Ghilardi &lt;https://github.com/cosmos72/gomacro&gt;
// License MPL v2.0+: Mozilla Public License version 2.0 or later &lt;http://mozilla.org/MPL/2.0/&gt;
// This is free software with ABSOLUTELY NO WARRANTY.
//
// Type :help for help
gomacro&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: případné hlášení zobrazené níže znamená,
že byly smazány zdrojové kódy <i>Gomacra</i>, což však jeho práci nijak zásadně
neovlivní:</div></p>

<pre>
// warning: could not find package "github.com/cosmos72/gomacro" in $GOPATH = "/home/tester/go/", assuming package is located in "/home/tester/go/src/github.com/cosmos72/gomacro"
</pre>

<p>Aby bylo možné odlišit příkazy jazyka Go od nových příkazů zavedených
Gomacrem, začínají příkazy Gomacra dvojtečkou:</p>

<pre>
gomacro&gt; <strong>:help</strong>
&nbsp;
// type Go code to execute it. example: func add(x, y int) int { return x + y }
&nbsp;
// interpreter commands:
:debug EXPR        debug expression or statement interactively
:env [NAME]        show available functions, variables and constants
                   in current package, or from imported package NAME
:help              show this help
:inspect EXPR      inspect expression interactively
:options [OPTS]    show or toggle interpreter options
:package "PKGPATH" switch to package PKGPATH, importing it if possible
:quit              quit the interpreter
:unload "PKGPATH"  remove package PKGPATH from the list of known packages.
                   later attempts to import it will trigger a recompile
:write [FILE]      write collected declarations and/or statements to standard output or to FILE
                   use :opt Declarations and/or :opt Statements to start collecting them
// abbreviations are allowed if unambiguous.
</pre>

<p>Dále je možné prozkoumat výrazy jazyka Go:</p>

<pre>
gomacro&gt; <strong>:inspect 1*(2+3)</strong>
&nbsp;
1*(2+3) = {int 5}       // untyped.Lit
    0. Kind     = int   // untyped.Kind
    1. Val      = 5     // constant.Value
    2. basicTypes       = [&lt;nil&gt; 0x11060b0 0x11060b0 0x11060b0 0x11060b0 0x11060b0 0x11060b0 0x11060b0 0x11060b0 0x11060b0 0x11060b0 0x11060b0 0x11060b0 0x11060b0 0x11060b0 0x11060b0 0x11060b0 &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; 0x11060b0 &lt;nil&gt; 0x11060b0]  // *[]xreflect.Type
// type ? for inspector help
</pre>

<p>Prozkoumat lze i volání funkcí, kdy se mj.&nbsp;zobrazí jejich výsledek:</p>

<pre>
gomacro&gt; <strong>import "fmt"</strong>
&nbsp;
gomacro&gt; <strong>:inspect fmt.Printf("%d\n", 42)</strong>
&nbsp;
// warning: expression returns 2 values, using only the first one: [int error]
42
fmt.Printf("%d\n", 42)  = 3     // int
// type ? for inspector help
</pre>

<p>Popř.&nbsp;lze vypsat metody aplikovatelné pro zvoleného příjemce
(<i>receiver</i>):</p>

<pre>
inspect fmt.Printf("%d\n", 42)&gt; <strong>methods</strong>
&nbsp;
methods of int:
    m0. func (int).Add(int, int) int
    m1. func (int).And(int, int) int
    m2. func (int).AndNot(int, int) int
    m3. func (int).Cmp(int) int
    m4. func (int).Equal(int) bool
    m5. func (int).Less(int) bool
    m6. func (int).Lsh(int, uint8) int
    m7. func (int).Mul(int, int) int
    m8. func (int).Neg(int) int
    m9. func (int).Not(int) int
    m10. func (int).Or(int, int) int
    m11. func (int).Quo(int, int) int
    m12. func (int).Rem(int, int) int
    m13. func (int).Rsh(int, uint8) int
    m14. func (int).Sub(int, int) int
    m15. func (int).Xor(int, int) int
</pre>

<p>Výpis tzv.&nbsp;prostředí, tj.&nbsp;dostupných funkcí a datových typů:</p>

<pre>
gomacro&gt; <strong>:env</strong>
&nbsp;
// ----- builtin binds -----
Eval            = {0x1213270 func(interface{}, interface{}) interface{}}        // fast.Function
EvalKeepUntyped = {0x1213320 func(interface{}, interface{}) interface{}}        // fast.Function
EvalType        = {0x1213660 func(interface{}, interface{}) reflect.Type}       // fast.Function
Interp          = {0x1213240 func(interface{}) interface{}}     // fast.Function
MacroExpand     = {0x1214310 func(interface{}, interface{}) (go/ast.Node, bool)}        // fast.Function
MacroExpand1    = {0x1214400 func(interface{}, interface{}) (go/ast.Node, bool)}        // fast.Function
MacroExpandCodeWalk             = {0x12144f0 func(interface{}, interface{}) (go/ast.Node, bool)}        // fast.Function
Parse           = {0x1216310 func(string, interface{}) interface{}}     // fast.Function
append          = 0x120efd0     // fast.Builtin
cap             = 0x120fb30     // fast.Builtin
close           = 0x1210290     // fast.Builtin
complex         = 0x1210880     // fast.Builtin
copy            = 0x1211f00     // fast.Builtin
delete          = 0x1212ae0     // fast.Builtin
false           = {bool false}  // untyped.Lit
imag            = 0x1216e30     // fast.Builtin
len             = 0x1213960     // fast.Builtin
make            = 0x1214bd0     // fast.Builtin
new             = 0x1215bb0     // fast.Builtin
nil             = nil   // <nil>
panic           = 0x1216020     // fast.Builtin
print           = 0x1216a60     // fast.Builtin
println         = 0x1216a60     // fast.Builtin
real            = 0x1216e30     // fast.Builtin
recover         = 0x12180e0     // fast.Builtin
true            = {bool true}   // untyped.Lit
&nbsp;
// ----- builtin types -----
Pointer         = unsafe.Pointer        // unsafe.Pointer
bool            = bool  // bool
byte            = uint8 // uint8
complex128      = complex128    // complex128
complex64       = complex64     // complex64
error           = error // interface
float32         = float32       // float32
float64         = float64       // float64
int             = int   // int
int16           = int16 // int16
int32           = int32 // int32
int64           = int64 // int64
int8            = int8  // int8
rune            = int32 // int32
string          = string        // string
uint            = uint  // uint
uint16          = uint16        // uint16
uint32          = uint32        // uint32
uint64          = uint64        // uint64
uint8           = uint8 // uint8
uintptr         = uintptr       // uintptr
&nbsp;
// ----- main binds -----
fmt             = {fmt "fmt", 19 binds, 6 types}        // *fast.Import
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Klávesové zkratky použitelné v&nbsp;interaktivní smyčce projektu gomacro</h2>

<p>Vzhledem k&nbsp;tomu, že je <strong>gomacro</strong> vybaveno i interaktivní
smyčkou REPL, je důležité, aby bylo možné editovat příkazový řádek, mít
k&nbsp;dispozici historii příkazového řádku (s&nbsp;možností vyhledávání) atd.
Pro tento účel používá <strong>gomacro</strong> knihovnu <a
href="https://github.com/peterh/liner">https://github.com/peterh/liner</a>
naprogramovanou v&nbsp;jazyce Go, která je inspirována céčkovou knihovnou
<strong>linenoise</strong> (ke které se ještě na stránkách Rootu vrátíme).
V&nbsp;této kapitole jsou vypsány vybrané klávesové zkratky, které jsou ve
výchozím nastavení použity v&nbsp;interaktivní smyčce projektu
<strong>gomacro</strong>. Většina zkratek vychází z&nbsp;Emacsu a uživatelé je
mohou znát například i z&nbsp;editoru Joe, z&nbsp;shellu (BASH atd.), pokud
ovšem není nastaven režim emulující chování textového editoru Vi/Vim. Pro větší
přehlednost jsou příkazy rozděleny do několika skupin.</p>

<h4>Příkazy pro přesuny kurzoru</h4>

<p>Základní příkazy pro přesun kurzoru používají kombinaci kláves
<strong>Ctrl+znak</strong>, <strong>Alt+znak</strong> popř.&nbsp;alternativně
<strong>Esc, znak</strong> v&nbsp;případě, že zkratky <strong>Alt+znak</strong>
kolidují s&nbsp;emulátorem terminálu (například vyvolávají příkazy
z&nbsp;menu). V&nbsp;případě, že je terminál správně nakonfigurován, měly by
fungovat i kurzorové šipky, kombinace Ctrl+šipky a navíc i klávesy
<strong>Home</strong> a <strong>End</strong> (se zřejmou funkcí):</p>

<table>
<tr><th>Klávesa</th><th>Alternativa</th><th>Význam</th></tr>
<tr><td>Ctrl+B</td><td>šipka doleva</td><td>přesun kurzoru na předchozí znak</td></tr>
<tr><td>Ctrl+F</td><td>šipka doprava</td><td>přesun kurzoru na následující znak</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Alt+B</td><td>Ctrl+šipka doleva</td><td>přesun kurzoru na předchozí slovo</td></tr>
<tr><td>Alt+F</td><td>Ctrl+šipka doprava</td><td>přesun kurzoru na další slovo</td></tr>
<tr><td>Esc, B</td><td>&nbsp;</td><td>shodné s&nbsp;klávesovou zkratkou Alt+B</td></tr>
<tr><td>Esc, F</td><td>&nbsp;</td><td>shodné s&nbsp;klávesovou zkratkou Alt+F</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Ctrl+A</td><td>Home</td><td>přesun kurzoru na začátek řádku</td></tr>
<tr><td>Ctrl+E</td><td>End</td><td>přesun kurzoru na konec řádku</td></tr>
</table>

<h4>Mazání textu, práce s&nbsp;yank bufferem</h4>

<p>Pro přesun části textu v&nbsp;rámci editovaného řádku (nebo na nějaký jiný
řádek atd.) se používá takzvaný <i>yank buffer</i> (v&nbsp;Emacsu se používá
označení <i>kill ring</i>), do něhož se smazaný text uloží. Pro vložení takto
smazaného textu do jiné oblasti se používá operace nazvaná <i>yank</i>
(odpovídá operaci <i>paste</i>). Některé dále uvedené příkazy dokážou
s&nbsp;yank bufferem pracovat (obdoba cut/copy/paste):</p>

<table>
<tr><th>Klávesa</th><th>Význam</th></tr>
<tr><td>Ctrl+H</td><td>smaže znak před kurzorem</td></tr>
<tr><td>BackSpace</td><td>smaže znak před kurzorem</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Ctrl+K</td><td>smaže text od kurzoru do konce řádku</td></tr>
<tr><td>Ctrl+U</td><td>smaže text od začátku řádku do pozice kurzoru</td></tr>
<tr><td>Ctrl+W</td><td>smaže předchozí slovo</td></tr>
<tr><td>Alt+D</td><td>smaže následující slovo</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Ctrl+Y</td><td>vloží text z&nbsp;yank bufferu na místo, na němž se nachází kurzor (<i>yank</i> neboli <i>paste</i>)</td></tr>
<tr><td>Alt+Y</td><td>po operaci Ctrl+Y dokáže <i>rotovat</i> historií a obnovit tak (před)předchozí smazaný text</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Ctrl+D</td><td>smaže jeden znak (pokud je ovšem na řádku nějaký obsah, jinak typicky ukončí aplikaci)</td></tr>
</table>

<h4>Práce s&nbsp;historií dříve zadaných příkazů</h4>

<p>Velmi užitečné klávesové zkratky umožňují procházet historií dříve zadaných
příkazů. Pro vyhledávání v&nbsp;historii slouží zkratka
<strong>Ctrl+R</strong>:</p>

<table>
<tr><th>Klávesa</th><th>Význam</th></tr>
<tr><td>Ctrl+P</td><td>průchod historií &ndash; předchozí text</td></tr>
<tr><td>Ctrl+N</td><td>průchod historií &ndash; následující text</td></tr>
<tr><td>Ctrl+R</td><td>zpětné (interaktivní) vyhledávání v&nbsp;historii</td></tr>
</table>

<h4>Některé další dostupné příkazy</h4>

<p>Mezi další užitečné zkratky patří režim <i>completeru</i>, v&nbsp;němž se
<strong>gomacro</strong> snaží nalézt symbol z&nbsp;tabulky funkcí či
metod:</p>

<table>
<tr><th>Klávesa</th><th>Význam</th></tr>
<tr><td>Tab</td><td>implicitní klávesa pro zavolání <i>completeru</i></td></tr>
<tr><td>Shift+Tab</td><td>návrat na předchozí návrh doplnění jména funkce/metody</td></tr>
<tr><td>Ctrl+T</td><td>prohození dvou znaků (před kurzorem a na pozici kurzoru)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Ctrl+L</td><td>smazání obrazovky</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě volání funkcí a metod
bere <i>completer</i> do úvahy i kontext, takže se například pro textu
<strong>fmt.</strong> nabídnou pouze funkce z&nbsp;balíčku
&bdquo;fmt&ldquo;.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Základní použití interaktivní smyčky REPL projektu Gomacro</h2>

<p>V&nbsp;této kapitole se seznámíme s&nbsp;některými možnostmi, které nám
interaktivní smyčka projektu Gomacro nabízí. Pokud na vstup zadáme nějaký výraz
(aritmetický, logický, výraz s&nbsp;řetězci atd.), je tento výraz přeložen a
ihned vyhodnocen. Jeho výsledek se vypíše na výstup, stejně, jako by jazyk Go
byl interpretován:</p>

<pre>
gomacro&gt; <strong>1+1</strong>
{int 2} // untyped.Lit
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se nevypíše pouze
výsledek výrazu, ale i jeho typ, což může být velmi užitečné, jak uvidíme
dále.</div></p>

<p>Můžeme provést i import knihovny (balíčku):</p>

<pre>
gomacro&gt; <strong>import "fmt"</strong>
</pre>

<p>U funkce či výrazu vracejícího více hodnot se zobrazí všechny hodnoty.
V&nbsp;případě funkce i se jmény a typy návratových hodnot (velmi praktické,
protože ihned vidíme, že například funkce <strong>fmt.Println</strong> vrací ve
druhé návratové hodnotě příznak chyby):</p>

<pre>
gomacro&gt; <strong>fmt.Println("test")</strong>
test
5       // int
&lt;nil&gt;   // error
</pre>

<p>Deklarovat můžeme i proměnné, a to libovolného typu, včetně řezů
(<i>slice</i>):</p>

<pre>
gomacro&gt; <strong>var a []int</strong>
gomacro&gt; <strong>a</strong>
[]      // []int
&nbsp;
gomacro&gt; <strong>a=append(a, 10)</strong>
gomacro&gt; <strong>a</strong>
[10]    // []int
</pre>

<p>Zavolání metod objektů, zde konkrétně metody řezu:</p>

<pre>
gomacro&gt; <strong>a.Cap()</strong>
1       // int
&nbsp;
gomacro&gt; <strong>a.Len()</strong>
1       // int
</pre>

<p>Použít můžeme i programovou smyčku:</p>

<pre>
gomacro&gt; <strong>for i := 1; i &lt; 10; i++ {</strong>
. . . .    <strong>a=append(a, i)</strong>
. . . .  <strong>}</strong>
&nbsp;
gomacro&gt; <strong>a</strong>
[10 1 2 3 4 5 6 7 8 9]  // []int
&nbsp;
gomacro&gt; <strong>a.Cap()</strong>
16      // int
&nbsp;
gomacro&gt; <strong>a.Len()</strong>
10      // int
</pre>

<p>Další příklad &ndash; funkce s&nbsp;několika návratovými hodnotami:</p>

<pre>
gomacro&gt; <strong>func x(i int) (int, float64, byte) {</strong>
. . . .      <strong>return i, 1.0/float64(i), byte(i)</strong>
. . . .  <strong>}</strong>
&nbsp;
gomacro&gt; <strong>x(10)</strong>
10      // int
0.1     // float64
10      // uint8
</pre>

<p>Funkce vracející chybu:</p>

<pre>
gomacro&gt; <strong>f, err := os.Open("foobarbaz")</strong>
gomacro&gt; <strong>f</strong>
<nil>   // *os.File
gomacro&gt; <strong>err</strong>
open foobarbaz: no such file or directory       // error
</pre>

<p>Funkce, která naopak otevře existující soubor:</p>

<pre>
gomacro&gt; <strong>f, err := os.Open(".bashrc")</strong>
&nbsp;
gomacro&gt; <strong>f</strong>
&amp;{0xc00048d260} // *os.File
gomacro&gt; <strong>err</strong>
&lt;nil&gt;   // error
</pre>

<p>Malá připomínka, že k&nbsp;hodnotě <strong>nil</strong> je přiřazen i
typ:</p>

<pre>
gomacro&gt; <strong>var ii interface{} = nil</strong>
gomacro&gt; <strong>ii</strong>
&lt;nil&gt;   // interface{}
&nbsp;
gomacro&gt; <strong>var p *int = nil</strong>
gomacro&gt; <strong>p</strong>
&lt;nil&gt;   // *int
&nbsp;
gomacro&gt; <strong>var m map[string]string = nil</strong>
gomacro&gt; <strong>m</strong>
map[]   // map[string]string
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Manipulace s&nbsp;maticemi (v&nbsp;REPL)</h2>

<p>Nyní, když máme nainstalovánu jak interaktivní smyčku REPL (<i>Gomacro</i>)
i projekt <i>Gonum</i> s&nbsp;několika numerickými knihovnami, si můžeme
ukázat, jak se manipuluje s&nbsp;maticemi, které v&nbsp;oblasti numerických
výpočtů mnohdy představují základní datový typ.</p>

<p>Používat budeme dva balíčky &ndash; standardní balíček &bdquo;fmt&ldquo; a
balíček &bdquo;mat&ldquo; z&nbsp;<i>Gonum</i>:</p>

<pre>
gomacro&gt; <strong>import "fmt"</strong>
&nbsp;
gomacro&gt; <strong>import "gonum.org/v1/gonum/mat"</strong>
// debug: looking for package "gonum.org/v1/gonum/mat" ...
// debug: compiling "/home/ptisnovs/go/src/gomacro.imports/gonum.org/v1/gonum/mat/mat.go" ...
</pre>

<p>Pro reprezentaci matic se používá několik struktur. Základem je je <i>dense
matrix</i> používaná pro matice běžné velikosti, které obsahují libovolné prvky
(a kde typicky nepřevažují prvky nulové):</p>

<pre>
gomacro&gt; <strong>zero := mat.NewDense(5, 6, nil)</strong>
&nbsp;
gomacro&gt; <strong>zero</strong>
&amp;{{5 6 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 6} 5 6}   // *gonum.org/v1/gonum/mat.Dense
</pre>

<p>Naplnění matice daty:</p>

<pre>
gomacro&gt; <strong>m2 := mat.NewDense(3, 4, []float64{1,2,3,4,5,6,7,8,9,10,11,12})</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: zde můžeme vidět, že práce
s&nbsp;maticemi není tak elegantní, jako je tomu v&nbsp;knihovně
<i>NumPy</i>.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zobrazení vybraného obsahu rozsáhlých matic</h2>

<p>Nyní se pokusme vytvořit relativně velkou matici o rozměrech 100&times;100
prvků:</p>

<pre>
gomacro&gt; <strong>big := mat.NewDense(100, 100, nil)</strong>
</pre>

<p>Matici můžeme naplnit daty, a to pomocí metody <strong>Set</strong>
(vyplníme jen prvky na hlavní úhlopříčce):</p>

<pre>
gomacro&gt; <strong>for i := 0; i &lt; 100; i++ {</strong>
. . . .        <strong>big.Set(i, i, 1)</strong>
. . . .    <strong>}</strong>
</pre>

<p>Přímý tisk hodnoty takové matice ovšem není přehledný:</p>

<pre>
gomacro&gt; <strong>big</strong>
&amp;{{100 100 [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
...
...
...
0 0 0 0 0 1] 100} 100 100}      // *gonum.org/v1/gonum/mat.Dense
</pre>

<p>Ani přímý tisk přes standardní funkci <strong>fmt.Printf</strong> není ideální:</p>

<pre>
gomacro&gt; <strong>fmt.Printf("%v\n", big)</strong>
&amp;{{100 100 [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
...
...
...
</pre>

<p>Výhodnější je použití funkce <strong>mat.Formatted</strong>, které se ve
druhém parametru předá oddělovač hodnot na řádku a ve třetím parametru pak
informace o tom, kolik mezních sloupců a řádků se má vytisknout. Pokud nám
postačuje tisk prvních a posledních tří řádků a sloupců, lze použít:</p>

<pre>
gomacro&gt; <strong>fmt.Printf("excerpt big identity matrix: %v\n\n",</strong>
. . . .        <strong>mat.Formatted(big, mat.Prefix(" "), mat.Excerpt(3)))</strong>
&nbsp;
excerpt big identity matrix: Dims(100, 100)
 ⎡1  0  0  ...  ...  0  0  0⎤
 ⎢0  1  0            0  0  0⎥
 ⎢0  0  1            0  0  0⎥
  .
  .
  .
 ⎢0  0  0            1  0  0⎥
 ⎢0  0  0            0  1  0⎥
 ⎣0  0  0  ...  ...  0  0  1⎦
&nbsp;
261     // int
&lt;nil&gt;   // error
</pre>

<p>V&nbsp;REPLu navíc nemusíme volat funkci <strong>fmt.Printf</strong>,
protože se výsledná hodnota zobrazí automaticky:</p>

<pre>
gomacro&gt; <strong>mat.Formatted(big, mat.Prefix(" "), mat.Excerpt(3))</strong>
&nbsp;
Dims(100, 100)
 ⎡1  0  0  ...  ...  0  0  0⎤
 ⎢0  1  0            0  0  0⎥
 ⎢0  0  1            0  0  0⎥
  .
  .
  .
 ⎢0  0  0            1  0  0⎥
 ⎢0  0  0            0  1  0⎥
 ⎣0  0  0  ...  ...  0  0  1⎦   // fmt.Formatter
</pre>

<p>Dtto, ale pro mezních pět řádků a sloupců:</p>

<pre>
gomacro&gt; <strong>mat.Formatted(big, mat.Prefix(" "), mat.Excerpt(5))</strong>
&nbsp;
Dims(100, 100)
 ⎡1  0  0  0  0  ...  ...  0  0  0  0  0⎤
 ⎢0  1  0  0  0            0  0  0  0  0⎥
 ⎢0  0  1  0  0            0  0  0  0  0⎥
 ⎢0  0  0  1  0            0  0  0  0  0⎥
 ⎢0  0  0  0  1            0  0  0  0  0⎥
  .
  .
  .
 ⎢0  0  0  0  0            1  0  0  0  0⎥
 ⎢0  0  0  0  0            0  1  0  0  0⎥
 ⎢0  0  0  0  0            0  0  1  0  0⎥
 ⎢0  0  0  0  0            0  0  0  1  0⎥
 ⎣0  0  0  0  0  ...  ...  0  0  0  0  1⎦       // fmt.Formatter
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Transpozice a součet matic</h2>

<p>Mezi další podporované základní maticové operace patří transpozice a součet
matic.</p>

<p>Nejdříve vytvoříme proměnnou pro uložení výsledku (nealokuje se žádná další
paměť):</p>

<pre>
gomacro&gt; <strong>var c mat.Dense</strong>
gomacro&gt; <strong>c</strong>
{mat:{0 0 [] 0} capRows:0 capCols:0}    // gonum.org/v1/gonum/mat.Dense
</pre>

<p>Dále vytvoříme dvě matice se třemi řádky a čtyřmi prvky na řádku:</p>

<pre>
gomacro&gt; <strong>m1 := mat.NewDense(3, 4, {})</strong>
gomacro&gt; <strong>m1</strong>
&amp;{{3 4 [0 0 0 0 0 0 0 0 0 0 0 0] 4} 3 4}        // *gonum.org/v1/gonum/mat.Dense
&nbsp;
gomacro&gt; <strong>m2 := mat.NewDense(3, 4, []float64{1,2,3,4,5,6,7,8,9,10,11,12})</strong>
gomacro&gt; <strong>m2</strong>
&amp;{{3 4 [1 2 3 4 5 6 7 8 9 10 11 12] 4} 3 4}     // *gonum.org/v1/gonum/mat.Dense
</pre>

<p>Obě matice vytiskneme v&nbsp;čitelném formátu:</p>

<pre>
gomacro&gt; <strong>mat.Formatted(m1)</strong>
⎡0  0  0  0⎤
⎢0  0  0  0⎥
⎣0  0  0  0⎦    // fmt.Formatter
&nbsp;
gomacro&gt; <strong>mat.Formatted(m2)</strong>
⎡ 1   2   3   4⎤
⎢ 5   6   7   8⎥
⎣ 9  10  11  12⎦        // fmt.Formatter
</pre>

<p>Výpočet transponované matice s&nbsp;jejím následným vytištěním:</p>

<pre>
gomacro&gt; <strong>m3 := m2.T()</strong>
gomacro&gt; <strong>mat.Formatted(m3)</strong>
⎡ 1   5   9⎤
⎢ 2   6  10⎥
⎢ 3   7  11⎥
⎣ 4   8  12⎦    // fmt.Formatter
</pre>

<p>Součet matic je řešen metodou:</p>

<pre>
gomacro&gt; <strong>c.Add(m3, m3)</strong>
gomacro&gt; <strong>mat.Formatted(&c)</strong>
⎡ 2  10  18⎤
⎢ 4  12  20⎥
⎢ 6  14  22⎥
⎣ 8  16  24⎦    // fmt.Formatter
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;této knihovně vždy platí &ndash;
funkce ani metody nemění obsah svých parametrů (matic). Změnit lze obsah jediné
hodnoty &ndash; příjemce (<i>receiveru</i>) u metod.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Maticový součin a podobné operace</h2>

<p>Podporována je i operace maticového součinu, ale pochopitelně pouze za
předpokladu, že počet sloupců první matice odpovídá počtu řádků matice
druhé:</p>

<pre>
gomacro&gt; <strong>var c mat.Dense</strong>
gomacro&gt; <strong>c.Mul(m3, m2)</strong>
mat: dimension mismatch
</pre>

<p>Pokud matice <strong>m2</strong> a <strong>m3</strong> předáme ve správném
pořadí, bude možné matice vynásobit a uložit výsledek do příjemce:</p>

<pre>
gomacro&gt; <strong>c.Mul(m2, m3)</strong>
&nbsp;
gomacro&gt; <strong>mat.Formatted(&c)</strong>
⎡ 30   70  110⎤
⎢ 70  174  278⎥
⎣110  278  446⎦ // fmt.Formatter
</pre>

<p>Provést lze i násobení dvou matic prvek po prvku (což ovšem neodpovídá
maticovému násobení):</p>

<pre>
gomacro&gt; <strong>var c mat.Dense</strong>
gomacro&gt; <strong>c.MulElem(m3, m3)</strong>
gomacro&gt; <strong>mat.Formatted(&c)</strong>
⎡  1   25   81⎤
⎢  4   36  100⎥
⎢  9   49  121⎥
⎣ 16   64  144⎦ // fmt.Formatter
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Použití projektu Gophernotes společně s&nbsp;Jupyter notebookem</h2>

<p>Nástroj <i>Gophernotes</i> je založen na klasické technologii klient-server,
kde klientem je webový prohlížeč spuštěný u uživatele (či uživatelů) a serverem
je Jupyter s&nbsp;přidaným modulem (kernelem) pro jazyk Go vybaveným výše
popsaným projektem <i>gomacro</i>. Výraz, popř.&nbsp;blok výrazů
představujících programový kód napsaný v&nbsp;programovacím jazyce Go, je po
stlačení klávesové zkratky <strong>Shift+Enter</strong> přenesen na server, kde
je zpracován a výsledek je poslán zpět do prohlížeče.</p>

<p>JavaScriptový kód na straně prohlížeče zajistí interpretaci získaných
výsledků a jejich zařazení na správné místo do dynamické webové stránky (jedná
se vlastně o dnes tak populární SPA &ndash; <i>Single Page Application</i> se
všemi přednostmi a zápory, které toto řešení přináší). Výsledky poslané
serverem na klienta mohou být ve skutečnosti různého typu; typicky se jedná o
fragment HTML (tabulky atd.), obrázek typu SVG (graf, histogram), rastrový
obrázek (graf získaný například ze systému R), vzorec vykreslený
z&nbsp;TeXového či LaTeXového zdrojového kódu apod. Samotná architektura
nástroje Jupyter je otevřená a poměrně snadno rozšiřitelná, což znamená, že je
v&nbsp;případě potřeby možné přidat například další typy grafů apod.</p>

<p>Existují i podobně koncipované projekty. Na stránkách Rootu jsme se
například seznámili s&nbsp;projektem Gorilla REPL, který je určen pro
programovací jazyk Clojure:</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-1.png" class="image-242637" alt="&#160;" width="660" height="728" />
<p><i>Obrázek 5: Interaktivní prostředí nástroje Gorilla REPL spuštěné
v&nbsp;běžném webovém prohlížeči (zde konkrétně ve Firefoxu).</i></p>

<a href="http://www.root.cz/obrazek/242639/"><img src="https://i.iinfo.cz/images/72/gorilla-repl-3-prev.png" class="image-242639" alt="&#160;" width="370" height="268" /></a>
<p><i>Obrázek 6: Standardní grafy jsou v&nbsp;Gorilla REPL do stránky vkládány
ve formátu SVG.</i></p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-12.png" class="image-242648" alt="&#160;" width="660" height="397" />
<p><i>Obrázek 7: Ukázka použití jednoduchého sloupcového grafu.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Spuštění Gophernotes v&nbsp;Dockeru</h2>

<p>Nejjednodušší způsob, jakým lze spustit Gophernotes i se všemi potřebnými
závislostmi, spočívá v&nbsp;použití Dockeru, protože již existuje připravený
obraz obsahující Gophernotes, Jupyter, gomacro i další knihovny pro numerické
výpočty a zpracování dat. Následující příkaz zajistí stažení obrazů, spuštění
Gophernotesu a namapování HTTP serveru (Jupyter) na port 8888:</p>

<pre>
$ <strong>docker run -it -p 8888:8888 gopherdata/gophernotes:latest-ds</strong>
&nbsp;
Unable to find image 'gopherdata/gophernotes:latest-ds' locally
Trying to pull repository docker.io/gopherdata/gophernotes ... 
sha256:e2ef4a5b318604b8e5116fcf470e11fecbb2c18631cb73bdbed46ed026e862a6: Pulling from docker.io/gopherdata/gophernotes
a44d943737e8: Pull complete 
0bbfb29b138b: Pull complete 
ef49c0fa046c: Pull complete 
Digest: sha256:e2ef4a5b318604b8e5116fcf470e11fecbb2c18631cb73bdbed46ed026e862a6
Status: Downloaded newer image for docker.io/gopherdata/gophernotes:latest-ds
[I 15:14:32.110 NotebookApp] Writing notebook server cookie secret to /root/.local/share/jupyter/runtime/notebook_cookie_secret
[I 15:14:32.998 NotebookApp] Serving notebooks from local directory: /
[I 15:14:32.999 NotebookApp] The Jupyter Notebook is running at:
[I 15:14:33.000 NotebookApp] http://(6c7428d3f7f9 or 127.0.0.1):8888/?token=f4d754332b4be755cfb351018840af76767e80829d7dfc61
[I 15:14:33.000 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[C 15:14:33.006 NotebookApp] 
&nbsp;
    To access the notebook, open this file in a browser:
        file:///root/.local/share/jupyter/runtime/nbserver-1-open.html
    Or copy and paste one of these URLs:
        http://(6c7428d3f7f9 or 127.0.0.1):8888/?token=f4d754332b4be755cfb351018840af76767e80829d7dfc61
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se zobrazil i token,
který použijeme pro přihlášení a založení nového diáře.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Kombinace projektů Gophernotes, Gonum a Gomacro</h2>

<p><i>&bdquo;There is a tension, especially in scientific computing, between
ease and simplicity&ldquo;</i></p>

<p>Do adresního řádku webového browseru napíšeme adresu:
http://127.0.0.1:8888.</p>

<img src="https://i.iinfo.cz/images/669/gophernotes1-5.png" class="image-400283" alt="&#160;" width="632" height="775" />
<p><i>Obrázek 8: Prohlížeč se zeptá na token, který zkopírujeme ze zprávy
vypsané po spuštění Dockeru s&nbsp;gophernotesem.</i></p>

<a href="https://www.root.cz/obrazek/400284/"><img src="https://i.iinfo.cz/images/669/gophernotes1-6-prev.png" class="image-400284" alt="&#160;" width="370" height="67" /></a>
<p><i>Obrázek 9: Grafické uživatelské rozhraní Jupyteru
s&nbsp;Gophernotesem.</i></p>

<a href="https://www.root.cz/obrazek/400285/"><img src="https://i.iinfo.cz/images/669/gophernotes1-7-prev.png" class="image-400285" alt="&#160;" width="370" height="269" /></a>
<p><i>Obrázek 10: Zprávy zapisované na chybový výstup jsou podbarveny červeně,
zprávy zapisované na výstup standardní nemají podbarvení žádné (implicitní
barvou je bílé pozadí).</i></p>

<a href="https://www.root.cz/obrazek/400286/"><img src="https://i.iinfo.cz/images/669/gophernotes1-8-prev.png" class="image-400286" alt="&#160;" width="370" height="225" /></a>
<p><i>Obrázek 11: Formátování matic tak, jak jsme si to ukázali
v&nbsp;předchozích kapitolách.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Použití Markdownu</h2>

<p>Vzhledem k&nbsp;tomu, že je možné projekt Jupyter použít i pro tvorbu
prezentací, asi nás nepřekvapí, že je podporována tvorba poznámek, které mohou
být naformátovány. Podporován je především známý a široce používaný formátovací
jazyk Markdown. Podívejme se na následující příklad, v&nbsp;němž je Markdown
použit pro zobrazení textu neproporcionálním písmem, tučným písmem a
kurzivou:</p>

<a href="https://www.root.cz/obrazek/400287/"><img src="https://i.iinfo.cz/images/669/gophernotes1-9-prev.png" class="image-400287" alt="&#160;" width="370" height="37" /></a>
<p><i>Obrázek 12: Použití funkce <strong>Display.markdown</strong>.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Matematická sazba</h2>

<p>Podporována je i matematická sazba odvozená od možností TeXu a LaTeXu.
Příkladem může být zápis vzorce s&nbsp;integrálem a zlomkem:</p>

<pre>
F(x) &amp;= \int^a_b \frac{1}{3}x^3
</pre>

<p>Další dva příklady ukazují použití horních indexů (mocnin), zlomku a zápisu
druhé odmocniny:</p>

<pre>
Display(display.Math(`x^2+y^2`))
Display(display.Math(`\frac{1}{\sqrt{x}}`))
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se řetězce zapisují do
zpětných apostrofů. Díky tomuto zápisu lze v&nbsp;jazyce Go do řetězců zapsat
libovolné znaky bez nutnosti jejich uvození zpětným lomítkem, což je právě u
matematických vzorců TeXu a LaTeXu velmi častý znak.</div></p>

<a href="https://www.root.cz/obrazek/400288/"><img src="https://i.iinfo.cz/images/669/gophernotes1-10-prev.png" class="image-400288" alt="&#160;" width="370" height="39" /></a>
<p><i>Obrázek 13: Výsledek zobrazení vzorce
<strong>`\frac{1}{\sqrt{x}}`</strong>.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Víceřádkové vzorce</h2>

<p>Použít lze i víceřádkovou sazbu vzorců. Časté bývá použití matic, na jejichž
začátku a konci musíme použít &bdquo;velké&ldquo; hranaté závorky (namísto
pouhého zápisu [ a ]):</p>

<pre>
Display(display.Math(`\left[
\begin{matrix}
1 &amp; 0\\
0 &amp; 1
\end{matrix}
\right]`))
</pre>

<a href="https://www.root.cz/obrazek/400289/"><img src="https://i.iinfo.cz/images/669/gophernotes1-11-prev.png" class="image-400289" alt="&#160;" width="370" height="66" /></a>
<p><i>Obrázek 14: Matice vykreslená TeXovským formátovačem.</i></p>

<p>Podobný zápis je vyžadován i u složitějších vzorců se zlomky, integrály,
sumami, limity atd.:</p>

<pre>
Display(display.Math(`
 \left[  \frac{ N } { \left( \frac{L}{p} \right)  - (m+n) }  \right]
`))
</pre>

<a href="https://www.root.cz/obrazek/400290/"><img src="https://i.iinfo.cz/images/669/gophernotes1-12-prev.png" class="image-400290" alt="&#160;" width="370" height="54" /></a>
<p><i>Obrázek 14: Složený zlomek vykreslený TeXovským formátovačem.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Načtení rastrových obrázků</h2>

<p>Velmi často se setkáme s&nbsp;nutností zobrazit přímo v&nbsp;diáři rastrový
obrázek. Ten může vzniknout několika způsoby, typicky se však jedná (ve světě
výpočtů, simulací, ML atd.) o nějaký graf (heatmap atd.), výsledek aplikace
rastrových operací na vstupní data atd. Pro zobrazení rastrového obrázku lze
použít funkce dostupné z&nbsp;balíčku <strong>display</strong>, který je
automaticky načten při inicializaci diáře, takže nemusíme provádět jeho
explicitní import. V&nbsp;následujícím příkladu je ukázáno, jak lze načíst
obrázek z&nbsp;externího zdroje (stáhneme ho pomocí <strong>http.Get</strong>)
a zobrazit ho funkcí <strong>display.PNG</strong> (obrázek je reprezentován
řezem bajtů obsahujícím jeho podobu zakódovanou do PNG &ndash; včetně hlaviček,
palety, metadat atd.). Podobné funkce pochopitelně existují i pro rastrové
obrázky uložené ve formátu JPEG či GIF:</p>

<pre>
import (
    "image"
    "net/http"
    "io/ioutil"
)
&nbsp;
resp, err := http.Get("https://github.com/gopherdata/gophernotes/raw/master/files/gophernotes-logo.png")
bytes, err := ioutil.ReadAll(resp.Body)
resp.Body.Close()
display.PNG(bytes)
</pre>

<p><div class="rs-tip-major">Poznámka: jedná se o příklad převzatý přímo <a
href="https://github.com/gopherdata/gophernotes">z&nbsp;dokumentace projektu
Gophernotes</a>.</div></p>

<a href="https://www.root.cz/obrazek/400291/"><img src="https://i.iinfo.cz/images/669/gophernotes1-13-prev.png" class="image-400291" alt="&#160;" width="370" height="151" /></a>
<p><i>Obrázek 15: Rastrový obrázek s&nbsp;logem projektu Gophernotes načtený
přímo do diáře.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Načtení vektorových obrázků ve formátu SVG</h2>

<p>Zmiňme se o další užitečné vlastnosti projektu Gophernotes v&nbsp;kombinaci
s&nbsp;Jypyterem. Jedná se o schopnost zobrazit přímo do vytvářeného diáře
diagram, graf či nárys uložený do vektorového formátu SVG (<i>Scalable  Vector
Graphics</i>). Pro tento účel se používá funkce <strong>display.SVG</strong>,
které se předá řez bajtů obsahující data s&nbsp;popisem SVG. Ta mohou vzniknout
různým způsobem &ndash; lze je stáhnout, vytvořit programově atd. atd.:</p>

<pre>
resp, err := http.Get("http://jupyter.org/assets/nav_logo.svg")
bytes, err := ioutil.ReadAll(resp.Body)
resp.Body.Close()
display.SVG(string(bytes))
</pre>

<p><div class="rs-tip-major">Poznámka: opět se jedná o příklad převzatý přímo
<a href="https://github.com/gopherdata/gophernotes">z&nbsp;dokumentace projektu
Gophernotes</a>.</div></p>

<a href="https://www.root.cz/obrazek/400292/"><img src="https://i.iinfo.cz/images/669/gophernotes1-14-prev.png" class="image-400292" alt="&#160;" width="370" height="83" /></a>
<p><i>Obrázek 16: Logo projektu Jupyter je uloženo do vektorového formátu SVG a
je ho tak možné přímo stáhnout a zobrazit v&nbsp;diáři.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah navazující části seriálu</h2>

<p>Možností, která nám nabízí kombinace projektů <i>Gomacro</i>, <i>Gonum</i> a
<i>Gophernotes</i>, je pochopitelně mnohem více, než bylo naznačeno
v&nbsp;předchozích kapitolách. I z&nbsp;tohoto důvodu se s&nbsp;touto trojicí
projektů setkáme i v&nbsp;navazujících částech seriálu o programovacím jazyce
Go.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně pět až šest megabajtů), můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>mat01.go</td><td>vytvoření matice konstruktorem <strong>mat.NewDense</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_48/mat01.go">https://github.com/tisnik/go-root/blob/master/article_48/mat01.go</a></td></tr>
<tr><td> 2</td><td>mat02.go</td><td>vytištění obsahu matice funkcí <strong>mat.Formatted</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_48/mat02.go">https://github.com/tisnik/go-root/blob/master/article_48/mat02.go</a></td></tr>
<tr><td> 3</td><td>mat03.go</td><td>vytištění obsahu rozsáhlé matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_48/mat03.go">https://github.com/tisnik/go-root/blob/master/article_48/mat03.go</a></td></tr>
<tr><td> 4</td><td>mat04.go</td><td>vytištění obsahu rozsáhlé matice funkcí <strong>mat.Formatted</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_48/mat04.go">https://github.com/tisnik/go-root/blob/master/article_48/mat04.go</a></td></tr>
<tr><td> 5</td><td>mat05.go</td><td>vytištění vybrané části rozsáhlé matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_48/mat05.go">https://github.com/tisnik/go-root/blob/master/article_48/mat05.go</a></td></tr>
<tr><td> 6</td><td>mat06.go</td><td>vytištění vybrané části rozsáhlé matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_48/mat06.go">https://github.com/tisnik/go-root/blob/master/article_48/mat06.go</a></td></tr>
<tr><td> 7</td><td>mat07.go</td><td>transpozice matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_48/mat07.go">https://github.com/tisnik/go-root/blob/master/article_48/mat07.go</a></td></tr>
<tr><td> 8</td><td>mat08.go</td><td>součet a součin matic</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_48/mat08.go">https://github.com/tisnik/go-root/blob/master/article_48/mat08.go</a></td></tr>
<tr><td> 9</td><td>mat09.go</td><td>použití rozhraní <strong>mat.Matrix</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_48/mat09.go">https://github.com/tisnik/go-root/blob/master/article_48/mat09.go</a></td></tr>
<tr><td>10</td><td>mat10.go</td><td>výpočet inverzní matice</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_48/mat10.go">https://github.com/tisnik/go-root/blob/master/article_48/mat10.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>The Gonum Numerical Computing Package<br />
<a href="https://www.gonum.org/post/introtogonum/">https://www.gonum.org/post/introtogonum/</a>
</li>

<li>Gomacro na GitHubu<br />
<a href="https://github.com/cosmos72/gomacro">https://github.com/cosmos72/gomacro</a>
</li>

<li>gophernotes - Use Go in Jupyter notebooks and nteract<br />
<a href="https://github.com/gopherdata/gophernotes">https://github.com/gopherdata/gophernotes</a>
</li>

<li>gonum<br />
<a href="https://github.com/gonum">https://github.com/gonum</a>
</li>

<li>go-gota/gota -  DataFrames and data wrangling in Go (Golang)<br />
<a href="https://porter.io/github.com/go-gota/gota">https://porter.io/github.com/go-gota/gota</a>
</li>

<li>A repository for plotting and visualizing data <br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>Gonum Numerical Packages<br />
<a href="https://www.gonum.org/">https://www.gonum.org/</a>
</li>

<li>Stránky projektu MinIO<br />
<a href="https://min.io/">https://min.io/</a>
</li>

<li>MinIO Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-quickstart-guide.html">https://docs.min.io/docs/minio-quickstart-guide.html</a>
</li>

<li>MinIO Go Client API Reference<br />
<a href="https://docs.min.io/docs/golang-client-api-reference">https://docs.min.io/docs/golang-client-api-reference</a>
</li>

<li>MinIO Python Client API Reference<br />
<a href="https://docs.min.io/docs/python-client-api-reference.html">https://docs.min.io/docs/python-client-api-reference.html</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>MinIO Client Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a>
</li>

<li>Analýza kvality zdrojových kódů Minia<br />
<a href="https://goreportcard.com/report/github.com/minio/minio">https://goreportcard.com/report/github.com/minio/minio</a>
</li>

<li>This is MinIO<br />
<a href="https://www.youtube.com/watch?v=vF0lQh0XOCs">https://www.youtube.com/watch?v=vF0lQh0XOCs</a>
</li>

<li>Running MinIO Standalone<br />
<a href="https://www.youtube.com/watch?v=dIQsPCHvHoM">https://www.youtube.com/watch?v=dIQsPCHvHoM</a>
</li>

<li>"Amazon S3 Compatible Storage in Kubernetes" - Rob Girard, Principal Tech Marketing Engineer, Minio<br />
<a href="https://www.youtube.com/watch?v=wlpn8K0jJ4U">https://www.youtube.com/watch?v=wlpn8K0jJ4U</a>
</li>

<li>Ginkgo<br />
<a href="http://onsi.github.io/ginkgo/">http://onsi.github.io/ginkgo/</a>
</li>

<li>Gomega<br />
<a href="https://onsi.github.io/gomega/">https://onsi.github.io/gomega/</a>
</li>

<li>Ginkgo's Preferred Matcher Library na GitHubu<br />
<a href="https://github.com/onsi/gomega/">https://github.com/onsi/gomega/</a>
</li>

<li>Provided Matchers<br />
<a href="http://onsi.github.io/gomega/#provided-matchers">http://onsi.github.io/gomega/#provided-matchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku goexpect<br />
<a href="https://godoc.org/github.com/google/goexpect">https://godoc.org/github.com/google/goexpect</a>
</li>

<li>Balíček goexpect<br />
<a href="https://github.com/google/goexpect">https://github.com/google/goexpect</a>
</li>

<li>Balíček go-expect<br />
<a href="https://github.com/Netflix/go-expect">https://github.com/Netflix/go-expect</a>
</li>

<li>Balíček gexpect<br />
<a href="https://github.com/ThomasRooney/gexpect">https://github.com/ThomasRooney/gexpect</a>
</li>

<li>Expect (originál naprogramovaný v&nbsp;TCL)<br />
<a href="https://core.tcl-lang.org/expect/index">https://core.tcl-lang.org/expect/index</a>
</li>

<li>Expect (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Expect">https://en.wikipedia.org/wiki/Expect</a>
</li>

<li>Pexpect<br />
<a href="https://pexpect.readthedocs.io/en/stable/">https://pexpect.readthedocs.io/en/stable/</a>
</li>

<li>Golang SSH Client: Multiple Commands, Crypto &amp; Goexpect Examples<br />
<a href="http://networkbit.ch/golang-ssh-client/">http://networkbit.ch/golang-ssh-client/</a>
</li>

<li>goblin na GitHubu<br />
<a href="https://github.com/franela/goblin">https://github.com/franela/goblin</a>
</li>

<li>Mocha framework<br />
<a href="https://mochajs.org/">https://mochajs.org/</a>
</li>

<li>frisby na GitHubu<br />
<a href="https://github.com/verdverm/frisby">https://github.com/verdverm/frisby</a>
</li>

<li>package frisby<br />
<a href="https://godoc.org/github.com/verdverm/frisby">https://godoc.org/github.com/verdverm/frisby</a>
</li>

<li>Frisby alternatives and similar packages (generováno)<br />
<a href="https://go.libhunt.com/frisby-alternatives">https://go.libhunt.com/frisby-alternatives</a>
</li>

<li>Cucumber for golang<br />
<a href="https://github.com/DATA-DOG/godog">https://github.com/DATA-DOG/godog</a>
</li>

<li>How to Use Godog for Behavior-driven Development in Go<br />
<a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go</a>
</li>

<li>Comparative Analysis Of GoLang Testing Frameworks<br />
<a href="https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks">https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks</a>
</li>

<li>A Quick Guide to Testing in Golang<br />
<a href="https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/">https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/</a>
</li>

<li>Tom's Obvious, Minimal Language.<br />
<a href="https://github.com/toml-lang/toml">https://github.com/toml-lang/toml</a>
</li>

<li>xml.org<br />
<a href="http://www.xml.org/">http://www.xml.org/</a>
</li>

<li>Soubory .properties<br />
<a href="https://en.wikipedia.org/wiki/.properties">https://en.wikipedia.org/wiki/.properties</a>
</li>

<li>Soubory INI<br />
<a href="https://en.wikipedia.org/wiki/INI_file">https://en.wikipedia.org/wiki/INI_file</a>
</li>

<li>JSON to YAML<br />
<a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a>
</li>

<li>Data Format Converter<br />
<a href="https://toolkit.site/format.html">https://toolkit.site/format.html</a>
</li>

<li>Viper na GitHubu<br />
<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>
</li>

<li>GoDotEnv na GitHubu<br />
<a href="https://github.com/joho/godotenv">https://github.com/joho/godotenv</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

