<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p></p>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        fmt.Println(q)</strong>)
}
</pre>

<p></p>

<pre>
$ <strong>go get -v github.com/gammazero/deque</strong>
&nbsp;
go: downloading github.com/gammazero/deque v0.2.1
go: added github.com/gammazero/deque v0.2.1
</pre>

<p></p>

<pre>
github.com/gammazero/deque v0.2.1 h1:qSdsbG6pgp6nL7A0+K/B7s12mcCY/5l5SIUpMOl+dC0=
github.com/gammazero/deque v0.2.1/go.mod h1:LFroj8x4cMYCukHJDbxFCkT+r9AndaJnFMuZDV34tuU=
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<p></p>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        fmt.Println("Deque length:  ", <strong>q.Len()</strong>)
        fmt.Println("Deque capacity:", <strong>q.Cap()</strong>)
        fmt.Println("Deque value:   ", <strong>q</strong>)
}
</pre>

<p></p>

<pre>
Deque length:   0
Deque capacity: 0
Deque value:    {[] 0 0 0 0}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p></p>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        for i := 1; i &lt;= 10; i++ {
                <strong>q.PushBack(100 + i)</strong>
                fmt.Println("Deque length:  ", <strong>q.Len()</strong>)
                fmt.Println("Deque capacity:", <strong>q.Cap()</strong>)
                fmt.Println("Deque value:   ", <strong>q</strong>)
                fmt.Println()
        }
}
</pre>

<p></p>

<pre>
Deque length:   1
Deque capacity: 16
Deque value:    {[101 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 0 1 1 16}
&nbsp;
Deque length:   2
Deque capacity: 16
Deque value:    {[101 102 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 0 2 2 16}
&nbsp;
Deque length:   3
Deque capacity: 16
Deque value:    {[101 102 103 0 0 0 0 0 0 0 0 0 0 0 0 0] 0 3 3 16}
&nbsp;
Deque length:   4
Deque capacity: 16
Deque value:    {[101 102 103 104 0 0 0 0 0 0 0 0 0 0 0 0] 0 4 4 16}
&nbsp;
Deque length:   5
Deque capacity: 16
Deque value:    {[101 102 103 104 105 0 0 0 0 0 0 0 0 0 0 0] 0 5 5 16}
&nbsp;
Deque length:   6
Deque capacity: 16
Deque value:    {[101 102 103 104 105 106 0 0 0 0 0 0 0 0 0 0] 0 6 6 16}
&nbsp;
Deque length:   7
Deque capacity: 16
Deque value:    {[101 102 103 104 105 106 107 0 0 0 0 0 0 0 0 0] 0 7 7 16}
&nbsp;
Deque length:   8
Deque capacity: 16
Deque value:    {[101 102 103 104 105 106 107 108 0 0 0 0 0 0 0 0] 0 8 8 16}
&nbsp;
Deque length:   9
Deque capacity: 16
Deque value:    {[101 102 103 104 105 106 107 108 109 0 0 0 0 0 0 0] 0 9 9 16}
&nbsp;
Deque length:   10
Deque capacity: 16
Deque value:    {[101 102 103 104 105 106 107 108 109 110 0 0 0 0 0 0] 0 10 10 16}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        fmt.Println("Length Capacity")
        for i := 1; i &lt;= 1000; i++ {
                <strong>q.PushBack(i)</strong>
                fmt.Printf("%5d %5d\n", <strong>q.Len()</strong>, <strong>q.Cap()</strong>)
        }
}
</pre>

<pre>
Length Capacity
    1    16
    2    16
    3    16
...
...
...
   15    16
   16    16
   17    32
   18    32
...
...
...
   31    32
   32    32
   33    64
   34    64
...
...
...
  511   512
  512   512
  513  1024
  514  1024
...
...
...
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        for i := 1; i &lt;= 10; i++ {
                <strong>q.PushBack(100 + i)</strong>
                fmt.Println("Deque length:  ", <strong>q.Len()</strong>)
                fmt.Println("Deque capacity:", <strong>q.Cap()</strong>)
                fmt.Println("Deque value:   ", <strong>q</strong>)
                fmt.Println()
        }
&nbsp;
        fmt.Println()
&nbsp;
        for true {
                fmt.Println("Pop value:     ", <strong>q.PopFront()</strong>)
                fmt.Println("Deque length:  ", <strong>q.Len()</strong>)
                fmt.Println("Deque capacity:", <strong>q.Cap()</strong>)
                fmt.Println("Deque value:   ", <strong>q</strong>)
                fmt.Println()
        }
}
</pre>

<pre>
Deque length:   1
Deque capacity: 16
Deque value:    {[101 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 0 1 1 16}
&nbsp;
Deque length:   2
Deque capacity: 16
Deque value:    {[101 102 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 0 2 2 16}
&nbsp;
Deque length:   3
Deque capacity: 16
Deque value:    {[101 102 103 0 0 0 0 0 0 0 0 0 0 0 0 0] 0 3 3 16}
&nbsp;
Deque length:   4
Deque capacity: 16
Deque value:    {[101 102 103 104 0 0 0 0 0 0 0 0 0 0 0 0] 0 4 4 16}
&nbsp;
Deque length:   5
Deque capacity: 16
Deque value:    {[101 102 103 104 105 0 0 0 0 0 0 0 0 0 0 0] 0 5 5 16}
&nbsp;
Deque length:   6
Deque capacity: 16
Deque value:    {[101 102 103 104 105 106 0 0 0 0 0 0 0 0 0 0] 0 6 6 16}
&nbsp;
Deque length:   7
Deque capacity: 16
Deque value:    {[101 102 103 104 105 106 107 0 0 0 0 0 0 0 0 0] 0 7 7 16}
&nbsp;
Deque length:   8
Deque capacity: 16
Deque value:    {[101 102 103 104 105 106 107 108 0 0 0 0 0 0 0 0] 0 8 8 16}
&nbsp;
Deque length:   9
Deque capacity: 16
Deque value:    {[101 102 103 104 105 106 107 108 109 0 0 0 0 0 0 0] 0 9 9 16}
&nbsp;
Deque length:   10
Deque capacity: 16
Deque value:    {[101 102 103 104 105 106 107 108 109 110 0 0 0 0 0 0] 0 10 10 16}
&nbsp;
&nbsp;
&nbsp;
Pop value:      101
Deque length:   9
Deque capacity: 16
Deque value:    {[0 102 103 104 105 106 107 108 109 110 0 0 0 0 0 0] 1 10 9 16}
&nbsp;
Pop value:      102
Deque length:   8
Deque capacity: 16
Deque value:    {[0 0 103 104 105 106 107 108 109 110 0 0 0 0 0 0] 2 10 8 16}
&nbsp;
Pop value:      103
Deque length:   7
Deque capacity: 16
Deque value:    {[0 0 0 104 105 106 107 108 109 110 0 0 0 0 0 0] 3 10 7 16}
&nbsp;
Pop value:      104
Deque length:   6
Deque capacity: 16
Deque value:    {[0 0 0 0 105 106 107 108 109 110 0 0 0 0 0 0] 4 10 6 16}
&nbsp;
Pop value:      105
Deque length:   5
Deque capacity: 16
Deque value:    {[0 0 0 0 0 106 107 108 109 110 0 0 0 0 0 0] 5 10 5 16}
&nbsp;
Pop value:      106
Deque length:   4
Deque capacity: 16
Deque value:    {[0 0 0 0 0 0 107 108 109 110 0 0 0 0 0 0] 6 10 4 16}
&nbsp;
Pop value:      107
Deque length:   3
Deque capacity: 16
Deque value:    {[0 0 0 0 0 0 0 108 109 110 0 0 0 0 0 0] 7 10 3 16}
&nbsp;
Pop value:      108
Deque length:   2
Deque capacity: 16
Deque value:    {[0 0 0 0 0 0 0 0 109 110 0 0 0 0 0 0] 8 10 2 16}
&nbsp;
Pop value:      109
Deque length:   1
Deque capacity: 16
Deque value:    {[0 0 0 0 0 0 0 0 0 110 0 0 0 0 0 0] 9 10 1 16}
&nbsp;
Pop value:      110
Deque length:   0
Deque capacity: 16
Deque value:    {[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 10 10 0 16}
</pre>

<pre>
panic: deque: PopFront() called on empty queue
&nbsp;
goroutine 1 [running]:
github.com/gammazero/deque.(*Deque[...]).PopFront(0xc00000e018?)
        /home/ptisnovs/go/pkg/mod/github.com/gammazero/deque@v0.2.1/deque.go:110 +0x91
main.main()
        /home/ptisnovs/src/go-root/article_96/04_popfront_panic.go:23 +0x287
exit status 2
</pre>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        for i := 1; i &lt;= 10; i++ {
                <strong>q.PushBack(100 + i)</strong>
                fmt.Println("Deque length:  ", <strong>q.Len()</strong>)
                fmt.Println("Deque capacity:", <strong>q.Cap()</strong>)
                fmt.Println("Deque value:   ", <strong>q</strong>)
                fmt.Println()
        }
&nbsp;
        fmt.Println()
&nbsp;
        for q.Len() &gt; 0 {
                fmt.Println("Pop value:     ", <strong>q.PopFront()</strong>)
                fmt.Println("Deque length:  ", <strong>q.Len()</strong>)
                fmt.Println("Deque capacity:", <strong>q.Cap()</strong>)
                fmt.Println("Deque value:   ", <strong>q</strong>)
                fmt.Println()
        }
}
</pre>

<pre>
Deque length:   1
Deque capacity: 16
Deque value:    {[101 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 0 1 1 16}
&nbsp;
Deque length:   2
Deque capacity: 16
Deque value:    {[101 102 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 0 2 2 16}
&nbsp;
Deque length:   3
Deque capacity: 16
Deque value:    {[101 102 103 0 0 0 0 0 0 0 0 0 0 0 0 0] 0 3 3 16}
&nbsp;
Deque length:   4
Deque capacity: 16
Deque value:    {[101 102 103 104 0 0 0 0 0 0 0 0 0 0 0 0] 0 4 4 16}
&nbsp;
Deque length:   5
Deque capacity: 16
Deque value:    {[101 102 103 104 105 0 0 0 0 0 0 0 0 0 0 0] 0 5 5 16}
&nbsp;
Deque length:   6
Deque capacity: 16
Deque value:    {[101 102 103 104 105 106 0 0 0 0 0 0 0 0 0 0] 0 6 6 16}
&nbsp;
Deque length:   7
Deque capacity: 16
Deque value:    {[101 102 103 104 105 106 107 0 0 0 0 0 0 0 0 0] 0 7 7 16}
&nbsp;
Deque length:   8
Deque capacity: 16
Deque value:    {[101 102 103 104 105 106 107 108 0 0 0 0 0 0 0 0] 0 8 8 16}
&nbsp;
Deque length:   9
Deque capacity: 16
Deque value:    {[101 102 103 104 105 106 107 108 109 0 0 0 0 0 0 0] 0 9 9 16}
&nbsp;
Deque length:   10
Deque capacity: 16
Deque value:    {[101 102 103 104 105 106 107 108 109 110 0 0 0 0 0 0] 0 10 10 16}
&nbsp;
&nbsp;
&nbsp;
Pop value:      101
Deque length:   9
Deque capacity: 16
Deque value:    {[0 102 103 104 105 106 107 108 109 110 0 0 0 0 0 0] 1 10 9 16}
&nbsp;
Pop value:      102
Deque length:   8
Deque capacity: 16
Deque value:    {[0 0 103 104 105 106 107 108 109 110 0 0 0 0 0 0] 2 10 8 16}
&nbsp;
Pop value:      103
Deque length:   7
Deque capacity: 16
Deque value:    {[0 0 0 104 105 106 107 108 109 110 0 0 0 0 0 0] 3 10 7 16}
&nbsp;
Pop value:      104
Deque length:   6
Deque capacity: 16
Deque value:    {[0 0 0 0 105 106 107 108 109 110 0 0 0 0 0 0] 4 10 6 16}
&nbsp;
Pop value:      105
Deque length:   5
Deque capacity: 16
Deque value:    {[0 0 0 0 0 106 107 108 109 110 0 0 0 0 0 0] 5 10 5 16}
&nbsp;
Pop value:      106
Deque length:   4
Deque capacity: 16
Deque value:    {[0 0 0 0 0 0 107 108 109 110 0 0 0 0 0 0] 6 10 4 16}
&nbsp;
Pop value:      107
Deque length:   3
Deque capacity: 16
Deque value:    {[0 0 0 0 0 0 0 108 109 110 0 0 0 0 0 0] 7 10 3 16}
&nbsp;
Pop value:      108
Deque length:   2
Deque capacity: 16
Deque value:    {[0 0 0 0 0 0 0 0 109 110 0 0 0 0 0 0] 8 10 2 16}
&nbsp;
Pop value:      109
Deque length:   1
Deque capacity: 16
Deque value:    {[0 0 0 0 0 0 0 0 0 110 0 0 0 0 0 0] 9 10 1 16}
&nbsp;
Pop value:      110
Deque length:   0
Deque capacity: 16
Deque value:    {[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 10 10 0 16}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        for i := 1; i &lt;= 10; i++ {
                <strong>q.PushBack(100 + i*2)</strong>
                <strong>q.PushBack(101 + i*2)</strong>
                fmt.Println(<strong>q.PopFront()</strong>)
        }
&nbsp;
        for q.Len() &gt; 0 {
                fmt.Println(<strong>q.PopFront()</strong>)
        }
}
</pre>

<pre>
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
</pre>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        for i := 1; i &lt;= 10; i++ {
                <strong>q.PushFront(100 + i*2)</strong>
                <strong>q.PushFront(101 + i*2)</strong>
                fmt.Println(<strong>q.PopBack()</strong>)
        }
&nbsp;
        for q.Len() &gt; 0 {
                fmt.Println(<strong>q.PopBack()</strong>)
        }
}
</pre>

<pre>
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        for i := 1; i &lt;= 10; i++ {
                <strong>q.PushFront(100 + i)</strong>
        }
&nbsp;
        for q.Len() &gt; 0 {
                fmt.Println(<strong>q.PopFront()</strong>)
        }
}
</pre>

<pre>
110
109
108
107
106
105
104
103
102
101
</pre>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        for i := 1; i &lt;= 10; i++ {
                <strong>q.PushBack(100 + i)</strong>
        }
&nbsp;
        for q.Len() &gt; 0 {
                fmt.Println(<strong>q.PopBack()</strong>)
        }
}
</pre>

<pre>
110
109
108
107
106
105
104
103
102
101
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
package main

import (
        "fmt"

        "strconv"
        "strings"

        "github.com/gammazero/deque"
)

func printStack(s *deque.Deque[int]) {
        for i := 0; i &lt; <strong>s.Len()</strong>; i++ {
                fmt.Println(<strong>s.At(i)</strong>)
        }
        fmt.Println()
}

func main() {
        expression := "1 2 + 2 3 * 8 + *"
        terms := strings.Split(expression, " ")
        var stack deque.Deque[int]

        for _, term := range terms {
                switch term {
                case "+":
                        operand1 := stack.PopFront()
                        operand2 := stack.PopFront()
                        stack.PushFront(operand1 + operand2)
                        print("+ :\t")
                        printStack(&stack)
                case "-":
                        operand1 := stack.PopFront()
                        operand2 := stack.PopFront()
                        stack.PushFront(operand2 - operand1)
                        print("- :\t")
                        printStack(&stack)
                case "*":
                        operand1 := stack.PopFront()
                        operand2 := stack.PopFront()
                        stack.PushFront(operand1 * operand2)
                        print("* :\t")
                        printStack(&stack)
                case "/":
                        operand1 := stack.PopFront()
                        operand2 := stack.PopFront()
                        stack.PushFront(operand2 / operand1)
                        print("/ :\t")
                        printStack(&stack)
                default:
                        number, err := strconv.Atoi(term)
                        if err == nil {
                                stack.PushFront(number)
                        }
                        fmt.Printf("%-2d:\t", number)
                        printStack(&stack)
                }
        }
        print("Result: ")
        printStack(&stack)
}
</pre>

<pre>
1 :     1

2 :     2
1

+ :     3

2 :     2
3

3 :     3
2
3

* :     6
3

8 :     8
6
3

+ :     14
3

* :     42

Result: 42
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
package main

import (
        "fmt"

        "github.com/gammazero/deque"
)

func main() {
        <strong>var q deque.Deque[int]</strong>

        for i := 1; i &lt;= 10; i++ {
                q.PushBack(100 + i)
        }

        q.Rotate(3)

        for q.Len() &gt; 0 {
                fmt.Println(q.PopFront())
        }
}
</pre>

<pre>
104
105
106
107
108
109
110
101
102
103
</pre>

<pre>
package main

import (
        "fmt"

        "github.com/gammazero/deque"
)

func main() {
        <strong>var q deque.Deque[int]</strong>

        for i := 1; i &lt;= 10; i++ {
                q.PushBack(100 + i)
        }

        q.Rotate(-3)

        for q.Len() &gt; 0 {
                fmt.Println(q.PopFront())
        }
}
</pre>

<pre>
108
109
110
101
102
103
104
105
106
107
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
package main

import (
        "testing"

        "github.com/gammazero/deque"
)

func BenchmarkPushFrontInt(b *testing.B) {
        var q deque.Deque[int]

        for i := 0; i < b.N; i++ {
                q.PushFront(i)
        }
}

func BenchmarkPushBackInt(b *testing.B) {
        var q deque.Deque[int]

        for i := 0; i < b.N; i++ {
                q.PushBack(i)
        }
}

func fillInDequeFromBack(b *testing.B) deque.Deque[int] {
        var q deque.Deque[int]

        b.StopTimer()

        for i := 0; i < b.N; i++ {
                q.PushBack(i)
        }

        b.StartTimer()
        return q
}

func fillInDequeFromFront(b *testing.B) deque.Deque[int] {
        var q deque.Deque[int]

        b.StopTimer()

        for i := 0; i < b.N; i++ {
                q.PushFront(i)
        }

        b.StartTimer()
        return q
}

func BenchmarkPopFrontInt(b *testing.B) {
        q := fillInDequeFromBack(b)

        for i := 0; i < b.N; i++ {
                val := q.PopFront()
                if val != i {
                        b.Fail()
                }
        }
}

func BenchmarkPopBackInt(b *testing.B) {
        q := fillInDequeFromFront(b)

        for i := 0; i < b.N; i++ {
                val := q.PopBack()
                if val != i {
                        b.Fail()
                }
        }
}

func BenchmarkFrontInt(b *testing.B) {
        q := fillInDequeFromBack(b)

        b.StopTimer()
        for i := 0; i < b.N; i++ {
                q.PushBack(i)
        }

        b.StartTimer()
        for i := 0; i < b.N; i++ {
                val := q.Front()
                if val != 0 {
                        b.Fail()
                }
        }
}

func BenchmarkBackInt(b *testing.B) {
        q := fillInDequeFromFront(b)

        for i := 0; i < b.N; i++ {
                val := q.Back()
                if val != 0 {
                        b.Fail()
                }
        }
}

func BenchmarkRotateInt(b *testing.B) {
        q := fillInDequeFromFront(b)

        for i := 0; i < b.N; i++ {
                q.Rotate(1)
        }
}

func BenchmarkAtInt(b *testing.B) {
        q := fillInDequeFromFront(b)

        for i := 0; i < b.N; i++ {
                // at from the middle
                val := q.At(q.Len() / 2)
                if val < 0 || val > b.N {
                        b.Fail()
                }
        }
}

func BenchmarkInsertInt(b *testing.B) {
        q := fillInDequeFromFront(b)

        for i := 0; i < b.N; i++ {
                // insert in the middle
                q.Insert(q.Len()/2, i)
        }
}

func BenchmarkRemoveInt(b *testing.B) {
        q := fillInDequeFromFront(b)

        for i := 0; i < b.N; i++ {
                // remove from the middle
                q.Remove(q.Len() / 2)
        }
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
goos: linux
goarch: amd64
pkg: deque-demos
cpu: Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz
BenchmarkPushFrontInt-8               10                92.70 ns/op
BenchmarkPushBackInt-8                10                81.10 ns/op
BenchmarkPopFrontInt-8                10                43.20 ns/op
BenchmarkPopBackInt-8                 10                53.50 ns/op
BenchmarkFrontInt-8                   10                40.10 ns/op
BenchmarkBackInt-8                    10                31.10 ns/op
BenchmarkRotateInt-8                  10                51.60 ns/op
BenchmarkAtInt-8                      10                46.40 ns/op
BenchmarkInsertInt-8                  10                87.30 ns/op
BenchmarkRemoveInt-8                  10                65.80 ns/op
PASS
ok      deque-demos     0.005s
</pre>

<pre>
goos: linux
goarch: amd64
pkg: deque-demos
cpu: Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz
BenchmarkPushFrontInt-8              100                66.15 ns/op
BenchmarkPushBackInt-8               100                43.84 ns/op
BenchmarkPopFrontInt-8               100                14.24 ns/op
BenchmarkPopBackInt-8                100                20.21 ns/op
BenchmarkFrontInt-8                  100                 5.85 ns/op
BenchmarkBackInt-8                   100                 5.13 ns/op
BenchmarkRotateInt-8                 100                21.99 ns/op
BenchmarkAtInt-8                     100                 6.80 ns/op
BenchmarkInsertInt-8                 100               147.80 ns/op
BenchmarkRemoveInt-8                 100                66.56 ns/op
PASS
ok      deque-demos     0.006s
</pre>

<pre>
goos: linux
goarch: amd64
pkg: deque-demos
cpu: Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz
BenchmarkPushFrontInt-8             1000                16.40 ns/op
BenchmarkPushBackInt-8              1000                12.02 ns/op
BenchmarkPopFrontInt-8              1000                11.80 ns/op
BenchmarkPopBackInt-8               1000                 7.21 ns/op
BenchmarkFrontInt-8                 1000                 1.78 ns/op
BenchmarkBackInt-8                  1000                 1.44 ns/op
BenchmarkRotateInt-8                1000                13.70 ns/op
BenchmarkAtInt-8                    1000                 2.89 ns/op
BenchmarkInsertInt-8                1000               877.20 ns/op
BenchmarkRemoveInt-8                1000               308.60 ns/op
PASS
ok      deque-demos     0.007s
</pre>

<pre>
goos: linux
goarch: amd64
pkg: deque-demos
cpu: Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz
BenchmarkPushFrontInt-8            10000                10.06 ns/op
BenchmarkPushBackInt-8             10000                10.92 ns/op
BenchmarkPopFrontInt-8             10000                 9.03 ns/op
BenchmarkPopBackInt-8              10000                 5.84 ns/op
BenchmarkFrontInt-8                10000                 1.25 ns/op
BenchmarkBackInt-8                 10000                 0.99 ns/op
BenchmarkRotateInt-8               10000                12.16 ns/op
BenchmarkAtInt-8                   10000                 4.35 ns/op
BenchmarkInsertInt-8               10000              7958.00 ns/op
BenchmarkRemoveInt-8               10000              2610.00 ns/op
PASS
ok      deque-demos     0.113s
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
goos: linux
goarch: amd64
pkg: deque-demos
cpu: Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz
BenchmarkPushFrontInt-8           100000                 7.84 ns/op
BenchmarkPushBackInt-8            100000                12.54 ns/op
BenchmarkPopFrontInt-8            100000                 5.33 ns/op
BenchmarkPopBackInt-8             100000                 6.80 ns/op
BenchmarkFrontInt-8               100000                 0.72 ns/op
BenchmarkBackInt-8                100000                 0.95 ns/op
BenchmarkRotateInt-8              100000                12.68 ns/op
BenchmarkAtInt-8                  100000                 2.39 ns/op
BenchmarkInsertInt-8              100000             88824.00 ns/op
BenchmarkRemoveInt-8              100000             29699.00 ns/op
PASS
ok      deque-demos     11.871s
</pre>

<pre>
goos: linux
goarch: amd64
pkg: deque-demos
cpu: Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz
BenchmarkPushFrontInt-8           200000                11.74 ns/op
BenchmarkPushBackInt-8            200000                11.13 ns/op
BenchmarkPopFrontInt-8            200000                 6.59 ns/op
BenchmarkPopBackInt-8             200000                 7.98 ns/op
BenchmarkFrontInt-8               200000                 0.75 ns/op
BenchmarkBackInt-8                200000                 0.95 ns/op
BenchmarkRotateInt-8              200000                14.86 ns/op
BenchmarkAtInt-8                  200000                 2.75 ns/op
BenchmarkInsertInt-8              200000            189081.00 ns/op
BenchmarkRemoveInt-8              200000             67279.00 ns/op
PASS
ok      deque-demos     51.330s
</pre>

<pre>
goos: linux
goarch: amd64
pkg: deque-demos
cpu: Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz
BenchmarkPushFrontInt-8           300000                10.45 ns/op
BenchmarkPushBackInt-8            300000                11.11 ns/op
BenchmarkPopFrontInt-8            300000                 6.45 ns/op
BenchmarkPopBackInt-8             300000                 6.12 ns/op
BenchmarkFrontInt-8               300000                 0.71 ns/op
BenchmarkBackInt-8                300000                 1.02 ns/op
BenchmarkRotateInt-8              300000                12.27 ns/op
BenchmarkAtInt-8                  300000                 2.44 ns/op
BenchmarkInsertInt-8              300000            309848.00 ns/op
BenchmarkRemoveInt-8              300000            103180.00 ns/op
PASS
ok      deque-demos     123.962s
</pre>

<pre>
goos: linux
goarch: amd64
pkg: deque-demos
cpu: Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz
BenchmarkPushFrontInt-8           400000                 9.02 ns/op
BenchmarkPushBackInt-8            400000                 9.71 ns/op
BenchmarkPopFrontInt-8            400000                 5.60 ns/op
BenchmarkPopBackInt-8             400000                 5.58 ns/op
BenchmarkFrontInt-8               400000                 0.71 ns/op
BenchmarkBackInt-8                400000                 0.95 ns/op
BenchmarkRotateInt-8              400000                12.24 ns/op
BenchmarkAtInt-8                  400000                 2.40 ns/op
BenchmarkInsertInt-8              400000            406410.00 ns/op
BenchmarkRemoveInt-8              400000            140504.00 ns/op
PASS
ok      deque-demos     218.827s
</pre>

<pre>
goos: linux
goarch: amd64
pkg: deque-demos
cpu: Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz
BenchmarkPushFrontInt-8           500000                 8.22 ns/op
BenchmarkPushBackInt-8            500000                 8.33 ns/op
BenchmarkPopFrontInt-8            500000                 5.26 ns/op
BenchmarkPopBackInt-8             500000                 5.20 ns/op
BenchmarkFrontInt-8               500000                 0.81 ns/op
BenchmarkBackInt-8                500000                 0.95 ns/op
BenchmarkRotateInt-8              500000                12.34 ns/op
BenchmarkAtInt-8                  500000                 2.39 ns/op
BenchmarkInsertInt-8              500000            502974.00 ns/op
BenchmarkRemoveInt-8              500000            174666.00 ns/op
PASS
ok      deque-demos     338.897s
</pre>

<p></p>

<pre>
Benchmark,    10x,  100x,  1000x,  10000x, 100000x,  200000x,  300000x,  400000x,  500000x
PushFrontInt, 92.70, 66.15, 16.40,  10.06,    7.84,    11.74,    10.45,     9.02,     8.22
PushBackInt,  81.10, 43.84, 12.02,  10.92,   12.54,    11.13,    11.11,     9.71,     8.33
PopFrontInt,  43.20, 14.24, 11.80,   9.03,    5.33,     6.59,     6.45,     5.60,     5.26
PopBackInt,   53.50, 20.21,  7.21,   5.84,    6.80,     7.98,     6.12,     5.58,     5.20
FrontInt,     40.10,  5.85,  1.78,   1.25,    0.72,     0.75,     0.71,     0.71,     0.81
BackInt,      31.10,  5.13,  1.43,   0.99,    0.95,     0.95,     1.02,     0.95,     0.95
RotateInt,    51.60, 21.99, 13.70,  12.16,   12.68,    14.86,    12.27,    12.24,    12.34
AtInt,        46.40,  6.80,  2.88,   4.35,    2.39,     2.75,     2.44,     2.40,     2.39
InsertInt,    87.30,147.80,877.20,7958.00,88824.00,189081.00,309848.00,406410.00,502974.00
RemoveInt,    65.80, 66.56,308.60,2610.00,29699.00, 67279.00,103180.00,140504.00,174666.00
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_empty_deque.go</td><td>vytvoření prázdné obousměrné fronty</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/01_empty_deque.go">https://github.com/tisnik/go-root/blob/master/article_96/01_empty_deque.go</a></td></tr>
<tr><td> 2</td><td>02_pushback.go</td><td>obousměrná fronta a operace typu <strong>push back</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/02_pushback.go">https://github.com/tisnik/go-root/blob/master/article_96/02_pushback.go</a></td></tr>
<tr><td> 3</td><td>03_length_capacity.go</td><td>závislost délky a kapacity obousměrné fronty</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/03_length_capacity.go">https://github.com/tisnik/go-root/blob/master/article_96/03_length_capacity.go</a></td></tr>
<tr><td> 4</td><td>04_popfront_panic.go</td><td>operace <strong>pop front</strong> bez testu, zda je fronta prázdná</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/04_popfront_panic.go">https://github.com/tisnik/go-root/blob/master/article_96/04_popfront_panic.go</a></td></tr>
<tr><td> 5</td><td>05_popfront.go</td><td>operace <strong>pop front</strong> s&nbsp;testem, zda je fronta prázdná</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/05_popfront.go">https://github.com/tisnik/go-root/blob/master/article_96/05_popfront.go</a></td></tr>
<tr><td> 6</td><td>06_as_queue_1.go</td><td>obousměrná fronta použitá jako klasická fronta</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/06_as_queue_1.go">https://github.com/tisnik/go-root/blob/master/article_96/06_as_queue_1.go</a></td></tr>
<tr><td> 7</td><td>07_as_queue_2.go</td><td>obousměrná fronta použitá jako klasická fronta</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/07_as_queue_2.go">https://github.com/tisnik/go-root/blob/master/article_96/07_as_queue_2.go</a></td></tr>
<tr><td> 8</td><td>08_as_stack_1.go</td><td>obousměrná fronta použitá jako klasický zásobník</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/08_as_stack_1.go">https://github.com/tisnik/go-root/blob/master/article_96/08_as_stack_1.go</a></td></tr>
<tr><td> 9</td><td>09_as_stack_2.go</td><td>obousměrná fronta použitá jako klasický zásobník</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/09_as_stack_2.go">https://github.com/tisnik/go-root/blob/master/article_96/09_as_stack_2.go</a></td></tr>
<tr><td>10</td><td>10_stack_rpn.go</td><td>vyhodnocení RPN výrazů s&nbsp;využitím deque ve funkci zásobníku</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/10_stack_rpn.go">https://github.com/tisnik/go-root/blob/master/article_96/10_stack_rpn.go</a></td></tr>
<tr><td>11</td><td>11_rotate.go</td><td>obousměrná fronta a operace <strong>rotate</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/11_rotate.go">https://github.com/tisnik/go-root/blob/master/article_96/11_rotate.go</a></td></tr>
<tr><td>12</td><td>12_rotate.go</td><td>obousměrná fronta a operace <strong>rotate</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/12_rotate.go">https://github.com/tisnik/go-root/blob/master/article_96/12_rotate.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Double-ended queue<br />
<a href="https://en.wikipedia.org/wiki/Double-ended_queue">https://en.wikipedia.org/wiki/Double-ended_queue</a>
</li>

<li>Deque package reference doc<br />
<a href="https://pkg.go.dev/github.com/gammazero/deque">https://pkg.go.dev/github.com/gammazero/deque</a>
</li>

<li>Fast ring-buffer deque (double-ended queue) implementation.<br />
<a href="https://github.com/gammazero/deque">https://github.com/gammazero/deque</a>
</li>

<li>Highly optimized double-ended queue<br />
<a href="https://github.com/edwingeng/deque/tree/master/v2">https://github.com/edwingeng/deque/tree/master/v2</a>
</li>

<li>Genfuncs &ndash; implements various functions utilizing Go's Generics to help avoid writing boilerplate code<br />
<a href="https://github.com/nwillc/genfuncs">https://github.com/nwillc/genfuncs</a>
</li>

<li>Go18DS (Go 1.18+ Data Structures)<br />
<a href="https://github.com/daichi-m/go18ds">https://github.com/daichi-m/go18ds</a>
</li>

<li>TreeMap v2<br />
<a href="https://github.com/igrmk/treemap">https://github.com/igrmk/treemap</a>
</li>

<li>Fp-go is a collection of Functional Programming helpers powered by Golang 1.18+ generics<br />
<a href="https://github.com/repeale/fp-go">https://github.com/repeale/fp-go</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://go.dev/ref/spec">https://go.dev/ref/spec</a>
</li>

<li>Generics in Go<br />
<a href="https://bitfieldconsulting.com/golang/generics">https://bitfieldconsulting.com/golang/generics</a>
</li>

<li>Tutorial: Getting started with generics<br />
<a href="https://go.dev/doc/tutorial/generics">https://go.dev/doc/tutorial/generics</a>
</li>

<li>Type parameters in Go<br />
<a href="https://bitfieldconsulting.com/golang/type-parameters">https://bitfieldconsulting.com/golang/type-parameters</a>
</li>

<li>Go Data Structures: Binary Search Tree<br />
<a href="https://flaviocopes.com/golang-data-structure-binary-search-tree/">https://flaviocopes.com/golang-data-structure-binary-search-tree/</a>
</li>

<li>Gobs of data<br />
<a href="https://blog.golang.org/gobs-of-data">https://blog.golang.org/gobs-of-data</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Go 1.18 Release Notes<br />
<a href="https://golang.org/doc/go1.18">https://golang.org/doc/go1.18</a>
</li>

<li>Go 1.17 Release Notes<br />
<a href="https://golang.org/doc/go1.17">https://golang.org/doc/go1.17</a>
</li>

<li>Go 1.16 Release Notes<br />
<a href="https://golang.org/doc/go1.16">https://golang.org/doc/go1.16</a>
</li>

<li>Go 1.15 Release Notes<br />
<a href="https://golang.org/doc/go1.15">https://golang.org/doc/go1.15</a>
</li>

<li>Go 1.14 Release Notes<br />
<a href="https://golang.org/doc/go1.14">https://golang.org/doc/go1.14</a>
</li>

<li>Go 1.13 Release Notes<br />
<a href="https://golang.org/doc/go1.13">https://golang.org/doc/go1.13</a>
</li>

<li>Go 1.12 Release Notes<br />
<a href="https://golang.org/doc/go1.12">https://golang.org/doc/go1.12</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>A Proposal for Adding Generics to Go<br />
<a href="https://go.dev/blog/generics-proposal">https://go.dev/blog/generics-proposal</a>
</li>

<li>Proposal: Go should have generics<br />
<a href="https://github.com/golang/proposal/blob/master/design/15292-generics.md">https://github.com/golang/proposal/blob/master/design/15292-generics.md</a>
</li>

<li>Know Go: Generics (Kniha)<br />
<a href="https://bitfieldconsulting.com/books/generics">https://bitfieldconsulting.com/books/generics</a>
</li>

<li>Go 1.18 Generics based slice package<br />
<a href="https://golangexample.com/go-1-18-generics-based-slice-package/">https://golangexample.com/go-1-18-generics-based-slice-package/</a>
</li>

<li>The missing slice package<br />
<a href="https://github.com/ssoroka/slice">https://github.com/ssoroka/slice</a>
</li>

<li>Dlouho očekávaná novinka v Go 1.18 – generické datové typy<br />
<a href="https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-18-genericke-datove-typy/">https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-18-genericke-datove-typy/</a>
</li>

<li>Dlouho očekávaná novinka v Go 1.18 – generické datové typy (dokončení)<br />
<a href="https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-8-genericke-datove-typy-dokonceni/">https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-8-genericke-datove-typy-dokonceni/</a>
</li>

<li>Generické datové typy v jazyce Go?<br />
<a href="https://www.root.cz/clanky/genericke-datove-typy-v-jazyce-go/">https://www.root.cz/clanky/genericke-datove-typy-v-jazyce-go/</a>
</li>

<li>GoDS (Go Data Structures)<br />
<a href="https://github.com/emirpasic/gods">https://github.com/emirpasic/gods</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

