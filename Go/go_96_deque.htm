<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
</pre>

<pre>
$ <strong>go get -v github.com/gammazero/deque</strong>
&nbsp;
go: downloading github.com/gammazero/deque v0.2.1
go: added github.com/gammazero/deque v0.2.1
</pre>

<pre>
</pre>

<pre>
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<p></p>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        fmt.Println("Deque length:  ", <strong>q.Len()</strong>)
        fmt.Println("Deque capacity:", <strong>q.Cap()</strong>)
        fmt.Println("Deque value:   ", <strong>q</strong>)
}
</pre>

<p></p>

<pre>
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p></p>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        for i := 1; i &lt;= 10; i++ {
                q.PushBack(100 + i)
                fmt.Println("Deque length:  ", q.Len())
                fmt.Println("Deque capacity:", q.Cap())
                fmt.Println("Deque value:   ", q)
                fmt.Println()
        }
}
</pre>

<p></p>

<pre>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        fmt.Println("Length Capacity")
        for i := 1; i &lt;= 1000; i++ {
                q.PushBack(i)
                fmt.Printf("%5d %5d\n", q.Len(), q.Cap())
        }
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        for i := 1; i &lt;= 10; i++ {
                q.PushBack(100 + i)
                fmt.Println("Deque length:  ", q.Len())
                fmt.Println("Deque capacity:", q.Cap())
                fmt.Println("Deque value:   ", q)
                fmt.Println()
        }
&nbsp;
        fmt.Println()
&nbsp;
        for true {
                fmt.Println("Pop value:     ", q.PopFront())
                fmt.Println("Deque length:  ", q.Len())
                fmt.Println("Deque capacity:", q.Cap())
                fmt.Println("Deque value:   ", q)
                fmt.Println()
        }
}
</pre>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        for i := 1; i &lt;= 10; i++ {
                q.PushBack(100 + i)
                fmt.Println("Deque length:  ", q.Len())
                fmt.Println("Deque capacity:", q.Cap())
                fmt.Println("Deque value:   ", q)
                fmt.Println()
        }
&nbsp;
        fmt.Println()
&nbsp;
        for q.Len() &gt; 0 {
                fmt.Println("Pop value:     ", q.PopFront())
                fmt.Println("Deque length:  ", q.Len())
                fmt.Println("Deque capacity:", q.Cap())
                fmt.Println("Deque value:   ", q)
                fmt.Println()
        }
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        for i := 1; i &lt;= 10; i++ {
                q.PushBack(100 + i*2)
                q.PushBack(101 + i*2)
                fmt.Println(q.PopFront())
        }
&nbsp;
        for q.Len() &gt; 0 {
                fmt.Println(q.PopFront())
        }
}
</pre>

<pre>
package main
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/gammazero/deque"
)
&nbsp;
func main() {
        <strong>var q deque.Deque[int]</strong>
&nbsp;
        for i := 1; i &lt;= 10; i++ {
                q.PushFront(100 + i*2)
                q.PushFront(101 + i*2)
                fmt.Println(q.PopBack())
        }
&nbsp;
        for q.Len() &gt; 0 {
                fmt.Println(q.PopBack())
        }
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
package main

import (
        "fmt"

        "github.com/gammazero/deque"
)

func main() {
        <strong>var q deque.Deque[int]</strong>

        for i := 1; i &lt;= 10; i++ {
                q.PushFront(100 + i)
        }

        for q.Len() &gt; 0 {
                fmt.Println(q.PopFront())
        }
}
</pre>

<pre>
package main

import (
        "fmt"

        "github.com/gammazero/deque"
)

func main() {
        <strong>var q deque.Deque[int]</strong>

        for i := 1; i &lt;= 10; i++ {
                q.PushBack(100 + i)
        }

        for q.Len() &gt; 0 {
                fmt.Println(q.PopBack())
        }
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
package main

import (
        "fmt"

        "strconv"
        "strings"

        "github.com/gammazero/deque"
)

func printStack(s *deque.Deque[int]) {
        for i := 0; i < s.Len(); i++ {
                fmt.Println(s.At(i))
        }
        fmt.Println()
}

func main() {
        expression := "1 2 + 2 3 * 8 + *"
        terms := strings.Split(expression, " ")
        var stack deque.Deque[int]

        for _, term := range terms {
                switch term {
                case "+":
                        operand1 := stack.PopFront()
                        operand2 := stack.PopFront()
                        stack.PushFront(operand1 + operand2)
                        print("+ :\t")
                        printStack(&stack)
                case "-":
                        operand1 := stack.PopFront()
                        operand2 := stack.PopFront()
                        stack.PushFront(operand2 - operand1)
                        print("- :\t")
                        printStack(&stack)
                case "*":
                        operand1 := stack.PopFront()
                        operand2 := stack.PopFront()
                        stack.PushFront(operand1 * operand2)
                        print("* :\t")
                        printStack(&stack)
                case "/":
                        operand1 := stack.PopFront()
                        operand2 := stack.PopFront()
                        stack.PushFront(operand2 / operand1)
                        print("/ :\t")
                        printStack(&stack)
                default:
                        number, err := strconv.Atoi(term)
                        if err == nil {
                                stack.PushFront(number)
                        }
                        fmt.Printf("%-2d:\t", number)
                        printStack(&stack)
                }
        }
        print("Result: ")
        printStack(&stack)
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
package main

import (
        "fmt"

        "github.com/gammazero/deque"
)

func main() {
        <strong>var q deque.Deque[int]</strong>

        for i := 1; i &lt;= 10; i++ {
                q.PushBack(100 + i)
        }

        q.Rotate(3)

        for q.Len() &gt; 0 {
                fmt.Println(q.PopFront())
        }
}
</pre>

<pre>
package main

import (
        "fmt"

        "github.com/gammazero/deque"
)

func main() {
        <strong>var q deque.Deque[int]</strong>

        for i := 1; i &lt;= 10; i++ {
                q.PushBack(100 + i)
        }

        q.Rotate(-3)

        for q.Len() &gt; 0 {
                fmt.Println(q.PopFront())
        }
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_empty_deque.go</td><td>vytvoření prázdné obousměrné fronty</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/01_empty_deque.go">https://github.com/tisnik/go-root/blob/master/article_96/01_empty_deque.go</a></td></tr>
<tr><td> 2</td><td>02_pushback.go</td><td>obousměrná fronta a operace typu <strong>push back</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/02_pushback.go">https://github.com/tisnik/go-root/blob/master/article_96/02_pushback.go</a></td></tr>
<tr><td> 3</td><td>03_length_capacity.go</td><td>závislost délky a kapacity obousměrné fronty</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/03_length_capacity.go">https://github.com/tisnik/go-root/blob/master/article_96/03_length_capacity.go</a></td></tr>
<tr><td> 4</td><td>04_popfront_panic.go</td><td>operace <strong>pop front</strong> bez testu, zda je fronta prázdná</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/04_popfront_panic.go">https://github.com/tisnik/go-root/blob/master/article_96/04_popfront_panic.go</a></td></tr>
<tr><td> 5</td><td>05_popfront.go</td><td>operace <strong>pop front</strong> s&nbsp;testem, zda je fronta prázdná</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/05_popfront.go">https://github.com/tisnik/go-root/blob/master/article_96/05_popfront.go</a></td></tr>
<tr><td> 6</td><td>06_as_queue_1.go</td><td>obousměrná fronta použitá jako klasická fronta</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/06_as_queue_1.go">https://github.com/tisnik/go-root/blob/master/article_96/06_as_queue_1.go</a></td></tr>
<tr><td> 7</td><td>07_as_queue_2.go</td><td>obousměrná fronta použitá jako klasická fronta</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/07_as_queue_2.go">https://github.com/tisnik/go-root/blob/master/article_96/07_as_queue_2.go</a></td></tr>
<tr><td> 8</td><td>08_as_stack_1.go</td><td>obousměrná fronta použitá jako klasický zásobník</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/08_as_stack_1.go">https://github.com/tisnik/go-root/blob/master/article_96/08_as_stack_1.go</a></td></tr>
<tr><td> 9</td><td>09_as_stack_2.go</td><td>obousměrná fronta použitá jako klasický zásobník</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/09_as_stack_2.go">https://github.com/tisnik/go-root/blob/master/article_96/09_as_stack_2.go</a></td></tr>
<tr><td>10</td><td>10_stack_rpn.go</td><td>vyhodnocení RPN výrazů s&nbsp;využitím deque ve funkci zásobníku</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/10_stack_rpn.go">https://github.com/tisnik/go-root/blob/master/article_96/10_stack_rpn.go</a></td></tr>
<tr><td>11</td><td>11_rotate.go</td><td>obousměrná fronta a operace <strong>rotate</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/11_rotate.go">https://github.com/tisnik/go-root/blob/master/article_96/11_rotate.go</a></td></tr>
<tr><td>12</td><td>12_rotate.go</td><td>obousměrná fronta a operace <strong>rotate</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_96/12_rotate.go">https://github.com/tisnik/go-root/blob/master/article_96/12_rotate.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Double-ended queue<br />
<a href="https://en.wikipedia.org/wiki/Double-ended_queue">https://en.wikipedia.org/wiki/Double-ended_queue</a>
</li>

<li>Deque package reference doc<br />
<a href="https://pkg.go.dev/github.com/gammazero/deque">https://pkg.go.dev/github.com/gammazero/deque</a>
</li>

<li>Fast ring-buffer deque (double-ended queue) implementation.<br />
<a href="https://github.com/gammazero/deque">https://github.com/gammazero/deque</a>
</li>

<li>Highly optimized double-ended queue<br />
<a href="https://github.com/edwingeng/deque/tree/master/v2">https://github.com/edwingeng/deque/tree/master/v2</a>
</li>

<li>Genfuncs &ndash; implements various functions utilizing Go's Generics to help avoid writing boilerplate code<br />
<a href="https://github.com/nwillc/genfuncs">https://github.com/nwillc/genfuncs</a>
</li>

<li>Go18DS (Go 1.18+ Data Structures)<br />
<a href="https://github.com/daichi-m/go18ds">https://github.com/daichi-m/go18ds</a>
</li>

<li>TreeMap v2<br />
<a href="https://github.com/igrmk/treemap">https://github.com/igrmk/treemap</a>
</li>

<li>Fp-go is a collection of Functional Programming helpers powered by Golang 1.18+ generics<br />
<a href="https://github.com/repeale/fp-go">https://github.com/repeale/fp-go</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://go.dev/ref/spec">https://go.dev/ref/spec</a>
</li>

<li>Generics in Go<br />
<a href="https://bitfieldconsulting.com/golang/generics">https://bitfieldconsulting.com/golang/generics</a>
</li>

<li>Tutorial: Getting started with generics<br />
<a href="https://go.dev/doc/tutorial/generics">https://go.dev/doc/tutorial/generics</a>
</li>

<li>Type parameters in Go<br />
<a href="https://bitfieldconsulting.com/golang/type-parameters">https://bitfieldconsulting.com/golang/type-parameters</a>
</li>

<li>Go Data Structures: Binary Search Tree<br />
<a href="https://flaviocopes.com/golang-data-structure-binary-search-tree/">https://flaviocopes.com/golang-data-structure-binary-search-tree/</a>
</li>

<li>Gobs of data<br />
<a href="https://blog.golang.org/gobs-of-data">https://blog.golang.org/gobs-of-data</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Go 1.18 Release Notes<br />
<a href="https://golang.org/doc/go1.18">https://golang.org/doc/go1.18</a>
</li>

<li>Go 1.17 Release Notes<br />
<a href="https://golang.org/doc/go1.17">https://golang.org/doc/go1.17</a>
</li>

<li>Go 1.16 Release Notes<br />
<a href="https://golang.org/doc/go1.16">https://golang.org/doc/go1.16</a>
</li>

<li>Go 1.15 Release Notes<br />
<a href="https://golang.org/doc/go1.15">https://golang.org/doc/go1.15</a>
</li>

<li>Go 1.14 Release Notes<br />
<a href="https://golang.org/doc/go1.14">https://golang.org/doc/go1.14</a>
</li>

<li>Go 1.13 Release Notes<br />
<a href="https://golang.org/doc/go1.13">https://golang.org/doc/go1.13</a>
</li>

<li>Go 1.12 Release Notes<br />
<a href="https://golang.org/doc/go1.12">https://golang.org/doc/go1.12</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>A Proposal for Adding Generics to Go<br />
<a href="https://go.dev/blog/generics-proposal">https://go.dev/blog/generics-proposal</a>
</li>

<li>Proposal: Go should have generics<br />
<a href="https://github.com/golang/proposal/blob/master/design/15292-generics.md">https://github.com/golang/proposal/blob/master/design/15292-generics.md</a>
</li>

<li>Know Go: Generics (Kniha)<br />
<a href="https://bitfieldconsulting.com/books/generics">https://bitfieldconsulting.com/books/generics</a>
</li>

<li>Go 1.18 Generics based slice package<br />
<a href="https://golangexample.com/go-1-18-generics-based-slice-package/">https://golangexample.com/go-1-18-generics-based-slice-package/</a>
</li>

<li>The missing slice package<br />
<a href="https://github.com/ssoroka/slice">https://github.com/ssoroka/slice</a>
</li>

<li>Dlouho očekávaná novinka v Go 1.18 – generické datové typy<br />
<a href="https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-18-genericke-datove-typy/">https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-18-genericke-datove-typy/</a>
</li>

<li>Dlouho očekávaná novinka v Go 1.18 – generické datové typy (dokončení)<br />
<a href="https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-8-genericke-datove-typy-dokonceni/">https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-8-genericke-datove-typy-dokonceni/</a>
</li>

<li>Generické datové typy v jazyce Go?<br />
<a href="https://www.root.cz/clanky/genericke-datove-typy-v-jazyce-go/">https://www.root.cz/clanky/genericke-datove-typy-v-jazyce-go/</a>
</li>

<li>GoDS (Go Data Structures)<br />
<a href="https://github.com/emirpasic/gods">https://github.com/emirpasic/gods</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

