<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Go pro skalní céčkaře</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Go pro skalní céčkaře</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Tato část seriálu o programovacím jazyce Go je určena především těm vývojářům, kteří na Go přechází z&nbsp;programovacího jazyka C a potřebují v&nbsp;Go nalézt ekvivalentní datové typy, programové konstrukce a funkce ze základní knihovny.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Go pro skalní céčkaře</a></p>
<p><a href="#k02">2. Základní rozdíly v&nbsp;syntaxi jazyků Go a C i ve struktuře programů</a></p>
<p><a href="#k03">3. Klíčová slova programovacího jazyka Go</a></p>
<p><a href="#k04">4. Deklarace proměnných</a></p>
<p><a href="#k05">5. Základní datové typy</a></p>
<p><a href="#k06">6. Podmínky</a></p>
<p><a href="#k07">7. Zřetězené podmínky a jejich náhrada za <strong>switch</strong></a></p>
<p><a href="#k08">8. Programová smyčka typu <strong>while</strong></a></p>
<p><a href="#k09">9. Programová smyčka typu <strong>do-while</strong></a></p>
<p><a href="#k10">10. Počítaná programová smyčka typu <strong>for</strong>, více řídicích proměnných smyčky</a></p>
<p><a href="#k11">11. Programová smyčka s&nbsp;podmínkou uprostřed</a></p>
<p><a href="#k12">12. Konstrukce <strong>switch</strong></a></p>
<p><a href="#k13">13. Deklarace a volání funkcí</a></p>
<p><a href="#k14">14. Návratové hodnoty funkcí</a></p>
<p><a href="#k15">15. Funkce s&nbsp;proměnným počtem parametrů</a></p>
<p><a href="#k16">16. Konstanty</a></p>
<p><a href="#k17">17. Náhrada za výčtový typ</a></p>
<p><a href="#k18">18. Obsah následující části seriálu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Go pro skalní céčkaře</h2>

<p>Poměrně často se uvádí, že na programovací jazyk Go přechází vývojáři, kteří
používají programovací jazyk Python (což je téma popsané v&nbsp;knize [<a
href="https://golang-for-python-programmers.readthedocs.io/en/latest/">1</a>]).
To je na první pohled poněkud překvapivé zjištění, ovšem na druhou stranu se
niky těchto dvou programovacích jazyků skutečně částečně překrývají, a to
konkrétně u síťových a administrativních nástrojů. Přechod ke Go může pro nově
vyvíjené projekty z&nbsp;této oblasti přinášet některé výhody [<a
href="https://hackernoon.com/5-reasons-why-we-switched-from-python-to-go-4414d5f42690">2</a>]
[<a href="https://getstream.io/blog/switched-python-go/">3</a>]. Ovšem existuje
i velké množství vývojářů, kteří začínají Go používat i v&nbsp;těch oblastech,
ve kterých se již po několik desetiletí používají programovací jazyky C a C++.
Dnešní článek je zaměřen právě na céčkaře, protože se v&nbsp;něm snažím
upozornit na ty vlastnosti jazyka Go, které mohou být překvapující nebo odlišné
od toho, s&nbsp;čím se setkáme v&nbsp;céčku.</p>

<p><div class="rs-tip-major">Poznámka: hned na úvod je nutné poznamenat, že Go
není a ani nechce být plnohodnotnou náhradou programovacího jazyka C nebo
dokonce C++. Jazykem s&nbsp;těmito ambicemi <a
href="https://www.youtube.com/watch?v=l9hM0h6IQDo">je spíše Rust</a>, tedy za
předpokladu, že bude dostatečně stabilizován a bude vydán jeho standard
(ideálně v&nbsp;ISO nebo ANSI). Na celou problematiku se ale můžeme dívat
přesně naopak: C/C++ se mnohdy používají i v&nbsp;těch situacích, kdy by bylo
výhodnější nasadit Go.</div></p>

<p>V&nbsp;dalších kapitolách (i v&nbsp;navazující části tohoto seriálu) se
budeme zabývat především tím, jaké existují ekvivalentní náhrady původních
céčkových jazykových konstrukcí popř.&nbsp;funkcí ze standardní knihovny
v&nbsp;programovacím jazyce Go. To mj.&nbsp;znamená, že se nebudeme soustředit
na ty vlastnosti programovacího jazyka Go, které v&nbsp;klasickém C nemají
přímou obdobu. Jedná se například o gorutiny a kanály. Pro ty sice existují
v&nbsp;céčku příslušné knihovny (jimiž se taktéž budeme zabývat, ale až mnohem
později), ovšem přímé porovnání s&nbsp;konstrukcemi jazyka Go nebude
uvedeno.</p>

<p>Další informace o této problematice je možné najít na stránce <a
href="https://github.com/golang/go/wiki/GoForCPPProgrammers">GoForCPPProgrammers</a>,
stručné porovnání jednotlivých vlastností obou programovacích jazyků pak na
stránce <a href="http://hyperpolyglot.org/c">Hyperpolyglot: C, Go</a>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní rozdíly v&nbsp;syntaxi jazyků Go a C i ve struktuře programů</h2>

<p>Nejprve se podívejme na to, jak se liší základní struktura programů
vytvořených v&nbsp;programovacím jazyce Go a C. Nejjednodušší program, který po
svém spuštění pouze nastaví návratový kód a ihned skončí, vypadá v&nbsp;C
(konkrétně v&nbsp;ANSI C) takto:</p>

<pre>
int main(void)
{
    return 0;
}
</pre>

<p>V&nbsp;jazyku Go je struktura nepatrně odlišná. Především je nutné uvést
jméno balíčku pomocí deklarace <strong>package</strong>. Dále se funkce
<strong>main</strong> (jméno se nezměnilo) deklaruje s&nbsp;využitím klíčového
slova <strong>func</strong>, tato funkce nemá žádné parametry (ani
<strong>void</strong> &ndash; koncept <strong>void</strong> v&nbsp;Go ostatně
vůbec neexistuje) a ani návratovou hodnotu; tudíž se nemusí použít ani příkaz
<strong>return</strong>:</p>

<pre>
package main
&nbsp;
func main() {
}
</pre>

<p>Nepatrně složitější program typu &bdquo;Hello world&ldquo; již vyžaduje
použití knihovních funkcí, jejichž hlavičky se načtou příkazem preprocesoru
<strong>#include</strong> a o slinkování knihovny se musí postarat až linker.
V&nbsp;céčku se může jednat o funkci <strong>puts</strong>, příkaz pro její
zavolání povinně končí středníkem:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    puts("Hello world!");
    return 0;
}
</pre>

<p>V&nbsp;případě jazyka Go se namísto příkazu preprocesoru
<strong>#include</strong> používá deklarace <strong>import</strong> zajišťující
jak načtení funkcí, tak i jejich slinkování do výsledného spustitelného
souboru. Jméno volané funkce se zapisuje včetně jména balíčku a externě
viditelné funkce začínají velkým písmenem. Za příkazem pro volání funkce se
nemusí zapisovat středník (a ani to prakticky nikdo nedělá):</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        fmt.Println("Hello world!")
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Klíčová slova programovacího jazyka Go</h2>

<p>V&nbsp;programovacím jazyce Go existuje celkem 25 klíčových slov,
z&nbsp;nichž některé jsou odlišné od céčka. V&nbsp;praxi to znamená, že se při
přepisu některých programů z&nbsp;C do Go může narazit na identifikátory, které
je zapotřebí přejmenovat, protože není možné změnit význam klíčových slov
(pravděpodobně se bude jednat o slova <strong>map</strong> a
<strong>interface</strong>):</p>

<table>
<tr><td><a href="https://www.root.cz/clanky/konstrukce-pro-rizeni-behu-programu-v-jazyce-go#k16">break</a></td><td><a href="https://www.root.cz/clanky/konstrukce-pro-rizeni-behu-programu-v-jazyce-go#k07">default</a></td><td><a href="https://www.root.cz/clanky/go-minimalisticky-a-prekvapive-vykonny-programovaci-jazyk/#k15">func</a></td><td><a href="https://www.root.cz/clanky/programovaci-jazyk-go-dokonceni-popisu-vlastnosti-samotneho-jazyka#k07">interface</a></td><td><a href="https://www.root.cz/clanky/programovaci-jazyk-go-dokonceni-popisu-vlastnosti-samotneho-jazyka#k07">select</a></td></tr>
<tr><td><a href="https://www.root.cz/clanky/konstrukce-pro-rizeni-behu-programu-v-jazyce-go#k07">case</a></td><td><a href="https://www.root.cz/clanky/konstrukce-pro-rizeni-behu-programu-v-jazyce-go-dokonceni#k06">defer</a></td><td><a href="https://www.root.cz/clanky/rozhrani-metody-gorutiny-a-kanaly-v-programovacim-jazyku-go/#k13">go</a></td><td><a href="https://www.root.cz/clanky/datove-typy-v-programovacim-jazyku-go-2-cast#k07">map</a></td><td><a href="https://www.root.cz/clanky/datove-typy-v-programovacim-jazyku-go-2-cast#k04">struct</a></td></tr>
<tr><td><a href="https://www.root.cz/clanky/rozhrani-metody-gorutiny-a-kanaly-v-programovacim-jazyku-go/#k16">chan</a></td><td><a href="https://www.root.cz/clanky/konstrukce-pro-rizeni-behu-programu-v-jazyce-go#k05">else</a></td><td><a href="https://www.root.cz/clanky/konstrukce-pro-rizeni-behu-programu-v-jazyce-go#k18">goto</a></td><td><a href="#k03">package</a></td><td><a href="https://www.root.cz/clanky/konstrukce-pro-rizeni-behu-programu-v-jazyce-go#k07">switch</a></td></tr>
<tr><td><a href="https://www.root.cz/clanky/programovaci-jazyk-go-dokonceni-popisu-vlastnosti-samotneho-jazyka#k13">const</a></td><td><a href="https://www.root.cz/clanky/konstrukce-pro-rizeni-behu-programu-v-jazyce-go#k10">fallthrough</a></td><td><a href="https://www.root.cz/clanky/konstrukce-pro-rizeni-behu-programu-v-jazyce-go#k04">if</a></td><td><a href="https://www.root.cz/clanky/konstrukce-pro-rizeni-behu-programu-v-jazyce-go#k15">range</a></td><td><a href="https://www.root.cz/clanky/datove-typy-v-programovacim-jazyku-go-2-cast/#k02">type</a></td></tr>
<tr><td><a href="https://www.root.cz/clanky/konstrukce-pro-rizeni-behu-programu-v-jazyce-go#k16">continue</a></td><td><a href="https://www.root.cz/clanky/konstrukce-pro-rizeni-behu-programu-v-jazyce-go#k12">for</a></td><td><a href="#k04">import</a></td><td><a href="https://www.root.cz/clanky/konstrukce-pro-rizeni-behu-programu-v-jazyce-go#k02">return</a></td><td><a href="https://www.root.cz/clanky/go-minimalisticky-a-prekvapive-vykonny-programovaci-jazyk/#k18">var</a></td></tr>
</table>

<p>Kromě těchto klíčových slov se v&nbsp;Go setkáme s&nbsp;několika
identifikátory, které mají pevný význam. Typicky se jedná o konstanty,
v&nbsp;jednom případě o &bdquo;automaticky měněnou konstantu&ldquo; a o
pojmenování standardních datových typů. Jedná se o následující slova:</p>

<table>
<tr><th>Identifikátor</th><th>Typ</th><th>Stručný popis</th></tr>
<tr><td>true</td><td>konstanta</td><td>pravdivostní hodnota</td></tr>
<tr><td>false</td><td>konstanta</td><td>pravdivostní hodnota</td></tr>
<tr><td>iota</td><td>konstanta</td><td>celočíselný automaticky zvyšovaný čítač</td></tr>
<tr><td>nil</td><td>konstanta</td><td>prázdná hodnota, prázdné rozhraní</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>bool</td><td>datový typ</td><td>logický/pravdivostní typ</td></tr>
<tr><td>byte</td><td>datový typ</td><td>alias pro typ uint8</td></tr>
<tr><td>int</td><td>datový typ</td><td>odpovídá buď typu int32 nebo int64</td></tr>
<tr><td>int8</td><td>datový typ</td><td>osmibitové celé číslo se znaménkem</td></tr>
<tr><td>int16</td><td>datový typ</td><td>šestnáctibitové celé číslo se znaménkem</td></tr>
<tr><td>int32</td><td>datový typ</td><td>32bitové celé číslo se znaménkem</td></tr>
<tr><td>int64</td><td>datový typ</td><td>64bitové celé číslo se znaménkem</td></tr>
<tr><td>uint</td><td>datový typ</td><td>odpovídá buď typu uint32 nebo uint64</td></tr>
<tr><td>uint8</td><td>datový typ</td><td>osmibitové celé číslo bez znaménka</td></tr>
<tr><td>uint16</td><td>datový typ</td><td>16bitové celé číslo bez znaménka</td></tr>
<tr><td>uint32</td><td>datový typ</td><td>32bitové celé číslo bez znaménka</td></tr>
<tr><td>uint64</td><td>datový typ</td><td>64bitové celé číslo bez znaménka</td></tr>
<tr><td>float32</td><td>datový typ</td><td>číslo s jednoduchou přesností podle IEEE 754</td></tr>
<tr><td>float64</td><td>datový typ</td><td>číslo s dvojitou přesností podle IEEE 754</td></tr>
<tr><td>complex64</td><td>datový typ</td><td>dvojice hodnot s jednoduchou přesností</td></tr>
<tr><td>complex128</td><td>datový typ</td><td>dvojice hodnot s dvojitou přesností</td></tr>
<tr><td>error</td><td>datový typ</td><td>rozhraní s&nbsp;předpisem metody <strong>Error</strong></td></tr>
<tr><td>rune</td><td>datový typ</td><td>alias pro typ int32</td></tr>
<tr><td>string</td><td>datový typ</td><td></td></tr>
<tr><td>uintptr</td><td>datový typ</td><td>používáno pro uložení adresy (ukazatele)</td></tr>
</table>

<p>Tyto identifikátory je sice možné použít i v&nbsp;jiném kontextu, ovšem
silně nedoporučuji to dělat. Nicméně z&nbsp;hlediska překladače je následující
program zcela korektní (z&nbsp;ostatních hledisek se jedná o programátorskou
zvrhlost :-):</p>

<pre>
package main
&nbsp;
func main() {
        true := 42
        false := "foobarbaz"
        println(true)
        println(false)
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Deklarace proměnných</h2>

<p>Poměrně velké rozdíly mezi oběma jazyky nalezneme při deklaraci proměnných,
ať již se jedná o proměnné globální či lokální. V&nbsp;céčku existují poměrně
sofistikovaná (a pochopitelně jednoznačná) pravidla, kterými se deklarace
proměnných řídí, a to i v&nbsp;případě, že je typ proměnné netriviální &ndash;
ukazatel na funkci, pole ukazatelů, ukazatel na ukazatel atd, I přesto, že jsou
pravidla jednoznačná, nemusí být jejich zápis a čtení snadné:</p>

<pre>
int x;
unsigned char *y;
int a[10];
int *px;
int *py[10];
int (*pz)[10];
int *(*pw)[10];
float **m;
</pre>

<p>V&nbsp;programovacím jazyce Go se pravidla pro zápis deklarace proměnných do
značné míry zjednodušila, a to takovým způsobem, aby byla deklarace (relativně)
snadno čitelná zleva doprava (a to i v&nbsp;případě proměnných, jejichž
hodnotou může být funkce):</p>

<pre>
var x int
var x2 int = 1
var a [10]int
var px *int
var py *[10]int
var f1 func()
var f2 func(int, int) int
</pre>

<p><div class="rs-tip-major">Poznámka: použití klíčového slova
<strong>var</strong> není samoúčelné, podobně jako použití klíčového slova
<strong>func</strong> v&nbsp;deklaraci funkce. Díky tomu, že jakákoli deklarace
vždy začíná klíčovým slovem, je možné zjednodušit vlastní parser programovacího
jazyka Go a umožnit jeho snadnější zotavení z&nbsp;chyb.</div></p>

<p>Navíc se v&nbsp;jazyce Go objevuje i možnost deklarace proměnné s&nbsp;její
inicializací a automatickým odvozením jejího typu. Pro tento účel se používá
operátor <strong>:=</strong>, a to následujícím způsobem:</p>

<pre>
i := 10
f := 3.14
s := "foobar"
</pre>

<p><div class="rs-tip-major">Poznámka: tato velmi užitečná jazyková konstrukce
nemá v&nbsp;klasickém céčku obdobu, ovšem setkáme se s&nbsp;ní velice
často.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Základní datové typy</h2>

<p>Nabídka základních datových typů je jak v&nbsp;jazyku C, tak i v&nbsp;Go
poměrně rozsáhlá a do značné míry shodná, ovšem v&nbsp;Go je (především u
celočíselných datových typů) přesně definována bitová šířka většiny typů a tím
pádem i rozsah povolených hodnot. V&nbsp;C tomu tak u obecných datových typů
<strong>int</strong>, <strong>long</strong>, <strong>float</strong> atd.
z&nbsp;dobrých důvodů není, a to mj.&nbsp;i z&nbsp;toho důvodu, že je tento
jazyk používán na mnohdy dosti &bdquo;obskurních&ldquo; platformách typu DSP se
šířkou datové sběrnice a aritmeticko-logické jednotky 20 bitů (někdy navíc
s&nbsp;21bitovým mezivýsledkem). </p>

<p>V&nbsp;následující tabulce jsou uvedeny ekvivalentní či většinou
ekvivalentní datové typy mezi C99 a Go (blíže viz <a
href="https://en.cppreference.com/w/c/types/integer">https://en.cppreference.com/w/c/types/integer</a>):</p>

<table>
<tr><th>Typ v C99</th><th>Typ v Go</th></tr>
<tr><td>_Bool/bool</td><td>bool</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>signed char</td><td>int8 (ovšem klasické znaky jsou <strong>rune</strong>)</td></tr>
<tr><td>unsigned char</td><td>uint8</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>int8_t</td><td>int8</td></tr>
<tr><td>int16_t</td><td>int16</td></tr>
<tr><td>int32_t</td><td>int32</td></tr>
<tr><td>int64_t</td><td>int64</td></tr>
<tr><td>intptr_t</td><td>uintptr (viz níže)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>uint8_t</td><td>uint8</td></tr>
<tr><td>uint16_t</td><td>uint16</td></tr>
<tr><td>uint32_t</td><td>uint32</td></tr>
<tr><td>uint64_t</td><td>uint64</td></tr>
<tr><td>uintptr_t</td><td>uintptr</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>float</td><td>float32 (platí na většině platforem)</td></tr>
<tr><td>double</td><td>float64 (platí na většině platforem)</td></tr>
<tr><td>long double</td><td>není podporováno (pokud se jedná o 80bitovou šířku)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>float _Complex/float complex</td><td>complex64</td></tr>
<tr><td>double _Complex/double complex</td><td>complex128</td></tr>
<tr><td>long double _Complex/long double complex</td><td>není podporováno</td></tr>
</table>

<p>Poměrně často se v&nbsp;céčkovských programech setkáme s&nbsp;použitím
operátoru <strong>sizeof</strong>:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    printf("sizeof char      = %lu byte(s)\n", sizeof(char));
    printf("sizeof short     = %lu byte(s)\n", sizeof(short));
    printf("sizeof int       = %lu byte(s)\n", sizeof(int));
    printf("sizeof long      = %lu byte(s)\n", sizeof(long));
    printf("sizeof long long = %lu byte(s)\n", sizeof(long long));
    printf("sizeof float     = %lu byte(s)\n", sizeof(float));
    printf("sizeof double    = %lu byte(s)\n", sizeof(double));
    return 0;
}
</pre>

<p>Přepis do Go je v&nbsp;tomto případě nepatrně složitější, neboť je nutné
použít funkce z&nbsp;balíčku <strong>unsafe</strong>, kterým se ovšem nepředává
datový typ, ale přímo hodnota určitého typu:</p>

<pre>
package main
&nbsp;
import (
        "fmt"
        "unsafe"
)
&nbsp;
func main() {
        fmt.Printf("sizeof int8       = %d byte(s)\n", unsafe.Sizeof(int8(0)))
        fmt.Printf("sizeof int16      = %d byte(s)\n", unsafe.Sizeof(int16(0)))
        fmt.Printf("sizeof int32      = %d byte(s)\n", unsafe.Sizeof(int32(0)))
        fmt.Printf("sizeof int64      = %d byte(s)\n", unsafe.Sizeof(int64(0)))
        fmt.Printf("sizeof int        = %d byte(s)\n", unsafe.Sizeof(int(0)))
        fmt.Printf("sizeof float32    = %d byte(s)\n", unsafe.Sizeof(float32(0)))
        fmt.Printf("sizeof float64    = %d byte(s)\n", unsafe.Sizeof(float64(0)))
        fmt.Printf("sizeof complex64  = %d byte(s)\n", unsafe.Sizeof(complex64(0)))
        fmt.Printf("sizeof complex128 = %d byte(s)\n", unsafe.Sizeof(complex128(0)))
        fmt.Printf("sizeof uintptr    = %d byte(s)\n", unsafe.Sizeof(uintptr(0)))
}
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;praxi se ovšem s&nbsp;operátorem
<strong>sizeof</strong> setkáme zejména v&nbsp;kódu pro alokaci paměti, která
je v&nbsp;Go řešena odlišně. Dále se může jednat o operace s&nbsp;binárními
soubory; zde se může použít výše zmíněný přístup
s&nbsp;<strong>unsafe.Sizeof</strong>.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Podmínky</h2>

<p>V&nbsp;této kapitole se zaměříme na popis základních rozdílů mezi
programovými konstrukcemi určenými pro řízení běhu programu. V&nbsp;první řadě
se pochopitelně jedná o podmínky a s&nbsp;nimi souvisejícím rozvětvením běhu
programu. V&nbsp;programovacím jazyku C máme k&nbsp;dispozici podmíněnou
konstrukci s&nbsp;jednou větví <strong>if</strong> i plné rozvětvení
realizované konstrukcí typu <strong>if-else</strong>. Jednotlivé větve mohou
být tvořeny jedním příkazem popř.&nbsp;blokem příkazů uzavřených do složených
závorek. Samotná testovaná podmínka, což je většinou celočíselný výraz, musí
být vždy umístěna do kulatých závorek:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    int x = 10;
&nbsp;
    if (x &gt; 0) {
        puts("x is positive number");
    }
&nbsp;
    return 0;
}
</pre>

<p>alternativně též bez použití bloku:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    int x = 10;
&nbsp;
    if (x &gt; 0)
        puts("x is positive number");
&nbsp;
    return 0;
}
</pre>


<p>Naproti tomu v&nbsp;programovacím jazyku Go platí nepatrně odlišná pravidla.
Především se výraz představující podmínku musí vyhodnotit na pravdivostní
hodnotu <strong>true</strong> nebo <strong>false</strong>. Dále se tento výraz
nemusí uzavírat do kulatých závorek. Samotné větve jsou vždy tvořeny bloky,
tj.&nbsp;nemusíme se bát, že se přidáním dalšího příkazu do původně
jednopříkazové větvě celá struktura programu změní (chyba typu Apple GOTO
fail):</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        x := 10
&nbsp;
        if x &gt; 0 {
                fmt.Println("x is positive number")
        }
}
</pre>

<p>Plné rozvětvení typu <strong>if-else</strong> je v&nbsp;céčku realizováno
takto:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    int x = 10;
&nbsp;
    if (x &gt; 0) {
        puts("x is positive number");
    }
    else {
        puts("x is negative number or zero");
    }
&nbsp;
    return 0;
}
</pre>

<p>Popř.&nbsp;bez bloků:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    int x = 10;
&nbsp;
    if (x &gt; 0)
        puts("x is positive number");
    else
        puts("x is negative number or zero");
&nbsp;
    return 0;
}
</pre>

<p>V&nbsp;jazyku Go jsou bloky povinné a navíc je vyžadováno, aby klíčové slovo
<strong>else</strong> leželo na stejném řádku, jako pravá uzavírací
závorka:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        x := 10
&nbsp;
        if x &gt; 0 {
                fmt.Println("x is positive number")
        } else {
                fmt.Println("x is negative number or zero")
        }
}
</pre>

<p>Kromě toho lze v&nbsp;programovacím jazyku Go deklarovat proměnné, které
jsou lokální pouze v&nbsp;rámci konstrukce <strong>if</strong>
popř.&nbsp;úplného rozvětvení <strong>if-else</strong>. Mimo tuto konstrukci
není proměnná viditelná:</p>

<pre>
if result, err := compute(x,y); err != nil {
        ...
        ...
        ...
} else {
        ...
        ...
        ...
}
</pre>

<p>V&nbsp;tomto příkladu jsou deklarovány dvě proměnné nazvané
<strong>result</strong> a <strong>err</strong>, které jsou viditelné pouze
uvnitř rozhodovací konstrukce. Na základě hodnoty proměnné <strong>err</strong>
se aplikace rozhoduje, zda vstoupit do větve <strong>if</strong> nebo naopak do
větve <strong>else</strong>. Pokud bychom nevyžadovali použití lokálně
viditelných proměnných, můžeme samozřejmě psát:</p>

<pre>
result, err := compute(x,y)
&nbsp;
if err != nil {
        ...
        ...
        ...
} else {
        ...
        ...
        ...
}
</pre>

<p><div class="rs-tip-major">Poznámka: minimálně pro účely detekce chyb je
použití lokálně viditelných proměnných poměrně často používáno, i když se
zejména zpočátku nemusí jednat o nejčitelnější jazykovou konstrukci.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zřetězené podmínky a jejich náhrada za <strong>switch</strong></h2>

<p>V&nbsp;programovacím jazyku C je možné podmínky zřetězit, popř.&nbsp;vnořit.
Podívejme se na jednoduchý demonstrační příklad, v&nbsp;němž se provádí test,
jestli je obsahem celočíselné proměnné kladné číslo, číslo záporné nebo
nula:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    int x = 0;
&nbsp;
    if (x &gt; 0) {
        puts("x is positive number");
    }
    else if (x == 0) {
        puts("x is zero");
    }
    else {
        puts("x is negative number");
    }
&nbsp;
    return 0;
}
</pre>

<p>Přepis do Go je v&nbsp;tomto případě přímočarý, samozřejmě s&nbsp;tím
rozdílem, že se podmínky nemusí zapisovat do kulatých závorek a příkazy se
neukončují středníkem:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        x := 10
&nbsp;
        if x &gt; 0 {
                fmt.Println("x is positive number")
        } else if x == 0 {
                fmt.Println("x is zero")
        } else {
                fmt.Println("x is negative number")
        }
}
</pre>

<p>Tento příklad lze přepsat takovým způsobem, že se namísto zřetězení
konstrukcí typu <strong>if-else</strong> použije konstrukce typu
<strong>switch</strong>. V&nbsp;programovacím jazyku Go je totiž možné do
jednotlivých větví <strong>case</strong> zapisovat plnohodnotné podmínky a
v&nbsp;tomto případě se za samotné klíčové slovo <strong>switch</strong>
nezapisuje žádný výraz. Jednotlivé větve se neukončují slovem
<strong>break</strong>:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        x := 10
&nbsp;
        switch {
        case x &gt; 0:
                fmt.Println("x is positive number")
        case x == 0:
                fmt.Println("x is zero")
        default:
                fmt.Println("x is negative number")
        }
}
</pre>

<p><div class="rs-tip-major">Poznámka: přednost tohoto způsobu zápisu oceníme
ve chvíli, kdy je řetězec <strong>if-else-if-else-if...</strong>
delší.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Programová smyčka typu <strong>while</strong></h2>

<p>V&nbsp;programovacím jazyku C existují tři typy programových smyček:
<strong>while</strong>, <strong>do-while</strong> a počítaná smyčka
<strong>for</strong>. Nejprve si ukažme nejjednodušší způsob použití smyčky
<strong>while</strong>, v&nbsp;níž se podmínka testuje na začátku každé
iterace, tedy před vstupem do smyčky:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    int x = 1;
&nbsp;
    while (x &lt;= 10) {
        printf("%d\n", x);
        x++;
    }
&nbsp;
    return 0;
}
</pre>

<p>V&nbsp;programovacím jazyce Go je nutné tento typ smyčky realizovat
s&nbsp;využitím klíčového slova <strong>for</strong>, za které se napíše pouze
podmínka. Ta je opět testována před vstupem do těla smyčky a tudíž se tento typ
programové smyčky nemusí provést ani jednou:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        x := 1
&nbsp;
        for x &lt;= 10 {
                fmt.Printf("%d\n", x)
                x++
        }
}
</pre>

<p><div class="rs-tip-major">Poznámka: často se v&nbsp;céčkových programech
můžeme setkat s&nbsp;tím, že se přímo v&nbsp;podmínce zvyšuje či naopak snižuje
hodnota testované proměnné o jedničku pomocí operátorů ++ a --:</div></p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    int x = 0;
&nbsp;
    while (x++ &lt; 10) {
        printf("%d\n", x);
    }
&nbsp;
    return 0;
}
</pre>

<p><div class="rs-tip-major">Tento zápis ovšem v&nbsp;Go nemá přímou obdobu,
protože ++ a -- je nutné zapisovat jako samostatný příkaz a nikoli ve
složitějším výrazu jako operátor.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Programová smyčka typu <strong>do-while</strong></h2>

<p>Druhým typem programové smyčky v&nbsp;programovacím jazyku C je smyčka typu
<strong>do-while</strong>, v&nbsp;níž je test, zda provést či neprovést další
iteraci, vyhodnocen až na konci každého cyklu:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    int x = 1;
&nbsp;
    do {
        printf("%d\n", x);
        x++;
    } while (x &lt;= 10);
&nbsp;
    return 0;
}
</pre>

<p>V&nbsp;jazyku Go v&nbsp;tomto případě budeme muset použít pomocnou proměnnou
a použít plnou podobu programové smyčky <strong>for</strong>
s&nbsp;inicializačním výrazem, podmínkou a výrazem spuštěným na konci těla
smyčky:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        x := 1
&nbsp;
        for cond := true; cond; cond = x &lt;= 10 {
                fmt.Printf("%d\n", x)
                x++
        }
}
</pre>

<p>V&nbsp;tomto příkladu byla vytvořena lokální proměnná <strong>cond</strong>,
která je na konci každé iterace znovu nastavena na pravdivostní hodnotu
vyjádřenou podmínkou. Na základě této hodnoty je smyčka buď ukončena nebo je
provedena další iterace.</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti je poměr frekvence
použití smyček <strong>while</strong> ku <strong>do-while</strong> větší než
10:1, takže se výše uvedený (a nepěkný trik) nemusí používat příliš
často.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Počítaná programová smyčka typu <strong>for</strong>, více řídicích proměnných smyčky</h2>

<p>V&nbsp;programovacím jazyku C se velmi často setkáme s&nbsp;počítanou
programovou smyčkou, v&nbsp;níž je použita jedna řídicí proměnná fungující jako
počitadlo smyčky:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    int x;
&nbsp;
    for (x=1; x &lt;= 10; x++) {
        printf("%d\n", x);
    }
&nbsp;
    return 0;
}
</pre>

<p>Popř.&nbsp;v&nbsp;C99:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    for (int x=1; x &lt;= 10; x++) {
        printf("%d\n", x);
    }
&nbsp;
    return 0;
}
</pre>

<p>Přepis do jazyka Go je v&nbsp;tomto případě přímočarý a můžeme (podobně jako
v&nbsp;C99) použít lokální proměnnou jako počitadlo (proměnná bude viditelná a
platná jen v&nbsp;rámci smyčky). Povšimněte si, že se všechny tři výrazy za
klíčovým slovem <strong>for</strong> neuzavírají do závorek:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        for x := 1; x &lt;= 10; x++ {
                fmt.Printf("%d\n", x)
        }
}
</pre>

<p>Samozřejmě není nutné, aby se počitadlo smyčky zvyšovalo či snižovalo o
jedničku, ale můžeme použít složitější výpočet:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    int x;
&nbsp;
    for (x=1; x &lt;= 10000; x&lt;&lt;=1) {
        printf("%d\n", x);
    }
&nbsp;
    return 0;
}
</pre>

<p>Přepis do Go je i zde přímočarý:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        for x := 1; x &lt;= 10000; x&lt;&lt;=1 {
                fmt.Printf("%d\n", x)
        }
}
</pre>

<p>V&nbsp;posledním příkladu jsou použity dvě proměnné, z&nbsp;nichž jedna se
zvyšuje o jedničku (jako běžné počitadlo) a druhá se s&nbsp;každou iterací
zdvojnásobí:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    int i,x;
&nbsp;
    for (i=0, x=1; i &lt;= 10; i++, x&lt;&lt;=1) {
        printf("2^%d = %d\n", i, x);
    }
&nbsp;
    return 0;
}
</pre>

<p>Tento příklad není možné v&nbsp;Go zapsat stejným způsobem, protože Go
nepodporuje operátor čárky. Ovšem můžeme zde použít malého triku &ndash;
vícenásobného přiřazení, a to jak v&nbsp;prvním výrazu (inicializace obou
proměnných), tak i v&nbsp;iteračním výrazu:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        for i, x := 0, 1; x &lt;= 10000; i, x = i+1, x&lt;&lt;1 {
                fmt.Printf("%d\n", x)
        }
}
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že i++ není možné použít,
a to z&nbsp;toho důvodu, že se v&nbsp;Go nejedná o operátor, ale o samostatně
stojící příkaz.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Programová smyčka s&nbsp;podmínkou uprostřed</h2>

<p>Programovou smyčku s&nbsp;podmínkou vyhodnocovanou uprostřed těla smyčky lze
realizovat různým způsobem. V&nbsp;céčku se často můžeme setkat
s&nbsp;následujícím postupem, v&nbsp;němž je smyčka na základě podmínky
ukončena příkazem <strong>break</strong>:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    int x = 1;
&nbsp;
    while (1) {
        printf("%d\n", x);
        x++;
        if (x &gt; 10) break;
    }
&nbsp;
    return 0;
}

</pre>

<p>Prakticky stejným způsobem, jen s&nbsp;nepatrnými rozdíly v&nbsp;syntaxi, se
může provést zápis v&nbsp;jazyce Go. Povšimněte si, že v&nbsp;tomto případě
není za klíčovým slovem <strong>for</strong> uvedena žádná podmínka:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        x := 1
&nbsp;
        for {
                fmt.Printf("%d\n", x)
                x++
                if x &gt; 10 {
                        break
                }
        }
}
</pre>

<p>Pokud ovšem preferujete, aby byla proměnná <strong>x</strong> lokální
v&nbsp;rámci smyčky, musí se podmínka zapsat, ovšem postačuje použít hodnotu
<strong>true</strong>, která se vyhodnotí opět na <strong>true</strong>.
Poslední výraz za středníkem lze zcela vynechat, ovšem středník je zde nutné
ponechat:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        for x := 1; true;  {
                fmt.Printf("%d\n", x)
                x++
                if x &gt; 10 {
                        break
                }
        }
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Konstrukce <strong>switch</strong></h2>

<p>Ještě větší rozdíly mezi oběma programovacími jazyky nalezneme
v&nbsp;rozhodovací konstrukci <strong>switch</strong>. Ta se ve standardním
cečku používá pro rozeskok na základě hodnoty celočíselného výrazu, jehož
výsledek je postupně porovnáván s&nbsp;celočíselnými <i>konstantami</i>. Pokud
mají být jednotlivé větve rozeskoku odděleny, musí být každá větev explicitně
ukončena příkazem <strong>break</strong> popř.&nbsp;příkazem
<strong>return</strong> (některé lintery ovšem vyžadují zápis
<strong>break</strong> i za <strong>return</strong> což je přinejmenším
nadbytečné). V&nbsp;následujícím příkladu využíváme toho, že bez ukončení větve
příkazy <strong>break/return</strong> je řízení běhu programu automaticky
předáno do následující větve, takže se například všechna sudá čísla
v&nbsp;rozsahu od 0 do 9 zpracují jediným společným příkazem:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
const char *classify(int x) {
        switch (x) {
        case 0:
                return "nula";
        case 2:
        case 4:
        case 6:
        case 8:
                return "sudé číslo";
        case 1:
        case 3:
        case 5:
        case 7:
        case 9:
                return "liché číslo";
        default:
                return "?";
        }
}
&nbsp;
int main(void) {
    int x;
    for (x = 0; x &lt;= 10; x++) {
        printf("%d: %s\n", x, classify(x));
    }
    return 0;
}
</pre>

<p>V&nbsp;programovacím jazyku Go se příkaz <strong>break</strong>
v&nbsp;konstrukci <strong>switch</strong> nepoužívá, protože je proveden
skutečný rozeskok. Pokud je nutné, aby se pro dvě či více podmínek vykonala
společná část kódu, musí se použít klíčové slovo <strong>fallthrough</strong>,
ovšem v&nbsp;reálných programech se s&nbsp;ním příliš často nesetkáme. Nejvíce
rozdílů ovšem nalezneme u podmínek zapisovaných za klíčovým slovem
<strong>case</strong>; nemusí se totiž jednat o pouhé celočíselné konstanty,
ale o složitější výrazy, včetně seznamu (přesněji řečeno výčtu) hodnot:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func classify(x int) string {
        switch x {
        case 0:
                return "nula"
        case 2, 4, 6, 8:
                return "sudé číslo"
        case 1, 3, 5, 7, 9:
                return "liché číslo"
        default:
                return "?"
        }
}
&nbsp;
func main() {
        for x := 0; x &lt;= 10; x++ {
                fmt.Printf("%d: %s\n", x, classify(x))
        }
}
</pre>

<p>Otrocký přepis předchozího céčkového programu do programovacího jazyka Go
bude delší a méně čitelný:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func classify(x int) string {
        switch x {
        case 0:
                return "nula"
        case 2:
                fallthrough
        case 4:
                fallthrough
        case 6:
                fallthrough
        case 8:
                return "sudé číslo"
        case 1:
                fallthrough
        case 3:
                fallthrough
        case 5:
                fallthrough
        case 7:
                fallthrough
        case 9:
                return "liché číslo"
        default:
                return "?"
        }
}
&nbsp;
func main() {
        for x := 0; x &lt;= 10; x++ {
                fmt.Printf("%d: %s\n", x, classify(x))
        }
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Deklarace a volání funkcí</h2>

<p>Každý céčkový program obsahuje deklaraci funkcí a jejich volání. Jen pro
úplnost si uveďme, jak taková deklarace vypadá v&nbsp;případě funkce bez
parametrů a bez návratové hodnoty:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
void printHello(void) {
    puts("Hello world!");
}
&nbsp;
int main(void) {
    printHello();
    return 0;
}
</pre>

<p>Přepis do Go bude v&nbsp;tomto případě snadný, protože použijeme klíčové
slovo <strong>func</strong>, funkce bez parametrů obsahuje za svým jménem
prázdné závorky (což má v&nbsp;C odlišný význam!) a případný návratový typ/typy
je uveden až za těmito závorkami:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func printHello() {
        fmt.Println("Hello world!")
}
&nbsp;
func main() {
        printHello()
}
</pre>

<p><div class="rs-tip-major">Poznámka: otevírací složená závorka by měla
začínat na stejném řádku, jako samotná hlavička funkce. V&nbsp;případě jazyka C
to není vyžadováno.</div></p>

<p>Příklad funkce s&nbsp;parametrem zapsané v&nbsp;C:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
void printHello(const char *message) {
    puts(message);
}
&nbsp;
int main(void) {
    printHello("Hello world!");
    return 0;
}
</pre>

<p>Ekvivalentní zápis v&nbsp;Go:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func printMessage(message string) {
        fmt.Println(message)
}
&nbsp;
func main() {
        printMessage("Hello world!")
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Návratové hodnoty funkcí</h2>

<p>Funkce <strong>getMessage</strong> s&nbsp;návratovou hodnotou zapsaná
v&nbsp;C:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
const char *getMessage(void) {
    return "Hello world!";
}
&nbsp;
void printMessage(const char *message) {
    puts(message);
}
&nbsp;
int main(void) {
    printMessage(getMessage());
    return 0;
}
</pre>

<p>Přepis do Go; v&nbsp;tomto případě se návratový typ zapisuje mezi uzavírací
kulatou závorku a otevírací závorku s&nbsp;tělem funkce:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func getMessage() string {
        return "Hello world!"
}
&nbsp;
func printMessage(message string) {
        fmt.Println(message)
}
&nbsp;
func main() {
        printMessage(getMessage())
}
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti mohou v&nbsp;Go funkce
vracet více hodnot, ovšem tato technika nemá v&nbsp;klasickém C ekvivalent
(snad jen předávání parametrů odkazem), takže by v&nbsp;tomto případě neměly
nastat problémy.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Funkce s&nbsp;proměnným počtem parametrů</h2>

<p>V&nbsp;některých aplikacích se setkáme s&nbsp;funkcemi s&nbsp;proměnným
počtem parametrů. Skutečný počet parametrů musí být volané funkci nějakým
způsobem sdělen, například předáním počtu ve zvláštním parametru, použitím
formátovacího řetězce či jeho obdoby (<strong>printf</strong>) nebo například
tím, že poslední parametr bude mít určitou předem známou hodnotu (0, -1,
<strong>NULL</strong> atd.). Ukažme si první popsaný způsob,
tj.&nbsp;explicitní předání počtu parametrů u funkcí <strong>f2</strong> a
<strong>f3</strong>:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;stdarg.h&gt;
&nbsp;
void f1(const char *msg) {
    printf("%s\n", msg);
}
&nbsp;
void f2(int count, ...) {
    int i;
    va_list args;
    va_start(args, count);
&nbsp;
    for (i = 0; i &lt; count; i++) {
        char *msg = va_arg(args, char *);
        printf("%s ", msg);
    }
    putchar('\n');
    va_end(args);
}
&nbsp;
void f3(char *prefix, int count, ...) {
    int i;
    va_list args;
&nbsp;
    printf("%s ", prefix);
    va_start(args, count);
&nbsp;
    for (i = 0; i &lt; count; i++) {
        char *msg = va_arg(args, char *);
        printf("%s ", msg);
    }
    putchar('\n');
    va_end(args);
}
&nbsp;
int main(void) {
    f1("Hello");
    f2(3, "Hello", "world", "!");
    f3("Message:", 4, "Hello", "world", "again", "!");
    return 0;
}
</pre>

<p>Můžeme vidět, že celé zpracování proměnného počtu parametrů je řešeno
knihovními funkcemi <strong>va_start</strong>, <strong>va_arg</strong> a
<strong>va_end</strong>.</p>

<p>V&nbsp;případě programovacího jazyka Go se používá poněkud odlišný přístup,
kdy je určen typ parametrů, ovšem jejich počet se získá automaticky při
průchodu všemi parametry:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func f1(msg string) {
        fmt.Printf("%s\n", msg)
}
&nbsp;
func f2(parts ...string) {
        for _, val := range parts {
                fmt.Printf("%s ", val)
        }
        fmt.Println()
}
&nbsp;
func f3(prefix string, parts ...string) {
        fmt.Printf("%s ", prefix)
        for _, val := range parts {
                fmt.Printf("%s ", val)
        }
        fmt.Println()
}
&nbsp;
func main() {
        f1("Hello")
        f2("Hello", "world", "!")
        f3("Message:", "Hello", "world", "again", "!")
}
</pre>

<p><div class="rs-tip-major">Poznámka: pokud je zapotřebí, aby parametry mohly
být jakéhokoli typu, lze použít prázdné rozhraní (<strong>interface</strong>),
které automaticky implementují všechny datové typy. Ovšem obecně se nejedná o
příliš dobrý způsob a použití prázdného rozhraní je chápáno za berličku
obcházející typový systém jazyka.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Konstanty</h2>

<p>V&nbsp;programovacím jazyku C lze konstanty vytvořit buď s&nbsp;využitím
preprocesoru (<strong>#define</strong>), což zajistí textovou substituci jména
konstanty za její obsah, nebo s&nbsp;využitím klíčového slova
<strong>const</strong> společně s&nbsp;deklarací a inicializací proměnné.
V&nbsp;programovacím jazyku Go lze konstanty taktéž vytvářet s&nbsp;využitím
klíčového slova <strong>const</strong>, které zde ovšem nepředstavuje
modifikátor, ale začátek deklarace. Typ konstanty je buď odvozen automaticky
z&nbsp;přiřazované hodnoty (může se jednat i o konstantní výraz), nebo je
alternativně možné typ konstanty uvést explicitně:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
const Pi float64 = 3.1415927
const E = 2.71828
&nbsp;
const z0 int = 0
const z1 = 0
&nbsp;
const z2 = z0 + z1
&nbsp;
func main() {
        fmt.Printf("Pi = %f\n", Pi)
        fmt.Printf("e = %f\n", E)

        fmt.Printf("z0 = %d\n", z0)
        fmt.Printf("z1 = %d\n", z1)

        fmt.Printf("z2 = %d\n", z2)
}
</pre>

<p>To, že <strong>const</strong> v&nbsp;Go znamená začátek deklarace a ne
&bdquo;pouhý&ldquo; modifikátor datového typu, je zřejmé z&nbsp;následujícího
příkladu, v&nbsp;němž jsou konstanty vytvořeny v&nbsp;jediném bloku:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
const (
        Pi float64 = 3.1415927
        E          = 2.71828
&nbsp;
        z0 int = 0
        z1     = 0
        z2     = z0 + z1
)
&nbsp;
func main() {
        fmt.Printf("Pi = %f\n", Pi)
        fmt.Printf("e = %f\n", E)
&nbsp;
        fmt.Printf("z0 = %d\n", z0)
        fmt.Printf("z1 = %d\n", z1)
&nbsp;
        fmt.Printf("z2 = %d\n", z2)
}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Náhrada za výčtový typ</h2>

<p>V&nbsp;jazyku C mají programátoři k&nbsp;dispozici datový typ výčet
(<strong>enum</strong>), v&nbsp;němž je jednotlivým položkám automaticky či
manuálně přiřazena nějaká celočíselná hodnota (ve výchozím nastavení index
položky):</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
enum {
    Pondeli,
    Utery,
    Streda,
    Ctvrtek,
    Patek,
    Sobota,
    Nedele
};
&nbsp;
int main(void) {
    printf("%d\n", Pondeli);
    printf("%d\n", Streda);
    printf("%d\n", Patek);
    return 0;
}
</pre>

<p>Tuto možnost sice v&nbsp;Go přímo nemáme, ovšem existuje částečně
ekvivalentní řešení postavené na použití &bdquo;automaticky měněné
konstanty&ldquo; <strong>iota</strong>, kterou lze považovat za počitadlo
položky:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
const (
        Pondeli = iota
        Utery
        Streda
        Ctvrtek
        Patek
        Sobota
        Nedele
)
&nbsp;
func main() {
        fmt.Printf("%d\n", Pondeli)
        fmt.Printf("%d\n", Streda)
        fmt.Printf("%d\n", Patek)
}
</pre>

<p><div class="rs-tip-major">Poznámka: přiřazení <strong>= iota</strong> je
možné použít jen u prvního prvku, dále je doplněno překladačem automaticky.
Nebo pochopitelně můžeme provést explicitní přiřazení pro všechny
konstanty.</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah následující části seriálu</h2>

<p>V&nbsp;následující části tohoto seriálu se opět zaměříme na porovnání
možností jazyků C a Go. Popíšeme si tato témata:</p>

<ol>
<li>Aritmetické výpočty, knihovna s&nbsp;matematickými funkcemi</li>
<li>Zpracování řetězců</li>
<li>Funkce pro práci s&nbsp;řetězci</li>
<li>Datum a čas</li>
<li>Práce se soubory</li>
<li>Uživatelsky definované datové typy</li>
<li>Zpracování chyb (praktické ukázky a porovnání)</li>
<li>Interakce aplikace s&nbsp;okolním systémem</li>
</ol>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně tři megabajty), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_empty_main.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/01_empty_main.c">https://github.com/tisnik/go-root/blob/master/article_34/01_empty_main.c</a></td></tr>
<tr><td> 1</td><td>01_empty_main.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/01_empty_main.go">https://github.com/tisnik/go-root/blob/master/article_34/01_empty_main.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 2</td><td>02_hello_world.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/02_hello_world.c">https://github.com/tisnik/go-root/blob/master/article_34/02_hello_world.c</a></td></tr>
<tr><td> 2</td><td>02_hello_world.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/02_hello_world.go">https://github.com/tisnik/go-root/blob/master/article_34/02_hello_world.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>03_data_types.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/03_data_types.c">https://github.com/tisnik/go-root/blob/master/article_34/03_data_types.c</a></td></tr>
<tr><td> 3</td><td>03_data_types.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/03_data_types.go">https://github.com/tisnik/go-root/blob/master/article_34/03_data_types.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 4</td><td>04_if_then.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/04_if_then.c">https://github.com/tisnik/go-root/blob/master/article_34/04_if_then.c</a></td></tr>
<tr><td> 4</td><td>04_if_then.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/04_if_then.go">https://github.com/tisnik/go-root/blob/master/article_34/04_if_then.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>05_if_then_else.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/05_if_then_else.c">https://github.com/tisnik/go-root/blob/master/article_34/05_if_then_else.c</a></td></tr>
<tr><td> 5</td><td>05_if_then_else.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/05_if_then_else.go">https://github.com/tisnik/go-root/blob/master/article_34/05_if_then_else.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>06_better_approach.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/06_better_approach.go">https://github.com/tisnik/go-root/blob/master/article_34/06_better_approach.go</a></td></tr>
<tr><td> 6</td><td>06_nested_if.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/06_nested_if.c">https://github.com/tisnik/go-root/blob/master/article_34/06_nested_if.c</a></td></tr>
<tr><td> 6</td><td>06_nested_if.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/06_nested_if.go">https://github.com/tisnik/go-root/blob/master/article_34/06_nested_if.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>07_while_loop.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/07_while_loop.c">https://github.com/tisnik/go-root/blob/master/article_34/07_while_loop.c</a></td></tr>
<tr><td> 7</td><td>07_while_loop.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/07_while_loop.go">https://github.com/tisnik/go-root/blob/master/article_34/07_while_loop.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>08_while_loop.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/08_while_loop.c">https://github.com/tisnik/go-root/blob/master/article_34/08_while_loop.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>09_do_while_loop.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/09_do_while_loop.c">https://github.com/tisnik/go-root/blob/master/article_34/09_do_while_loop.c</a></td></tr>
<tr><td> 9</td><td>09_do_while_loop.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/09_do_while_loop.go">https://github.com/tisnik/go-root/blob/master/article_34/09_do_while_loop.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>10_for_loop.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/10_for_loop.c">https://github.com/tisnik/go-root/blob/master/article_34/10_for_loop.c</a></td></tr>
<tr><td>10</td><td>10_for_loop.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/10_for_loop.go">https://github.com/tisnik/go-root/blob/master/article_34/10_for_loop.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>11_for_loop.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/11_for_loop.c">https://github.com/tisnik/go-root/blob/master/article_34/11_for_loop.c</a></td></tr>
<tr><td>11</td><td>11_for_loop.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/11_for_loop.go">https://github.com/tisnik/go-root/blob/master/article_34/11_for_loop.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td>12_for_loop.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/12_for_loop.c">https://github.com/tisnik/go-root/blob/master/article_34/12_for_loop.c</a></td></tr>
<tr><td>12</td><td>12_for_loop.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/12_for_loop.go">https://github.com/tisnik/go-root/blob/master/article_34/12_for_loop.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>13_break_in_loop_B.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/13_break_in_loop_B.go">https://github.com/tisnik/go-root/blob/master/article_34/13_break_in_loop_B.go</a></td></tr>
<tr><td>13</td><td>13_break_in_loop.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/13_break_in_loop.c">https://github.com/tisnik/go-root/blob/master/article_34/13_break_in_loop.c</a></td></tr>
<tr><td>13</td><td>13_break_in_loop.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/13_break_in_loop.go">https://github.com/tisnik/go-root/blob/master/article_34/13_break_in_loop.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>14</td><td>14_switch.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/14_switch.c">https://github.com/tisnik/go-root/blob/master/article_34/14_switch.c</a></td></tr>
<tr><td>14</td><td>14_switch.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/14_switch.go">https://github.com/tisnik/go-root/blob/master/article_34/14_switch.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>15_simple_function.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/15_simple_function.c">https://github.com/tisnik/go-root/blob/master/article_34/15_simple_function.c</a></td></tr>
<tr><td>15</td><td>15_simple_function.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/15_simple_function.go">https://github.com/tisnik/go-root/blob/master/article_34/15_simple_function.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>16_function_with_params.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/16_function_with_params.c">https://github.com/tisnik/go-root/blob/master/article_34/16_function_with_params.c</a></td></tr>
<tr><td>16</td><td>16_function_with_params.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/16_function_with_params.go">https://github.com/tisnik/go-root/blob/master/article_34/16_function_with_params.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>17_return_statement.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/17_return_statement.c">https://github.com/tisnik/go-root/blob/master/article_34/17_return_statement.c</a></td></tr>
<tr><td>17</td><td>17_return_statement.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/17_return_statement.go">https://github.com/tisnik/go-root/blob/master/article_34/17_return_statement.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>18_variadic_function.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/18_variadic_function.c">https://github.com/tisnik/go-root/blob/master/article_34/18_variadic_function.c</a></td></tr>
<tr><td>18</td><td>18_variadic_function.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/18_variadic_function.go">https://github.com/tisnik/go-root/blob/master/article_34/18_variadic_function.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>19_constants.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/19_constants.go">https://github.com/tisnik/go-root/blob/master/article_34/19_constants.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>20</td><td>20_constants.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/20_constants.go">https://github.com/tisnik/go-root/blob/master/article_34/20_constants.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>21_enum.c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/21_enum.c">https://github.com/tisnik/go-root/blob/master/article_34/21_enum.c</a></td></tr>
<tr><td>21</td><td>21_iota.go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_34/21_iota.go">https://github.com/tisnik/go-root/blob/master/article_34/21_iota.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

