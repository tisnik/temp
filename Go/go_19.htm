<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Způsob využití různých programovacích jazyků na WWW stránkách</a></p>
<p><a href="#k03">*** 3. Transcompilery do JavaScriptu</a></p>
<p><a href="#k04">*** 4. Emscripten</a></p>
<p><a href="#k05">*** 5. Virtuální stroj naprogramovaný v&nbsp;JavaScriptu</a></p>
<p><a href="#k06">*** 6. WebAssembly</a></p>
<p><a href="#k07">*** 7. Jednoduchý projekt přeložený do WebAssembly</a></p>
<p><a href="#k08">*** 8. Server, který bude korektně pracovat se soubory s&nbsp;MIME typem &bdquo;application/wasm&ldquo;</a></p>
<p><a href="#k09">*** 9. WebAssembly a DOM</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Odkazy na články s&nbsp;tématem WebAssembly</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Způsob využití různých programovacích jazyků na WWW stránkách</h2>

<p><i>JavaScript is an assembly language. The JavaScript + HTML generate is
like a .NET assembly. The browser can execute it, but no human should really
care what's there.<br />
Erik Meijer</i></p>

<p>I přes snahy některých vývojářů a softwarových společností o začlenění dalších skriptovacích jazyků do webových prohlížečů (Tcl, VBScript, Dart v&nbsp;Dartiu apod.) je patrné, že v&nbsp;současnosti je jediným široce akceptovaným <i>skriptovacím jazykem</i> na straně webového prohlížeče pouze JavaScript. To však neznamená, že by se aplikace, které mají být spouštěny na straně klienta, musely psát pouze v&nbsp;JavaScriptu, jenž nemusí zdaleka všem vývojářům vyhovovat, ať již z&nbsp;objektivních či ze subjektivních příčin.  V&nbsp;relativně nedávné minulosti proto vzniklo a pořád ještě vzniká mnoho projektů, jejichž cílem je umožnit tvorbu webových aplikací pro prohlížeč v&nbsp;jiných programovacích jazycích. Zdrojové kódy je pak nutné nějakým způsobem zpracovat takovým způsobem, aby je bylo možné ve webovém prohlížeči spustit. Možností je hned několik &ndash; lze použít plugin (velmi problematické a dnes značně nepopulární řešení), transcompiler do JavaScriptu či virtuální stroj popř.&nbsp;interpret daného jazyka implementovaný opět v&nbsp;JavaScriptu. Právě posledními dvěma zmíněnými možnostmi se budeme zabývat v&nbsp;navazujících kapitolách.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Transcompilery do JavaScriptu</h2>

<p>Jednu z&nbsp;dnes velmi populárních technik umožňujících použití prakticky libovolného programovacího jazyka pro tvorbu aplikací běžících na straně webového prohlížeče, představuje použití takzvaných <i>transcompilerů (source-to-source compiler)</i> zajišťujících překlad programu napsaného ve zdrojovém programovacím jazyce do funkčně identického programu napsaného v&nbsp;JavaScriptu. Transpřekladač se většinou spouští jen jednou na vývojářském počítači, samotní klienti již mají k&nbsp;dispozici JavaScriptový kód. Existuje však i druhá možnost, kdy je transpřekladač naprogramován v&nbsp;JavaScriptu a spouštěn přímo ve webovém prohlížeči klientů. Oba přístupy mají své přednosti, ale pochopitelně i nějaké zápory (například tvůrci uzavřených aplikací pravděpodobně budou upřednostňovat první možnost, protože výstupy transcompilerů jsou většinou dosti nečitelné). Z&nbsp;praxe můžeme uvést například následující projekty založené na transpřekladači:</p>:

<table>
<tr><th>#</th><th>Jazyk</th><th>Poznámka</th></tr>
<tr><td>1</td><td>CoffeeScript</td><td>přidání syntaktického cukru do JavaScriptu</td></tr>
<tr><td>2</td><td>ClojureScript</td><td>překlad aplikací psaných v&nbsp;Clojure do JavaScriptu</td></tr>
<tr><td>3</td><td>Kaffeine</td><td>rozšíření JavaScriptu o nové vlastnosti</td></tr>
<tr><td>4</td><td>RedScript</td><td>jazyk inspirovaný Ruby</td></tr>
<tr><td>5</td><td>GorillaScript</td><td>další rozšíření JavaScriptu</td></tr>
<tr><td>6</td><td>ghcjs</td><td>transpřekladač pro fanoušky programovacího jazyka Haskell</td></tr>
</table>



<p><a name="k04"></a></p>
<h2 id="k04">4. Emscripten</h2>

<p>Další alternativní technologii, která mi osobně přijde velmi zajímavá a
v&nbsp;budoucnu možná i přelomová, představují transpřekladače provádějící
překlad z&nbsp;bajtkódu či mezikódu do JavaScriptu (vstupem zde tedy není
zdrojový kód v&nbsp;nějakém lidsky čitelném programovacím jazyku, ale většinou
binárně reprezentovaný výsledek předchozího překladu). Příkladem tohoto typu
transpřekladače je především <i>Emscripten</i> umožňující překlad kódu
z&nbsp;libovolného jazyka podporovaného LLVM (C, C++, Objective C, D, Ada,
Fortran atd.) do JavaScriptu. Podívejme se nyní ve stručnosti na kroky, které
je zapotřebí provést proto, aby se původní kód napsaný například v&nbsp;Céčku,
mohl spustit ve webovém prohlížeči:</p>

<ol>
<li>Na vstupu celého procesu je program napsaný v&nbsp;céčku</li>
<li>Nejprve je proveden překlad pomocí <strong>clang</strong> do mezikódu LLVM (<i>LLVM Intermediate Representation</i>)</li>
<li>Následně je zavolán <strong>Fastcomp</strong> (jádro překladače Emscriptenu) pro překlad mezikódu z&nbsp;předchozího kroku do JavaScriptu</li>
<li>Výsledný JavaScriptový zdrojový kód je možné využít různými způsoby (node.js na serveru, na WWW stránce atd.)</li>
</ol>

<p>Poznámka: poslední překlad (do JavaScriptu) generuje kód kompatibilní
s&nbsp;<i>asm.js</i>, tj.&nbsp;používá se zde cíleně omezená podmnožina
konstrukcí JavaScriptu.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Virtuální stroj naprogramovaný v&nbsp;JavaScriptu</h2>

<p>Právě projekt <i>Emscripten</i> zmíněný <a href="#k04">v&nbsp;předchozí kapitole</a> do značné míry usnadnil další způsob zajištění běhu programů napsaných v&nbsp;různých programovacích jazycích ve webovém prohlížeči. Pokud je totiž možné přeložit jakýkoli program napsaný v&nbsp;jazycích C či C++ do JavaScriptu (samozřejmě za předpokladu, že se vhodným způsobem budou emulovat použité knihovní funkce), proč by nebylo možné do JavaScriptu rovnou přeložit celý virtuální stroj používaný daným programovacím jazykem? Samozřejmě to možné je, a to zejména v&nbsp;případech, kdy je překládaný virtuální stroj malý, což je příklad VM pro jazyk Lua, tak i například poněkud většího virtuálního stroje Pythonu (.NET resp.&nbsp;CLR či Java VM už je těžší oříšek). Překladem VM do JavaScriptu získáme poměrně mnoho výhod, zejména pak možnost mít přímo v&nbsp;HTML stránkách původní zdrojové kódy (Lua, Python atd.) a nikoli nečitelný výstup z&nbsp;transpřekladačů. Za tento postup však také zaplatíme, zejména pomalejším během aplikací v&nbsp;porovnání s&nbsp;nativní VM.  V&nbsp;praxi se může jednat o výkonnostní propad zhruba na polovinu, což ovšem v&nbsp;mnoha aplikacích vůbec není tak špatný výsledek.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. WebAssembly</h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. Jednoduchý projekt přeložený do WebAssembly</h2>

<pre>
package main

import "fmt"

func main() {
        fmt.Println("Hello World!")
}
</pre>

<pre>
GOARCH=wasm GOOS=js go build -o test.wasm hello.go
</pre>

<pre>
&lt;html&gt;
        &lt;head&gt;
                &lt;meta charset="utf-8"&gt;
                &lt;script src="wasm_exec.js"&gt;&lt;/script&gt;
                &lt;script&gt;
                        const go = new Go();
                        WebAssembly.instantiateStreaming(fetch("main.wasm"), go.importObject).then((result) =&gt; {
                                go.run(result.instance);
                        });
                &lt;/script&gt;
        &lt;/head&gt;
        &lt;body&gt;&lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Server, který bude korektně pracovat se soubory s&nbsp;MIME typem &bdquo;application/wasm&ldquo;</h2>

<pre>
//     HTTP server vracející statický obsah
&nbsp;
package main
&nbsp;
import (
        "net/http"
)
&nbsp;
func <strong>main</strong>() {
        http.Handle("/", http.FileServer(http.Dir("")))
        http.ListenAndServe(":8000", nil)
}
</pre>

<p></p>

<pre>
$ go run file_server.go
</pre>

<pre>
$ <strong>curl -I localhost:8000/test.wasm</strong>
&nbsp;
HTTP/1.1 200 OK
Accept-Ranges: bytes
Content-Length: 2424424
Content-Type: application/wasm
Last-Modified: Sat, 30 Mar 2019 18:27:52 GMT
Date: Sat, 30 Mar 2019 18:45:08 GMT
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. WebAssembly a DOM</h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na články s&nbsp;tématem WebAssembly</h2>

<ol>

<li>WebAssembly<br />
<a href="https://webassembly.org/">https://webassembly.org/</a>
</li>

<li>WebAssembly na Wiki Golangu<br />
<a href="https://github.com/golang/go/wiki/WebAssembly">https://github.com/golang/go/wiki/WebAssembly</a>
</li>

<li>The future of WebAssembly - A look at upcoming features and proposals<br />
<a href="https://blog.scottlogic.com/2018/07/20/wasm-future.html">https://blog.scottlogic.com/2018/07/20/wasm-future.html</a>
</li>

<li>Writing WebAssembly By Hand<br />
<a href="https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html">https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html</a>
</li>

<li>WebAssembly Specification<br />
<a href="https://webassembly.github.io/spec/core/index.htmlo">https://webassembly.github.io/spec/core/index.htmlo</a>
</li>

<li>Index of Instructions<br />
<a href="https://webassembly.github.io/spec/core/appendix/index-instructions.html">https://webassembly.github.io/spec/core/appendix/index-instructions.html</a>
</li>

<li>The WebAssembly Binary Toolkit<br />
<a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>
</li>

<li>Will WebAssembly replace JavaScript? Or Will WASM Make JavaScript More Valuable in Future?<br />
<a href="https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e">https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e</a>
</li>

<li>Roadmap (pro WebAssemly)<br />
<a href="https://webassembly.org/roadmap/">https://webassembly.org/roadmap/</a>
</li>

<li>S-expression<br />
<a href="https://en.wikipedia.org/wiki/S-expression">https://en.wikipedia.org/wiki/S-expression</a>
</li>

<li>Understanding WebAssembly text format<br />
<a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format">https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format</a>
</li>

<li>Learning Golang through WebAssembly - Part 1, Introduction and setup<br />
<a href="https://www.aaron-powell.com/posts/2019-02-04-golang-wasm-1-introduction/">https://www.aaron-powell.com/posts/2019-02-04-golang-wasm-1-introduction/</a>
</li>

<li>Learning Golang through WebAssembly - Part 2, Writing your first piece of Go<br />
<a href="https://www.aaron-powell.com/posts/2019-02-05-golang-wasm-2-writing-go/">https://www.aaron-powell.com/posts/2019-02-05-golang-wasm-2-writing-go/</a>
</li>

<li>Learning Golang through WebAssembly - Part 3, Interacting with JavaScript from Go <br />
<a href="https://www.aaron-powell.com/posts/2019-02-06-golang-wasm-3-interacting-with-js-from-go/">https://www.aaron-powell.com/posts/2019-02-06-golang-wasm-3-interacting-with-js-from-go/</a>
</li>

<li>Golang webassembly (wasm) testing with examples <br />
<a href="https://jelinden.fi/blog/golang-webassembly-wasm-testing-with-examples/qB7Tb2KmR">https://jelinden.fi/blog/golang-webassembly-wasm-testing-with-examples/qB7Tb2KmR</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>Package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

