<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p>V&nbsp;dnešní části <a href="">seriálu o programovacím jazyku Go</a> se zaměříme na popis způsobů použití formátů určených pro serializaci a deserializaci dat s&nbsp;jejich případným přenosem do jiné aplikace či služby. Již dříve jsme se ve stručnosti seznámili s&nbsp;využitím formátu JSON a nepřímo taktéž s&nbsp;formátem TOML používaným typicky pro konfigurační soubory. V&nbsp;případě JSONu se jedná o poměrně důležitý formát, protože JSON (a samozřejmě též XML) se v&nbsp;současnosti používá v&nbsp;mnoha webových službách a i když stále vznikají a jsou postupně adaptovány další formáty, ať již textové (<a href="https://yaml.org/">YAML</a>, <a href="https://github.com/edn-format/edn">edn</a>) či binární (<a href="http://bsonspec.org/">BSON</a>, <a href="http://bjson.org/">B-JSON</a>, <a href="https://github.com/FasterXML/smile-format-specification">Smile</a>, <a href="https://developers.google.com/protocol-buffers/">Protocol-Buffers</a>), CBOR atd., je velmi pravděpodobné, že se JSON bude i nadále poměrně masivně využívat. Nicméně existují situace, kdy je vhodné textový a relativně neúsporný JSON nahradit právě nějakým binárním formátem.</p>

<p>Některé metody serializace a deserializace jsou implementovány ve standardních knihovnách programovacího jazyka Go; další metody (resp.&nbsp;přesněji řečeno formáty) vyžadují instalaci zvláštní knihovny popř.&nbsp;vlastní implementaci daného formátu. Nejdříve se zaměříme na ty formáty, které jsou podporovány bez nutnosti instalace dalších balíčků a posléze si ukážeme i některé přídavné balíčky pro ty nejzajímavější popř.&nbsp;nejpoužívanější formáty.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p></p>

<pre>
<p>Služba vracející dokument reprezentovaný ve formátu JSON:</p>

<pre>
$ <strong>curl http://httpbin.org/json</strong>
&nbsp;
{
  "slideshow": {
    "author": "Yours Truly", 
    "date": "date of publication", 
    "slides": [
      {
        "title": "Wake up to WonderWidgets!", 
        "type": "all"
      }, 
      {
        "items": [
          "Why &lt;em&gt;WonderWidgets&lt;/em&gt; are great", 
          "Who &lt;em&gt;buys&lt;/em&gt; WonderWidgets"
        ], 
        "title": "Overview", 
        "type": "all"
      }
    ], 
    "title": "Sample Slide Show"
  }
}
</pre>

<p>Formát JSON umožňuje uložení a tím pádem i přenos jediné (nijak nepojmenované) hodnoty. Podporovány jsou přitom hodnoty, které můžeme zařadit do šesti kategorií (viz též <a href="http://json.org/value.gif">příslušná část graficky vyjádřené syntaxe</a> formátu JSON):</p>

<table>
<tr><th>#</th><th>Hodnota</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>string</td><td>řetězec (s&nbsp;plnou podporou Unicode)</td></tr>
<tr><td>2</td><td>number</td><td>celé číslo popř.&nbsp;hodnota typu <i>double</i></td></tr>
<tr><td>3</td><td>object</td><td>ve skutečnosti se jedná o asociativní pole (mapu), viz poznámka <a href="#k01">v&nbsp;úvodní kapitole</a></td></tr>
<tr><td>4</td><td>array</td><td>pole, ovšem v&nbsp;JSONu nemusí mít všechny prvky pole stejný typ</td></tr>
<tr><td>5</td><td><strong>true</strong>, <strong>false</strong></td><td>pravdivostní hodnota</td></tr>
<tr><td>6</td><td><strong>null</strong></td><td>prázdná hodnota</td></tr>
</table>

<p>Pro převod libovolného typu (přesněji řečeno hodnoty libovolného typu) do
JSONu se používá funkce nazvaná <strong>Marshal</strong>, kterou nalezneme
v&nbsp;balíčku <strong>encoding/json</strong>:</p>

<pre>
func <strong>Marshal</strong>(v interface{}) ([]byte, error)
</pre>

<p>Povšimněte si, že tato funkce skutečně akceptuje hodnotu libovolného typu,
protože prázdné rozhraní implementuje (zcela automaticky!) každý datový typ
(s&nbsp;tímto zajímavým konceptem &bdquo;univerzálního datového typu&ldquo; se
ještě několikrát setkáme, zejména v&nbsp;rozhraních mezi Go a dalšími systémy).
Návratovou hodnotou je sekvence bajtů (nikoli řetězec!) a popř.&nbsp;i
struktura reprezentující chybový stav, pokud k&nbsp;chybě skutečně došlo.
V&nbsp;opačném případě se ve druhé návratové hodnotě funkce
<strong>Marshal</strong> vrací <strong>nil</strong>, jak jsme ostatně zvyklí ze
všech podobně koncipovaných funkcí.</p>

<p>V&nbsp;typických zdrojových kódech se tedy setkáme s&nbsp;tímto idiomatickým
zápisem:</p>

<pre>
json_bytes, err := <strong>json.Marshal(a)</strong>
&nbsp;
if err != nil {
        log.Fatal(err)
}
...
...
...
</pre>

https://github.com/fxamacker/cbor



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<p></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně šest až sedm megabajtů), můžete namísto toho použít odkazy na
jednotlivé demonstrační příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/">https://github.com/tisnik/go-root/blob/master/article_57/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/">https://github.com/tisnik/go-root/blob/master/article_57/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/">https://github.com/tisnik/go-root/blob/master/article_57/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/">https://github.com/tisnik/go-root/blob/master/article_57/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/">https://github.com/tisnik/go-root/blob/master/article_57/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/">https://github.com/tisnik/go-root/blob/master/article_57/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>
</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

