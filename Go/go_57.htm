<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Krátké zopakování &ndash; práce s&nbsp;formátem JSON</a></p>
<p><a href="#k03">*** 3. Některá úskalí převodu hodnot do formátu JSON</a></p>
<p><a href="#k04">*** 4. Serializace dat do formátu XML</a></p>
<p><a href="#k05">*** 5. Specifikace jména kořenového uzlu</a></p>
<p><a href="#k06">*** 6. Struktura XML odlišná od struktury původních serializovaných dat</a></p>
<p><a href="#k07">*** 7. Serializace polí, speciální hodnoty, ukazatele apod.</a></p>
<p><a href="#k08">*** 8. Serializace sekvence struktur</a></p>
<p><a href="#k09">*** 9. Obalení sekvence struktur dalším datovým typem</a></p>
<p><a href="#k10">*** 10. Vylepšení předchozích příkladů</a></p>
<p><a href="#k11">*** 11. Serializace jedné struktury jak do JSONu, tak i do XML &ndash; problematika anotačních řetězců</a></p>
<p><a href="#k12">*** 12. Binární formáty a programovací jazyk Go</a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p>V&nbsp;dnešní části <a href="https://www.root.cz/serialy/programovaci-jazyk-go/">seriálu o programovacím jazyku Go</a> se zaměříme na popis způsobů použití formátů určených pro serializaci a deserializaci dat s&nbsp;jejich případným přenosem do jiné aplikace či služby. Již dříve jsme se ve stručnosti seznámili s&nbsp;využitím formátu JSON a nepřímo taktéž s&nbsp;formátem TOML používaným typicky pro konfigurační soubory. V&nbsp;případě JSONu se jedná o poměrně důležitý formát, protože JSON (a samozřejmě též XML) se v&nbsp;současnosti používá v&nbsp;mnoha webových službách a i když stále vznikají a jsou postupně adaptovány další formáty, ať již textové (<a href="https://yaml.org/">YAML</a>, <a href="https://github.com/edn-format/edn">edn</a>) či binární (<a href="http://bsonspec.org/">BSON</a>, <a href="http://bjson.org/">B-JSON</a>, <a href="https://github.com/FasterXML/smile-format-specification">Smile</a>, <a href="https://developers.google.com/protocol-buffers/">Protocol-Buffers</a>), CBOR atd., je velmi pravděpodobné, že se JSON bude i nadále poměrně masivně využívat. Nicméně existují situace, kdy je vhodné textový a relativně neúsporný JSON nahradit právě nějakým binárním formátem.</p>

<p>Některé metody serializace a deserializace jsou implementovány ve standardních knihovnách programovacího jazyka Go; další metody (resp.&nbsp;přesněji řečeno formáty) vyžadují instalaci zvláštní knihovny popř.&nbsp;vlastní implementaci daného formátu. Nejdříve se zaměříme na ty formáty, které jsou podporovány bez nutnosti instalace dalších balíčků a posléze si ukážeme i některé přídavné balíčky pro ty nejzajímavější popř.&nbsp;nejpoužívanější formáty.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Krátké zopakování &ndash; práce s&nbsp;formátem JSON</h2>

<p></p>

<pre>
<p>Služba vracející dokument reprezentovaný ve formátu JSON:</p>

<pre>
$ <strong>curl http://httpbin.org/json</strong>
&nbsp;
{
  "slideshow": {
    "author": "Yours Truly", 
    "date": "date of publication", 
    "slides": [
      {
        "title": "Wake up to WonderWidgets!", 
        "type": "all"
      }, 
      {
        "items": [
          "Why &lt;em&gt;WonderWidgets&lt;/em&gt; are great", 
          "Who &lt;em&gt;buys&lt;/em&gt; WonderWidgets"
        ], 
        "title": "Overview", 
        "type": "all"
      }
    ], 
    "title": "Sample Slide Show"
  }
}
</pre>

<p>Formát JSON umožňuje uložení a tím pádem i přenos jediné (nijak nepojmenované) hodnoty. Podporovány jsou přitom hodnoty, které můžeme zařadit do šesti kategorií (viz též <a href="http://json.org/value.gif">příslušná část graficky vyjádřené syntaxe</a> formátu JSON):</p>

<table>
<tr><th>#</th><th>Hodnota</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>string</td><td>řetězec (s&nbsp;plnou podporou Unicode)</td></tr>
<tr><td>2</td><td>number</td><td>celé číslo popř.&nbsp;hodnota typu <i>double</i></td></tr>
<tr><td>3</td><td>object</td><td>ve skutečnosti se jedná o asociativní pole (mapu), viz poznámka <a href="#k01">v&nbsp;úvodní kapitole</a></td></tr>
<tr><td>4</td><td>array</td><td>pole, ovšem v&nbsp;JSONu nemusí mít všechny prvky pole stejný typ</td></tr>
<tr><td>5</td><td><strong>true</strong>, <strong>false</strong></td><td>pravdivostní hodnota</td></tr>
<tr><td>6</td><td><strong>null</strong></td><td>prázdná hodnota</td></tr>
</table>

<p>Pro převod libovolného typu (přesněji řečeno hodnoty libovolného typu) do
JSONu se používá funkce nazvaná <strong>Marshal</strong>, kterou nalezneme
v&nbsp;balíčku <strong>encoding/json</strong>:</p>

<pre>
func <strong>Marshal</strong>(v interface{}) ([]byte, error)
</pre>

<p>Povšimněte si, že tato funkce skutečně akceptuje hodnotu libovolného typu,
protože prázdné rozhraní implementuje (zcela automaticky!) každý datový typ
(s&nbsp;tímto zajímavým konceptem &bdquo;univerzálního datového typu&ldquo; se
ještě několikrát setkáme, zejména v&nbsp;rozhraních mezi Go a dalšími systémy).
Návratovou hodnotou je sekvence bajtů (nikoli řetězec!) a popř.&nbsp;i
struktura reprezentující chybový stav, pokud k&nbsp;chybě skutečně došlo.
V&nbsp;opačném případě se ve druhé návratové hodnotě funkce
<strong>Marshal</strong> vrací <strong>nil</strong>, jak jsme ostatně zvyklí ze
všech podobně koncipovaných funkcí.</p>

<p>V&nbsp;typických zdrojových kódech se tedy setkáme s&nbsp;tímto idiomatickým
zápisem:</p>

<pre>
json_bytes, err := <strong>json.Marshal(a)</strong>
&nbsp;
if err != nil {
        log.Fatal(err)
}
...
...
...
</pre>

https://github.com/fxamacker/cbor



<p><a name="k03"></a></p>
<h2 id="k03">3. Některá úskalí převodu hodnot do formátu JSON</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/json"
        "fmt"
)
&nbsp;
func <strong>main</strong>() {
        var a float64 = 0.0
        var b float64 = 1e10
        var c float64 = 1e100
        var d float64 = 2.3e-50
&nbsp;
        var jsonOutput []byte
&nbsp;
        jsonOutput, _ = json.Marshal(a)
        fmt.Println(string(jsonOutput))
&nbsp;
        jsonOutput, _ = json.Marshal(b)
        fmt.Println(string(jsonOutput))
&nbsp;
        jsonOutput, _ = json.Marshal(c)
        fmt.Println(string(jsonOutput))
&nbsp;
        jsonOutput, _ = json.Marshal(d)
        fmt.Println(string(jsonOutput))
}
</pre>

<pre>
0
10000000000
1e+100
2.3e-50
</pre>

<pre>
// https://stackoverflow.com/questions/1423081/json-left-out-infinity-and-nan-json-status-in-ecmascript
&nbsp;
package <strong>main</strong>
&nbsp;
import (
        "encoding/json"
        "fmt"
        "math"
)
&nbsp;
func <strong>main</strong>() {
        var a float64 = -0.0
        var b float64 = math.NaN()
        var c float64 = -math.NaN()
        var d float64 = math.Inf(1)
        var e float64 = math.Inf(-1)
&nbsp;
        var jsonOutput []byte
&nbsp;
        jsonOutput, _ = json.Marshal(a)
        fmt.Println(string(jsonOutput))
&nbsp;
        jsonOutput, _ = json.Marshal(b)
        fmt.Println(string(jsonOutput))
&nbsp;
        jsonOutput, _ = json.Marshal(c)
        fmt.Println(string(jsonOutput))
&nbsp;
        jsonOutput, _ = json.Marshal(d)
        fmt.Println(string(jsonOutput))
&nbsp;
        jsonOutput, _ = json.Marshal(e)
        fmt.Println(string(jsonOutput))
}
</pre>

<pre>
0
&nbsp;
&nbsp;
&nbsp;
&nbsp;
</pre>

<pre>
<nil> 0
json: unsupported value: NaN 
json: unsupported value: NaN 
json: unsupported value: +Inf 
json: unsupported value: -Inf 
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/json"
        "fmt"
)
&nbsp;
func <strong>main</strong>() {
        var a1 [10]byte
        var a2 [10]int32
        a3 := [10]int32{1, 10, 2, 9, 3, 8, 4, 7, 5, 6}
        a4 := []string{"www", "root", "cz"}
        a5 := []interface{}{1, "root", 3.1415, true, []int{1, 2, 3, 4}}
        matice := [4][3]float32{
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9},
                {0, -1, 0},
        }
&nbsp;
        a1_json, _ := json.Marshal(a1)
        fmt.Println(string(a1_json))
&nbsp;
        a2_json, _ := json.Marshal(a2)
        fmt.Println(string(a2_json))
&nbsp;
        a3_json, _ := json.Marshal(a3)
        fmt.Println(string(a3_json))
&nbsp;
        a4_json, _ := json.Marshal(a4)
        fmt.Println(string(a4_json))
&nbsp;
        a5_json, _ := json.Marshal(a5)
        fmt.Println(string(a5_json))
&nbsp;
        matice_json, _ := json.Marshal(matice)
        fmt.Println(string(matice_json))
}
</pre>

<pre>
[0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0]
[1,10,2,9,3,8,4,7,5,6]
["www","root","cz"]
[1,"root",3.1415,true,[1,2,3,4]]
[[1,2,3],[4,5,6],[7,8,9],[0,-1,0]]
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Serializace dat do formátu XML</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/xml"
        "fmt"
)
&nbsp;
type <strong>User1</strong> struct {
        id      uint32
        name    string
        surname string
}
&nbsp;
type <strong>User2</strong> struct {
        Id      uint32
        Name    string
        Surname string
}
&nbsp;
func <strong>main</strong>() {
        user1 := User1{
                1,
                "Pepek",
                "Vyskoč"}
&nbsp;
        user2 := User2{
                1,
                "Pepek",
                "Vyskoč"}
&nbsp;
        user1asXML, _ := xml.Marshal(user1)
        fmt.Println(string(user1asXML))
&nbsp;
        fmt.Println()
&nbsp;
        user2asXML, _ := xml.Marshal(user2)
        fmt.Println(string(user2asXML))
}
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/xml"
        "fmt"
)
&nbsp;
type <strong>User1</strong> struct {
        id      uint32 `xml:"id"`
        name    string `xml:"user_name"`
        surname string `xml:"surname"`
}
&nbsp;
type <strong>User2</strong> struct {
        Id      uint32 `xml:"id"`
        Name    string `xml:"user_name"`
        Surname string `xml:"surname"`
}
&nbsp;
func <strong>main</strong>() {
        user1 := User1{
                1,
                "Pepek",
                "Vyskoč"}
&nbsp;
        user2 := User2{
                1,
                "Pepek",
                "Vyskoč"}
&nbsp;
        user1asXML, _ := xml.Marshal(user1)
        fmt.Println(string(user1asXML))
&nbsp;
        fmt.Println()
&nbsp;
        user2asXML, _ := xml.Marshal(user2)
        fmt.Println(string(user2asXML))
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Specifikace jména kořenového uzlu</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/xml"
        "fmt"
)
&nbsp;
type <strong>User1</strong> struct {
        XMLName xml.Name `xml:"user"`
        id      uint32   `xml:"id"`
        name    string   `xml:"user_name"`
        surname string   `xml:"surname"`
}
&nbsp;
type <strong>User2</strong> struct {
        XMLName xml.Name `xml:"user"`
        Id      uint32   `xml:"id"`
        Name    string   `xml:"user_name"`
        Surname string   `xml:"surname"`
}
&nbsp;
func <strong>main</strong>() {
        user1 := User1{
                id:      1,
                name:    "Pepek",
                surname: "Vyskoč"}
&nbsp;
        user2 := User2{
                Id:      1,
                Name:    "Pepek",
                Surname: "Vyskoč"}
&nbsp;
        user1asXML, _ := xml.Marshal(user1)
        fmt.Println(string(user1asXML))
&nbsp;
        fmt.Println()
&nbsp;
        user2asXML, _ := xml.Marshal(user2)
        fmt.Println(string(user2asXML))
}
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/xml"
        "fmt"
)
&nbsp;
type <strong>User1</strong> struct {
        XMLName xml.Name `xml:"user"`
        id      uint32   `xml:"id"`
        name    string   `xml:"user_name"`
        surname string   `xml:"surname"`
}
&nbsp;
type <strong>User2</strong> struct {
        XMLName xml.Name `xml:"user"`
        Id      uint32   `xml:"id"`
        Name    string   `xml:"user_name"`
        Surname string   `xml:"surname"`
}
&nbsp;
func <strong>main</strong>() {
        user1 := User1{
                id:      1,
                name:    "Pepek",
                surname: "Vyskoč"}
&nbsp;
        user2 := User2{
                Id:      1,
                Name:    "Pepek",
                Surname: "Vyskoč"}
&nbsp;
        user1asXML, _ := xml.MarshalIndent(user1, "", "    ")
        fmt.Println(string(user1asXML))
&nbsp;
        fmt.Println()
&nbsp;
        user2asXML, _ := xml.MarshalIndent(user2, "", "    ")
        fmt.Println(string(user2asXML))
&nbsp;
        fmt.Println()
&nbsp;
        user2asXML, _ = xml.MarshalIndent(user2, "", "\t")
        fmt.Println(string(user2asXML))
&nbsp;
        fmt.Println()
&nbsp;
        user2asXML, _ = xml.MarshalIndent(user2, "\t", "\t")
        fmt.Println(string(user2asXML))
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Struktura XML odlišná od struktury původních serializovaných dat</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/xml"
        "fmt"
)
&nbsp;
type <strong>User1</strong> struct {
        XMLName xml.Name `xml:"user"`
        id      uint32   `xml:"id"`
        name    string   `xml:"name&gt;first"`
        surname string   `xml:"name&gt;last"`
}
&nbsp;
type <strong>User2</strong> struct {
        XMLName xml.Name `xml:"user"`
        Id      uint32   `xml:"id"`
        Name    string   `xml:"name&gt;first"`
        Surname string   `xml:"name&gt;last"`
}
&nbsp;
func <strong>main</strong>() {
        user1 := User1{
                id:      1,
                name:    "Pepek",
                surname: "Vyskoč"}
&nbsp;
        user2 := User2{
                Id:      1,
                Name:    "Pepek",
                Surname: "Vyskoč"}
&nbsp;
        user1asXML, _ := xml.MarshalIndent(user1, "", "    ")
        fmt.Println(string(user1asXML))
&nbsp;
        fmt.Println()
&nbsp;
        user2asXML, _ := xml.MarshalIndent(user2, "", "    ")
        fmt.Println(string(user2asXML))
&nbsp;
        fmt.Println()
&nbsp;
        user2asXML, _ = xml.MarshalIndent(user2, "", "\t")
        fmt.Println(string(user2asXML))
&nbsp;
        fmt.Println()
&nbsp;
        user2asXML, _ = xml.MarshalIndent(user2, "\t", "\t")
        fmt.Println(string(user2asXML))
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Serializace polí, speciální hodnoty, ukazatele apod.</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/xml"
        "fmt"
)
&nbsp;
func <strong>main</strong>() {
        var a1 [10]byte
        var a2 [10]int32
        a3 := [10]int32{1, 10, 2, 9, 3, 8, 4, 7, 5, 6}
        a4 := []string{"www", "root", "cz"}
        a5 := []interface{}{1, "root", 3.1415, true, []int{1, 2, 3, 4}}
        matice := [4][3]float32{
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9},
                {0, -1, 0},
        }
&nbsp;
        a1asXML, _ := xml.Marshal(a1)
        fmt.Println(string(a1asXML))
&nbsp;
        a2asXML, _ := xml.Marshal(a2)
        fmt.Println(string(a2asXML))
&nbsp;
        a3asXML, _ := xml.Marshal(a3)
        fmt.Println(string(a3asXML))
&nbsp;
        a4asXML, _ := xml.Marshal(a4)
        fmt.Println(string(a4asXML))
&nbsp;
        a5asXML, _ := xml.Marshal(a5)
        fmt.Println(string(a5asXML))
&nbsp;
        maticeasXML, _ := xml.Marshal(matice)
        fmt.Println(string(maticeasXML))
}
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/xml"
        "fmt"
        "math"
)
&nbsp;
type Foobar struct {
        XMLName xml.Name `xml:"foobar"`
        Id      uint32   `xml:"id"`
        X       float64  `xml:"x"`
        Y       float64  `xml:"y"`
        Z       float64  `xml:"z"`
        Next    *Foobar  `xml:"foobar"`
}
&nbsp;
func <strong>main</strong>() {
        f := Foobar{
                Id:   42,
                X:    math.NaN(),
                Y:    math.Inf(1),
                Z:    math.Inf(-1),
                Next: nil}
&nbsp;
        g := Foobar{
                Id:   43,
                X:    math.NaN(),
                Y:    math.Inf(1),
                Z:    math.Inf(-1),
                Next: &amp;f}
&nbsp;
        asXML, err := xml.MarshalIndent(g, "", "    ")
        if err != nil {
                fmt.Println(err)
        } else {
                fmt.Println(string(asXML))
        }
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Serializace sekvence struktur</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/xml"
        "fmt"
)
&nbsp;
type <strong>User</strong> struct {
        XMLName xml.Name `xml:"user"`
        Id      uint32   `xml:"id"`
        Name    string   `xml:"user_name"`
        Surname string   `xml:"surname"`
}
&nbsp;
func <strong>main</strong>() {
        var users = [3]User{
                User{
                        Id:      1,
                        Name:    "Pepek",
                        Surname: "Vyskoč"},
                User{
                        Id:      2,
                        Name:    "Pepek",
                        Surname: "Vyskoč"},
                User{
                        Id:      3,
                        Name:    "Josef",
                        Surname: "Vyskočil"},
        }
&nbsp;
        usersAsXML, _ := xml.MarshalIndent(users, "", "    ")
        fmt.Println(string(usersAsXML))
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Obalení sekvence struktur dalším datovým typem</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/xml"
        "fmt"
)
&nbsp;
type <strong>User</strong> struct {
        Id      uint32 `xml:"id"`
        Name    string `xml:"user_name"`
        Surname string `xml:"surname"`
}
&nbsp;
type <strong>Users</strong> struct {
        XMLName xml.Name `xml:"users"`
        List    []User
}
&nbsp;
func <strong>main</strong>() {
        var users Users = Users{
                List: []User{
                        User{
                                Id:      1,
                                Name:    "Pepek",
                                Surname: "Vyskoč"},
                        User{
                                Id:      2,
                                Name:    "Pepek",
                                Surname: "Vyskoč"},
                        User{
                                Id:      3,
                                Name:    "Josef",
                                Surname: "Vyskočil"},
                },
        }
&nbsp;
        usersAsXML, _ := xml.MarshalIndent(users, "", "    ")
        fmt.Println(string(usersAsXML))
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vylepšení předchozích příkladů</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/xml"
        "fmt"
)
&nbsp;
type <strong>User</strong> struct {
        XMLName xml.Name `xml:"user"`
        Id      uint32   `xml:"id"`
        Name    string   `xml:"user_name"`
        Surname string   `xml:"surname"`
}
&nbsp;
type <strong>User</strong>s struct {
        XMLName xml.Name `xml:"users"`
        List    []User
}
&nbsp;
func <strong>main</strong>() {
        var users Users = Users{
                List: []User{
                        User{
                                Id:      1,
                                Name:    "Pepek",
                                Surname: "Vyskoč"},
                        User{
                                Id:      2,
                                Name:    "Pepek",
                                Surname: "Vyskoč"},
                        User{
                                Id:      3,
                                Name:    "Josef",
                                Surname: "Vyskočil"},
                },
        }
&nbsp;
        usersAsXML, _ := xml.MarshalIndent(users, "", "    ")
        fmt.Println(string(usersAsXML))
}
</pre>


<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/xml"
        "fmt"
)
&nbsp;
type <strong>User</strong> struct {
        Id      uint32 `xml:"id"`
        Name    string `xml:"user_name"`
        Surname string `xml:"surname"`
}
&nbsp;
type <strong>User</strong>s struct {
        XMLName xml.Name `xml:"users"`
        List    []User   `xml:"user"`
}
&nbsp;
func <strong>main</strong>() {
        var users Users = Users{
                List: []User{
                        User{
                                Id:      1,
                                Name:    "Pepek",
                                Surname: "Vyskoč"},
                        User{
                                Id:      2,
                                Name:    "Pepek",
                                Surname: "Vyskoč"},
                        User{
                                Id:      3,
                                Name:    "Josef",
                                Surname: "Vyskočil"},
                },
        }
&nbsp;
        usersAsXML, _ := xml.MarshalIndent(users, "", "    ")
        fmt.Println(string(usersAsXML))
}
</pre>


<p><a name="k11"></a></p>
<h2 id="k11">11. Serializace jedné struktury jak do JSONu, tak i do XML &ndash; problematika anotačních řetězců</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/json"
        "encoding/xml"
        "fmt"
)
&nbsp;
type <strong>User</strong> struct {
        XMLName xml.Name `xml:"user" json:"-"`
        Id      uint32   `xml:"id" json:"user_id"`
        Name    string   `xml:"name&gt;first" json:"user_name"`
        Surname string   `xml:"name&gt;last" json:"surname"`
}
&nbsp;
func <strong>main</strong>() {
        user := User{
                Id:      1,
                Name:    "Pepek",
                Surname: "Vyskoč"}
&nbsp;
        userAsXML, _ := xml.MarshalIndent(user, "", "    ")
        fmt.Println(string(userAsXML))
&nbsp;
        fmt.Println()
&nbsp;
        userAsJSON, _ := json.Marshal(user)
        fmt.Println(string(userAsJSON))
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Binární formáty a programovací jazyk Go</h2>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně šest až sedm megabajtů), můžete namísto toho použít odkazy na
jednotlivé demonstrační příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_json_marshal_floats.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/01_json_marshal_floats.go">https://github.com/tisnik/go-root/blob/master/article_57/01_json_marshal_floats.go</a></td></tr>
<tr><td> 2</td><td>02_json_marshal_floats_specvalues.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/02_json_marshal_floats_specvalues.go">https://github.com/tisnik/go-root/blob/master/article_57/02_json_marshal_floats_specvalues.go</a></td></tr>
<tr><td> 3</td><td>03_json_marshal_arrays.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/03_json_marshal_arrays.go">https://github.com/tisnik/go-root/blob/master/article_57/03_json_marshal_arrays.go</a></td></tr>
<tr><td> 4</td><td>04_xml_marshal_struct_1.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/04_xml_marshal_struct_1.go">https://github.com/tisnik/go-root/blob/master/article_57/04_xml_marshal_struct_1.go</a></td></tr>
<tr><td> 5</td><td>05_xml_marshal_struct_2.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/05_xml_marshal_struct_2.go">https://github.com/tisnik/go-root/blob/master/article_57/05_xml_marshal_struct_2.go</a></td></tr>
<tr><td> 6</td><td>06_xml_marshal_struct_3.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/06_xml_marshal_struct_3.go">https://github.com/tisnik/go-root/blob/master/article_57/06_xml_marshal_struct_3.go</a></td></tr>
<tr><td> 7</td><td>07_xml_marshal_struct_4_indent.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/07_xml_marshal_struct_4_indent.go">https://github.com/tisnik/go-root/blob/master/article_57/07_xml_marshal_struct_4_indent.go</a></td></tr>
<tr><td> 8</td><td>08_xml_marshal_struct_5_control.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/08_xml_marshal_struct_5_control.go">https://github.com/tisnik/go-root/blob/master/article_57/08_xml_marshal_struct_5_control.go</a></td></tr>
<tr><td> 9</td><td>09_xml_marshal_arrays.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/09_xml_marshal_arrays.go">https://github.com/tisnik/go-root/blob/master/article_57/09_xml_marshal_arrays.go</a></td></tr>
<tr><td>10</td><td>10_xml_marshal_special_types.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/10_xml_marshal_special_types.go">https://github.com/tisnik/go-root/blob/master/article_57/10_xml_marshal_special_types.go</a></td></tr>
<tr><td>11</td><td>11_xml_marshal_array_of_struct_1.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/11_xml_marshal_array_of_struct_1.go">https://github.com/tisnik/go-root/blob/master/article_57/11_xml_marshal_array_of_struct_1.go</a></td></tr>
<tr><td>12</td><td>12_xml_marshal_array_of_struct_2.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/12_xml_marshal_array_of_struct_2.go">https://github.com/tisnik/go-root/blob/master/article_57/12_xml_marshal_array_of_struct_2.go</a></td></tr>
<tr><td>13</td><td>13_xml_marshal_array_of_struct_3.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/13_xml_marshal_array_of_struct_3.go">https://github.com/tisnik/go-root/blob/master/article_57/13_xml_marshal_array_of_struct_3.go</a></td></tr>
<tr><td>14</td><td>14_xml_marshal_array_of_struct_4.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/14_xml_marshal_array_of_struct_4.go">https://github.com/tisnik/go-root/blob/master/article_57/14_xml_marshal_array_of_struct_4.go</a></td></tr>
<tr><td>15</td><td>15_xml_and_json.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/15_xml_and_json.go">https://github.com/tisnik/go-root/blob/master/article_57/15_xml_and_json.go</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/">https://github.com/tisnik/go-root/blob/master/article_57/</a></td></tr>
<tr><td>17</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_57/">https://github.com/tisnik/go-root/blob/master/article_57/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Formát BSON<br />
<a href="http://bsonspec.org/">http://bsonspec.org/</a>
</li>

<li>Golang Guide: A List of Top Golang Frameworks, IDEs &amp; Tools<br />
<a href="https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/">https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/</a>
</li>

<li>Repositář projektu Gift<br />
<a href="https://github.com/disintegration/gift">https://github.com/disintegration/gift</a>
</li>

<li>Dokumentace k&nbsp;projektu Gift<br />
<a href="https://godoc.org/github.com/disintegration/gift">https://godoc.org/github.com/disintegration/gift</a>
</li>

<li>Online x86 / x64 Assembler and Disassembler<br />
<a href="https://defuse.ca/online-x86-assembler.htm#disassembly2">https://defuse.ca/online-x86-assembler.htm#disassembly2</a>
</li>

<li>The Design of the Go Assembler<br />
<a href="https://talks.golang.org/2016/asm.slide#1">https://talks.golang.org/2016/asm.slide#1</a>
</li>

<li>A Quick Guide to Go's Assembler<br />
<a href="https://golang.org/doc/asm">https://golang.org/doc/asm</a>
</li>

<li>AssemblyPolicy<br />
<a href="https://github.com/golang/go/wiki/AssemblyPolicy">https://github.com/golang/go/wiki/AssemblyPolicy</a>
</li>

<li>Geohash in Golang Assembly<br />
<a href="https://mmcloughlin.com/posts/geohash-assembly">https://mmcloughlin.com/posts/geohash-assembly</a>
</li>

<li>Command objdump<br />
<a href="https://golang.org/cmd/objdump/">https://golang.org/cmd/objdump/</a>
</li>

<li>Assembly<br />
<a href="https://goroutines.com/asm">https://goroutines.com/asm</a>
</li>

<li>Go &amp; Assembly<br />
<a href="http://www.doxsey.net/blog/go-and-assembly">http://www.doxsey.net/blog/go-and-assembly</a>
</li>

<li>A Foray Into Go Assembly Programming<br />
<a href="https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming/">https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming/</a>
</li>

<li>Golang Capturing log.Println And fmt.Println Output<br />
<a href="https://medium.com/@hau12a1/golang-capturing-log-println-and-fmt-println-output-770209c791b4">https://medium.com/@hau12a1/golang-capturing-log-println-and-fmt-println-output-770209c791b4</a>
</li>

<li>Stránka projektu plotly<br />
<a href="https://plot.ly/">https://plot.ly/</a>
</li>

<li>Plotly JavaScript Open Source Graphing Library<br />
<a href="https://plot.ly/javascript/">https://plot.ly/javascript/</a>
</li>

<li>Domain coloring<br />
<a href="https://en.wikipedia.org/wiki/Domain_coloring">https://en.wikipedia.org/wiki/Domain_coloring</a>
</li>

<li>Michael Fogleman's projects<br />
<a href="https://www.michaelfogleman.com/projects/tagged/graphics/">https://www.michaelfogleman.com/projects/tagged/graphics/</a>
</li>

<li>Color Graphs of Complex Functions<br />
<a href="https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html">https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html</a>
</li>

<li>A Gallery of Complex Functions<br />
<a href="http://wismuth.com/complex/gallery.html">http://wismuth.com/complex/gallery.html</a>
</li>

<li>package glot<br />
<a href="https://godoc.org/github.com/Arafatk/glot">https://godoc.org/github.com/Arafatk/glot</a>
</li>

<li>Gnuplotting: Output terminals<br />
<a href="http://www.gnuplotting.org/output-terminals/">http://www.gnuplotting.org/output-terminals/</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1">https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://blog.gopheracademy.com/advent-2018/introducing-glot/">https://blog.gopheracademy.com/advent-2018/introducing-glot/</a>
</li>

<li>Glot is a plotting library for Golang built on top of gnuplot<br />
<a href="https://github.com/Arafatk/glot">https://github.com/Arafatk/glot</a>
</li>

<li>Example plots (gonum/plot)<br />
<a href="https://github.com/gonum/plot/wiki/Example-plots">https://github.com/gonum/plot/wiki/Example-plots</a>
</li>

<li>A repository for plotting and visualizing data (gonum/plot)<br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>golang library to make https://chartjs.org/ plots<br />
<a href="https://github.com/brentp/go-chartjs">https://github.com/brentp/go-chartjs</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>The Gonum Numerical Computing Package<br />
<a href="https://www.gonum.org/post/introtogonum/">https://www.gonum.org/post/introtogonum/</a>
</li>

<li>Gomacro na GitHubu<br />
<a href="https://github.com/cosmos72/gomacro">https://github.com/cosmos72/gomacro</a>
</li>

<li>gophernotes - Use Go in Jupyter notebooks and nteract<br />
<a href="https://github.com/gopherdata/gophernotes">https://github.com/gopherdata/gophernotes</a>
</li>

<li>gonum<br />
<a href="https://github.com/gonum">https://github.com/gonum</a>
</li>

<li>go-gota/gota -  DataFrames and data wrangling in Go (Golang)<br />
<a href="https://porter.io/github.com/go-gota/gota">https://porter.io/github.com/go-gota/gota</a>
</li>

<li>A repository for plotting and visualizing data <br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>Gonum Numerical Packages<br />
<a href="https://www.gonum.org/">https://www.gonum.org/</a>
</li>

<li>Stránky projektu MinIO<br />
<a href="https://min.io/">https://min.io/</a>
</li>

<li>MinIO Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-quickstart-guide.html">https://docs.min.io/docs/minio-quickstart-guide.html</a>
</li>

<li>MinIO Go Client API Reference<br />
<a href="https://docs.min.io/docs/golang-client-api-reference">https://docs.min.io/docs/golang-client-api-reference</a>
</li>

<li>MinIO Python Client API Reference<br />
<a href="https://docs.min.io/docs/python-client-api-reference.html">https://docs.min.io/docs/python-client-api-reference.html</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>MinIO Client Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a>
</li>

<li>Analýza kvality zdrojových kódů Minia<br />
<a href="https://goreportcard.com/report/github.com/minio/minio">https://goreportcard.com/report/github.com/minio/minio</a>
</li>

<li>This is MinIO<br />
<a href="https://www.youtube.com/watch?v=vF0lQh0XOCs">https://www.youtube.com/watch?v=vF0lQh0XOCs</a>
</li>

<li>Running MinIO Standalone<br />
<a href="https://www.youtube.com/watch?v=dIQsPCHvHoM">https://www.youtube.com/watch?v=dIQsPCHvHoM</a>
</li>

<li>"Amazon S3 Compatible Storage in Kubernetes" - Rob Girard, Principal Tech Marketing Engineer, Minio<br />
<a href="https://www.youtube.com/watch?v=wlpn8K0jJ4U">https://www.youtube.com/watch?v=wlpn8K0jJ4U</a>
</li>

<li>Ginkgo<br />
<a href="http://onsi.github.io/ginkgo/">http://onsi.github.io/ginkgo/</a>
</li>

<li>Gomega<br />
<a href="https://onsi.github.io/gomega/">https://onsi.github.io/gomega/</a>
</li>

<li>Ginkgo's Preferred Matcher Library na GitHubu<br />
<a href="https://github.com/onsi/gomega/">https://github.com/onsi/gomega/</a>
</li>

<li>Provided Matchers<br />
<a href="http://onsi.github.io/gomega/#provided-matchers">http://onsi.github.io/gomega/#provided-matchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku goexpect<br />
<a href="https://godoc.org/github.com/google/goexpect">https://godoc.org/github.com/google/goexpect</a>
</li>

<li>Balíček goexpect<br />
<a href="https://github.com/google/goexpect">https://github.com/google/goexpect</a>
</li>

<li>Balíček go-expect<br />
<a href="https://github.com/Netflix/go-expect">https://github.com/Netflix/go-expect</a>
</li>

<li>Balíček gexpect<br />
<a href="https://github.com/ThomasRooney/gexpect">https://github.com/ThomasRooney/gexpect</a>
</li>

<li>Expect (originál naprogramovaný v&nbsp;TCL)<br />
<a href="https://core.tcl-lang.org/expect/index">https://core.tcl-lang.org/expect/index</a>
</li>

<li>Expect (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Expect">https://en.wikipedia.org/wiki/Expect</a>
</li>

<li>Pexpect<br />
<a href="https://pexpect.readthedocs.io/en/stable/">https://pexpect.readthedocs.io/en/stable/</a>
</li>

<li>Golang SSH Client: Multiple Commands, Crypto &amp; Goexpect Examples<br />
<a href="http://networkbit.ch/golang-ssh-client/">http://networkbit.ch/golang-ssh-client/</a>
</li>

<li>goblin na GitHubu<br />
<a href="https://github.com/franela/goblin">https://github.com/franela/goblin</a>
</li>

<li>Mocha framework<br />
<a href="https://mochajs.org/">https://mochajs.org/</a>
</li>

<li>frisby na GitHubu<br />
<a href="https://github.com/verdverm/frisby">https://github.com/verdverm/frisby</a>
</li>

<li>package frisby<br />
<a href="https://godoc.org/github.com/verdverm/frisby">https://godoc.org/github.com/verdverm/frisby</a>
</li>

<li>Frisby alternatives and similar packages (generováno)<br />
<a href="https://go.libhunt.com/frisby-alternatives">https://go.libhunt.com/frisby-alternatives</a>
</li>

<li>Cucumber for golang<br />
<a href="https://github.com/DATA-DOG/godog">https://github.com/DATA-DOG/godog</a>
</li>

<li>How to Use Godog for Behavior-driven Development in Go<br />
<a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go</a>
</li>

<li>Comparative Analysis Of GoLang Testing Frameworks<br />
<a href="https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks">https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks</a>
</li>

<li>A Quick Guide to Testing in Golang<br />
<a href="https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/">https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/</a>
</li>

<li>Tom's Obvious, Minimal Language.<br />
<a href="https://github.com/toml-lang/toml">https://github.com/toml-lang/toml</a>
</li>

<li>xml.org<br />
<a href="http://www.xml.org/">http://www.xml.org/</a>
</li>

<li>Soubory .properties<br />
<a href="https://en.wikipedia.org/wiki/.properties">https://en.wikipedia.org/wiki/.properties</a>
</li>

<li>Soubory INI<br />
<a href="https://en.wikipedia.org/wiki/INI_file">https://en.wikipedia.org/wiki/INI_file</a>
</li>

<li>JSON to YAML<br />
<a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a>
</li>

<li>Data Format Converter<br />
<a href="https://toolkit.site/format.html">https://toolkit.site/format.html</a>
</li>

<li>Viper na GitHubu<br />
<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>
</li>

<li>GoDotEnv na GitHubu<br />
<a href="https://github.com/joho/godotenv">https://github.com/joho/godotenv</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

