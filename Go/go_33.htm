<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Systém modulů v programovacím jazyce Go</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Systém modulů v programovacím jazyce Go</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Jedním z problematických rysů programovacího jazyka Go byl neexistující systém pro práci s balíčky. Pochopitelně vzniklo několik externích nástrojů, které správu balíčků realizují, ovšem z dlouhodobého hlediska je výhodnější používat takzvané moduly poprvé zavedené ve verzi 1.11.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Systém modulů v&nbsp;programovacím jazyce Go</a></p>
<p><a href="#k02">2. Původní koncept jazyka Go</a></p>
<p><a href="#k03">3. Největší nevýhody původního konceptu</a></p>
<p><a href="#k04">4. Instalace Go verze 1.13</a></p>
<p><a href="#k05">5. Balíčky, moduly a repositáře</a></p>
<p><a href="#k06">6. Vytvoření prvního jednoduchého modulu</a></p>
<p><a href="#k07">7. Zdrojový kód modulu, překlad a spuštění modulu</a></p>
<p><a href="#k08">8. Přidání balíčku, na němž modul závisí</a></p>
<p><a href="#k09">9. Soubor <strong>go.sum</strong></a></p>
<p><a href="#k10">10. Struktura adresáře <strong>$GOPATH</strong> po stažení balíčku</a></p>
<p><a href="#k11">11. Verzování balíčků</a></p>
<p><a href="#k12">12. Problematika potencionálního rozbití API</a></p>
<p><a href="#k13">13. Změna minoritní verze modulu</a></p>
<p><a href="#k14">14. Změna majoritní verze modulu</a></p>
<p><a href="#k15">15. Vytvoření externí knihovny s&nbsp;několika majoritními verzemi a jednou verzí minoritní</a></p>
<p><a href="#k16">16. Použití externí knihovny s&nbsp;více majoritními verzemi v&nbsp;demonstračním projektu</a></p>
<p><a href="#k17">17. Sémantické importy</a></p>
<p><a href="#k18">18. Změna demonstračního příkladu &ndash; využití sémantického importu</a></p>
<p><a href="#k19">19. Repositáře s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Systém modulů v&nbsp;programovacím jazyce Go</h2>

<p>V&nbsp;dnešní části <a
href="http://www.root.cz/serialy/programovaci-jazyk-go">seriálu o programovacím
jazyce Go</a> se seznámíme se základními vlastnostmi oficiálního systému
modulů, na který mnozí vývojáři poměrně dlouho čekali. V&nbsp;původních verzích
jazyka Go se totiž nepočítalo s&nbsp;tím, že by vyvíjené aplikace mohly
vyžadovat konkrétní verze balíčků (třetích stran) a už vůbec ne s&nbsp;tím, že
se při vývoji jednotlivých balíčků (typicky knihoven) může měnit jejich API.
Oficiální, ovšem v&nbsp;reálném světě těžko zajistitelnou doktrínou bylo, že
balíček (<i>package</i>) určitého jména nikdy nezmění své API a pokud by ke
změně mělo dojít, měl by se balíček přejmenovat. Jednalo se o dosti
problematický rys celého ekosystému jazyka Go, který byl jen do určité míry
řešen externími nástroji, jichž za relativně krátkou dobu existence Go vzniklo
<a href="https://github.com/golang/go/wiki/PackageManagementTools">prakticky
nepřeberné množství</a>. Tento stav však začal být neúnosný a možná podstatným
způsobem zbrzdil rozšíření programovacího jazyka Go (už jen z&nbsp;toho důvodu,
že mnohé ostatní ekosystémy do značné míry tento problém mají vyřešený: Maven,
npm, pip, Cargo atd.):</p>

<p><i>dep was the "official experiment." The Go toolchain, as of 1.11, has
adopted an approach that sharply diverges from dep. As a result, we are
continuing development of dep, but gearing work primarily towards the
development of an alternative prototype for versioning behavior in the
toolchain.</i></p>

<p>Jak je z&nbsp;předchozí citace zřejmé, objevil se v&nbsp;toolchainu
programovacího jazyka Go verze 1.11 (i když jen
v&nbsp;&bdquo;preliminary&ldquo; variantě) oficiální systém pro práci
s&nbsp;takzvanými <i>moduly</i>. Tento systém je postupně stabilizován, takže
si v&nbsp;dnešním článku ukážeme jeho použití s&nbsp;prozatím nejnovějším
oficiálním vydáním programovacího jazyka Go &ndash; <a
href="https://golang.org/doc/go1.13">Go verze 1.13</a>.</p>

<p><div class="rs-tip-major">Poznámka: právě z&nbsp;toho důvodu, že dnes již
existuje de facto oficiální správce modulů v&nbsp;toolchainu Go, jsme se
v&nbsp;tomto seriálu nezabývali dalšími projekty, které řeší správu balíčků a
ani se těmito projekty pravděpodobně zabývat nebudeme. Některé z&nbsp;těchto
projektů sice jsou (alespoň podle mého skromného názoru) technologicky
propracovanější, než oficiální systém modulů, ovšem v&nbsp;tomto případě hraje
největší roli standardizace (a právě jazyk Go je jazykem, který se snaží
standardy dodržovat).</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Původní koncept jazyka Go</h2>

<p>Nejdříve si alespoň ve stručnosti připomeňme, jak vlastně vypadal původní
koncept programovacího jazyka Go při práci s&nbsp;balíčky (<i>package</i>), a
to jak s&nbsp;balíčky lokálními, tak i s&nbsp;externími knihovnami. Již <a
href="http://www.root.cz/clanky/go-minimalisticky-a-prekvapive-vykonny-programovaci-jazyk">v&nbsp;úvodním
článku</a> <a href="http://www.root.cz/serialy/programovaci-jazyk-go">tohoto
seriálu</a> jsme si řekli, že při instalaci programovacího jazyka Go je vhodné
nastavit proměnnou <strong>GOPATH</strong>, například na adresář
<strong>~/home/go</strong>. Ve skutečnosti je problematika proměnné prostředí
<strong>GOPATH</strong> a jejího významu poněkud složitější, protože tato
proměnná by měla obsahovat absolutní (!) cestu k&nbsp;adresáři, který má či
bude mít následující strukturu:</p>

<pre>
.
├── bin
│   ├──
│   └──
├── pkg
│   ├──
│   └──
└── src
    ├──
    ├──
    └──
</pre>

<p>Celý adresář se v&nbsp;dokumentaci nazývá pracovní plocha (<i>workspace</i>)
a obsahuje tři podadresáře pojmenované <strong>src</strong>,
<strong>pkg</strong> a <strong>bin</strong>. Z&nbsp;pohledu vývojáře je
nejdůležitější podadresář <strong>src</strong>, v&nbsp;němž jsou typicky
uloženy repositáře (<i>repository</i>) a v&nbsp;každém repositáři je umístěn
libovolný počet balíčků (<i>package</i>). V&nbsp;balíčcích už nalezneme
jednotlivé zdrojové soubory <strong>.go</strong>, pomocné skripty, datové
soubory, dokumentaci, testy atd. Workspace představovaný adresářem nazvaným
<strong>go</strong>, v&nbsp;němž jsou umístěny tři repositáře, může vypadat
například následovně:</p>

<pre>
.
└── go
    ├── bin
    ├── pkg
    └── src
        ├── repository1
        │   ├── hello1
        │   │   └── hello.go
        │   └── hello2
        │       └── hello.go
        ├── repository2
        └── repository3
</pre>

<p>Vidíme, že v&nbsp;repositáři pojmenovaném <strong>repository1</strong> jsou
umístěny dva balíčky, které mají názvy <strong>hello1</strong> a
<strong>hello2</strong>, přičemž v&nbsp;každém balíčku je jediný zdrojový
soubor, který je (čistě náhodou) shodně pojmenován <strong>hello.go</strong>
(což v&nbsp;tomto případě nevadí, protože nedojde ke kolizi).</p>

<p>Soubor <strong>hello.go</strong> může vypadat následovně:</p>

<pre>
package main
&nbsp;
func main() {
        println("repository1: Hello world!")
}
</pre>

<p><div class="rs-tip-major">Poznámka: aby byl výsledný soubor, který vznikne
překladem, spustitelný, musí obsahovat funkci <strong>main</strong> a samotné
označení balíčku se taktéž musí jmenovat <strong>main</strong>.</div></p>

<p>Instalace externích knihoven, na nichž mohla nějaká aplikace záviset, se
prováděla (a stále může provádět) příkazem <strong>go get</strong>.</p>

<p>Pokud například budeme potřebovat vypočítat <a
href="https://cs.wikipedia.org/wiki/Leven%C5%A1tejnova_vzd%C3%A1lenost">Levenštejnovu
vzdálenost dvou řetězců</a> (což se provádí poměrně často například při
implementaci uživatelsky přívětivé funkce <i>Search</i>), můžeme pro tento účel
použít knihovnu/balíček s&nbsp;názvem <strong>levenshtein</strong> a
s&nbsp;cestou <strong>github.com/agext/levenshtein</strong>, která je dostupná
na GitHubu, konkrétně na adrese <a
href="https://github.com/agext/levenshtein">https://github.com/agext/levenshtein</a>
(součástí plné cesty balíčku je skutečně i &bdquo;github.com&ldquo;).</p>

<p><div class="rs-tip-major">Mimochodem &ndash; odkazy na tuto a další knihovny
naleznete na stránce <a
href="https://github.com/avelino/awesome-go">https://github.com/avelino/awesome-go</a>,
která samozřejmě neobsahuje všechny balíčky, které pro Go vznikly, ale pouze
okomentované a odzkoušené knihovny (neměl by se zde tedy vyskytnout žádný
&bdquo;odpad&ldquo; ani potenciálně škodlivé knihovny).</p></div></p>

<p>Balíček <strong>agext/levenshtein</strong> se instaluje velmi snadno, a to
již výše zmíněným příkazem <strong>go get</strong>, kterému předáme jméno
repositáře s&nbsp;balíčkem (ovšem vynechá se protokol!):</p>

<pre>
$ <strong>go get github.com/agext/levenshtein</strong>
</pre>

<p>Pokud chcete vidět, jaké operace se provádí, přidejte přepínač
<strong>-v</strong>:</p>

<pre>
$ <strong>go get -v github.com/agext/levenshtein</strong>
&nbsp;
github.com/agext/levenshtein (download)
</pre>

<p>Nyní by měla adresářová struktura <strong>~/go</strong> (přesněji řečeno
adresář, na který ukazuje proměnná prostředí <strong>$GOPATH</strong>) vypadat
zhruba následovně:</p>

<pre>
.
.
└── go
    ├── bin
    ├── pkg
    │   └── linux_amd64
    │       └── github.com
    │           └── agext
    │               └── levenshtein.a
    └── src
        ├── github.com
        ├── agext
        │   └── levenshtein
        │       ├── DCO
        │       ├── levenshtein.go
        │       ├── levenshtein_test.go
        │       ├── LICENSE
        │       ├── MAINTAINERS
        │       ├── NOTICE
        │       ├── params.go
        │       ├── params_test.go
        │       └── README.md
        ├── repository1
        │   ├── hello1
        │   │   └── hello.go
        │   └── hello2
        │       └── hello.go
        ├── repository2
        └── repository3
&nbsp;
15 directories, 16 files
</pre>

<p>Povšimněte si, že se balíček nainstaloval jak do podadresáře
<strong>src</strong> (vlastní zdrojové kódy, testy, licence, další
dokumentace), tak i do podadresáře <strong>pkg</strong> (binární knihovna
určená pro slinkování s&nbsp;kódem výsledných aplikací). Po instalaci je
součástí cesty k&nbsp;balíčku skutečně i prefix <strong>github.com</strong>,
protože zdrojové kódy balíčku leží v&nbsp;podadresáři
<strong>src/github.com/agext/levenshtein</strong>.</p>

<p>Příkaz <strong>go list</strong> by nyní měl ukázat informace i o nově
nainstalované knihovně <strong>agext/levenshtein</strong>:</p>

<pre>
$ <strong>go list ...</strong>
&nbsp;
...
...
...
github.com/agext/levenshtein
...
...
...
</pre>

<p>Podobně uvidíme základní informace o balíčku i na dynamicky generovaných
stránkách s&nbsp;dokumentací.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Největší nevýhody původního konceptu</h2>

<p><a href="#k02">V&nbsp;předchozí kapitole</a> jsme si ukázali, že i
v&nbsp;původním Go, resp.&nbsp;přesněji řečeno při použití původního konceptu
práce s&nbsp;balíčky, bylo možné alespoň nějakým způsobem standardně pracovat
s&nbsp;externími balíčky a knihovnami, na nichž závisela vyvíjená aplikace.
Ovšem současně měl tento systém hned několik špatných vlastností, mezi které
patří zejména:</p>

<ol>

<li>Všechny projekty, nezávisle na tom, jakého mají zákazníka a popř.&nbsp;pro
koho jsou vytvářeny, musí být umístěny ve stejném adresáři, na nějž ukazuje
proměnná prostředí <strong>$GOPATH</strong>. Teoreticky je sice možné
<strong>$GOPATH</strong> přepínat, ale jedná se o dosti křehké řešení.</li>

<li>Prakticky žádným rozumným způsobem není řešeno verzování balíčků. To
znamená, že není možné specifikovat verzi balíčku, s&nbsp;nímž budeme
potřebovat pracovat a tím pádem ani není možné použít dvě verze stejného
balíčku. Tuto vlastnost ještě více umocňuje bod číslo 1, tedy umístění všech
zdrojových kódů v&nbsp;jediné adresářové struktuře.</li>

<li>Všechny externí balíčky je nutné nějakým způsobem udržovat, zjišťovat
případná CVE atd. Ovšem jak již plyne z&nbsp;bodů #1 a #2, je možné, že updatem
jediného balíčku se může rozbít prakticky libovolná vyvíjená aplikace &ndash;
typický &bdquo;dependency hell&ldquo;.</li>

<li>Pokud externí balíček závisí na dalších balíčcích, musíme řešit i takzvané
<i>tranzitivní závislosti</i>, s&nbsp;jejichž správou jednoduchý systém
založený na <strong>go get</strong> příliš nepočítá.</li>

</ol>

<p>Dále představený standardní systém balíčků se výše uvedené problémy snaží do
velké míry vyřešit.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace Go verze 1.13</h2>

<p>Doslova před několika dny bylo <a
href="https://blog.golang.org/go1.13">vydáno Go verze 1.13</a>, viz též <a
href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>.
Všechny dnes popisované ukázky a demonstrační příklady již budou tuto verzi
používat (už jen z&nbsp;toho důvodu, že oficiálně byly moduly v&nbsp;Go 1.11 a
Go 1.12 jen ve stavu &bdquo;preliminary&ldquo;), takže si v&nbsp;této kapitole
ve stručnosti ukážeme, jakým způsobem je možné Go 1.13 nainstalovat, a to i
v&nbsp;případě, kdy tato verze ještě není dostupná v&nbsp;balíčcích vaší
Linuxové distribuce. Předpokladem je, že předchozí verze Go byla nainstalována
do adresáře <strong>/opt/go</strong>, ovšem pochopitelně změna cíle instalace
je triviální.</p>

<p>Nejprve se zbavíme předchozí verze:</p>

<pre>
$ <strong>rm -rf /opt/go</strong>
<i>nebo</i>
$ <strong>sudo rm -rf /opt/go</strong>
</pre>

<p>Dále stáhneme novou verzi Go 1.13, zde konkrétně pro 64bitovou platformu
x86-64:</p>

<pre>
$ <strong>wget https://dl.google.com/go/go1.13.linux-amd64.tar.gz</strong>
&nbsp;
--2019-09-04 15:50:48--  https://dl.google.com/go/go1.13.linux-amd64.tar.gz
Resolving dl.google.com (dl.google.com)... 2a00:1450:4014:801::200e, 216.58.201.110
Connecting to dl.google.com (dl.google.com)|2a00:1450:4014:801::200e|:443... failed: No route to host.
Connecting to dl.google.com (dl.google.com)|216.58.201.110|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 120050424 (114M) [application/octet-stream]
Saving to: ‘go1.13.linux-amd64.tar.gz’
&nbsp;
go1.13.linux-amd64.tar.gz               100%[==============================================================================&gt;] 114.49M  68.6MB/s    in 1.7s    
&nbsp;
2019-09-04 15:50:50 (68.6 MB/s) - ‘go1.13.linux-amd64.tar.gz’ saved [120050424/120050424]
</pre>

<p>Stažený tarball rozbalíme, a to se specifikací cíle instalace, jímž je
adresář <strong>/opt/</strong>:</p>

<pre>
$ <strong>tar xvfz go1.13.linux-amd64.tar.gz -C /opt/</strong>
</pre>

<p>V&nbsp;tomto adresáři by se měla vytvořit struktura s&nbsp;celým toolingem
programovacího jazyka Go 1.13:</p>

<pre>
$ <strong>tree -d /opt -L 2</strong>
&nbsp;
/opt
└── go
    ├── api
    ├── bin
    ├── doc
    ├── lib
    ├── misc
    ├── pkg
    ├── src
    └── test
&nbsp;
9 directories
</pre>

<p>Přesvědčíme se, že adresář <strong>/opt/go/bin</strong> je na
<strong>PATH</strong>:</p>

<pre>
$ <strong>echo $PATH</strong>
/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/tester/bin:/opt/go/bin:/home/tester/.local/bin:/home/tester/bin
</pre>

<p>Dále se přesvědčíme, zda je nastavena proměnná <strong>GOPATH</strong>, a to
z&nbsp;důvodu zpětné kompatibility se starším systémem správy balíčků, který
jsme si popsali <a href="#k02">ve druhé kapitole</a>:</p>

<pre>
$ <strong>echo $GOPATH</strong>
/home/tester/go
</pre>

<p>V&nbsp;případě, že je <strong>PATH</strong> nastavená korektně, měl by
následující příkaz vypsat verzi právě nově nainstalovaného jazyka Go:</p>

<pre>
$ <strong>go version</strong>
go version go1.13 linux/amd64
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Balíčky, moduly a repositáře</h2>

<p>Při práci s&nbsp;moduly v&nbsp;programovacím jazyku Go se rozlišuje mezi
třemi termíny &ndash; balíčkem, modulem a repositářem:</p>

<ul>

<li><i>Balíček</i> je představován adresářem obsahujícím zdrojové kódy,
většinou i včetně testů. Zdrojové kódy v&nbsp;jednom adresáři většinou začínají
stejnou deklarací <strong>package</strong>.</li>

<li><i>Modul</i> se obecně může skládat z&nbsp;většího množství balíčků.
Všechny tyto balíčky jsou poskytovány a vydávány společně.
V&nbsp;nejjednodušším případě modul obsahuje jediný balíček (což bude i náš
případ).</li>

<li><i>Repositář</i> obecně obsahuje více modulů (většinou jediný modul).
V&nbsp;našich příkladech budeme počítat s&nbsp;tím, že v&nbsp;jednom repositáři
je jediný modul popř.&nbsp;více verzí jednoho modulu.</li>

</ul>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vytvoření prvního jednoduchého modulu</h2>

<p>Nyní by již mělo být vše připravené pro otestování standardního systému pro
práci s&nbsp;moduly. Všechny další příklady budou vytvářeny v&nbsp;adresáři
<strong>~/src</strong>, což konkrétně znamená, že se vyhneme použití adresáře,
na který ukazuje proměnná prostředí <strong>GOPATH</strong>.</p>

<p>Nejprve provedeme inicializaci modulu, což zajistí příkaz <strong>go mod
init</strong>, kterému předáme jméno repositáře, v&nbsp;němž může být modul
umístěn. Ovšem platí, že pokud tento modul nebude použitý jiným modulem, nemusí
být jméno repositáře shodné se skutečným repositářem (ovšem později si tím
zbytečně zkomplikujeme další práci, proto je lepší rozlišovat pouze <a
href="#k17">sémantické verze</a>).</p>

<p>Náš modul se bude jmenovat
<strong>github.com/tisnik/my-first-module</strong>, takže se jeho inicializace
provede následovně:</p>

<pre>
$ <strong>go mod init github.com/tisnik/my-first-module</strong>
&nbsp;
go: creating new go.mod: module github.com/tisnik/my-first-module
</pre>

<p>Tento příkaz provede jen jedinou operaci &ndash; do aktuálního adresáře
přidá soubor pojmenovaný <strong>go.mod</strong>, v&nbsp;němž budou (prozatím)
pouze dva řádky &ndash; vlastní jméno modulu a taktéž verze programovacího
jazyka Go, resp.&nbsp;přesněji řečeno celého toolchainu tohoto jazyka:</p>

<pre>
$ <strong>cat go.mod</strong>
&nbsp;
module github.com/tisnik/my-first-module
&nbsp;
go 1.13
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zdrojový kód modulu, překlad a spuštění modulu</h2>

<p>Nyní vytvoříme zdrojový kód modulu. Bude se jednat o jednoduchou aplikaci,
v&nbsp;níž je deklarována funkce <strong>Add</strong>, kterou si odzkoušíme na
čtyřech skupinách celých čísel. Vzhledem k&nbsp;tomu, že se skutečně má jednat
o spustitelnou aplikaci, použijeme, jak je zvykem, balíček
<strong>main</strong> a deklarovat budeme muset i funkci
<strong>main</strong>:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func <strong>Add</strong>(x int, y int) int {
        return x + y
}
&nbsp;
func <strong>main</strong>() {
        fmt.Println(Add(0, 0))
        fmt.Println(Add(1, 0))
        fmt.Println(Add(1, 2))
        fmt.Println(Add(-1, 2))
}
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto příkladu
(správně naformátovaný s&nbsp;využitím tabulátorů, což redakční systém Rootu
neumožňuje) naleznete na adrese <a
href="https://github.com/tisnik/go-1st-module/blob/master/adder.go">https://github.com/tisnik/go-1st-module/blob/master/adder.go</a>
(povšimněte si, že název repositáře je v&nbsp;tomto případě skutečně odlišný od
jména modulu, což však nevadí).</div></p>

<p>Modul přeložíme běžným způsobem, tj.&nbsp;příkazem <strong>go
build</strong>:</p>

<pre>
$ <strong>go build -o adder</strong>
</pre>

<p>A pro jistotu otestujeme, že výsledná aplikace (spustitelný binární soubor)
je skutečně plně funkční:</p>

<pre>
$ <strong>./adder</strong>
0
1
3
1
</pre>

<p><div class="rs-tip-major">Poznámka: co se vlastně změnilo oproti stavu, kdy
jazyk Go moduly nepodporoval? V&nbsp;našem případě se prozatím jedná jen o
maličkost &ndash; zdrojové kódy aplikace můžeme mít uloženy kdekoli a nemusíme
se ohlížet na adresářovou strukturu <strong>$GOPATH</strong>. Další výhody si
pochopitelně ukážeme v&nbsp;navazujících kapitolách.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Přidání balíčku, na němž modul závisí</h2>

<p>Nyní si ukažme, jakým způsobem se situace změní ve chvíli, kdy do našeho
projektu přidáme balíček, na němž projekt závisí. Samotný balíček bude velmi
jednoduchý (až triviální) a nalezneme ho na adrese <a
href="https://github.com/tisnik/intvalues">https://github.com/tisnik/intvalues</a>.
V&nbsp;tomto balíčku je umístěn jediný zdrojový soubor, který pro jednoduchost
obsahuje několik důležitých celočíselných konstant, které později v&nbsp;našem
projektu použijeme, abychom nemuseli používat &bdquo;magické
konstanty&ldquo;:</p>

<pre>
package <strong>intvalues</strong>
&nbsp;
const <strong>Zero</strong> = 0
const <strong>One</strong> = 0
&nbsp;
const <strong>MaxInt</strong> = int(^uint(0) &gt;&gt; 1)
const <strong>MinInt</strong> = -MaxInt - 1
</pre>

<p><div class="rs-tip-major">Poznámka: důležité je, že jména konstant mají na
začátku velké písmeno. Takové konstanty je možné použít i v&nbsp;dalších
balíčcích &ndash; jsou externě viditelné. Podobně bychom mohli do projektu
přidat i funkce, globální proměnné a metody, ovšem nyní pro jednoduchost
použijeme pouze konstanty.</div></p>

<p>Přidání externího balíčku, na němž náš projekt závisí, je při použití modulů
většinou zcela triviální, protože do zdrojového kódu pouze postačuje přidat
příslušný import se jménem balíčku včetně cesty na GitHubu či na jiném
podporovaném externím repositáři (z&nbsp;tohoto pohledu je GitHub skutečně
chápán jako repositář s&nbsp;verzovanými balíčky):</p>

<pre>
import <strong>"github.com/tisnik/intvalues"</strong>
</pre>

<p>V&nbsp;našem konkrétním příkladu bude zdrojový kód vypadat následovně (nový
import je zvýrazněn):</p>

<pre>
package main
&nbsp;
import (
        "fmt"
        <strong>"github.com/tisnik/intvalues"</strong>
)
&nbsp;
func Add(x int, y int) int {
        return x + y
}
&nbsp;
func main() {
        fmt.Println(Add(intvalues.Zero, intvalues.Zero))
        fmt.Println(Add(intvalues.One, 0))
        fmt.Println(Add(1, 2))
        fmt.Println(Add(-1, 2))
}
</pre>

<p>Před spuštěním popř.&nbsp;před překladem takto upraveného příkladu se můžeme
podívat na strukturu adresáře <strong>~/go</strong>, popř.&nbsp;toho adresáře,
na který ukazuje proměnná prostředí se jménem <strong>GOPATH</strong>. Tento
adresář může být prázdný, popř.&nbsp;může obsahovat některé starší projekty (ty
nás ovšem nemusí příliš zajímat):</p>

<pre>
.
├── bin
├── pkg
└── src
</pre>

<p>Můžeme se pokusit upravený příklad (s&nbsp;externí závislostí) spustit, a to
klasicky příkazem <strong>go run</strong>::</p>

<pre>
$ <strong>go run adder.go </strong>
&nbsp;
go: finding github.com/tisnik/intvalues latest
go: downloading github.com/tisnik/intvalues v0.0.0-20190905132008-dad69ec19589
go: extracting github.com/tisnik/intvalues v0.0.0-20190905132008-dad69ec19589
0
0
3
1
</pre>

<p>Z&nbsp;předchozího výpisu je patrné, že ještě před samotným spuštěním
přeloženého projektu nástroje jazyka Go stáhly balíček, na němž náš projekt
závisí. To znamená, že už není zapotřebí používat příkaz <strong>go
get</strong>, který má problematické chování! Dále si povšimněte, jak nástroje
Go zajistily verzi externího balíčku. Tuto verzi jsme nikde nespecifikovali
(tedy ani v&nbsp;projektu ani v&nbsp;závislém balíčku), proto bylo číslo verze
uměle vytvořeno ze dvou dostupných údajů:</p>

<ol>
<li>Časového razítka posledního commitu (2019-09-05 přibližně v&nbsp;13:20)</li>
<li>Hashe posledního commitu (plný hash je commit dad69ec1958979dd2b25b68e862550c1a29f17da)</li>
</ol>

<p>Spuštěním či překladem projektu navíc došlo i ke změně obsahu souboru
<strong>go.mod</strong>, v&nbsp;němž se kromě předchozích dvou řádků <a
href="#k05">popsaných výše</a> objevil nový řádek <strong>require</strong>
obsahující nám již známé údaje o přidané závislosti i její přesné verzi (zde
automaticky vygenerované):</p>

<pre>
module github.com/tisnik/my-first-module
&nbsp;
go 1.13
&nbsp;
<strong>require github.com/tisnik/intvalues v0.0.0-20190905132008-dad69ec19589 // indirect</strong>
</pre>

<p><div class="rs-tip-major">Rekapitulace: pokud používáme systém modulů a
potřebujeme do projektu přidat nějakou externí knihovnu (balíček) ve stabilní
verzi, postačuje do zdrojového kódu přidat příslušný import a aplikaci běžným
způsobem přeložit.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Soubor <strong>go.sum</strong></h2>

<p>Současně při překladu aplikace v&nbsp;adresáři s&nbsp;projektem automaticky
vznikl i nový soubor se jménem <strong>go.sum</strong>. Obsah tohoto souboru by
v&nbsp;našem triviálním demonstračním příkladu měl vypadat následovně:</p>

<pre>
github.com/tisnik/intvalues v0.0.0-20190905132008-dad69ec19589 h1:AAvNlAqsqYEVQUG4hHFNJOvvKVRh8DC+OI0wuEn0v7Y=
github.com/tisnik/intvalues v0.0.0-20190905132008-dad69ec19589/go.mod h1:Pc260EFOSnRzU0A/CN2vfBETjFJ4B+LijhuPYjfUWrA=
</pre>

<p>Obecná struktura souboru <strong>go.sum</strong> dodržuje formát:</p>

<pre>
&lt;modul&gt; &lt;verze&gt;[/go.mod] &lt;hash&gt;
</pre>

<p>Každý modul (zde externí balíček), na němž projekt závisí, je zapsán na dvou
po sobě jdoucích řádcích. Na prvním řádku je na konci uveden otisk (hash)
stromu se soubory modulu, na druhém řádku pak hash souboru
<strong>go.mod</strong> obsaženého přímo v&nbsp;modulu či automaticky
vygenerovaného nástroji jazyka Go (pokud tento soubor v&nbsp;repositáři
s&nbsp;modulem není uložen).</p>

<p><div class="rs-tip-major">Poznámka: pokud vás zajímá, jakým algoritmem se
vlastně otisky počítají, podívejte se na prefix otisku. Ten by měl
v&nbsp;současné verzi začínat řetězcem &bdquo;h1:&ldquo;, který označuje
algoritmus SHA-256.  Ostatně v&nbsp;současné verzi Go je podporován pouze tento
algoritmus, ovšem v&nbsp;budoucnosti se mohou objevit algoritmy další.
Podrobnější informace naleznete na stránce <a
href="https://tip.golang.org/cmd/go/#hdr-Module_authentication_using_go_sum">https://tip.golang.org/cmd/go/#hdr-Module_authentication_using_go_sum</a>.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Struktura adresáře <strong>$GOPATH</strong> po stažení balíčku</h2>

<p>Po automatickém stažení balíčku <strong>github.com/tisnik/intvalues</strong>
a spuštění našeho demonstračního projektu se struktura adresáře, na který
ukazuje proměnná prostředí <strong>$GOPATH</strong> dosti rapidním způsobem
změní. V&nbsp;případě, že tento adresář byl před překladem projektu prázdný,
měl by po jeho překladu vypadat zhruba následovně:</p>

<pre>
.
├── bin
├── pkg
│   ├── mod
│   │   ├── cache
│   │   │   ├── download
│   │   │   │   ├── github.com
│   │   │   │   │   └── tisnik
│   │   │   │   │       └── intvalues
│   │   │   │   │           └── @v
│   │   │   │   │               ├── list
│   │   │   │   │               ├── list.lock
│   │   │   │   │               ├── v0.0.0-20190905132008-dad69ec19589.info
│   │   │   │   │               ├── v0.0.0-20190905132008-dad69ec19589.lock
│   │   │   │   │               ├── v0.0.0-20190905132008-dad69ec19589.mod
│   │   │   │   │               ├── v0.0.0-20190905132008-dad69ec19589.zip
│   │   │   │   │               └── v0.0.0-20190905132008-dad69ec19589.ziphash
│   │   │   │   └── sumdb
│   │   │   │       └── sum.golang.org
│   │   │   │           ├── lookup
│   │   │   │           │   └── github.com
│   │   │   │           │       └── tisnik
│   │   │   │           │           └── intvalues@v0.0.0-20190905132008-dad69ec19589
│   │   │   │           └── tile
│   │   │   │               └── 8
│   │   │   │                   ├── 0
│   │   │   │                   │   └── 668.p
│   │   │   │                   │       └── 214
│   │   │   │                   ├── 1
│   │   │   │                   │   └── 002.p
│   │   │   │                   │       └── 156
│   │   │   │                   └── 2
│   │   │   │                       └── 000.p
│   │   │   │                           └── 2
│   │   │   └── lock
│   │   └── github.com
│   │       └── tisnik
│   │           └── intvalues@v0.0.0-20190905132008-dad69ec19589
│   │               ├── intvalues.go
│   │               └── README.md
│   └── sumdb
│       └── sum.golang.org
│           └── latest
└── src
&nbsp;
28 directories, 16 files
</pre>

<p>Vidíme, že vznikl celý nový podadresář <strong>pkg/mod</strong>, v&nbsp;němž
můžeme nalézt jak vlastní zdrojový kód staženého balíčku, tak i množství
souborů s&nbsp;metadaty o verzi balíčku, jeho otisku (přesněji řečeno otiscích)
atd. Tento podadresář je kdykoli možné smazat, protože se jeho struktura
automaticky obnoví při novém překladu vyvíjených aplikací (ovšem s&nbsp;tím, že
se metadata znovu zjistí z&nbsp;externích repositářů).</p>

<p><div class="rs-tip-major">Poznámka: je zajímavé a pravděpodobně i nezbytné,
že adresářová struktura prakticky všech systémů pro správu balíčků (Maven, pip,
npm) mnohdy obsahují více metadat, než vlastních zdrojových kódů :-)</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Verzování balíčků</h2>

<p>Vlastnosti systému modulů, které jsme si až doposud popsali, jsou sice
určitým pokrokem oproti použití klasického <strong>go get</strong>, ovšem celou
sílu nového konceptu doceníme až tehdy, když začneme pracovat s&nbsp;verzemi
balíčků (a modulů). Systém modulů nám totiž umožní použít konkrétní verzi
balíčku a do určité míry řeší i tranzitivní závislosti, tj.&nbsp;situaci, kdy
knihovna <strong>A</strong> vyžaduje balíček <strong>Z</strong> ve verzi
<strong>1.0</strong> a knihovna <strong>B</strong> taktéž balíček
<strong>Z</strong>, ovšem tentokrát ve verzi <strong>2.0</strong>. Některé
ukázky budou uvedeny v&nbsp;navazujícím textu.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Problematika potencionálního rozbití API</h2>

<p>Mohlo by se zdát, že na konkrétní verzi modulu/balíčku nemusí záležet,
protože nové verze buď &bdquo;pouze&ldquo; opravují chyby verze předchozí, nebo
přidávají další funkcionalitu. Na základě tohoto pohledu by tedy bylo jen
výhodné slepě updatovat všechny moduly na nejnovější verzi, protože ta by měla
být nejstabilnější a měla by obsahovat plnou funkcionalitu verzí předchozích.
Ve skutečnosti tomu tak pochopitelně být nemusí, protože mezi jednotlivými
verzemi balíčků (představme si zde nějakou knihovnu) může dojít ke změně jejího
API, ať již přidáním/ubráním parametrů funkcí a metod, tak i mnohdy změnou celé
filozofie ovládání. Tento problém, který ostatně musí řešit všechny balíčkovací
systémy pro další programovací jazyky, je v&nbsp;Go řešen s&nbsp;využitím
známého <i>sémantického verzování</i> [<a href="https://semver.org/">1</a>],
kde je verze balíčku popř.&nbsp;modulu zapsána trojicí celý čísel &ndash;
majoritní verze.minoritní verze.číslo patche.</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti je (alespoň prozatím)
situace jazyka Go poměrně přehledná, protože v&nbsp;naprosté většině případů
moduly nevyžadují konkrétní verzi překladače. Nemusíme tedy řešit například
problémy typu Python 2/Python 3.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Změna minoritní verze modulu</h2>

<p>V&nbsp;ekosystému programovacího jazyka Go (ovšem nejenom zde) se
předpokládá, že se oficiální aplikační programové rozhraní modulu
s&nbsp;minoritní verzí nemění. Může se pochopitelně do určité míry měnit
konkrétní chování (ostatně i oprava chyby mění chování), ovšem exportované
konstanty, proměnné, datové typy, funkce a metody by alespoň měly mít zachovánu
svoji signaturu a sémantiku chování. Otázkou zůstává, zda má být API zcela
neměnné, nebo zda je do něj možné přidávat další funkce a metody. Samotné
přidání &ndash; pokud se ovšem nejedná o rozdělení činnosti původní jediné
funkce do funkcí dvou &ndash; by v&nbsp;Go nemělo vadit, už jen z&nbsp;toho
důvodu, že se zde nepoužívá koncept tříd a OOP postaveného na třídách a
explicitně implementovaných rozhraní.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Změna majoritní verze modulu</h2>

<p>Zcela jiná situace nastane ve chvíli, kdy se změní majoritní verze modulu.
V&nbsp;tomto případě se (obecně) předpokládá, že nová verze může mít API zcela
odlišné od API předchozí verze a tudíž není možné bez dalších úprav vyvíjené
aplikace na tuto verzi přejít. V&nbsp;programovacím jazyce Go existuje vcelku
elegantní řešení tohoto problému, které spočívá v&nbsp;použití takzvaných
<i>sémantických importů</i>, s&nbsp;nimiž se seznámíme <a
href="#k17">v&nbsp;sedmnácté kapitole</a>.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;ideálním světě by se
&bdquo;rozbití&ldquo; API zjistilo snadno a taktéž včas pomocí jednotkových
testů, popř.&nbsp;by alespoň například na nekompatibilní počty a typy parametrů
upozornil překladač. Samotnou změnu chování však překladač nedokáže detekovat a
pokrytí kódu jednotkovými testy mnohdy taktéž není příliš slavné...</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Vytvoření externí knihovny s&nbsp;několika majoritními verzemi a jednou verzí minoritní</h2>

<p>Pro otestování funkčnosti systému modulů v&nbsp;programovacím jazyku Go byl
vytvořen repositář <a
href="https://github.com/tisnik/integers">https://github.com/tisnik/integers</a>,
v&nbsp;němž je uložen jediný modul s&nbsp;jediným balíčkem (viz též <a
href="#k05">pátou kapitolu</a>, kde jsou vztahy mezi těmito pojmy vysvětleny.
V&nbsp;tomto repositáři byly příkazem:</p>

<pre>
$ <strong>git tag -a _verze_ -m "zpráva"</strong>
</pre>

<p>vytvořeny celkem čtyři <i>tagy</i> označující čtyři různé stavy repositáře.
Navíc byly ze všech čtyř tagů vytvořena <i>vydání</i> (<i>release</i>), jejichž
seznam naleznete na stránce <a
href="https://github.com/tisnik/integers/releases">https://github.com/tisnik/integers/releases</a>.</p>

<p><a href="https://www.root.cz/obrazek/368756/"><img src="https://i.iinfo.cz/images/14/releases-1-prev.png" class="image-368756" alt="&#160;" width="191" height="270" /></a></p>
<p><i>Informace o vydáních našeho testovacího balíčku</i></p>

<p>Verzi 1.0.0 označenou tagem <strong>v1.0.0</strong> naleznete na adrese <a
href="https://github.com/tisnik/integers/releases/tag/v1.0.0">https://github.com/tisnik/integers/releases/tag/v1.0.0</a>.
V&nbsp;této verzi je vydán balíček nazvaný <strong>integers</strong>
s&nbsp;dvojicí celočíselných konstant <strong>MaxInt</strong> a
<strong>MinInt</strong>:</p>

<pre>
package <strong>integers</strong>
&nbsp;
const <strong>MaxInt</strong> = int(^uint(0) &gt;&gt; 1)
const <strong>MinInt</strong> = -MaxInt - 1
</pre>

<p>Další verze je minoritní, což znamená, že její první číslo je stále 1.
Konkrétně se jedná o verzi 1.1.0 s&nbsp;tagem <strong>v1.1.0</strong> a najdeme
ji na adrese <a
href="https://github.com/tisnik/integers/releases/tag/v1.1.0">https://github.com/tisnik/integers/releases/tag/v1.1.0</a>.
API v&nbsp;tomto případě bylo rozšířeno o další dvě celočíselné konstanty
<strong>Zero</strong> a <strong>One</strong>:</p>

<pre>
package <strong>integers</strong>
&nbsp;
const <strong>MaxInt</strong> = int(^uint(0) &gt;&gt; 1)
const <strong>MinInt</strong> = -MaxInt - 1
&nbsp;
const <strong>Zero</strong> = 0
const <strong>One</strong> = 1
</pre>

<p>Další verze nese číslo 2.0.0 a došlo zde ke změně API, která může vést
k&nbsp;tomu, že bude zapotřebí upravit vyvíjenou aplikaci (konkrétně byly
odstraněny konstanty <strong>MinInt</strong> a <strong>MaxInt</strong>). Tag
této verze je podle očekávání <strong>v2.0.0</strong> a další podrobnosti
najdete na adrese <a
href="https://github.com/tisnik/integers/releases/tag/v2.0.0">https://github.com/tisnik/integers/releases/tag/v2.0.0</a>:</p>

<pre>
package <strong>integers</strong>
&nbsp;
const <strong>Zero</strong> = 0
const <strong>One</strong> = 1
</pre>

<p>Navíc byla vydána i verze 4.0, ovšem touto verzí se budeme zabývat až <a
href="#k17">v&nbsp;sedmnácté kapitole</a>.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Použití externí knihovny s&nbsp;více majoritními verzemi v&nbsp;demonstračním projektu</h2>

<p>Nyní si zkusme vytvořit jednoduchý demonstrační projekt, který bude výše
uvedený repositář a v&nbsp;něm uložený balíček používat. V&nbsp;tomto projektu
nejdříve jednoduše naimportujeme balíček
<strong>github.com/tisnik/integers</strong> a následně použijeme konstanty
v&nbsp;tomto balíčku deklarované:</p>

<pre>
package main
&nbsp;
import (
        "fmt"
        <strong>"github.com/tisnik/integers"</strong>
)
&nbsp;
func Add(x int, y int) int {
        return x + y
}
&nbsp;
func main() {
        fmt.Println(Add(integers.Zero, integers.Zero))
        fmt.Println(Add(integers.One, 0))
        fmt.Println(Add(integers.MaxInt, integers.MinInt))
        fmt.Println(Add(1, 2))
        fmt.Println(Add(-1, 2))
}
</pre>

<p>V&nbsp;případě, že by byla vydána pouze verze 1.0.0 našeho testovacího
balíčku, vypadal by pokus o překlad takto:</p>

<pre>
$ <strong>go build</strong>
&nbsp;
go: downloading github.com/tisnik/integers v1.0.0
go: extracting github.com/tisnik/integers v1.0.0
go: finding github.com/tisnik/integers v1.0.0
&nbsp;
./adder.go:13:18: undefined: integers.Zero
./adder.go:14:18: undefined: integers.One
</pre>

<p><div class="rs-tip-major">Poznámka: do tohoto stavu se můžeme dostat i po
vydání dalších verzí &ndash; pouhou úpravou verze v&nbsp;souboru
<strong>go.mod</strong>. Tím se verze pro danou vyvíjenou aplikace
&bdquo;uzamče&ldquo; a systém již nebude hledat poslední vydanou
verzi.</div></p>

<p>Vidíme, že se systém jazyka Go pokusil o stažení poslední stabilní verze
(1.0.0), ve které ovšem nejsou specifikovány konstanty <strong>Zero</strong> a
<strong>One</strong>, takže překlad skončí s&nbsp;chybou.</p>

<p>Ve chvíli, kdy je vydána verze 1.1.0 (a je automaticky označena jako &bdquo;latest version&ldquo;), se dočkáme bezchybného překladu, protože všechny čtyři potřebné konstanty existují pouze v&nbsp;této verzi:</p>

<pre>
$ <strong>go build</strong>
&nbsp;
go: downloading github.com/tisnik/integers v1.1.0
go: extracting github.com/tisnik/integers v1.1.0
go: finding github.com/tisnik/integers v1.1.0
</pre>

<p>Ovšem může taktéž nastat situace, kdy již byla vydána verze 2.0.0, která
původní API rozbije. Potom se opět překlad nepovede, tentokrát ovšem kvůli
tomu, že chybí konstanty <strong>MinInt</strong> a <strong>MaxInt</strong>:</p>

<pre>
$ <strong>go build</strong>
&nbsp;
go: finding github.com/tisnik/integers v2.0.0
./adder.go:15:18: undefined: integers.MaxInt
./adder.go:15:35: undefined: integers.MinInt
</pre>

<p>Zajímavé bude se v&nbsp;tomto okamžiku podívat na obsah souboru
<strong>go.sum</strong>. Ten by měl obsahovat následující záznamy (tři dvojice
verzí):</p>

<pre>
$ <strong>cat go.sum </strong>
&nbsp;
github.com/tisnik/integers v1.0.0 h1:hTvDeOyjmLt1BJqeQmSnJNOlSst9LthLfQnU53h0Ik0=
github.com/tisnik/integers v1.0.0/go.mod h1:qfkSORAgW6E8jwfni4JdVE4AKzFvQs7239NSw/cf+fU=
github.com/tisnik/integers v1.1.0 h1:xygWKRg5EGDS/PZyR7SuhYp3PXQTkRdY6TcPsOd4iio=
github.com/tisnik/integers v1.1.0/go.mod h1:qfkSORAgW6E8jwfni4JdVE4AKzFvQs7239NSw/cf+fU=
github.com/tisnik/integers v2.0.0+incompatible h1:wJnU/uiLwDL1CWiDyhb+lhS/ByAkfWlAsRlh54wL5mc=
github.com/tisnik/integers v2.0.0+incompatible/go.mod h1:qfkSORAgW6E8jwfni4JdVE4AKzFvQs7239NSw/cf+fU=
</pre>

<p>Všechny prozatím stažené a dostupné verze vypíše příkaz:</p>

<pre>
$ <strong>go list -m -versions github.com/tisnik/integers</strong>
&nbsp;
github.com/tisnik/integers v1.0.0 v1.1.0 v2.0.0+incompatible
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Sémantické importy</h2>

<p>Pro řešení kolizí mezi více majoritními verzemi balíčku (či modulu)
s&nbsp;rozdílným API podporuje programovací jazyk Go i koncept takzvaných
sémantických importů. Jedná se o téma na samostatný článek, ovšem již dnes si
můžeme ukázat, jak snadno je možné upravit náš balíček tak, aby se mohl
sémantický import provést. Do repositáře s&nbsp;balíčkem vložíme soubor
<strong>go.mod</strong> vytvořený příkazem <strong>go mod init</strong> (ten
jsme až doposud nepotřebovali, protože náš balíček na žádném dalším balíčku
nezávisel). Důležité je, že nově vytvořený soubor <a
href="https://github.com/tisnik/integers/blob/master/go.mod">go.mod</a> vypadá
takto:</p>

<pre>
module github.com/tisnik/integers/<strong>v4</strong>
&nbsp;
go 1.13
</pre>

<p>Povšimněte si, že jsme jméno modulu rozšířili o suffix <strong>/v4</strong>.
Po přidání tohoto souboru do repositáře byl vytvořen nový tag:</p>

<pre>
$ <strong>git tag -a v4.0.0 -m "Version 4.0.0 as module"</strong>
</pre>

<p>A z&nbsp;něj byla vydána nová verze balíčku.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Změna demonstračního příkladu &ndash; využití sémantického importu</h2>

<p>Nyní musíme upravit i náš demonstrační příklad, a to tak, že změníme jméno
importovaného modulu přidáním suffixu <strong>/v4</strong>:</p>

<pre>
package main
&nbsp;
import (
        "fmt"
        "github.com/tisnik/integers<strong>/v4</strong>"
)
&nbsp;
func Add(x int, y int) int {
        return x + y
}
&nbsp;
func main() {
        fmt.Println(Add(integers.Zero, integers.Zero))
        fmt.Println(Add(integers.One, 0))
        <i>//fmt.Println(Add(integers.MaxInt, integers.MinInt))</i>
        fmt.Println(Add(1, 2))
        fmt.Println(Add(-1, 2))
}
</pre>

<p>V&nbsp;této chvíli je možné používat API verze 4.0.0, které obecně nemusí
být kompatibilní se starším API. Povšimněte si, že další úpravy zdrojového kódu
příkladu nebyly nutné, tj.&nbsp;stále používáme konstanty
<strong>integers.Zero</strong> atd. a nikoli (například)
<strong>v4.Zero</strong>.</p>

<p>Na závěr se podívejme, jak se změnil obsah souboru <strong>go.sum</strong>
po vydání čtvrté verze s&nbsp;podporou sémantického importu:</p>

<pre>
$ <strong>cat go.sum </strong>
&nbsp;
github.com/tisnik/integers v1.0.0 h1:hTvDeOyjmLt1BJqeQmSnJNOlSst9LthLfQnU53h0Ik0=
github.com/tisnik/integers v1.0.0/go.mod h1:qfkSORAgW6E8jwfni4JdVE4AKzFvQs7239NSw/cf+fU=
github.com/tisnik/integers v1.1.0 h1:xygWKRg5EGDS/PZyR7SuhYp3PXQTkRdY6TcPsOd4iio=
github.com/tisnik/integers v1.1.0/go.mod h1:qfkSORAgW6E8jwfni4JdVE4AKzFvQs7239NSw/cf+fU=
github.com/tisnik/integers v2.0.0+incompatible h1:wJnU/uiLwDL1CWiDyhb+lhS/ByAkfWlAsRlh54wL5mc=
github.com/tisnik/integers v2.0.0+incompatible/go.mod h1:qfkSORAgW6E8jwfni4JdVE4AKzFvQs7239NSw/cf+fU=
github.com/tisnik/integers/v4 v4.0.0 h1:ynI0tihEdy9TGA5hbQFNcJHekTEBE5sgDJhfyIifGdA=
github.com/tisnik/integers/v4 v4.0.0/go.mod h1:O74h6zHFVUNb1K13mibPK1GGgRgJqKdEpp5Z6vay2Pc=
</pre>

<p>Vidíme, že na posledních dvou řádcích se objevila informace o nové verzi,
včetně suffixu <strong>/v4</strong>.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositáře s&nbsp;demonstračními příklady</h2>

<p>V&nbsp;dnešním článku jsme použili hned několik repositářů obsahujících jak demonstrační příklady, tak i repositáře s&nbsp;balíčky (jak verzovanými, tak i neverzovanými). Odkazy na jednotlivé repositáře jsou uvedeny v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Repositář</th><th>Stručný popis</th><th>Adresa na GitHubu</th></tr>
<tr><td>1</td><td>go-1st-module</td><td>první testovaný modul</td><td><a href="https://github.com/tisnik/go-1st-module">https://github.com/tisnik/go-1st-module</a></td></tr>
<tr><td>2</td><td>go-2nd-module</td><td>druhý testovaný modul</td><td><a href="https://github.com/tisnik/go-2nd-module">https://github.com/tisnik/go-2nd-module</a></td></tr>
<tr><td>3</td><td>intvalues</td><td>repositář s&nbsp;jedinou verzí balíčku <strong>intvalues</strong></td><td><a href="https://github.com/tisnik/intvalues">https://github.com/tisnik/intvalues</a></td></tr>
<tr><td>4</td><td>integers</td><td>repositář se čtyřmi vydáními balíčku <strong>integers</strong></td><td><a href="https://github.com/tisnik/integers">https://github.com/tisnik/integers</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

