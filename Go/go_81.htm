<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
package main

import (
        "bufio"
        "encoding/json"
        "log"
        "os"
)

// PipelineLogEntry represents one log entry (record) read from log file.
type PipelineLogEntry struct {
        Level    string `json:"levelname"`
        Time     string `json:"asctime"`
        Name     string `json:"name"`
        Filename string `json:"filename"`
        Message  string `json:"message"`
}

func readPipelineLogFile(filename string) ([]PipelineLogEntry, error) {
        entries := []PipelineLogEntry{}

        file, err := os.Open(filename)
        if err != nil {
                return entries, err
        }

        defer file.Close()

        scanner := bufio.NewScanner(file)
        for scanner.Scan() {
                entry := PipelineLogEntry{}
                err = json.Unmarshal([]byte(scanner.Text()), &entry)
                if err != nil {
                        log.Println(err)
                } else {
                        entries = append(entries, entry)
                }
        }

        if err := scanner.Err(); err != nil {
                return entries, err
        }

        return entries, nil
}

func main() {
        readPipelineLogFile("foobar")
}
</pre>

<pre>
[gosec] 2021/12/13 13:02:14 Including rules: default
[gosec] 2021/12/13 13:02:14 Excluding rules: default
[gosec] 2021/12/13 13:02:14 Import directory: /home/ptisnovs/temp/z
[gosec] 2021/12/13 13:02:14 Checking package: main
[gosec] 2021/12/13 13:02:14 Checking file: /home/ptisnovs/temp/z/gosec_issues_1.go

Results:


[/home/ptisnovs/temp/z/gosec_issues_1.go:22] - G304 (CWE-22): Potential file inclusion via variable (Confidence: HIGH, Severity: MEDIUM)
    21: 
  > 22:         file, err := os.Open(filename)
    23:         if err != nil {



[/home/ptisnovs/temp/z/gosec_issues_1.go:27] - G307 (CWE-703): Deferring unsafe method "Close" on type "*os.File" (Confidence: HIGH, Severity: MEDIUM)
    26: 
  > 27:         defer file.Close()
    28: 



[/home/ptisnovs/temp/z/gosec_issues_1.go:48] - G104 (CWE-703): Errors unhandled. (Confidence: HIGH, Severity: LOW)
    47: func main() {
  > 48:         readPipelineLogFile("foobar")
    49: }



Summary:
  Gosec  : dev
  Files  : 1
  Lines  : 49
  Nosec  : 0
  Issues : 3

</pre>

<pre>
{
        "Golang errors": {},
        "Issues": [
                {
                        "severity": "MEDIUM",
                        "confidence": "HIGH",
                        "cwe": {
                                "id": "22",
                                "url": "https://cwe.mitre.org/data/definitions/22.html"
                        },
                        "rule_id": "G304",
                        "details": "Potential file inclusion via variable",
                        "file": "/home/ptisnovs/temp/z/gosec_issues_1.go",
                        "code": "21: \n22: \tfile, err := os.Open(filename)\n23: \tif err != nil {\n",
                        "line": "22",
                        "column": "15",
                        "nosec": false,
                        "suppressions": null
                },
                {
                        "severity": "MEDIUM",
                        "confidence": "HIGH",
                        "cwe": {
                                "id": "703",
                                "url": "https://cwe.mitre.org/data/definitions/703.html"
                        },
                        "rule_id": "G307",
                        "details": "Deferring unsafe method \"Close\" on type \"*os.File\"",
                        "file": "/home/ptisnovs/temp/z/gosec_issues_1.go",
                        "code": "26: \n27: \tdefer file.Close()\n28: \n",
                        "line": "27",
                        "column": "2",
                        "nosec": false,
                        "suppressions": null
                },
                {
                        "severity": "LOW",
                        "confidence": "HIGH",
                        "cwe": {
                                "id": "703",
                                "url": "https://cwe.mitre.org/data/definitions/703.html"
                        },
                        "rule_id": "G104",
                        "details": "Errors unhandled.",
                        "file": "/home/ptisnovs/temp/z/gosec_issues_1.go",
                        "code": "47: func main() {\n48: \treadPipelineLogFile(\"foobar\")\n49: }\n",
                        "line": "48",
                        "column": "2",
                        "nosec": false,
                        "suppressions": null
                }
        ],
        "Stats": {
                "files": 1,
                "lines": 49,
                "nosec": 0,
                "found": 3
        },
        "GosecVersion": "dev"
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
package main

import (
        "crypto/md5"
        "fmt"
        "io"
)

func main() {
        hash := md5.New()

        io.WriteString(hash, "Příliš žluťoučký kůň")
        fmt.Printf("%x", hash.Sum(nil))
}
</pre>

<pre>
Results:


[/home/ptisnovs/temp/z/gosec_issues_2.go:10] - G401 (CWE-326): Use of weak cryptographic primitive (Confidence: HIGH, Severity: MEDIUM)
    9: func main() {
  > 10:         hash := md5.New()
    11: 



[/home/ptisnovs/temp/z/gosec_issues_2.go:4] - G501 (CWE-327): Blocklisted import crypto/md5: weak cryptographic primitive (Confidence: HIGH, Severity: MEDIUM)
    3: import (
  > 4:  "crypto/md5"
    5:  "fmt"



[/home/ptisnovs/temp/z/gosec_issues_2.go:12] - G104 (CWE-703): Errors unhandled. (Confidence: HIGH, Severity: LOW)
    11: 
  > 12:         io.WriteString(hash, "Příliš žluťoučký kůň")
    13:         fmt.Printf("%x", hash.Sum(nil))



Summary:
  Gosec  : dev
  Files  : 1
  Lines  : 14
  Nosec  : 0
  Issues : 3

</pre>

<pre>
{
        "Golang errors": {},
        "Issues": [
                {
                        "severity": "MEDIUM",
                        "confidence": "HIGH",
                        "cwe": {
                                "id": "326",
                                "url": "https://cwe.mitre.org/data/definitions/326.html"
                        },
                        "rule_id": "G401",
                        "details": "Use of weak cryptographic primitive",
                        "file": "/home/ptisnovs/temp/z/gosec_issues_2.go",
                        "code": "9: func main() {\n10: \thash := md5.New()\n11: \n",
                        "line": "10",
                        "column": "10",
                        "nosec": false,
                        "suppressions": null
                },
                {
                        "severity": "MEDIUM",
                        "confidence": "HIGH",
                        "cwe": {
                                "id": "327",
                                "url": "https://cwe.mitre.org/data/definitions/327.html"
                        },
                        "rule_id": "G501",
                        "details": "Blocklisted import crypto/md5: weak cryptographic primitive",
                        "file": "/home/ptisnovs/temp/z/gosec_issues_2.go",
                        "code": "3: import (\n4: \t\"crypto/md5\"\n5: \t\"fmt\"\n",
                        "line": "4",
                        "column": "2",
                        "nosec": false,
                        "suppressions": null
                },
                {
                        "severity": "LOW",
                        "confidence": "HIGH",
                        "cwe": {
                                "id": "703",
                                "url": "https://cwe.mitre.org/data/definitions/703.html"
                        },
                        "rule_id": "G104",
                        "details": "Errors unhandled.",
                        "file": "/home/ptisnovs/temp/z/gosec_issues_2.go",
                        "code": "11: \n12: \tio.WriteString(hash, \"Příliš žluťoučký kůň\")\n13: \tfmt.Printf(\"%x\", hash.Sum(nil))\n",
                        "line": "12",
                        "column": "2",
                        "nosec": false,
                        "suppressions": null
                }
        ],
        "Stats": {
                "files": 1,
                "lines": 14,
                "nosec": 0,
                "found": 3
        },
        "GosecVersion": "dev"
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
package main

import (
        "database/sql"
        "fmt"
        "os"
)

func foo(arg string) {
        db, err := sql.Open("sqlite3", ":memory:")
        if err != nil {
                panic(err)
        }
        rows, err := db.Query("SELECT * FROM foo WHERE name = " + arg)

        if err != nil {
                panic(err)
        }
        defer rows.Close()
}

func bar(arg string) {
        db, err := sql.Open("sqlite3", ":memory:")
        if err != nil {
                panic(err)
        }

        query := fmt.Sprintf("select * from foo where name = '%s'", arg)

        rows, err := db.Query(query)
        if err != nil {
                panic(err)
        }
        defer rows.Close()
}

func main() {
        foo("foo")
        bar("bar")
}
</pre>

<pre>
Results:

Golang errors in file: [/home/ptisnovs/temp/z/gocritic_gosec_issues.go]:

  > [line 6 : column 2] - "os" imported but not used



[/home/ptisnovs/temp/z/gocritic_gosec_issues.go:28] - G201 (CWE-89): SQL string formatting (Confidence: HIGH, Severity: MEDIUM)
    27: 
  > 28:         query := fmt.Sprintf("select * from foo where name = '%s'", arg)
    29: 



[/home/ptisnovs/temp/z/gocritic_gosec_issues.go:14] - G202 (CWE-89): SQL string concatenation (Confidence: HIGH, Severity: MEDIUM)
    13:         }
  > 14:         rows, err := db.Query("SELECT * FROM foo WHERE name = " + arg)
    15: 



Summary:
  Gosec  : dev
  Files  : 1
  Lines  : 40
  Nosec  : 0
  Issues : 2

</pre>

<pre>
{
        "Golang errors": {
                "/home/ptisnovs/temp/z/gocritic_gosec_issues.go": [
                        {
                                "line": 6,
                                "column": 2,
                                "error": "\"os\" imported but not used"
                        }
                ]
        },
        "Issues": [
                {
                        "severity": "MEDIUM",
                        "confidence": "HIGH",
                        "cwe": {
                                "id": "89",
                                "url": "https://cwe.mitre.org/data/definitions/89.html"
                        },
                        "rule_id": "G201",
                        "details": "SQL string formatting",
                        "file": "/home/ptisnovs/temp/z/gocritic_gosec_issues.go",
                        "code": "27: \n28: \tquery := fmt.Sprintf(\"select * from foo where name = '%s'\", arg)\n29: \n",
                        "line": "28",
                        "column": "11",
                        "nosec": false,
                        "suppressions": null
                },
                {
                        "severity": "MEDIUM",
                        "confidence": "HIGH",
                        "cwe": {
                                "id": "89",
                                "url": "https://cwe.mitre.org/data/definitions/89.html"
                        },
                        "rule_id": "G202",
                        "details": "SQL string concatenation",
                        "file": "/home/ptisnovs/temp/z/gocritic_gosec_issues.go",
                        "code": "13: \t}\n14: \trows, err := db.Query(\"SELECT * FROM foo WHERE name = \" + arg)\n15: \n",
                        "line": "14",
                        "column": "24",
                        "nosec": false,
                        "suppressions": null
                }
        ],
        "Stats": {
                "files": 1,
                "lines": 40,
                "nosec": 0,
                "found": 2
        },
        "GosecVersion": "dev"
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
package main

import "fmt"
import "strings"

func printMessages(Format string, message1 string, message2 string) {
        //fmt.Printf("%s %s\n", message1, message2)

        if len(message1) != 0 && len(message2) != 0 {
                fmt.Printf(Format, strings.Replace(message1, " ", "", -1), message2)
        }
}

func main() {
        const fmt = "%s %s\n"

        for i := 0; 10 > i; i = i + 1 {
                printMessages(fmt, "Hello ", "world")
        }
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
package main

import (
        "bufio"
        "encoding/json"
        "log"
        "os"
)

// PipelineLogEntry represents one log entry (record) read from log file.
type PipelineLogEntry struct {
        Level    string `json:"levelname"`
        Time     string `json:"asctime"`
        Name     string `json:"name"`
        Filename string `json:"filename"`
        Message  string `json:"message"`
}

func readPipelineLogFile(filename string) ([]PipelineLogEntry, error) {
        entries := []PipelineLogEntry{}

        file, err := os.Open(filename)
        if err != nil {
                return entries, err
        }

        defer func() {
                err := file.Close()

                if err != nil {
                        log.Println(err)
                }
        }()

        scanner := bufio.NewScanner(file)
        for scanner.Scan() {
                entry := PipelineLogEntry{}
                err = json.Unmarshal([]byte(scanner.Text()), &entry)
                if err != nil {
                        log.Fatal(err)
                } else {
                        entries = append(entries, entry)
                }
        }

        if err := scanner.Err(); err != nil {
                return entries, err
        }

        return entries, nil
}

func main() {
        readPipelineLogFile("foobar")
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
package main

import "fmt"

func new(len int, cap int) ([]int, int) {
        vals := make([]int, len)
        for i := 0; cap > i; i = i + 1 {
                vals = append(vals, i)
                vals = append(vals, i*2)
        }
        return vals, len + cap
}

func main() {
        vals, _ := new(0, 010)
        fmt.Println(vals)
        for i := 0; i < len(vals); i++ {
                vals[i] = 0
        }

}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
package main

import (
        "database/sql"
        "fmt"
        "os"
)

func foo(arg string) {
        db, err := sql.Open("sqlite3", ":memory:")
        if err != nil {
                panic(err)
        }
        rows, err := db.Query("SELECT * FROM foo WHERE name = " + arg)

        if err != nil {
                panic(err)
        }
        defer rows.Close()
}

func bar(arg string) {
        db, err := sql.Open("sqlite3", ":memory:")
        if err != nil {
                panic(err)
        }

        query := fmt.Sprintf("select * from foo where name = '%s'", arg)

        rows, err := db.Query(query)
        if err != nil {
                panic(err)
        }
        defer rows.Close()
}

func main() {
        foo("foo")
        bar("bar")
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech minule i dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/wccode">https://github.com/tisnik/wccode</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_missing_package.go</td><td>nekorektní zdrojový kód, v&nbsp;němž chybí deklarace balíčku</td><td><a href="https://github.com/tisnik/wccode/blob/master/01_missing_package.go">https://github.com/tisnik/wccode/blob/master/01_missing_package.go</a></td></tr>
<tr><td> 2</td><td>02_parenthesis.go</td><td>chybně umístěná otevírací bloková závorka</td><td><a href="https://github.com/tisnik/wccode/blob/master/02_parenthesis.go">https://github.com/tisnik/wccode/blob/master/02_parenthesis.go</a></td></tr>
<tr><td> 3</td><td>03_bad_syntax.go</td><td>chybně umístěné otevírací i uzavírací blokové závorky</td><td><a href="https://github.com/tisnik/wccode/blob/master/03_bad_syntax.go">https://github.com/tisnik/wccode/blob/master/03_bad_syntax.go</a></td></tr>
<tr><td> 4</td><td>04_before_transform.go</td><td>zdrojový kód před transformací nástrojem <strong>gofmt</strong></td><td><a href="https://github.com/tisnik/wccode/blob/master/04_before_transform.go">https://github.com/tisnik/wccode/blob/master/04_before_transform.go</a></td></tr>
<tr><td> 5</td><td>05_after_transform.go</td><td>zdrojový kód po transformaci nástrojem <strong>gofmt</strong></td><td><a href="https://github.com/tisnik/wccode/blob/master/05_after_transform.go">https://github.com/tisnik/wccode/blob/master/05_after_transform.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>06_integer_signed_types_checks.go</td><td>kontrola celočíselných konstant překladačem</td><td><a href="https://github.com/tisnik/wccode/blob/master/06_integer_signed_types_checks.go">https://github.com/tisnik/wccode/blob/master/06_integer_signed_types_checks.go</a></td></tr>
<tr><td> 7</td><td>07_improper_conversion.go</td><td>kontrola prováděná při typových konverzích (celočíselné datové typy)</td><td><a href="https://github.com/tisnik/wccode/blob/master/07_improper_conversion.go">https://github.com/tisnik/wccode/blob/master/07_improper_conversion.go</a></td></tr>
<tr><td> 8</td><td>08_fp_types_checks.go</td><td>kontrola prováděná při typových konverzích (typy s&nbsp;plovoucí řádovou čárkou)</td><td><a href="https://github.com/tisnik/wccode/blob/master/08_fp_types_checks.go">https://github.com/tisnik/wccode/blob/master/08_fp_types_checks.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>09_nil_map.go</td><td>pokus o zápis do takzvané nulové mapy (<i>nil map</i>)</td><td><a href="https://github.com/tisnik/wccode/blob/master/09_nil_map.go">https://github.com/tisnik/wccode/blob/master/09_nil_map.go</a></td></tr>
<tr><td>10</td><td>10_nil_pointer.go</td><td>pokus o přístup do struktury přes nulový ukazatel (<i>nil pointer</i>)</td><td><a href="https://github.com/tisnik/wccode/blob/master/10_nil_pointer.go">https://github.com/tisnik/wccode/blob/master/10_nil_pointer.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>11_unreachable_code.go</td><td>zdrojový kód, jehož části nejsou dosažitelné</td><td><a href="https://github.com/tisnik/wccode/blob/master/11_unreachable_code.go">https://github.com/tisnik/wccode/blob/master/11_unreachable_code.go</a></td></tr>
<tr><td>12</td><td>12_shift.go</td><td>použití bitového posunu o 70 bitů v&nbsp;64bitové proměnné</td><td><a href="https://github.com/tisnik/wccode/blob/master/12_shift.go">https://github.com/tisnik/wccode/blob/master/12_shift.go</a></td></tr>
<tr><td>13</td><td>13_printf_checks.go</td><td>kontrola parametrů funkce <strong>fmt.Printf</strong></td><td><a href="https://github.com/tisnik/wccode/blob/master/13_printf_checks.go">https://github.com/tisnik/wccode/blob/master/13_printf_checks.go</a></td></tr>
<tr><td>14</td><td>14_sprintf_checks.go</td><td>kontrola parametrů funkce <strong>fmt.Sprintf</strong> i její návratové hodnoty</td><td><a href="https://github.com/tisnik/wccode/blob/master/14_sprintf_checks.go">https://github.com/tisnik/wccode/blob/master/14_sprintf_checks.go</a></td></tr>
<tr><td>15</td><td>15_read_byte_methods.go</td><td>kontrola signatury metody ze známého rozhraní</td><td><a href="https://github.com/tisnik/wccode/blob/master/15_read_byte_methods.go">https://github.com/tisnik/wccode/blob/master/15_read_byte_methods.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>16_simple_server.go</td><td>jednoduchý HTTP server, ne všechny chybové kódy jsou ošetřeny</td><td><a href="https://github.com/tisnik/wccode/blob/master/16_simple_server.go">https://github.com/tisnik/wccode/blob/master/16_simple_server.go</a></td></tr>
<tr><td>17</td><td>17_png_output.go</td><td>zápis do PNG, opět ne všechny chybové kódy jsou ošetřeny</td><td><a href="https://github.com/tisnik/wccode/blob/master/17_png_output.go">https://github.com/tisnik/wccode/blob/master/17_png_output.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>18_cyclomatic_complexity.go</td><td>kód pro měření cyklomatické složitosti</td><td><a href="https://github.com/tisnik/wccode/blob/master/18_cyclomatic_complexity.go">https://github.com/tisnik/wccode/blob/master/18_cyclomatic_complexity.go</a></td></tr>
<tr><td>19</td><td>19_cyclomatic_complexity.go</td><td>kód pro měření cyklomatické složitosti</td><td><a href="https://github.com/tisnik/wccode/blob/master/19_cyclomatic_complexity.go">https://github.com/tisnik/wccode/blob/master/19_cyclomatic_complexity.go</a></td></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/wccode/blob/master/article_81/">https://github.com/tisnik/wccode/blob/master/article_81/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/wccode/blob/master/article_81/">https://github.com/tisnik/wccode/blob/master/article_81/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/wccode/blob/master/article_81/">https://github.com/tisnik/wccode/blob/master/article_81/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/wccode/blob/master/article_81/">https://github.com/tisnik/wccode/blob/master/article_81/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/wccode/blob/master/article_81/">https://github.com/tisnik/wccode/blob/master/article_81/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/wccode/blob/master/article_81/">https://github.com/tisnik/wccode/blob/master/article_81/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/wccode/blob/master/article_81/">https://github.com/tisnik/wccode/blob/master/article_81/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/wccode/blob/master/article_81/">https://github.com/tisnik/wccode/blob/master/article_81/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/wccode/blob/master/article_81/">https://github.com/tisnik/wccode/blob/master/article_81/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/wccode/blob/master/article_81/">https://github.com/tisnik/wccode/blob/master/article_81/</a></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: tyto příklady nebyly zařazeny do <a
href="https://github.com/tisnik/go-root">repositáře používaného pro příklady
z&nbsp;tohoto seriálu</a>, a to mj.&nbsp;i z&nbsp;toho důvodu, aby omylem
neposloužily ke studijním účelům :-)</div></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Popis příkazu <strong>gofmt</strong><br />
<a href="https://pkg.go.dev/cmd/gofmt">https://pkg.go.dev/cmd/gofmt</a>
</li>

<li>Popis příkazu <strong>govet</strong><br />
<a href="https://pkg.go.dev/cmd/vet">https://pkg.go.dev/cmd/vet</a>
</li>

<li>Repositář nástroje <strong>errcheck</strong><br />
<a href="https://github.com/kisielk/errcheck">https://github.com/kisielk/errcheck</a>
</li>

<li>Repositář nástroje <strong>goconst</strong><br />
<a href="https://github.com/jgautheron/goconst">https://github.com/jgautheron/goconst</a>
</li>

<li>Repositář nástroje <strong>gocyclo</strong><br />
<a href="https://github.com/fzipp/gocyclo">https://github.com/fzipp/gocyclo</a>
</li>

<li>Repositář nástroje <strong>ineffassign</strong><br />
<a href="https://github.com/gordonklaus/ineffassign">https://github.com/gordonklaus/ineffassign</a>
</li>

<li>Repositář nástroje <strong>gosec</strong><br />
<a href="https://github.com/securego/gosec">https://github.com/securego/gosec</a>
</li>

<li>Repositář nástroje <strong>go-critic</strong><br />
<a href="https://github.com/go-critic/go-critic">https://github.com/go-critic/go-critic</a>
</li>

<li>Seznam testů prováděných nástrojem <strong>go-critic</strong><br />
<a href="https://go-critic.com/overview">https://go-critic.com/overview</a>
</li>

<li>Don't defer Close() on writable files<br />
<a href="https://www.joeshaw.org/dont-defer-close-on-writable-files/">https://www.joeshaw.org/dont-defer-close-on-writable-files/</a>
</li>

<li>5 Gotchas of Defer in Go — Part I<br />
<a href="https://blog.learngoprogramming.com/gotchas-of-defer-in-go-1-8d070894cb01">https://blog.learngoprogramming.com/gotchas-of-defer-in-go-1-8d070894cb01</a>
</li>

<li>Golang Guide: A List of Top Golang Frameworks, IDEs &amp; Tools<br />
<a href="https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/">https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

