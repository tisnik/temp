<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba BDD testů s využitím jazyka Go a nástroje godog</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba BDD testů s využitím jazyka Go a nástroje godog</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Po delší odmlce se budeme v seriálu o programovacím jazyce Go opět věnovat problematice testování. Popíšeme si framework Godog který umožňuje tvorbu a spouštění BDD testů napsaných v doménově specifickém jazyce Gherkin.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba BDD testů s&nbsp;využitím nástroje <strong>godog</strong></a></p>
<p><a href="#k02">2. BDD testy a programovací jazyk Go</a></p>
<p><a href="#k03">3. Jazyk Gherkin</a></p>
<p><a href="#k04">4. Testovaný modul s&nbsp;implementací jednoduchého akumulátoru</a></p>
<p><a href="#k05">5. Vytvoření testovacího scénáře</a></p>
<p><a href="#k06">6. První spuštění nástroje <strong>godog</strong></a></p>
<p><a href="#k07">7. Implementace jednotlivých kroků testu a spuštění testovacího scénáře</a></p>
<p><a href="#k08">8. Proměnná s&nbsp;kontextem celého scénáře</a></p>
<p><a href="#k09">9. Alternativní způsob inicializace akumulátoru</a></p>
<p><a href="#k10">10. Úprava testů pro možnost použití záporných hodnot</a></p>
<p><a href="#k11">11. Tabulky v&nbsp;BDD testech, aneb zápis osnovy testovacího scénáře</a></p>
<p><a href="#k12">12. Inicializace akumulátoru jedenkrát pro celý test</a></p>
<p><a href="#k13">13. Úprava aplikace takovým způsobem, aby bylo možné spustit BDD i jednotkové testy jediným příkazem</a></p>
<p><a href="#k14">14. Spuštění BDD testů společně s&nbsp;jednotkovými testy</a></p>
<p><a href="#k15">15. Podporované formáty s&nbsp;výsledky BDD testů</a></p>
<p><a href="#k16">16. Formát JUnit</a></p>
<p><a href="#k17">17. Formáty JSON: Cucumber a JSON event stream</a></p>
<p><a href="#k18">18. Obsah následující části seriálu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba BDD testů s&nbsp;využitím nástroje <strong>godog</strong></h2>

<p>Již několikrát jsme se <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">v&nbsp;seriálu o
programovacím jazyce Go</a> zabývali důležitou oblastí &ndash; testování
vytvářených aplikací. <a
href="https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/">Popsali
jsme si</a> především možnosti standardní knihovny <a
href="https://golang.org/pkg/testing/">testing</a>, která tvoří základ pro
tvorbu jednotkových testů a v&nbsp;případě nouze ji lze využít i pro psaní
testů funkcionálních (i když zde poměrně rychle narazíme na limity této velmi
minimalisticky pojaté knihovny). Příklad jednotkového testu:</p>

<pre>
type <strong>AddTest</strong> struct {
        x        int32
        y        int32
        expected int32
}
&nbsp;
func <strong>TestAdd</strong>(t *testing.T) {
        var addTestInput = []AddTest{
                {0, 0, 0},
                {1, 0, 1},
                {2, 0, 2},
                {2, 1, 3},
                {2, -2, 0},
                {math.MaxInt32, 0, math.MaxInt32},
                {math.MaxInt32, 1, math.MinInt32},
                {math.MaxInt32, math.MinInt32, -1},
        }
&nbsp;
        for _, i := range addTestInput {
                result := add(i.x, i.y)
                if result != i.expected {
                        msg := fmt.Sprintf("%d + %d should be %d, got %d instead",
                                i.x, i.y, i.expected, result)
                        t.Error(msg)
                }
        }
}
</pre>

<p>Taktéž již víme, že pro jazyk Go vzniklo i poměrně velké množství dalších
knihoven, s&nbsp;jejichž využitím lze tvorbu testů zjednodušit a zpřehlednit.
Mezi tyto knihovny patří zejména <a
href="https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/#k05">oglematchers</a>,
což je sada pomocných funkcí umožňujících explicitnější zápis podmínek pro
jednotkové testy. Dobré vlastnosti knihovny <i>oglematchers</i> plně oceníme až
ve chvíli, kdy je zkombinujeme s&nbsp;knihovnou <a
href="https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/#k07">ogletest</a>.</p>

<a href="https://www.root.cz/obrazek/356947/"><img src="https://i.iinfo.cz/images/190/golang-17-2-prev.png" class="image-356947" alt="&#160;" width="365" height="270" /></a>
<p><i>Obrázek 1: Webové rozhraní aplikace GoConvey.</i></p>

<p>Třetí doplňkovou knihovnou určenou pro usnadnění psaní testů, s&nbsp;níž
jsme se již setkali, je knihovna nazvaná <a
href="https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/#k09">assertions</a>,
jejíž repositář naleznete na adrese <a
href="https://github.com/smartystreets/assertions">https://github.com/smartystreets/assertions</a>.
V&nbsp;této knihovně je deklarováno několik funkcí, které se používají podobným
způsobem jako klasické aserce (které ve standardním jazyku Go vůbec
nenalezneme). Zajímavé je, že ve chvíli, kdy je testovaná podmínka splněna,
vrací tyto funkce prázdný řetězec (nikoli <strong>nil</strong>!),
v&nbsp;opačném případě řetězec s&nbsp;popisem podmínky i důvodem, proč nebyla
splněna &ndash; tyto informace tedy nebudeme muset zapisovat ručně.</p>

<a href="https://www.root.cz/obrazek/356948/"><img src="https://i.iinfo.cz/images/190/golang-17-3-prev.png" class="image-356948" alt="&#160;" width="365" height="270" /></a>
<p><i>Obrázek 2: Změna stylu webového rozhraní aplikace GoConvey.</i></p>

<p>Zapomenout nesmíme ani na užitečnou knihovnu <a
href="https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/#k12">GoConvey</a>,
která může posloužit pro vytváření BDD testů, ovšem jiným způsobem, než bude
popsáno v&nbsp;tomto článku. A konečně jsme se již seznámili s&nbsp;projektem
<i>go-carpet</i>, který primárně slouží k&nbsp;získání informace o tom, kterými
větvemi programu se prošlo při testování a kterými naopak nikoli (což sice
dokážeme zjistit i standardní knihovnou <strong>testing</strong>, ovšem
výsledek není příliš přehledný).</p>

<a href="https://www.root.cz/obrazek/356949/"><img src="https://i.iinfo.cz/images/190/golang-17-4-prev.png" class="image-356949" alt="&#160;" width="365" height="270" /></a>
<p><i>Obrázek 3: Historie již spuštěných testů.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. BDD testy a programovací jazyk Go</h2>

<p>Dnes se budeme primárně věnovat frameworku s&nbsp;poněkud zvláštním názvem
<a href="https://github.com/DATA-DOG/godog">godog</a>. Tento framework je určen
pro psaní <i>BDD</i> (<i>Behavior Driven Development</i>) testů. Tyto testy,
které se používají pro zjištění, zda se projekt/aplikace chová podle svého
popisu, je možné vytvářet různými způsoby. Již víme, že je možné je zapisovat
přímo ve formě zdrojového kódu jazyka Go. Jen pro připomenutí si ukažme, jak
mohou tyto testy vypadat. Konkrétně použijeme možnosti nabízené výše zmíněnou
knihovnou <i>GoConvey</i>:</p>

<pre>
package factorial
&nbsp;
import(
        "testing"
        . "github.com/smartystreets/goconvey/convey"
)
&nbsp;
func <strong>TestFactorial</strong>(t *testing.T) {
        Convey("0! should be equal 1", t, func() {
                So(Factorial(0), ShouldEqual, 1)
        })
}
&nbsp;
func <strong>TestFactorial2</strong>(t *testing.T) {
        Convey("10! should be greater than 1", t, func() {
                So(Factorial(10), ShouldBeGreaterThan, 1)
        })
        Convey("10! should be between 1 and 10000000", t, func() {
                So(Factorial(10), ShouldBeBetween, 1, 10000000)
        })
}
</pre>

<a href="https://www.root.cz/obrazek/356950/"><img src="https://i.iinfo.cz/images/190/golang-17-5-prev.png" class="image-356950" alt="&#160;" width="365" height="270" /></a>
<p><i>Obrázek 4: Výsledky v&nbsp;případě, že některé testy neproběhly korektně.</i></p>

<p>Vidíme, že se sice jedná o zdrojový kód velmi snadno čitelný pro
programátora, který se pouze musí naučit význam jednotlivých volaných funkcí a
metod (což je snadné), ovšem pro ostatní členy týmu se již může jednat o
složitější a relativně nesnadno uchopitelný problém. Musíme si totiž uvědomit,
že BDD testy většinou nepíšou pouze programátoři, ale měly by do nich zasahovat
například i architekti ve spolupráci se zákazníky atd. Je tedy vhodné, aby byly
testy co nejčitelnější a snadno upravitelné. A přesně pro tento účel byl
vytvořen specializovaný jazyk nazvaný <a
href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gherkin</a>.
V&nbsp;případě Gherkinu se jedná o doménově specifický jazyk (<i>DSL &ndash;
domain specific language</i>) navržený skutečně takovým způsobem, aby bylo
možné předpokládané (očekávané) chování aplikace popsat tak jednoduše, že se
přípravy popisu bude moci zúčastnit i zákazník-neprogramátor, popř.&nbsp;po
krátkém zaučení prakticky jakýkoli člen vývojového týmu.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Jazyk Gherkin</h2>

<p>Testovací scénář vytvořený v&nbsp;Gherkinu může vypadat následovně:</p>

<a href="https://www.root.cz/obrazek/324266/"><img src="https://i.iinfo.cz/images/634/clojure-cucumber-1-prev.png" class="image-324266" alt="&#160;" width="370" height="198" /></a>
<p><i>Obrázek 5: Ukázka scénářů napsaných v&nbsp;jazyce Gherkin.</i></p>

<p>Zvýrazněna jsou klíčová slova uvozující jednotlivé kroky testu. Ostatní
slova a číslice ve větách jsou buď pevně daná (svázaná s&nbsp;konkrétním
krokem), nebo se jedná o proměnné. Ve scénáři je i tabulka, jejíž obsah se
řádek po řádku postupně stává obsahem jednotlivých kroků testu (obsahem tabulky
se nahrazují slova umístěná do ostrých závorek).</p>

<p><div class="rs-tip-major">Poznámka: jazyk Gherkin existuje v&nbsp;různých
jazykových mutacích, my se však budeme držet jeho originální anglické
varianty.</div></p>

<p>Jednotlivé kroky testu napsané v&nbsp;jazyce Gherkin je samozřejmě nutné
nějakým způsobem implementovat. A přesně pro tento účel použijeme výše zmíněný
framework <i>godog</i>, který dokáže přečíst skript (přesněji řečeno
<i>testovací scénář</i>) napsaný v&nbsp;Gherkinu a navrhnout na jeho základě
strukturu implementace testů pro jazyk Go. Následně <i>godog</i> dokáže testy
spustit a vyhodnotit jejich výsledky. Alternativně je možné BDD testy zahrnout
do testů jednotkových a spouštět je jediným příkazem.</p>

<p>S&nbsp;jazykem Gherkin a se způsobem jeho použití jsme se již na stránkách
Rootu několikrát setkali, protože jsme si ukázali implementaci Gherkinu jak pro
programovací jazyk <a
href="https://www.root.cz/vyhledavani/?qs=clojure">Clojure</a>, tak i pro <a
href="https://www.root.cz/n/python/">Python</a>. Podrobnější informace o těchto
implementacích naleznete v&nbsp;následujících článcích:</p>

<ol>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure (2)<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (druhá část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (závěrečná část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/</a>
</li>

</ol>

<p><div class="rs-tip-major">Poznámka: to, že se dají BDD testy psát nezávisle
na vlastním programovacím jazyku (jazycích), v&nbsp;nichž je aplikace
implementována, je velmi dobrá vlastnost. Musíme si totiž uvědomit, že
jednotlivé části aplikace mohou být vytvořeny v&nbsp;různých programovacích
jazycích a dokonce i různými vývojovými týmy. Testy zjišťující chování aplikace
jako celku je ovšem možné tvořit nezávisle na použitých jazycích.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Testovaný modul s&nbsp;implementací jednoduchého akumulátoru</h2>

<p>Víme již, že jazyk Gherkin je navržen takovým způsobem, aby ho uživatelé
(nemusí se totiž nutně jednat pouze o programátory) mohli začít používat
prakticky okamžitě, tj.&nbsp;bez nutnosti studia sáhodlouhých manuálů. I
z&nbsp;toho důvodu si možnosti tohoto doménově specifického jazyka postupně
ukážeme na několika demonstračních příkladech. První příklad bude velmi
jednoduchý, protože bude obsahovat jediný balíček, který budeme chtít
otestovat. I přesto se však bude jednat o plnohodnotný projekt, jehož struktura
odpovídá struktuře projektů složitějších a sofistikovanějších. Adresář
s&nbsp;projektem i s&nbsp;testovacím scénářem by měl vypadat následovně:</p>

<pre>
.
├── accumulator.go
├── accumulator_test.go
└── features
    └── accumulator.feature
</pre>

<p>Balíček <strong>accumulator</strong>, který vlastně tvoří celou testovanou
aplikaci, je velmi stručný, protože obsahuje jedinou metodu nazvanou
<strong>acc</strong>, jež &ndash; jak ostatně její název naznačuje &ndash;
slouží k&nbsp;připočtení nějaké hodnoty k&nbsp;akumulátoru. Samotný akumulátor
je představován uživatelsky definovanou datovou strukturou, jejíž existence
umožňuje, aby bylo možné vytvořit výše zmíněnou metodu
<strong>accumulate</strong>:</p>

<pre>
package <strong>accumulator</strong>
&nbsp;
type <strong>acc</strong> struct {
        value int
}
&nbsp;
func (a *acc) <strong>accumulate</strong>(x int) {
        a.value += x
}
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že testovat budeme
metodu, jejíž název začíná malým písmenem, tj.&nbsp;jedná se o metodu
viditelnou pouze v&nbsp;rámci aktuálního balíčku. Tomu budeme muset přizpůsobit
i testy &ndash; budou muset být umístěny ve stejném balíčku.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vytvoření testovacího scénáře</h2>

<p>Nyní se pokusíme napsat testovací scénář, který otestuje chování výše
uvedené datové struktury <strong>acc</strong> i její metody
<strong>accumulate</strong>. Povšimněte si, že skutečně můžeme nejdříve napsat
testovací scénář a teprve poté se pokusit o implementaci jednotlivých kroků
testovacího scénáře. Tento postup je jednodušší a z&nbsp;hlediska vývoje
projektu i korektnější &ndash; ostatně BDD testy je možné začít psát již na
samotném začátku vývoje, aniž by byla vyvinuta jediná řádka skutečného
programového kódu. Tolik teorie, vraťme se nyní k&nbsp;testovacímu scénáři.
Jeho první varianta může vypadat následovně:</p>

<pre>
Feature: simple accumulator checks
  An accumulator must be able to add a number to its content
&nbsp;
  Scenario: Accumulate positive integer
    Given I have an accumulator with 0
    When I add 2 to accumulator
    Then the accumulated result should be 2
</pre>

<p>Aby bylo možné testovací scénář spustit, musíme mít nainstalován nástroj
<strong>godog</strong>, což je spustitelná nativní aplikace nainstalovaná
základními prostředky programovacího jazyka Go. Pro instalaci tohoto nástroje
použijte příkaz:</p>

<pre>
$ <strong>go get github.com/DATA-DOG/godog/cmd/godog</strong>
</pre>

<p>Po instalaci je <strong>godog</strong> popř.&nbsp;<strong>godog.exe</strong>
umístěn v&nbsp;adresáři <strong>$GOPATH/bin</strong>, což je většinou adresář
<strong>~/go/bin</strong>:</p>

<pre>
$ <strong>$GOPATH/bin/godog --version</strong>
&nbsp;
Godog version is: v0.7.14
</pre>

<p>Cestu k&nbsp;tomuto adresáři je vhodné přidat do proměnné prostředí
<strong>PATH</strong> aby bylo možné nástroj <strong>godog</strong> snadno a
odkudkoli spouštět bez nutnosti specifikace cesty k&nbsp;němu:</p>

<pre>
$ <strong>export PATH=$PATH:$GOPATH/bin</strong>
</pre>

<p>Základní otestování instalace:</p>

<pre>
$ <strong>godog --version</strong>
&nbsp;
Godog version is: v0.7.14
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. První spuštění nástroje <strong>godog</strong></h2>

<p>Nástroj <strong>godog</strong> zjistí, že sice existuje testovací scénář,
ovšem jednotlivé kroky popsané ve scénáři nejsou definovány. Z&nbsp;tohoto
důvodu vypíše informace o tom, že sice má k&nbsp;dispozici scénář se třemi
kroky, ovšem ani jeden z&nbsp;těchto kroků není implementován:</p>

<pre>
Feature: simple accumulator checks
  An accumulator must be able to add a number to its content
&nbsp;
  Scenario: Add two positive integers       # features/accumulator.feature:4
    Given I have an accumulator with 0
    When I add 2 to accumulator
    Then the accumulated result should be 5
&nbsp;
1 scenarios (1 undefined)
3 steps (3 undefined)
49.638µs
</pre>

<p>Navíc se ovšem dozvíme mnohem užitečnější informaci &ndash; kostru
jednotlivých kroků testu. Každý krok je představován funkcí akceptující určitý
počet parametrů (podle proměnných částí testovacího scénáře) a navíc je nakonec
nutné explicitně uvést vazbu mezi kroky napsanými v&nbsp;testu a právě
deklarovanými funkcemi. Zajímavé je, že <strong>godog</strong> velmi správně
odhadl, které části popisu jednotlivých kroků testu jsou proměnné:</p>

<pre>
You can implement step definitions for undefined steps with these snippets:
&nbsp;
func <strong>iHaveAnAccumulatorWith</strong>(arg1 int) error {
        return godog.ErrPending
}
&nbsp;
func <strong>iAddToAccumulator</strong>(arg1 int) error {
        return godog.ErrPending
}
&nbsp;
func <strong>theAccumulatedResultShouldBe</strong>(arg1 int) error {
        return godog.ErrPending
}
&nbsp;
func <strong>FeatureContext</strong>(s *godog.Suite) {
        s.Step(`^I have an accumulator with (\d+)$`, iHaveAnAccumulatorWith)
        s.Step(`^I add (\d+) to accumulator$`, iAddToAccumulator)
        s.Step(`^the accumulated result should be (\d+)$`, theAccumulatedResultShouldBe)
}
</pre>

<a href="https://www.root.cz/obrazek/395844/"><img src="https://i.iinfo.cz/images/626/godog-1-prev.png" class="image-395844" alt="&#160;" width="348" height="270" /></a>
<p><i>Obrázek 6: Výstup z&nbsp;nástroje Godog s&nbsp;návrhem jednotlivých kroků testu.</i></p>

<p>Poznámka: v&nbsp;programovacím jazyce Python by se při použití knihovny
Behave postupovalo nepatrně odlišným způsobem &ndash; v&nbsp;této knihovně (a
jazyku) se totiž pro navázání jednotlivých kroků testů na funkce používají
dekorátory:</p>

<pre>
from behave import given, then, when
from src.adder import add
&nbsp;
&nbsp;
@given('The function {function_name} is callable')
def <strong>initial_state</strong>(context, function_name):
    pass
&nbsp;
&nbsp;
@when('I call function {function} with arguments {x:d} and {y:d}')
def <strong>call_add</strong>(context, function, x, y):
    context.result = add(x, y)
&nbsp;
&nbsp;
@then('I should get {expected:d} as a result')
def <strong>check_integer_result</strong>(context, expected):
    assert context.result == expected, \
        "Wrong result: {r} != {e}".format(r=context.result, e=expected)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Implementace jednotlivých kroků testu a spuštění testovacího scénáře</h2>

<p>Nyní je nutné jednotlivé kroky testu implementovat a uložit do souboru se
jménem <strong>accumulator_test.go</strong>. Funkce s&nbsp;implementací
jednotlivých kroků testu prozatím vrací hodnotu <strong>ErrPending</strong>,
protože se jedná o pouhou kostru testu:</p>

<pre>
package <strong>accumulator</strong>
&nbsp;
import (
        "github.com/DATA-DOG/godog"
)
&nbsp;
func <strong>iHaveAnAccumulatorWith</strong>(arg1 int) error {
        return godog.ErrPending
}
&nbsp;
func <strong>iAddToAccumulator</strong>(arg1 int) error {
        return godog.ErrPending
}
&nbsp;
func <strong>theAccumulatedResultShouldBe</strong>(arg1 int) error {
        return godog.ErrPending
}
</pre>

<p>Nesmíme zapomenout na propojení jednotlivých kroků testů z&nbsp;jejich
implementací, což zajistí funkce <strong>FeatureContext</strong>:</p>

<pre>
func <strong>FeatureContext</strong>(s *godog.Suite) {
        s.Step(`^I have an accumulator with (\d+)$`, iHaveAnAccumulatorWith)
        s.Step(`^I add (\d+) to accumulator$`, iAddToAccumulator)
        s.Step(`^the accumulated result should be (\d+)$`, theAccumulatedResultShouldBe)
}
</pre>

<p>Po spuštění by se měly zobrazit tyto zprávy:</p>

<a href="https://www.root.cz/obrazek/395845/"><img src="https://i.iinfo.cz/images/626/godog-2-prev.png" class="image-395845" alt="&#160;" width="370" height="89" /></a>
<p><i>Obrázek 7: Výstup z&nbsp;nástroje Godog po spuštění testů, ovšem ve
chvíli, kdy ještě nejsou jednotlivé kroky plně implementovány.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Proměnná s&nbsp;kontextem celého scénáře</h2>

<p>Pokud se podíváme na celý testovací scénář, uvidíme, že mezi jednotlivými
kroky scénáře musí existovat objekt reprezentující akumulátor, který
testujeme:</p>

<pre>
Feature: simple accumulator checks
  An accumulator must be able to add a number to its content
&nbsp;
  Scenario: Accumulate positive integer
    Given I have an accumulator with 0
    When I add 2 to accumulator
    Then the accumulated result should be 2
</pre>

<p>Ten vytvoříme zcela snadno &ndash; jako globální proměnnou, kterou ovšem
prozatím nebudeme inicializovat:</p>

<pre>
var <strong>testAccumulator</strong> *acc
</pre>

<p>Samotnou inicializaci lze provést například hned v&nbsp;prvním kroku testu,
kde dokonce již víme, jakou hodnotu má akumulátor mít:</p>

<pre>
func <strong>iHaveAnAccumulatorWith</strong>(initialValue int) error {
        testAccumulator = &amp;acc{value: initialValue}
        return nil
}
</pre>

<p>Povšimněte si též třetího kroku, kde se porovnává skutečná hodnota
akumulátoru s&nbsp;hodnotou očekávanou. V&nbsp;případě chyby se vrátí instance
struktury <strong>error</strong>, v&nbsp;opačném případě hodnota
<strong>nil</strong>:</p>

<pre>
func <strong>theAccumulatedResultShouldBe</strong>(expected int) error {
        if testAccumulator.value == expected {
                return nil
        }
        return fmt.Errorf("Incorrect accumulator value")
}
</pre>

<p>Úplný zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
package <strong>accumulator</strong>
&nbsp;
import (
        "fmt"
        "github.com/DATA-DOG/godog"
)
&nbsp;
var testAccumulator *acc
&nbsp;
func <strong>iHaveAnAccumulatorWith</strong>(initialValue int) error {
        testAccumulator = &amp;acc{value: initialValue}
        return nil
}
&nbsp;
func <strong>iAddToAccumulator</strong>(value int) error {
        testAccumulator.accumulate(value)
        return nil
}
&nbsp;
func <strong>theAccumulatedResultShouldBe</strong>(expected int) error {
        if testAccumulator.value == expected {
                return nil
        }
        return fmt.Errorf("Incorrect accumulator value")
}
&nbsp;
func <strong>FeatureContext</strong>(s *godog.Suite) {
        s.Step(`^I have an accumulator with (\d+)$`, iHaveAnAccumulatorWith)
        s.Step(`^I add (\d+) to accumulator$`, iAddToAccumulator)
        s.Step(`^the accumulated result should be (\d+)$`, theAccumulatedResultShouldBe)
}
</pre>

<p><div class="rs-tip-major">Poznámka: pokud se podíváte na výše uvedený
příklad naprogramovaný v&nbsp;Pythonu, je zřejmé, že Python
(resp.&nbsp;přesněji řečeno jeho knihovna Behave) automaticky do každé funkce
s&nbsp;definicí testů dodává <strong>kontext</strong> ve formě reference na
objekt.</div></p>

<p>Výsledek spuštění BDD testů:</p>

<pre>
Feature: simple accumulator checks
  An accumulator must be able to add a number to its content
&nbsp;
  Scenario: Accumulate positive integer     # features/accumulator.feature:4
    Given I have an accumulator with 0      # accumulator_test.go:10 -&gt; iHaveAnAccumulatorWith
    When I add 2 to accumulator             # accumulator_test.go:16 -&gt; iAddToAccumulator
    Then the accumulated result should be 2 # accumulator_test.go:20 -&gt; theAccumulatedResultShouldBe
&nbsp;
1 scenarios (1 passed)
3 steps (3 passed)
743.228µs
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Alternativní způsob inicializace akumulátoru</h2>

<p>Ukažme si ještě jeden způsob inicializace akumulátoru. Tentokrát použijeme
inicializaci v&nbsp;bloku <strong>BeforeScenario</strong>, který se zavolá před
každým testovacím scénářem (prozatím máme jen jediný scénář):</p>

<pre>
s.BeforeScenario(func(interface{}) {
        testAccumulator = &amp;acc{}
})
</pre>

<p>První krok testu se změní &ndash; bude již pracovat s&nbsp;existující
strukturou <strong>testAccumulator</strong>:</p>

<pre>
func <strong>iHaveAnAccumulatorWith</strong>(initialValue int) error {
        testAccumulator.value = initialValue
        return nil
}
</pre>

<p><div class="rs-tip-major">Poznámka: připomeňme si, že v&nbsp;Go můžeme
(většinou) pracovat s&nbsp;hodnotou referencovanou přes ukazatel stejným
způsobem, jakoby se jednalo o přímou proměnnou &ndash; není tedy zapotřebí
používat zápisu s&nbsp;*.</div></p>

<p>Upravený testovací scénář vypadá následovně:</p>

<pre>
package <strong>accumulator</strong>
&nbsp;
import (
        "fmt"
        "github.com/DATA-DOG/godog"
)
&nbsp;
var <strong>testAccumulator</strong> *acc = nil
&nbsp;
func <strong>iHaveAnAccumulatorWith</strong>(initialValue int) error {
        testAccumulator.value = initialValue
        return nil
}
&nbsp;
func <strong>iAddToAccumulator</strong>(value int) error {
        testAccumulator.accumulate(value)
        return nil
}
&nbsp;
func <strong>theAccumulatedResultShouldBe</strong>(expected int) error {
        if testAccumulator.value == expected {
                return nil
        }
        return fmt.Errorf("Incorrect accumulator value")
}
&nbsp;
func <strong>FeatureContext</strong>(s *godog.Suite) {

        s.Step(`^I have an accumulator with (\d+)$`, iHaveAnAccumulatorWith)
        s.Step(`^I add (\d+) to accumulator$`, iAddToAccumulator)
        s.Step(`^the accumulated result should be (\d+)$`, theAccumulatedResultShouldBe)
&nbsp;
        s.BeforeScenario(func(interface{}) {
                testAccumulator = &amp;acc{}
        })
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Úprava testů pro možnost použití záporných hodnot</h2>

<p>Pokud se dobře podíváte na řádky <strong>s.Step()</strong>
z&nbsp;předchozího příkladu, zjistíte, že se v&nbsp;nich používají regulární
výrazy na &bdquo;odchycení&ldquo; celočíselné hodnoty. Problém je, že jsme
použili (na základě vytvořené šablony) výraz pouze pro kladná čísla \d+ (tedy
pro sekvenci číslic) a nikoli pro čísla záporná. Ostatně si to můžeme snadno
vyzkoušet po nepatrné úpravě testovacího scénáře:</p>

<pre>
Feature: simple accumulator checks
  An accumulator must be able to add a number to its content
&nbsp;
  Scenario: Accumulate positive integer
    Given I have an accumulator with 0
    When I add 2 to accumulator
    Then the accumulated result should be 2
&nbsp;
  Scenario: Accumulate negative integer
    Given I have an accumulator with 0
    When I add -2 to accumulator
    Then the accumulated result should be -2
</pre>

<p>V&nbsp;případě, že testy spustíme, vypíše se informace o tom, že některé
kroky nejsou implementovány. Ovšem framework prozatím není tak propracovaný,
aby nám nabídl úpravu stávajících kroků &ndash; pouze nabídne vytvoření kroků
nových, v&nbsp;nichž je - (minus) konstantním znakem před číslicemi:</p>

<pre>
You can implement step definitions for undefined steps with these snippets:
&nbsp;
func <strong>iAddToAccumulator</strong>(arg1 int) error {
        return godog.ErrPending
}
&nbsp;
func <strong>theAccumulatedResultShouldBe</strong>(arg1 int) error {
        return godog.ErrPending
}
&nbsp;
func <strong>FeatureContext</strong>(s *godog.Suite) {
        s.Step(`^I add -(\d+) to accumulator$`, iAddToAccumulator)
        s.Step(`^the accumulated result should be -(\d+)$`, theAccumulatedResultShouldBe)
}
</pre>

<p>To je pochopitelně nesprávné řešení, ale můžeme se jím inspirovat &ndash;
znak - (minus) bude nepovinnou částí textu zachycovaného regulárním
výrazem:</p>

<pre>
s.Step(`^I have an accumulator with (-?\d+)$`, iHaveAnAccumulatorWith)
s.Step(`^I add (-?\d+) to accumulator$`, iAddToAccumulator)
s.Step(`^the accumulated result should be (-?\d+)$`, theAccumulatedResultShouldBe)
</pre>

<p>Úplný zdrojový kód s&nbsp;testy se změní jen nepatrně, ovšem nyní již bude
plně funkční:</p>

<pre>
package <strong>accumulator</strong>
&nbsp;
import (
        "fmt"
        "github.com/DATA-DOG/godog"
)
&nbsp;
var testAccumulator *acc
&nbsp;
func <strong>iHaveAnAccumulatorWith</strong>(initialValue int) error {
        testAccumulator.value = initialValue
        return nil
}
&nbsp;
func <strong>iAddToAccumulator</strong>(value int) error {
        testAccumulator.accumulate(value)
        return nil
}
&nbsp;
func <strong>theAccumulatedResultShouldBe</strong>(expected int) error {
        if testAccumulator.value == expected {
                return nil
        }
        return fmt.Errorf("Incorrect accumulator value")
}
&nbsp;
func <strong>FeatureContext</strong>(s *godog.Suite) {
        s.Step(`^I have an accumulator with (-?\d+)$`, iHaveAnAccumulatorWith)
        s.Step(`^I add (-?\d+) to accumulator$`, iAddToAccumulator)
        s.Step(`^the accumulated result should be (-?\d+)$`, theAccumulatedResultShouldBe)
&nbsp;
        s.BeforeScenario(func(interface{}) {
                testAccumulator = &amp;acc{}
        })
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Tabulky v&nbsp;BDD testech, aneb zápis osnovy testovacího scénáře</h2>

<p>Do testovacího scénáře můžeme přidat i takzvanou <i>osnovu</i> (<i>Scenario
Outline</i>):</p>

<pre>
Feature: simple accumulator checks
  An accumulator must be able to add a number to its content
&nbsp;
  Scenario Outline: Accumulate multiple values
    Given I have an accumulator with 0
    When I add &lt;amount&gt; to accumulator
    Then the accumulated result should be &lt;accumulated&gt;
&nbsp;
  Examples:
   |amount|accumulated|
   | 0    | 0         |
   | 1    | 1         |
   | 1    | 2         |
   | 10   | 12        |
</pre>

<p>Tento scénář se bude pro každý řádek tabulky opakovat, přičemž v&nbsp;každé
iteraci se namísto textů &lt;amount&gt; a &lt;result&gt; dosadí hodnoty
z&nbsp;příslušného sloupce tabulky. Jedná se přitom o pouhou textovou
substituci, takže ve skutečnosti je možné s tabulkami provádět i dosti složité
operace.</p>

<p>Samotná implementace testů se zdánlivě nemusí žádným způsobem měnit:</p>

<pre>
package <strong>accumulator</strong>
&nbsp;
import (
        "fmt"
        "github.com/DATA-DOG/godog"
)
&nbsp;
var testAccumulator *acc
&nbsp;
func <strong>iHaveAnAccumulatorWith</strong>(initialValue int) error {
        testAccumulator.value = initialValue
        return nil
}
&nbsp;
func <strong>iAddToAccumulator</strong>(value int) error {
        testAccumulator.accumulate(value)
        return nil
}
&nbsp;
func <strong>theAccumulatedResultShouldBe</strong>(expected int) error {
        if testAccumulator.value == expected {
                return nil
        }
        return fmt.Errorf("Incorrect accumulator value %d", testAccumulator.value)
}
&nbsp;
func <strong>FeatureContext</strong>(s *godog.Suite) {
        s.Step(`^I have an accumulator with (-?\d+)$`, iHaveAnAccumulatorWith)
        s.Step(`^I add (-?\d+) to accumulator$`, iAddToAccumulator)
        s.Step(`^the accumulated result should be (-?\d+)$`, theAccumulatedResultShouldBe)
&nbsp;
        s.BeforeScenario(func(interface{}) {
                testAccumulator = &amp;acc{}
        })
}
</pre>

<p>Ve skutečnosti ovšem testy skončí s&nbsp;chybou:</p>

<pre>
Feature: simple accumulator checks
  An accumulator must be able to add a number to its content
&nbsp;
  Scenario Outline: Accumulate multiple values          # features/accumulator.feature:4
    Given I have an accumulator with 0                  # accumulator_test.go:11 -&gt; iHaveAnAccumulatorWith
    When I add &lt;amount&gt; to accumulator                  # accumulator_test.go:16 -&gt; iAddToAccumulator
    Then the accumulated result should be &lt;accumulated&gt; # accumulator_test.go:20 -&gt; theAccumulatedResultShouldBe
&nbsp;
    Examples:
      | amount | accumulated |
      | 0      | 0           |
      | 1      | 1           |
      | 1      | 2           |
        Incorrect accumulator value 1
      | 10     | 12          |
        Incorrect accumulator value 10
&nbsp;
--- Failed steps:
&nbsp;
  Scenario Outline: Accumulate multiple values # features/accumulator.feature:4
    Then the accumulated result should be 2 # features/accumulator.feature:7
      Error: Incorrect accumulator value 1
&nbsp;
  Scenario Outline: Accumulate multiple values # features/accumulator.feature:4
    Then the accumulated result should be 12 # features/accumulator.feature:7
      Error: Incorrect accumulator value 10
&nbsp;
&nbsp;
4 scenarios (2 passed, 2 failed)
12 steps (10 passed, 2 failed)
356.714µs
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Inicializace akumulátoru jedenkrát pro celý test</h2>

<p>Důvod pádu předchozí implementace BDD je prostý &ndash; osnova testu se ve
skutečnosti provede jako čtyři na sobě nezávislé testy, přičemž každý
z&nbsp;nich znovu inicializuje akumulátor na nulovou hodnotu. Ovšem testovací
scénář můžeme upravit, stejně jako jeho implementaci:</p>

<pre>
Feature: simple accumulator checks
  An accumulator must be able to add a number to its content
&nbsp;
  Scenario Outline: Accumulate multiple values
    When I add &lt;amount&gt; to accumulator
    Then the accumulated result should be &lt;accumulated&gt;
&nbsp;
  Examples:
   |amount|accumulated|
   | 0    | 0         |
   | 1    | 1         |
   | 1    | 2         |
   | 10   | 12        |
</pre>

<p>V&nbsp;implementaci změníme inicializaci akumulátoru jen jedinkrát pro celý
běh testů (<strong>BeforeSuite</strong> namísto
<strong>BeforeScenario</strong>):</p>

<pre>
func <strong>FeatureContext</strong>(s *godog.Suite) {
        s.Step(`^I have an accumulator with (-?\d+)$`, iHaveAnAccumulatorWith)
        s.Step(`^I add (-?\d+) to accumulator$`, iAddToAccumulator)
        s.Step(`^the accumulated result should be (-?\d+)$`, theAccumulatedResultShouldBe)
&nbsp;
        s.BeforeSuite(func() {
                testAccumulator = &amp;acc{}
        })
}
</pre>

<p>Výsledek po spuštění:</p>

<pre>
Feature: simple accumulator checks
  An accumulator must be able to add a number to its content
&nbsp;
  Scenario Outline: Accumulate multiple values          # features/accumulator.feature:4
    When I add &lt;amount&gt; to accumulator                  # accumulator_test.go:16 -&gt; iAddToAccumulator
    Then the accumulated result should be &lt;accumulated&gt; # accumulator_test.go:20 -&gt; theAccumulatedResultShouldBe
&nbsp;
    Examples:
      | amount | accumulated |
      | 0      | 0           |
      | 1      | 1           |
      | 1      | 2           |
      | 10     | 12          |
&nbsp;
4 scenarios (4 passed)
8 steps (8 passed)
965.258µs
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Úprava aplikace takovým způsobem, aby bylo možné spustit BDD i jednotkové testy jediným příkazem</h2>

<p>V&nbsp;případě, že budete chtít spouštět všechny testy jediným příkazem
<strong>go test</strong>, je nutné celou aplikaci nepatrně upravit. Zejména je
nutné zpracovat všechny přepínače začínající na <strong>godog.</strong>, které
budeme ukládat do struktury typu <strong>godog.Options</strong>:</p>

<pre>
var opt = godog.Options{
        Format: "progress",
}
&nbsp;
func <strong>init</strong>() {
        godog.BindFlags("godog.", flag.CommandLine, &amp;opt)
}
</pre>

<p>Implementace testovaného balíčku (tedy nikoli testů) se změní takto:</p>

<pre>
package <strong>accumulator</strong>
&nbsp;
import (
        "flag"
        "github.com/DATA-DOG/godog"
)
&nbsp;
type <strong>acc</strong> struct {
        value int
}
&nbsp;
func (a *acc) <strong>accumulate</strong>(x int) {
        a.value += x
}
&nbsp;
var opt = godog.Options{
        Format: "progress",
}
&nbsp;
func <strong>init</strong>() {
        godog.BindFlags("godog.", flag.CommandLine, &amp;opt)
}
</pre>

<p>Do implementace testovacího scénáře přidáme novou funkci nazvanou
<strong>TestMain</strong> (nebo <strong>Test<i>Cokoli</i></strong>), což
vlastně není nic jiného, než běžná funkce volaná jako součást jednotkových
testů. V&nbsp;této funkci se provede inicializace knihovny
<strong>godog</strong>, předání případných parametrů zadaných na příkazové
řádce a nakonec i samotné spuštění testů:</p>

<pre>
func <strong>TestMain</strong>(m *testing.M) {
        flag.Parse()
        opt.Paths = flag.Args()
&nbsp;
        status := godog.RunWithOptions("godogs", func(s *godog.Suite) {
                FeatureContext(s)
        }, opt)
&nbsp;
        if st := m.Run(); st &gt; status {
                status = st
        }
        os.Exit(status)
}
</pre>

<p>Implementace testovacího scénáře bude po úpravě vypadat následovně:</p>

<pre>
package <strong>accumulator</strong>
&nbsp;
import (
        "flag"
        "fmt"
        "github.com/DATA-DOG/godog"
        "os"
        "testing"
)
&nbsp;
var testAccumulator *acc
&nbsp;
func <strong>iHaveAnAccumulatorWith</strong>(initialValue int) error {
        testAccumulator.value = initialValue
        return nil
}
&nbsp;
func <strong>iAddToAccumulator</strong>(value int) error {
        testAccumulator.accumulate(value)
        return nil
}
&nbsp;
func <strong>theAccumulatedResultShouldBe</strong>(expected int) error {
        if testAccumulator.value == expected {
                return nil
        }
        return fmt.Errorf("Incorrect accumulator value %d", testAccumulator.value)
}
&nbsp;
func <strong>FeatureContext</strong>(s *godog.Suite) {
        s.Step(`^I have an accumulator with (-?\d+)$`, iHaveAnAccumulatorWith)
        s.Step(`^I add (-?\d+) to accumulator$`, iAddToAccumulator)
        s.Step(`^the accumulated result should be (-?\d+)$`, theAccumulatedResultShouldBe)
&nbsp;
        s.BeforeScenario(func(interface{}) {
                testAccumulator = &amp;acc{}
        })
}
&nbsp;
func <strong>TestMain</strong>(m *testing.M) {
        flag.Parse()
        opt.Paths = flag.Args()
&nbsp;
        status := godog.RunWithOptions("godogs", func(s *godog.Suite) {
                FeatureContext(s)
        }, opt)
&nbsp;
        if st := m.Run(); st &gt; status {
                status = st
        }
        os.Exit(status)
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Spuštění BDD testů společně s&nbsp;jednotkovými testy</h2>

<p>Nyní se již můžeme pokusit spustit následující (již poměrně komplikovaný)
testovací scénář, který je opakován čtyřikrát, pokaždé pro odlišnou sérii
vstupních hodnot i očekávaných výsledků:</p>

<pre>
Feature: simple accumulator checks
  An accumulator must be able to add a number to its content
&nbsp;
  Scenario Outline: Accumulate multiple values
    Given I have an accumulator with 0
    When I add &lt;amount&gt; to accumulator
    Then the accumulated result should be &lt;accumulated&gt;
    When I add &lt;amount2&gt; to accumulator
    Then the accumulated result should be &lt;accumulated2&gt;
&nbsp;
  Examples:
   |amount|accumulated|amount2|accumulated2|
   | 0    | 0         | 0     | 0          |
   | 1    | 1         | 1     | 2          |
   | 2    | 2         | 2     | 4          |
   | 10   | 10        | 10    | 20         |
</pre>

<p>Spuštění provedeme tímto příkazem:</p>

<pre>
$ <strong>go test -godog.format=pretty</strong>
</pre>

<p>V&nbsp;zobrazených výsledcích si povšimněte, že se spustí jak BDD testy, tak
i případné jednotkové testy (ty neexistují, takže se jen lakonicky vypíše
zpráva &bdquo;testing: warning: no tests to run&ldquo;):</p>

<pre>
Feature: simple accumulator checks
  An accumulator must be able to add a number to its content
&nbsp;
  Scenario Outline: Accumulate multiple values           # features/accumulator.feature:4
    Given I have an accumulator with 0                   # accumulator_test.go:14 -&gt; iHaveAnAccumulatorWith
    When I add &lt;amount&gt; to accumulator                   # accumulator_test.go:19 -&gt; iAddToAccumulator
    Then the accumulated result should be &lt;accumulated&gt;  # accumulator_test.go:23 -&gt; theAccumulatedResultShouldBe
    When I add &lt;amount2&gt; to accumulator                  # accumulator_test.go:19 -&gt; iAddToAccumulator
    Then the accumulated result should be &lt;accumulated2&gt; # accumulator_test.go:23 -&gt; theAccumulatedResultShouldBe
&nbsp;
    Examples:
      | amount | accumulated | amount2 | accumulated2 |
      | 0      | 0           | 0       | 0            |
      | 1      | 1           | 1       | 2            |
      | 2      | 2           | 2       | 4            |
      | 10     | 10          | 10      | 20           |
&nbsp;
4 scenarios (4 passed)
20 steps (20 passed)
468.319µs
testing: warning: no tests to run
PASS
ok      _/home/tester/src/go/bank     0.006s
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Podporované formáty s&nbsp;výsledky BDD testů</h2>

<p>Nástroj <strong>godog</strong> podporuje několik formátů, do nichž může
ukládat výsledky BDD testů. Tyto formáty lze specifikovat s&nbsp;využitím volby
<strong>-godog.f</strong> nebo <strong>-godog.format</strong>, za kterou se
zapíše jeden z&nbsp;podporovaných formátů: &bdquo;events&ldquo;,
&bdquo;junit&ldquo;, &bdquo;pretty&ldquo; (ten jsme doposud používali),
&bdquo;progress&ldquo; a &bdquo;cucumber&ldquo;:</p>

<pre>
  -godog.f string
        How to format tests output. Built-in formats:
            - events: Produces JSON event stream, based on spec: 0.1.0.
            - junit: Prints junit compatible xml to stdout
            - pretty: Prints every feature with runtime statuses.
            - progress: Prints a character per step.
            - cucumber: Produces cucumber JSON format output. (default "progress")
</pre>

<a href="https://www.root.cz/obrazek/395846/"><img src="https://i.iinfo.cz/images/626/godog-3-prev.png" class="image-395846" alt="&#160;" width="370" height="108" /></a>
<p><i>Obrázek 8: Ve výchozím nastavení se pouze pro každý krok scénáře zobrazí
zelená nebo červená tečka (&bdquo;progress&ldquo;).</i></p>

<a href="https://www.root.cz/obrazek/395847/"><img src="https://i.iinfo.cz/images/626/godog-4-prev.png" class="image-395847" alt="&#160;" width="370" height="156" /></a></p>
<p><i>Obrázek 9: Volba &bdquo;pretty&ldquo; vypíše výsledky testů podobným
způsobem, jaký známe například z&nbsp;knihovny Behave pro Python.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Formát JUnit</h2>

<p>Jedním z&nbsp;formátů, který se používá poměrně často (zejména na CI), je <a
href="https://junit.org/junit5/">formát knihovny JUnit</a>. Jedná se o formát
založený na XML, jenž může být zpracováván různými pluginy pro CI (například
pro Jenkins), výsledky testů mohou být převedeny do grafů apod. Tento formát se
vytvoří po zadání následujícího přepínače:</p>

<pre>
-godog.f junit
</pre>

<p>Konkrétně:</p>

<pre>
$ <strong>go test -godog.f junit</strong>
</pre>

<p>Výsledkem by měl být v&nbsp;našem konkrétním případě tento soubor (časy běhu
testů se pochopitelně budou odlišovat, ovšem jak formát, tak i výsledky budou
shodné):</p>

<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;testsuites name="godogs" tests="4" skipped="0" failures="0" errors="0" time="165.39µs"&gt;
  &lt;testsuite name="simple accumulator checks" tests="4" skipped="0" failures="0" errors="0" time="73.038µs"&gt;
    &lt;testcase name="Accumulate multiple values #1" status="passed" time="23.303µs"&gt;&lt;/testcase&gt;
    &lt;testcase name="Accumulate multiple values #2" status="passed" time="9.687µs"&gt;&lt;/testcase&gt;
    &lt;testcase name="Accumulate multiple values #3" status="passed" time="11.763µs"&gt;&lt;/testcase&gt;
    &lt;testcase name="Accumulate multiple values #4" status="passed" time="9.692µs"&gt;&lt;/testcase&gt;
  &lt;/testsuite&gt;
&lt;/testsuites&gt;
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Formáty JSON: Cucumber a JSON event stream</h2>

<p>Další dva podporované formáty jsou založeny na <a
href="http://json.org/">JSONu</a>. První z&nbsp;formátů se používá ve světě
jazyka Cucumber (uvádím jen zkrácenou podobu, protože se jedná o dosti ukecaný
formát):</p>

<pre>
[
    {
        "uri": "features/accumulator.feature",
        "id": "simple-accumulator-checks",
        "keyword": "Feature",
        "name": "simple accumulator checks",
        "description": "  An accumulator must be able to add a number to its content",
        "line": 1,
        "elements": [
            {
                "id": "simple-accumulator-checks;accumulate-multiple-values;;2",
                "keyword": "Scenario Outline",
                "name": "Accumulate multiple values",
                "description": "",
                "line": 13,
                "type": "scenario",
                "steps": [
                    {
                        "keyword": "Given ",
                        "name": "I have an accumulator with 0",
                        "line": 13,
                        "match": {
                            "location": "accumulator_test.go:14"
                        },
                        "result": {
                            "status": "passed",
                            "duration": 22618
                        }
                    },
                    {
                        "keyword": "When ",
                        "name": "I add 0 to accumulator",
                        "line": 13,
                        "match": {
                            "location": "accumulator_test.go:19"
                        },
                        "result": {
                            "status": "passed",
                            "duration": 5715
                        }
                    },
                    {
                        "keyword": "Then ",
                        "name": "the accumulated result should be 0",
                        "line": 13,
                        "match": {
                            "location": "accumulator_test.go:23"
                        },
                        "result": {
                            "status": "passed",
                            "duration": 3841
                        }
                    },
                    {
                        "keyword": "When ",
                        "name": "I add 0 to accumulator",
                        "line": 13,
                        "match": {
                            "location": "accumulator_test.go:19"
                        },
                        "result": {
                            "status": "passed",
                            "duration": 3180
                        }
                    },
                    {
                        "keyword": "Then ",
                        "name": "the accumulated result should be 0",
                        "line": 13,
                        "match": {
                            "location": "accumulator_test.go:23"
                        },
                        "result": {
                            "status": "passed",
                            "duration": 3639
                        }
                    }
                ]
            },
            ...
            ...
            ...
        ]
    }
]
</pre>

<p><div class="rs-tip-major">Poznámka: výsledek byl naformátován přes:</div></p>

<pre>
$ <strong>python -m json.tool</strong>
</pre>

<p>Druhý formát je vlastně sekvence jednotlivých JSONů, které obsahují
informace o událostech, které při běhu testů vznikly. Jednou z&nbsp;událostí je
i načtení testovacího scénáře s&nbsp;tabulkou, další událostí spuštění testů,
nalezení definice testů atd.:</p>

<pre>
{"event":"TestRunStarted","version":"0.1.0","timestamp":1572963740811,"suite":"godogs"}
{"event":"TestSource","location":"features/accumulator.feature:1","source":"Feature: simple accumulator checks\n  An accumulator must be able to add a number to its content\n\n  Scenario Outline: Accumulate multiple values\n    Given I have an accumulator with 0\n    When I add \u003camount\u003e to accumulator\n    Then the accumulated result should be \u003caccumulated\u003e\n    When I add \u003camount2\u003e to accumulator\n    Then the accumulated result should be \u003caccumulated2\u003e\n\n  Examples:\n   |amount|accumulated|amount2|accumulated2|\n   | 0    | 0         | 0     | 0          |\n   | 1    | 1         | 1     | 2          |\n   | 2    | 2         | 2     | 4          |\n   | 10   | 10        | 10    | 20         |\n\n"}
{"event":"TestCaseStarted","location":"features/accumulator.feature:13","timestamp":1572963740811}
{"event":"StepDefinitionFound","location":"features/accumulator.feature:5","definition_id":"accumulator_test.go:14 -\u003e iHaveAnAccumulatorWith","arguments":[[27,28]]}
{"event":"TestStepStarted","location":"features/accumulator.feature:5","timestamp":1572963740811}
{"event":"TestStepFinished","location":"features/accumulator.feature:5","timestamp":1572963740811,"status":"passed"}
{"event":"StepDefinitionFound","location":"features/accumulator.feature:6","definition_id":"accumulator_test.go:19 -\u003e iAddToAccumulator","arguments":[[6,7]]}
{"event":"TestStepStarted","location":"features/accumulator.feature:6","timestamp":1572963740811}
{"event":"TestStepFinished","location":"features/accumulator.feature:6","timestamp":1572963740811,"status":"passed"}
...
...
...
{"event":"TestStepStarted","location":"features/accumulator.feature:9","timestamp":1572963740811}
{"event":"TestStepFinished","location":"features/accumulator.feature:9","timestamp":1572963740811,"status":"passed"}
{"event":"TestCaseFinished","location":"features/accumulator.feature:16","timestamp":1572963740811,"status":"passed"}
{"event":"TestRunFinished","status":"passed","timestamp":1572963740811,"snippets":"","memory":""}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah následující části seriálu</h2>

<p>V&nbsp;navazující části seriálu o programovacím jazyce Go si popíšeme
knihovny a frameworky určené pro testování REST API, což je přesně oblast, ve
které se Go velmi často používá.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně pět megabajtů), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td>1</td><td>bdd_iteration_0</td><td>projekt, který neobsahuje žádné testy</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_0">https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_0</a></td></tr>
<tr><td>2</td><td>bdd_iteration_1</td><td>kostra BDD testů, ovšem jednotlivé kroky nejsou plně implementovány</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_1">https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_1</a></td></tr>
<tr><td>3</td><td>bdd_iteration_2</td><td>implementace jednotlivých kroků BDD testů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_2">https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_2</a></td></tr>
<tr><td>4</td><td>bdd_iteration_3</td><td>alternativní způsob inicializace akumulátoru</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_3">https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_3</a></td></tr>
<tr><td>5</td><td>bdd_iteration_4</td><td>úprava testů tak, aby akceptovaly záporná čísla</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_4">https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_4</a></td></tr>
<tr><td>6</td><td>bdd_iteration_5</td><td>tabulky v&nbsp;testovacích scénářích</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_5">https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_5</a></td></tr>
<tr><td>7</td><td>bdd_iteration_5B</td><td>vylepšení předchozího příkladu &ndash; inicializace akumulátoru jen jedenkrát</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_5B">https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_5B</a></td></tr>
<tr><td>8</td><td>bdd_iteration_6</td><td>tabulky v&nbsp;testovacích scénářích</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_6">https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_6</a></td></tr>
<tr><td>9</td><td>bdd_iteration_7</td><td>spojení BDD s&nbsp;jednotkovými testy</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_7">https://github.com/tisnik/go-root/blob/master/article_41/bdd_iteration_7</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Cucumber for golang<br />
<a href="https://github.com/DATA-DOG/godog">https://github.com/DATA-DOG/godog</a>
</li>

<li>How to Use Godog for Behavior-driven Development in Go<br />
<a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go</a>
</li>

<li>Comparative Analysis Of GoLang Testing Frameworks<br />
<a href="https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks">https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks</a>
</li>

<li>A Quick Guide to Testing in Golang<br />
<a href="https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/">https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/</a>
</li>

<li>Tom's Obvious, Minimal Language.<br />
<a href="https://github.com/toml-lang/toml">https://github.com/toml-lang/toml</a>
</li>

<li>xml.org<br />
<a href="http://www.xml.org/">http://www.xml.org/</a>
</li>

<li>Soubory .properties<br />
<a href="https://en.wikipedia.org/wiki/.properties">https://en.wikipedia.org/wiki/.properties</a>
</li>

<li>Soubory INI<br />
<a href="https://en.wikipedia.org/wiki/INI_file">https://en.wikipedia.org/wiki/INI_file</a>
</li>

<li>JSON to YAML<br />
<a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a>
</li>

<li>Data Format Converter<br />
<a href="https://toolkit.site/format.html">https://toolkit.site/format.html</a>
</li>

<li>Viper na GitHubu<br />
<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>
</li>

<li>GoDotEnv na GitHubu<br />
<a href="https://github.com/joho/godotenv">https://github.com/joho/godotenv</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

