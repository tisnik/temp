<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Užitečná novinka v Go 1.22: vylepšení směrování v knihovně net/http</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Užitečná novinka v Go 1.22: vylepšení směrování v knihovně net/http</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Užitečná novinka v&nbsp;Go 1.22: vylepšení směrování v&nbsp;knihovně net/http</a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Užitečná novinka v&nbsp;Go 1.22: vylepšení směrování v&nbsp;knihovně net/http</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Jednoduchý HTTP server využívající rozhraní <strong>ResponseWriter</strong> a strukturu <strong>Request</strong></h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "io"
        "net/http"
)
&nbsp;
func <strong>mainEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!\n")
}
&nbsp;
func <strong>main</strong>() {
        http.HandleFunc("/", mainEndpoint)
        http.ListenAndServe(":8000", nil)
}
</pre>

<p>Zajímavější je pochopitelně implementace HTTP serveru, která bude generovat dynamický obsah. Ten lze tvořit buď přímo &bdquo;ručně&ldquo; v&nbsp;programu, nebo můžeme využít některé balíčky ze standardní knihovny programovacího jazyka Go pro generování dat ve formátu JSON, XML popř.&nbsp;knihovny s&nbsp;implementací šablon (<i>templates</i>). Dnes nás ovšem bude zajímat první způsob, tj.&nbsp;&bdquo;ruční&ldquo; generování odpovědi, která je serverem posílána klientovi na základě jeho dotazu (<i>request</i>). Jedna z&nbsp;nejjednodušších implementací takového HTTP serveru může vypadat například následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "net/http"
)
&nbsp;
func <strong>mainEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        response := "Hello world!\n"
        writer.Write([]byte(response))
}
&nbsp;
func <strong>main</strong>() {
        http.HandleFunc("/", mainEndpoint)
        http.ListenAndServe(":8000", nil)
}
</pre>

<p>Funkci takového serveru si můžeme snadno otestovat, například s&nbsp;využitím nástroje <strong>wget</strong> nebo ještě lépe <strong>curl</strong>. Vzhledem k&nbsp;tomu, že víme, na jakém portu server běží a jaký <i>endpoint</i> máme zavolat, sestavíme příkaz pro <strong>curl</strong> tímto způsobem:</p>

<pre>
$ <strong>curl -v localhost:8000</strong>
</pre>

<p>Výstup bude obsahovat i ladicí informace vyžádané přepínačem <strong>-v</strong>:</p>

<pre>
* Rebuilt URL to: localhost:8000/
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8000 (#0)
&gt; GET / HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8000
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Date: Mon, 06 May 2019 18:14:06 GMT
&lt; Content-Length: 13
&lt; Content-Type: text/plain; charset=utf-8
&lt; 
<strong>Hello world!</strong>
* Connection #0 to host localhost left intact
</pre>

<p>Ve zdrojovém kódu si povšimněte především funkce, v&nbsp;níž je implementováno generování a posílání odpovědi. Této funkci jsou předány dvě hodnoty, přičemž první je typu rozhraní <strong>http.ResponseWriter</strong> a druhá je typu ukazatel na <strong>http.Request</strong>:</p>

<pre>
type <strong>ResponseWriter</strong> interface {
        Header() Header
        Write([]byte) (int, error)
        WriteHeader(statusCode int)
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<p>Nyní se podívejme na způsob realizace jednoduchého HTTP serveru, který bude používat balíček <strong>gorilla/mux</strong>. Základní služby poskytované serverem budou stejné, jako v&nbsp;předchozím demonstračním příkladu, což konkrétně znamená, že vrácen bude buď konstantní řetězec, nebo aktuální hodnota čítače. Jediné změny nastanou náhradou následujících dvou řádků s&nbsp;registrací handlerů:</p>

<pre>
http.HandleFunc("/", mainEndpoint)
http.HandleFunc("/counter", counterEndpoint)
</pre>

<p>V&nbsp;upraveném zdrojovém kódu demonstračního příkladu použijeme takzvaný <i>směrovač</i> neboli <i>router</i> poskytovaný knihovnou
<strong>gorilla/mux</strong>. Jeho konstrukce může vypadat takto:</p>

<pre>
router := mux.NewRouter()
</pre>

<p>Popř.&nbsp;můžeme explicitně specifikovat, zda se budou URI typu <strong>/cesta</strong> a <strong>/cesta/</strong> považovat za shodné či nikoli:</p>

<pre>
router := mux.NewRouter().StrictSlash(true)
</pre>

<p>Dále zaregistrujeme oba handlery, ovšem nyní použijeme metodu <strong>router.HandleFunc</strong> a nikoli funkci <strong>http.HandleFunc</strong> (z&nbsp;balíčku <strong>net/http</strong>):</p>

<pre>
router.HandleFunc("/", mainEndpoint)
router.HandleFunc("/counter", counterEndpoint)
</pre>

<p>Nakonec je pochopitelně nutné HTTP server spustit. Povšimněte si, že se nyní využije druhý parametr funkce <strong>http.ListenAndServe</strong> &ndash; již se zde nepředává hodnota <strong>nil</strong>, ale instance právě nakonfigurovaného směrovače:</p>

<pre>
err := http.ListenAndServe(ADDRESS, router)
</pre>

<p>Úplný zdrojový kód upraveného příkladu, který naleznete na adrese <a href="https://github.com/tisnik/go-root/blob/master/article_38/02_http_server_with_mux.go">https://github.com/tisnik/go-root/blob/master/article_38/02_http_server_with_mux.go</a>,
vypadá následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "github.com/gorilla/mux"
        "io"
        "log"
        "net/http"
        "os"
        "sync"
)
&nbsp;
const ADDRESS = ":8080"
&nbsp;
var counter int
var mutex = &amp;sync.Mutex{}
&nbsp;
func <strong>mainEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        io.WriteString(writer, "Hello world!\n")
}
&nbsp;
func <strong>counterEndpoint</strong>(writer http.ResponseWriter, request *http.Request) {
        mutex.Lock()
        counter++
        fmt.Fprintf(writer, "Counter: %d\n", counter)
        mutex.Unlock()
}
&nbsp;
func <strong>main</strong>() {
        router := mux.NewRouter().StrictSlash(true)
&nbsp;
        router.HandleFunc("/", mainEndpoint)
        router.HandleFunc("/counter", counterEndpoint)
&nbsp;
        log.Println("Starting HTTP server at address", ADDRESS)
        err := http.ListenAndServe(ADDRESS, router)
        if err != nil {
                log.Fatal("Unable to initialize HTTP server", err)
                os.Exit(2)
        }
}
</pre>

<p>Funkcionalitu tohoto příkladu snadno otestujeme, a to opět s&nbsp;využitím
nástroje <strong>curl</strong>:</p>

<pre>
$ <strong>curl -v localhost:8080</strong>
&nbsp;
* Rebuilt URL to: localhost:8080/
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; GET / HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Date: Sun, 13 Oct 2019 16:25:33 GMT
&lt; Content-Length: 13
&lt; Content-Type: text/plain; charset=utf-8
&lt; 
Hello world!
* Connection #0 to host localhost left intact
</pre>

<p>Otestování funkce čítače:</p>

<pre>
$ <strong>curl -v localhost:8080/counter</strong>
&nbsp;
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; GET /counter HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Date: Sun, 13 Oct 2019 16:25:48 GMT
&lt; Content-Length: 11
&lt; Content-Type: text/plain; charset=utf-8
&lt; 
Counter: 1
* Connection #0 to host localhost left intact
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p>V&nbsp;případě, že u předchozího demonstračního příkladu použijeme jinou HTTP metodu než GET (což je pro nástroj <strong>curl</strong> výchozí metoda, pokud ovšem nebudeme na server posílat data), bude například čítač stále přístupný. O tom se ostatně můžeme velmi snadno přesvědčit, pokud budeme explicitně specifikovat metodu <strong>POST</strong>, <strong>PUT</strong> či dokonce <strong>DELETE</strong>:</p>

<pre>
$ <strong>curl -v -X POST localhost:8080/counter</strong>
&nbsp;
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; POST /counter HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Date: Sun, 13 Oct 2019 16:31:50 GMT
&lt; Content-Length: 11
&lt; Content-Type: text/plain; charset=utf-8
&lt; 
Counter: 2
* Connection #0 to host localhost left intact
&nbsp;
$ <strong>curl -v -X DELETE localhost:8080/counter</strong>
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; DELETE /counter HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Date: Sun, 13 Oct 2019 16:31:56 GMT
&lt; Content-Length: 11
&lt; Content-Type: text/plain; charset=utf-8
&lt; 
Counter: 3
* Connection #0 to host localhost left intact
</pre>

<p>Takové chování ovšem většinou u služeb postavených nad REST API není ideální, protože s&nbsp;prostředky, které jsou přes API obsluhovány, se provádí různé operace typu CRUD. Samozřejmě je možné i při použití základního balíčku <strong>net/http</strong> získat jméno použité metody, ovšem nejedná se o ideální řešení. To nám nabízí až balíček <strong>gorilla/mux</strong>, v&nbsp;němž můžeme omezit volání handleru pouze pro danou metodu. V&nbsp;našem demonstračním příkladu prozatím pouze čteme hodnoty (prostředků) a neměníme je, takže nám postačuje použít metodu GET omezit použití ostatních metod:</p>

<pre>
router := mux.NewRouter().StrictSlash(true)
&nbsp;
router.HandleFunc("/", mainEndpoint).Methods("GET")
router.HandleFunc("/counter", counterEndpoint).Methods("GET")
</pre>

<p>Upravený zdrojový kód demonstračního příkladu bude vypadat následovně:</p>

<pre>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář, můžete namísto toho použít odkazy na jednotlivé příklady, které
naleznete v&nbsp;následujících tabulkách.</p>

<h3>Klasická implementace HTTP serverů založených pouze na základních knihovnách jazyka Go</h3>

<table>
<tr><th> #</th><th>Soubor</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_server.go</td><td>jednoduchý HTTP server posílající dynamicky generovaný obsah</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_24/01_server.go">https://github.com/tisnik/go-root/blob/master/article_24/01_server.go</a></td></tr>
<tr><td> 2</td><td>02_slow_server.go</td><td>zpomalení generování jednotlivých bloků generovaného obsahu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_24/02_slow_server.go">https://github.com/tisnik/go-root/blob/master/article_24/02_slow_server.go</a></td></tr>
<tr><td> 3</td><td>03_flushing_server.go</td><td>využití metody <strong>Flush</strong> z&nbsp;rozhraní <strong>Flusher</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_24/03_flushing_server.go">https://github.com/tisnik/go-root/blob/master/article_24/03_flushing_server.go</a></td></tr>
<tr><td> 4</td><td>04_close_detector.go</td><td>test, zda klient neukončil spojení</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_24/04_close_detector.go">https://github.com/tisnik/go-root/blob/master/article_24/04_close_detector.go</a></td></tr>
</table>

<h3>HTTP servery založené na knihovně Gorilla mux</h3>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_simple_http_server.go</td><td>jednoduchý HTTP server založený na standardním balíčku <strong>net/http</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/01_simple_http_server.go">https://github.com/tisnik/go-root/blob/master/article_38/01_simple_http_server.go</a></td></tr>
<tr><td> 2</td><td>02_http_server_with_mux.go</td><td>HTTP server používající balíček <strong>gorilla/mux</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/02_http_server_with_mux.go">https://github.com/tisnik/go-root/blob/master/article_38/02_http_server_with_mux.go</a></td></tr>
<tr><td> 3</td><td>03_method_specification.go</td><td>specifikace HTTP metod použitých při volání REST API</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/03_method_specification.go">https://github.com/tisnik/go-root/blob/master/article_38/03_method_specification.go</a></td></tr>
<tr><td> 4</td><td>04_method_specification.go</td><td>rozšíření a vylepšení předchozího příkladu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/04_method_specification.go">https://github.com/tisnik/go-root/blob/master/article_38/04_method_specification.go</a></td></tr>
<tr><td> 5</td><td>05_resource_handling.go</td><td>vylepšená správa zdrojů (<i>resources</i>)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/05_resource_handling.go">https://github.com/tisnik/go-root/blob/master/article_38/05_resource_handling.go</a></td></tr>
<tr><td> 6</td><td>06_resource_handling.go</td><td>práce se jménem zdroje</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/06_resource_handling.go">https://github.com/tisnik/go-root/blob/master/article_38/06_resource_handling.go</a></td></tr>
<tr><td> 7</td><td>07_resource_handling_id.go</td><td>omezení znaků, které může být použito ve jménu zdroje</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/07_resource_handling_id.go">https://github.com/tisnik/go-root/blob/master/article_38/07_resource_handling_id.go</a></td></tr>
<tr><td> 8</td><td>08_headers.go</td><td>specifikace hlaviček, které musí být poslány společně s&nbsp;požadavkem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/08_headers.go">https://github.com/tisnik/go-root/blob/master/article_38/08_headers.go</a></td></tr>
<tr><td> 9</td><td>09_subroutes.go</td><td>vytvoření a konfigurace podsměrovačů (<i>subroutes</i>)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/09_subroutes.go">https://github.com/tisnik/go-root/blob/master/article_38/09_subroutes.go</a></td></tr>
<tr><td>10</td><td>10_simple_middleware.go</td><td>dvě middleware funkce použité při zpracování dotazů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_38/10_simple_middleware.go">https://github.com/tisnik/go-root/blob/master/article_38/10_simple_middleware.go</a></td></tr>
</table>

<h3>HTTP servery založené na základních knihovnách jazyka Go verze 1.22 a vyšších</h3>

<table>
<tr><th> #</th><th>Soubor</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AE/">https://github.com/tisnik/go-root/blob/master/article_AE/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_AE/">https://github.com/tisnik/go-root/blob/master/article_AE/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Go 1.22 Release Notes<br />
<a href="https://go.dev/doc/go1.22#enhanced_routing_patterns">https://go.dev/doc/go1.22#enhanced_routing_patterns</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Routing Enhancements for Go 1.22<br />
<a href="https://go.dev/blog/routing-enhancements">https://go.dev/blog/routing-enhancements</a>
</li>

<li>net/http: enhanced ServeMux routing #61410<br />
<a href="https://github.com/golang/go/issues/61410">https://github.com/golang/go/issues/61410</a>
</li>

<li>net/http: add methods and path variables to ServeMux patterns #60227<br />
<a href="https://github.com/golang/go/discussions/60227">https://github.com/golang/go/discussions/60227</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>
