<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>GopherJS: transpřekladač z jazyka Go do JavaScriptu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>GopherJS: transpřekladač z jazyka Go do JavaScriptu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. GopherJS: transpřekladač z&nbsp;jazyka Go do JavaScriptu</a></p>
<p><a href="#k02">2. Svět transpřekladačů do JavaScriptu</a></p>
<p><a href="#k03">*** 3. Transpřekladač GopherJS</a></p>
<p><a href="#k04">4. Instalace Go 1.19.13 před samotnou instalací GopherJS</a></p>
<p><a href="#k05">5. Jak vlastně vypadá instalace Go 1.19.13?</a></p>
<p><a href="#k06">*** 6. Instalace transpřekladače GopherJS</a></p>
<p><a href="#k07">*** 7. Program typu &bdquo;Hello, world!&ldquo;, který se bude spouštět ve webovém prohlížeči</a></p>
<p><a href="#k08">8. Pomocný HTTP server pro poskytování HTML stránek i JavaScriptových souborů</a></p>
<p><a href="#k09">*** 9. Spuštění programu typu &bdquo;Hello, world!&ldquo; ve webovém prohlížeči</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. GopherJS: transpřekladač z&nbsp;jazyka Go do JavaScriptu</h2>

<p>Pravděpodobně nejjednodušší a nejpřímější cestou podpory nového programovacího jazyka ve webových prohlížečích je integrace jeho interpretru přímo do prohlížeče popř.&nbsp;použití pluginu s&nbsp;tímto interpretrem. Ovšem i přes snahy některých vývojářů a softwarových společností o začlenění dalších skriptovacích jazyků do webových prohlížečů (z&nbsp;historického pohledu se jednalo minimálně o Tcl, VBScript, Dart v&nbsp;Dartiu apod.) je patrné, že v&nbsp;současnosti je jediným široce akceptovaným <i>skriptovacím jazykem</i> na straně webového prohlížeče pouze JavaScript se všemi přednostmi a zápory, které tato monokultura přináší. To však v&nbsp;žádném případě neznamená, že by se ty části aplikace, které mají být spouštěny na straně klienta, musely psát pouze v&nbsp;JavaScriptu, jenž nemusí zdaleka všem vývojářům vyhovovat, ať již z&nbsp;objektivních či ze subjektivních příčin (například kvůli dosti <a href="https://www.youtube.com/watch?v=et8xNAc2ic8">zvláštně navrženému typovému systému</a>, který ovšem umožnil realizovat například <a href="http://www.jsfuck.com/">JSF*ck</a>).</p>

<p>V&nbsp;relativně nedávné minulosti proto vzniklo a pořád ještě vzniká mnoho projektů, jejichž cílem je umožnit tvorbu webových aplikací pro prohlížeč v&nbsp;jiných programovacích jazycích. Zdrojové kódy je pak nutné nějakým způsobem zpracovat (transpřeložit, přeložit, ...) takovým způsobem, aby je bylo možné ve webovém prohlížeči spustit. Možností je hned několik &ndash; lze použít plugin (velmi problematické a dnes značně nepopulární řešení), <i>transpřekladač</i> do JavaScriptu či virtuální stroj popř.&nbsp;interpret daného jazyka implementovaný opět v&nbsp;JavaScriptu..</p>

<p>Jednu z&nbsp;dnes velmi populárních technik umožňujících použití prakticky libovolného programovacího jazyka pro tvorbu aplikací běžících na straně webového prohlížeče, představuje použití takzvaných <i>transcompilerů (source-to-source compiler)</i> zajišťujících překlad programu napsaného ve zdrojovém programovacím jazyce do funkčně identického programu napsaného v&nbsp;JavaScriptu (někdy se setkáme i s&nbsp;označením <a href="https://scotch.io/tutorials/javascript-transpilers-what-they-are-why-we-need-them">transpiler</a>). Transpřekladač se většinou spouští jen jednou na vývojářském počítači, samotní klienti již mají k&nbsp;dispozici JavaScriptový kód.</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti není technologie transpřekladačů žádným způsobem svázána právě s&nbsp;JavaScriptem, protože se používala (a používá) i pro další manipulace se zdrojovými kódy.</div></p>

<p>Existuje však i druhá možnost, kdy je samotný transpřekladač naprogramován v&nbsp;JavaScriptu a spouštěn přímo ve webovém prohlížeči klientů. Oba přístupy mají své přednosti, ale pochopitelně i nějaké zápory (například tvůrci uzavřených aplikací pravděpodobně budou upřednostňovat první možnost, protože výstupy transcompilerů jsou většinou dosti nečitelné; dokonce by mohla snaha o prozkoumání kódu spadat pod reverse engineering). Druhá možnost je relativně elegantní v&nbsp;tom ohledu, že se z&nbsp;pohledu programátora webové aplikace skutečně jedná o nový programovací jazyk, který je jakoby přímo zpracováván prohlížečem na stejné úrovni jako JavaScript. Příkladem může být kombinace JavaScriptu a jazyka <a href="https://www.root.cz/clanky/propojeni-sveta-lispu-se-svetem-javascriptu-s-vyuzitim-transprekladace-wisp/">WISP</a>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Svět transpřekladačů do JavaScriptu</h2>

<p>Z&nbsp;praxe můžeme uvést například následující projekty založené na
technologii transpřekladače. Některé z&nbsp;těchto projektů je možné použít
přímo v&nbsp;prohlížeči, jiné provádí překlad do JavaScriptu na příkazovém
řádku. A pochopitelně existují i kombinace obou způsobů (opět viz například
projekt <i>WISP</i> podporující oba režimy):</p>:

<table>
<tr><th>#</th><th>Jazyk</th><th>Poznámka</th></tr>
<tr><td>1</td><td>CoffeeScript</td><td>přidání syntaktického cukru do JavaScriptu</td></tr>
<tr><td>2</td><td>JSweet</td><td>překlad programů z&nbsp;Javy do JavaScriptu popř.&nbsp;do TypeScriptu</td></tr>
<tr><td>3</td><td>Transcrypt</td><td>překlad Pythonu do JavaScriptu (tomuto nástroji se budeme věnovat v&nbsp;dalším článku)</td></tr>
<tr><td>4</td><td>ClojureScript</td><td>překlad aplikací psaných v&nbsp;Clojure do JavaScriptu</td></tr>
<tr><td>5</td><td>Kaffeine</td><td>rozšíření JavaScriptu o nové vlastnosti</td></tr>
<tr><td>6</td><td>RedScript</td><td>jazyk inspirovaný Ruby</td></tr>
<tr><td>7</td><td>GorillaScript</td><td>další rozšíření JavaScriptu</td></tr>
<tr><td>8</td><td>ghcjs</td><td>transpřekladač pro fanoušky programovacího jazyka Haskell</td></tr>
<tr><td>9</td><td>wisp</td><td>zjednodušená a dnes již nevyvíjená varianta ClojureScriptu</td></tr>
<tr><td>10</td><td>Babel</td><td>překlad novějších variant JavaScript (ES2015) a TypeScriptu do zvolené (starší) verze JavaScriptu, stále populární, i přesto, že nové prohlížeče ES2015 podporují</td></tr>
<tr><td>11</td><td>GopherJS</td><td>překladač programů naprogramovaných v&nbsp;jazyce Go do JavaScriptu &ndash; tímto projektem se zabýváme dnes</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: seznam všech (či alespoň většiny)
známých transpřekladačů do JavaScriptu naleznete například na stránce <a
href="https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS">https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS</a>,
i když je nutné varovat, že některé projekty (kromě výše zmíněných) jsou
v&nbsp;dosti špatném stavu nebo již nejsou dále vyvíjeny. To se do jisté míry
týká i druhého transpřekladače z&nbsp;jazyka Go do JavaScriptu &ndash; projektu
<a href="https://github.com/tredoe/go2js">go2js</a>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Transpřekladač GopherJS</h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace Go 1.19.13 před samotnou instalací GopherJS</h2>

<p>GopherJS je sice nabízen stejným způsobem, jako jakýkoli jiný balíček pro
Go, ovšem jeho instalace má jeden háček &ndash; je totiž nutné použít Go
1.19.13 a nikoli novější verze Go (nejnovější stabilní verze přitom nese číslo
1.23). Musíme tedy k&nbsp;již existující nainstalované verzi Go paralelně
nainstalovat i verzi Go 1.19.13. Dále popsaný postup se může hodit i
v&nbsp;jiných situacích, protože vám umožňuje mít na jednom počítači větší
množství verzí Go.</p>

<p>Nejprve nainstalujeme balíček nazvaný <strong>go1.19.13@latest</strong>,
který obsahuje samotný instalátor Go 1.19.13 (takže tento balíček je velmi malý
&ndash; několik kilobajtů):</p>

<pre>
$ <strong>go install golang.org/dl/</strong>
&nbsp;
go: downloading golang.org/dl v0.0.0-20241213165225-4b9e3f9eb6e1
</pre>

<p>Po instalaci si ověříme, že je sice možné spustit program
<strong>go1.19.13</strong>, ovšem nejedná se o plnohodnotný překladač jazyka
Go, což nám napoví vypsaná zpráva:</p>

<pre>
$ <strong>go1.19.13</strong>
&nbsp;
go1.19.13: not downloaded. Run 'go1.19.13 download' to install to /home/ptisnovs/sdk/go1.19.13
</pre>

<p>Instalace celého Go 1.19.13 (překladače, dalších nástrojů, knihoven,
zdrojových kódů) se realizuje následujícím příkazem:</p>

<pre>
$ <strong>go1.19.13 download</strong>
&nbsp;
Downloaded   0.0% (     3119 / 149141790 bytes) ...
Downloaded   0.4% (   524288 / 149141790 bytes) ...
&nbsp;
Downloaded  98.3% (146618736 / 149141790 bytes) ...
Downloaded 100.0% (149141790 / 149141790 bytes)
Unpacking /home/ptisnovs/sdk/go1.19.13/go1.19.13.linux-amd64.tar.gz ...
Success. You may now run 'go1.19.13'
</pre>

<p>Nyní je již možné použít příkaz <strong>go1.19.13</strong> namísto pouhého
<strong>go</strong> pro spuštění jakéhokoli standardního nástroje jazyka
Go:</p>

<pre>
$ <strong>go1.19.13 version</strong>
&nbsp;
go version go1.19.13 linux/amd64
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Jak vlastně vypadá instalace Go 1.19.13?</h2>

<p>Nástroje i knihovny starší verze jazyka Go, v&nbsp;našem případě konkrétně
Go 1.19.13, jsou nainstalovány do adresáře <strong>sdk</strong> umístěného
v&nbsp;domovském adresáři uživatele. Interní struktura odpovídá běžné instalaci
Go (navíc zde zůstal i tarball, který je samozřejmě možné smazat):</p>

<pre>
$ <strong>tree ~/sdk -L 2</strong>
&nbsp;
/home/ptisnovs/sdk
└── go1.19.13
    ├── api
    ├── bin
    ├── codereview.cfg
    ├── CONTRIBUTING.md
    ├── doc
    ├── go1.19.13.linux-amd64.tar.gz
    ├── lib
    ├── LICENSE
    ├── misc
    ├── PATENTS
    ├── pkg
    ├── README.md
    ├── SECURITY.md
    ├── src
    ├── test
    └── VERSION
</pre>

<p>Samotný příkaz <strong>go1.19.13</strong> je uložen na standardním místě,
tj.&nbsp;v&nbsp;<strong>~/go/bin</strong>:</p>

<pre>
$ <strong>whereis go1.19.13</strong>
&nbsp;
go1.19.13: /home/ptisnovs/go/bin/go1.19.13
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instalace transpřekladače GopherJS</h2>

<p></p>

<pre>
$ <strong>go install github.com/gopherjs/gopherjs@v1.19.0-beta1</strong>
</pre>

<pre>
[ptisnovs@ptisnovs-thinkpadt14gen3 xy]$ go install github.com/gopherjs/gopherjs@v1.19.0-beta1
go: downloading github.com/gopherjs/gopherjs v1.19.0-beta1
go: downloading github.com/sirupsen/logrus v1.8.1
go: downloading golang.org/x/term v0.0.0-20220411215600-e5f449aeb171
go: downloading github.com/spf13/cobra v1.2.1
go: downloading github.com/spf13/pflag v1.0.5
go: downloading golang.org/x/sync v0.3.0
go: downloading github.com/neelance/sourcemap v0.0.0-20200213170602-2833bce08e4c
go: downloading golang.org/x/sys v0.10.0
go: downloading github.com/neelance/astrewrite v0.0.0-20160511093645-99348263ae86
go: downloading golang.org/x/tools v0.11.0
go: downloading github.com/fsnotify/fsnotify v1.5.1
go: downloading github.com/visualfc/goembed v0.3.3
go: downloading github.com/evanw/esbuild v0.18.0
</pre>

<pre>
$ <strong>gopherjs</strong>
</pre>

<pre>
GopherJS is a tool for compiling Go source code to JavaScript.
&nbsp;
Usage:
  gopherjs [command]
&nbsp;
Available Commands:
  build       compile packages and dependencies
  clean       clean GopherJS build cache
  completion  generate the autocompletion script for the specified shell
  doc         display documentation for the requested, package, method or symbol
  help        Help about any command
  install     compile and install packages and dependencies
  run         compile and run Go program
  serve       compile on-the-fly and serve
  test        test packages
  version     print GopherJS compiler version
&nbsp;
Flags:
      --alloc_profile string   Save GopherJS compiler allocation profile at the given path. If unset, profiling is disabled.
      --cpu_profile string     Save GopherJS compiler CPU profile at the given path. If unset, profiling is disabled.
  -h, --help                   help for gopherjs
      --log_level string       Compiler log level (debug, info, warn, error, fatal, panic). (default "error")
&nbsp;
Additional help topics:
  gopherjs get        download and install packages and dependencies
&nbsp;
Use "gopherjs [command] --help" for more information about a command.
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Program typu &bdquo;Hello, world!&ldquo;, který se bude spouštět ve webovém prohlížeči</h2>

<p></p>

<pre>
<i>// Technologie GopherJS</i>
<i>//</i>
<i>// Program typu "Hello, world!"</i>
&nbsp;
package main
&nbsp;
import (
        "fmt"
        "syscall/js"
)
&nbsp;
func main() {
        fmt.Println("Hello, world!")
        js.Global().Call("alert", "Hello, world!")
}
</pre>

<p></p>

<pre>
&lt;!doctype html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Hello, world! from GopherJS&lt;/title&gt;
        &lt;script src="hello_world.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        Hello, world! from GopherJS
    &lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Pomocný HTTP server pro poskytování HTML stránek i JavaScriptových souborů</h2>

<p>Zbývá nám vyřešit ještě jeden problém &ndash; jak vlastně otevřít HTML
stránku, v&nbsp;níž je umístěn odkaz na zdrojový kód s&nbsp;JavaScriptem?.
Mohlo by se zdát, že se jedná o triviální úkol &ndash; prostě stránku otevřeme
ve webovém prohlížeči přímo ze souboru a prohlížeč si po jejím zparsování
ostatní potřebné soubory načte automaticky sám přímo z&nbsp;disku. Toto řešení
je sice funkční v&nbsp;případě obrázků či dalšího multimediálního obsahu, ovšem
už v&nbsp;případě JavaScriptu nemusí vždy fungovat (tato funkcionalita může být
zakázána) a nebude funkční například ani v&nbsp;případě WebAssembly. Prohlížeč
totiž v&nbsp;tomto případě může striktně vyžadovat, aby mu byl předán obsah
s&nbsp;korektním MIME typem a taktéž může být načítání a spouštění skriptů
přímo z&nbsp;disku zakázáno ve webovém prohlížeči.</p>

<p>Bude tedy praktičtější nasimulovat chování naší &bdquo;aplikace&ldquo;
(jediného HTML souboru a jediného JavaScriptového zdrojového kódu) tak, aby to
odpovídalo jejímu reálnému použití &ndash; tj.&nbsp;spuštění na vzdáleném
klientovi. To zajistíme spuštěním vlastního HTTP serveru, který je
v&nbsp;případě použití programovacího jazyka Go implementován téměř triviálním
způsobem:</p>

<pre>
<strong>package</strong> main
&nbsp;
import (
        "fmt"
        "net/http"
)
&nbsp;
<strong>func</strong> main() {
        <strong>const</strong> address = ":8080"
&nbsp;
        <strong>const</strong> directory = http.Dir(".")
&nbsp;
        fmt.Println("Starting HTTP server on address", address)
        err := http.ListenAndServe(address, http.FileServer(directory))
&nbsp;
        <strong>if</strong> err != nil {
                fmt.Println("Failed to start server", err)
                return
        }
}
</pre>

<p>HTTP server spustíme ve vlastním terminálu, a to z&nbsp;adresáře, kde se
nachází i naše aplikace &bdquo;Hello, world!&ldquo;:</p>

<pre>
$ <strong>go run http_server.go</strong>
&nbsp;
Starting HTTP server on address :8080
</pre>

<p>Nyní si můžeme ověřit, zda jsou všechny soubory naší aplikace dostupné i
z&nbsp;klienta:</p>

<pre>
$ <strong>curl localhost:8080/</strong>
</pre>

<p>Náš HTTP server zobrazí (resp.&nbsp;vrátí) seznam souborů:</p>

<pre>
&lt;pre&gt;
&lt;a href="hello_world.go"&gt;hello_world.go&lt;/a&gt;
&lt;a href="hello_world.html"&gt;hello_world.html&lt;/a&gt;
&lt;a href="hello_world.js"&gt;hello_world.js&lt;/a&gt;
&lt;a href="hello_world.js.map"&gt;hello_world.js.map&lt;/a&gt;
&lt;a href="http_server.go"&gt;http_server.go&lt;/a&gt;
&lt;/pre&gt;
</pre>

<p>Pro jistotu se podíváme i na kód HTML stránky:</p>

<pre>
$ <strong>curl localhost:8080/hello_world.html</strong>
&nbsp;
&lt;!doctype html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Hello, world! from GopherJS&lt;/title&gt;
        &lt;script src="hello_world.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        Hello, world! from GopherJS
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>A ověříme si, že i JavaScriptový kód je dostupný a navíc i to, že se vrací
korektní Content-Type (podtrženo):</p>

<pre>
$ <strong>curl -v localhost:8080/hello_world.js &gt; /dev/null</strong>
&nbsp;
* Host localhost:8080 was resolved.
* IPv6: ::1
* IPv4: 127.0.0.1
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying [::1]:8080...
* Connected to localhost (::1) port 8080
&gt; GET /hello_world.js HTTP/1.1
&gt; Host: localhost:8080
&gt; User-Agent: curl/8.6.0
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Accept-Ranges: bytes
&lt; Content-Length: 1297978
&lt; <u>Content-Type: text/javascript; charset=utf-8</u>
&lt; Last-Modified: Fri, 03 Jan 2025 20:17:02 GMT
&lt; Date: Fri, 03 Jan 2025 20:18:19 GMT
&lt; 
{ [33280 bytes data]
100 1267k  100 1267k    0     0   125M      0 --:--:-- --:--:-- --:--:--  137M
* Connection #0 to host localhost left intact
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Spuštění programu typu &bdquo;Hello, world!&ldquo; ve webovém prohlížeči</h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. Proč je výsledný soubor <strong>hello_world.go</strong> tak obrovský?</h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
<!doctype html>
<html>
    <head>
        <meta charset="utf-8"/>
    </head>
    <body>
        <h1 id="header">nothing</h2>
        <script src="dom_manipulation.js" type="text/javascript"></script>
    </body>
</html>
</pre>

<pre>
// Technologie GopherJS
//
// - manipulace s DOMem přímo z jazyka Go
// - změna atributu vybraného elementu

package main

import (
	"fmt"
	"syscall/js"
)

func main() {
	fmt.Println("started")

	// získání objektu typu "window" (z pohledu JavaScriptu)
	window := js.Global()

	// přečtení instance objektu "document"
	document := window.Get("document")

	// získání reference na element s ID="header" umístěného
	// na HTML stránce
	element := document.Call("getElementById", "header")

	// změna atributu elementu
	// (text uvnitř značky)
	element.Set("innerHTML", "foobar")

	fmt.Println("finished")
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;jazyce Go, které jsou určené pro
transpřeklad do JavaScriptu s&nbsp;využitím nástroje <strong>GopherJS</strong>,
byly uloženy do Git repositáře, jenž je dostupný na adrese <a
href="https://github.com/RedHatOfficial/GoCourse">https://github.com/RedHatOfficial/GoCourse</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>1</td><td>hello_world.go</td><td>zdrojový kód prvního demonstračního příkladu: výpis zprávy na konzoli webového prohlížeče</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/hello_world.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/hello_world.go</a></td></tr>
<tr><td>1</td><td>hello_world.html</td><td>HTML stránka s&nbsp;kódem pro načtení prvního demonstračního příkladu do webového prohlížeče</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/hello_world.html">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/hello_world.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>2</td><td>dom_manipulation.go</td><td>zdrojový kód druhého demonstračního příkladu: manipulace s&nbsp;DOMem webové stránky</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_manipulation.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_manipulation.go</a></td></tr>
<tr><td>2</td><td>dom_manipulation.html</td><td>HTML stránka s&nbsp;kódem pro načtení druhého demonstračního příkladu do webového prohlížeče</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_manipulation.html">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_manipulation.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>dom_add_element.go</td><td>zdrojový kód třetího demonstračního příkladu: přidání elementů do DOMu webové stránky</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_add_element.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_add_element.go</a></td></tr>
<tr><td>3</td><td>dom_add_element.html</td><td>HTML stránka s&nbsp;kódem pro načtení třetího demonstračního příkladu do webového prohlížeče</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_add_element.html">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_add_element.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>draw_into_canvas.go</td><td>zdrojový kód čtvrtého demonstračního příkladu: kreslení do canvasu</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/draw_into_canvas.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/draw_into_canvas.go</a></td></tr>
<tr><td>4</td><td>draw_into_canvas.html</td><td>HTML stránka s&nbsp;kódem pro načtení čtvrtého demonstračního příkladu do webového prohlížeče</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/draw_into_canvas.html">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/draw_into_canvas.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>js_interop_1.go</td><td>zdrojový kód pátého demonstračního příkladu: komunikace s&nbsp;JavaScriptem</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_1.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_1.go</a></td></tr>
<tr><td>5</td><td>js_interop_1.html</td><td>HTML stránka s&nbsp;kódem pro načtení pátého demonstračního příkladu do webového prohlížeče</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_1.html">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_1.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>6</td><td>js_interop_2.go</td><td>zdrojový kód šestého demonstračního příkladu: komunikace s&nbsp;JavaScriptem</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_2.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_2.go</a></td></tr>
<tr><td>6</td><td>js_interop_2.html</td><td>HTML stránka s&nbsp;kódem pro načtení šestého demonstračního příkladu do webového prohlížeče</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_2.html">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_2.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td>http_server.go</td><td>implementace HTTP serveru, který dokáže webovému prohlížeči předávat obsah požadovaných souborů</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/http_server.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/http_server.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>go2js<br />
<a href="https://github.com/tredoe/go2js">https://github.com/tredoe/go2js</a>
</li>

<li>GitHub repositář projektu GopherJS<br />
<a href="https://github.com/gopherjs/gopherjs">https://github.com/gopherjs/gopherjs</a>
</li>

<li>How to use GopherJS to turn Go code into a JavaScript library<br />
<a href="https://medium.com/@kentquirk/how-to-use-gopherjs-to-turn-go-code-into-a-javascript-library-1e947703db7a">https://medium.com/@kentquirk/how-to-use-gopherjs-to-turn-go-code-into-a-javascript-library-1e947703db7a</a>
</li>

<li>Source to source compiler<br />
<a href="https://en.wikipedia.org/wiki/Source-to-source_compiler">https://en.wikipedia.org/wiki/Source-to-source_compiler</a>
</li>

<li>Binary recompiler<br />
<a href="https://en.wikipedia.org/wiki/Binary_recompiler">https://en.wikipedia.org/wiki/Binary_recompiler</a>
</li>

<li>py2many na GitHubu<br />
<a href="https://github.com/py2many/py2many">https://github.com/py2many/py2many</a>
</li>

<li>py2many na PyPi<br />
<a href="https://pypi.org/project/py2many/">https://pypi.org/project/py2many/</a>
</li>

<li>Awesome Transpilers<br />
<a href="https://github.com/milahu/awesome-transpilers">https://github.com/milahu/awesome-transpilers</a>
</li>

<li>WebAssembly<br />
<a href="https://webassembly.org/">https://webassembly.org/</a>
</li>

<li>WebAssembly na Wiki Golangu<br />
<a href="https://github.com/golang/go/wiki/WebAssembly">https://github.com/golang/go/wiki/WebAssembly</a>
</li>

<li>The future of WebAssembly - A look at upcoming features and proposals<br />
<a href="https://blog.scottlogic.com/2018/07/20/wasm-future.html">https://blog.scottlogic.com/2018/07/20/wasm-future.html</a>
</li>

<li>Writing WebAssembly By Hand<br />
<a href="https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html">https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html</a>
</li>

<li>WebAssembly Specification<br />
<a href="https://webassembly.github.io/spec/core/index.html">https://webassembly.github.io/spec/core/index.html</a>
</li>

<li>Index of Instructions<br />
<a href="https://webassembly.github.io/spec/core/appendix/index-instructions.html">https://webassembly.github.io/spec/core/appendix/index-instructions.html</a>
</li>

<li>The WebAssembly Binary Toolkit<br />
<a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>
</li>

<li>Will WebAssembly replace JavaScript? Or Will WASM Make JavaScript More Valuable in Future?<br />
<a href="https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e">https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e</a>
</li>

<li>Roadmap (pro WebAssemly)<br />
<a href="https://webassembly.org/roadmap/">https://webassembly.org/roadmap/</a>
</li>

<li>Transcrypt<br />
<a href="https://transcrypt.org/">https://transcrypt.org/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

