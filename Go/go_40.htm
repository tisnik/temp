<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Zpracování konfiguračních souborů v Go s využitím knihovny Viper</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Zpracování konfiguračních souborů v Go s využitím knihovny Viper</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve čtyřicáté části seriálu o programovacím jazyce Go si popíšeme některé možnosti nabízené balíčkem Viper. Tento balíček slouží ke zdánlivě triviální úloze &ndash; načítání a zpracování konfigurace.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Zpracování konfiguračních souborů v&nbsp;Go s&nbsp;využitím knihovny Viper</a></p>
<p><a href="#k02">2. Konfigurační soubory používající formáty INI, .properties nebo XML</a></p>
<p><a href="#k03">3. Lepší přístup k&nbsp;uložení konfigurace &ndash; formáty JSON, YAML a TOML</a></p>
<p><a href="#k04">4. Balíček Viper</a></p>
<p><a href="#k05">5. Inicializace knihovny Viper a načtení konfiguračního souboru</a></p>
<p><a href="#k06">6. Načtení hodnot uložených v&nbsp;konfiguračních souborech</a></p>
<p><a href="#k07">7. Zjištění, zda byla určitá hodnota skutečně zapsána</a></p>
<p><a href="#k08">8. Hierarchická struktura dat</a></p>
<p><a href="#k09">9. Práce se seznamy uloženými v&nbsp;konfiguračních souborech</a></p>
<p><a href="#k10">10. Načtení celé sekce do mapy</a></p>
<p><a href="#k11">11. Další datové typy podporované formátem TOML</a></p>
<p><a href="#k12">12. Načtení konfigurace ze souboru ve formátu JSON</a></p>
<p><a href="#k13">13. Načtení konfigurace ze souboru ve formátu YAML</a></p>
<p><a href="#k14">14. Formát YAML se sekcemi</a></p>
<p><a href="#k15">15. Načtení konfiguračních parametrů z&nbsp;proměnných prostředí</a></p>
<p><a href="#k16">16. Automatická konverze jména proměnné prostředí</a></p>
<p><a href="#k17">17. Mapování proměnných prostředí se zvoleným prefixem</a></p>
<p><a href="#k18">18. Automatické mapování všech proměnných prostředí se zvoleným prefixem</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Zpracování konfiguračních souborů v&nbsp;Go s&nbsp;využitím knihovny Viper</h2>

<p><a href="https://www.root.cz/serialy/programovaci-jazyk-go/">V&nbsp;seriálu
o programovacím jazyce Go</a> jsme si popsali již velké množství různých
standardních balíčků i balíčků externích, které je nutné doinstalovat, a to buď
příkazem <strong>go get</strong> nebo s&nbsp;využitím <a
href="https://www.root.cz/clanky/system-modulu-v-programovacim-jazyce-go/">systému
modulů</a>, který byl do Go oficiálně přidán ve verzi 1.11. Dnes si popíšeme
balíček pojmenovaný <i>Viper</i>, jenž naleznete v&nbsp;GitHub repositáři
umístěném na adrese <a
href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>. Tento
balíček slouží k&nbsp;na první pohled triviální a snadno proveditelné operaci
&ndash; načtení a zpracování konfiguračních souborů popř.&nbsp;konfiguračních
parametrů získaných z&nbsp;jiného prostředku (přes URL, ze <i>secret</i> atd.).
Mohlo by se zdát, že pro tento úkol ani není nutné instalovat externí balíček,
protože zpracování (načtení, parsing) konfiguračních souborů typu <a
href="https://en.wikipedia.org/wiki/INI_file">INI</a> popř.&nbsp;<a
href="https://en.wikipedia.org/wiki/.properties">.properties</a> atd. je na
první pohled velmi jednoduché a bezproblematické.</p>

<p>Ve skutečnosti tomu tak není (ostatně co je vlastně v&nbsp;IT jednoduché a
současně i bezproblematické?), a to zejména ve chvíli, kdy je zapotřebí použít
složitější strukturu dat. To je dnes velmi častý požadavek, protože
konfigurační soubory ve stylu &bdquo;klíč=skalární_hodnota&ldquo; již zdaleka
nedokážou pokrýt všechny potřeby vývojářů, devops i administrátorů. Příkladem
mohou být mnohdy složitě strukturované konfigurace pro nasazování služeb
(<i>deploying</i>), konfigurace, v&nbsp;nichž se používají strukturovaná data
(pole, mapy), hodnoty reprezentující data či časová razítka atd. Ovšem někdy se
setkáme i s&nbsp;požadavkem na možnost uložení <i>libovolné</i> hodnoty
s&nbsp;plovoucí řádovou čárkou reprezentovatelnou nějakým formátem definovaným
ve známé <a
href="https://www.root.cz/clanky/interni-reprezentace-numerickych-hodnot-od-skutecneho-pocitacoveho-praveku-po-ieee-754-2008-dokonceni/#k02">normě
IEEE 754</a>. Problém je, že mezi takové hodnoty patří i kladné a záporné
nekonečno popř.&nbsp;hodnota <i>NaN</i> (<i>not a number</i>), s&nbsp;nimiž si
mnohé jednodušší formáty konfiguračních souborů a jejich parserů nemusí dobře
poradit.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Konfigurační soubory používající formáty INI, .properties nebo XML</h2>

<p>Podívejme se nejdříve na strukturu konzervativně pojatých konfiguračních
souborů. Nejprve si ukážeme příklad konfiguračního souboru používajícího formát
INI (zkráceno, skutečný konfigurační soubor je mnohem delší):</p>

<pre>
[Extensions]
Plugin Failed Warning=1
Ask Flash Download=0
Plugins=0
&nbsp;
[Security Prefs]
Enable SSL v3=1
Enable TLS v1.0=1
Enable TLS v1.1=1
Password Lifetime=5
&nbsp;
[State]
Accept License=1
Reading Plugins=0
Run=0
</pre>

<p><div class="rs-tip-major">Poznámka: některé implementace umožňují vytvářet
hierarchické struktury, i když nestandardním způsobem:</div></p>

<pre>
[Server.Settings]
url=1.2.3.4
port=8080
&nbsp;
[Server.Policy]
...
...
...
</pre>

<p>Taktéž se můžeme setkat s&nbsp;podporou komentářů, které začínají
středníkem.</p>

<p>Dále si ukážeme příklad konfiguračního používajícího formát
<strong>.properties</strong> (jedná se o aplikaci naprogramovanou v&nbsp;Javě,
v&nbsp;níž najdeme přímou podporu pro práci s&nbsp;těmito soubory):</p>

<pre>
#FreeMind 0.9.0
#Sat Sep 14 21:25:49 CEST 2019
antialias=antialias_none
standardrootnodestyle=bubble
standardselectednodecolor=\#d2d2d2
leftToolbarVisible=false
split_pane_position=423
appwindow_y=1
use_split_pane=false
appwindow_x=0
appwindow_state=0
remind_use_rich_text_in_new_long_nodes=true
lookandfeel=metal
antialiasEdges=false
toolbarVisible=false
appwindow_height=601
appwindow_width=1024
standardfont=SansSerif
OptionPanel_Window_Properties=&lt;?xml version\="1.0" encoding\="UTF-8"?&gt;&lt;option_panel_window_configuration_storage x\="-116" y\="-286" width\="879" height\="899" panel\="Appearance"/&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se pro složitější
strukturu použilo vložené XML.</div></p>

<p>A nakonec následuje příklad konfiguračního souboru používajícího formát XML
(opět se jedná o soubor určený pro aplikaci naprogramovanou v&nbsp;Javě):</p>

<pre>
&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;JSpeccySettings xmlns="http://xml.netbeans.org/schema/JSpeccy"&gt;
    &lt;SpectrumSettings&gt;
        &lt;Issue2&gt;false&lt;/Issue2&gt;
        &lt;AYEnabled48k&gt;false&lt;/AYEnabled48k&gt;
        &lt;mutedSound&gt;false&lt;/mutedSound&gt;
        &lt;loadingNoise&gt;true&lt;/loadingNoise&gt;
        &lt;ULAplus&gt;false&lt;/ULAplus&gt;
        &lt;defaultModel&gt;1&lt;/defaultModel&gt;
        &lt;framesInt&gt;2&lt;/framesInt&gt;
        &lt;doubleSize&gt;true&lt;/doubleSize&gt;
        &lt;multifaceEnabled&gt;false&lt;/multifaceEnabled&gt;
        &lt;mf128on48K&gt;false&lt;/mf128on48K&gt;
        &lt;hifiSound&gt;false&lt;/hifiSound&gt;
    &lt;/SpectrumSettings&gt;
   &lt;TapeSettings&gt;
        &lt;flashload&gt;false&lt;/flashload&gt;
        &lt;accelerateLoading&gt;true&lt;/accelerateLoading&gt;
        &lt;enableSaveTraps&gt;true&lt;/enableSaveTraps&gt;
        &lt;highSamplingFreq&gt;false&lt;/highSamplingFreq&gt;
    &lt;/TapeSettings&gt;
    &lt;KeyboardJoystickSettings&gt;
        &lt;JoystickModel&gt;0&lt;/JoystickModel&gt;
    &lt;/KeyboardJoystickSettings&gt;
    &lt;AY8912Settings&gt;
        &lt;soundMode&gt;0&lt;/soundMode&gt;
    &lt;/AY8912Settings&gt;
&lt;/JSpeccySettings&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: datový typ hodnot zde není určen přímo,
ale v&nbsp;závislosti na použitém schématu.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Lepší přístup k&nbsp;uložení konfigurace &ndash; formáty JSON, YAML a TOML</h2>

<p>Složitější konfigurační parametry se z&nbsp;výše uvedených důvodů (zejména
ve chvíli, kdy je nutné pracovat se strukturovanými daty a různými datovými
typy) neukládají ani do souborů typu INI ani do .properties (ty se používají
například ve světě Javy, ovšem jen v&nbsp;omezené míře). Namísto toho je možné
využít například formáty:</p>

<ul>

<li><i>JSON</i> (<i>JavaScript Object Notation</i>) &ndash; pravděpodobně
nejznámější formát, který byl sice určen pro přenosy dat (typicky mezi webovou
službou/serverem a další službou nebo klientem), ovšem dnes se s&nbsp;tímto
formátem setkáme i v&nbsp;dalších odvětvích &ndash; serializace, uložení
strukturovaných dat do databáze a taktéž konfigurační soubory. Tento formát je
projektem <i>Viper</i> podporován a proto ho použijeme v&nbsp;demonstračním
příkladu. Základní informace o tomto formátu najdete na adrese <a
href="http://json.org/">http://json.org/</a>.</li>

<li><i>YAML</i> (<i>YAML Ain't Markup Language</i>) &ndash; je formátem, který
se namísto použití závorek pro určení struktury spoléhá spíše na použití
odsazení (podobně, jako je tomu v&nbsp;Pythonu) a popř.&nbsp;i speciálních
znaků (-, #, [, ] atd.). S&nbsp;tímto formátem se setkáme ve světě Dockeru a
Kubernetes, ovšem je ho možné použít i pro další účely. I tento formát je
projektem <i>Viper</i> podporován a použijeme ho ve dvou demonstračních
příkladech. Bližší informace o tomto velmi zajímavém formátu lze nalézt na
adrese <a href="https://yaml.org/">https://yaml.org/</a>.</li>

<li><i>XML</i> (<i>Extensible Markup Language</i>) &ndash; s&nbsp;tímto
formátem pravděpodobně není nutné čtenáře tohoto článku podrobněji seznamovat.
XML se pro uložení konfiguračních parametrů používá již delší dobu, i když se
z&nbsp;některých důvodů nemusí vždy jednat o ideální řešení. Projekt
<i>Viper</i> tento formát nepodporuje a ani to ve skutečnosti není nutné,
protože pro zpracování XML existují i pro programovací jazyk Go jiné balíčky,
například <a
href="https://golang.org/pkg/encoding/xml/">https://golang.org/pkg/encoding/xml/</a>.</li>

<li><i>TOML</i> (<i>Tom's Obvious, Minimal Language</i>) &ndash; formát TOML
sice zdánlivě (alespoň na první pohled) vychází ze souborů typu INI, ovšem ve
skutečnosti se jedná o odlišný, v&nbsp;mnoha ohledech vylepšený a především
promyšlený formát, v&nbsp;němž byly odstraněny prakticky všechny nevýhody INI a
přitom byla zachována čitelnost a snadnost úprav. Tento konfigurační formát
budeme používat v&nbsp;některých demonstračních příkladech, takže se
s&nbsp;jeho možnostmi (zdaleka ovšem ne se všemi!) seznámíme.</li>

<li><i>edn</i> (<i>Extensible Data Notation</i>) &ndash; tento formát vychází
ze syntaxe a sémantiky programovacího jazyka Clojure, je tedy založen na
S-výrazech rozšířených o možnost zápisu map (slovníků) a vektorů. Formát
<i>edn</i> je rozšířen právě v&nbsp;ekosystému jazyka Clojure, ale
v&nbsp;ostatních oblastech se příliš nerozšířil, takže je dnes uveden spíše pro
úplnost. Popis formátu <i>edn</i> (a tím pádem i popis syntaxe Clojure)
naleznete na stránce <a
href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>.</li>

</ul>



<p><a name="k04"></a></p>
<h2 id="k04">4. Balíček Viper</h2>

<p>Dále popisovaný balíček <i>Viper</i> je určen především pro práci
s&nbsp;výše zmíněnými formáty JSON, YAML a TOML, ovšem ve skutečnosti ho lze
použít i pro další činnosti, například pro zpracování proměnných prostředí,
načtení konfigurace ze síťového prostředku (tedy přes nějaký zdroj dostupný
přes URL) atd. Možnosti tohoto balíčku budou ukázány na několika demonstračních
příkladech, ovšem nejdříve je pochopitelně nutné si tento balíček nainstalovat.
K&nbsp;dispozici máme dvě možnosti &ndash; buď použít klasický příkaz
<strong>go get</strong> nebo využít systém modulů s&nbsp;importem balíčku (jeho
stažení a instalace se provede po zadání příkazu <strong>go build</strong>).
Použití první možnosti je snadné:</p>

<pre>
$ <strong>go get github.com/spf13/viper</strong>
</pre>

<p>Další možností je použít import v&nbsp;jakémkoli projektu, který obsahuje
soubor <strong>go.mod</strong>:</p>

<pre>
import (
        ...
        ...
        ...
        "github.com/spf13/viper"
        ...
        ...
        ...
)
</pre>

<p>Instalace balíčku proběhne po první zadání příkazu:</p>

<pre>
$ <strong>go build</strong>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Inicializace knihovny Viper a načtení konfiguračního souboru</h2>

<p>Pojďme si nyní ukázat některé základní operace, které nám balíček
<i>Viper</i> poskytuje. Začneme tím nejjednodušším příkladem, v&nbsp;němž je
provedena inicializace celé knihovny, specifikace, ve kterém adresáři se mají
nalézt konfigurační soubory a z&nbsp;následného načtení zvoleného
konfiguračního souboru. Důležité a zpočátku možná poněkud matoucí je, že se
jméno konfiguračního souboru zadává bez přípony. V&nbsp;příkladu se bude
načítat konfigurační soubor pojmenovaný <strong>config1.toml</strong>, jehož
přípona jasně určuje i jeho vnitřní formát:</p>

<pre>
url="http://1.2.3.4"
port=8888
</pre>

<p>Inicializace knihovny a určení místa, v&nbsp;němž se má hledat konfigurační
soubor. Tento soubor budeme hledat v&nbsp;adresáři, ve kterém byl projekt
spuštěn:</p>

<pre>
viper.SetConfigName("config1")
viper.AddConfigPath(".")
</pre>

<p>Pokus o načtení konfiguračního souboru, který však může skončit
s&nbsp;chybou:</p>

<pre>
err := viper.ReadInConfig()
</pre>

<p>Zpracování případných chyb, které mohou při načítání nastat:</p>

<pre>
if err != nil {
        log.Fatalf("Fatal error in config file: %s \n", err)
}
</pre>

<p>Užitečné je, že pokud při načítání konfiguračního souboru dojde
k&nbsp;nějaké chybě, je uživateli vypsána poměrně přesná informace, ve kterém
místě k&nbsp;chybě došlo. To je důležité, protože se mnohdy jedná o snadno
opravitelné maličkosti &ndash; chybějící uvozovka, chybějící čárka atd. Ostatně
si to můžeme snadno odzkoušet, pokud v&nbsp;konfiguračním souboru schválně
zapomeneme jednu uvozovku:</p>

<pre>
url=http://1.2.3.4"
port=8888
</pre>

<p>Program by měl při pokusu o načtení takového souboru vypsat chybové
hlášení:</p>

<pre>
2019/10/30 19:31:46 Reading configuration
2019/10/30 19:31:46 Fatal error in config file: While parsing config: (1, 5): keys cannot contain : character 
exit status 1
</pre>

<p>Úplný zdrojový kód tohoto triviálního příkladu vypadá následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/spf13/viper"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        log.Println("Reading configuration")
&nbsp;
        <strong>viper.SetConfigName</strong>("config1")
        <strong>viper.AddConfigPath</strong>(".")
&nbsp;
        err := <strong>viper.ReadInConfig</strong>()
        if err != nil {
                log.Fatalf("Fatal error in config file: %s \n", err)
        }
        log.Println("Done")
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Načtení hodnot uložených v&nbsp;konfiguračních souborech</h2>

<p>V&nbsp;dalším příkladu si vyzkoušíme, jak se vlastně načítají jednotlivé
hodnoty uložené v&nbsp;konfiguračním souboru. Pro tento účel je
k&nbsp;dispozici několik funkcí (a současně i stejně pojmenovaných metod, jak
uvidíme dále), zejména pak funkce určené pro načtení hodnot typu celé číslo a
řetězec, ovšem i funkce vracející hodnoty dalších typů:</p>

<pre>
func <strong>GetInt</strong>(key string) int
func <strong>GetInt</strong>32(key string) int32
func <strong>GetInt</strong>64(key string) int64
&nbsp;
func <strong>GetUint</strong>(key string) uint
func <strong>GetUint</strong>32(key string) uint32
func <strong>GetUint</strong>64(key string) uint64
&nbsp;
func <strong>GetBool</strong>(key string) bool
&nbsp;
func <strong>GetDuration</strong>(key string) time.Duration
func <strong>GetTime</strong>(key string) time.Time
&nbsp;
func <strong>GetFloat</strong>64(key string) float64
&nbsp;
func <strong>GetString</strong>(key string) string
</pre>

<p><div class="rs-tip-major">Poznámka: znovu si povšimněte, že formát TOML
rozlišuje datové typy hodnot, tj.&nbsp;odliší celé číslo (popř.&nbsp;číslo
s&nbsp;plovoucí čárkou) od řetězce atd.</div></p>

<p>Příklad, který načte hodnotu typu řetězec a další hodnotu typu celé číslo,
může vypadat následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/spf13/viper"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        log.Println("Reading configuration")
&nbsp;
        viper.SetConfigName("config1")
        viper.AddConfigPath(".")
&nbsp;
        err := viper.ReadInConfig()
        if err != nil {
                log.Fatalf("Fatal error in config file: %s \n", err)
        }
        log.Println("Done")
&nbsp;
        url := <strong>viper.GetString</strong>("url")
        port := <strong>viper.GetInt</strong>("port")
&nbsp;
        log.Printf("Starting the service at address %s:%d\n", url, port)
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zjištění, zda byla určitá hodnota skutečně zapsána</h2>

<p>Knihovna <i>Viper</i> je navržena takovým způsobem, že pokus o přečtení
hodnoty, která ve skutečnosti není v&nbsp;souboru uložena, neskončí
s&nbsp;chybou. Namísto toho se vrátí <i>nulová hodnota</i>, která je zcela
jednoznačně definována pro každý datový typ v&nbsp;programovacím jazyce Go.
Pokud se tedy pokusíme načíst číslo portu či adresu, které v&nbsp;konfiguračním
souboru nejsou, program nezhavaruje a bude pokračovat ve své činnosti
s&nbsp;nulovými hodnotami (prázdný řetězec a číslo 0).</p>

<p>Samozřejmě však existuje možnost, jak zjistit, jestli se nějaká hodnota
v&nbsp;konfiguračním souboru nachází či nikoli &ndash; postačuje použít
následující funkci:</p>

<pre>
func <strong>IsSet</strong>(key string) bool
</pre>

<p>Použit této funkce v&nbsp;praxi může vypadat následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/spf13/viper"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        log.Println("Reading configuration")
&nbsp;
        viper.SetConfigName("config1")
        viper.AddConfigPath(".")
&nbsp;
        err := viper.ReadInConfig()
        if err != nil {
                log.Fatalf("Fatal error in config file: %s \n", err)
        }
        log.Println("Done")
&nbsp;
        if !viper.IsSet("url") {
                log.Fatalf("URL is not specified in config file")
        }
&nbsp;
        if !viper.IsSet("port") {
                log.Fatalf("port is not specified in config file")
        }
&nbsp;
        url := viper.GetString("url")
        port := viper.GetInt("port")
&nbsp;
        log.Printf("Starting the service at address %s:%d\n", url, port)
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Hierarchická struktura dat</h2>

<p>Formát TOML umožňuje, ostatně podobně jako je tomu i v&nbsp;obou dvou
dalších formátech, uložit data s&nbsp;hierarchickou strukturou (strom
obsahující různé typy prvků). Nejjednodušším příkladem může být následující
soubor, který obsahuje jednu (pod)sekci nazvanou <strong>service</strong>,
přičemž tato podsekce obsahuje dvojice klíč=hodnota:</p>

<pre>
[service]
url="http://1.2.3.4"
port=8888
</pre>

<p>Existuje několik způsobů, jak takový konfigurační soubor načíst. Nejvíce
přímočaré je použití funkce <strong>Sub</strong>, které se předá klíč (jméno
podsekce) a vrátí se objekt/struktura typu <strong>Viper</strong>:</p>

<pre>
func <strong>Sub</strong>(key string) *Viper
</pre>

<p>Co to v&nbsp;praxi znamená? Všechny výše zmíněné funkce určené pro načtení
řetězců, celých čísel atd., jsou současně dostupné i ve formě metod objektu
typu <strong>Viper</strong>, takže můžeme nejdříve získat příslušnou sekci a
následně z&nbsp;ní získat potřebné údaje:</p>

<pre>
serviceConfig := viper.Sub("service")
url := serviceConfig.GetString("url")
port := serviceConfig.GetInt("port")
</pre>

<p>Podívejme se nyní na úplný kód příkladu, v&nbsp;němž se tento postup
používá:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/spf13/viper"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        log.Println("Reading configuration")
&nbsp;
        viper.SetConfigName("config2")
        viper.AddConfigPath(".")
&nbsp;
        err := viper.ReadInConfig()
        if err != nil {
                log.Fatalf("Fatal error in config file: %s \n", err)
        }
        log.Println("Done")
&nbsp;
        serviceConfig := <strong>viper.Sub</strong>("service")
        url := <strong>serviceConfig.GetString</strong>("url")
        port := <strong>serviceConfig.GetInt</strong>("port")
&nbsp;
        log.Printf("Starting the service at address %s:%d\n", url, port)
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Práce se seznamy uloženými v&nbsp;konfiguračních souborech</h2>

<p>V&nbsp;konfiguračních souborech se nemusí nacházet pouze skalární data, ale
například i seznamy. V&nbsp;následujícím souboru jsou uloženy dva seznamy,
jeden obsahující tři prvky a druhý jednoprvkový:</p>

<pre>
[service]
url="http://1.2.3.4"
port=8888
&nbsp;
[users]
accepted=["qa", "devel", "manager"]
blacklisted=["cracker"]
</pre>

<p>Pro přímé načtení těchto seznamů lze použít funkci/metodu:</p>

<pre>
func (v *Viper) <strong>GetStringSlice</strong>(key string) []string
</pre>

<p>Podívejme se nyní na demonstrační příklad, ve kterém jsou oba výše zmíněné
seznamy načteny a následně vypsány:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/spf13/viper"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        log.Println("Reading configuration")
&nbsp;
        viper.SetConfigName("config3")
        viper.AddConfigPath(".")
&nbsp;
        err := viper.ReadInConfig()
        if err != nil {
                log.Fatalf("Fatal error in config file: %s \n", err)
        }
        log.Println("Done")
&nbsp;
        serviceConfig := viper.Sub("service")
        url := serviceConfig.GetString("url")
        port := serviceConfig.GetInt("port")
&nbsp;
        usersConfig := viper.Sub("users")
        accepted := <strong>usersConfig.GetStringSlice</strong>("accepted")
        blacklisted := <strong>usersConfig.GetStringSlice</strong>("blacklisted")
&nbsp;
        log.Printf("Starting the service at address %s:%d\n", url, port)
        log.Printf("Accepted users: %v\n", accepted)
        log.Printf("Blacklisted users: %v\n", blacklisted)
}
</pre>

<p>Výsledek, jenž získáme po spuštění tohoto příkladu:</p>

<pre>
2019/10/29 19:02:40 Reading configuration
2019/10/29 19:02:40 Done
2019/10/29 19:02:40 Starting the service at address http://1.2.3.4:8888
2019/10/29 19:02:40 Accepted users: [qa devel manager]
2019/10/29 19:02:40 Blacklisted users: [cracker]
</pre>

<p>Podobně můžeme načíst seznam celých čísel:</p>

<pre>
func (v *Viper) <strong>GetIntSlice</strong>(key string) []int
</pre>

<p>Ze souboru:</p>

<pre>
[service]
url="http://1.2.3.4"
port=8888
&nbsp;
[users]
accepted=["qa", "devel", "manager"]
blacklisted=["cracker"]
ids=[0,42,1000,1001]
</pre>

<p>Kód upraveného příkladu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/spf13/viper"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        log.Println("Reading configuration")
&nbsp;
        viper.SetConfigName("config4")
        viper.AddConfigPath(".")
&nbsp;
        err := viper.ReadInConfig()
        if err != nil {
                log.Fatalf("Fatal error in config file: %s \n", err)
        }
        log.Println("Done")
&nbsp;
        serviceConfig := viper.Sub("service")
        url := serviceConfig.GetString("url")
        port := serviceConfig.GetInt("port")
&nbsp;
        usersConfig := viper.Sub("users")
        accepted := usersConfig.GetStringSlice("accepted")
        blacklisted := usersConfig.GetStringSlice("blacklisted")
        ids := usersConfig.GetIntSlice("ids")
&nbsp;
        log.Printf("Starting the service at address %s:%d\n", url, port)
        log.Printf("Accepted users: %v\n", accepted)
        log.Printf("Blacklisted users: %v\n", blacklisted)
        log.Printf("UIDs: %v\n", ids)
}
</pre>

<p>Výsledek upraveného příkladu:</p>

<pre>
2019/10/29 19:10:43 Reading configuration
2019/10/29 19:10:43 Done
2019/10/29 19:10:43 Starting the service at address http://1.2.3.4:8888
2019/10/29 19:10:43 Accepted users: [qa devel manager]
2019/10/29 19:10:43 Blacklisted users: [cracker]
2019/10/29 19:10:43 UIDs: [0 42 1000 1001]
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Načtení celé sekce do mapy</h2>

<p>V&nbsp;osmé kapitole jsme si ukázali, jakým způsobem je možné přistupovat
k&nbsp;jednotlivým sekcím a podsekcím v&nbsp;konfiguračních souborech. Ve
skutečnosti ale v&nbsp;některých případech můžeme celou sekci načíst do mapy, a
to buď mapy řetězců nebo mapy obecných rozhraní:</p>

<pre>
func (v *Viper) <strong>GetStringMap</strong>(key string) map[string]interface{}
func (v *Viper) <strong>GetStringMapString</strong>(key string) map[string]string
</pre>

<p>Ukažme si použití funkce/metody <strong>GetStringMap</strong> pro načtení
sekce <strong>service</strong> z&nbsp;následujícího souboru:</p>

<pre>
[service]
service.url="http://1.2.3.4"
service.port=8888
&nbsp;
[users]
accepted=["qa", "devel", "manager"]
blacklisted=["cracker"]
ids=[0,42,1000,1001]
</pre>

<p>Upravený demonstrační příklad, v&nbsp;němž je zvýrazněn kód, ve kterém mapu
získáme a dále s&nbsp;ní pracujeme:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/spf13/viper"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        log.Println("Reading configuration")
&nbsp;
        viper.SetConfigName("config4")
        viper.AddConfigPath(".")
&nbsp;
        err := viper.ReadInConfig()
        if err != nil {
                log.Fatalf("Fatal error in config file: %s \n", err)
        }
        log.Println("Done")
&nbsp;
        serviceConfig := <strong>viper.GetStringMap</strong>("service")
        url := <strong>serviceConfig["url"]</strong>
        port := <strong>serviceConfig["port"]</strong>
&nbsp;
        usersConfig := viper.Sub("users")
        accepted := usersConfig.GetStringSlice("accepted")
        blacklisted := usersConfig.GetStringSlice("blacklisted")
        ids := usersConfig.GetIntSlice("ids")
&nbsp;
        log.Printf("Starting the service at address %s:%d\n", url, port)
        log.Printf("Accepted users: %v\n", accepted)
        log.Printf("Blacklisted users: %v\n", blacklisted)
        log.Printf("UIDs: %v\n", ids)
}
</pre>

<p>Výsledek běhu tohoto příkladu:</p>

<pre>
2019/10/29 19:21:25 Reading configuration
2019/10/29 19:21:25 Done
2019/10/29 19:21:25 Starting the service at address http://1.2.3.4:8888
2019/10/29 19:21:25 Accepted users: [qa devel manager]
2019/10/29 19:21:25 Blacklisted users: [cracker]
2019/10/29 19:21:25 UIDs: [0 42 1000 1001]
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Další datové typy podporované formátem TOML</h2>

<p>Ve formátu TOML jsou kromě řetězců, celých čísel a seznamů podporovány i
další datové typy &ndash; pravdivostní typ, čísla s&nbsp;plovoucí řádovou
čárkou a zejména pak, což je v&nbsp;praxi velmi užitečné, typ
&bdquo;datum+čas&ldquo; neboli časové razítko. Konfigurační soubor obsahující
hodnoty těchto typů může vypadat následovně:</p>

<pre>
integer1 = 1
integer2 = 0x2a
&nbsp;
float1 = 3.14
float2 = -2e-5
float3 = -inf
float4 = nan
&nbsp;
bool1 = true
bool2 = false
&nbsp;
date1 = 2000-01-01 01:10:00Z
date2 = 2000-01-01 01:10:00-02:00
date3 = 2000-01-01T01:10:00Z
date4 = 2000-01-01T01:10:00+06:30
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se nejedná o řetězce;
dále pak stojí za povšimnutí podpora pro všechny hodnoty dle IEEE 754 (včetně
nekonečen a NaN) a způsob zápisu časových razítek (s&nbsp;případným určením
časové zóny).</div></p>

<p>Způsob načtení hodnot všech těchto typů (u časových razítek je typ
<strong>time.Time</strong> popř.&nbsp;<strong>time.Duration</strong>):</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "github.com/spf13/viper"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        log.Println("Reading configuration")
&nbsp;
        viper.SetConfigName("config6")
        viper.AddConfigPath(".")
&nbsp;
        err := viper.ReadInConfig()
        if err != nil {
                log.Fatalf("Fatal error in config file: %s \n", err)
        }
        log.Println("Done")
&nbsp;
        fmt.Printf("integer1: %d\n", viper.GetInt("integer1"))
        fmt.Printf("integer2: %d\n", viper.GetInt("integer2"))
&nbsp;
        fmt.Printf("float1: %f\n", viper.GetFloat64("float1"))
        fmt.Printf("float2: %f\n", viper.GetFloat64("float2"))
        fmt.Printf("float3: %f\n", viper.GetFloat64("float3"))
        fmt.Printf("float4: %f\n", viper.GetFloat64("float4"))
&nbsp;
        fmt.Printf("bool1: %t\n", viper.GetBool("bool1"))
        fmt.Printf("bool2: %t\n", viper.GetBool("bool2"))
&nbsp;
        fmt.Printf("date1: %s\n", viper.GetTime("date1").Format("Mon Jan 2 15:04:05 MST 2006"))
        fmt.Printf("date2: %s\n", viper.GetTime("date2").Format("Mon Jan 2 15:04:05 MST 2006"))
        fmt.Printf("date3: %s\n", viper.GetTime("date3").Format("Mon Jan 2 15:04:05 MST 2006"))
        fmt.Printf("date4: %s\n", viper.GetTime("date4").Format("Mon Jan 2 15:04:05 MST 2006"))
}
</pre>

<p>Příklad výstupu tohoto příkladu:</p>

<pre>
2019/10/30 20:23:43 Reading configuration
2019/10/30 20:23:43 Done
integer1: 1
integer2: 42
float1: 3.140000
float2: -0.000020
float3: -Inf
float4: NaN
bool1: true
bool2: false
date1: Sat Jan 1 01:10:00 UTC 2000
date2: Sat Jan 1 01:10:00 -0200 2000
date3: Sat Jan 1 01:10:00 UTC 2000
date4: Sat Jan 1 01:10:00 +0630 2000
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Načtení konfigurace ze souboru ve formátu JSON</h2>

<p>Jak již víme z&nbsp;úvodního textu, je možné v&nbsp;knihovně <i>Viper</i>
pracovat i s&nbsp;formátem JSON. Původní konfigurační soubor:</p>

<pre>
url="http://1.2.3.4"
port=8888
</pre>

<p>Tedy můžeme uložit i do jiné podoby:</p>

<pre>
{
    "url" : "http://1.2.3.4",
    "port" : 8888
}
</pre>

<p>Důležité (a velmi praktické) je, že se samotný kód aplikací nemusí žádným
způsobem měnit, což je ostatně patrné při porovnání zdrojového kódu umístěného
pod tímto odstavcem s&nbsp;kódem, který byl ukázán <a href="#k06">v&nbsp;šesté
kapitole</a>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/spf13/viper"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        log.Println("Reading configuration")
&nbsp;
        viper.SetConfigName("config7")
        viper.AddConfigPath(".")
&nbsp;
        err := viper.ReadInConfig()
        if err != nil {
                log.Fatalf("Fatal error in config file: %s \n", err)
        }
        log.Println("Done")
&nbsp;
        url := viper.GetString("url")
        port := viper.GetInt("port")
&nbsp;
        log.Printf("Starting the service at address %s:%d\n", url, port)
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Načtení konfigurace ze souboru ve formátu YAML</h2>

<p>Naprosto stejným způsobem lze zpracovat konfigurační soubor uložený ve
formátu YAML. Ekvivalent předchozích dvou konfiguračních souborů vypadá při
konverzi do YAMLu takto:</p>

<pre>
---
url: http://1.2.3.4
port: 8888
</pre>

<p>Opět platí, že samotný zdrojový kód příkladu zůstane stále stejný, bez
nutnosti byť i jednořádkové změny:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/spf13/viper"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        log.Println("Reading configuration")
&nbsp;
        viper.SetConfigName("config8")
        viper.AddConfigPath(".")
&nbsp;
        err := viper.ReadInConfig()
        if err != nil {
                log.Fatalf("Fatal error in config file: %s \n", err)
        }
        log.Println("Done")
&nbsp;
        url := viper.GetString("url")
        port := viper.GetInt("port")
&nbsp;
        log.Printf("Starting the service at address %s:%d\n", url, port)
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Formát YAML se sekcemi</h2>

<p>Jen pro úplnost se podívejme, jak by vypadala konfigurace zapsaná ve formátu
YAML se sekcí (nebo více sekcemi):</p>

<pre>
service:
  url: 'http://1.2.3.4'
  port: 8888
</pre>

<p>Kód pro načtení takového souboru se &ndash; opět &ndash; nijak neliší od
příkladu, v&nbsp;němž jsme pracovali s&nbsp;formátem TOML:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/spf13/viper"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        log.Println("Reading configuration")
&nbsp;
        viper.SetConfigName("config9")
        viper.AddConfigPath(".")
&nbsp;
        err := viper.ReadInConfig()
        if err != nil {
                log.Fatalf("Fatal error in config file: %s \n", err)
        }
        log.Println("Done")
&nbsp;
        serviceConfig := viper.Sub("service")
        url := serviceConfig.GetString("url")
        port := serviceConfig.GetInt("port")
&nbsp;
        log.Printf("Starting the service at address %s:%d\n", url, port)
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Načtení konfiguračních parametrů z&nbsp;proměnných prostředí</h2>

<p>Balíček <i>Viper</i> podporuje i načítání konfiguračních parametrů
z&nbsp;proměnných prostředí. Tyto parametry je možné sloučit s&nbsp;parametry
načtenými z&nbsp;konfiguračních souborů a tak případně přepsat výchozí hodnoty.
Základem pro práci s&nbsp;proměnnými prostředí je funkce:</p>

<pre>
viper.BindEnv("editor", "EDITOR")
</pre>

<p>Tato funkce zajistí, že se proměnná prostředí <strong>EDITOR</strong> (pokud
je ovšem nastavena) namapuje do stávající konfigurace pod klíčem
<strong>editor</strong>. Můžeme si to snadno otestovat:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/spf13/viper"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        log.Println("Reading configuration")
&nbsp;
        viper.SetConfigName("config9")
        viper.AddConfigPath(".")
&nbsp;
        viper.BindEnv("editor", "EDITOR")
&nbsp;
        err := viper.ReadInConfig()
        if err != nil {
                log.Fatalf("Fatal error in config file: %s \n", err)
        }
        log.Println("Done")
&nbsp;
        editor := viper.GetString("editor")
&nbsp;
        log.Printf("Selected editor: %s\n", editor)
}
</pre>

<p>Výsledkem by měla být následující zpráva:</p>

<pre>
2019/10/30 13:26:09 Reading configuration
2019/10/30 13:26:09 Done
2019/10/30 13:26:09 Selected editor: vim
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě, že se vám zobrazí
odlišné jméno editoru, jedná se o závažnou chybu systému :-)</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Automatická konverze jména proměnné prostředí</h2>

<p>Pokud namísto:</p>

<pre>
viper.BindEnv("editor", "EDITOR")
</pre>

<p>použijeme pouze volání:</p>

<pre>
viper.BindEnv("editor")
</pre>

<p>bude <i>Viper</i> zpracovávat proměnnou prostředí <strong>EDITOR</strong>,
kterou automaticky namapuje na klíč <strong>editor</strong>. Toto chování je
logické, protože jména proměnných prostředí se většinou zapisují velkými
písmeny, zatímco konfigurační parametry v&nbsp;souborech jsou typicky zapsány
písmeny malými.</p>

<p>Předchozí příklad má tedy funkčně ekvivalentní podobu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/spf13/viper"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        log.Println("Reading configuration")
&nbsp;
        viper.SetConfigName("config9")
        viper.AddConfigPath(".")
&nbsp;
        viper.BindEnv("editor")
&nbsp;
        err := viper.ReadInConfig()
        if err != nil {
                log.Fatalf("Fatal error in config file: %s \n", err)
        }
        log.Println("Done")
&nbsp;
        editor := viper.GetString("editor")
&nbsp;
        log.Printf("Selected editor: %s\n", editor)
}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Mapování proměnných prostředí se zvoleným prefixem</h2>

<p>Balíček <i>Viper</i> obsahuje ještě jednu velmi užitečnou funkcionalitu. Ve
chvíli, kdy zapíšeme tyto tři řádky:</p>

<pre>
viper.SetEnvPrefix("XTERM")
viper.BindEnv("locale")
viper.BindEnv("shell")
</pre>

<p>vytvoří se tři konfigurační parametry nazvané &bdquo;locale&ldquo; a
&bdquo;shell&ldquo;. Hodnota prvního parametru se přitom získá z&nbsp;proměnné
prostředí <strong>XTERM_LOCALE</strong> a druhá z&nbsp;proměnné prostředí
<strong>XTERM_SHELL</strong>. Jinými slovy &ndash; jména parametrů předaná do
<strong>BindEnv</strong> se převedou na velká písmena a připojí se před ně
prefix, za nímž je navíc zapsáno podtržítko.</p>

<p>Opět si ukažme příklad:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/spf13/viper"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        log.Println("Reading configuration")
&nbsp;
        viper.SetConfigName("config9")
        viper.AddConfigPath(".")
&nbsp;
        viper.SetEnvPrefix("XTERM")
        viper.BindEnv("locale")
        viper.BindEnv("shell")
&nbsp;
        err := viper.ReadInConfig()
        if err != nil {
                log.Fatalf("Fatal error in config file: %s \n", err)
        }
        log.Println("Done")
&nbsp;
        log.Printf("Xterm locale: %s\n", viper.GetString("locale"))
        log.Printf("Xterm shell: %s\n", viper.GetString("shell"))
}
</pre>

<p>Výsledek běhu tohoto příkladu (na mém počítači):</p>

<pre>
2019/10/30 13:26:10 Reading configuration
2019/10/30 13:26:10 Done
2019/10/30 13:26:10 Xterm locale: en_US.UTF-8
2019/10/30 13:26:10 Xterm shell: /bin/bash
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Automatické mapování všech proměnných prostředí se zvoleným prefixem</h2>

<p>Můžeme však jít ještě dále a nechat si <i>automaticky</i> namapovat všechny
proměnné prostředí, které začínají zadaným prefixem:</p>

<pre>
viper.AutomaticEnv()
viper.SetEnvPrefix("XTERM")
</pre>

<p>Výše uvedené dva řádky postačují na to, aby se všechny proměnné prostředí
stylu <strong>XTERM_LOCALE</strong> atd.&nbsp;namapovaly na parametry, které
ovšem budou mít klíče zapsány malými písmeny a nebudou používat žádný prefix.
Namapují se tyto parametry (opět platí pro můj počítač a jeho aktuální
konfiguraci):</p>

<pre>
$ <strong>set |grep ^XTERM</strong>
&nbsp;
XTERM_LOCALE=en_US.UTF-8
XTERM_SHELL=/bin/bash
XTERM_VERSION='XTerm(297)'
</pre>

<p>Samotný příklad se od předchozího příkladu odlišuje pouze v&nbsp;zavolání
výše zmíněné funkce <strong>AutomaticEnv</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/spf13/viper"
        "log"
)
&nbsp;
func <strong>main</strong>() {
        log.Println("Reading configuration")
&nbsp;
        viper.SetConfigName("config9")
        viper.AddConfigPath(".")
&nbsp;
        viper.AutomaticEnv()
        viper.SetEnvPrefix("XTERM")
&nbsp;
        err := viper.ReadInConfig()
        if err != nil {
                log.Fatalf("Fatal error in config file: %s \n", err)
        }
        log.Println("Done")
&nbsp;
        log.Printf("Xterm locale: %s\n", viper.GetString("locale"))
        log.Printf("Xterm shell: %s\n", viper.GetString("shell"))
}
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně čtyři megabajty), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_viper_init.go</td><td>inicializace knihovny Viper a načtení konfiguračního souboru</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/01_viper_init.go">https://github.com/tisnik/go-root/blob/master/article_40/01_viper_init.go</a></td></tr>
<tr><td> 2</td><td>02_viper_read_toml.go</td><td>načtení hodnot uložených v&nbsp;konfiguračních souborech</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/02_viper_read_toml.go">https://github.com/tisnik/go-root/blob/master/article_40/02_viper_read_toml.go</a></td></tr>
<tr><td> 3</td><td>03_viper_check.go</td><td>zjištění, zda byla určitá hodnota skutečně zapsána</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/03_viper_check.go">https://github.com/tisnik/go-root/blob/master/article_40/03_viper_check.go</a></td></tr>
<tr><td> 4</td><td>04_viper_section.go</td><td>načtení hierarchické struktura dat (sekce, podsekce)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/04_viper_section.go">https://github.com/tisnik/go-root/blob/master/article_40/04_viper_section.go</a></td></tr>
<tr><td> 5</td><td>05_toml_array.go</td><td>načtení seznamů řetězců ze souborů typu TOML</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/05_toml_array.go">https://github.com/tisnik/go-root/blob/master/article_40/05_toml_array.go</a></td></tr>
<tr><td> 6</td><td>06_toml_int_array.go</td><td>načtení seznamů čísel ze souborů typu TOML</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/06_toml_int_array.go">https://github.com/tisnik/go-root/blob/master/article_40/06_toml_int_array.go</a></td></tr>
<tr><td> 7</td><td>07_toml_map.go</td><td>načtení celé sekce do mapy</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/07_toml_map.go">https://github.com/tisnik/go-root/blob/master/article_40/07_toml_map.go</a></td></tr>
<tr><td> 8</td><td>08_data_types.go</td><td>práce s&nbsp;dalšími datovými typy podporovanými formátem TOML</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/08_data_types.go">https://github.com/tisnik/go-root/blob/master/article_40/08_data_types.go</a></td></tr>
<tr><td> 9</td><td>09_viper_read_json.go</td><td>načtení konfiguračního souboru ve formátu JSON</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/09_viper_read_json.go">https://github.com/tisnik/go-root/blob/master/article_40/09_viper_read_json.go</a></td></tr>
<tr><td>10</td><td>10_viper_read_yaml.go</td><td>načtení konfiguračního souboru ve formátu YAML</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/10_viper_read_yaml.go">https://github.com/tisnik/go-root/blob/master/article_40/10_viper_read_yaml.go</a></td></tr>
<tr><td>11</td><td>11_viper_yaml_section.go</td><td>práce s&nbsp;formátem YAML se sekcemi</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/11_viper_yaml_section.go">https://github.com/tisnik/go-root/blob/master/article_40/11_viper_yaml_section.go</a></td></tr>
<tr><td>12</td><td>12_env_variables.go</td><td>načtení konfiguračních parametrů z&nbsp;proměnných prostředí</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/12_env_variables.go">https://github.com/tisnik/go-root/blob/master/article_40/12_env_variables.go</a></td></tr>
<tr><td>13</td><td>13_env_variables_autoname.go</td><td>automatická konverze jména proměnné prostředí</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/13_env_variables_autoname.go">https://github.com/tisnik/go-root/blob/master/article_40/13_env_variables_autoname.go</a></td></tr>
<tr><td>14</td><td>14_env_variables_prefix.go</td><td>mapování proměnných prostředí se zvoleným prefixem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/14_env_variables_prefix.go">https://github.com/tisnik/go-root/blob/master/article_40/14_env_variables_prefix.go</a></td></tr>
<tr><td>15</td><td>15_env_variables_autobind.go</td><td>automatické mapování všech proměnných se zvoleným prefixem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/15_env_variables_autobind.go">https://github.com/tisnik/go-root/blob/master/article_40/15_env_variables_autobind.go</a></td></tr>
</table>

<p>Potřebovat budete i několik konfiguračních souborů:</p>

<table>
<tr><th>#</th><th>Konfigurační soubor</th><th>Cesta</th></tr>
<tr><td>1</td><td>config1.toml</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/config1.toml">https://github.com/tisnik/go-root/blob/master/article_40/config1.toml</a></td></tr>
<tr><td>2</td><td>config2.toml</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/config2.toml">https://github.com/tisnik/go-root/blob/master/article_40/config2.toml</a></td></tr>
<tr><td>3</td><td>config3.toml</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/config3.toml">https://github.com/tisnik/go-root/blob/master/article_40/config3.toml</a></td></tr>
<tr><td>4</td><td>config4.toml</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/config4.toml">https://github.com/tisnik/go-root/blob/master/article_40/config4.toml</a></td></tr>
<tr><td>5</td><td>config5.toml</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/config5.toml">https://github.com/tisnik/go-root/blob/master/article_40/config5.toml</a></td></tr>
<tr><td>6</td><td>config6.toml</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/config6.toml">https://github.com/tisnik/go-root/blob/master/article_40/config6.toml</a></td></tr>
<tr><td>7</td><td>config7.json</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/config7.json">https://github.com/tisnik/go-root/blob/master/article_40/config7.json</a></td></tr>
<tr><td>8</td><td>config8.yaml</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/config8.yaml">https://github.com/tisnik/go-root/blob/master/article_40/config8.yaml</a></td></tr>
<tr><td>9</td><td>config9.yaml</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_40/config9.yaml">https://github.com/tisnik/go-root/blob/master/article_40/config9.yaml</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Tom's Obvious, Minimal Language.<br />
<a href="https://github.com/toml-lang/toml">https://github.com/toml-lang/toml</a>
</li>

<li>xml.org<br />
<a href="http://www.xml.org/">http://www.xml.org/</a>
</li>

<li>Soubory .properties<br />
<a href="https://en.wikipedia.org/wiki/.properties">https://en.wikipedia.org/wiki/.properties</a>
</li>

<li>Soubory INI<br />
<a href="https://en.wikipedia.org/wiki/INI_file">https://en.wikipedia.org/wiki/INI_file</a>
</li>

<li>JSON to YAML<br />
<a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a>
</li>

<li>Data Format Converter<br />
<a href="https://toolkit.site/format.html">https://toolkit.site/format.html</a>
</li>

<li>Viper na GitHubu<br />
<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>
</li>

<li>GoDotEnv na GitHubu<br />
<a href="https://github.com/joho/godotenv">https://github.com/joho/godotenv</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

