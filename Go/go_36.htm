<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Kooperace mezi kódem psaným v Go a C: cgo</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Kooperace mezi kódem psaným v&nbsp;Go a C: cgo</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třicáté šesté části seriálu o programovacím jazyce Go si vysvětlíme, jakým způsobem je možné z Go volat funkce vytvořené v programovacím jazyku C. Jedná se o relativně komplikovanou problematiku, protože je například nutné korektně uvolňovat paměť, provádět přetypování proměnných atd.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Kooperace mezi kódem psaným v&nbsp;Go a C: cgo</a></p>
<p><a href="#k02">2. Volání funkcí v&nbsp;jazyku Go</a></p>
<p><a href="#k03">3. Speciální balíček nazvaný &bdquo;C&ldquo;</a></p>
<p><a href="#k04">4. Volání funkcí deklarovaných v&nbsp;C z&nbsp;kódu psaného v&nbsp;Go</a></p>
<p><a href="#k05">5. Konverze řetězce z&nbsp;Go do C</a></p>
<p><a href="#k06">6. Převody celočíselných datových typů mezi Go a C</a></p>
<p><a href="#k07">7. Přilinkování další nativní knihovny</a></p>
<p><a href="#k08">8. Manuální uvolňování paměti</a></p>
<p><a href="#k09">9. Upravený příklad pro tisk řetězce na standardní výstup</a></p>
<p><a href="#k10">10. Použití deklarace <strong>defer</strong> při uvolňování paměti</a></p>
<p><a href="#k11">11. Uvolnění paměti před jejím použitím</a></p>
<p><a href="#k12">12. Dvojí zavolání funkce <strong>C.free()</strong></a></p>
<p><a href="#k13">13. Nepřímé čtení proměnné <strong>errno</strong></a></p>
<p><a href="#k14">14. Deklarace céčkovské funkce v&nbsp;komentáři</a></p>
<p><a href="#k15">15. Práce s&nbsp;řetězci alokovanými funkcemi jazyka C</a></p>
<p><a href="#k16">16. Prohlédnutí kódu generovaného překladačem jazyka Go</a></p>
<p><a href="#k17">17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Kooperace mezi kódem psaným v&nbsp;Go a C: cgo</h2>

<p>Prozatím jsme se <a
href="https://www.root.cz/clanky/sledovani-vybranych-metrik-sluzeb-naprogramovanych-v-jazyku-go/">v&nbsp;seriálu
o programovacím jazyce Go</a> zabývali především samotným programovacím jazykem
Go, jeho knihovnami a dostupnými pomocnými nástroji. V&nbsp;předchozích dvou
částech [<a
href="https://www.root.cz/clanky/programovaci-jazyk-go-pro-skalni-ceckare/">1</a>] [<a
href="https://www.root.cz/clanky/programovaci-jazyk-go-pro-skalni-ceckare-2-cast/">2</a>]
jsme si navíc připomenuli některé poměrně zásadní rozdíly mezi jazyky C a Go,
které mohou zajímat především ty programátory, kteří na Go přechází právě
z&nbsp;jazyka C. A dnes na toto téma nepřímo navážeme, protože si na několika
demonstračních příkladech ukážeme kooperaci mezi programovým kódem napsaným
v&nbsp;Go na jedné straně a kódem vyvinutým v&nbsp;jazyku C na straně
druhé.</p>

<p>Již v&nbsp;základní sadě nástrojů programovacího jazyka Go mají vývojáři
k&nbsp;dispozici prakticky všechny utility a knihovny potřebné proto, aby se
z&nbsp;kódu vyvíjeného v&nbsp;jazyce Go mohly volat funkce naprogramované
v&nbsp;C a uložené například v&nbsp;linkovaných knihovnách. Díky tomu je
kooperace mezi Go a C relativně snadná, resp.&nbsp;přesněji řečeno nám
existence potřebných nástrojů umožní se soustředit na složitější a pro běh
aplikací i podstatnější problémy &ndash; zejména jak správně konvertovat
parametry volaných funkcí, jak zpracovat jejich návratové hodnoty
popř.&nbsp;chybové hodnoty a především pak, jak korektně pracovat
s&nbsp;operační pamětí. Při kooperaci mezi Go a C totiž zásadní problém spočívá
v&nbsp;tom, že v&nbsp;jazyce Go se alokovaná paměť uvolňuje automaticky
správcem paměti (<i>garbage collector &ndash; GC</i>), zatímco v&nbsp;jazyce C
se pochopitelně o alokaci i dealokaci paměti musí postarat sám programátor.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Speciální balíček nazvaný "C"</h2>

<p>Při práci s&nbsp;funkcemi vytvořenými v&nbsp;programovacím jazyku C nebo i
s&nbsp;celými knihovnami musíme být schopni tyto funkce nějakým způsobem volat
z&nbsp;kódu napsaného v&nbsp;jazyku Go. Připomeňme si, že v&nbsp;Go platí
následující pravidla pro volání funkcí (tato pravidla jsem zjednodušil a
poněkud zkrátil):</p>

<ol>

<li>Funkce deklarované v&nbsp;rámci toho samého balíčku se volají přímým
zápisem jejich jména. Přitom nezáleží na tom, zda je první písmeno v&nbsp;názvu
funkce velké či malé. Tatáž pravidla platí i pro metody, akorát je u nich nutné
uvést i jejích příjemce (<i>receiver</i>).</li>

<li>Funkce deklarované v&nbsp;jiném balíčku se volají zápisem
<strong>jméno_balíčku.JménoFunkce</strong>, přičemž jméno funkce musí začínat
velkým písmenem. Pokud jméno funkce začíná písmenem malým, je funkce považována
za privátní v&nbsp;rámci svého balíčku (kde je deklarována) a nebude ji možné
z&nbsp;jiného balíčku přímo zavolat. Tímto způsobem se v&nbsp;Go řídí
viditelnost funkcí a popř.&nbsp;i povolují či zakazují některé optimalizace
prováděné překladačem.</li>

<li>Balíčky s&nbsp;volanými funkcemi musí být explicitně importovány a
v&nbsp;rámci importu je možné zadat i alias jména balíčku. Platí to i naopak
&ndash; importovat je možné pouze ty balíčky, které jsou skutečně použity,
ovšem s&nbsp;výjimkou dále zmíněného pseudobalíčku &bdquo;C&ldquo;.</li>

</ol>

<p>V&nbsp;programovacím jazyku C však platí dosti odlišná pravidla. Zejména se
zde nepoužívá koncept balíčků, ale namísto toho bývá (podle nastavení projektu)
každý zdrojový soubor samostatně překládanou jednotkou, v&nbsp;níž lze
deklarovat, které funkce mají být viditelné (exportované) z&nbsp;jiných modulů
a které nikoli (<strong>static</strong>, ovšem toto klíčové slovo má více
významů). Navíc zde neexistuje pravidlo, že se viditelnost funkcí určuje podle
prvního písmene v&nbsp;jejich názvu.</p>

<p>Aby bylo možné i ze zdrojového kódu napsaného v&nbsp;Go volat céčkovské
funkce, je překladačem jazyka Go podporován speciální balíček (spíše
pseudobalíček) nazvaný &bdquo;C&ldquo;, jehož vlastnosti a chování jsou odlišné
od standardních balíčků programovacího jazyka Go. S&nbsp;podrobnějšími
informacemi o tomto pseudobalíčku se seznámíme v&nbsp;navazujících
kapitolách.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;dalším textu sice budeme stále
mluvit o céčkových funkcích, ovšem ve skutečnosti mohou být knihovny (.dll,
.so, ...) vygenerovány i z&nbsp;dalších jazyků, a to například včetně
Fortranu.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Speciální balíček nazvaný &bdquo;C&ldquo;</h2>

<p>Podívejme se nyní na základní vlastnost pseudobalíčku &bdquo;C&ldquo;. Tento
balíček můžeme importovat (syntaxe je shodná s&nbsp;běžnými balíčky), a to
dokonce bez toho, aby byl vůbec ve zdrojovém kódu reálně použit. To znamená, že
následující zdrojový kód je zcela korektní a může být bez chyb přeložen
překladačem jazyka Go:</p>

<pre>
package main
&nbsp;
import "C"
&nbsp;
func main() {
}
</pre>

<p>Tato výjimka ovšem platí jen a pouze pro pseudobalíček &bdquo;C&ldquo;.
Pokud se totiž pokusíme naimportovat běžný balíček jazyka Go, který nakonec
nepoužijeme, vypíše překladač chybu:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
}
</pre>

<p>Při pokusu o překlad se (správně) detekuje, že se importuje baliček, který
není v&nbsp;kódu použit:</p>

<pre>
# command-line-arguments
./02_import_fmt.go:3:8: imported and not used: "fmt"
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Volání funkcí deklarovaných v&nbsp;C z&nbsp;kódu psaného v&nbsp;Go</h2>

<p>Funkce, které byly vytvořené v&nbsp;céčku popř.&nbsp;funkce uložené
v&nbsp;některé céčkové (nativní) knihovně, se v&nbsp;programovacím jazyce Go
volají následujícím způsobem:</p>

<pre>
C.jméno_funkce(parametry_funkce)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si použití jména balíčku
<strong>C</strong> před jménem funkce. Osobně na tuto nutnost poměrně často
zapomínám, což je samozřejmě chyba snadno detekovatelná překladačem.</div></p>

<p>Další z&nbsp;odlišností mezi pseudobalíčkem &bdquo;C&ldquo; a ostatními
balíčky spočívá v&nbsp;tom, že z&nbsp;balíčku &bdquo;C&ldquo; je možné volat i
ty funkce, které začínají malým písmenem (což jsou prakticky všechny funkce ze
standardní knihovny). Teoreticky se tedy můžeme pokusit zavolat funkci
<strong>puts()</strong> ze standardní céčkové knihovny (viz též <strong>man 3
puts</strong>):</p>

<pre>
package main
&nbsp;
import "C"
&nbsp;
func main() {
        C.puts("Hello world!")
}
</pre>

<p>Pokus o překlad se ovšem v&nbsp;tomto případě nezdaří, protože překladač
nedokáže zjistit žádné podrobnější informace o volané funkci
<strong>puts()</strong> (počet a typ parametrů atd.):</p>

<pre>
# command-line-arguments
./03_missing_include.go:6:2: could not determine kind of name for C.puts
</pre>

<p>Stojíme tedy před tímto problémem: máme zavolat funkci deklarovanou mimo
samotný jazyk Go o které tedy překladač nemá k&nbsp;dispozici žádné podrobnější
informace. Na tomto místě je nutné použít poněkud špinavý trik &ndash; vložit
příkaz céčkového preprocesoru <strong>#include</strong> do poznámky umístěné
před příkaz pro import pseudobalíčku &bdquo;C&ldquo;:</p>

<pre>
package main
&nbsp;
// #include &lt;stdio.h&gt;
import "C"
&nbsp;
func main() {
        C.puts("Hello world!")
}
</pre>

<p><div class="rs-tip-major">Poznámka: s&nbsp;použitím komentářů pro další
účely jsme se již setkali, například při práci s&nbsp;formátem JSON
(deserializace) atd. V&nbsp;každém případě je nutno podotknout, že se nejedná o
nejlépe navržený rys programovacího jazyka Go.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Konverze řetězce z&nbsp;Go do C</h2>

<p>Nyní již překladač programovacího jazyka Go volanou funkci správně rozpozná
(a zná i její parametry), ovšem při pokusu o překlad vypíše odlišnou chybu,
která se týká toho, že se snažíme zkombinovat řetězec deklarovaný v&nbsp;jazyce
Go s&nbsp;funkcí akceptující céčkovský řetězec (ukončený nulou):</p>

<pre>
# command-line-arguments
./04_puts_go_string.go:7:16: cannot use "Hello world!" (type string) as type *_Ctype_char in argument to _Cfunc_puts
</pre>

<p>Řetězce v&nbsp;jazyce Go se v&nbsp;mnoha ohledech odlišují od céčkovských
řetězců; nejedná se o stejný datový typ. Musíme tedy být schopni provést převod
mezi neměnným řetězcem v&nbsp;jazyce Go a nulou ukončeným řetězcem jazyka C.
Pro tuto konverzi lze použít funkci nazvanou <strong>CString</strong>, která je
deklarovaná v&nbsp;rámci pseudobalíčku &bdquo;C&ldquo;:</p>

<pre>
cs := C.CString("Hello world!")
</pre>

<p>Upravený program, který po svém spuštění vypíše na standardní výstup řetězec
&bdquo;Hello world!&ldquo; tedy může vypadat takto:</p>

<pre>
package main
&nbsp;
// #include &lt;stdio.h&gt;
import "C"
&nbsp;
func main() {
        cs := C.CString("Hello world!")
        C.puts(cs)
}
</pre>

<p>Tento program je již přeložitelný a spustitelný:</p>

<pre>
Hello world!
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti ovšem není chování
programu zcela korektní, protože funkce <strong>CString()</strong> skutečně
vytvoří céčkovský řetězec se všemi vlastnostmi takového řetězce. A jednou
z&nbsp;důležitých vlastností céčkovských řetězců je fakt, že se o jejich
uvolnění z&nbsp;operační paměti musí postarat programátor a nikoli automatický
správce paměti. Typicky se používá funkce <strong>free()</strong>, pokud ovšem
není alokace provedena například funkcí <strong>alloca()</strong>. Toto
uvolnění jsme v&nbsp;našem demonstračním příkladu (alespoň prozatím)
neprovedli, ovšem k&nbsp;tomuto důležitému tématu se později vrátíme
v&nbsp;navazujících kapitolách.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Převody celočíselných datových typů mezi Go a C</h2>

<p>Vyzkoušejme si nyní zavolat odlišnou céčkovskou funkci, konkrétně funkci
nazvanou <strong>abs</strong> (viz též <strong>man 3 abs</strong>). Tato funkce
akceptuje jeden parametr typu <strong>int</strong> a vrací taktéž hodnotu typu
<strong>int</strong>. I zde musíme provést přetypování (<strong>int</strong>
v&nbsp;Go na <strong>int</strong> v&nbsp;C, což pro překladač nejsou shodné
typy). Konkrétně se převod Go int &rarr; C int provede s&nbsp;využitím funkce
<strong>C.int()</strong>, opět patřící do pseudobalíčku &bdquo;C&ldquo;:</p>

<pre>
y := C.abs(C.int(x))
</pre>

<p>Výsledek céčkovské funkce <strong>abs</strong> můžeme použít přímo (alespoň
v&nbsp;některých případech), a to díky automatickému odvození typu lokální
proměnné <strong>y</strong>:</p>

<pre>
package main
&nbsp;
// #include &lt;stdlib.h&gt;
import "C"
import "fmt"
&nbsp;
func main() {
        x := -10
        y := C.abs(C.int(x))
        fmt.Printf("%v\n", y)
}
</pre>

<p>Tento příklad po svém překladu a spuštění správně vypíše hodnotu 10:</p>

<pre>
10
</pre>

<p>Pokud ovšem budeme chtít použít výsledek (návratovou hodnotu) céčkovské
funkce <strong>abs</strong> v&nbsp;jazyce Go, je výhodnější provést explicitní
převod vrácené hodnoty na typ <strong>int</strong>. To lze provést například
takto:</p>

<pre>
var y int = int(C.abs(C.int(x)))
</pre>

<p><div class="rs-tip-major">Poznámka: připomeňme si, že programovací jazyk Go
nikdy neprovádí automatické konverze mezi různými datovými typy, a to ani
v&nbsp;případě, kdy se jedná o triviální operaci.</div></p>

<p>Upravený zdrojový kód demonstračního příkladu vypadá následovně:</p>

<pre>
package main
&nbsp;
// #include &lt;stdlib.h&gt;
import "C"
import "fmt"
&nbsp;
func main() {
        x := -10
        var y int = int(C.abs(C.int(x)))
        fmt.Printf("%v\n", y)
}
</pre>

<p>I tento demonstrační příklad po svém překladu a spuštění správně vypíše
hodnotu 10:</p>

<pre>
10
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Přilinkování další nativní knihovny</h2>

<p>Nyní již víme, jakým způsobem je možné volat funkce ze základní knihovny
programovacího jazyka C (stdlib, stdio, string atd.). Vyzkoušejme si tedy
poněkud odlišný příklad, konkrétně volání funkce <strong>sinf()</strong>
z&nbsp;knihovny <strong>math</strong> (viz též <strong>man 3 sinf</strong>).
Tato funkce akceptuje parametr typu <strong>float</strong>, který snadno
získáme konverzní funkcí <strong>C.float()</strong>. Výsledek budeme
konvertovat zpět standardní konverzní funkcí <strong>float32</strong>:</p>

<pre>
y := float32(C.sinf(C.float(x)))
</pre>

<p>První verze příkladu by tedy mohla vypadat následovně:</p>

<pre>
package main
&nbsp;
// #include &lt;math.h&gt;
import "C"
import "fmt"
&nbsp;
func main() {
        x := 3.1415927 / 6.0
        y := float32(C.sinf(C.float(x)))
        fmt.Printf("%v\n", y)
}
</pre>

<p>Pokud se předchozí příklad pokusíme přeložit, vypíše se chybové hlášení
informující o tom, že funkce <strong>sinf</strong> nebyla nalezena, a to
konkrétně linkerem (to tedy znamená, že překladač neměl s&nbsp;voláním této
funkce problémy, ovšem linker neví, kde se tato funkce nachází):</p>

<pre>
# command-line-arguments
/tmp/ramdisk/go-build217505370/b001/_x002.o: In function `_cgo_15d71de7baa2_Cfunc_sinf':
/tmp/go-build/cgo-gcc-prolog:45: undefined reference to `sinf'
collect2: error: ld returned 1 exit status
</pre>

<p>Podobné chybové hlášení by se vypsalo i při pokusu o překlad a slinkování
běžného programu psaného v&nbsp;jazyce C, který by funkci
<strong>sinf()</strong> volal. Důvod je jednoduchý &ndash; linkeru musíme
oznámit, že má při sestavování výsledného binárního souboru použít i knihovnu
<strong>m</strong>, která je na disku uložena v&nbsp;souboru
<strong>libm.verze.so</strong>. V&nbsp;případě programovacího jazyka C je to
jednoduché, protože máme přístup k&nbsp;příkazovému řádku, z&nbsp;něhož voláme
<strong>cpp</strong>, <strong>cc</strong> a <strong>ld</strong>
(popř.&nbsp;<strong>gcc</strong>), ovšem pokud budeme chtít knihovnu
<strong>m</strong> použít i z&nbsp;Go, musíme parametry předávané linkeru přímo
vložit do poznámky před import pseudobalíčku &bdquo;C&ldquo;:</p>

<pre>
// #cgo LDFLAGS: -lm
</pre>

<p>Upravený zdrojový kód bude vypadat následovně:</p>

<pre>
package main
&nbsp;
// #include &lt;math.h&gt;
// #cgo LDFLAGS: -lm
import "C"
import "fmt"
&nbsp;
func main() {
        x := 3.1415927 / 6.0
        y := float32(C.sinf(C.float(x)))
        fmt.Printf("%v\n", y)
}
</pre>

<p>Nyní je již možné program přeložit i spustit:</p>

<pre>
0.5
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Manuální uvolňování paměti</h2>

<p>Dalším problémem, který je nutné vyřešit, je manuální uvolňování paměti.
Týká se to především céčkových řetězců popř.&nbsp;céčkových polí vzniklých
konverzí z&nbsp;řetězců/polí napsaných v&nbsp;programovacím jazyku Go.</p>

<p>Podívejme se na následující příklad, v&nbsp;němž se v&nbsp;nekonečné smyčce
vypisuje zpráva na standardní výstup. Zpráva je získána konverzí původního
řetězce v&nbsp;Go do nulou ukončeného céčkového řetězce. Tento řetězec není
z&nbsp;paměti uvolněn, a to ani automaticky (leží mimo dosah GC) ani
manuálně:</p>

<pre>
package main
&nbsp;
// #include &lt;stdio.h&gt;
import "C"
&nbsp;
func main() {
        for {
                cs := C.CString("Hello world!")
                C.puts(cs)
        }
}
</pre>

<p>Příklad je vhodné spustit tak, aby se zprávy zahazovaly (je to rychlejší,
než jejích zobrazení na terminálu):</p>

<pre>
$ <strong>go run 10_oom.go &lt; /dev/null</strong>
</pre>

<p>S&nbsp;využitím nástroje <strong>top</strong> se lze snadno přesvědčit, že
paměť alokovaná novým procesem bude neustále růst; na konci většinou proces
ukončí OOM killer (podle nastavení systému).</p>

<p>Pokud ovšem program upravíme takovým způsobem, že se řetězec bude uvolňovat,
bude paměť alokovaná procesem prakticky stále konstantní:</p>

<pre>
package main
&nbsp;
// #include &lt;stdio.h&gt;
// #include &lt;stdlib.h&gt;
import "C"
import "unsafe"
&nbsp;
func main() {
        for {
                cs := C.CString("Hello world!")
                C.puts(cs)
                C.free(unsafe.Pointer(cs))
        }
}
</pre>

<p><div class="rs-tip-major">Poznámka: opět je vhodné se o výše uvedeném
tvrzení přesvědčit, typicky s&nbsp;využitím nástroje
<strong>top</strong>.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Upravený příklad pro tisk řetězce na standardní výstup</h2>

<p>Demonstrační příklad, který jsme si uvedli <a href="#k05">v&nbsp;páté
kapitole</a>, je tedy vhodné upravit takovým způsobem, aby se céčkový řetězec
po použití funkcí <strong>puts()</strong> explicitně uvolnil z&nbsp;paměti:</p>

<pre>
package main
&nbsp;
// #include &lt;stdio.h&gt;
// #include &lt;stdlib.h&gt;
import "C"
import "unsafe"
&nbsp;
func main() {
        cs := C.CString("Hello world!")
        C.puts(cs)
        C.free(unsafe.Pointer(cs))
}
</pre>

<p>Výsledek bude shodný s&nbsp;předchozím příkladem:</p>

<pre>
Hello world!
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti se zrovna v&nbsp;tomto
případě nestane nic vážného pokud nebude řetězec explicitně z&nbsp;paměti
uvolněn, protože se dealokace provede při ukončování procesu. Ovšem obecně je
dobré na tuto problematiku nezapomínat &ndash; jedná se o jedno z&nbsp;mála
oblastí, v&nbsp;nichž se Go používá a v&nbsp;nichž je nutné správu paměti
provádět ručně.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Použití deklarace <strong>defer</strong> při uvolňování paměti</h2>

<p>Jednou z&nbsp;velmi dobrých vlastností programovacího jazyka Go je deklarace
<strong>defer</strong>, která nám umožňuje specifikovat programový kód, který
se provede při návratu z&nbsp;aktuálně prováděné funkce. Nic nám samozřejmě
nebrání použít <strong>defer</strong> i pro uvolnění céčkového řetězce (či jiné
céčkové paměťové struktury) z&nbsp;operační paměti. Navíc bude zaručeno, že se
funkce <strong>free()</strong> zavolá ve všech větvích funkce (pokud má funkce
více výstupních bodů) a navíc že se nezavolá vícekrát (například omylem):</p>

<pre>
package main
&nbsp;
// #include &lt;stdio.h&gt;
// #include &lt;stdlib.h&gt;
import "C"
import "unsafe"
&nbsp;
func main() {
        cs := C.CString("Hello world!")
        defer C.free(unsafe.Pointer(cs))
        C.puts(cs)
}
</pre>

<p>Výsledek běhu tohoto příkladu bude shodný s&nbsp;příkladem předchozím:</p>

<pre>
Hello world!
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Uvolnění paměti před jejím použitím</h2>

<p>Kvůli tomu, že se o paměť používanou na straně céčka musíme explicitně
starat, může nastat situace, kdy se do kódu zanesou poměrně typické
&bdquo;céčkovské&ldquo; chyby, například dealokace paměti ještě předtím, než je
obsah této paměti použit. Výsledek je v&nbsp;tomto případě nedefinovaný &ndash;
program může zhavarovat, může zdánlivě běžet bez chyby nebo bude obsah paměti
změněn (což je u Go pravděpodobnější, než v&nbsp;čistém céčku):</p>

<pre>
package main
&nbsp;
// #include &lt;stdio.h&gt;
// #include &lt;stdlib.h&gt;
import "C"
import "unsafe"
&nbsp;
func main() {
        cs := C.CString("Hello world!")
        C.free(unsafe.Pointer(cs))
        C.puts(cs)
}
</pre>

<p>Může se stát, že tento program zhavaruje, ovšem pravděpodobněji na
standardní výstup vypíše náhodný řetězec (a záleží jen na náhodě, jak bude
dlouhý, tj.&nbsp;kdy se narazí na první nulový bajt):</p>

<pre>
@#@
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Dvojí zavolání funkce <strong>C.free()</strong></h2>

<p>Druhou poměrně typickou chybou je dvojí volání funkce
<strong>free()</strong>, přičemž první volání provede korektní dealokaci, ale
druhé volání se pokusí dealokovat stejný blok paměti. Ani tento problém
nedokáže překladač jazyka Go detekovat:</p>

<pre>
package main
&nbsp;
// #include &lt;stdio.h&gt;
// #include &lt;stdlib.h&gt;
import "C"
import "unsafe"
&nbsp;
func main() {
        cs := C.CString("Hello world!")
        C.puts(cs)
        C.free(unsafe.Pointer(cs))
        C.free(unsafe.Pointer(cs))
}
</pre>

<p>V&nbsp;tomto případě většinou dojde k&nbsp;okamžitému pádu aplikace:</p>

<pre>
SIGABRT: abort
PC=0x7f4cc7251c37 m=0 sigcode=18446744073709551610
&nbsp;
goroutine 0 [idle]:
runtime: unknown pc 0x7f4cc7251c37
stack: frame={sp:0x7ffe1f450d08, fp:0x0} stack=[0x7ffe1ec52188,0x7ffe1f4511b0)
&nbsp;
00007ffe1f450db8:  0000000000000000  0000000000000000 
00007ffe1f450dc8:  000000770000006e  0000000000000000 
00007ffe1f450dd8:  00007ffe1f450dff  000000000043bc5f &lt;runtime.findfunc+47&gt; 
00007ffe1f450de8:  000000000044ab31 &lt;runtime.goexit+1&gt;  000000000000007c 
00007ffe1f450df8:  00007ffe1f451100  00000000004405e8 &lt;runtime.gentraceback+6184&gt; 
&nbsp;
goroutine 1 [syscall]:
runtime.cgocall(0x451a20, 0xc000038730, 0xc000de3040)
        /opt/go/src/runtime/cgocall.go:128 +0x5e fp=0xc000038700 sp=0xc0000386c8 pc=0x403c3e
main._Cfunc_free(0xde31a0)
        _cgo_gotypes.go:59 +0x41 fp=0xc000038730 sp=0xc000038700 pc=0x4516d1
main.main.func2(0xde31a0)
        /home/tester/temp/go-root/article_36/18_double_free.go:12 +0x56 fp=0xc000038768 sp=0xc000038730 pc=0x451966
main.main()
        /home/tester/temp/go-root/article_36/18_double_free.go:12 +0x65 fp=0xc000038798 sp=0xc000038768 pc=0x451885
runtime.main()
        /opt/go/src/runtime/proc.go:201 +0x207 fp=0xc0000387e0 sp=0xc000038798 pc=0x425727
runtime.goexit()
        /opt/go/src/runtime/asm_amd64.s:1333 +0x1 fp=0xc0000387e8 sp=0xc0000387e0 pc=0x44ab31
</pre>

<p><div class="rs-tip-major">Poznámka: možná si říkáte, že takto nápadná chyba
se ve zdrojovém kódu snadno objeví a opraví. Ovšem aplikace bývají složité a
pokud se ukazatele na pole/struktury/řetězce předávají do jiných funkcí a není
zřejmé, kdo je &bdquo;vlastník&ldquo; dané paměti, může relativně snadno i
k&nbsp;této chybě dojít.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Nepřímé čtení proměnné <strong>errno</strong></h2>

<p>Další velmi užitečnou funkcí pseudobalíčku &bdquo;C&ldquo; je práce
s&nbsp;proměnnou <strong>errno</strong> (viz též <strong>man 3 errno</strong>).
Tato proměnná, kterou céčkoví programátoři dobře znají, obsahuje kód poslední
chyby, přičemž pro každý celočíselný kód chyby existuje i příslušná symbolická
konstanta: <strong>EACCES</strong>, <strong>ECANCELED</strong>,
<strong>ENOENT</strong> atd.</p>

<p>Kód poslední chyby můžeme přečíst i idiomatickým kódem v&nbsp;Go &ndash;
získáním většího množství návratových kódů funkce. Ukažme si konkrétní příklad,
a to volání matematické funkce pro výpočet druhé odmocniny. Tato céčková funkce
vrací vypočtený výsledek a současně může nastavit proměnnou
<strong>errno</strong> v&nbsp;případě, kdy se snažíme o výpočet druhé odmocniny
ze záporného čísla (s&nbsp;komplexními čísly se zde nepracuje). V&nbsp;Go ovšem
můžeme z&nbsp;této funkce získat dvě hodnoty &ndash; jak vypočtenou druhou
odmocninu, tak i objekt představující chybu (popř.&nbsp;<strong>nil</strong>
pokud k&nbsp;chybě nedošlo):</p>

<pre>
y, err := C.sqrt(C.double(nějaké číslo))
</pre>

<p>Z&nbsp;následujícího úryvku kódu je zřejmé, že se jedná o kratší a lépe
čitelný kód, než explicitní přístup k&nbsp;proměnné <strong>errno</strong>:</p>

<pre>
package main
&nbsp;
// #include &lt;math.h&gt;
// #cgo LDFLAGS: -lm
import "C"
import "fmt"
&nbsp;
func main() {
        y, err := C.sqrt(C.double(100.0))
        fmt.Printf("result=%v err=%v\n", y, err)
&nbsp;
        y, err = C.sqrt(C.double(-1.0))
        fmt.Printf("result=%v err=%v\n", y, err)
&nbsp;
        y, err = C.sqrt(C.double(100.0))
        fmt.Printf("result=%v err=%v\n", y, err)
}
</pre>

<p>Výsledek běhu tohoto demonstračního příkladu:</p>

<pre>
result=10 err=&lt;nil.h&gt;
result=NaN err=numerical argument out of domain
result=10 err=&lt;nil.h&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se ve druhém případě
skutečně správně detekovala a vyhodnotila chyba při výpočtu.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Deklarace céčkovské funkce v&nbsp;komentáři</h2>

<p>Podívejme se ještě na jednu možnost, kterou nám jazyk Go (a nástroj
<strong>cgo</strong>) nabízí. V&nbsp;komentáři uvedeném před importem
pseudobalíčku &bdquo;C&ldquo; je možné deklarovat jak céčkovské datové typy
pomocí <strong>typedef</strong>, tak i celé funkce. Tyto funkce jsou ihned
volatelné z&nbsp;dalšího programového kódu. Můžeme se o tom velmi snadno
přesvědčit:</p>

<pre>
package main
&nbsp;
// int add(int a, int b) {
//     return a+b;
// }
import "C"
import "fmt"
&nbsp;
func main() {
        x := C.add(C.int(1), C.int(2))
        fmt.Printf("result=%x\n", x)
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Práce s&nbsp;řetězci alokovanými funkcemi jazyka C</h2>

<p>Ukažme si na závěr, jak vlastně můžeme (explicitně) pracovat s&nbsp;řetězci
alokovanými funkcemi programovacího jazyka C. Pro alokaci řetězce můžeme použít
buď funkci <strong>malloc</strong> nebo <strong>calloc</strong>.
V&nbsp;případě, že se má jednat o řetězec s&nbsp;maximálně devatenácti znaky a
ukončující nulou, použijeme volání:</p>

<pre>
s := C.calloc(20, 1)
</pre>

<p><div class="rs-tip-major">Poznámka: ideální a korektnější by bylo nahradit
hodnotu 1 za <strong>sizeof(char)</strong>, ovšem dnes je Go podporováno na
architekturách, kde je tato velikost rovna jedné.</div></p>

<p>Takový řetězec je možné předat například funkci <strong>fgets</strong>,
ovšem po správném přetypování:</p>

<pre>
char_ptr := (*C.char)(s)
C.fgets(char_ptr, 20, C.stdin)
</pre>

<p><div class="rs-tip-major">Poznámka: přetypování je zde vyžadováno, protože
v&nbsp;Go je rozdíl mezi typem <strong>unsafe.Pointer</strong> (což odpovídá
<strong>void *</strong>) a ukazatelem na první znak řetězce, což je datový typ
vyžadovaný funkcí <strong>fgets</strong>.</div></p>

<p>Samozřejmě nesmíme zapomenout ani na uvolnění řetězce z&nbsp;paměti (zde nám
ovšem <strong>void *</strong> naopak vyhovuje):</p>

<pre>
C.free(s)
</pre>

<p>Úplný zdrojový kód, který přečte řetězec ze standardního vstupu a následně
vypíše jeho obsah, může vypadat takto:</p>

<pre>
package main
&nbsp;
// #include &lt;stdio.h&gt;
// #include &lt;stdlib.h&gt;
import "C"
import "fmt"
&nbsp;
func main() {
        fmt.Print("? ")
        s := C.calloc(20, 1)
        char_ptr := (*C.char)(s)
        C.fgets(char_ptr, 20, C.stdin)
        fmt.Printf("result=%v\n", C.GoString(char_ptr))
        C.free(s)
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Prohlédnutí kódu generovaného překladačem jazyka Go</h2>

<p>V&nbsp;některých případech může být zajímavé si prohlédnout céčkový kód
generovaný překladačem jazyka Go před jeho předáním do céčkového překladače.
Pro tento účel můžeme zavolat nástroj <strong>cgo</strong> přímo, a to
následujícím způsobem (namísto <strong>go build</strong>):</p>

<pre>
$ <strong>go tool cgo filename.go</strong>
</pre>

<p>Po spuštění tohoto nástroje by se měl vytvořit podadresář
<strong>_obj</strong>, do něhož jsou uloženy zdrojové kódy generované
překladačem jazyka C. Skutečně se jedná o zdrojové kódy, které mohou být
předány překladači céčka:</p>

<pre>
$ <strong>ls -1 _obj</strong>
&nbsp;
16_c_function.cgo1.go
16_c_function.cgo2.c
_cgo_export.c
_cgo_export.h
_cgo_flags
_cgo_gotypes.go
_cgo_main.c
_cgo_.o
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně tři megabajty), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_import_c.go</td><td>import pseudobalíčku "C" do programu psaného v&nbsp;Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/01_import_c.go">https://github.com/tisnik/go-root/blob/master/article_36/01_import_c.go</a></td></tr>
<tr><td> 2</td><td>02_import_fmt.go</td><td>import standardního balíčku "fmt" bez jeho dalšího použití</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/02_import_fmt.go">https://github.com/tisnik/go-root/blob/master/article_36/02_import_fmt.go</a></td></tr>
<tr><td> 3</td><td>03_missing_include.go</td><td>chybějící komentář s&nbsp;příkazem preprocesoru <strong>include</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/03_missing_include.go">https://github.com/tisnik/go-root/blob/master/article_36/03_missing_include.go</a></td></tr>
<tr><td> 4</td><td>04_puts_go_string.go</td><td>volání funkce <strong>C.puts()</strong> s&nbsp;předáním Go řetězce</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/04_puts_go_string.go">https://github.com/tisnik/go-root/blob/master/article_36/04_puts_go_string.go</a></td></tr>
<tr><td> 5</td><td>05_puts_c_string.go</td><td>explicitní převod Go řetězce na C řetězec</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/05_puts_c_string.go">https://github.com/tisnik/go-root/blob/master/article_36/05_puts_c_string.go</a></td></tr>
<tr><td> 6</td><td>06_abs.go</td><td>volání funkce <strong>C.abs()</strong> bez konverze návratové hodnoty</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/06_abs.go">https://github.com/tisnik/go-root/blob/master/article_36/06_abs.go</a></td></tr>
<tr><td> 7</td><td>07_conversion.go</td><td>konverze návratové hodnoty funkce <strong>C.abs()</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/07_conversion.go">https://github.com/tisnik/go-root/blob/master/article_36/07_conversion.go</a></td></tr>
<tr><td> 8</td><td>08_math.go</td><td>použití standardní matematické knihovny <strong>libm</strong> bez jejího linkování</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/08_math.go">https://github.com/tisnik/go-root/blob/master/article_36/08_math.go</a></td></tr>
<tr><td> 9</td><td>09_math_link.go</td><td>slinkování matematické knihovny <strong>libm</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/09_math_link.go">https://github.com/tisnik/go-root/blob/master/article_36/09_math_link.go</a></td></tr>
<tr><td>10</td><td>10_oom.go</td><td>OOM &ndash; neuvolňování paměti a dopad na běh aplikace</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/10_oom.go">https://github.com/tisnik/go-root/blob/master/article_36/10_oom.go</a></td></tr>
<tr><td>11</td><td>11_no_oom.go</td><td>explicitní uvolňování paměti s&nbsp;řetězcem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/11_no_oom.go">https://github.com/tisnik/go-root/blob/master/article_36/11_no_oom.go</a></td></tr>
<tr><td>12</td><td>12_free_string.go</td><td>korektní explicitní uvolnění paměti s&nbsp;řetězcem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/12_free_string.go">https://github.com/tisnik/go-root/blob/master/article_36/12_free_string.go</a></td></tr>
<tr><td>13</td><td>13_better_free_string.go</td><td>korektní uvolnění paměti v&nbsp;<strong>defer</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/13_better_free_string.go">https://github.com/tisnik/go-root/blob/master/article_36/13_better_free_string.go</a></td></tr>
<tr><td>14</td><td>14_free_before_use.go</td><td>volání <strong>C.free()</strong> předtím, než byla paměť použita</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/14_free_before_use.go">https://github.com/tisnik/go-root/blob/master/article_36/14_free_before_use.go</a></td></tr>
<tr><td>15</td><td>15_errno.go</td><td>získání hodnoty proměnné <strong>errno</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/15_errno.go">https://github.com/tisnik/go-root/blob/master/article_36/15_errno.go</a></td></tr>
<tr><td>16</td><td>16_c_function.go</td><td>C funkce definovaná přímo v&nbsp;komentáři</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/16_c_function.go">https://github.com/tisnik/go-root/blob/master/article_36/16_c_function.go</a></td></tr>
<tr><td>17</td><td>17_c_strings.go</td><td>práce s&nbsp;C řetězci, konverze na Go řetězce atd.</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/17_c_strings.go">https://github.com/tisnik/go-root/blob/master/article_36/17_c_strings.go</a></td></tr>
<tr><td>18</td><td>18_double_free.go</td><td>dvojí zavolání funkce <strong>C.free()</strong> a vliv tohoto volání na chování aplikace</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_36/18_double_free.go">https://github.com/tisnik/go-root/blob/master/article_36/18_double_free.go</a></td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

