<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Formátovaný tisk obsahu tabulek a dalších datových struktur v Go (pokračování)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Formátovaný tisk obsahu tabulek a dalších datových struktur v Go (pokračování)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na článek s popisem knihoven tabwriter, tablewriter a tableprinter určených pro tisk tabulek v programovacím jazyku Go dnes navážeme. Dokončíme ukázky využití knihovny tablewriter a následně se zaměříme na knihovnu s mnohem více možnostmi: go-pretty.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Formátovaný tisk obsahu tabulek a dalších datových struktur</a></p>
<p><a href="#k02">2. Načtení tabulky z&nbsp;formátu CSV balíčkem <strong>olekukonko/tablewriter</strong></a></p>
<p><a href="#k03">3. Nastavení zarovnání hodnot ve sloupcích</a></p>
<p><a href="#k04">4. Tabulka vložitelná do souboru ve formátu Markdown</a></p>
<p><a href="#k05">5. Horizontální oddělovače mezi řádky tabulky</a></p>
<p><a href="#k06">6. Automatické spojení buněk se shodným obsahem</a></p>
<p><a href="#k07">7. Specifikace sloupců, ve kterých má ke spojení buněk dojít</a></p>
<p><a href="#k08">8. Získání řetězce reprezentujícího celou vykreslenou tabulku</a></p>
<p><a href="#k09">9. Barevný výstup</a></p>
<p><a href="#k10">10. Nepracuje se pouze s&nbsp;tabulkami: pokročilá knihovna <strong>go-pretty</strong></a></p>
<p><a href="#k11">11. Zobrazení jednoduché tabulky knihovnou <strong>go-pretty</strong></a></p>
<p><a href="#k12">12. Patička tabulky</a></p>
<p><a href="#k13">13. Styl vykreslení tabulek</a></p>
<p><a href="#k14">14. Ostatní styly okrajů tabulek</a></p>
<p><a href="#k15">15. Styly se změnou barvy tabulky či její části</a></p>
<p><a href="#k16">16. Ostatní připravené barevné styly</a></p>
<p><a href="#k17">17. Obsah následující části seriálu</a></p>
<p><a href="#k18">18. Příloha: často používané formáty tabulek vykreslených neproporcionálním písmem</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Formátovaný tisk obsahu tabulek a dalších datových struktur</h2>

<p><a
href="https://www.root.cz/clanky/vykresleni-tabulek-do-terminalu-v-jazyce-go/">V&nbsp;předchozím
článku</a> jsme se seznámili s&nbsp;několika možnostmi formátování tabulek
(resp.&nbsp;přesněji řečeno dat organizovaných do formy dvojrozměrné tabulky)
tak, aby se naformátovaná tabulka mohla zobrazit na běžném terminálu (konzoli)
s&nbsp;neproporcionálním fontem. Připomeňme si ve stručnosti, že popsáno bylo
hned několik balíčků určených pro programovací jazyk Go, které tvorbu
naformátovaných tabulek podporují. Především se jedná o standardní balíček
<strong>text/tabwriter</strong>, který dokáže naformátovat prakticky jakýkoli
text, v&nbsp;němž jsou jednotlivé buňky výsledné tabulky <i>ukončeny</i>
(nikoli ovšem <i>rozděleny</i>) zadaným znakem, jímž je typicky znak
<strong>Tab</strong> (v&nbsp;řetězci je reprezentován symbolem '\t'. Tento
standardní balíček má poměrně široké možnosti využití, ovšem nemusí se hodit
pro všechny situace. Na druhou stranu je jeho použití triviální a spočívá
(poněkud zjednodušeně řečeno) v&nbsp;náhradě funkcí
<strong>fmt.Print???</strong> za funkce <strong>tabwriter.Fprint???</strong>, a
to z&nbsp;toho důvodu, že balíček <strong>text/tabwriter</strong> splňuje
standardní rozhraní <strong>io.Writer</strong>.</p>

<p>Příklad zobrazení tabulky tímto balíčkem. Povšimněte si možnosti specifikace
vodicích znaků:</p>

<pre>
1..........1..........1
22.........22.........22
333........333........333
4444.......4444.......4444
</pre>

<p>Další způsob zobrazení tabulky:</p>

<pre>
    N1|    N2|    N3|
     1|     1|     1|
    22|    22|    22|
   333|   333|   333|
  4444|  4444|  4444|
</pre>

<p>Minule jsme se, i když prozatím ve stručnosti, věnovali i dalším dvěma
balíčkům nazvaným <strong>tablewriter</strong> a <strong>tableprinter</strong>.
Základem je balíček <strong>tablwriter</strong> resp.&nbsp;přesněji
<strong>olekukonko/tablewriter</strong>, jenž umožňuje tabulku nejdříve
postupně zkonstruovat z&nbsp;jednotlivých řádků (metoda
<strong>Append</strong>) a posléze celou tabulku naformátovat a zobrazit
metodou <strong>Render</strong>. Viz též následující demonstrační příklad:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
&nbsp;
        "github.com/olekukonko/tablewriter"
)
&nbsp;
func <strong>main</strong>() {
        data := [][]string{
                []string{"A", "The Good", "500"},
                []string{"B", "The Very very Bad Man", "288"},
                []string{"C", "The Ugly", "120"},
                []string{"D", "The Gopher", "800"},
        }
&nbsp;
        table := tablewriter.NewWriter(os.Stdout)
        table.SetHeader([]string{"Name", "Sign", "Rating"})
&nbsp;
        for _, v := range data {
                table.<u>Append</u>(v)
        }
        table.<u>Render</u>()
}
</pre>

<p>Výsledná tabulka vypadá značně odlišně od předchozích tabulek, mj.&nbsp;i
díky tomu, že obsahuje hlavičku, patičku, okraje sloupců atd:</p>

<pre>
+------+-----------------------+--------+
| NAME |         SIGN          | RATING |
+------+-----------------------+--------+
| A    | The Good              |    500 |
| B    | The Very very Bad Man |    288 |
| C    | The Ugly              |    120 |
| D    | The Gopher            |    800 |
+------+-----------------------+--------+
|                 SUM          |  1708  |
+------+-----------------------+--------+
</pre>

<p>Další možnosti nabízené knihovnou <strong>tablewriter</strong> jsou ukázány
v&nbsp;navazujících kapitolách.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Načtení tabulky z&nbsp;formátu CSV balíčkem <strong>olekukonko/tablewriter</strong></h2>

<p>Knihovna <strong>tablewriter</strong> dokáže načítat data ve formátu CSV, a
to jak tabulky bez hlavičky, tak i tabulky s&nbsp;hlavičkou. Pro otestování
této možnosti použijeme CSV soubor s&nbsp;následujícím obsahem:</p>

<pre>
"Sep 2019","Change","Language","Ratings","Changep"
"2","change","C","15.95","0.74"
"1","change","Java","13.48","-3.18"
"3","","Python","10.47","0.59"
"4","","C++","7.11","1.48"
"5","","C#","4.58","1.18"
"6","","Visual Basic","4.12","0.83"
"7","","JavaScript","2.54","0.41"
"9","change","PHP","2.49","0.62"
"19","change","R","2.37","1.33"
"8","change","SQL","1.76","-0.19"
"14","change","Go","1.46","0.24"
"16","change","Swift","1.38","0.28"
"20","change","Perl","1.30","0.26"
"12","change","Assembly language","1.30","-0.08"
"15","","Ruby","1.24","0.03"
</pre>

<p>V&nbsp;dalším příkladu je ukázáno, jak se takový soubor načte: použije se
odlišný konstruktor tabulky nazvaný <strong>NewCSV</strong>, kterému se předá
jak objekt splňující rozhraní <strong>io.Writer</strong>, tak i jméno tabulky a
příznak, zda tabulka obsahuje hlavičky:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/olekukonko/tablewriter"
)
&nbsp;
func <strong>main</strong>() {
        table, err := tablewriter.<u>NewCSV(os.Stdout, "tiobe.csv", false)</u>
        if err != nil {
                log.Fatal(err)
        }
        table.Render()
}
</pre>

<p>Výsledkem je tabulka neobsahující hlavičku:</p>

<pre>
+----------+--------+-------------------+---------+---------+
| Sep 2019 | Change | Language          | Ratings | Changep |
|        2 | change | C                 |   15.95 |    0.74 |
|        1 | change | Java              |   13.48 |   -3.18 |
|        3 |        | Python            |   10.47 |    0.59 |
|        4 |        | C++               |    7.11 |    1.48 |
|        5 |        | C#                |    4.58 |    1.18 |
|        6 |        | Visual Basic      |    4.12 |    0.83 |
|        7 |        | JavaScript        |    2.54 |    0.41 |
|        9 | change | PHP               |    2.49 |    0.62 |
|       19 | change | R                 |    2.37 |    1.33 |
|        8 | change | SQL               |    1.76 |   -0.19 |
|       14 | change | Go                |    1.46 |    0.24 |
|       16 | change | Swift             |    1.38 |    0.28 |
|       20 | change | Perl              |    1.30 |    0.26 |
|       12 | change | Assembly language |    1.30 |   -0.08 |
|       15 |        | Ruby              |    1.24 |    0.03 |
+----------+--------+-------------------+---------+---------+
</pre>

<p>Načtení tabulky s&nbsp;hlavičkou se liší pouze v&nbsp;podržené části
kódu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/olekukonko/tablewriter"
)
&nbsp;
func <strong>main</strong>() {
        table, err := tablewriter.NewCSV(os.Stdout, "tiobe.csv", <u>true</u>)
        if err != nil {
                log.Fatal(err)
        }
        table.Render()
}
</pre>

<p>Nyní je již výsledek zcela korektní:</p>

<pre>
+----------+--------+-------------------+---------+---------+
| SEP 2019 | CHANGE |     LANGUAGE      | RATINGS | CHANGEP |
+----------+--------+-------------------+---------+---------+
|        2 | change | C                 |   15.95 |    0.74 |
|        1 | change | Java              |   13.48 |   -3.18 |
|        3 |        | Python            |   10.47 |    0.59 |
|        4 |        | C++               |    7.11 |    1.48 |
|        5 |        | C#                |    4.58 |    1.18 |
|        6 |        | Visual Basic      |    4.12 |    0.83 |
|        7 |        | JavaScript        |    2.54 |    0.41 |
|        9 | change | PHP               |    2.49 |    0.62 |
|       19 | change | R                 |    2.37 |    1.33 |
|        8 | change | SQL               |    1.76 |   -0.19 |
|       14 | change | Go                |    1.46 |    0.24 |
|       16 | change | Swift             |    1.38 |    0.28 |
|       20 | change | Perl              |    1.30 |    0.26 |
|       12 | change | Assembly language |    1.30 |   -0.08 |
|       15 |        | Ruby              |    1.24 |    0.03 |
+----------+--------+-------------------+---------+---------+
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Nastavení zarovnání hodnot ve sloupcích</h2>

<p>Z&nbsp;výsledku vytištěného příkladem <a href="#k02">z&nbsp;předchozí
kapitoly</a> je patrné, že textové hodnoty jsou implicitně zarovnány doleva a
číselné hodnoty doprava. Ovšem zarovnání je možné v&nbsp;případě potřeby
specifikovat explicitně &ndash; ovšem pro tabulku jako celek. To je ukázáno na
dalším příkladu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/olekukonko/tablewriter"
)
&nbsp;
func <strong>main</strong>() {
        table, err := tablewriter.NewCSV(os.Stdout, "tiobe.csv", true)
        if err != nil {
                log.Fatal(err)
        }
        table.<u>SetAlignment(tablewriter.ALIGN_LEFT)</u>
        table.Render()
}
</pre>

<p>S&nbsp;výsledkem, který sice odpovídá kódu, ale není tak přehledný, jako
předchozí výsledek:</p>

<pre>
+----------+--------+-------------------+---------+---------+
| SEP 2019 | CHANGE |     LANGUAGE      | RATINGS | CHANGEP |
+----------+--------+-------------------+---------+---------+
| 2        | change | C                 | 15.95   | 0.74    |
| 1        | change | Java              | 13.48   | -3.18   |
| 3        |        | Python            | 10.47   | 0.59    |
| 4        |        | C++               | 7.11    | 1.48    |
| 5        |        | C#                | 4.58    | 1.18    |
| 6        |        | Visual Basic      | 4.12    | 0.83    |
| 7        |        | JavaScript        | 2.54    | 0.41    |
| 9        | change | PHP               | 2.49    | 0.62    |
| 19       | change | R                 | 2.37    | 1.33    |
| 8        | change | SQL               | 1.76    | -0.19   |
| 14       | change | Go                | 1.46    | 0.24    |
| 16       | change | Swift             | 1.38    | 0.28    |
| 20       | change | Perl              | 1.30    | 0.26    |
| 12       | change | Assembly language | 1.30    | -0.08   |
| 15       |        | Ruby              | 1.24    | 0.03    |
+----------+--------+-------------------+---------+---------+
</pre>

<p>Zarovnání doprava:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/olekukonko/tablewriter"
)
&nbsp;
func <strong>main</strong>() {
        table, err := tablewriter.NewCSV(os.Stdout, "tiobe.csv", true)
        if err != nil {
                log.Fatal(err)
        }
        table.<u>SetAlignment(tablewriter.ALIGN_RIGHT)</u>
        table.Render()
}
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
+----------+--------+-------------------+---------+---------+
| SEP 2019 | CHANGE |     LANGUAGE      | RATINGS | CHANGEP |
+----------+--------+-------------------+---------+---------+
|        2 | change |                 C |   15.95 |    0.74 |
|        1 | change |              Java |   13.48 |   -3.18 |
|        3 |        |            Python |   10.47 |    0.59 |
|        4 |        |               C++ |    7.11 |    1.48 |
|        5 |        |                C# |    4.58 |    1.18 |
|        6 |        |      Visual Basic |    4.12 |    0.83 |
|        7 |        |        JavaScript |    2.54 |    0.41 |
|        9 | change |               PHP |    2.49 |    0.62 |
|       19 | change |                 R |    2.37 |    1.33 |
|        8 | change |               SQL |    1.76 |   -0.19 |
|       14 | change |                Go |    1.46 |    0.24 |
|       16 | change |             Swift |    1.38 |    0.28 |
|       20 | change |              Perl |    1.30 |    0.26 |
|       12 | change | Assembly language |    1.30 |   -0.08 |
|       15 |        |              Ruby |    1.24 |    0.03 |
+----------+--------+-------------------+---------+---------+
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Tabulka vložitelná do souboru ve formátu Markdown</h2>

<p>Často se setkáme s&nbsp;požadavkem na vytvoření tabulky ve formátech
podporovaných dalšími různými nástroji. Některé často používané formáty tabulek
jsou uvedeny <a href="#k18">v&nbsp;osmnácté kapitole</a>. Zde si ukážeme, jak
lze specifikací okrajů i způsobů zobrazení oddělovačů na rozích buněk vytvořit
tabulku ve formátu, který je kompatibilní s&nbsp;některými realizacemi
Markdownu (i když samotný Markdown tabulky oficiálně nepodporuje, některá jeho
rozšíření ano):</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/olekukonko/tablewriter"
)
&nbsp;
func <strong>main</strong>() {
        table, err := tablewriter.NewCSV(os.Stdout, "tiobe.csv", true)
        if err != nil {
                log.Fatal(err)
        }
        table.<u>SetBorders(tablewriter.Border{Left: true, Top: false, Right: true, Bottom: false})</u>
        table.<u>SetCenterSeparator("|")</u>
        table.Render()
}
</pre>

<p>V&nbsp;příkladu bylo specifikováno, které okraje se mají zobrazit. Dále jsme
uvedli znak použitý v&nbsp;místě, kde se střetávají rohy buněk (což může být
zobrazeno odlišně od samotných okrajů):</p>

<pre>
| SEP 2019 | CHANGE |     LANGUAGE      | RATINGS | CHANGEP |
|----------|--------|-------------------|---------|---------|
|        2 | change | C                 |   15.95 |    0.74 |
|        1 | change | Java              |   13.48 |   -3.18 |
|        3 |        | Python            |   10.47 |    0.59 |
|        4 |        | C++               |    7.11 |    1.48 |
|        5 |        | C#                |    4.58 |    1.18 |
|        6 |        | Visual Basic      |    4.12 |    0.83 |
|        7 |        | JavaScript        |    2.54 |    0.41 |
|        9 | change | PHP               |    2.49 |    0.62 |
|       19 | change | R                 |    2.37 |    1.33 |
|        8 | change | SQL               |    1.76 |   -0.19 |
|       14 | change | Go                |    1.46 |    0.24 |
|       16 | change | Swift             |    1.38 |    0.28 |
|       20 | change | Perl              |    1.30 |    0.26 |
|       12 | change | Assembly language |    1.30 |   -0.08 |
|       15 |        | Ruby              |    1.24 |    0.03 |
</pre>

<p>Odlišné nastavení:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/olekukonko/tablewriter"
)
&nbsp;
func <strong>main</strong>() {
        table, err := tablewriter.NewCSV(os.Stdout, "tiobe.csv", true)
        if err != nil {
                log.Fatal(err)
        }
        table.<u>SetBorders(tablewriter.Border{Left: false, Top: true, Right: false, Bottom: true})</u>
        table.<u>SetCenterSeparator("*")</u>
        table.Render()
}
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
-----------*--------*-------------------*---------*----------
  SEP 2019 | CHANGE |     LANGUAGE      | RATINGS | CHANGEP  
-----------*--------*-------------------*---------*----------
         2 | change | C                 |   15.95 |    0.74  
         1 | change | Java              |   13.48 |   -3.18  
         3 |        | Python            |   10.47 |    0.59  
         4 |        | C++               |    7.11 |    1.48  
         5 |        | C#                |    4.58 |    1.18  
         6 |        | Visual Basic      |    4.12 |    0.83  
         7 |        | JavaScript        |    2.54 |    0.41  
         9 | change | PHP               |    2.49 |    0.62  
        19 | change | R                 |    2.37 |    1.33  
         8 | change | SQL               |    1.76 |   -0.19  
        14 | change | Go                |    1.46 |    0.24  
        16 | change | Swift             |    1.38 |    0.28  
        20 | change | Perl              |    1.30 |    0.26  
        12 | change | Assembly language |    1.30 |   -0.08  
        15 |        | Ruby              |    1.24 |    0.03  
-----------*--------*-------------------*---------*----------
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Horizontální oddělovače mezi řádky tabulky</h2>

<p>V&nbsp;případě, že je tabulka krátká popř.&nbsp;se používá terminál
s&nbsp;volným místem ve vertikálním směru (ovšem tohoto místa je vždy málo), je
možné mezi jednotlivé řádky tabulky vložit horizontální oddělovače. Ty se
zapnou metodou <strong>SetRowLine</strong> tak, jak je to ukázáno v&nbsp;dalším
demonstračním příkladu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/olekukonko/tablewriter"
)
&nbsp;
func <strong>main</strong>() {
        table, err := tablewriter.NewCSV(os.Stdout, "tiobe.csv", true)
        if err != nil {
                log.Fatal(err)
        }
        table.<u>SetRowLine(true)</u>
        table.Render()
}
</pre>

<p>Výsledkem je tabulka se stejnými údaji, jako je tomu v&nbsp;předchozích
příkladech, ovšem zabírající prakticky dvojnásobnou plochu:</p>

<pre>
+----------+--------+-------------------+---------+---------+
| SEP 2019 | CHANGE |     LANGUAGE      | RATINGS | CHANGEP |
+----------+--------+-------------------+---------+---------+
|        2 | change | C                 |   15.95 |    0.74 |
+----------+--------+-------------------+---------+---------+
|        1 | change | Java              |   13.48 |   -3.18 |
+----------+--------+-------------------+---------+---------+
|        3 |        | Python            |   10.47 |    0.59 |
+----------+--------+-------------------+---------+---------+
|        4 |        | C++               |    7.11 |    1.48 |
+----------+--------+-------------------+---------+---------+
|        5 |        | C#                |    4.58 |    1.18 |
+----------+--------+-------------------+---------+---------+
|        6 |        | Visual Basic      |    4.12 |    0.83 |
+----------+--------+-------------------+---------+---------+
|        7 |        | JavaScript        |    2.54 |    0.41 |
+----------+--------+-------------------+---------+---------+
|        9 | change | PHP               |    2.49 |    0.62 |
+----------+--------+-------------------+---------+---------+
|       19 | change | R                 |    2.37 |    1.33 |
+----------+--------+-------------------+---------+---------+
|        8 | change | SQL               |    1.76 |   -0.19 |
+----------+--------+-------------------+---------+---------+
|       14 | change | Go                |    1.46 |    0.24 |
+----------+--------+-------------------+---------+---------+
|       16 | change | Swift             |    1.38 |    0.28 |
+----------+--------+-------------------+---------+---------+
|       20 | change | Perl              |    1.30 |    0.26 |
+----------+--------+-------------------+---------+---------+
|       12 | change | Assembly language |    1.30 |   -0.08 |
+----------+--------+-------------------+---------+---------+
|       15 |        | Ruby              |    1.24 |    0.03 |
+----------+--------+-------------------+---------+---------+
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Automatické spojení buněk se shodným obsahem</h2>

<p>Sousední buňky se shodným obsahem, což je ostatně poměrně častý případ, se
mohou automaticky spojit. Pro tento účel se používá metoda pojmenovaná
<strong>SetAutoMergeCells</strong> tak, jak je to ukázáno v&nbsp;tomto
příkladu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/olekukonko/tablewriter"
)
&nbsp;
func <strong>main</strong>() {
        table, err := tablewriter.NewCSV(os.Stdout, "tiobe.csv", true)
        if err != nil {
                log.Fatal(err)
        }
        table.<u>SetAutoMergeCells(true)</u>
        table.<u>SetRowLine(true)</u>
        table.Render()
}
</pre>

<p>Výsledkem je tato tabulka:</p>

<pre>
+----------+--------+-------------------+---------+---------+
| SEP 2019 | CHANGE |     LANGUAGE      | RATINGS | CHANGEP |
+----------+--------+-------------------+---------+---------+
|        2 | change | C                 |   15.95 |    0.74 |
+----------+        +-------------------+---------+---------+
|        1 |        | Java              |   13.48 |   -3.18 |
+----------+--------+-------------------+---------+---------+
|        3 |        | Python            |   10.47 |    0.59 |
+----------+--------+-------------------+---------+---------+
|        4 |        | C++               |    7.11 |    1.48 |
+----------+--------+-------------------+---------+---------+
|        5 |        | C#                |    4.58 |    1.18 |
+----------+--------+-------------------+---------+---------+
|        6 |        | Visual Basic      |    4.12 |    0.83 |
+----------+--------+-------------------+---------+---------+
|        7 |        | JavaScript        |    2.54 |    0.41 |
+----------+--------+-------------------+---------+---------+
|        9 | change | PHP               |    2.49 |    0.62 |
+----------+        +-------------------+---------+---------+
|       19 |        | R                 |    2.37 |    1.33 |
+----------+        +-------------------+---------+---------+
|        8 |        | SQL               |    1.76 |   -0.19 |
+----------+        +-------------------+---------+---------+
|       14 |        | Go                |    1.46 |    0.24 |
+----------+        +-------------------+---------+---------+
|       16 |        | Swift             |    1.38 |    0.28 |
+----------+        +-------------------+---------+---------+
|       20 |        | Perl              |    1.30 |    0.26 |
+----------+        +-------------------+         +---------+
|       12 |        | Assembly language |         |   -0.08 |
+----------+--------+-------------------+---------+---------+
|       15 |        | Ruby              |    1.24 |    0.03 |
+----------+--------+-------------------+---------+---------+
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Specifikace sloupců, ve kterých má ke spojení buněk dojít</h2>

<p>Automatické spojování sousedních buněk se shodným obsahem je možné omezit
pouze na vybrané sloupce. K&nbsp;tomuto účelu slouží metoda pojmenovaná
<strong>SetAutoMergeCellsByColumnIndex</strong>, které se předává pole
resp.&nbsp;řez s&nbsp;indexy sloupců, jichž se má spojování týkat. Jak je
v&nbsp;programovacím jazyce Go zvykem, jsou sloupce číslovány od jedničky (na
rozdíl od tabulkových procesorů):</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "os"
&nbsp;
        "github.com/olekukonko/tablewriter"
)
&nbsp;
func <strong>main</strong>() {
        table, err := tablewriter.NewCSV(os.Stdout, "tiobe.csv", true)
        if err != nil {
                log.Fatal(err)
        }
        table.SetRowLine(true)
        table.<u>SetAutoMergeCellsByColumnIndex([]int{1, 2})</u>
        table.Render()
&nbsp;
        fmt.Println()
        fmt.Println()
&nbsp;
        table.<u>SetAutoMergeCellsByColumnIndex([]int{3})</u>
        table.Render()
}
</pre>

<p>Výše uvedený demonstrační příklad po svém spuštění zobrazí dvojici tabulek,
pokaždé s&nbsp;jinými buňkami, které jsou sloučeny:</p>

<pre>
+----------+--------+-------------------+---------+---------+
| SEP 2019 | CHANGE |     LANGUAGE      | RATINGS | CHANGEP |
+----------+--------+-------------------+---------+---------+
|        2 | change | C                 |   15.95 |    0.74 |
+----------+        +-------------------+---------+---------+
|        1 |        | Java              |   13.48 |   -3.18 |
+----------+--------+-------------------+---------+---------+
|        3 |        | Python            |   10.47 |    0.59 |
+----------+--------+-------------------+---------+---------+
|        4 |        | C++               |    7.11 |    1.48 |
+----------+--------+-------------------+---------+---------+
|        5 |        | C#                |    4.58 |    1.18 |
+----------+--------+-------------------+---------+---------+
|        6 |        | Visual Basic      |    4.12 |    0.83 |
+----------+--------+-------------------+---------+---------+
|        7 |        | JavaScript        |    2.54 |    0.41 |
+----------+--------+-------------------+---------+---------+
|        9 | change | PHP               |    2.49 |    0.62 |
+----------+        +-------------------+---------+---------+
|       19 |        | R                 |    2.37 |    1.33 |
+----------+        +-------------------+---------+---------+
|        8 |        | SQL               |    1.76 |   -0.19 |
+----------+        +-------------------+---------+---------+
|       14 |        | Go                |    1.46 |    0.24 |
+----------+        +-------------------+---------+---------+
|       16 |        | Swift             |    1.38 |    0.28 |
+----------+        +-------------------+---------+---------+
|       20 |        | Perl              |    1.30 |    0.26 |
+----------+        +-------------------+---------+---------+
|       12 |        | Assembly language |    1.30 |   -0.08 |
+----------+--------+-------------------+---------+---------+
|       15 |        | Ruby              |    1.24 |    0.03 |
+----------+--------+-------------------+---------+---------+
&nbsp;
&nbsp;
+----------+--------+-------------------+---------+---------+
| SEP 2019 | CHANGE |     LANGUAGE      | RATINGS | CHANGEP |
+----------+--------+-------------------+---------+---------+
|        2 | change | C                 |   15.95 |    0.74 |
+----------+--------+-------------------+---------+---------+
|        1 | change | Java              |   13.48 |   -3.18 |
+----------+--------+-------------------+---------+---------+
|        3 |        | Python            |   10.47 |    0.59 |
+----------+--------+-------------------+---------+---------+
|        4 |        | C++               |    7.11 |    1.48 |
+----------+--------+-------------------+---------+---------+
|        5 |        | C#                |    4.58 |    1.18 |
+----------+--------+-------------------+---------+---------+
|        6 |        | Visual Basic      |    4.12 |    0.83 |
+----------+--------+-------------------+---------+---------+
|        7 |        | JavaScript        |    2.54 |    0.41 |
+----------+--------+-------------------+---------+---------+
|        9 | change | PHP               |    2.49 |    0.62 |
+----------+--------+-------------------+---------+---------+
|       19 | change | R                 |    2.37 |    1.33 |
+----------+--------+-------------------+---------+---------+
|        8 | change | SQL               |    1.76 |   -0.19 |
+----------+--------+-------------------+---------+---------+
|       14 | change | Go                |    1.46 |    0.24 |
+----------+--------+-------------------+---------+---------+
|       16 | change | Swift             |    1.38 |    0.28 |
+----------+--------+-------------------+---------+---------+
|       20 | change | Perl              |    1.30 |    0.26 |
+----------+--------+-------------------+         +---------+
|       12 | change | Assembly language |         |   -0.08 |
+----------+--------+-------------------+---------+---------+
|       15 |        | Ruby              |    1.24 |    0.03 |
+----------+--------+-------------------+---------+---------+
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Získání řetězce reprezentujícího celou vykreslenou tabulku</h2>

<p>Podívejme se nyní na další potenciálně užitečnou vlastnost knihovny
<strong>tablewriter</strong>. Relativně snadno totiž můžeme získat řetězec
s&nbsp;obsahem celé vykreslené tabulky. Jinými slovy &ndash; tabulku není nutné
pouze vytisknout, ale získat lze i její podobu. Toto chování, které je
zajištěno díky tomu, že je knihovna postavena na rozhraní
<strong>io.Writer</strong>, je možné využít v&nbsp;testech atd.:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "strings"
&nbsp;
        "github.com/olekukonko/tablewriter"
)
&nbsp;
func <strong>main</strong>() {
        asString := <u>&amp;strings.Builder{}</u>
&nbsp;
        table, err := tablewriter.NewCSV(asString, "tiobe.csv", true)
        if err != nil {
                log.Fatal(err)
        }
        table.SetRowLine(true)
        table.SetAutoMergeCellsByColumnIndex([]int{1, 2})
        table.Render()
&nbsp;
        fmt.Println(<u>asString.String()</u>)
}
</pre>

<p>Tento demonstrační příklad nejdříve získá celou textovou podobu tabulky,
kterou může dále zpracovat. V&nbsp;tomto jednoduchém případě jí vytiskne na
standardní výstup:</p>

<pre>
+----------+--------+-------------------+---------+---------+
| SEP 2019 | CHANGE |     LANGUAGE      | RATINGS | CHANGEP |
+----------+--------+-------------------+---------+---------+
|        2 | change | C                 |   15.95 |    0.74 |
+----------+        +-------------------+---------+---------+
|        1 |        | Java              |   13.48 |   -3.18 |
+----------+--------+-------------------+---------+---------+
|        3 |        | Python            |   10.47 |    0.59 |
+----------+--------+-------------------+---------+---------+
|        4 |        | C++               |    7.11 |    1.48 |
+----------+--------+-------------------+---------+---------+
|        5 |        | C#                |    4.58 |    1.18 |
+----------+--------+-------------------+---------+---------+
|        6 |        | Visual Basic      |    4.12 |    0.83 |
+----------+--------+-------------------+---------+---------+
|        7 |        | JavaScript        |    2.54 |    0.41 |
+----------+--------+-------------------+---------+---------+
|        9 | change | PHP               |    2.49 |    0.62 |
+----------+        +-------------------+---------+---------+
|       19 |        | R                 |    2.37 |    1.33 |
+----------+        +-------------------+---------+---------+
|        8 |        | SQL               |    1.76 |   -0.19 |
+----------+        +-------------------+---------+---------+
|       14 |        | Go                |    1.46 |    0.24 |
+----------+        +-------------------+---------+---------+
|       16 |        | Swift             |    1.38 |    0.28 |
+----------+        +-------------------+---------+---------+
|       20 |        | Perl              |    1.30 |    0.26 |
+----------+        +-------------------+---------+---------+
|       12 |        | Assembly language |    1.30 |   -0.08 |
+----------+--------+-------------------+---------+---------+
|       15 |        | Ruby              |    1.24 |    0.03 |
+----------+--------+-------------------+---------+---------+
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Barevný výstup</h2>

<p>Poslední vlastností knihovny <strong>tablewriter</strong>, o níž se
v&nbsp;dnešním článku zmíníme, je podpora pro barevný výstup,
resp.&nbsp;přesněji řečeno pro obarvení vybraných částí tabulky. V&nbsp;prvním
příkladu s&nbsp;barevným výstupem obarvíme jednotlivé nadpisy sloupců &ndash; u
každého sloupce může být definována barva popředí, barva pozadí a styl
vykreslení (typicky tučné písmo). Konkrétní způsob zobrazení je ovšem do značné
míry závislý na nastavení terminálu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/olekukonko/tablewriter"
)
&nbsp;
func <strong>main</strong>() {
        table, err := tablewriter.NewCSV(os.Stdout, "tiobe.csv", true)
        if err != nil {
                log.Fatal(err)
        }
        table.SetBorder(false)
&nbsp;
        table.<u>SetHeaderColor(</u>
                <u>tablewriter.Colors{tablewriter.Bold, tablewriter.BgGreenColor},</u>
                <u>tablewriter.Colors{tablewriter.FgHiRedColor, tablewriter.Bold, tablewriter.BgBlackColor},</u>
                <u>tablewriter.Colors{tablewriter.BgRedColor, tablewriter.FgWhiteColor},</u>
                <u>tablewriter.Colors{tablewriter.BgCyanColor, tablewriter.FgWhiteColor},</u>
                <u>tablewriter.Colors{tablewriter.Bold, tablewriter.BgWhiteColor}</u>)
&nbsp;
        table.Render()
}
</pre>

<p>Výsledek:</p>

<a href="https://www.root.cz/obrazek/444550/"><img src="https://i.iinfo.cz/images/425/tablewriter-1-prev.png" class="image-444550" alt="&#160;" width="370" height="233" /></a>
<p><i>Obrázek 1: Tabulka s&nbsp;obarvenými nadpisy sloupců.</i></p>

<p>Ve druhém příkladu obarvíme i vybrané sloupce:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/olekukonko/tablewriter"
)
&nbsp;
func <strong>main</strong>() {
        table, err := tablewriter.NewCSV(os.Stdout, "tiobe.csv", true)
        if err != nil {
                log.Fatal(err)
        }
        table.SetBorder(false)
&nbsp;
        table.SetHeaderColor(
                tablewriter.Colors{tablewriter.Bold, tablewriter.BgGreenColor},
                tablewriter.Colors{tablewriter.FgHiRedColor, tablewriter.Bold, tablewriter.BgBlackColor},
                tablewriter.Colors{tablewriter.BgRedColor, tablewriter.FgBlackColor},
                tablewriter.Colors{tablewriter.BgCyanColor, tablewriter.FgYellowColor},
                tablewriter.Colors{tablewriter.Bold, tablewriter.BgWhiteColor})
&nbsp;
        table.<u>SetColumnColor(</u>
                <u>tablewriter.Colors{tablewriter.FgHiBlackColor},</u>
                <u>tablewriter.Colors{tablewriter.Bold, tablewriter.FgHiRedColor},</u>
                <u>tablewriter.Colors{tablewriter.Bold, tablewriter.FgHiGreenColor},</u>
                <u>tablewriter.Colors{tablewriter.FgBlackColor},</u>
                <u>tablewriter.Colors{tablewriter.Bold, tablewriter.BgWhiteColor}</u>)
&nbsp;
        table.Render()
}
</pre>

<p>Výsledek:</p>

<a href="https://www.root.cz/obrazek/444551/"><img src="https://i.iinfo.cz/images/425/tablewriter-2-prev.png" class="image-444551" alt="&#160;" width="370" height="213" /></a>
<p><i>Obrázek 2: Tabulka s&nbsp;obarvenými nadpisy sloupců i jednotlivými sloupci.</i></p>

<p><div class="rs-tip-major">Poznámka: dokonce je možné v&nbsp;případě potřeby
zajistit obarvení jednotlivých buněk individuálně, což nám umožňuje zvýraznění
některých důležitých hodnot.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Nepracuje se pouze s&nbsp;tabulkami: pokročilá knihovna <strong>go-pretty</strong></h2>

<p>Vývojářům, kteří pracují s&nbsp;jazykem Go, je k&nbsp;dispozici ještě jedna
velmi užitečná knihovna, kterou je možné použít pro vykreslení obsahu různých
datových struktur, samozřejmě včetně tabulek. Tato knihovna se jmenuje
<strong>go-pretty</strong> a dnes si ukážeme, jaké možnosti nám nabízí právě
při vykreslování tabulek. Instalaci této knihovny můžeme provést
s&nbsp;využitím modulů jazyka Go: postačuje vytvořit nový projekt a upravit
jeho projektový soubor do podoby:</p>

<pre>
module go-pretty-test
&nbsp;
go 1.14
&nbsp;
require (
	github.com/jedib0t/go-pretty/v6 v6.1.0
)
</pre>

<p>Při prvním pokusu o překlad se stáhnou i další potřebné knihovny:</p>

<pre>
go: downloading github.com/jedib0t/go-pretty v4.3.0+incompatible
go: downloading github.com/jedib0t/go-pretty/v6 v6.1.0
go: extracting github.com/jedib0t/go-pretty/v6 v6.1.0
go: extracting github.com/jedib0t/go-pretty v4.3.0+incompatible
</pre>

<p>A dojde ke zpětné úpravě projektového souboru:</p>

<pre>
module go-pretty-test
&nbsp;
go 1.14
&nbsp;
require (
	github.com/go-openapi/strfmt v0.20.0 // indirect
	github.com/jedib0t/go-pretty v4.3.0+incompatible
	github.com/jedib0t/go-pretty/v6 v6.1.0
)
</pre>

<p>Od této chvíle je možné knihovnu importovat i do dalších projektů.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Zobrazení jednoduché tabulky knihovnou <strong>go-pretty</strong></h2>

<p>Podobně, jako tomu bylo u předchozích třech popisovaných knihoven, si
nejdříve ukážeme, jak jsou vlastně zobrazeny jednoduché tabulky. Používá se
podobný postup, jaký byl využit i v&nbsp;předchozí knihovně:</p>

<ol>
<li>Je zkonstruován objekt představující tabulku, a to konstruktorem <strong>NewWriter</strong></li>
<li>Nastaví se objekt použitý pro vykreslení, v&nbsp;našem případě <strong>os.Stdout</strong></li>
<li>Jednotlivé řádky tabulky se připojí metodou <strong>AppendRow</strong></li>
<li>Celá tabulka je vykreslena metodou <strong>Render</strong></li>
</ol>

<p>Důležité je, že řádek tabulky je představován datovým typem
<strong>table.Row</strong>, což ale není nic jiného než řez objektů
vyhovujících rozhraní <strong>interface{}</strong>, tedy jinými slovy
jakýchkoli objektů:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
&nbsp;
        "github.com/jedib0t/go-pretty/table"
)
&nbsp;
// Role represents user role in some IS
type <strong>Role</strong> struct {
        name       string
        surname    string
        popularity int
}
&nbsp;
func <strong>main</strong>() {
        roles := []Role{
                Role{"Eliška", "Najbrtová", 4},
                Role{"Jenny", "Suk", 3},
                Role{"Anička", "Šafářová", 1},
                Role{"Sváťa", "Pulec", 3},
                Role{"Blažej", "Motyčka", 8},
                Role{"Eda", "Wasserfall", 3},
                Role{"Přemysl", "Hájek", 10},
        }
&nbsp;
        t := <u>table.NewWriter()</u>
        t.<u>SetOutputMirror(os.Stdout)</u>
        t.AppendHeader(table.Row{"#", "First Name", "Last Name", "Popularity"})
&nbsp;
        for i, role := range roles {
                t.<u>AppendRow(table.Row{i, role.name, role.surname, role.popularity}</u>)
        }
        t.<u>Render()</u>
}
</pre>

<p>Výsledkem spuštění předchozího příkladu by měla být tato tabulka:</p>

<pre>
+---+------------+------------+------------+
| # | FIRST NAME | LAST NAME  | POPULARITY |
+---+------------+------------+------------+
| 0 | Eliška     | Najbrtová  |          4 |
| 1 | Jenny      | Suk        |          3 |
| 2 | Anička     | Šafářová   |          1 |
| 3 | Sváťa      | Pulec      |          3 |
| 4 | Blažej     | Motyčka    |          8 |
| 5 | Eda        | Wasserfall |          3 |
| 6 | Přemysl    | Hájek      |         10 |
+---+------------+------------+------------+
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Patička tabulky</h2>

<p>Do tabulky je možné (což opět není nic unikátního) přidat patičku, a to
konkrétně metodou nazvanou <strong>AppendFooter</strong>. Této metodě se
předává hodnota stejného typu, jako metodám <strong>AppendHeader</strong> a
<strong>AppendRow</strong> &ndash; typ <strong>table.Row</strong>, což je řez
hodnotami splňujícími rozhraní <strong>interface{}</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
&nbsp;
        "github.com/jedib0t/go-pretty/table"
)
&nbsp;
// Role represents user role in some IS
type <strong>Role</strong> struct {
        name       string
        surname    string
        popularity int
}
&nbsp;
func <strong>main</strong>() {
        roles := []Role{
                Role{"Eliška", "Najbrtová", 4},
                Role{"Jenny", "Suk", 3},
                Role{"Anička", "Šafářová", 1},
                Role{"Sváťa", "Pulec", 3},
                Role{"Blažej", "Motyčka", 8},
                Role{"Eda", "Wasserfall", 3},
                Role{"Přemysl", "Hájek", 10},
        }
&nbsp;
        t := table.NewWriter()
        t.SetOutputMirror(os.Stdout)
        t.<u>AppendHeader(table.Row{"#", "First Name", "Last Name", "Popularity"})</u>
&nbsp;
        totalPopularity := 0
        for i, role := range roles {
                t.<u>AppendRow(table.Row{i, role.name, role.surname, role.popularity})</u>
                totalPopularity += role.popularity
        }
        t.<u>AppendFooter(table.Row{"", "", "Total", totalPopularity})</u>
        t.<u>Render()</u>
}
</pre>

<p>Výsledná tabulka bude obsahovat patičku se součtem popularit jednotlivých
postav z&nbsp;jedné známé divadelní hry:</p>

<pre>
+---+------------+------------+------------+
| # | FIRST NAME | LAST NAME  | POPULARITY |
+---+------------+------------+------------+
| 0 | Eliška     | Najbrtová  |          4 |
| 1 | Jenny      | Suk        |          3 |
| 2 | Anička     | Šafářová   |          1 |
| 3 | Sváťa      | Pulec      |          3 |
| 4 | Blažej     | Motyčka    |          8 |
| 5 | Eda        | Wasserfall |          3 |
| 6 | Přemysl    | Hájek      |         10 |
+---+------------+------------+------------+
|   |            | TOTAL      |         32 |
+---+------------+------------+------------+
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Styl vykreslení tabulek</h2>

<p>Jednou z&nbsp;mnoha předností knihovny <strong>go-pretty</strong> je
existence již předpřipravených stylů aplikovaných při vykreslení tabulek. Styly
určují například způsob zobrazení okrajů tabulky, barvu sloupců či nadpisů
sloupců atd. Nejprve si ukažme způsob aplikace stylu, který ovlivňuje pouze
okraje tabulky a nikoli barvu vykreslení. Styl se vybírá metodou nazvanou
<strong>SetStyle</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
&nbsp;
        "github.com/jedib0t/go-pretty/table"
)
&nbsp;
// Role represents user role in some IS
type <strong>Role</strong> struct {
        name       string
        surname    string
        popularity int
}
&nbsp;
func <strong>main</strong>() {
        roles := []Role{
                Role{"Eliška", "Najbrtová", 4},
                Role{"Jenny", "Suk", 3},
                Role{"Anička", "Šafářová", 1},
                Role{"Sváťa", "Pulec", 3},
                Role{"Blažej", "Motyčka", 8},
                Role{"Eda", "Wasserfall", 3},
                Role{"Přemysl", "Hájek", 10},
        }
&nbsp;
        t := table.NewWriter()
        t.SetOutputMirror(os.Stdout)
        t.<u>SetStyle(table.StyleLight)</u>
&nbsp;
        t.AppendHeader(table.Row{"#", "First Name", "Last Name", "Popularity"})
&nbsp;
        totalPopularity := 0
        for i, role := range roles {
                t.AppendRow(table.Row{i, role.name, role.surname, role.popularity})
                totalPopularity += role.popularity
        }
        t.AppendFooter(table.Row{"", "", "Total", totalPopularity})
        t.Render()
}
</pre>

<p>Výsledkem běhu tohoto příkladu by měla být následující tabulka (založená na
speciálních Unicode znacích, což vyžaduje použití vhodného fontu):</p>

<pre>
┌───┬────────────┬────────────┬────────────┐
│ # │ FIRST NAME │ LAST NAME  │ POPULARITY │
├───┼────────────┼────────────┼────────────┤
│ 0 │ Eliška     │ Najbrtová  │          4 │
│ 1 │ Jenny      │ Suk        │          3 │
│ 2 │ Anička     │ Šafářová   │          1 │
│ 3 │ Sváťa      │ Pulec      │          3 │
│ 4 │ Blažej     │ Motyčka    │          8 │
│ 5 │ Eda        │ Wasserfall │          3 │
│ 6 │ Přemysl    │ Hájek      │         10 │
├───┼────────────┼────────────┼────────────┤
│   │            │ TOTAL      │         32 │
└───┴────────────┴────────────┴────────────┘
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Ostatní styly okrajů tabulek</h2>

<p>Kromě stylu zmíněného <a href="#k13">v&nbsp;předchozí kapitole</a> existují
další tři předpřipravené styly okrajů tabulky resp.&nbsp;okrajů mezi jejími
jednotlivými buňkami:</p>

<ol>
<li>table.StyleBold</li>
<li>table.StyleDouble</li>
<li>table.StyleRounded</li>
</ol>

<p>Všechny tři zmíněné styly jsou použity v&nbsp;dalším demonstračním příkladu,
jehož úplný zdrojový kód vypadá následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
&nbsp;
        "github.com/jedib0t/go-pretty/table"
)
&nbsp;
// Role represents user role in some IS
type <strong>Role</strong> struct {
        name       string
        surname    string
        popularity int
}
&nbsp;
func <strong>main</strong>() {
        roles := []Role{
                Role{"Eliška", "Najbrtová", 4},
                Role{"Jenny", "Suk", 3},
                Role{"Anička", "Šafářová", 1},
                Role{"Sváťa", "Pulec", 3},
                Role{"Blažej", "Motyčka", 8},
                Role{"Eda", "Wasserfall", 3},
                Role{"Přemysl", "Hájek", 10},
        }
&nbsp;
        t := table.NewWriter()
        t.SetOutputMirror(os.Stdout)
&nbsp;
        t.AppendHeader(table.Row{"#", "First Name", "Last Name", "Popularity"})
&nbsp;
        totalPopularity := 0
        for i, role := range roles {
                t.AppendRow(table.Row{i, role.name, role.surname, role.popularity})
                totalPopularity += role.popularity
        }
        t.AppendFooter(table.Row{"", "", "Total", totalPopularity})
&nbsp;
        t.<u>SetStyle(table.StyleBold)</u>
        t.Render()
&nbsp;
        t.<u>SetStyle(table.StyleDouble)</u>
        t.Render()
&nbsp;
        t.<u>SetStyle(table.StyleRounded)</u>
        t.Render()
}
</pre>

<p>Opět je patrné, že tyto styly jsou založeny na použití specializovaných
Unicode znaků a vyžadují tedy vhodný font:</p>

<pre>
┏━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┓
┃ # ┃ FIRST NAME ┃ LAST NAME  ┃ POPULARITY ┃
┣━━━╋━━━━━━━━━━━━╋━━━━━━━━━━━━╋━━━━━━━━━━━━┫
┃ 0 ┃ Eliška     ┃ Najbrtová  ┃          4 ┃
┃ 1 ┃ Jenny      ┃ Suk        ┃          3 ┃
┃ 2 ┃ Anička     ┃ Šafářová   ┃          1 ┃
┃ 3 ┃ Sváťa      ┃ Pulec      ┃          3 ┃
┃ 4 ┃ Blažej     ┃ Motyčka    ┃          8 ┃
┃ 5 ┃ Eda        ┃ Wasserfall ┃          3 ┃
┃ 6 ┃ Přemysl    ┃ Hájek      ┃         10 ┃
┣━━━╋━━━━━━━━━━━━╋━━━━━━━━━━━━╋━━━━━━━━━━━━┫
┃   ┃            ┃ TOTAL      ┃         32 ┃
┗━━━┻━━━━━━━━━━━━┻━━━━━━━━━━━━┻━━━━━━━━━━━━┛
&nbsp;
╔═══╦════════════╦════════════╦════════════╗
║ # ║ FIRST NAME ║ LAST NAME  ║ POPULARITY ║
╠═══╬════════════╬════════════╬════════════╣
║ 0 ║ Eliška     ║ Najbrtová  ║          4 ║
║ 1 ║ Jenny      ║ Suk        ║          3 ║
║ 2 ║ Anička     ║ Šafářová   ║          1 ║
║ 3 ║ Sváťa      ║ Pulec      ║          3 ║
║ 4 ║ Blažej     ║ Motyčka    ║          8 ║
║ 5 ║ Eda        ║ Wasserfall ║          3 ║
║ 6 ║ Přemysl    ║ Hájek      ║         10 ║
╠═══╬════════════╬════════════╬════════════╣
║   ║            ║ TOTAL      ║         32 ║
╚═══╩════════════╩════════════╩════════════╝
&nbsp;
╭───┬────────────┬────────────┬────────────╮
│ # │ FIRST NAME │ LAST NAME  │ POPULARITY │
├───┼────────────┼────────────┼────────────┤
│ 0 │ Eliška     │ Najbrtová  │          4 │
│ 1 │ Jenny      │ Suk        │          3 │
│ 2 │ Anička     │ Šafářová   │          1 │
│ 3 │ Sváťa      │ Pulec      │          3 │
│ 4 │ Blažej     │ Motyčka    │          8 │
│ 5 │ Eda        │ Wasserfall │          3 │
│ 6 │ Přemysl    │ Hájek      │         10 │
├───┼────────────┼────────────┼────────────┤
│   │            │ TOTAL      │         32 │
╰───┴────────────┴────────────┴────────────╯
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Styly se změnou barvy tabulky či její části</h2>

<p>Mnohem více předpřipravených stylů definuje mj.&nbsp;i barvy jednotlivých
řádků tabulky, nadpisů sloupců atd. Jeden z&nbsp;těchto stylů se jmenuje
<strong>table.StyleColoredBright</strong>. Ukažme si nyní způsob jeho
použití:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "os"
&nbsp;
        "github.com/jedib0t/go-pretty/table"
)
&nbsp;
// Role represents user role in some IS
type <strong>Role</strong> struct {
        name       string
        surname    string
        popularity int
}
&nbsp;
func <strong>main</strong>() {
        roles := []Role{
                Role{"Eliška", "Najbrtová", 4},
                Role{"Jenny", "Suk", 3},
                Role{"Anička", "Šafářová", 1},
                Role{"Sváťa", "Pulec", 3},
                Role{"Blažej", "Motyčka", 8},
                Role{"Eda", "Wasserfall", 3},
                Role{"Přemysl", "Hájek", 10},
        }
&nbsp;
        t := table.NewWriter()
        t.SetOutputMirror(os.Stdout)
        t.SetStyle(table.StyleColoredBright)
&nbsp;
        t.AppendHeader(table.Row{"#", "First Name", "Last Name", "Popularity"})
&nbsp;
        totalPopularity := 0
        for i, role := range roles {
                t.AppendRow(table.Row{i, role.name, role.surname, role.popularity})
                totalPopularity += role.popularity
        }
        t.AppendFooter(table.Row{"", "", "Total", totalPopularity})
        t.Render()
}
</pre>

<p>Výsledkem by měla (resp.&nbsp;mohla být) tato tabulka:</p>

<img src="https://i.iinfo.cz/images/425/tablewriter-3.png" class="image-444552" alt="&#160;" width="477" height="236" />
<p><i>Obrázek 3: Tabulka se stylem <strong>StyleColoredBright</strong>.</i></p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti se může způsob
konkrétního zobrazení odlišovat v&nbsp;závislosti na nastavení terminálu a jeho
schopnostech. Minimálně by měl terminál podporovat osm základních barev pro
popředí a pozadí, včetně volby tučného písma.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Ostatní připravené barevné styly</h2>

<p>Standardních barvových stylů (či témat) existuje v&nbsp;knihovně
<strong>go-pretty</strong> větší množství:</p>

<ol>
<li>table.StyleColoredBright</li>
<li>table.StyleColoredDark</li>
<li>table.StyleColoredBlackOnBlueWhite</li>
<li>table.StyleColoredBlackOnCyanWhite</li>
<li>table.StyleColoredBlackOnGreenWhite</li>
<li>table.StyleColoredBlackOnMagentaWhite</li>
<li>table.StyleColoredBlackOnYellowWhite</li>
<li>table.StyleColoredBlackOnRedWhite</li>
<li>table.StyleColoredBlueWhiteOnBlack</li>
<li>table.StyleColoredCyanWhiteOnBlack</li>
<li>table.StyleColoredGreenWhiteOnBlack</li>
<li>table.StyleColoredMagentaWhiteOnBlack</li>
<li>table.StyleColoredRedWhiteOnBlack</li>
<li>table.StyleColoredYellowWhiteOnBlack</li>
</ol>

<p>Následující příklad zobrazí tabulky ve všech možných standardních barevných
kombinacích:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "os"

        "github.com/jedib0t/go-pretty/table"
)
&nbsp;
// Role represents user role in some IS
type <strong>Role</strong> struct {
        name       string
        surname    string
        popularity int
}
&nbsp;
func <strong>main</strong>() {
        roles := []Role{
                Role{"Eliška", "Najbrtová", 4},
                Role{"Jenny", "Suk", 3},
                Role{"Anička", "Šafářová", 1},
                Role{"Sváťa", "Pulec", 3},
                Role{"Blažej", "Motyčka", 8},
                Role{"Eda", "Wasserfall", 3},
                Role{"Přemysl", "Hájek", 10},
        }
&nbsp;
        t := table.NewWriter()
        t.SetOutputMirror(os.Stdout)
&nbsp;
        t.AppendHeader(table.Row{"#", "First Name", "Last Name", "Popularity"})
&nbsp;
        totalPopularity := 0
        for i, role := range roles {
                t.AppendRow(table.Row{i, role.name, role.surname, role.popularity})
                totalPopularity += role.popularity
        }
        t.AppendFooter(table.Row{"", "", "Total", totalPopularity})
&nbsp;
        styles := []table.Style{
                table.StyleColoredBright,
                table.StyleColoredDark,
                table.StyleColoredBlackOnBlueWhite,
                table.StyleColoredBlackOnCyanWhite,
                table.StyleColoredBlackOnGreenWhite,
                table.StyleColoredBlackOnMagentaWhite,
                table.StyleColoredBlackOnYellowWhite,
                table.StyleColoredBlackOnRedWhite,
                table.StyleColoredBlueWhiteOnBlack,
                table.StyleColoredCyanWhiteOnBlack,
                table.StyleColoredGreenWhiteOnBlack,
                table.StyleColoredMagentaWhiteOnBlack,
                table.StyleColoredRedWhiteOnBlack,
                table.StyleColoredYellowWhiteOnBlack,
        }
&nbsp;
        for _, style := range styles {
                fmt.Println(style.Name)
                t.SetStyle(style)
                t.Render()
                fmt.Println()
                fmt.Println()
        }
}
</pre>

<p>Výsledky:</p>

<img src="https://i.iinfo.cz/images/425/tablewriter-4.png" class="image-444553" alt="&#160;" width="319" height="795" />
<p><i>Obrázek 4: Barvová témata tabulek.</i></p>

<img src="https://i.iinfo.cz/images/425/tablewriter-5.png" class="image-444554" alt="&#160;" width="319" height="795" />
<p><i>Obrázek 5: Barvová témata tabulek.</i></p>

<img src="https://i.iinfo.cz/images/425/tablewriter-6.png" class="image-444555" alt="&#160;" width="319" height="795" />
<p><i>Obrázek 6: Barvová témata tabulek.</i></p>

<img src="https://i.iinfo.cz/images/425/tablewriter-7.png" class="image-444556" alt="&#160;" width="319" height="390" />
<p><i>Obrázek 7: Barvová témata tabulek.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Obsah následující části seriálu</h2>

<p>V&nbsp;navazující části seriálu o programovacím jazyku Go i o knihovnách a
nástrojích, které pro tento jazyk existují, dokončíme popis možností nabízených
knihovnou <strong>go-pretty</strong>. Ukážeme si především způsob vykreslení
dalších datových struktur podporovaných touto knihovnou.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: často používané formáty tabulek vykreslených neproporcionálním písmem</h2>

<p>Tabulky zapisované v&nbsp;čistých textových souborech (<i>plain ASCII</i>,
<i>plain text</i>) se v&nbsp;praxi používají poměrně často, a to už minimálně
několik desetiletí (ve skutečnosti ovšem mnohem déle, neboť se jednalo o
standardní formát tiskových sestav jak na mainframech, tak i na
minipočítačích). V&nbsp;této příloze jsou uvedeny tři formáty, které se ve své
oblasti staly de-facto standardy a existují nástroje, které takové tabulky
dokážou rozpoznat a korektně zpracovat.</p>

<p>První formát tabulek je používán ve <a
href="https://www.root.cz/clanky/zaklady-pouziti-rezimu-org-mode-v-emacsu/">slavném
režimu Org</a> v&nbsp;textovém editoru Emacs. Ve skutečnosti tento formát
podporují i další nástroje:</p>

<pre>
| Language          |   Sep 2020 |   Sep 2019 | Change   |   Ratings |   Changep |
|-------------------+------------+------------+----------+-----------+-----------|
| C                 |          1 |          2 | change   |     15.95 |      0.74 |
| Java              |          2 |          1 | change   |     13.48 |     -3.18 |
| Python            |          3 |          3 | nan      |     10.47 |      0.59 |
| C++               |          4 |          4 | nan      |      7.11 |      1.48 |
| C#                |          5 |          5 | nan      |      4.58 |      1.18 |
| Visual Basic      |          6 |          6 | nan      |      4.12 |      0.83 |
| JavaScript        |          7 |          7 | nan      |      2.54 |      0.41 |
| PHP               |          8 |          9 | change   |      2.49 |      0.62 |
| R                 |          9 |         19 | change   |      2.37 |      1.33 |
| SQL               |         10 |          8 | change   |      1.76 |     -0.19 |
| Go                |         11 |         14 | change   |      1.46 |      0.24 |
| Swift             |         12 |         16 | change   |      1.38 |      0.28 |
| Perl              |         13 |         20 | change   |      1.3  |      0.26 |
| Assembly language |         14 |         12 | change   |      1.3  |     -0.08 |
| Ruby              |         15 |         15 | nan      |      1.24 |      0.03 |
| MATLAB            |         16 |         18 | change   |      1.1  |      0.04 |
| Groovy            |         17 |         11 | change   |      0.99 |     -0.52 |
| Rust              |         18 |         33 | change   |      0.92 |      0.55 |
| Objective-C       |         19 |         10 | change   |      0.85 |     -0.99 |
| Dart              |         20 |         24 | change   |      0.77 |      0.13 |
</pre>

<p>Další formát je <a href="https://www.idalko.com/jira-tables/">akceptován
Jirou</a> a podobnými nástroji:</p>

<pre>
|| Language          ||   Sep 2020 ||   Sep 2019 || Change   ||   Ratings ||   Changep ||
| C                 |          1 |          2 | change   |     15.95 |      0.74 |
| Java              |          2 |          1 | change   |     13.48 |     -3.18 |
| Python            |          3 |          3 | nan      |     10.47 |      0.59 |
| C++               |          4 |          4 | nan      |      7.11 |      1.48 |
| C#                |          5 |          5 | nan      |      4.58 |      1.18 |
| Visual Basic      |          6 |          6 | nan      |      4.12 |      0.83 |
| JavaScript        |          7 |          7 | nan      |      2.54 |      0.41 |
| PHP               |          8 |          9 | change   |      2.49 |      0.62 |
| R                 |          9 |         19 | change   |      2.37 |      1.33 |
| SQL               |         10 |          8 | change   |      1.76 |     -0.19 |
| Go                |         11 |         14 | change   |      1.46 |      0.24 |
| Swift             |         12 |         16 | change   |      1.38 |      0.28 |
| Perl              |         13 |         20 | change   |      1.3  |      0.26 |
| Assembly language |         14 |         12 | change   |      1.3  |     -0.08 |
| Ruby              |         15 |         15 | nan      |      1.24 |      0.03 |
| MATLAB            |         16 |         18 | change   |      1.1  |      0.04 |
| Groovy            |         17 |         11 | change   |      0.99 |     -0.52 |
| Rust              |         18 |         33 | change   |      0.92 |      0.55 |
| Objective-C       |         19 |         10 | change   |      0.85 |     -0.99 |
| Dart              |         20 |         24 | change   |      0.77 |      0.13 |
</pre>

<p>A konečně formát třetí je použít <a
href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html#tables">v&nbsp;Restructured
Textu</a> (rst):</p>

<pre>
=================  ==========  ==========  ========  =========  =========
Language             Sep 2020    Sep 2019  Change      Ratings    Changep
=================  ==========  ==========  ========  =========  =========
C                           1           2  change        15.95       0.74
Java                        2           1  change        13.48      -3.18
Python                      3           3  nan           10.47       0.59
C++                         4           4  nan            7.11       1.48
C#                          5           5  nan            4.58       1.18
Visual Basic                6           6  nan            4.12       0.83
JavaScript                  7           7  nan            2.54       0.41
PHP                         8           9  change         2.49       0.62
R                           9          19  change         2.37       1.33
SQL                        10           8  change         1.76      -0.19
Go                         11          14  change         1.46       0.24
Swift                      12          16  change         1.38       0.28
Perl                       13          20  change         1.3        0.26
Assembly language          14          12  change         1.3       -0.08
Ruby                       15          15  nan            1.24       0.03
MATLAB                     16          18  change         1.1        0.04
Groovy                     17          11  change         0.99      -0.52
Rust                       18          33  change         0.92       0.55
Objective-C                19          10  change         0.85      -0.99
Dart                       20          24  change         0.77       0.13
=================  ==========  ==========  ========  =========  =========
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01-tablewriter-basic-usage.go</td><td>jednoduchá tabulka vykreslená balíčkem <strong>tablewriter</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/01-tablewriter-basic-usage.go">https://github.com/tisnik/go-root/blob/master/article_71/01-tablewriter-basic-usage.go</a></td></tr>
<tr><td> 2</td><td>02-tablewriter-from-csv.go</td><td>načtení tabulky uložené do CSV bez hlavičky</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/02-tablewriter-from-csv.go">https://github.com/tisnik/go-root/blob/master/article_71/02-tablewriter-from-csv.go</a></td></tr>
<tr><td> 3</td><td>03-tablewriter-from-csv-header.go</td><td>načtení tabulky uložené do CSV s&nbsp;hlavičkou</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/03-tablewriter-from-csv-header.go">https://github.com/tisnik/go-root/blob/master/article_71/03-tablewriter-from-csv-header.go</a></td></tr>
<tr><td> 4</td><td>04-tablewriter-left-align.go</td><td>zarovnání všech hodnot v&nbsp;tabulce doleva</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/04-tablewriter-left-align.go">https://github.com/tisnik/go-root/blob/master/article_71/04-tablewriter-left-align.go</a></td></tr>
<tr><td> 5</td><td>05-tablewriter-markdown-format.go</td><td>tabulka kompatibilní s&nbsp;některými nástroji pro Markdown</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/05-tablewriter-markdown-format.go">https://github.com/tisnik/go-root/blob/master/article_71/05-tablewriter-markdown-format.go</a></td></tr>
<tr><td> 6</td><td>06-tablewriter-set-row-line.go</td><td>horizontální rozdělení jednotlivých řádků tabulky</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/06-tablewriter-set-row-line.go">https://github.com/tisnik/go-root/blob/master/article_71/06-tablewriter-set-row-line.go</a></td></tr>
<tr><td> 7</td><td>07-tablewriter-merge-cells.go</td><td>automatické spojení buněk se shodným obsahem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/07-tablewriter-merge-cells.go">https://github.com/tisnik/go-root/blob/master/article_71/07-tablewriter-merge-cells.go</a></td></tr>
<tr><td> 8</td><td>08-tablewriter-merge-columns.go</td><td>specifikace sloupců, ve kterých má ke spojení buněk dojít</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/08-tablewriter-merge-columns.go">https://github.com/tisnik/go-root/blob/master/article_71/08-tablewriter-merge-columns.go</a></td></tr>
<tr><td> 9</td><td>09-tablewriter-to-string.go</td><td>získání řetězce reprezentujícího celou vykreslenou tabulku</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/09-tablewriter-to-string.go">https://github.com/tisnik/go-root/blob/master/article_71/09-tablewriter-to-string.go</a></td></tr>
<tr><td>10</td><td>10-tablewriter-colors.go</td><td>barevný výstup</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/10-tablewriter-colors.go">https://github.com/tisnik/go-root/blob/master/article_71/10-tablewriter-colors.go</a></td></tr>
<tr><td>11</td><td>11-tablewriter-colors.go</td><td>barevný výstup</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/11-tablewriter-colors.go">https://github.com/tisnik/go-root/blob/master/article_71/11-tablewriter-colors.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td>12-go-pretty-simple-table.go</td><td>jednoduchá tabulka vykreslená balíčkem <strong>go-pretty</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/12-go-pretty-simple-table.go">https://github.com/tisnik/go-root/blob/master/article_71/12-go-pretty-simple-table.go</a></td></tr>
<tr><td>13</td><td>13-go-pretty-footer.go</td><td>nastavení patičky tabulky</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/13-go-pretty-footer.go">https://github.com/tisnik/go-root/blob/master/article_71/13-go-pretty-footer.go</a></td></tr>
<tr><td>14</td><td>14-go-pretty-style.go</td><td>styl vykreslení tabulky</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/14-go-pretty-style.go">https://github.com/tisnik/go-root/blob/master/article_71/14-go-pretty-style.go</a></td></tr>
<tr><td>15</td><td>15-go-pretty-another-styles.go</td><td>další podporované styly tabulek</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/15-go-pretty-another-styles.go">https://github.com/tisnik/go-root/blob/master/article_71/15-go-pretty-another-styles.go</a></td></tr>
<tr><td>16</td><td>16-go-pretty-color-style.go</td><td>styl (s&nbsp;barvami) vykreslení tabulky</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/16-go-pretty-color-style.go">https://github.com/tisnik/go-root/blob/master/article_71/16-go-pretty-color-style.go</a></td></tr>
<tr><td>17</td><td>17-go-pretty-other-color-styles.go</td><td>další podporované barvové styly tabulek</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_71/17-go-pretty-other-color-styles.go">https://github.com/tisnik/go-root/blob/master/article_71/17-go-pretty-other-color-styles.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Standardní balíček text/tabwriter<br />
<a href="https://golang.org/pkg/text/tabwriter/">https://golang.org/pkg/text/tabwriter/</a>
</li>

<li>Elastic tabstops: A better way to indent and align code<br />
<a href="https://nickgravgaard.com/elastic-tabstops/">https://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>ASCII Table Writer<br />
<a href="https://github.com/olekukonko/tablewriter">https://github.com/olekukonko/tablewriter</a>
</li>

<li>TablePrinter<br />
<a href="https://github.com/lensesio/tableprinter">https://github.com/lensesio/tableprinter</a>
</li>

<li>go-pretty<br />
<a href="https://github.com/jedib0t/go-pretty">https://github.com/jedib0t/go-pretty</a>
</li>

<li>What are the drawbacks of elastic tabstops?<br />
<a href="https://softwareengineering.stackexchange.com/questions/137290/what-are-the-drawbacks-of-elastic-tabstops">https://softwareengineering.stackexchange.com/questions/137290/what-are-the-drawbacks-of-elastic-tabstops</a>
</li>

<li>Elastic tabstop editors and plugins<br />
<a href="https://stackoverflow.com/questions/28652/elastic-tabstop-editors-and-plugins">https://stackoverflow.com/questions/28652/elastic-tabstop-editors-and-plugins</a>
</li>

<li>Příkaz gofmt<br />
<a href="https://golang.org/cmd/gofmt/">https://golang.org/cmd/gofmt/</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>Standardní balíček fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>Standardní balíček text/template<br />
<a href="https://golang.org/pkg/text/template/">https://golang.org/pkg/text/template/</a>
</li>

<li>Pretty print struct variables in Go (Golang)<br />
<a href="https://golangbyexample.com/print-struct-variables-golang/">https://golangbyexample.com/print-struct-variables-golang/</a>
</li>

<li>Golang String Padding Example<br />
<a href="https://golang.cafe/blog/golang-string-padding-example.html">https://golang.cafe/blog/golang-string-padding-example.html</a>
</li>

<li>Ultimate Golang String Formatting Cheat Sheet<br />
<a href="https://medium.com/swlh/ultimate-golang-string-formatting-cheat-sheet-234ec92c97da">https://medium.com/swlh/ultimate-golang-string-formatting-cheat-sheet-234ec92c97da</a>
</li>

<li>Box Drawing (znaky Unicode)<br />
<a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters#Box_Drawing">https://en.wikipedia.org/wiki/List_of_Unicode_characters#Box_Drawing</a>
</li>

<li>Box Drawing (Unicode block)<br />
<a href="https://en.wikipedia.org/wiki/Box_Drawing_(Unicode_block)">https://en.wikipedia.org/wiki/Box_Drawing_(Unicode_block)</a>
</li>

<li>Tables in Restructured Text<br />
<a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html#tables">https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html#tables</a>
</li>

<li>JIRA Tables<br />
<a href="https://www.idalko.com/jira-tables/">https://www.idalko.com/jira-tables/</a>
</li>

<li>Základy použití režimu org-mode v Emacsu<br />
<a href="https://www.root.cz/clanky/zaklady-pouziti-rezimu-org-mode-v-emacsu/">https://www.root.cz/clanky/zaklady-pouziti-rezimu-org-mode-v-emacsu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

