<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Volání funkcí a příkaz <strong>return</strong></a></p>
<p><a href="#k03">*** 3. Příkaz <strong>return</strong> umístěný před koncem těla funkce</a></p>
<p><a href="#k04">*** 4. Jednoduchá rozhodovací konstrukce typu <strong>if</strong></a></p>
<p><a href="#k05">*** 5. Rozvětvení s&nbsp;využitím konstrukce <strong>if-else</strong></a></p>
<p><a href="#k06">*** 6. Rozvětvení běhu programu s&nbsp;využitím konstrukce <strong>switch</strong></a></p>
<p><a href="#k07">*** 7. Porovnání výrazu s&nbsp;konstantami a vypočtenými hodnotami v&nbsp;konstrukci <strong>switch</strong></a></p>
<p><a href="#k08">*** 8. Vyhodnocení a porovnání výsledků podmínek zapsaných ve větvích <strong>case</strong></a></p>
<p><a href="#k09">*** 9. Větší množství větví <strong>case</strong> se společným tělem: klíčové slovo <strong>fallthrough</strong></a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. Programové smyčky v&nbsp;jazyku Go: příkaz <strong>for</strong></a></p>
<p><a href="#k12">*** 12. Příkaz <strong>for</strong> s&nbsp;podmínkou na začátku</a></p>
<p><a href="#k13">*** 13. Varianta programové smyčky převzatá z&nbsp;jazyka C</a></p>
<p><a href="#k14">*** 14. Iterace nad datovými strukturami s&nbsp;využitím <strong>for</strong> a <strong>range</strong></a></p>
<p><a href="#k15">*** 15. Ovlivnění programových smyček příkazy <strong>break</strong> a <strong>continue</strong></a></p>
<p><a href="#k16">*** 16. Příkazy <strong>break</strong> a <strong>continue</strong> ve vnořených smyčkách</a></p>
<p><a href="#k17">*** 17. Návrat do minulosti: příkaz <strong>goto</strong></a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<table>
<tr><td><a href="#k15">break</a></td><td><a href="#k05">default</a></td><td>func</td><td>interface</td><td>select</td></tr>
<tr><td><a href="#k05">case</a></td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr>
<tr><td>chan</td><td><a href="#k05">else</a></td><td><a href="#k17">goto</a></td><td>package</td><td><a href="#k06">switch</a></td></tr>
<tr><td>const</td><td><a href="#k09">fallthrough</a></td><td><a href="#k04">if</a></td><td><a href="#14">range</a></td><td>type</td></tr>
<tr><td><a href="#k15">continue</a></td><td><a href="#k11">for</a></td><td>import</td><td><a href="#02">return</a></td><td>var</td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Volání funkcí a příkaz <strong>return</strong></h2>

<p></p>

<pre>
package main
&nbsp;
func main() {
        println("Hello world!")
}
</pre>

<p></p>

<pre>
package main
&nbsp;
func f1() {
        println("f1")
        return
}
&nbsp;
func main() {
        println("Hello world!")
        f1()
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Příkaz <strong>return</strong> umístěný před koncem těla funkce</h2>

<p></p>

<pre>
package main
&nbsp;
func f1() {
        println("f1() před příkazem return")
        return
        println("f1() po příkazu return")
}
&nbsp;
func main() {
        println("Hello world!")
        f1()
}
</pre>

<p></p>

<pre>
package main
&nbsp;
func f2() int {
        println("f2() před příkazem return")
        return 42
        println("f2() po příkazu return")
}
&nbsp;
func main() {
        println("Hello world!")
        println(f2())
}
</pre>

<pre>
package main
&nbsp;
func f2() int {
        println("f2() před příkazem return")
        return 42
        println("f2() po příkazu return")
        return -1
}
&nbsp;
func main() {
        println("Hello world!")
        println(f2())
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Jednoduchá rozhodovací konstrukce typu <strong>if</strong></h2>

<p></p>

<pre>
package main
&nbsp;
func main() {
        if true {
                println("true")
        }
&nbsp;
        if false {
                println("false")
        }
&nbsp;
        if !true {
                println("false")
        }
&nbsp;
        if !false {
                println("true")
        }
&nbsp;
        var b1 bool = true
&nbsp;
        if b1 {
                println("true")
        }
        if !b1 {
                println("false")
        }
&nbsp;
        b2 := true
&nbsp;
        if b2 {
                println("true")
        }
        if !b2 {
                println("false")
        }
}
</pre>

<p></p>

<pre>
package main
&nbsp;
func main() {
        if 1 {
                println("true")
        }
&nbsp;
        if 0 {
                println("false")
        }
&nbsp;
        if !1 {
                println("false")
        }
&nbsp;
        if !0 {
                println("true")
        }
&nbsp;
        var b1 int = 1
&nbsp;
        if b1 {
                println("true")
        }
        if !b1 {
                println("false")
        }
&nbsp;
        b2 := 1
&nbsp;
        if b2 {
                println("true")
        }
        if !b2 {
                println("false")
        }
}
</pre>

<pre>
package main
&nbsp;
func main() {
        if nil {
                println("true")
        }
&nbsp;
        if !nil {
                println("false")
        }
&nbsp;
        if "" {
                println("true")
        }
&nbsp;
        if !"" {
                println("false")
        }
&nbsp;
        var b1 bool = nil
&nbsp;
        if b1 {
                println("true")
        }
&nbsp;
        if !b1 {
                println("false")
        }
}
</pre>


<p><a name="k05"></a></p>
<h2 id="k05">5. Rozvětvení s&nbsp;využitím konstrukce <strong>if-else</strong></h2>

<p></p>

<pre>
package main
&nbsp;
func classify_char(c rune) string {
        if c >= 'a' && c <= 'z' {
                return "male pismeno"
        } else if c >= 'A' && c <= 'Z' {
                return "velke pismeno"
        } else {
                return "neco jineho"
        }
}
&nbsp;
func main() {
        if true {
                println("true")
        } else {
                println("false")
        }
&nbsp;
        if !true {
                println("false")
        } else {
                println("true")
        }
&nbsp;
        println(classify_char('a'))
        println(classify_char('Z'))
        println(classify_char('?'))
}
</pre>

<p></p>

<pre>
package main
&nbsp;
func classify_char(c rune) string {
        if c >= 'a' && c <= 'z'
        {
                return "male pismeno"
        }
        else if c >= 'A' && c <= 'Z' {
                return "velke pismeno"
        }
        else
        {
                return "neco jineho"
        }
}
&nbsp;
func main() {
        println(classify_char('a'))
        println(classify_char('Z'))
        println(classify_char('?'))
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Rozvětvení běhu programu s&nbsp;využitím konstrukce <strong>switch</strong></h2>

<p></p>

<pre>
package main
&nbsp;
func main() {
        switch {
        }
&nbsp;
        switch {
        default:
                println("proč jsem vlastně použil switch?")
        }
&nbsp;
        switch {
        case true:
                println("true")
        case false:
                println("false")
        }
&nbsp;
        switch {
        case false:
                println("false")
        case true:
                println("true")
        default:
                println("default")
        }
&nbsp;
        switch {
        case false:
                println("false")
        default:
                println("default")
        case true:
                println("true")
        }
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Porovnání výrazu s&nbsp;konstantami a vypočtenými hodnotami v&nbsp;konstrukci <strong>switch</h2>

<p></p>

<pre>
package main
&nbsp;
func classify(x int) string {
        switch x {
        case 0:
                return "nula"
        case 2, 4, 6, 8:
                return "sudé číslo"
        case 1, 3, 5, 7, 9:
                return "liché číslo"
        default:
                return "?"
        }
}
&nbsp;
func main() {
        for x := 0; x <= 10; x++ {
                println(x, classify(x))
        }
}
</pre>

<pre>
package main
&nbsp;
func classify(x int, zero_value int) string {
        switch x {
        case zero_value:
                return "nula"
        case 2, 4, 6, 8:
                return "sudé číslo"
        case 1, 3, 5, 7, 9:
                return "liché číslo"
        default:
                return "?"
        }
}
&nbsp;
func main() {
        for x := 0; x <= 10; x++ {
                println(x, classify(x, 0))
        }
}
</pre>

<pre>
package main
&nbsp;
func classify(x int, zero_value int) string {
        switch x {
        case zero_value:
                return "nula"
        case 2, 4, 6, 8:
                return "sudé číslo"
        case 1, 3, 5, 7, 9:
                return "liché číslo"
        default:
                return "?"
        }
}
&nbsp;
func main() {
        for x := 0; x <= 10; x++ {
                println(x, classify(x, 0))
        }
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vyhodnocení a porovnání výsledků podmínek zapsaných ve větvích <strong>case</strong></h2>

<p></p>

<pre>
package main
&nbsp;
func classify(x int) string {
        switch {
        case x == 0:
                return "nula"
        case x%2 == 0:
                return "sudé číslo"
        case x%2 == 1:
                return "liché číslo"
        default:
                return "?"
        }
}
&nbsp;
func main() {
        for x := 0; x <= 10; x++ {
                println(x, classify(x))
        }
}
</pre>

<p></p>


<p><a name="k09"></a></p>
<h2 id="k09">9. Větší množství větví <strong>case</strong> se společným tělem: klíčové slovo <strong>fallthrough</strong></h2>

<pre>
package main
&nbsp;
func classify(x int) string {
        switch x {
        case 0:
                return "nula"
        case 2:
        case 4:
        case 6:
        case 8:
                return "sudé číslo"
        case 1:
        case 3:
        case 5:
        case 7:
        case 9:
                return "liché číslo"
        default:
                return "?"
        }
        return "X"
}
&nbsp;
func main() {
        for x := 0; x <= 10; x++ {
                println(x, classify(x))
        }
}
</pre>


<p></p>

<pre>
package main
&nbsp;
func classify(x int) string {
        switch x {
        case 0:
                return "nula"
        case 2:
                fallthrough
        case 4:
                fallthrough
        case 6:
                fallthrough
        case 8:
                return "sudé číslo"
        case 1:
                fallthrough
        case 3:
                fallthrough
        case 5:
                fallthrough
        case 7:
                fallthrough
        case 9:
                return "liché číslo"
        default:
                return "?"
        }
}
&nbsp;
func main() {
        for x := 0; x <= 10; x++ {
                println(x, classify(x))
        }
}
</pre>

<p></p>

<pre>
package main
&nbsp;
func classify(x int) string {
        switch {
        case x == 0:
                return "nula"
        case x%2 == 1:
                return "liché číslo"
        case x%2 == 0:
                fallthrough
        default:
                return "sudé číslo"
        }
}
&nbsp;
func main() {
        for x := 0; x <= 10; x++ {
                println(x, classify(x))
        }
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Další příklady použití rozvětvení typu <strong>switch</strong></h2>

<p></p>

<pre>
package main

func command(x string) string {
        switch x {
        case "":
                return "missing command"
        case "help":
        case "info":
                return "help"
        case "bye":
                fallthrough
        case "exit":
                fallthrough
        case "quit":
                return "quit"
        default:
                return "unknown command"
        }
        return "unknown command"
}

func main() {
        println(command(""))
        println(command("bzz bzz bzz"))
        println(command("bye"))
        println(command("quit"))
        println(command("exit"))
}
</pre>

<p></p>

<pre>
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Programové smyčky v&nbsp;jazyku Go: příkaz <strong>for</strong></h2>

<p></p>

<pre>
package main

func main() {
        for {
                println("Diamonds are forever")
        }
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Příkaz <strong>for</strong> s&nbsp;podmínkou na začátku</h2>

<pre>
package main

func main() {
        for true {
                println("Diamonds are forever")
        }
}
</pre>

<pre>
package main

func main() {
        i := 10
        for i != 0 {
                println(i)
                i--
        }
}
</pre>

<p></p>

<pre>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>

<pre>
package main

func main() {
        var i int
        for i = 0; i < 10; i++ {
                println(i)
        }
        println()
        println(i)
}
</pre>

<p></p>

<pre>
package main

func main() {
        for i := 0; i < 10; i++ {
                println(i)
        }
}
</pre>

<pre>
package main

func main() {
        for i := 0; i < 10; i++ {
                println(i)
        }
        println(i)
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Iterace nad datovými strukturami s&nbsp;využitím <strong>for</strong> a <strong>range</strong></h2>

<p></p>

<pre>
package main

func main() {
        a := [...]int{1, 2, 10, -1, 42}

        for index, item := range a {
                println(index, item)
        }

        println()

        s := "Hello world ěščř Σ"

        for index, character := range s {
                println(index, character)
        }
}
</pre>

<p></p>

<pre>
package main

func main() {
        var m1 map[int]string = make(map[int]string)
        m1[0] = "nula"
        m1[1] = "jedna"
        m1[2] = "dva"
        m1[3] = "tri"
        m1[4] = "ctyri"
        m1[5] = "pet"
        m1[6] = "sest"

        for key, val := range m1 {
                println(key, val)
        }
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Ovlivnění programových smyček příkazy <strong>break</strong> a <strong>continue</strong></h2>

<p></p>

<pre>
package main

func main() {
        for i := 0; i < 10; i++ {
                println(i)
                if i == 5 {
                        break
                }
        }
}
</pre>

<p></p>

<pre>
package main

func main() {
        for i := 0; i < 10; i++ {
                if i%2 == 0 {
                        continue
                }
                println(i)
        }
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Příkazy <strong>break</strong> a <strong>continue</strong> ve vnořených smyčkách</h2>

<p></p>

<pre>
</pre>

<p></p>

<pre>
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Návrat do minulosti: příkaz <strong>goto</strong></h2>

<p></p>

<pre>
</pre>

<p></p>

<pre>
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>

<pre>
</pre>

<p></p>

<pre>
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
doslova několik kilobajtů), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_main_function_only.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/01_main_function_only.go">https://github.com/tisnik/go-fedora/blob/master/article_04/01_main_function_only.go</a></td></tr>
<tr><td> 2</td><td>02_return_statement.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/02_return_statement.go">https://github.com/tisnik/go-fedora/blob/master/article_04/02_return_statement.go</a></td></tr>
<tr><td> 3</td><td>03_return_statement_no_value.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/03_return_statement_no_value.go">https://github.com/tisnik/go-fedora/blob/master/article_04/03_return_statement_no_value.go</a></td></tr>
<tr><td> 4</td><td>04_return_statement_int_value.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/04_return_statement_int_value.go">https://github.com/tisnik/go-fedora/blob/master/article_04/04_return_statement_int_value.go</a></td></tr>
<tr><td> 5</td><td>05_return_statement_int_value.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/05_return_statement_int_value.go">https://github.com/tisnik/go-fedora/blob/master/article_04/05_return_statement_int_value.go</a></td></tr>
<tr><td> 6</td><td>06_if_statement.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/06_if_statement.go">https://github.com/tisnik/go-fedora/blob/master/article_04/06_if_statement.go</a></td></tr>
<tr><td> 7</td><td>07_if_statement_bad_type.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/07_if_statement_bad_type.go">https://github.com/tisnik/go-fedora/blob/master/article_04/07_if_statement_bad_type.go</a></td></tr>
<tr><td> 8</td><td>08_if_statement_nil.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/08_if_statement_nil.go">https://github.com/tisnik/go-fedora/blob/master/article_04/08_if_statement_nil.go</a></td></tr>
<tr><td> 9</td><td>09_if_else_construct.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/09_if_else_construct.go">https://github.com/tisnik/go-fedora/blob/master/article_04/09_if_else_construct.go</a></td></tr>
<tr><td>10</td><td>10_bad_syntax.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/10_bad_syntax.go">https://github.com/tisnik/go-fedora/blob/master/article_04/10_bad_syntax.go</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>17</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>18</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>19</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>20</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>21</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>22</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>23</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>24</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>25</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>26</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>27</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>28</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
<tr><td>29</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_04/">https://github.com/tisnik/go-fedora/blob/master/article_04/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go <br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

<!--
2018-08-0x: 0 hod
2018-08-0x: 0 hod
2018-08-0x: 0 hod
2018-08-0x: 0 hod
2018-08-0x: 0 hod
publikace:  0 hod
-----------------
            0 hod
-->
