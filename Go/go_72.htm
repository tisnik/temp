<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<tr><td>Apache H2:</td><td><a href="https://github.com/jmrobles/h2go">https://github.com/jmrobles/h2go</a></td></tr>
<tr><td>Apache Ignite/GridGain:</td><td><a href="https://github.com/amsokol/ignite-go-client">https://github.com/amsokol/ignite-go-client</a></td></tr>
<tr><td>Apache Impala:</td><td><a href="https://github.com/bippio/go-impala">https://github.com/bippio/go-impala</a></td></tr>
<tr><td>Apache Avatica/Phoenix:</td><td><a href="https://github.com/apache/calcite-avatica-go">https://github.com/apache/calcite-avatica-go</a></td></tr>
<tr><td>Amazon AWS Athena:</td><td><a href="https://github.com/uber/athenadriver">https://github.com/uber/athenadriver</a></td></tr>
<tr><td>AWS Athena:</td><td><a href="https://github.com/segmentio/go-athena">https://github.com/segmentio/go-athena</a></td></tr>
<tr><td>Azure Cosmos DB:</td><td><a href="https://github.com/btnguyen2k/gocosmos">https://github.com/btnguyen2k/gocosmos</a></td></tr>
<tr><td>ClickHouse (uses native TCP interface):</td><td><a href="https://github.com/ClickHouse/clickhouse-go">https://github.com/ClickHouse/clickhouse-go</a></td></tr>
<tr><td>ClickHouse (uses HTTP API):</td><td><a href="https://github.com/mailru/go-clickhouse">https://github.com/mailru/go-clickhouse</a></td></tr>
<tr><td>CockroachDB:</td><td><a href="Use any PostgreSQL driver">Use any PostgreSQL driver</a></td></tr>
<tr><td>Couchbase N1QL:</td><td><a href="https://github.com/couchbase/go_n1ql">https://github.com/couchbase/go_n1ql</a></td></tr>
<tr><td>DB2 LUW and DB2/Z with DB2-Connect:</td><td><a href="https://bitbucket.org/phiggins/db2cli (Last updated 2015-08)">https://bitbucket.org/phiggins/db2cli (Last updated 2015-08)</a></td></tr>
<tr><td>DB2 LUW (uses cgo):</td><td><a href="https://github.com/asifjalil/cli">https://github.com/asifjalil/cli</a></td></tr>
<tr><td>DB2 LUW, z/OS, iSeries and Informix:</td><td><a href="https://github.com/ibmdb/go_ibm_db">https://github.com/ibmdb/go_ibm_db</a></td></tr>
<tr><td>Firebird SQL:</td><td><a href="https://github.com/nakagami/firebirdsql">https://github.com/nakagami/firebirdsql</a></td></tr>
<tr><td>Genji (pure go):</td><td><a href="https://github.com/genjidb/genji">https://github.com/genjidb/genji</a></td></tr>
<tr><td>Google Cloud BigQuery:</td><td><a href="https://github.com/solcates/go-sql-bigquery">https://github.com/solcates/go-sql-bigquery</a></td></tr>
<tr><td>Google Cloud Spanner:</td><td><a href="https://github.com/rakyll/go-sql-driver-spanner">https://github.com/rakyll/go-sql-driver-spanner</a></td></tr>
<tr><td>MS ADODB:</td><td><a href="https://github.com/mattn/go-adodb">https://github.com/mattn/go-adodb</a></td></tr>
<tr><td>MS SQL Server (pure go):</td><td><a href="https://github.com/denisenkom/go-mssqldb">https://github.com/denisenkom/go-mssqldb</a></td></tr>
<tr><td>MS SQL Server (uses cgo):</td><td><a href="https://github.com/minus5/gofreetds">https://github.com/minus5/gofreetds</a></td></tr>
MySQL: https://github.com/go-sql-driver/mysql/
MySQL: https://github.com/siddontang/go-mysql/
MySQL: https://github.com/ziutek/mymysql
ODBC: https://bitbucket.org/miquella/mgodbc
ODBC: https://github.com/alexbrainman/odbc
Oracle (uses cgo): https://github.com/mattn/go-oci8
Oracle (uses cgo): https://gopkg.in/rana/ora.v4
Oracle (uses cgo): https://github.com/godror/godror
Oracle (pure go): https://github.com/sijms/go-ora
QL: http://godoc.org/github.com/cznic/ql/driver
Postgres (pure Go): https://github.com/lib/pq
Postgres (uses cgo): https://github.com/jbarham/gopgsqldriver
Postgres (pure Go): https://github.com/jackc/pgx
Presto: https://github.com/prestodb/presto-go-client
SAP HANA (uses cgo): https://help.sap.com/viewer/0eec0d68141541d1b07893a39944924e/2.0.03/en-US/0ffbe86c9d9f44338441829c6bee15e6.html
SAP HANA (pure go): https://github.com/SAP/go-hdb
SAP ASE (uses cgo): https://github.com/SAP/go-ase - package cgo (pure go package planned)
Snowflake (pure Go): https://github.com/snowflakedb/gosnowflake
SQLite (uses cgo): https://github.com/mattn/go-sqlite3
SQLite (uses cgo): https://github.com/gwenn/gosqlite
SQLite (uses cgo): https://github.com/mxk/go-sqlite
SQLite: (uses cgo): https://github.com/rsc/sqlite
SQLite: (pure go): https://modernc.org/sqlite
SQL over REST: https://github.com/adaptant-labs/go-sql-rest-driver
Sybase SQL Anywhere: https://github.com/a-palchikov/sqlago
Sybase ASE (pure go): https://github.com/thda/tds
Vertica: https://github.com/vertica/vertica-sql-go
Vitess: https://godoc.org/vitess.io/vitess/go/vt/vitessdriver
YQL (Yahoo! Query Language): https://github.com/mattn/go-yql
Apache Hive: https://github.com/sql-machine-learning/gohive
MaxCompute: https://github.com/sql-machine-learning/gomaxcompute



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
$ psql -U postgres
Password for user postgres: 
psql (9.6.10)
Type "help" for help.

postgres=# CREATE DATABASE testDB;
CREATE DATABASE

postgres=# \l
                                  List of databases
    Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges
------------+----------+----------+-------------+-------------+-----------------------
 aggregator | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 controller | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 postgres   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 ptisnovs   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 template0  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
            |          |          |             |             | postgres=CTc/postgres
 template1  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
            |          |          |             |             | postgres=CTc/postgres
 test       | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 testdb     | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
(8 rows)

postgres=# \c testdb
You are now connected to database "testdb" as user "postgres".

CREATE TABLE persons(
    id        SERIAL PRIMARY KEY,
    name      VARCHAR(50) NOT NULL,
    surname   VARCHAR(50)  NOT NULL);

testdb=# \dt
 public | persons | table | postgres

testdb=# \d persons
 id      | integer               | not null default nextval('persons_id_seq'::regclass)
 name    | character varying(50) | not null
 surname | character varying(50) | not null

INSERT INTO persons(name, surname) VALUES('Eliška', 'Najbrtová');
INSERT INTO persons(name, surname) VALUES('Jenny', 'Suk');
INSERT INTO persons(name, surname) VALUES('Anička', 'Šafářová');
INSERT INTO persons(name, surname) VALUES('Sváťa', 'Pulec');
INSERT INTO persons(name, surname) VALUES('Blažej', 'Motyčka');
INSERT INTO persons(name, surname) VALUES('Eda', 'Wasserfall');
INSERT INTO persons(name, surname) VALUES('Přemysl', 'Hájek');

testdb=# select * from persons;
  1 | Eliška  | Najbrtová
  2 | Jenny   | Suk
  3 | Anička  | Šafářová
  4 | Sváťa   | Pulec
  5 | Blažej  | Motyčka
  6 | Eda     | Wasserfall
  7 | Přemysl | Hájek



8:02PM DBG Started
8:02PM INF DB connection configuration driverName=postgres
8:02PM INF Record ID=1 name="Eliška" surname="Najbrtová"
8:02PM INF Record ID=2 name=Jenny surname=Suk
8:02PM INF Record ID=3 name="Anička" surname="Šafářová"
8:02PM INF Record ID=4 name="Sváťa" surname=Pulec
8:02PM INF Record ID=5 name="Blažej" surname="Motyčka"
8:02PM INF Record ID=6 name=Eda surname=Wasserfall
8:02PM INF Record ID=7 name="Přemysl" surname="Hájek"
8:02PM INF DELETE deleted rows=1
8:02PM INF INSERT inserted rows=1
8:02PM INF Record ID=1 name="Eliška" surname="Najbrtová"
8:02PM INF Record ID=2 name=Jenny surname=Suk
8:02PM INF Record ID=3 name="Anička" surname="Šafářová"
8:02PM INF Record ID=4 name="Sváťa" surname=Pulec
8:02PM INF Record ID=5 name="Blažej" surname="Motyčka"
8:02PM INF Record ID=7 name="Přemysl" surname="Hájek"
8:02PM INF Record ID=8 name=Eda surname="Vodopád"
8:02PM DBG Finished

testdb=# select * from persons;
 id |  name   |  surname
----+---------+-----------
  1 | Eliška  | Najbrtová
  2 | Jenny   | Suk
  3 | Anička  | Šafářová
  4 | Sváťa   | Pulec
  5 | Blažej  | Motyčka
  7 | Přemysl | Hájek
  8 | Eda     | Vodopád
(7 rows)
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
package main

import (
        "fmt"
        "os"

        "database/sql"

        _ "github.com/lib/pq"           // PostgreSQL database driver
        _ "github.com/mattn/go-sqlite3" // SQLite database driver

        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)

// Datová struktura s konfigurací připojení k databázi
type StorageConfiguration struct {
        Driver           string `mapstructure:"db_driver" toml:"db_driver"`
        SQLiteDataSource string `mapstructure:"sqlite_datasource" toml:"sqlite_datasource"`
        PGUsername       string `mapstructure:"pg_username" toml:"pg_username"`
        PGPassword       string `mapstructure:"pg_password" toml:"pg_password"`
        PGHost           string `mapstructure:"pg_host" toml:"pg_host"`
        PGPort           int    `mapstructure:"pg_port" toml:"pg_port"`
        PGDBName         string `mapstructure:"pg_db_name" toml:"pg_db_name"`
        PGParams         string `mapstructure:"pg_params" toml:"pg_params"`
}

// Chybové zprávy
const (
        canNotConnectToDataStorageMessage = "Can not connect to data storage"
        connectionToDBNotEstablished      = "Connection to database not established"
        unableToCloseDBRowsHandle         = "Unable to close the DB rows handle"
        databaseOperationFailed           = "Database operation failed"
)

// Inicializace připojení k databázi
func initDatabaseConnection(configuration StorageConfiguration) (*sql.DB, error) {
        driverName := configuration.Driver
        dataSource := ""
        log.Info().Str("driverName", configuration.Driver).Msg("DB connection configuration")

        // inicializace připojení s vybraným driverem
        switch driverName {
        case "sqlite3":
                //driverType := DBDriverSQLite3
                //driver = &sqlite3.SQLiteDriver{}
                dataSource = configuration.SQLiteDataSource
        case "postgres":
                //driverType := DBDriverPostgres
                //driver = &pq.Driver{}
                dataSource = fmt.Sprintf(
                        "postgresql://%v:%v@%v:%v/%v?%v",
                        configuration.PGUsername,
                        configuration.PGPassword,
                        configuration.PGHost,
                        configuration.PGPort,
                        configuration.PGDBName,
                        configuration.PGParams,
                )
        default:
                // neznámý driver
                err := fmt.Errorf("driver %v is not supported", driverName)
                log.Err(err).Msg(canNotConnectToDataStorageMessage)
                return nil, err
        }

        // pokus o inicializaci připojení k databázi
        connection, err := sql.Open(driverName, dataSource)

        // test, zda bylo připojení k databázi úspěšné
        if err != nil {
                log.Err(err).Msg(canNotConnectToDataStorageMessage)
                return nil, err
        }

        return connection, nil
}

// Zobrazení všech záznamů v tabulce "persons"
func displayAllRecords(connection *sql.DB) error {
        // dotaz do databáze
        query := "SELECT id, name, surname FROM persons"
        rows, err := connection.Query(query)

        // test, zda byl SQL příkaz proveden bez chyby
        if err != nil {
                return err
        }

        defer func() {
                // pokud dojde k chybě nebo na konci smyčky, musíme uvolnit prostředky
                if closeErr := rows.Close(); closeErr != nil {
                        log.Error().Err(closeErr).Msg(unableToCloseDBRowsHandle)
                }
        }()

        // projít všemi vrácenými řádky
        for rows.Next() {
                var (
                        id      int
                        name    string
                        surname string
                )

                // přečtení dat z jednoho vráceného řádku
                if err := rows.Scan(&id, &name, &surname); err != nil {
                        return err
                }

                // výpis načteného záznamu
                log.Info().Int("ID", id).
                        Str("name", name).
                        Str("surname", surname).
                        Msg("Record")
        }

        return nil
}

// Vložení nového záznamu do tabulky "persons"
func insertRecord(connection *sql.DB, name string, surname string) (int, error) {
        // provedení SQL příkazu se dvěma parametry
        sqlStatement := "INSERT INTO persons (name, surname) VALUES($1, $2);"
        result, err := connection.Exec(sqlStatement, name, surname)

        // test, zda byl SQL příkaz proveden bez chyby
        if err != nil {
                return 0, err
        }

        // přečíst počet řádků v tabulce, které byly SQL příkazem upraveny
        affected, err := result.RowsAffected()

        // i tato operace může teoreticky skončit s chybou nebo nemusí být podporována
        if err != nil {
                return 0, err
        }
        return int(affected), nil
}

// Vymazání záznamu nebo záznamů na základě zapsaného jména
func deleteByName(connection *sql.DB, name string) (int, error) {
        // provedení SQL příkazu s jedním parametrem
        sqlStatement := "DELETE FROM persons WHERE name = $1;"
        result, err := connection.Exec(sqlStatement, name)

        // test, zda byl SQL příkaz proveden bez chyby
        if err != nil {
                return 0, err
        }

        // přečíst počet řádků v tabulce, které byly SQL příkazem upraveny
        affected, err := result.RowsAffected()

        // i tato operace může teoreticky skončit s chybou nebo nemusí být podporována
        if err != nil {
                return 0, err
        }
        return int(affected), nil
}

func main() {
        // nastavit logovací systém pro barevný výstup na terminál
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})

        // konfigurace připojení do databáze
        config := StorageConfiguration{
                Driver:     "postgres",
                PGUsername: "postgres",
                PGPassword: "postgres",
                PGHost:     "localhost",
                PGPort:     5432,
                PGDBName:   "testdb",
                PGParams:   "sslmode=disable",
        }

        log.Debug().Msg("Started")

        // inicializace připojení k databázi
        connection, err := initDatabaseConnection(config)
        if err != nil {
                log.Err(err).Msg(connectionToDBNotEstablished)
                return
        }

        // přečtení všech záznamů z tabulky "persons"
        err = displayAllRecords(connection)
        if err != nil {
                log.Err(err).Msg(databaseOperationFailed)
                return
        }

        // vymazání záznamu či záznamů na základě zapsaného jména
        affected, err := deleteByName(connection, "Eda")
        if err != nil {
                log.Err(err).Msg(databaseOperationFailed)
                return
        }
        log.Info().Int("deleted rows", affected).Msg("DELETE")

        // přidání nového záznamu do databáze
        affected, err = insertRecord(connection, "Eda", "Vodopád")
        if err != nil {
                log.Err(err).Msg(databaseOperationFailed)
                return
        }
        log.Info().Int("inserted rows", affected).Msg("INSERT")

        // přečtení všech záznamů z tabulky "persons"
        err = displayAllRecords(connection)
        if err != nil {
                log.Err(err).Msg(databaseOperationFailed)
                return
        }

        log.Debug().Msg("Finished")
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>DATA-DOG / go-sqlmock repository<br />
<a href="https://github.com/DATA-DOG/go-sqlmock">https://github.com/DATA-DOG/go-sqlmock</a>
</li>

<li>Sql driver mock for Golang<br />
<a href="https://pkg.go.dev/github.com/DATA-DOG/go-sqlmock?utm_source=godoc">https://pkg.go.dev/github.com/DATA-DOG/go-sqlmock?utm_source=godoc</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Package sql<br />
<a href="https://golang.org/pkg/database/sql/">https://golang.org/pkg/database/sql/</a>
</li>

<li>Go database/sql tutorial<br />
<a href="http://go-database-sql.org/">http://go-database-sql.org/</a>
</li>

<li>SQLDrivers<br />
<a href="https://github.com/golang/go/wiki/SQLDrivers">https://github.com/golang/go/wiki/SQLDrivers</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

