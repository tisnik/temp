<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Nová funkcionalita v Go 1.20: detekce skutečně volaných řádků v programovém kódu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Nová funkcionalita v Go 1.20: detekce skutečně volaných řádků v programovém kódu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Nová funkcionalita v&nbsp;Go 1.20: detekce skutečně volaných řádků v&nbsp;programovém kódu</a></p>
<p><a href="#k02">*** 2. Nástroj <i>cover</i> a jednotkové testy</a></p>
<p><a href="#k03">3. Jednoduchá webová služba a její jednotkové testy</a></p>
<p><a href="#k04">4. Zjištění pokrytí kódu jednotkovými testy</a></p>
<p><a href="#k05">5. Výpis informací o pokrytí kódu jednotkovými testy</a></p>
<p><a href="#k06">*** 6. Od jednotkových testů k&nbsp;detekci řádků, které jsou spuštěny při reálném běhu aplikace</a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Nová funkcionalita v&nbsp;Go 1.20: detekce skutečně volaných řádků v&nbsp;programovém kódu</h2>

<p><a href="https://go.dev/doc/go1.20">V&nbsp;Go verze 1.20</a> se objevila
poměrně dlouho očekávaná funkcionalita. Jedná se o technologii umožňující <a
href="https://go.dev/doc/go1.20#cover">detekci</a> skutečně volaných řádků
v&nbsp;programovém kódu. Díky této nové funkcionalitě je tedy možné například
detekovat sémanticky &bdquo;mrtvý&ldquo; kód, kód, jenž je použit jen ve
specifických případech atd. Při bližším pohledu zjistíme, že se vlastně nejedná
o zcela novou technologii, protože již v&nbsp;prvních verzích programovacího
jazyka Go měli programátoři možnost zjistit pokrytí kódu testy, což ovšem byla
technologie do značné míry svázaná s&nbsp;nástrojem <strong>go test</strong> a
taktéž se standardním balíčkem <a
href="https://pkg.go.dev/testing">testing</a>.</p>

<p>Není tedy divu, že praktické využití této technologie bylo omezeno na
jednotkové testy (<i>unit tests</i>) popř.&nbsp;pro testy komponent.
S&nbsp;příchodem Go 1.20 je nově umožněno například spustit backend
naprogramovaný v&nbsp;jazyce Go, provést několik operací na frontendu (UI) a
následně zjistit, které části backendu byly v&nbsp;tomto konkrétním případě
využity. Totéž je pochopitelně možné provést i v&nbsp;případě mikroslužeb (bez
frontendu) atd. atd. &ndash; nyní se již žádné překážky nekladou, jak ostatně
uvidíme v&nbsp;dalším textu.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Nástroj <i>cover</i> a jednotkové testy</h2>

<p></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Jednoduchá webová služba a její jednotkové testy</h2>

<p>Nejprve si ukažme kód HTTP serveru, který budeme chtít testovat. Tento
server po svém spuštění poskytuje statické soubory umístěné v&nbsp;aktuálním
adresáři a na endpointech <strong>/data</strong> a <strong>/other</strong>
odpovídá posláním odpovědi s&nbsp;nastaveným typem
&bdquo;application/json&ldquo;. V&nbsp;obou případech je kód odpovědi 200 OK (a
ve skutečnosti druhý handler nevrací validní JSON). Zdrojový kód tohoto HTTP
serveru naleznete na adrese <a
href="https://github.com/tisnik/go-root/blob/master/article_A5/httpServer/httpServer1.go">https://github.com/tisnik/go-root/blob/master/article_A5/httpServer/httpServer1.go</a></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "net/http"
)
&nbsp;
func <strong>dataHandler</strong>(writer http.ResponseWriter, request *http.Request) {
        writer.Header().Set("Content-Type", "application/json")
        writer.WriteHeader(http.StatusOK)
        fmt.Fprintf(writer, `"x": [1, 2, 3, 4, 5]`)
}
&nbsp;
func <strong>otherHandler</strong>(writer http.ResponseWriter, request *http.Request) {
        writer.Header().Set("Content-Type", "application/json")
        writer.WriteHeader(http.StatusOK)
        fmt.Fprintf(writer, `foobar`)
}
&nbsp;
func <strong>startHttpServer</strong>(address string) {
        log.Printf("Starting server on address %s", address)
        http.Handle("/", http.FileServer(http.Dir(".")))
        http.HandleFunc("/data", dataHandler)
        http.HandleFunc("/other", otherHandler)
        http.ListenAndServe(address, nil)
}
&nbsp;
func <strong>main</strong>() {
        startHttpServer(":8080")
}
</pre>

<p>Typickou úlohou je otestování funkcionality jednotlivých handlerů. Realizaci
si ukážeme na testu pro handler obsluhující endpoint <strong>/data</strong>.
Nejdříve vytvoříme objekt realizující dotaz provedený HTTP metodou GET:</p>

<pre>
request, err := http.NewRequest("GET", "/data", nil)
if err != nil {
        t.Fatal(err)
}
</pre>

<p>Dále vytvoříme objekt, který bude zaznamenávat provedené operace:</p>

<pre>
recorder := httptest.NewRecorder()
</pre>

<p>Třetím a posledním objektem je adaptér umožňující použít libovolnou funkci
s&nbsp;příslušnou signaturou jako handler HTTP serveru:</p>

<pre>
handler := http.HandlerFunc(dataHandler)
</pre>

<p>Nyní spustíme &bdquo;záznam&ldquo; činnosti HTTP serveru pro již dříve
vytvořený dotaz (HTTP GET na endpointu /data):</p>

<pre>
handler.ServeHTTP(recorder, request)
</pre>

<p>Celý průběh se zaznamená, což znamená, že později můžeme činnost handleru
prozkoumat čtením atributů struktury <strong>recorder</strong>.</p>

<p>Otestování HTTP kódu odpovědi (očekáváme 200 OK):</p>

<pre>
if status := recorder.Code; status != http.StatusOK {
        t.Errorf("improper status code: got %v instead of %v",
                status, http.StatusOK)
}
</pre>

<p>Otestování, zda odpověď obsahuje hlavičku &bdquo;Content-Type&ldquo;
s&nbsp;očekávaným obsahem &bdquo;application/json&ldquo;:</p>

<pre>
if ctype := recorder.Header().Get("Content-Type"); ctype != "application/json" {
        t.Errorf("content type header does not match: got %s want %s",
                ctype, "application/json")
}
</pre>

<p>A pochopitelně můžeme přistupovat i k&nbsp;datům poslaným v&nbsp;těle
odpovědi:</p>

<pre>
body := recorder.Body.String()
if body != `"x": [1, 2, 3, 4, 5]` {
        t.Errorf("wrong response body: %s", body)
}
</pre>

<p>Úplný zdrojový kód jednotkového testu je umístěn na adrese: <a
href="https://github.com/tisnik/go-root/blob/master/article_A5/httpServer/httpServer1_test.go">https://github.com/tisnik/go-root/blob/master/article_A5/httpServer/httpServer1_test.go</a></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "net/http"
        "net/http/httptest"
        "testing"
)
&nbsp;
func <strong>TestDataHandler</strong>(t *testing.T) {
        request, err := http.NewRequest("GET", "/data", nil)
        if err != nil {
                t.Fatal(err)
        }
&nbsp;
        recorder := httptest.NewRecorder()
        handler := http.HandlerFunc(dataHandler)
&nbsp;
        handler.ServeHTTP(recorder, request)
&nbsp;
        if status := recorder.Code; status != http.StatusOK {
                t.Errorf("improper status code: got %v instead of %v",
                        status, http.StatusOK)
        }
&nbsp;
        body := recorder.Body.String()
        if body != `"x": [1, 2, 3, 4, 5]` {
                t.Errorf("wrong response body: %s", body)
        }
&nbsp;
        if ctype := recorder.Header().Get("Content-Type"); ctype != "application/json" {
                t.Errorf("content type header does not match: got %s want %s",
                        ctype, "application/json")
        }
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Zjištění pokrytí kódu jednotkovými testy</h2>

<p>Jednotkové testy pro naši implementaci služby spustíme příkazem <strong>go
test</strong>, ovšem navíc budeme specifikovat, že je nutné zjistit pokrytí
kódu testy a současně uložit naměřená data do souboru nazvaného
&bdquo;coverage.out&ldquo;. K&nbsp;oběma účelům slouží přepínač
<strong>-coverprofile</strong>:</p>

<pre>
$ <strong>go test -coverprofile coverage.out</strong>
</pre>

<p>Výsledky budou vypadat následovně:</p>

<pre>
PASS
coverage: 25.0% of statements
ok      _/home/ptisnovs/src/go-root/article_A5/httpServer       0.003s
</pre>

<p>Soubor &bdquo;coverage.out&ldquo; obsahuje informace o spuštěných
programových řádcích v&nbsp;průběhu testů; současně se ovšem jedná o soubor,
který nebudeme přímo dekódovat, ale použijeme na to k&nbsp;tomu určené
nástroje:</p>

<pre>
mode: set
/home/ptisnovs/src/go-root/article_A5/httpServer/httpServer1.go:18.69,22.2 3 1
/home/ptisnovs/src/go-root/article_A5/httpServer/httpServer1.go:24.70,28.2 3 0
/home/ptisnovs/src/go-root/article_A5/httpServer/httpServer1.go:30.38,36.2 5 0
/home/ptisnovs/src/go-root/article_A5/httpServer/httpServer1.go:38.13,40.2 1 0
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Výpis informací o pokrytí kódu jednotkovými testy</h2>

<p>Dále z&nbsp;vytvořeného souboru &bdquo;coverage.out&ldquo; vytvoříme čitelný
výpis s&nbsp;informacemi o tom, jaké funkce HTTP serveru byly skutečně
otestovány:</p>

<pre>
$ <strong>go tool cover -func=coverage.out</strong>
</pre>

<p>Výsledek by mohl vypadat následovně (cesty se samozřejmě budou ve vašem
případě odlišovat, ovšem čísla řádků, jména funkcí a konkrétní naměřené hodnoty
budou shodné):</p>

<pre>
/home/ptisnovs/src/go-root/article_A5/httpServer/httpServer1.go:18:     dataHandler     100.0%
/home/ptisnovs/src/go-root/article_A5/httpServer/httpServer1.go:24:     otherHandler    0.0%
/home/ptisnovs/src/go-root/article_A5/httpServer/httpServer1.go:30:     startHttpServer 0.0%
/home/ptisnovs/src/go-root/article_A5/httpServer/httpServer1.go:38:     main            0.0%
total:                                                                  (statements)    25.0%
</pre>

<p>Vidíme, že handler realizovaný funkcí <strong>dataHandler</strong> je
skutečně plně pokryt testy, na rozdíl od ostatního programového kódu.</p>

<p>Navíc si můžeme nechat zobrazit HTML stránku (stránky), na nichž bude
zvýrazněn kód pokrytý testy, ostatní programový kód a řádky, které programový
kód netvoří:</p>

<pre>
$ <strong>go tool cover -html=coverage.out</strong>
</pre>

<p>S&nbsp;tímto výsledkem:</p>

*** image ***
<p><i>Obrázek 1: Vizualizace pokrytí programového kódu jednotkovými
testy.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Od jednotkových testů k&nbsp;detekci řádků, které jsou spuštěny při reálném běhu aplikace</h2>

<p></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>

<pre>
module app

go 1.20

require (
        github.com/Shopify/sarama v1.35.0
        github.com/prometheus/client_golang v1.12.1
        github.com/rs/zerolog v1.21.0
)

require (
        github.com/beorn7/perks v1.0.1 // indirect
        github.com/cespare/xxhash/v2 v2.1.2 // indirect
        github.com/davecgh/go-spew v1.1.1 // indirect
        github.com/eapache/go-resiliency v1.3.0 // indirect
        github.com/eapache/go-xerial-snappy v0.0.0-20180814174437-776d5712da21 // indirect
        github.com/eapache/queue v1.1.0 // indirect
        github.com/golang/protobuf v1.5.2 // indirect
        github.com/golang/snappy v0.0.4 // indirect
        github.com/hashicorp/errwrap v1.0.0 // indirect
        github.com/hashicorp/go-multierror v1.1.1 // indirect
        github.com/hashicorp/go-uuid v1.0.2 // indirect
        github.com/jcmturner/aescts/v2 v2.0.0 // indirect
        github.com/jcmturner/dnsutils/v2 v2.0.0 // indirect
        github.com/jcmturner/gofork v1.0.0 // indirect
        github.com/jcmturner/gokrb5/v8 v8.4.2 // indirect
        github.com/jcmturner/rpc/v2 v2.0.3 // indirect
        github.com/klauspost/compress v1.15.8 // indirect
        github.com/matttproud/golang_protobuf_extensions v1.0.1 // indirect
        github.com/pierrec/lz4/v4 v4.1.15 // indirect
        github.com/prometheus/client_model v0.2.0 // indirect
        github.com/prometheus/common v0.32.1 // indirect
        github.com/prometheus/procfs v0.7.3 // indirect
        github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 // indirect
        golang.org/x/crypto v0.0.0-20220214200702-86341886e292 // indirect
        golang.org/x/net v0.0.0-20220708220712-1185a9018129 // indirect
        golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a // indirect
        google.golang.org/protobuf v1.26.0 // indirect
)
</pre>

<pre>
package main

import (
        "flag"
        "fmt"
        "net/http"
        "os"

        "github.com/Shopify/sarama"

        "github.com/prometheus/client_golang/prometheus/promhttp"

        "github.com/rs/zerolog/log"
)

// Messages to be displayed on terminal or written into logs
const (
        versionMessage                 = "Spejbl version 1.0"
        authorsMessage                 = "Pavel Tisnovsky, Red Hat Inc."
        connectionToBrokerMessage      = "Connection to broker"
        operationFailedMessage         = "Operation failed"
        notConnectedToBrokerMessage    = "Not connected to broker"
        brokerConnectionSuccessMessage = "Broker connection OK"
)

// Exit codes
const (
        // ExitStatusOK means that the tool finished with success
        ExitStatusOK = iota
        // ExitStatusConsumerError is returned in case of any consumer-related error
        ExitStatusConsumerError
        // ExitStatusKafkaError is returned in case of any Kafka-related error
        ExitStatusKafkaError
        // ExitStatusHTTPServerError is returned in case the HTTP server can not be started
        ExitStatusHTTPServerError
)

// CliFlags represents structure holding all command line arguments and flags.
type CliFlags struct {
        CheckConnectionToKafka bool
        ShowVersion            bool
        ShowAuthors            bool
}

type ConfigStruct struct {
        // Address represents Kafka address
        Address string `mapstructure:"address" toml:"address"`
        // SecurityProtocol represents the security protocol used by the broker
        SecurityProtocol string `mapstructure:"security_protocol" toml:"security_protocol"`
        //      CertPath is the path to a file containing the certificate to be used with the broker
        CertPath string `mapstructure:"cert_path" toml:"cert_path"`
        // SaslMechanism is the SASL mechanism used for authentication
        SaslMechanism string `mapstructure:"sasl_mechanism" toml:"sasl_mechanism"`
        // SaslUsername is the username used in case of PLAIN mechanism
        SaslUsername string `mapstructure:"sasl_username" toml:"sasl_username"`
        // SaslPassword is the password used in case of PLAIN mechanism
        SaslPassword string `mapstructure:"sasl_password" toml:"sasl_password"`
        // Topic is name of Kafka topic
        Topic string `mapstructure:"topic" toml:"topic"`
        // Group is name of Kafka group
        Group string `mapstructure:"group" toml:"group"`
        // Enabled is set to true if Kafka consumer is to be enabled
        Enabled bool `mapstructure:"enabled" toml:"enabled"`

        MetricsAddress string
}

// showVersion function displays version information to standard output.
func showVersion() {
        fmt.Println(versionMessage)
}

// showAuthors function displays information about authors to standard output.
func showAuthors() {
        fmt.Println(authorsMessage)
}

// tryToConnectToKafka function just tries to establish connection to Kafka
// broker
func tryToConnectToKafka(configuration *ConfigStruct) (int, error) {
        log.Info().Msg("Checking connection to Kafka")

        // display basic info about broker that will be used
        log.Info().
                Str("broker address", configuration.Address).
                Msg("Broker address")

        // create new broker instance (w/o any checks)
        broker := sarama.NewBroker(configuration.Address)

        // check broker connection
        err := broker.Open(nil)
        if err != nil {
                log.Error().Err(err).Msg(connectionToBrokerMessage)
                return ExitStatusKafkaError, err
        }

        // check if connection remain
        connected, err := broker.Connected()
        if err != nil {
                log.Error().Err(err).Msg(connectionToBrokerMessage)
                return ExitStatusKafkaError, err
        }
        if !connected {
                log.Error().Err(err).Msg(notConnectedToBrokerMessage)
                return ExitStatusConsumerError, err
        }

        // connection was established
        log.Info().Msg(brokerConnectionSuccessMessage)

        // everything seems to be ok
        return ExitStatusOK, nil
}

// startService function tries to start the notification writer service,
// connect to storage and initialize connection to message broker.
func startService(configuration *ConfigStruct) (int, error) {
        // prepare HTTP server with metrics exposed
        err := startHTTPServer(configuration.MetricsAddress)
        if err != nil {
                log.Error().Err(err)
                return ExitStatusHTTPServerError, err
        }

        return ExitStatusOK, nil
}

// startHTTP server starts HTTP or HTTPS server with exposed metrics.
func startHTTPServer(address string) error {
        // setup handlers
        http.Handle("/metrics", promhttp.Handler())

        // start the server
        log.Info().Str("HTTP server address", address).Msg("Starting HTTP server")
        err := http.ListenAndServe(address, nil) // #nosec G114
        if err != nil {
                log.Error().Err(err).Msg("Listen and serve")
                return err
        }
        return nil
}

func doSelectedOperation(configuration *ConfigStruct, cliFlags CliFlags) (int, error) {
        switch {
        case cliFlags.ShowVersion:
                showVersion()
                return ExitStatusOK, nil
        case cliFlags.ShowAuthors:
                showAuthors()
                return ExitStatusOK, nil
        case cliFlags.CheckConnectionToKafka:
                return tryToConnectToKafka(configuration)
        default:
                exitCode, err := startService(configuration)
                return exitCode, err
        }
        // this can not happen: return ExitStatusOK, nil
}

// main function is entry point to the Notification writer service.
func main() {
        var cliFlags CliFlags

        // define and then parse all command line options
        flag.BoolVar(&cliFlags.CheckConnectionToKafka, "check-kafka", false, "check connection to Kafka")
        flag.BoolVar(&cliFlags.ShowVersion, "version", false, "show version")
        flag.BoolVar(&cliFlags.ShowAuthors, "authors", false, "show authors")
        flag.Parse()

        configuration := ConfigStruct{}

        // perform selected operation
        exitStatus, err := doSelectedOperation(&configuration, cliFlags)
        if err != nil {
                log.Err(err).Msg("Do selected operation")
                os.Exit(exitStatus)
                return
        }

        log.Debug().Msg("Finished")
}
</pre>


<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>

$ ls -l coverage
total 16
-rw-rw-r-- 1 ptisnovs ptisnovs 142 Feb 20 17:52 covcounters.810ac8e7733136bd7e57b4cac39e2180.2759513.1676911936041875369
-rw-rw-r-- 1 ptisnovs ptisnovs 154 Feb 20 17:52 covcounters.810ac8e7733136bd7e57b4cac39e2180.2759662.1676911945240574602
-rw-rw-r-- 1 ptisnovs ptisnovs 164 Feb 20 17:52 covcounters.810ac8e7733136bd7e57b4cac39e2180.2759853.1676911951857842965
-rw-rw-r-- 1 ptisnovs ptisnovs 426 Feb 20 17:52 covmeta.810ac8e7733136bd7e57b4cac39e2180

$ cat out.txt
mode: set
app/app.go:69.20,71.2 1 1
app/app.go:74.20,76.2 1 0
app/app.go:80.68,93.16 5 1
app/app.go:93.16,96.3 2 0
app/app.go:99.2,100.16 2 1
app/app.go:100.16,103.3 2 1
app/app.go:104.2,104.16 1 0
app/app.go:104.16,107.3 2 0
app/app.go:110.2,113.26 2 0
app/app.go:118.61,121.16 2 0
app/app.go:121.16,124.3 2 0
app/app.go:126.2,126.26 1 0
app/app.go:130.44,137.16 4 0
app/app.go:137.16,140.3 2 0
app/app.go:141.2,141.12 1 0
app/app.go:144.87,145.9 1 1
app/app.go:146.28,148.27 2 1
app/app.go:149.28,151.27 2 0
app/app.go:152.39,153.44 1 1
app/app.go:154.10,156.23 2 0
app/app.go:162.13,175.16 8 1 
app/app.go:175.16,179.3 3 1
app/app.go:181.2,181.29 1 1

$ go tool cover -func=out.txt
app/app.go:69:  showVersion             100.0%
app/app.go:74:  showAuthors             0.0%
app/app.go:80:  tryToConnectToKafka     56.2%
app/app.go:118: startService            0.0%
app/app.go:130: startHTTPServer         0.0%
app/app.go:144: doSelectedOperation     50.0%
app/app.go:162: main                    100.0%
total:          (statements)            52.0%



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář, můžete namísto toho
použít odkazy na jednotlivé demonstrační příklady, které naleznete
v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A5/">https://github.com/tisnik/go-root/blob/master/article_A5/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A5/">https://github.com/tisnik/go-root/blob/master/article_A5/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A5/">https://github.com/tisnik/go-root/blob/master/article_A5/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Go 1.20 Release Notes<br />
<a href="https://go.dev/doc/go1.20">https://go.dev/doc/go1.20</a>
</li>

<li>Go 1.20 Release Notes: Cover<br />
<a href="https://go.dev/doc/go1.20#cover">https://go.dev/doc/go1.20#cover</a>
</li>

<li>Working with coverage data files<br />
<a href="https://go.dev/testing/coverage/#working">https://go.dev/testing/coverage/#working</a>
</li>

<li>Proposal: extend code coverage testing to include applications<br />
<a href="https://github.com/golang/go/issues/51430">https://github.com/golang/go/issues/51430</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>An Introduction to Benchmarking Your Go Programs<br />
<a href="https://tutorialedge.net/golang/benchmarking-your-go-programs/">https://tutorialedge.net/golang/benchmarking-your-go-programs/</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Go18DS (Go 1.18+ Data Structures)<br />
<a href="https://github.com/daichi-m/go18ds">https://github.com/daichi-m/go18ds</a>
</li>

<li>TreeMap v2<br />
<a href="https://github.com/igrmk/treemap">https://github.com/igrmk/treemap</a>
</li>

<li>Go Data Structures: Binary Search Tree<br />
<a href="https://flaviocopes.com/golang-data-structure-binary-search-tree/">https://flaviocopes.com/golang-data-structure-binary-search-tree/</a>
</li>

<li>Generics in Go<br />
<a href="https://bitfieldconsulting.com/golang/generics">https://bitfieldconsulting.com/golang/generics</a>
</li>

<li>Tutorial: Getting started with generics<br />
<a href="https://go.dev/doc/tutorial/generics">https://go.dev/doc/tutorial/generics</a>
</li>

<li>Gobs of data<br />
<a href="https://blog.golang.org/gobs-of-data">https://blog.golang.org/gobs-of-data</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>Know Go: Generics (Kniha)<br />
<a href="https://bitfieldconsulting.com/books/generics">https://bitfieldconsulting.com/books/generics</a>
</li>

<li>Go 1.18 Generics based slice package<br />
<a href="https://golangexample.com/go-1-18-generics-based-slice-package/">https://golangexample.com/go-1-18-generics-based-slice-package/</a>
</li>

<li>Highly extensible Go source code linter providing checks currently missing from other linters<br />
<a href="https://github.com/go-critic/go-critic">https://github.com/go-critic/go-critic</a>
</li>

<li>Fast linters runner for Go<br />
<a href="https://github.com/golangci/golangci-lint">https://github.com/golangci/golangci-lint</a>
</li>

<li>Checkers from the “performance” group<br />
<a href="https://go-critic.com/overview#checkers-from-the-performance-group">https://go-critic.com/overview#checkers-from-the-performance-group</a>
</li>

<li>rangeValCopy<br />
<a href="https://go-critic.com/overview#rangeValCopy-ref">https://go-critic.com/overview#rangeValCopy-ref</a>
</li>

<li>C vs Rust vs Go: performance analysis<br />
<a href="https://medium.com/@marek.michalik/c-vs-rust-vs-go-performance-analysis-945ab749056c">https://medium.com/@marek.michalik/c-vs-rust-vs-go-performance-analysis-945ab749056c</a>
</li>

<li>Golang Performance Comparison | Why is GO Fast?<br />
<a href="https://www.golinuxcloud.com/golang-performance/">https://www.golinuxcloud.com/golang-performance/</a>
</li>

<li>Go mutex vs channels benchmark<br />
<a href="https://github.com/danil/go_mutex_vs_channels_benchmark">https://github.com/danil/go_mutex_vs_channels_benchmark</a>
</li>

<li>Techniques to Maximize Your Go Application’s Performance<br />
<a href="https://golangdocs.com/techniques-to-maximize-your-go-applications-performance">https://golangdocs.com/techniques-to-maximize-your-go-applications-performance</a>
</li>

<li>Go language performance optimization<br />
<a href="https://www.programmerall.com/article/8929467838/">https://www.programmerall.com/article/8929467838/</a>
</li>

<li>Ultimate Golang Performance Optimization Guide<br />
<a href="https://www.bacancytechnology.com/blog/golang-performance">https://www.bacancytechnology.com/blog/golang-performance</a>
</li>

<li>Optimizing a Golang service to reduce over 40% CPU<br />
<a href="https://medium.com/coralogix-engineering/optimizing-a-golang-service-to-reduce-over-40-cpu-366b67c67ef9">https://medium.com/coralogix-engineering/optimizing-a-golang-service-to-reduce-over-40-cpu-366b67c67ef9</a>
</li>

<li>Tutorial for optimizing golang program<br />
<a href="https://github.com/caibirdme/hand-to-hand-optimize-go/blob/master/README.md">https://github.com/caibirdme/hand-to-hand-optimize-go/blob/master/README.md</a>
</li>

<li>How to optimise your Go code<br />
<a href="https://codeburst.io/how-to-optimise-your-go-code-c6b27d4f1452">https://codeburst.io/how-to-optimise-your-go-code-c6b27d4f1452</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

