<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. Zjištění pokrytí kódu jednotkovými testy</a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p>Nejprve si ukažme kód HTTP serveru, který budeme chtít testovat. Tento
server po svém spuštění poskytuje statické soubory umístěné v&nbsp;aktuálním
adresáři a na endpointech <strong>/data</strong> a <strong>/other</strong>
odpovídá posláním odpovědi s&nbsp;nastaveným typem
&bdquo;application/json&ldquo;. V&nbsp;obou případech je kód odpovědi 200 OK (a
ve skutečnosti druhý handler nevrací validní JSON). Zdrojový kód tohoto HTTP
serveru naleznete na adrese <a
href="https://github.com/tisnik/go-root/blob/master/article_52/httpServer1.go">https://github.com/tisnik/go-root/blob/master/article_52/httpServer1.go</a></p>

<pre>
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zjištění pokrytí kódu jednotkovými testy</h2>

<p>Jednotkové testy spustíme příkazem <strong>go test</strong>, ovšem navíc
budeme specifikovat, že je nutné zjistit pokrytí kódu testy a uložit naměřená
data do souboru nazvaného &bdquo;coverage.out&ldquo;:</p>

<pre>
$ <strong>go test -coverprofile coverage.out</strong>
</pre>

<p>Dále z&nbsp;vytvořeného souboru &bdquo;coverage.out&ldquo; vytvoříme čitelný
výpis s&nbsp;informacemi o tom, jaké funkce HTTP serveru byly skutečně
otestovány:</p>

<pre>
$ <strong>go tool cover -func=coverage.out</strong>
</pre>

<p>Výsledek by mohl vypadat následovně (cesty se samozřejmě budou
odlišovat):</p>

<pre>
/home/tester/src/go/httpServer1.go:9:   dataHandler     100.0%
/home/tester/src/go/httpServer1.go:15:  otherHandler    0.0%
/home/tester/src/go/httpServer1.go:21:  startHttpServer 0.0%
/home/tester/src/go/httpServer1.go:29:  main            0.0%
total:                                  (statements)    25.0%
</pre>

<p>Vidíme, že handler realizovaný funkcí <strong>dataHandler</strong> je
skutečně plně pokryt testy, na rozdíl od ostatního programového kódu.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Go 1.20 Release Notes<br />
<a href="https://go.dev/doc/go1.20">https://go.dev/doc/go1.20</a>
</li>

<li>Go 1.20 Release Notes: Cover<br />
<a href="https://go.dev/doc/go1.20#cover">https://go.dev/doc/go1.20#cover</a>
</li>

<li>Working with coverage data files<br />
<a href="https://go.dev/testing/coverage/#working">https://go.dev/testing/coverage/#working</a>
</li>

<li>Proposal: extend code coverage testing to include applications<br />
<a href="https://github.com/golang/go/issues/51430">https://github.com/golang/go/issues/51430</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>An Introduction to Benchmarking Your Go Programs<br />
<a href="https://tutorialedge.net/golang/benchmarking-your-go-programs/">https://tutorialedge.net/golang/benchmarking-your-go-programs/</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Go18DS (Go 1.18+ Data Structures)<br />
<a href="https://github.com/daichi-m/go18ds">https://github.com/daichi-m/go18ds</a>
</li>

<li>TreeMap v2<br />
<a href="https://github.com/igrmk/treemap">https://github.com/igrmk/treemap</a>
</li>

<li>Go Data Structures: Binary Search Tree<br />
<a href="https://flaviocopes.com/golang-data-structure-binary-search-tree/">https://flaviocopes.com/golang-data-structure-binary-search-tree/</a>
</li>

<li>Generics in Go<br />
<a href="https://bitfieldconsulting.com/golang/generics">https://bitfieldconsulting.com/golang/generics</a>
</li>

<li>Tutorial: Getting started with generics<br />
<a href="https://go.dev/doc/tutorial/generics">https://go.dev/doc/tutorial/generics</a>
</li>

<li>Gobs of data<br />
<a href="https://blog.golang.org/gobs-of-data">https://blog.golang.org/gobs-of-data</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>Know Go: Generics (Kniha)<br />
<a href="https://bitfieldconsulting.com/books/generics">https://bitfieldconsulting.com/books/generics</a>
</li>

<li>Go 1.18 Generics based slice package<br />
<a href="https://golangexample.com/go-1-18-generics-based-slice-package/">https://golangexample.com/go-1-18-generics-based-slice-package/</a>
</li>

<li>Highly extensible Go source code linter providing checks currently missing from other linters<br />
<a href="https://github.com/go-critic/go-critic">https://github.com/go-critic/go-critic</a>
</li>

<li>Fast linters runner for Go<br />
<a href="https://github.com/golangci/golangci-lint">https://github.com/golangci/golangci-lint</a>
</li>

<li>Checkers from the “performance” group<br />
<a href="https://go-critic.com/overview#checkers-from-the-performance-group">https://go-critic.com/overview#checkers-from-the-performance-group</a>
</li>

<li>rangeValCopy<br />
<a href="https://go-critic.com/overview#rangeValCopy-ref">https://go-critic.com/overview#rangeValCopy-ref</a>
</li>

<li>C vs Rust vs Go: performance analysis<br />
<a href="https://medium.com/@marek.michalik/c-vs-rust-vs-go-performance-analysis-945ab749056c">https://medium.com/@marek.michalik/c-vs-rust-vs-go-performance-analysis-945ab749056c</a>
</li>

<li>Golang Performance Comparison | Why is GO Fast?<br />
<a href="https://www.golinuxcloud.com/golang-performance/">https://www.golinuxcloud.com/golang-performance/</a>
</li>

<li>Go mutex vs channels benchmark<br />
<a href="https://github.com/danil/go_mutex_vs_channels_benchmark">https://github.com/danil/go_mutex_vs_channels_benchmark</a>
</li>

<li>Techniques to Maximize Your Go Application’s Performance<br />
<a href="https://golangdocs.com/techniques-to-maximize-your-go-applications-performance">https://golangdocs.com/techniques-to-maximize-your-go-applications-performance</a>
</li>

<li>Go language performance optimization<br />
<a href="https://www.programmerall.com/article/8929467838/">https://www.programmerall.com/article/8929467838/</a>
</li>

<li>Ultimate Golang Performance Optimization Guide<br />
<a href="https://www.bacancytechnology.com/blog/golang-performance">https://www.bacancytechnology.com/blog/golang-performance</a>
</li>

<li>Optimizing a Golang service to reduce over 40% CPU<br />
<a href="https://medium.com/coralogix-engineering/optimizing-a-golang-service-to-reduce-over-40-cpu-366b67c67ef9">https://medium.com/coralogix-engineering/optimizing-a-golang-service-to-reduce-over-40-cpu-366b67c67ef9</a>
</li>

<li>Tutorial for optimizing golang program<br />
<a href="https://github.com/caibirdme/hand-to-hand-optimize-go/blob/master/README.md">https://github.com/caibirdme/hand-to-hand-optimize-go/blob/master/README.md</a>
</li>

<li>How to optimise your Go code<br />
<a href="https://codeburst.io/how-to-optimise-your-go-code-c6b27d4f1452">https://codeburst.io/how-to-optimise-your-go-code-c6b27d4f1452</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

