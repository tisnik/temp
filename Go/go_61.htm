<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Go a 2D grafika</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Go a 2D grafika</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o programovacím jazyce Go začneme zpracovávat nové téma, tentokrát věnované možnostem použití Go při vykreslování 2D i 3D grafiky. Začneme jednodušším tématem, tedy 2D grafikou, konkrétně použitím knihovny SDL2 dostupné přes rozhraní nazvané go-sdl2.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Go a 2D grafika</a></p>
<p><a href="#k02">2. Knihovna SDL</a></p>
<p><a href="#k03">3. Allegro 4 a Allegro 5</a></p>
<p><a href="#k04">4. EGL</a></p>
<p><a href="#k05">5. Vazba mezi SDL a dalšími programovacími jazyky</a></p>
<p><a href="#k06">6. Instalace vývojové verze SDL2 a balíčku go-sdl2</a></p>
<p><a href="#k07">7. Inicializace SDL, otevření okna a vyplnění plochy realizované v&nbsp;céčku</a></p>
<p><a href="#k08">8. První demonstrační příklad v&nbsp;jazyce C</a></p>
<p><a href="#k09">9. Přepis prvního příkladu do jazyka Go</a></p>
<p><a href="#k10">10. Vykreslení rastrového obrázku funkcí typu <strong>blit</strong></a></p>
<p><a href="#k11">11. Druhý demonstrační příklad v&nbsp;jazyce C</a></p>
<p><a href="#k12">12. Přepis druhého příkladu do jazyka Go</a></p>
<p><a href="#k13">13. Třetí příklad &ndash; vykreslení obrázku se změnou jeho měřítka</a></p>
<p><a href="#k14">14. Přepis třetího příkladu do jazyka Go</a></p>
<p><a href="#k15">15. Přesné umístění obrázku doprostřed okna</a></p>
<p><a href="#k16">16. Přepis čtvrtého příkladu do jazyka Go</a></p>
<p><a href="#k17">17. Interaktivní prohlížeč fraktálů naprogramovaný v&nbsp;C</a></p>
<p><a href="#k18">18. Interaktivní prohlížeč fraktálů naprogramovaný v&nbsp;Go</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Go a 2D grafika</h2>

<p>Programovací jazyk Go se v&nbsp;současnosti používá převážně pro tvorbu
různých typů služeb popř.&nbsp;démonů, tj.&nbsp;pro takové aplikace, u nichž
není vyžadován přímý grafický výstup. Ovšem to neznamená, že se situace nemůže
změnit popř.&nbsp;že Go není vhodným jazykem pro tvorbu 2D či 3D grafiky. Dnes
se zaměříme především na oblast dvourozměrné grafiky. Existuje pochopitelně
mnoho různých způsobů, jakými mohou aplikace naprogramované v&nbsp;Go
zobrazovat dvourozměrnou grafiku. Na nejnižší (resp.&nbsp;přesněji řečeno
rozumně nízké) úrovni je možné otevřít <i>framebuffer</i>, zjistit jeho formát
a zapisovat data do framebufferu přes sdílenou paměť. Ovšem toto řešení má
celou řadu nevýhod, takže se hodí jen pro specifické případy, například pro
práci s&nbsp;2D grafikou na zařízeních typu Raspberry Pi. Tomuto tématu jsme se
již na stránkách Roota věnovali v&nbsp;článcích <a
href="https://www.root.cz/clanky/operace-s-framebufferem-na-raspberry-pi/">Operace
s framebufferem na Raspberry Pi</a>, <a
href="https://www.root.cz/clanky/operace-s-framebufferem-na-raspberry-pi-vykreslovani-do-framebufferu/">Operace
s framebufferem na Raspberry Pi (vykreslování do framebufferu)</a> a <a
href="https://www.root.cz/clanky/framebuffer-na-raspberry-pi-vykreslovani-slozitejsich-objektu/">Framebuffer
na Raspberry Pi: vykreslování složitějších objektů</a>. Použít lze ovšem i
OpenGL ES či některou z&nbsp;více či méně pokročilých <a
href="https://awesome-go.com/#game-development">herních knihoven</a>.</p></p>

<p>Navíc vždycky existuje alternativní možnost spočívající v&nbsp;použití
překladače do WASM (<i>Web Assembly</i>) a v&nbsp;provádění vykreslování přímo
do <i>canvasu</i> v&nbsp;okně prohlížeče, což je téma, kterému jsme se
v&nbsp;tomto seriálu <a
href="https://www.root.cz/clanky/vyuziti-webassembly-z-programovaciho-jazyka-go/">ve
stručnosti věnovali</a>. Pro některé typy aplikací se nemusí jednat o špatné
řešení, ovšem systémové nároky jsou vyšší, než v&nbsp;případě použití nativního
kódu a nějaké nativní knihovny.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Knihovna SDL</h2>

<p>U některých typů aplikací může být výhodnější se použití vysokoúrovňových
knihoven zcela vyhnout a použít namísto nich nějakou nativní knihovnu, která
bude požadované grafické operace nabízet. V&nbsp;případě 3D grafiky je tak
možné využít <i>OpenGL</i> či <i>Direct3D</i>, ovšem pokud se jedná o 2D
grafiku, nabízí se celkem zajímavá volba &ndash; využití nativní knihovny
<i>SDL</i>, která je sama o sobě pouze relativně tenkou vrstvou mezi
uživatelskými programy a multimediálními zařízeními (grafickou a zvukovou
kartou, ale též klávesnicí, joysticky a myší či časovačem). Mezi přednosti
<i>SDL</i> patří její jednoduchost (z&nbsp;toho se odvíjí i existence vazby
mezi <i>SDL</i> a programovacími jazyky, i když její základní API je čistě
céčkové), přenositelnost na různé platformy (včetně Androidu, minimálně
v&nbsp;případě SDL 1.x) a v&nbsp;neposlední řadě taktéž existence několika
doplňujících modulů, například modulu pro vykreslování TTF fontů, vytvoření
grafického kontextu pro <i>OpenGL</i>, modulu pro komunikaci po síti atd. I
díky těmto vlastnostem je <i>SDL</i> používána v&nbsp;mnoha úspěšných hrách,
viz též <a
href="http://en.wikipedia.org/wiki/List_of_games_using_SDL">http://en.wikipedia.org/wiki/List_of_games_using_SDL</a>.</p>

<p><div class="rs-tip-major">Poznámka: ve výše uvedeném seznamu je i slavné Factorio.</div></p>

<p>Tato knihovna programátorům nabízí jak vykreslování do okna v&nbsp;případě
použití systému X Window, tak i vykreslování do <i>framebufferu</i>. Přitom se
v&nbsp;případě SDL 1.2 jedná o poměrně úzkou vrstvu mezi framebufferem a
aplikací, což mj.&nbsp;znamená, že z&nbsp;vykreslovacích (grafických) operací
jsou k&nbsp;dispozici pouze operace určené pro vykreslení obdélníku konstantní
barvou, přenosu obrázku operací <strong>bitblt</strong> a uzamčení obrazové
paměti s&nbsp;vrácením ukazatele do framebufferu (v&nbsp;tento okamžik, tj. po
uzamčení obrazové paměti, se vlastně programátor nachází v&nbsp;podobném stavu,
jako my při otevření speciálního zařízení <strong>/dev/fb0</strong> a jeho
namapování do adresního prostoru aplikace). SDL2 je již pojata odlišným
způsobem, protože využívá možností nabízených grafickými akcelerátory, zejména
možnost uchovat vykreslované bitmapy ve formě textur v&nbsp;paměti grafického
akcelerátoru s&nbsp;tím, že vykreslení takových bitmap je mnohem rychlejší a
vůbec nezatěžuje CPU.</p>

<p>Všechny příklady, s&nbsp;nimiž se seznámíme, využívají SDL2. Kromě SDL2 se
ještě stále můžete setkat s&nbsp;návody popř.&nbsp;i aplikacemi, které jsou
založeny na SDL(1). Ovšem mezi původním SDL a SDL2 je, jak jsme si již
naznačili v&nbsp;předchozím odstavci, celá řada rozdílů, které se týkají
především grafického subsystému. Je to ostatně logické, protože původní
knihovna SDL vznikala v&nbsp;době, kdy se používalo softwarové vykreslování
(hry typu Doom atd.), takže programy měly přímý přístup ke všem používaným
bitmapám a vykreslování spočívalo v&nbsp;přenosu dat mezi operační pamětí a
video pamětí. Dnes je situace zcela odlišná, protože vykreslované objekty (i
pro 2D grafiku) bývají uloženy přímo v&nbsp;paměti grafické karty a vykreslení
se většinou provádí bez nutnosti opakovaného přenosu dat z&nbsp;operační paměti
do video paměti. To mj.&nbsp;znamená, že například vykreslované <i>sprity</i>
musí být uloženy ve formátu podporovaného grafickou kartou (ve formě textur).
Tyto principiální rozdíly se projevily právě ve vydání knihovny SDL2, která
není a vlastně ani nemůže být zpětně kompatibilní.</p>

<p><div class="rs-tip-major">Poznámka: tvůrci SDL2 schválně nevytvářeli
emulační vrstvu, aby byla SDL2 stále jen tenkou &bdquo;slupkou&ldquo; nad
grafickými i dalšími multimediálními zařízeními.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Allegro 4 a Allegro 5</h2>

<p>Určitou alternativou (či možná lépe řečeno konkurencí, i když méně známou)
ke knihovně SDL je knihovna nazvaná Allegro, která v&nbsp;současnosti existuje
ve dvou variantách: &bdquo;klasická&ldquo; varianta založená na softwarovém
renderingu nese označení <i>Allegro 4</i> a zcela přepracovaná varianta, která
již dokáže využívat některé možnosti nabízené grafickými akcelerátory, se
jmenuje <i>Allegro 5</i> (zpětná kompatibilita zde není zachována, podobně jako
je tomu u SDL 1.2 &rarr; SDL 2.0). Z&nbsp;hlediska tvorby grafiky jsou
nejdůležitější funkce pro vykreslování různých grafických primitiv (od pixelů
přes úsečky až po křivky), práci s&nbsp;rastrovými obrázky a <i>sprity</i>
(včetně použití tzv.&nbsp;kompilovaných spritů), ale i například podpora pro
práci s&nbsp;animacemi uloženými ve formátu FLI/FLC. Pro některé účely může být
zajímavý i modul nabízející velmi snadno použitelné GUI, které sice neobsahuje
všechny dnes očekávané widgety (chybí například strom), ale pro konfigurační
dialogy s&nbsp;tlačítky, scrollbary, vstupními textovými poli, přepínači atd.
je to někdy použitelná a přitom výkonnostně a především paměťově nenáročná
alternativa k&nbsp;plnohodnotným GUI knihovnám.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. EGL</h2>

<p>Taktéž je možné využít technologii, která je přímo navržena pro práci
s&nbsp;grafickým procesorem. Jedná se o <i>EGL</i> neboli též <i>Native
Platform Interface</i> používané jako mezivrstva mezi grafickým procesorem
(přičemž každý grafický procesor může mít zcela odlišný způsob ovládání) na
jedné straně a knihovnou OpenVG či OpenGL ES na straně druhé (alternativně je
samozřejmě možné volat funkce poskytované EGL přímo. Za vývojem EGL stojí
sdružení <i>Khronos</i>, které kromě toho &bdquo;pečuje&ldquo; i o specifikace
a implementace OpenGL, OpenGL ES, OpenVG atd. Jedním ze základních úkolů EGL je
vytvoření a správa grafického kontextu, ploch (<i>surface</i>), do kterých je
možné přes knihovny OpenGL ES a OpenVG provádět vykreslování atd. Mimochodem
&ndash; plochy (surface) mohou být vytvořeny tak, aby aplikace běžela
v&nbsp;systému X Window (i v&nbsp;okně), přes framebuffer nebo lze vykreslování
provádět do takzvaného zadního bufferu. Další důležitou funkcí nabízenou EGL je
kopie obsahu bitmap mezi jednotlivými plochami, tj. operace typu
<strong>bitblt</strong>.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vazba mezi SDL a dalšími programovacími jazyky</h2>

<p>Jak jsme se již řekli v&nbsp;úvodních kapitolách, pro většinu dnes
používaných programovacích jazyků existuje rozhraní umožňující volat funkce
knihovny SDL. Mezi podporované jazyky patří (pochopitelně kromě nativního
céčka) zejména Ada, C++, C#, D, Fortran, Genie, Go, Haskell, Julia, Lua, Nim,
OCaml, Pascal, Perl, PHP, Python, Rust, Vala a dokonce i Common Lisp. SDL lze
použít i z&nbsp;jazyka Java (a tím pádem z&nbsp;jakéhokoli jazyka postaveného
nad JVM), což je téma, kterým jsme se opět již zabývali:</p>

<ol>

<li>Pohled pod kapotu JVM – využití knihovny SDLJava v graficky náročných aplikacích<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-vyuziti-knihovny-sdljava-v-graficky-narocnych-aplikacich/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-vyuziti-knihovny-sdljava-v-graficky-narocnych-aplikacich/</a>
</li>

<li>Pohled pod kapotu JVM – základní koncepty, na nichž je postavena knihovna SDLJava<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-zakladni-koncepty-na-nichz-je-postavena-knihovna-sdljava/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-zakladni-koncepty-na-nichz-je-postavena-knihovna-sdljava/</a>
</li>

<li>Pohled pod kapotu JVM – nízkoúrovňový přístup k framebufferu i bitmapám s využitím knihovny SDLJava<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-nizkourovnovy-pristup-k-framebufferu-i-bitmapam-s-vyuzitim-knihovny-sdljava/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-nizkourovnovy-pristup-k-framebufferu-i-bitmapam-s-vyuzitim-knihovny-sdljava/</a>
</li>

<li>Pohled pod kapotu JVM – volání funkcí OpenGL s využitím knihovny SDLJava<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-volani-funkci-opengl-s-vyuzitim-knihovny-sdljava/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-volani-funkci-opengl-s-vyuzitim-knihovny-sdljava/</a>
</li>

<li>Pohled pod kapotu JVM – složitější tělesa, textury a sprity v knihovně SDLJava<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-slozitejsi-telesa-textury-a-sprity-v-knihovne-sdljava/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-slozitejsi-telesa-textury-a-sprity-v-knihovne-sdljava/</a>
</li>

<li>Pohled pod kapotu JVM – práce s texturami v knihovně SDLJava<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-prace-s-texturami-v-knihovne-sdljava/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-prace-s-texturami-v-knihovne-sdljava/</a>
</li>

<li>Pohled pod kapotu JVM – blending a textury s alfa kanálem v knihovně SDLJava<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-blending-a-textury-s-alfa-kanalem-v-knihovne-sdljava/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-blending-a-textury-s-alfa-kanalem-v-knihovne-sdljava/</a>
</li>

<li>Pohled pod kapotu JVM – zpracování událostí v knihovně SDLJava<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-zpracovani-udalosti-v-knihovne-sdljava/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-zpracovani-udalosti-v-knihovne-sdljava/</a>
</li>

<li>Pohled pod kapotu JVM – zpracování událostí v knihovně SDLJava (klávesnice a myš)<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-zpracovani-udalosti-v-knihovne-sdljava-klavesnice-a-mys/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-zpracovani-udalosti-v-knihovne-sdljava-klavesnice-a-mys/</a>
</li>

<li>Pohled pod kapotu JVM – zpracování událostí v knihovně SDLJava (dokončení)<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-zpracovani-udalosti-v-knihovne-sdljava-dokonceni/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-zpracovani-udalosti-v-knihovne-sdljava-dokonceni/</a>
</li>

<li>Pohled pod kapotu JVM – práce s TTF fonty v knihovně SDLJava<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-prace-s-ttf-fonty-v-knihovne-sdljava/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-prace-s-ttf-fonty-v-knihovne-sdljava/</a>
</li>

<li>Pohled pod kapotu JVM – práce s TTF fonty v knihovně SDLJava (dokončení)<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-prace-s-ttf-fonty-v-knihovne-sdljava-dokonceni/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-prace-s-ttf-fonty-v-knihovne-sdljava-dokonceni/</a>
</li>

<li>Pohled pod kapotu JVM – kreslicí funkce dostupné ve třídě sdljavax.gfx.SDLGfx<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-kreslici-funkce-dostupne-ve-tride-sdljavax-gfx-sdlgfx/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-kreslici-funkce-dostupne-ve-tride-sdljavax-gfx-sdlgfx/</a>
</li>

<li>Pohled pod kapotu JVM – kreslicí funkce dostupné ve třídě sdljavax.gfx.SDLGfx (2.část)<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-kreslici-funkce-dostupne-ve-tride-sdljavax-gfx-sdlgfx-2-cast/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-kreslici-funkce-dostupne-ve-tride-sdljavax-gfx-sdlgfx-2-cast/</a>
</li>

<li>Pohled pod kapotu JVM – kreslicí funkce ve třídě sdljavax.gfx.SDLGfx (3.část) a zvukový subsystém SDLJava<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-kreslici-funkce-ve-tride-sdljavax-gfx-sdlgfx-3-cast-a-zvukovy-subsystem-sdljava/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-kreslici-funkce-ve-tride-sdljavax-gfx-sdlgfx-3-cast-a-zvukovy-subsystem-sdljava/</a>
</li>

<li>Pohled pod kapotu JVM – přehrávání hudby s využitím knihovny SDLJava<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-prehravani-hudby-s-vyuzitim-knihovny-sdljava/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-prehravani-hudby-s-vyuzitim-knihovny-sdljava/</a>
</li>

<li>Pohled pod kapotu JVM – přehrávání a mixování zvuků s využitím knihovny SDLJava<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-prehravani-a-mixovani-zvuku-s-vyuzitim-knihovny-sdljava/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-prehravani-a-mixovani-zvuku-s-vyuzitim-knihovny-sdljava/</a>
</li>

<li>Pohled pod kapotu JVM – výkonnost aplikací vytvořených s využitím SDLJava v porovnání s nativními aplikacemi<br />
<a href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-vykonnost-aplikaci-vytvorenych-s-vyuzitim-sdljava-v-porovnani-s-nativnimi-aplikacemi/">https://www.root.cz/clanky/pohled-pod-kapotu-jvm-vykonnost-aplikaci-vytvorenych-s-vyuzitim-sdljava-v-porovnani-s-nativnimi-aplikacemi/</a>
</li>

</ol>

<p>Dnes si popíšeme způsob použití SDL z&nbsp;jazyka Go s&nbsp;využitím balíčků
<strong>go-sdl2</strong>.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instalace vývojové verze SDL2 a balíčku go-sdl2</h2>

<p>Před instalací rozhraní mezi knihovnou SDL2 a programovacím jazykem Go je
nutné nainstalovat vývojové verze knihovny (přesněji řečeno knihoven) SDL2. To
je ve skutečnosti velmi snadné a celá operace se provede (v&nbsp;distribuci
založené na RPM, zde konkrétně na poněkud obstarožní Fedoře 27) následovně:</p>

<pre>
$ <strong>sudo yum install SDL2{,_image,_mixer,_ttf,_gfx}-devel</strong>
&nbsp;
Last metadata expiration check: 0:47:05 ago on Sun 22 Mar 2020 08:15:23 AM CET.
Dependencies resolved.
================================================================================
 Package                   Arch        Version               Repository    Size
================================================================================
Installing:
 SDL2-devel                x86_64      2.0.7-3.fc27          updates      252 k
 SDL2_gfx-devel            x86_64      1.0.3-1.fc27          updates       40 k
 SDL2_image-devel          x86_64      2.0.2-2.fc27          updates       12 k
 SDL2_mixer-devel          x86_64      2.0.2-1.fc27          updates       19 k
 SDL2_ttf-devel            x86_64      2.0.14-5.fc27         fedora        12 k
Installing dependencies:
 SDL2_gfx                  x86_64      1.0.3-1.fc27          updates       39 k
 SDL2_image                x86_64      2.0.2-2.fc27          updates       80 k
 SDL2_mixer                x86_64      2.0.2-1.fc27          updates       76 k
 SDL2_ttf                  x86_64      2.0.14-5.fc27         fedora        24 k
 libX11-devel              x86_64      1.6.5-4.fc27          fedora       984 k
 libXau-devel              x86_64      1.0.8-9.fc27          fedora        18 k
 libXdamage-devel          x86_64      1.1.4-11.fc27         fedora        14 k
 libXext-devel             x86_64      1.3.3-7.fc27          fedora        79 k
 libXfixes-devel           x86_64      5.0.3-4.fc27          fedora        17 k
 libXxf86vm-devel          x86_64      1.1.4-6.fc27          fedora        22 k
 libdrm-devel              x86_64      2.4.91-1.fc27         updates      138 k
 libglvnd-core-devel       x86_64      1:1.0.0-1.fc27        updates       22 k
 libglvnd-devel            x86_64      1:1.0.0-1.fc27        updates       13 k
 libglvnd-opengl           x86_64      1:1.0.0-1.fc27        updates       45 k
 libxcb-devel              x86_64      1.12-5.fc27           fedora       1.0 M
 mesa-libEGL-devel         x86_64      17.3.9-1.fc27         updates       45 k
 mesa-libGLES-devel        x86_64      17.3.9-1.fc27         updates       70 k
 xorg-x11-proto-devel      noarch      7.7-23.fc27           fedora       287 k
&nbsp;
Transaction Summary
================================================================================
Install  23 Packages
&nbsp;
Total download size: 3.3 M
Installed size: 8.7 M
Is this ok [y/N]: 
</pre>

<p><div class="rs-tip-major">Poznámka: my sice dnes budeme reálně používat
pouze <strong>SDL2-devel</strong> a <strong>SDL2_gfx-devel</strong>, ovšem
překlad balíčku pro Go by neproběhl korektně, kdyby nebyly k&nbsp;dispozici i
další vyžadované knihovny. Nicméně naprostou většinu funkcí volanou z&nbsp;Go
najdeme v&nbsp;balíčku <a
href="https://godoc.org/github.com/veandco/go-sdl2/sdl">github.com/veandco/go-sdl2/sdl</a>.</div></p>

<p>V&nbsp;distribucích založených na Debianích balíčcích se instalace spustí
velmi podobným způsobem (otestováno na Mintu):</p>

<pre>
$ <strong>apt-get install libsdl2{,-image,-mixer,-ttf,-gfx}-dev</strong>
</pre>

<p>Ve druhém kroku je nutné nainstalovat rozhraní mezi SDL2 a programovacím
jazykem Go představované balíčkem nazvaným příznačně <strong>go-sdl2</strong>.
Celý postup je v&nbsp;tomto případě zcela jednoduchý:</p>

<pre>
$ <strong>go get github.com/veandco/go-sdl2/sdl</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: pokud předchozí příklad selže, nejsou
pravděpodobně správně nastaveny cesty k&nbsp;vývojové verzi knihovny SDL2
nainstalované v&nbsp;předchozím kroku. Ovšem tuto skutečnost si otestujeme na
překladu a slinkování demonstračních příkladů naprogramovaných
v&nbsp;céčku.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Inicializace SDL, otevření okna a vyplnění plochy realizované v&nbsp;céčku</h2>

<p>Vlastnosti a možnosti nabízené knihovnou <i>SDL</i> si nejlépe ukážeme na
demonstračních příkladech. Všechny dnes uvedené demonstrační příklady &ndash;
ty psané v&nbsp;C i v&nbsp;Go &ndash; budou velmi jednoduché a současně budou
využívat jen základní grafické možnosti knihovny <i>SDL</i>, zatímco dalšími
možnostmi (zvuky, čtení stavů klávesnice a myši atd.) se budeme zabývat
v&nbsp;navazujících částech tohoto seriálu. První demonstrační příklad uvedený
v&nbsp;této kapitole je velmi jednoduchý a využívá pouze několik funkcí SDL
určené pro inicializaci okna, kreslicí plochy (surface), základní vykreslení a
uvolnění všech zdrojů &ndash; ukazuje tedy základní typy objektů, s&nbsp;nimiž
se v&nbsp;SDL dříve či později setkáme.</p>

<p>Inicializace knihovny SDL, resp.&nbsp;jejích vybraných subsystémů:</p>

<pre>
if (<strong>SDL_Init</strong>(SDL_INIT_VIDEO) &lt; 0) {
    puts("Error initializing SDL");
    puts(SDL_GetError());
    return 1;
} 
</pre>

<p>Vytvoření okna zadané velikosti (lze otevřít i <i>fullscreen</i> okno bez
okrajů):</p>

<pre>
window = <strong>SDL_CreateWindow</strong>("SDL2 example #1", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
&nbsp;
if (!window) {
    puts("Error creating window");
    puts(SDL_GetError());
    return 1;
}
</pre>

<p>Důležitý je koncept kreslicí plochy &ndash; surface. Tu lze získat i pro
existující otevřené okno. Jakmile je získána kreslicí plocha, můžeme ji či její
část vyplnit zadanou barvou a vynutit si překreslení obsahu okna:</p>

<pre>
primarySurface = <strong>SDL_GetWindowSurface</strong>(window);
&nbsp;
if (!primarySurface) {
    puts("Error getting surface");
    puts(SDL_GetError());
    return 1;
}
&nbsp;
<strong>SDL_FillRect</strong>(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
&nbsp;
<strong>SDL_UpdateWindowSurface</strong>(window);
</pre>

<p>Nakonec bychom neměli zapomenout na uvolnění všech prostředků (objektů) a
ukončení běhu knihovny SDL:</p>

<pre>
<strong>SDL_DestroyWindow</strong>(window);
&nbsp;
<strong>SDL_Quit</strong>();
</pre>

<p><div class="rs-tip-major">Poznámka: zcela korektní by bylo kontrolovat
návratové kódy i těchto dvou funkcí.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. První demonstrační příklad v&nbsp;jazyce C</h2>

<p>Úplný zdrojový kód prvního příkladu zapsaného v&nbsp;jazyce C může vypadat
následovně:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    SDL_Surface *primarySurface = NULL;
    SDL_Window  *window = NULL;
&nbsp;
    if (SDL_Init(SDL_INIT_VIDEO) &lt; 0) {
        puts("Error initializing SDL");
        puts(SDL_GetError());
        return 1;
    } 
&nbsp;
    window = SDL_CreateWindow("SDL2 example #1", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
&nbsp;
    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    primarySurface = SDL_GetWindowSurface(window);
&nbsp;
    if (!primarySurface) {
        puts("Error getting surface");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    SDL_FillRect(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
&nbsp;
    SDL_UpdateWindowSurface(window);
&nbsp;
    SDL_Delay(5000);
&nbsp;
    SDL_DestroyWindow(window);
&nbsp;
    SDL_Quit();
&nbsp;
    return 0;
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Přepis prvního příkladu do jazyka Go</h2>

<p>Nyní se můžeme pokusit přepsat tento demonstrační příklad do jazyka Go.
Kostra a základní myšlenka zůstane pochopitelně stejná, budou se jen lišit
jména funkcí, namísto některých funkcí použijeme metody a navíc s&nbsp;výhodou
využijeme konstrukci <strong>defer</strong>.</p>

<pre>
package <strong>main</strong>
&nbsp;
import "github.com/veandco/go-sdl2/sdl"
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("Example #1", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
        primarySurface.FillRect(nil, sdl.MapRGB(primarySurface.Format, 192, 255, 192))
        window.UpdateSurface()
&nbsp;
        sdl.Delay(5000)
}
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že jména funkcí jsou
zkrácena, protože na rozdíl od céčka nemusíme používat jediný jmenný prostor.
Datový typ <strong>surface</strong> je navíc objektem (s&nbsp;předepsaným
rozhraním), podobně i typ <strong>window</strong>. To znamená, že se
z&nbsp;některých funkcí staly metody a celý příklad se poměrně radikálním
způsobem zpřehlednil.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vykreslení rastrového obrázku funkcí typu <strong>blit</strong></h2>

<p>Ve druhém demonstračním příkladu se pokusíme o načtení rastrového obrázku
uloženého <a
href="https://www.root.cz/clanky/graficky-format-bmp-pouzivany-a-pritom-neoblibeny/">ve
formátu BMP</a>. Tento formát nebyl v&nbsp;žádném případě zvolen proto, že by
byl snadno zpracovatelný nebo dokonce úsporný, ale z&nbsp;toho prostého důvodu,
že jeho podpora je přímo součástí základní knihovny SDL/SDL2 bez nutnosti
používat <i>sdl-image</i>. Další formáty (PNG apod.) lze sice načítat také, ale
nepatrně složitějším způsobem. Vraťme se však k&nbsp;demonstračnímu příkladu.
Načtení obrázku v&nbsp;programovacím jazyce C a kontrola, zda se načtení
podařilo, se provede následujícím způsobem:</p>

<pre>
SDL_Surface *tempImage;
&nbsp;
tempImage = <strong>SDL_LoadBMP</strong>("test1.bmp");
&nbsp;
if (!tempImage) {
    puts("Error loading image");
    return 0;
}
</pre>

<p>Následně je vhodné (i když ne vždy nutné) obrázek zkonvertovat do takového
formátu, který je přímo zobrazitelný na obrazovce. K&nbsp;tomuto účelu se
používá funkce <strong>SDL_ConvertSurface</strong>, které se předá jak původní
kreslicí plocha (načtený obrázek), tak i požadovaný formát:</p>

<pre>
image = <strong>SDL_ConvertSurface</strong>(tempImage, primarySurface-&gt;format, 0);
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto konkrétním příkladu by se
mohlo zdát, že konverze není zapotřebí provádět (a budete mít pravdu), ale pro
operaci typu &bdquo;StretchBlit&ldquo; je nutné mít kompatibilní
obrázek.</div></p>

<p>Zkonvertovaný obrázek se zobrazí funkcí nazvanou
<strong>SDL_BlitSurface</strong>, které pro jednoduchost předáme pouze obrázek
a primární kreslicí plochu. Obrázek tedy bude umístěn do souřadnic (0,0):</p>

<pre>
<strong>SDL_BlitSurface</strong>(image, NULL, primarySurface, NULL);
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Druhý demonstrační příklad v&nbsp;jazyce C</h2>

<p>Úplný zdrojový kód takto navrženého druhého demonstračního příkladu vypadá
následovně:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
SDL_Window  *window;
SDL_Surface *primarySurface;
SDL_Surface *image;
&nbsp;
int <strong>load</strong>() {
    SDL_Surface *tempImage;
&nbsp;
    tempImage = SDL_LoadBMP("test1.bmp");
&nbsp;
    if (!tempImage) {
        puts("Error loading image");
        return 0;
    }
&nbsp;
    image = SDL_ConvertSurface(tempImage, primarySurface-&gt;format, 0);
&nbsp;
    SDL_FreeSurface(tempImage);
&nbsp;
    if (!image) {
        puts("Error converting surface");
        return 0;
    }
    return 1;
}
&nbsp;
int <strong>init</strong>() {
    if (SDL_Init(SDL_INIT_VIDEO ) &lt; 0) {
        puts("Error initializing SDL");
        return 0;
    } 
&nbsp;
    window = SDL_CreateWindow("SDL2 example #2", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
    if (!window) {
        puts("Error creating window");
        return 0;
    }
&nbsp;
    primarySurface = SDL_GetWindowSurface(window);
    if (!primarySurface) {
        puts("Error getting surface");
        return 0;
    }
    return 1;
}
&nbsp;
void <strong>destroy</strong>() {
    SDL_FreeSurface(image);
&nbsp;
    SDL_DestroyWindow(window);
    SDL_Quit();
}
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    if (!init()) {
        return 1;
    }
    if (!load()) {
        return 1;
    }
&nbsp;
    SDL_BlitSurface(image, NULL, primarySurface, NULL);
&nbsp;
    SDL_UpdateWindowSurface(window);
    SDL_Delay(5000);
&nbsp;
    destroy();
    return 0;
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Přepis druhého příkladu do jazyka Go</h2>

<p>Následuje přepis předchozího céčkového příkladu do Go. Opět zde můžeme vidět
určitá zjednodušení; například načtení rastrového obrázku je triviální:</p>

<pre>
surfaceImage, err := img.Load("test1.bmp")
if err != nil {
        panic(err)
}
defer surfaceImage.Free()
</pre>

<p>Výsledek:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/veandco/go-sdl2/img"
        "github.com/veandco/go-sdl2/sdl"
)
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("Example #2", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
&nbsp;
        surfaceImage, err := img.Load("test1.bmp")
        if err != nil {
                panic(err)
        }
        defer surfaceImage.Free()
&nbsp;
        primarySurface.FillRect(nil, sdl.MapRGB(primarySurface.Format, 192, 255, 192))
&nbsp;
        err = surfaceImage.Blit(nil, primarySurface, nil)
        if err != nil {
                panic(err)
        }
&nbsp;
        window.UpdateSurface()
&nbsp;
        sdl.Delay(5000)
}
</pre>

<p>Jak jsme si již řekli výše, je užitečnější a korektnější převést obrázek na
&bdquo;kompatibilní formát&ldquo;, což je provedeno v&nbsp;dalším zdrojovém
kódu, který mj.&nbsp;obsahuje:</p>

<pre>
convertedImage, err := surfaceImage.Convert(primarySurface.Format, 0)
if err != nil {
        panic(err)
}
defer convertedImage.Free()
</pre>

<p>Úplný zdrojový kód:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/veandco/go-sdl2/img"
        "github.com/veandco/go-sdl2/sdl"
)
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("Example #2", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
&nbsp;
        surfaceImage, err := img.Load("test1.bmp")
        if err != nil {
                panic(err)
        }
        defer surfaceImage.Free()
&nbsp;
        convertedImage, err := surfaceImage.Convert(primarySurface.Format, 0)
        if err != nil {
                panic(err)
        }
        defer convertedImage.Free()
&nbsp;
        primarySurface.FillRect(nil, sdl.MapRGB(convertedImage.Format, 192, 255, 192))
&nbsp;
        err = convertedImage.Blit(nil, primarySurface, nil)
        if err != nil {
                panic(err)
        }
&nbsp;
        window.UpdateSurface()
&nbsp;
        sdl.Delay(5000)
}
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že jsou příklady přepsané
do Go skutečně kratší a současně i přehlednější.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Třetí příklad &ndash; vykreslení obrázku se změnou jeho měřítka</h2>

<p>Ve třetím příkladu zobrazíme stejný obrázek, jako v&nbsp;příkladu
předchozím, ovšem s&nbsp;odlišným měřítkem. Pro tento účel se v&nbsp;céčku
používá funkce nazvaná <strong>SDL_BlitScaled</strong>, která ovšem pracuje
korektně jen za předpokladu, že je obrázek uložen ve formátu kompatibilním
s&nbsp;cílovou kreslicí plochou, tj.&nbsp;v&nbsp;našem případě s&nbsp;plochou
představující obrazovku. Rozměry a umístění obrázku jsou představovány datovou
strukturou <strong>Rect</strong> (obdélník):</p>

<pre>
dest.x = 160;
dest.y = 120;
dest.w = 250;
dest.h = 250;
&nbsp;
<strong>SDL_BlitScaled</strong>(image, NULL, primarySurface, &amp;dest);
</pre>

<p>Úplný zdrojový kód třetího příkladu v&nbsp;céčkové variantě:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
SDL_Window  *window;
SDL_Surface *primarySurface;
SDL_Surface *image;
&nbsp;
int <strong>load</strong>() {
    SDL_Surface *tempImage;
&nbsp;
    tempImage = SDL_LoadBMP("test1.bmp");
&nbsp;
    if (!tempImage) {
        puts("Error loading image");
        return 0;
    }
&nbsp;
    image = SDL_ConvertSurface(tempImage, primarySurface-&gt;format, 0);
&nbsp;
    SDL_FreeSurface(tempImage);
&nbsp;
    if (!image) {
        puts("Error converting surface");
        return 0;
    }
    return 1;
}
&nbsp;
int <strong>init</strong>() {
    if (SDL_Init(SDL_INIT_VIDEO ) &lt; 0) {
        puts("Error initializing SDL");
        return 0;
    } 
&nbsp;
    window = SDL_CreateWindow("SDL2 example #3", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN );
    if (!window) {
        puts("Error creating window");
        return 0;
    }
&nbsp;
    primarySurface = SDL_GetWindowSurface(window);
    if (!primarySurface) {
        puts("Error getting surface");
        return 0;
    }
    return 1;
}
&nbsp;
void <strong>destroy</strong>() {
    SDL_FreeSurface(image);
&nbsp;
    SDL_DestroyWindow(window);
    SDL_Quit();
}
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    SDL_Rect dest;
&nbsp;
    if (!init()) {
        return 1;
    }
    if (!load()) {
        return 1;
    }
&nbsp;
    SDL_FillRect(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
&nbsp;
    dest.x = 160;
    dest.y = 120;
    dest.w = 250;
    dest.h = 250;
    SDL_BlitScaled(image, NULL, primarySurface, &amp;dest);
&nbsp;
    SDL_UpdateWindowSurface(window);
    SDL_Delay(5000);
&nbsp;
    destroy();
    return 0;
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Přepis třetího příkladu do jazyka Go</h2>

<p>Přepis předchozího příkladu do idiomatického Go je relativně snadný a příliš
se neliší od obou příkladů předchozích:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/veandco/go-sdl2/img"
        "github.com/veandco/go-sdl2/sdl"
)
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("Example #3", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
&nbsp;
        surfaceImage, err := img.Load("test1.bmp")
        if err != nil {
                panic(err)
        }
        defer surfaceImage.Free()
&nbsp;
        convertedImage, err := surfaceImage.Convert(primarySurface.Format, 0)
        if err != nil {
                panic(err)
        }
        defer convertedImage.Free()
&nbsp;
        primarySurface.FillRect(nil, sdl.MapRGB(convertedImage.Format, 192, 255, 192))
&nbsp;
        var destRect sdl.Rect
        destRect.X = 160
        destRect.Y = 120
        destRect.W = 250
        destRect.H = 250
&nbsp;
        err = convertedImage.BlitScaled(nil, primarySurface, &amp;destRect)
        if err != nil {
                panic(err)
        }
&nbsp;
        window.UpdateSurface()
&nbsp;
        sdl.Delay(5000)
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Přesné umístění obrázku doprostřed okna</h2>

<p>Ve čtvrtém demonstračním příkladu se seznámíme s&nbsp;dalšími vlastnostmi
kreslicí plochy. Týká se to zejména informace o její šířce a výšce, která je
v&nbsp;jazyku C reprezentovaná položkami nazvanými <strong>h</strong> a
<strong>w</strong>. Vzhledem k&nbsp;tomu, že k&nbsp;ploše přistupujeme přes
ukazatel, bude se pro přístup k&nbsp;položkám datové struktury používat
opererátor -&gt;. Vycentrování obrázku na střed okna a současně jeho zmenšení
na polovinu zajistí následující úryvek kódu:</p>

<pre>
dest.x = primarySurface-&gt;w/2 - image-&gt;w/4;
dest.y = primarySurface-&gt;h/2 - image-&gt;h/4;
dest.w = image-&gt;w/2;
dest.h = image-&gt;h/2;
&nbsp;
printf("%d %d %d %d\n", dest.x, dest.y, dest.w, dest.h);
&nbsp;
SDL_BlitScaled(image, NULL, primarySurface, &amp;dest);
</pre>

<p>Opět pochopitelně následuje výpis úplného zdrojového kódu tohoto
příkladu:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
SDL_Window  *window;
SDL_Surface *primarySurface;
SDL_Surface *image;
&nbsp;
int <strong>load</strong>() {
    SDL_Surface *tempImage;
&nbsp;
    tempImage = SDL_LoadBMP("test1.bmp");
&nbsp;
    if (!tempImage) {
        puts("Error loading image");
        return 0;
    }
&nbsp;
    image = SDL_ConvertSurface(tempImage, primarySurface-&gt;format, 0);
&nbsp;
    SDL_FreeSurface(tempImage);
&nbsp;
    if (!image) {
        puts("Error converting surface");
        return 0;
    }
    return 1;
}
&nbsp;
int <strong>init</strong>() {
    if (SDL_Init(SDL_INIT_VIDEO ) &lt; 0) {
        puts("Error initializing SDL");
        return 0;
    } 
&nbsp;
    window = SDL_CreateWindow("SDL2 example #4", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
    if (!window) {
        puts("Error creating window");
        return 0;
    }
&nbsp;
    primarySurface = SDL_GetWindowSurface(window);
    if (!primarySurface) {
        puts("Error getting surface");
        return 0;
    }
    return 1;
}
&nbsp;
void <strong>destroy</strong>() {
    SDL_FreeSurface(image);
&nbsp;
    SDL_DestroyWindow(window);
    SDL_Quit();
}
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    SDL_Rect dest;
&nbsp;
    if (!init()) {
        return 1;
    }
    if (!load()) {
        return 1;
    }
&nbsp;
    SDL_FillRect(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
&nbsp;
    dest.x = primarySurface-&gt;w/2 - image-&gt;w/4;
    dest.y = primarySurface-&gt;h/2 - image-&gt;h/4;
    dest.w = image-&gt;w/2;
    dest.h = image-&gt;h/2;
    printf("%d %d %d %d\n", dest.x, dest.y, dest.w, dest.h);
    SDL_BlitScaled(image, NULL, primarySurface, &amp;dest);
&nbsp;
    SDL_UpdateWindowSurface(window);
    SDL_Delay(5000);
&nbsp;
    destroy();
    return 0;
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Přepis čtvrtého příkladu do jazyka Go</h2>

<p>Převod do idiomatického Go pravděpodobně není zapotřebí podrobně komentovat,
protože se jedná jen o variantu na třetí demonstrační příklad:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/veandco/go-sdl2/img"
        "github.com/veandco/go-sdl2/sdl"
)
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("Example #4", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
&nbsp;
        surfaceImage, err := img.Load("test1.bmp")
        if err != nil {
                panic(err)
        }
        defer surfaceImage.Free()
&nbsp;
        convertedImage, err := surfaceImage.Convert(primarySurface.Format, 0)
        if err != nil {
                panic(err)
        }
        defer convertedImage.Free()
&nbsp;
        primarySurface.FillRect(nil, sdl.MapRGB(convertedImage.Format, 192, 255, 192))
&nbsp;
        var destRect sdl.Rect
        destRect.X = primarySurface.W/2 - convertedImage.W/4
        destRect.Y = primarySurface.H/2 - convertedImage.H/4
        destRect.W = convertedImage.W / 2
        destRect.H = convertedImage.H / 2
&nbsp;
        err = convertedImage.BlitScaled(nil, primarySurface, &amp;destRect)
        if err != nil {
                panic(err)
        }
&nbsp;
        window.UpdateSurface()
&nbsp;
        sdl.Delay(5000)
}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Interaktivní prohlížeč fraktálů naprogramovaný v&nbsp;C</h2>

<p>Knihovnou SDL se budeme zabývat i příště, takže si již dopředu ukažme
relativně složitý zdrojový kód, v&nbsp;němž je realizován výpočet a vykreslení
fraktálů (mix mezi Mandelbrotovou a Juliovou množinou). V&nbsp;tomto příkladu
se používá přímý přístup do paměti kreslicí plochy, zpracování událostí (smyčka
událostí) atd. Podrobnosti si řekneme v&nbsp;navazujícím článku:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;
#include &lt;SDL2/SDL.h&gt;
&nbsp;
#define WIDTH 320
#define HEIGHT 240
&nbsp;
#define nil NULL
&nbsp;
#define MAX(a,b) ((a)&gt;(b) ? (a) : (b))
#define MIN(a,b) ((a)&lt;(b) ? (a) : (b))
&nbsp;
SDL_Surface *pixmap;
SDL_Surface *screen_surface = NULL;
SDL_Surface *bitmap_font_surface = NULL;
SDL_Window *window = NULL;
&nbsp;
double xpos = -0.75;
double ypos = 0.0;
double scale = 150.0;
double  uhel = 45.0;
&nbsp;
int <strong>gfx_initialize</strong>(int fullscreen, int width, int height, int bpp) {
    window = NULL;
    if (SDL_Init(SDL_INIT_VIDEO) &lt; 0) {
        fprintf(stderr, "Error initializing SDL: %s\n", SDL_GetError());
        return 1;
    } else {
        puts("SDL_Init ok");
    }
&nbsp;
    window = SDL_CreateWindow( "Example", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, width, height, SDL_WINDOW_SHOWN );
    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    } else {
        puts("SDL_CreateWindow ok");
    }
&nbsp;
    screen_surface = SDL_GetWindowSurface(window);
&nbsp;
    if (!screen_surface) {
        fprintf(stderr, "Error setting video mode: %s\n", SDL_GetError());
        return 1;
    } else {
        puts("SDL_GetWindowSurface ok");
    }
    return 0;
}
&nbsp;
void <strong>gfx_finalize</strong>(void) {
    SDL_FreeSurface(screen_surface);
    SDL_DestroyWindow(window);
}
&nbsp;
SDL_Surface* <strong>gfx_create_surface</strong>(int width, int height) {
    return SDL_CreateRGBSurface(SDL_SWSURFACE, width, height, 32, 0x00ff0000, 0x0000ff00, 0x000000ff, 0x00000000);
}
&nbsp;
void <strong>putpixel</strong>(SDL_Surface *surface, int x, int y, unsigned char r, unsigned char g, unsigned char b)
{
    if (x&gt;=0 &amp;&amp; x&lt; surface-&gt;w &amp;&amp; y&gt;=0 &amp;&amp; y &lt; surface-&gt;h) {
        if (surface-&gt;format-&gt;BitsPerPixel == 24) {
            Uint8 *pixel = (Uint8 *)surface-&gt;pixels;
            pixel += x*3;
            pixel += y*surface-&gt;pitch;
            *pixel++ = b;
            *pixel++ = g;
            *pixel   = r;
        }
        if (surface-&gt;format-&gt;BitsPerPixel == 32) {
            Uint8 *pixel = (Uint8 *)surface-&gt;pixels;
            pixel += x*4;
            pixel += y*surface-&gt;pitch;
            *pixel++ = b;
            *pixel++ = g;
            *pixel   = r;
        }
    }
}
&nbsp;
void <strong>hline</strong>(SDL_Surface *surface, int x1, int x2, int y, unsigned char r, unsigned char g, unsigned char b) {
    int x;
    int fromX = MIN(x1, x2);
    int toX = MAX(x1, x2);
    for (x = fromX; x &lt;= toX; x++) {
        putpixel(surface, x, y, r, g, b);
    }
}
&nbsp;
void <strong>vline</strong>(SDL_Surface *surface, int x,  int y1, int y2, unsigned char r, unsigned char g, unsigned char b) {
    int y;
    int fromY = MIN(y1, y2);
    int toY = MAX(y1, y2);
    for (y = fromY; y &lt;= toY; y++) {
        putpixel(surface, x, y, r, g, b);
    }
}
&nbsp;
static void <strong>show_fractal</strong>(SDL_Surface *surface) {
    SDL_BlitSurface(surface, NULL, screen_surface, NULL);
    SDL_UpdateWindowSurface(window);
}
&nbsp;
void <strong>calcCorner</strong>(double xpos, double ypos, double scale,
                double *xmin,  double *ymin,  double *xmax, double *ymax) {
    *xmin=xpos-WIDTH/scale;
    *ymin=ypos-HEIGHT/scale;
    *xmax=xpos+WIDTH/scale;
    *ymax=ypos+HEIGHT/scale;
}
&nbsp;
void <strong>draw_grid</strong>(SDL_Surface *surface) {
    int width = surface-&gt;w;
    int height = surface-&gt;h;
    int x, y;
    SDL_FillRect(surface, NULL, 0xffffffff);
&nbsp;
    for (x=0; x&lt;width; x+=20) {
        vline(surface, x, 0, height-1, 191, 191, 255);
    }
    for (y=0; y&lt;height; y+=20) {
        hline(surface, 0, width-1, y, 191, 191, 255);
    }
}
&nbsp;
void <strong>draw_mandeljulia</strong>(SDL_Surface *surface) {
    double  zx,zy,zx2,zy2,cx,cy;
    double  cosu,sinu,ccxc,ccyc;
    int     x,y,i;
    Uint8 *pixel = nil;
&nbsp;
    double ccx = 0.0;
    double ccy = 0.0;
&nbsp;
    double xmin, ymin, xmax, ymax;
    double u;
&nbsp;
    calcCorner(xpos, ypos, scale, &amp;xmin, &amp;ymin, &amp;xmax, &amp;ymax);
&nbsp;
    u=uhel*3.1415/180.0;
    cosu=cos(u);
    sinu=sin(u);
    ccxc=ccx*cosu;
    ccyc=ccy*cosu;
&nbsp;
    cy = ymin;
&nbsp;
    for (y=0;y&lt;240;y++) {
        cx=xmin;
        pixel = (Uint8 *)surface-&gt;pixels + (y + 128) * surface-&gt;pitch + 160*4;
        for (x=0;x&lt;320;x++) {
            i=0;
            zx=cx*cosu;
            zy=cy*cosu;
            do {
                zx2=zx*zx;
                zy2=zy*zy;
                zy=2.0*zx*zy+ccyc+cy*sinu;
                zx=zx2-zy2+ccxc+cx*sinu;
                i++;
            } while (i&lt;64 &amp;&amp; zx2+zy2&lt;4.0);
            {
                int r = i*2;
                int g = i*3;
                int b = i*5;
&nbsp;
                *pixel++ = r;
                *pixel++ = g;
                *pixel++ = b;
                pixel++;
            }
            cx += (xmax-xmin)/WIDTH;
        }
        cy += (ymax-ymin)/HEIGHT;
    }
}
&nbsp;
void <strong>redraw</strong>(SDL_Surface *pixmap) {
    draw_grid(pixmap);
    draw_mandeljulia(pixmap);
    show_fractal(pixmap);
}
&nbsp;
static void <strong>main_event_loop</strong>(void) {
    SDL_Event event;
    int done = 0;
    int left = 0, right = 0, up = 0, down = 0;
    int zoomin = 0, zoomout = 0;
    int perform_redraw;
    int angle_1 = 0, angle_2 = 0;
&nbsp;
    do {
        /*SDL_WaitEvent(&amp;event);*/
        while (SDL_PollEvent(&amp;event)) {
            switch (event.type) {
                case SDL_QUIT:
                    done = 1;
                    break;
                case SDL_KEYDOWN:
                    switch (event.key.keysym.sym) {
                        case SDLK_ESCAPE:
                        case SDLK_q:
                            done = 1;
                            break;
                        case SDLK_LEFT:
                            left = 1;
                            break;
                        case SDLK_RIGHT:
                            right = 1;
                            break;
                        case SDLK_UP:
                            up = 1;
                            break;
                        case SDLK_DOWN:
                            down = 1;
                            break;
                        case SDLK_PAGEDOWN:
                            zoomin = 1;
                            break;
                        case SDLK_PAGEUP:
                            zoomout = 1;
                            break;
                        case SDLK_z:
                            angle_1 = 1;
                            break;
                        case SDLK_x:
                            angle_2 = 1;
                            break;
                        default:
                            break;
                    }
                    break;
                case SDL_KEYUP:
                    switch (event.key.keysym.sym) {
                        case SDLK_LEFT:
                            left = 0;
                            break;
                        case SDLK_RIGHT:
                            right = 0;
                            break;
                        case SDLK_UP:
                            up = 0;
                            break;
                        case SDLK_DOWN:
                            down = 0;
                            break;
                        case SDLK_PAGEDOWN:
                            zoomin = 0;
                            break;
                        case SDLK_PAGEUP:
                            zoomout = 0;
                            break;
                        case SDLK_z:
                            angle_1 = 0;
                            break;
                        case SDLK_x:
                            angle_2 = 0;
                            break;
                        default:
                            break;
                    }
                default:
                    break;
            }
        }
        perform_redraw = 0;
        if (left) {
            xpos -= 10.0/scale;
            perform_redraw=1;
        }
        if (right) {
            xpos += 10.0/scale;
            perform_redraw=1;
        }
        if (up) {
            ypos -= 10.0/scale;
            perform_redraw=1;
        }
        if (down) {
            ypos += 10.0/scale;
            perform_redraw=1;
        }
        if (zoomin) {
            scale *= 0.9;
            perform_redraw=1;
        }
        if (zoomout) {
            scale *= 1.1;
            perform_redraw=1;
        }
        if (angle_1) {
            uhel--;
            perform_redraw=1;
        }
        if (angle_2) {
            uhel++;
            perform_redraw=1;
        }
        if (perform_redraw) {
            redraw(pixmap);
        }
    } while (!done);
}
&nbsp;
int <strong>main</strong>(int argc, char **argv) {
    if (gfx_initialize(0, 640, 480, 32)) {
        return 1;
    }
&nbsp;
    pixmap = gfx_create_surface(screen_surface-&gt;w, screen_surface-&gt;h);
&nbsp;
    draw_grid(pixmap);
    draw_mandeljulia(pixmap);
    show_fractal(pixmap);
    main_event_loop();
&nbsp;
    gfx_finalize();
    SDL_Quit();
    return 0;
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Interaktivní prohlížeč fraktálů naprogramovaný v&nbsp;Go</h2>

<p>Přepis předchozího příkladu do programovacího jazyka Go může vypadat
následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "math"
&nbsp;
        "github.com/veandco/go-sdl2/sdl"
)
&nbsp;
const (
        width  = 320
        height = 240
)
&nbsp;
var pixmap *sdl.Surface = nil
var primarySurface *sdl.Surface = nil
var window *sdl.Window = nil
&nbsp;
var xpos float64 = -0.75
var ypos float64 = 0.0
var scale float64 = 150.0
var uhel float64 = 45.0
&nbsp;
func <strong>min</strong>(a, b int32) int32 {
        if a &gt; b {
                return b
        }
        return a
}
&nbsp;
func <strong>max</strong>(a, b int32) int32 {
        if a &gt; b {
                return a
        }
        return b
}
&nbsp;
func <strong>gfxInitialize</strong>(width int32, height int32, bpp int) {
        err := sdl.Init(sdl.INIT_VIDEO)
        if err != nil {
                panic(err)
        }
&nbsp;
        window, err = sdl.CreateWindow("Fractals", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED, width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
&nbsp;
        primarySurface, err = window.GetSurface()
        if err != nil {
                panic(err)
        }
}
&nbsp;
func <strong>gfxFinalize</strong>() {
        primarySurface.Free()
        window.Destroy()
        sdl.Quit()
}
&nbsp;
func <strong>createSurface</strong>(width int32, height int32) *sdl.Surface {
        surface, err := sdl.CreateRGBSurface(sdl.SWSURFACE, width, height, 32, 0x00ff0000, 0x0000ff00, 0x000000ff, 0x00000000)
        if err != nil {
                panic(err)
        }
        return surface
}
&nbsp;
func <strong>putpixel</strong>(surface *sdl.Surface, x int32, y int32, r byte, g byte, b byte) {
        if x &gt;= 0 &amp;&amp; x &lt; surface.W &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; surface.H {
                switch surface.Format.BitsPerPixel {
                case 24:
                        index := x*3 + y*surface.Pitch
                        pixels := surface.Pixels()
                        pixels[index] = b
                        pixels[index+1] = g
                        pixels[index+2] = r
                case 32:
                        index := x*4 + y*surface.Pitch
                        pixels := surface.Pixels()
                        pixels[index] = b
                        pixels[index+1] = g
                        pixels[index+2] = r
                }
        }
}
&nbsp;
func <strong>hline</strong>(surface *sdl.Surface, x1 int32, x2 int32, y int32, r byte, g byte, b byte) {
        fromX := min(x1, x2)
        toX := max(x1, x2)
&nbsp;
        for x := fromX; x &lt;= toX; x++ {
                putpixel(surface, x, y, r, g, b)
        }
}
&nbsp;
func <strong>vline</strong>(surface *sdl.Surface, x int32, y1 int32, y2 int32, r byte, g byte, b byte) {
        fromY := min(y1, y2)
        toY := max(y1, y2)
&nbsp;
        for y := fromY; y &lt;= toY; y++ {
                putpixel(surface, x, y, r, g, b)
        }
}
&nbsp;
func <strong>drawGrid</strong>(surface *sdl.Surface) {
        width := surface.W
        height := surface.H
        var x, y int32
&nbsp;
        surface.FillRect(nil, 0xffffffff)
&nbsp;
        for x = 0; x &lt; width; x += 20 {
                vline(surface, x, 0, height-1, 191, 191, 255)
        }
&nbsp;
        for y = 0; y &lt; height; y += 20 {
                hline(surface, 0, width-1, y, 191, 191, 255)
        }
}
&nbsp;
func <strong>showFractal</strong>(surface *sdl.Surface) {
        err := surface.Blit(nil, primarySurface, nil)
        if err != nil {
                panic(err)
        }
        window.UpdateSurface()
}
&nbsp;
func <strong>calcCorner</strong>(xpos, ypos, scale float64) (xmin, ymin, xmax, ymax float64) {
        xmin = xpos - width/scale
        ymin = ypos - height/scale
        xmax = xpos + width/scale
        ymax = ypos + height/scale
        return
}
&nbsp;
func <strong>drawMandelJulia</strong>(surface *sdl.Surface) {
        ccx := 0.0
        ccy := 0.0
&nbsp;
        xmin, ymin, xmax, ymax := calcCorner(xpos, ypos, scale)
&nbsp;
        u := uhel * 3.1415 / 180.0
        cosu := math.Cos(u)
        sinu := math.Sin(u)
        ccxc := ccx * cosu
        ccyc := ccy * cosu
&nbsp;
        cy := ymin
        for y := 0; y &lt; height; y++ {
                cx := xmin
                for x := 0; x &lt; width; x++ {
                        i := 0
                        zx := cx * cosu
                        zy := cy * cosu
                        for {
                                zx2 := zx * zx
                                zy2 := zy * zy
                                zy = 2.0*zx*zy + ccyc + cy*sinu
                                zx = zx2 - zy2 + ccxc + cx*sinu
                                i++
                                if i &gt;= 64 || zx2+zy2 &gt;= 4.0 {
                                        break
                                }
                        }
                        b := i * 2
                        g := i * 3
                        r := i * 5
                        putpixel(surface, int32(x+width/2), int32(y+height/2), byte(r), byte(g), byte(b))
                        cx += (xmax - xmin) / width
                }
                cy += (ymax - ymin) / height
        }
}
&nbsp;
func <strong>redraw</strong>(pixmap *sdl.Surface) {
        drawGrid(pixmap)
        drawMandelJulia(pixmap)
        showFractal(pixmap)
}
&nbsp;
func <strong>mainEventLoop</strong>() {
        var event sdl.Event
        done := false
        left := false
        right := false
        up := false
        down := false
        zoomin := false
        zoomout := false
        angle1 := false
        angle2 := false
&nbsp;
        for !done {
                event = sdl.PollEvent()
                switch t := event.(type) {
                case *sdl.QuitEvent:
                        done = true
                case *sdl.KeyboardEvent:
                        keyCode := t.Keysym.Sym
                        if t.State == sdl.PRESSED {
                                switch keyCode {
                                case sdl.K_ESCAPE:
                                        done = true
                                case sdl.K_q:
                                        done = true
                                case sdl.K_LEFT:
                                        left = true
                                case sdl.K_RIGHT:
                                        right = true
                                case sdl.K_UP:
                                        up = true
                                case sdl.K_DOWN:
                                        down = true
                                case sdl.K_PAGEDOWN:
                                        zoomin = true
                                case sdl.K_PAGEUP:
                                        zoomout = true
                                case sdl.K_z:
                                        angle1 = true
                                case sdl.K_x:
                                        angle2 = true
                                }
                        }
                        if t.State == sdl.RELEASED {
                                switch keyCode {
                                case sdl.K_LEFT:
                                        left = false
                                case sdl.K_RIGHT:
                                        right = false
                                case sdl.K_UP:
                                        up = false
                                case sdl.K_DOWN:
                                        down = false
                                case sdl.K_PAGEDOWN:
                                        zoomin = false
                                case sdl.K_PAGEUP:
                                        zoomout = false
                                case sdl.K_z:
                                        angle1 = false
                                case sdl.K_x:
                                        angle2 = false
                                }
                        }
                }
                performRedraw := false
                if left {
                        xpos -= 10.0 / scale
                        performRedraw = true
                }
                if right {
                        xpos += 10.0 / scale
                        performRedraw = true
                }
                if up {
                        ypos -= 10.0 / scale
                        performRedraw = true
                }
                if down {
                        ypos += 10.0 / scale
                        performRedraw = true
                }
                if zoomin {
                        scale *= 0.9
                        performRedraw = true
                }
                if zoomout {
                        scale *= 1.1
                        performRedraw = true
                }
                if angle1 {
                        uhel--
                        performRedraw = true
                }
                if angle2 {
                        uhel++
                        performRedraw = true
                }
                if performRedraw {
                        redraw(pixmap)
                        sdl.Delay(20)
                }
        }
}
&nbsp;
func <strong>main</strong>() {
        gfxInitialize(640, 480, 32)
        defer gfxFinalize()
&nbsp;
        pixmap = createSurface(primarySurface.W, primarySurface.H)
        redraw(pixmap)
        mainEventLoop()
}
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>test1.c</td><td>inicializace SDL, otevření okna a vyplnění plochy realizované v&nbsp;céčku</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_61/c/test1.c">https://github.com/tisnik/go-root/blob/master/article_61/c/test1.c</a></td></tr>
<tr><td> 2</td><td>test1.go</td><td>inicializace SDL, otevření okna a vyplnění plochy realizované v&nbsp;Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_61/go/test1.go">https://github.com/tisnik/go-root/blob/master/article_61/go/test1.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>test2.c</td><td>vykreslení rastrového obrázku funkcí typu <strong>blit</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_61/c/test2.c">https://github.com/tisnik/go-root/blob/master/article_61/c/test2.c</a></td></tr>
<tr><td> 4</td><td>test2.go</td><td>vykreslení rastrového obrázku funkcí typu <strong>blit</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_61/go/test3.go">https://github.com/tisnik/go-root/blob/master/article_61/go/test3.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>test3.c</td><td>vykreslení obrázku se změnou jeho měřítka</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_61/c/test3.c">https://github.com/tisnik/go-root/blob/master/article_61/c/test3.c</a></td></tr>
<tr><td> 6</td><td>test3.go</td><td>vykreslení obrázku se změnou jeho měřítka</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_61/go/test3.go">https://github.com/tisnik/go-root/blob/master/article_61/go/test3.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>test4.c</td><td>přesné umístění obrázku doprostřed okna</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_61/c/test4.c">https://github.com/tisnik/go-root/blob/master/article_61/c/test4.c</a></td></tr>
<tr><td> 8</td><td>test4.go</td><td>přesné umístění obrázku doprostřed okna</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_61/go/test4.go">https://github.com/tisnik/go-root/blob/master/article_61/go/test4.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>fractals.c</td><td>interaktivní prohlížeč fraktálů naprogramovaný v&nbsp;C</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_61/c/fractals.c">https://github.com/tisnik/go-root/blob/master/article_61/c/fractals.c</a></td></tr>
<tr><td>10</td><td>fractals.go</td><td>interaktivní prohlížeč fraktálů naprogramovaný v&nbsp;Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_61/go/fractals.go">https://github.com/tisnik/go-root/blob/master/article_61/go/fractals.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránky projektu SDL<br />
<a href="http://www.libsdl.org/">http://www.libsdl.org/</a>
</li>

<li>Simple DirectMedia Layer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer">https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer</a>
</li>

<li>SDL Language Bindings<br />
<a href="http://www.libsdl.org/languages.php">http://www.libsdl.org/languages.php</a>
</li>

<li>SDL version 1.2.15<br />
<a
href="http://www.libsdl.org/download-1.2.php">http://www.libsdl.org/download-1.2.php</a>
</li>

<li>SDL version 2.0.1<br />
<a href="http://www.libsdl.org/download-2.0.php">http://www.libsdl.org/download-2.0.php</a>
</li>

<li>Rozhraní go-sdl2<br />
<a href="https://github.com/veandco/go-sdl2">https://github.com/veandco/go-sdl2</a>
</li>

<li>Dokumentace k&nbsp;rozhraní go-sdl2<br />
<a href="https://godoc.org/github.com/veandco/go-sdl2">https://godoc.org/github.com/veandco/go-sdl2</a>
</li>

<li>Dokumentace k&nbsp;balíčku sdl<br />
<a href="https://godoc.org/github.com/veandco/go-sdl2/sdl">https://godoc.org/github.com/veandco/go-sdl2/sdl</a>
</li>

<li>Dokumentace k&nbsp;balíčku gfx<br />
<a href="https://godoc.org/github.com/veandco/go-sdl2/gfx">https://godoc.org/github.com/veandco/go-sdl2/gfx</a>
</li>
<li>Cross-platform games development (part 1)<br />
<a href="http://renatoc.wait4.org/2010/02/04/cross-platform-games-development-part-1/">http://renatoc.wait4.org/2010/02/04/cross-platform-games-development-part-1/</a>
</li>

<li>Cross-platform games development (part 2)<br />
<a href="http://renatoc.wait4.org/tag/sdljava/">http://renatoc.wait4.org/tag/sdljava/</a>
</li>

<li>Go Data Structures: Binary Search Tree<br />
<a href="https://flaviocopes.com/golang-data-structure-binary-search-tree/">https://flaviocopes.com/golang-data-structure-binary-search-tree/</a>
</li>

<li>Gobs of data<br />
<a href="https://blog.golang.org/gobs-of-data">https://blog.golang.org/gobs-of-data</a>
</li>

<li>Formát BSON<br />
<a href="http://bsonspec.org/">http://bsonspec.org/</a>
</li>

<li>Golang Guide: A List of Top Golang Frameworks, IDEs &amp; Tools<br />
<a href="https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/">https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/</a>
</li>

<li>Tvorba univerzálních projevů<br />
<a href="http://www.kyblsoft.cz/projevy">http://www.kyblsoft.cz/projevy</a>
</li>

<li>Repositář projektu Gift<br />
<a href="https://github.com/disintegration/gift">https://github.com/disintegration/gift</a>
</li>

<li>Dokumentace k&nbsp;projektu Gift<br />
<a href="https://godoc.org/github.com/disintegration/gift">https://godoc.org/github.com/disintegration/gift</a>
</li>

<li>Online x86 / x64 Assembler and Disassembler<br />
<a href="https://defuse.ca/online-x86-assembler.htm#disassembly2">https://defuse.ca/online-x86-assembler.htm#disassembly2</a>
</li>

<li>The Design of the Go Assembler<br />
<a href="https://talks.golang.org/2016/asm.slide#1">https://talks.golang.org/2016/asm.slide#1</a>
</li>

<li>A Quick Guide to Go's Assembler<br />
<a href="https://golang.org/doc/asm">https://golang.org/doc/asm</a>
</li>

<li>AssemblyPolicy<br />
<a href="https://github.com/golang/go/wiki/AssemblyPolicy">https://github.com/golang/go/wiki/AssemblyPolicy</a>
</li>

<li>Geohash in Golang Assembly<br />
<a href="https://mmcloughlin.com/posts/geohash-assembly">https://mmcloughlin.com/posts/geohash-assembly</a>
</li>

<li>Command objdump<br />
<a href="https://golang.org/cmd/objdump/">https://golang.org/cmd/objdump/</a>
</li>

<li>Assembly<br />
<a href="https://goroutines.com/asm">https://goroutines.com/asm</a>
</li>

<li>Go &amp; Assembly<br />
<a href="http://www.doxsey.net/blog/go-and-assembly">http://www.doxsey.net/blog/go-and-assembly</a>
</li>

<li>A Foray Into Go Assembly Programming<br />
<a href="https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming/">https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming/</a>
</li>

<li>Golang Capturing log.Println And fmt.Println Output<br />
<a href="https://medium.com/@hau12a1/golang-capturing-log-println-and-fmt-println-output-770209c791b4">https://medium.com/@hau12a1/golang-capturing-log-println-and-fmt-println-output-770209c791b4</a>
</li>

<li>Stránka projektu plotly<br />
<a href="https://plot.ly/">https://plot.ly/</a>
</li>

<li>Plotly JavaScript Open Source Graphing Library<br />
<a href="https://plot.ly/javascript/">https://plot.ly/javascript/</a>
</li>

<li>Domain coloring<br />
<a href="https://en.wikipedia.org/wiki/Domain_coloring">https://en.wikipedia.org/wiki/Domain_coloring</a>
</li>

<li>Michael Fogleman's projects<br />
<a href="https://www.michaelfogleman.com/projects/tagged/graphics/">https://www.michaelfogleman.com/projects/tagged/graphics/</a>
</li>

<li>Color Graphs of Complex Functions<br />
<a href="https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html">https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html</a>
</li>

<li>A Gallery of Complex Functions<br />
<a href="http://wismuth.com/complex/gallery.html">http://wismuth.com/complex/gallery.html</a>
</li>

<li>package glot<br />
<a href="https://godoc.org/github.com/Arafatk/glot">https://godoc.org/github.com/Arafatk/glot</a>
</li>

<li>Gnuplotting: Output terminals<br />
<a href="http://www.gnuplotting.org/output-terminals/">http://www.gnuplotting.org/output-terminals/</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1">https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://blog.gopheracademy.com/advent-2018/introducing-glot/">https://blog.gopheracademy.com/advent-2018/introducing-glot/</a>
</li>

<li>Glot is a plotting library for Golang built on top of gnuplot<br />
<a href="https://github.com/Arafatk/glot">https://github.com/Arafatk/glot</a>
</li>

<li>Example plots (gonum/plot)<br />
<a href="https://github.com/gonum/plot/wiki/Example-plots">https://github.com/gonum/plot/wiki/Example-plots</a>
</li>

<li>A repository for plotting and visualizing data (gonum/plot)<br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>golang library to make https://chartjs.org/ plots<br />
<a href="https://github.com/brentp/go-chartjs">https://github.com/brentp/go-chartjs</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>The Gonum Numerical Computing Package<br />
<a href="https://www.gonum.org/post/introtogonum/">https://www.gonum.org/post/introtogonum/</a>
</li>

<li>Gomacro na GitHubu<br />
<a href="https://github.com/cosmos72/gomacro">https://github.com/cosmos72/gomacro</a>
</li>

<li>gophernotes - Use Go in Jupyter notebooks and nteract<br />
<a href="https://github.com/gopherdata/gophernotes">https://github.com/gopherdata/gophernotes</a>
</li>

<li>gonum<br />
<a href="https://github.com/gonum">https://github.com/gonum</a>
</li>

<li>go-gota/gota -  DataFrames and data wrangling in Go (Golang)<br />
<a href="https://porter.io/github.com/go-gota/gota">https://porter.io/github.com/go-gota/gota</a>
</li>

<li>A repository for plotting and visualizing data <br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>Gonum Numerical Packages<br />
<a href="https://www.gonum.org/">https://www.gonum.org/</a>
</li>

<li>Stránky projektu MinIO<br />
<a href="https://min.io/">https://min.io/</a>
</li>

<li>MinIO Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-quickstart-guide.html">https://docs.min.io/docs/minio-quickstart-guide.html</a>
</li>

<li>MinIO Go Client API Reference<br />
<a href="https://docs.min.io/docs/golang-client-api-reference">https://docs.min.io/docs/golang-client-api-reference</a>
</li>

<li>MinIO Python Client API Reference<br />
<a href="https://docs.min.io/docs/python-client-api-reference.html">https://docs.min.io/docs/python-client-api-reference.html</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>MinIO Client Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a>
</li>

<li>Analýza kvality zdrojových kódů Minia<br />
<a href="https://goreportcard.com/report/github.com/minio/minio">https://goreportcard.com/report/github.com/minio/minio</a>
</li>

<li>This is MinIO<br />
<a href="https://www.youtube.com/watch?v=vF0lQh0XOCs">https://www.youtube.com/watch?v=vF0lQh0XOCs</a>
</li>

<li>Running MinIO Standalone<br />
<a href="https://www.youtube.com/watch?v=dIQsPCHvHoM">https://www.youtube.com/watch?v=dIQsPCHvHoM</a>
</li>

<li>"Amazon S3 Compatible Storage in Kubernetes" - Rob Girard, Principal Tech Marketing Engineer, Minio<br />
<a href="https://www.youtube.com/watch?v=wlpn8K0jJ4U">https://www.youtube.com/watch?v=wlpn8K0jJ4U</a>
</li>

<li>Ginkgo<br />
<a href="http://onsi.github.io/ginkgo/">http://onsi.github.io/ginkgo/</a>
</li>

<li>Gomega<br />
<a href="https://onsi.github.io/gomega/">https://onsi.github.io/gomega/</a>
</li>

<li>Ginkgo's Preferred Matcher Library na GitHubu<br />
<a href="https://github.com/onsi/gomega/">https://github.com/onsi/gomega/</a>
</li>

<li>Provided Matchers<br />
<a href="http://onsi.github.io/gomega/#provided-matchers">http://onsi.github.io/gomega/#provided-matchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku goexpect<br />
<a href="https://godoc.org/github.com/google/goexpect">https://godoc.org/github.com/google/goexpect</a>
</li>

<li>Balíček goexpect<br />
<a href="https://github.com/google/goexpect">https://github.com/google/goexpect</a>
</li>

<li>Balíček go-expect<br />
<a href="https://github.com/Netflix/go-expect">https://github.com/Netflix/go-expect</a>
</li>

<li>Balíček gexpect<br />
<a href="https://github.com/ThomasRooney/gexpect">https://github.com/ThomasRooney/gexpect</a>
</li>

<li>Expect (originál naprogramovaný v&nbsp;TCL)<br />
<a href="https://core.tcl-lang.org/expect/index">https://core.tcl-lang.org/expect/index</a>
</li>

<li>Expect (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Expect">https://en.wikipedia.org/wiki/Expect</a>
</li>

<li>Pexpect<br />
<a href="https://pexpect.readthedocs.io/en/stable/">https://pexpect.readthedocs.io/en/stable/</a>
</li>

<li>Golang SSH Client: Multiple Commands, Crypto &amp; Goexpect Examples<br />
<a href="http://networkbit.ch/golang-ssh-client/">http://networkbit.ch/golang-ssh-client/</a>
</li>

<li>goblin na GitHubu<br />
<a href="https://github.com/franela/goblin">https://github.com/franela/goblin</a>
</li>

<li>Mocha framework<br />
<a href="https://mochajs.org/">https://mochajs.org/</a>
</li>

<li>frisby na GitHubu<br />
<a href="https://github.com/verdverm/frisby">https://github.com/verdverm/frisby</a>
</li>

<li>package frisby<br />
<a href="https://godoc.org/github.com/verdverm/frisby">https://godoc.org/github.com/verdverm/frisby</a>
</li>

<li>Frisby alternatives and similar packages (generováno)<br />
<a href="https://go.libhunt.com/frisby-alternatives">https://go.libhunt.com/frisby-alternatives</a>
</li>

<li>Cucumber for golang<br />
<a href="https://github.com/DATA-DOG/godog">https://github.com/DATA-DOG/godog</a>
</li>

<li>How to Use Godog for Behavior-driven Development in Go<br />
<a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go</a>
</li>

<li>Comparative Analysis Of GoLang Testing Frameworks<br />
<a href="https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks">https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks</a>
</li>

<li>A Quick Guide to Testing in Golang<br />
<a href="https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/">https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/</a>
</li>

<li>Tom's Obvious, Minimal Language.<br />
<a href="https://github.com/toml-lang/toml">https://github.com/toml-lang/toml</a>
</li>

<li>xml.org<br />
<a href="http://www.xml.org/">http://www.xml.org/</a>
</li>

<li>Soubory .properties<br />
<a href="https://en.wikipedia.org/wiki/.properties">https://en.wikipedia.org/wiki/.properties</a>
</li>

<li>Soubory INI<br />
<a href="https://en.wikipedia.org/wiki/INI_file">https://en.wikipedia.org/wiki/INI_file</a>
</li>

<li>JSON to YAML<br />
<a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a>
</li>

<li>Data Format Converter<br />
<a href="https://toolkit.site/format.html">https://toolkit.site/format.html</a>
</li>

<li>Viper na GitHubu<br />
<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>
</li>

<li>GoDotEnv na GitHubu<br />
<a href="https://github.com/joho/godotenv">https://github.com/joho/godotenv</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

