<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Generické datové typy v jazyce Go?</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Generické datové typy v jazyce Go?</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Programovací jazyk Go je některými vývojáři kritizován za to, že neobsahuje podporu pro generické datové typy, generické funkce ani metody. Dnes se seznámíme jak s použitím generických typů v jiných jazycích, tak i s projektem Genny, který tuto problematiku v Go alespoň částečně řeší.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Generické datové typy v&nbsp;jazyce Go?</a></p>
<p><a href="#k02">*** 2. Beztypové a jednoúčelové kontejnery</a></p>
<p><a href="#k03">*** 3. Statická genericita</a></p>
<p><a href="#k04">*** 4. Dynamická genericita</a></p>
<p><a href="#k05">*** 5. Programovací jazyk Go a generické datové typy</a></p>
<p><a href="#k06">*** 6. Type erasure v&nbsp;Javě</a></p>
<p><a href="#k07">*** 7. Generické typy v&nbsp;programovacím jazyku Rust</a></p>
<p><a href="#k08">*** 8. Generické funkce v&nbsp;Rustu</a></p>
<p><a href="#k09">*** 9. Generické funkce a silná typová kontrola v&nbsp;Rustu</a></p>
<p><a href="#k10">*** 10. Stav podpory generických datových typů v&nbsp;jazyce Go</a></p>
<p><a href="#k11">*** 11. Příklad omezení současné verze Go</a></p>
<p><a href="#k12">*** 12. Projekt Genny</a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Generické datové typy v&nbsp;jazyce Go?</h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Beztypové a jednoúčelové kontejnery</h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Statická genericita</h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. Dynamická genericita</h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. Použití generických datových typů v&nbsp;Javě</h2>

<pre>
import java.util.List;
import java.util.ArrayList;
import java.awt.Color;

public class Test1 {
    public static void main(String[] args) {
        List l = new ArrayList();
        l.add(new Object());
        l.add("foobar");
        l.add(42);
        l.add(Color.green);

        for (Object i : l) {
            System.out.println(i);
        }
    }
}
</pre>

<pre>
import java.util.List;
import java.util.ArrayList;
import java.awt.Color;

public class Test2 {
    public static void main(String[] args) {
        List l = new ArrayList();
        l.add("foo");
        l.add("bar");
        l.add("baz");

        String s = l.get(0);
        System.out.println(s.length());
    }
}
</pre>

<pre>
import java.util.List;
import java.util.ArrayList;
import java.awt.Color;

public class Test3 {
    public static void main(String[] args) {
        List l = new ArrayList();
        l.add("foo");
        l.add("bar");
        l.add("baz");

        String s = (String)l.get(0);
        System.out.println(s.length());
    }
}
</pre>

<pre>
import java.util.List;
import java.util.ArrayList;
import java.awt.Color;

public class Test4 {
    public static void main(String[] args) {
        List<String> l = new ArrayList<String>();
        l.add(new Object());
        l.add("foobar");
        l.add(42);
        l.add(Color.green);

        for (Object i : l) {
            System.out.println(i);
        }
    }
}
</pre>

<pre>
import java.util.List;
import java.util.ArrayList;
import java.awt.Color;

public class Test5 {
    public static void main(String[] args) {
        List<String> l = new ArrayList<String>();
        l.add("foo");
        l.add("bar");
        l.add("baz");
        l.add(Integer.toString(42));

        for (Object i : l) {
            System.out.println(i);
        }
    }
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Type erasure v&nbsp;Javě</h2>

<pre>
import java.util.Collection;
import java.util.ArrayList;
import java.awt.Color;

public class Test6 {
    public static void main(String[] args) {
        Collection<String> l1 = new ArrayList<String>();
        Collection<Integer> l2 = new ArrayList<Integer>();

        System.out.println(l1.getClass().getName());
        System.out.println(l2.getClass().getName());

        System.out.println(l1.getClass() == l2.getClass());
    }
}
</pre>

<p></p>

<pre>
java.util.ArrayList
java.util.ArrayList
true
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Generické typy v&nbsp;programovacím jazyku Rust</h2>

<p>Generické datové typy jsou podporovány i dalším konkurentem Go &ndash;
programovacím jazykem Rust. Ty mohou při správném použití zjednodušit tvorbu
znovupoužitelného programového kódu a současně zajistit silnou typovou kontrolu
při překladu. Podívejme se nejprve na motivační příklad, v&nbsp;němž prozatím
<strong>nejsou</strong> použity generické datové typy. Jedná se o implementaci
datového typu představujícího komplexní čísla. První verze vypadá takto &ndash;
Complex je zde pouhá datová struktura:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn main() {
    let c1 = Complex{real:10.0, imag:20.0};
    let c2 = Complex{real:10.1, imag:20.1};
    let c3 = Complex{real:10.2, imag:20.2};
    let c4 = Complex{real:1., imag:2.};
&nbsp;
    println!("{}+{}i", c1.real, c1.imag);
    println!("{}+{}i", c2.real, c2.imag);
    println!("{}+{}i", c3.real, c3.imag);
    println!("{}+{}i", c4.real, c4.imag);
}
</pre>

<p>V&nbsp;tomto zdrojovém kódu je deklarováno, že reálná a imaginární složka je
představována datovým typem <i>float/single</i>, což je překladačem striktně
hlídáno (a to mnohem silněji, než například v&nbsp;céčku, podobně silně, jako
je tomu v&nbsp;Go). Pokud se například pokusíme do reálné či imaginární složky
vložit celé číslo, dojde k&nbsp;chybě při překladu:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn main() {
    let c1 = Complex{real:10, imag:20};
    let c2 = Complex{real:10.1, imag:20.1};
    let c3 = Complex{real:10.2, imag:20.2};
    let c4 = Complex{real:1, imag:2};
&nbsp;
    println!("{}+{}i", c1.real, c1.imag);
    println!("{}+{}i", c2.real, c2.imag);
    println!("{}+{}i", c3.real, c3.imag);
    println!("{}+{}i", c4.real, c4.imag);
}
</pre>

<p>Při pokusu o překlad tohoto příkladu by se mělo vypsat následující chybové
hlášení, a to pro všechny výskyty hodnoty odlišného datového typu:</p>

<pre>
error[E0308]: mismatched types
 --&gt; test.rs:7:27
  |
7 |     let c1 = Complex{real:10, imag:20};
  |                           ^^ expected f32, found integral variable
  |
  = note: expected type `f32`
  = note:    found type `{integer}`
&nbsp;
error[E0308]: mismatched types
 --&gt; test.rs:7:36
  |
7 |     let c1 = Complex{real:10, imag:20};
  |                                    ^^ expected f32, found integral variable
  |
  = note: expected type `f32`
  = note:    found type `{integer}`
&nbsp;
error[E0308]: mismatched types
  --&gt; test.rs:10:27
   |
10 |     let c4 = Complex{real:1, imag:2};
   |                           ^ expected f32, found integral variable
   |
   = note: expected type `f32`
   = note:    found type `{integer}`
&nbsp;
error[E0308]: mismatched types
  --&gt; test.rs:10:35
   |
10 |     let c4 = Complex{real:1, imag:2};
   |                                   ^ expected f32, found integral variable
   |
   = note: expected type `f32`
   = note:    found type `{integer}`
&nbsp;
error: aborting due to 4 previous errors
</pre>

<p><div class="rs-tip-major">Poznámka: podle očekávání nebude překlad dokončen
ani ve chvíli, kdy se namísto typu <i>float/single</i> použijí konstanty
datového typu <i>double</i>.</div></p>

<p>Předchozí příklad sice fungoval korektně a podle předpokladů, ovšem jen ve
chvíli, kdy nám postačovalo použití komplexních čísel, jejichž složky byly
reprezentovány typem <i>float/single</i>. Ovšem je jen otázkou času, kdy nějaký
vývojář bude chtít použít podobný kód, ovšem například pro datový typ
<i>double</i>, pro typ &bdquo;zlomek&ldquo; atd. V&nbsp;takovém případě může
být nejvýhodnější deklaraci datové struktury upravit takovým způsobem, aby se
konkrétní typ složek komplexního čísla rozpoznal až v&nbsp;době překladu na
základě typů konkrétních hodnot či výrazů použitých pro konstrukci datové
struktury.</p>

<p><div class="rs-tip-major">Poznámka: pokud vám příklad s&nbsp;komplexními
čísly připadá příliš umělý, představte si místo něho například vektor nebo
matici a funkce pro jejich zpracování.</div></p>

<p>Programovací jazyk Rust tento přístup podporuje, protože umožňuje
následující styl deklarace (znak <strong>T</strong> není klíčovým slovem, ovšem
je v&nbsp;kontextu generických datových typů často používán, takže tento úzus
taktéž dodržíme):</p>

<pre>
struct Complex&lt;T&gt; {
    real: T,
    imag: T,
}
</pre>

<p>Tento zápis znamená, že se za <strong>T</strong> při překladu doplní
konkrétní rozpoznaný datový typ, což si můžeme snadno vyzkoušet:</p>

<pre>
fn main() {
    let c1 = Complex{real:10, imag:20};
    let c2 = Complex{real:10.1, imag:20.1};
    let c3 = Complex{real:10.2f64, imag:20.2f64};
    let c4 = Complex{real:true, imag:false};
&nbsp;
    println!("{}+{}i", c1.real, c1.imag);
    println!("{}+{}i", c2.real, c2.imag);
    println!("{}+{}i", c3.real, c3.imag);
    println!("{}+{}i", c4.real, c4.imag);
}
</pre>

<p>Ve chvíli, kdy se pokusíme o kombinaci různých typů, budeme na to upozorněni
překladačem, protože typ reálné i imaginární složky musí být totožný:</p>

<pre>
fn main() {
    let c1 = Complex{real:10, imag:true};

    println!("{}+{}i", c1.real, c1.imag);
}
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
error[E0308]: mismatched types
 --&gt; test.rs:7:36
  |
7 |     let c1 = Complex{real:10, imag:true};
  |                                    ^^^^ expected integral variable, found bool
  |
  = note: expected type `{integer}`
  = note:    found type `bool`

error: aborting due to previous error
</pre>

<p>Jinými slovy &ndash; typ datové struktury <strong>Complex</strong> je
parametrizovatelný, ovšem současně je stále zajištěna typová kontrola (nejedná
se tedy o nic ve smyslu Complex(Object, Object) :-).</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Generické funkce v&nbsp;Rustu</h2>

<p>V&nbsp;programovacím jazyku Rust je možné kromě deklarace generických
datových typů vytvářet i generické funkce, tj.&nbsp;funkce, u nichž lze
specifikovat parametrizovatelné typy argumentů i návratový typ. Podívejme se na
sice poněkud umělý, ale o to kratší demonstrační příklad. V&nbsp;tomto příkladu
nejprve deklarujeme výčtový typ a následně funkci, která akceptuje dva
parametry typu <strong>i32</strong> (celé číslo se znaménkem) a třetí parametr,
na základě jehož hodnoty funkce vrátí buď první či druhý parametr. Nejprve si
povšimněte, jak se používá výčtový typ (má vlastní jmenný prostor, proto se
zapisuje <strong>Item::First</strong> a nikoli pouze <strong>First</strong>).
Použití konstrukce <strong>match</strong> je v&nbsp;tomto případě idiomatické a
mnohem lepší, než pokus o použití <strong>if</strong>, a to z&nbsp;toho důvodu,
že překladač sám zkontroluje, zda v&nbsp;konstrukci <strong>match</strong>
reagujeme na všechny možné vstupy (což samozřejmě děláme :-):</p>

<pre>
enum Item {
    First,
    Second,
}
&nbsp;
fn select_item(first_item:i32, second_item:i32, item:Item) -&gt; i32 {
    match item {
        Item::First  =&gt; first_item,
        Item::Second =&gt; second_item,
    }
}
&nbsp;
fn main() {
    let x = 10;
    let y = 20;
    println!("1st item = {}", select_item(x, y, Item::First));
    println!("2nd item = {}", select_item(x, y, Item::Second));
    
}
</pre>

<p>Po překladu a spuštění by se na standardní výstup měly vypsat následující
dva řádky znamenající, že poprvé funkce <strong>select_item</strong> vybrala a
vrátila první argument (resp.&nbsp;zde jeho kopii!) a podruhé druhý
argument:</p>

<pre>
1st item = 10
2nd item = 20
</pre>

<p>Funkce <strong>select_item</strong> v&nbsp;podobě, v&nbsp;jaké jsme si ji
ukázali, není příliš použitelná, protože ji lze volat pouze s&nbsp;parametry
typu <strong>i32</strong>. Pokusme se tedy vytvořit podobnou funkci, ovšem
generickou. V&nbsp;tomto případě to znamená, že typy prvních dvou parametrů
musí být shodné a musí odpovídat návratovému typu funkce &ndash; ta totiž nemá
provádět žádné konverze, pouze vybírat mezi prvním a druhým argumentem. Takto
navržená generická funkce může vypadat následovně (povšimněte si především
zápisu &lt;T&gt; za jménem funkce):</p>

<pre>
fn select_item&lt;T&gt;(first_item:T, second_item:T, item:Item) -&gt; T {
    match item {
        Item::First  =&gt; first_item,
        Item::Second =&gt; second_item,
    }
}
</pre>

<p>Nově deklarovanou funkci je možné použít pro různé typy argumentů,
samozřejmě za předpokladu, že oba dva argumenty budou stejného typu:</p>

<pre>
enum Item {
    First,
    Second,
}
&nbsp;
fn select_item&lt;T&gt;(first_item:T, second_item:T, item:Item) -&gt; T {
    match item {
        Item::First  =&gt; first_item,
        Item::Second =&gt; second_item,
    }
}
&nbsp;
fn main() {
    let x = 10.1;
    let y = 20.2;
    println!("1st item = {}", select_item(x, y, Item::First));
    println!("2nd item = {}", select_item(x, y, Item::Second));
&nbsp;
    let z:i32 = 10;
    let w:i32 = 20;
    println!("1st item = {}", select_item(z, w, Item::First));
    println!("2nd item = {}", select_item(z, w, Item::Second));
&nbsp;
    let a = true;
    let b = false;
    println!("1st item = {}", select_item(a, b, Item::First));
    println!("2nd item = {}", select_item(a, b, Item::Second));
}
</pre>

<p>Po spuštění získáme následující řádky vypsané na standardní výstup:</p>

<pre>
1st item = 10.1
2nd item = 20.2
1st item = 10
2nd item = 20
1st item = true
2nd item = false
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Generické funkce a silná typová kontrola v&nbsp;Rustu</h2>

<p><a href="#k08">V&nbsp;předchozí kapitole</a> jsme si řekli, že překladač pro
novou podobu funkce <strong>select_item</strong> kontroluje, zda jsou typy
prvních dvou argumentů shodné. Pojďme si toto tvrzení ověřit: </p>

<pre>
enum Item {
    First,
    Second,
}
&nbsp;
fn select_item&lt;T&gt;(first_item:T, second_item:T, item:Item) -&gt; T {
    match item {
        Item::First  =&gt; first_item,
        Item::Second =&gt; second_item,
    }
}
&nbsp;
fn main() {
    let x = 10.1;
    let y = 20;
    println!("1st item = {}", select_item(x, y, Item::First));
    println!("2nd item = {}", select_item(x, y, Item::Second));
&nbsp;
    let z:f32 = 10;
    let w:i32 = 20;
    println!("1st item = {}", select_item(z, w, Item::First));
    println!("2nd item = {}", select_item(z, w, Item::Second));
&nbsp;
    let a = 10;
    let b = false;
    println!("1st item = {}", select_item(a, b, Item::First));
    println!("2nd item = {}", select_item(a, b, Item::Second));
}
</pre>

<p>Spusťme nyní překladač na tento zdrojový kód, aby bylo patrné, jak pracuje
statická typová kontrola (navíc je ukázána i kontrola typů proměnných a hodnot
přiřazovaných do proměnných, což je téma, kterému jsme se již věnovali):</p>

<pre>
error[E0308]: mismatched types
  --&gt; test.rs:16:46
   |
16 |     println!("1st item = {}", select_item(x, y, Item::First));
   |                                              ^ expected floating-point variable, found integral variable
&lt;std macros&gt;:2:27: 2:58 note: in this expansion of format_args!
&lt;std macros&gt;:3:1: 3:54 note: in this expansion of print! (defined in &lt;std macros&gt;)
test.rs:16:5: 16:63 note: in this expansion of println! (defined in &lt;std macros&gt;)
   |
   = note: expected type `{float}`
   = note:    found type `{integer}`
&nbsp;
error[E0308]: mismatched types
  --&gt; test.rs:17:46
   |
17 |     println!("2nd item = {}", select_item(x, y, Item::Second));
   |                                              ^ expected floating-point variable, found integral variable
&lt;std macros&gt;:2:27: 2:58 note: in this expansion of format_args!
&lt;std macros&gt;:3:1: 3:54 note: in this expansion of print! (defined in &lt;std macros&gt;)
test.rs:17:5: 17:64 note: in this expansion of println! (defined in &lt;std macros&gt;)
   |
   = note: expected type `{float}`
   = note:    found type `{integer}`
&nbsp;
error[E0308]: mismatched types
  --&gt; test.rs:19:17
   |
19 |     let z:f32 = 10;
   |                 ^^ expected f32, found integral variable
   |
   = note: expected type `f32`
   = note:    found type `{integer}`
&nbsp;
error[E0308]: mismatched types
  --&gt; test.rs:21:46
   |
21 |     println!("1st item = {}", select_item(z, w, Item::First));
   |                                              ^ expected f32, found i32
&lt;std macros&gt;:2:27: 2:58 note: in this expansion of format_args!
&lt;std macros&gt;:3:1: 3:54 note: in this expansion of print! (defined in &lt;std macros&gt;)
test.rs:21:5: 21:63 note: in this expansion of println! (defined in &lt;std macros&gt;)
&nbsp;
error[E0308]: mismatched types
  --&gt; test.rs:22:46
   |
22 |     println!("2nd item = {}", select_item(z, w, Item::Second));
   |                                              ^ expected f32, found i32
&lt;std macros&gt;:2:27: 2:58 note: in this expansion of format_args!
&lt;std macros&gt;:3:1: 3:54 note: in this expansion of print! (defined in &lt;std macros&gt;)
test.rs:22:5: 22:64 note: in this expansion of println! (defined in &lt;std macros&gt;)
&nbsp;
error[E0308]: mismatched types
  --&gt; test.rs:26:46
   |
26 |     println!("1st item = {}", select_item(a, b, Item::First));
   |                                              ^ expected integral variable, found bool
&lt;std macros&gt;:2:27: 2:58 note: in this expansion of format_args!
&lt;std macros&gt;:3:1: 3:54 note: in this expansion of print! (defined in &lt;std macros&gt;)
test.rs:26:5: 26:63 note: in this expansion of println! (defined in &lt;std macros&gt;)
   |
   = note: expected type `{integer}`
   = note:    found type `bool`
&nbsp;
error[E0308]: mismatched types
  --&gt; test.rs:27:46
   |
27 |     println!("2nd item = {}", select_item(a, b, Item::Second));
   |                                              ^ expected integral variable, found bool
&lt;std macros&gt;:2:27: 2:58 note: in this expansion of format_args!
&lt;std macros&gt;:3:1: 3:54 note: in this expansion of print! (defined in &lt;std macros&gt;)
test.rs:27:5: 27:64 note: in this expansion of println! (defined in &lt;std macros&gt;)
   |
   = note: expected type `{integer}`
   = note:    found type `bool`
&nbsp;
error: aborting due to 7 previous errors
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Stav podpory generických datových typů v&nbsp;jazyce Go</h2>

<p></p>

<pre>
func <strong>add</strong>(x int, y int) int {
    return x + y
}
</pre>

<pre>
func <strong>add</strong>(x float32, y float32) float32 {
    return x + y
}
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import "fmt"
&nbsp;
func <strong>add</strong>(x int, y int) int {
        return x + y
}
&nbsp;
func <strong>add</strong>(x float32, y float32) float32 {
        return x + y
}
&nbsp;
func <strong>main</strong>() {
        fmt.Println(add(1, 2))
        fmt.Println(add(1.1, 2.2))
}
</pre>

<pre>
$ <strong>go build add2.go </strong>
&nbsp;
# command-line-arguments
./add2.go:9:6: add redeclared in this block
        previous declaration at ./add2.go:5:24
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Příklad omezení současné verze Go</h2>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "gonum.org/v1/gonum/mat"
)
&nbsp;
func <strong>main</strong>() {
        v1 := mat.NewVecDense(5, nil)
        v2 := mat.NewVecDense(5, []float64{1, 0, 2, 0, 3})
&nbsp;
        fmt.Printf("dot(v1, v1): %f\n", mat.Dot(v1, v1))
        fmt.Printf("dot(v1, v2): %f\n", mat.Dot(v1, v2))
        fmt.Printf("dot(v2, v2): %f\n", mat.Dot(v2, v2))
        fmt.Printf("max(v2):     %f\n", mat.Max(v2))
        fmt.Printf("min(v2):     %f\n", mat.Min(v2))
        fmt.Printf("sum(v2):     %f\n", mat.Sum(v2))
}
</pre>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "gonum.org/v1/gonum/mat"
)
&nbsp;
func <strong>main</strong>() {
        d := mat.NewDiagDense(10, []float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})
        fmt.Printf("Value:\n%v\n\n", mat.Formatted(d))
&nbsp;
        d.SetDiag(1, 100)
        fmt.Printf("Value:\n%v\n\n", mat.Formatted(d))
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Projekt Genny</h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. Vygenerování kódu pro funkci pro součet dvou čísel projektem Genny</h2>

<pre>
package adder

import "github.com/cheekybits/genny/generic"

type NumberType generic.Number

func Add(x NumberType, y NumberType) NumberType {
        return x + y
}
</pre>

<pre>
package main

import "fmt"
import "add3/adder"

func main() {
        fmt.Println(adder.Add(1, 2))
        fmt.Println(adder.Add(1.1, 2.2))
}
</pre>

<pre>
// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package adder

func Add(x float32, y float32) float32 {
        return x + y
}

func Add(x float64, y float64) float64 {
        return x + y
}

func Add(x int, y int) int {
        return x + y
}

func Add(x int16, y int16) int16 {
        return x + y
}

func Add(x int32, y int32) int32 {
        return x + y
}

func Add(x int64, y int64) int64 {
        return x + y
}

func Add(x int8, y int8) int8 {
        return x + y
}

func Add(x uint, y uint) uint {
        return x + y
}

func Add(x uint16, y uint16) uint16 {
        return x + y
}

func Add(x uint32, y uint32) uint32 {
        return x + y
}

func Add(x uint64, y uint64) uint64 {
        return x + y
}

func Add(x uint8, y uint8) uint8 {
        return x + y
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Změna názvu funkce s&nbsp;generickým numerickým datovým typem</h2>

<pre>
package adder

import "github.com/cheekybits/genny/generic"

type NumberType generic.Number

func NumberTypeAdd(x NumberType, y NumberType) NumberType {
        return x + y
}
</pre>

<pre>
// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package adder

func Float32Add(x float32, y float32) float32 {
        return x + y
}

func Float64Add(x float64, y float64) float64 {
        return x + y
}

func IntAdd(x int, y int) int {
        return x + y
}

func Int16Add(x int16, y int16) int16 {
        return x + y
}

func Int32Add(x int32, y int32) int32 {
        return x + y
}

func Int64Add(x int64, y int64) int64 {
        return x + y
}

func Int8Add(x int8, y int8) int8 {
        return x + y
}

func UintAdd(x uint, y uint) uint {
        return x + y
}

func Uint16Add(x uint16, y uint16) uint16 {
        return x + y
}

func Uint32Add(x uint32, y uint32) uint32 {
        return x + y
}

func Uint64Add(x uint64, y uint64) uint64 {
        return x + y
}

func Uint8Add(x uint8, y uint8) uint8 {
        return x + y
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
package adder

import "github.com/cheekybits/genny/generic"

type NumberType generic.Number

func NumberTypeAdd(x NumberType, y NumberType) NumberType {
        return x + y
}
</pre>

<pre>
package main

import "fmt"
import "add5/adder"

func CheckNumberTypeAdd() {
        var x NumberType
        x = adder.NumberTypeAdd(1, 2)
        fmt.Println(x)
}
func main() {
        CheckNumberTypeAdd()
}
</pre>

<pre>
// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package adder

func Float32Add(x float32, y float32) float32 {
        return x + y
}

func Float64Add(x float64, y float64) float64 {
        return x + y
}

func IntAdd(x int, y int) int {
        return x + y
}

func Int16Add(x int16, y int16) int16 {
        return x + y
}

func Int32Add(x int32, y int32) int32 {
        return x + y
}

func Int64Add(x int64, y int64) int64 {
        return x + y
}

func Int8Add(x int8, y int8) int8 {
        return x + y
}

func UintAdd(x uint, y uint) uint {
        return x + y
}

func Uint16Add(x uint16, y uint16) uint16 {
        return x + y
}

func Uint32Add(x uint32, y uint32) uint32 {
        return x + y
}

func Uint64Add(x uint64, y uint64) uint64 {
        return x + y
}

func Uint8Add(x uint8, y uint8) uint8 {
        return x + y
}
</pre>

<pre>
// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package main

import (
        "add5/adder"
        "fmt"
)

func CheckFloat32Add() {
        var x float32
        x = adder.Float32Add(1, 2)
        fmt.Println(x)
}
func main() {
        CheckFloat32Add()
}

func CheckFloat64Add() {
        var x float64
        x = adder.Float64Add(1, 2)
        fmt.Println(x)
}
func main() {
        CheckFloat64Add()
}

func CheckIntAdd() {
        var x int
        x = adder.IntAdd(1, 2)
        fmt.Println(x)
}
func main() {
        CheckIntAdd()
}

func CheckInt16Add() {
        var x int16
        x = adder.Int16Add(1, 2)
        fmt.Println(x)
}
func main() {
        CheckInt16Add()
}

func CheckInt32Add() {
        var x int32
        x = adder.Int32Add(1, 2)
        fmt.Println(x)
}
func main() {
        CheckInt32Add()
}

func CheckInt64Add() {
        var x int64
        x = adder.Int64Add(1, 2)
        fmt.Println(x)
}
func main() {
        CheckInt64Add()
}

func CheckInt8Add() {
        var x int8
        x = adder.Int8Add(1, 2)
        fmt.Println(x)
}
func main() {
        CheckInt8Add()
}

func CheckUintAdd() {
        var x uint
        x = adder.UintAdd(1, 2)
        fmt.Println(x)
}
func main() {
        CheckUintAdd()
}

func CheckUint16Add() {
        var x uint16
        x = adder.Uint16Add(1, 2)
        fmt.Println(x)
}
func main() {
        CheckUint16Add()
}

func CheckUint32Add() {
        var x uint32
        x = adder.Uint32Add(1, 2)
        fmt.Println(x)
}
func main() {
        CheckUint32Add()
}

func CheckUint64Add() {
        var x uint64
        x = adder.Uint64Add(1, 2)
        fmt.Println(x)
}
func main() {
        CheckUint64Add()
}

func CheckUint8Add() {
        var x uint8
        x = adder.Uint8Add(1, 2)
        fmt.Println(x)
}
func main() {
        CheckUint8Add()
}
</pre>

<pre>
// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package main

import (
        "add5/adder"
        "fmt"
)

func CheckFloat32Add() {
        var x float32
        x = adder.Float32Add(1, 2)
        fmt.Println(x)
}

func CheckFloat64Add() {
        var x float64
        x = adder.Float64Add(1, 2)
        fmt.Println(x)
}

func CheckIntAdd() {
        var x int
        x = adder.IntAdd(1, 2)
        fmt.Println(x)
}

func CheckInt16Add() {
        var x int16
        x = adder.Int16Add(1, 2)
        fmt.Println(x)
}

func CheckInt32Add() {
        var x int32
        x = adder.Int32Add(1, 2)
        fmt.Println(x)
}

func CheckInt64Add() {
        var x int64
        x = adder.Int64Add(1, 2)
        fmt.Println(x)
}

func CheckInt8Add() {
        var x int8
        x = adder.Int8Add(1, 2)
        fmt.Println(x)
}

func CheckUintAdd() {
        var x uint
        x = adder.UintAdd(1, 2)
        fmt.Println(x)
}

func CheckUint16Add() {
        var x uint16
        x = adder.Uint16Add(1, 2)
        fmt.Println(x)
}

func CheckUint32Add() {
        var x uint32
        x = adder.Uint32Add(1, 2)
        fmt.Println(x)
}

func CheckUint64Add() {
        var x uint64
        x = adder.Uint64Add(1, 2)
        fmt.Println(x)
}

func CheckUint8Add() {
        var x uint8
        x = adder.Uint8Add(1, 2)
        fmt.Println(x)
}

func main() {
        CheckIntAdd()
        CheckInt8Add()
        CheckInt16Add()
        CheckInt32Add()
        CheckInt64Add()
        CheckUintAdd()
        CheckUint8Add()
        CheckUint16Add()
        CheckUint32Add()
        CheckUint64Add()
        CheckFloat32Add()
        CheckFloat64Add()
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Anonymní funkce v&nbsp;expandovaném kódu</h2>

<pre>
package math

import "github.com/cheekybits/genny/generic"

type ThisNumberType generic.Number

func ThisNumberTypeMax(fn func(a, b ThisNumberType) bool, a, b ThisNumberType) ThisNumberType {
        if fn(a, b) {
                return a
        }
        return b
}
</pre>

<pre>
// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package math

func Float32Max(fn func(a, b float32) bool, a, b float32) float32 {
        if fn(a, b) {
                return a
        }
        return b
}

func Float64Max(fn func(a, b float64) bool, a, b float64) float64 {
        if fn(a, b) {
                return a
        }
        return b
}

func IntMax(fn func(a, b int) bool, a, b int) int {
        if fn(a, b) {
                return a
        }
        return b
}

func Int16Max(fn func(a, b int16) bool, a, b int16) int16 {
        if fn(a, b) {
                return a
        }
        return b
}

func Int32Max(fn func(a, b int32) bool, a, b int32) int32 {
        if fn(a, b) {
                return a
        }
        return b
}

func Int64Max(fn func(a, b int64) bool, a, b int64) int64 {
        if fn(a, b) {
                return a
        }
        return b
}

func Int8Max(fn func(a, b int8) bool, a, b int8) int8 {
        if fn(a, b) {
                return a
        }
        return b
}

func UintMax(fn func(a, b uint) bool, a, b uint) uint {
        if fn(a, b) {
                return a
        }
        return b
}

func Uint16Max(fn func(a, b uint16) bool, a, b uint16) uint16 {
        if fn(a, b) {
                return a
        }
        return b
}

func Uint32Max(fn func(a, b uint32) bool, a, b uint32) uint32 {
        if fn(a, b) {
                return a
        }
        return b
}

func Uint64Max(fn func(a, b uint64) bool, a, b uint64) uint64 {
        if fn(a, b) {
                return a
        }
        return b
}

func Uint8Max(fn func(a, b uint8) bool, a, b uint8) uint8 {
        if fn(a, b) {
                return a
        }
        return b
}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně šest až sedm megabajtů), můžete namísto toho použít odkazy na
jednotlivé demonstrační příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_59/">https://github.com/tisnik/go-root/blob/master/article_59/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_59/">https://github.com/tisnik/go-root/blob/master/article_59/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_59/">https://github.com/tisnik/go-root/blob/master/article_59/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_59/">https://github.com/tisnik/go-root/blob/master/article_59/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_59/">https://github.com/tisnik/go-root/blob/master/article_59/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_59/">https://github.com/tisnik/go-root/blob/master/article_59/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_59/">https://github.com/tisnik/go-root/blob/master/article_59/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_59/">https://github.com/tisnik/go-root/blob/master/article_59/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_59/">https://github.com/tisnik/go-root/blob/master/article_59/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_59/">https://github.com/tisnik/go-root/blob/master/article_59/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Go Data Structures: Binary Search Tree<br />
<a href="https://flaviocopes.com/golang-data-structure-binary-search-tree/">https://flaviocopes.com/golang-data-structure-binary-search-tree/</a>
</li>

<li>Gobs of data<br />
<a href="https://blog.golang.org/gobs-of-data">https://blog.golang.org/gobs-of-data</a>
</li>

<li>Formát BSON<br />
<a href="http://bsonspec.org/">http://bsonspec.org/</a>
</li>

<li>Golang Guide: A List of Top Golang Frameworks, IDEs &amp; Tools<br />
<a href="https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/">https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/</a>
</li>

<li>Tvorba univerzálních projevů<br />
<a href="http://www.kyblsoft.cz/projevy">http://www.kyblsoft.cz/projevy</a>
</li>

<li>Repositář projektu Gift<br />
<a href="https://github.com/disintegration/gift">https://github.com/disintegration/gift</a>
</li>

<li>Dokumentace k&nbsp;projektu Gift<br />
<a href="https://godoc.org/github.com/disintegration/gift">https://godoc.org/github.com/disintegration/gift</a>
</li>

<li>Online x86 / x64 Assembler and Disassembler<br />
<a href="https://defuse.ca/online-x86-assembler.htm#disassembly2">https://defuse.ca/online-x86-assembler.htm#disassembly2</a>
</li>

<li>The Design of the Go Assembler<br />
<a href="https://talks.golang.org/2016/asm.slide#1">https://talks.golang.org/2016/asm.slide#1</a>
</li>

<li>A Quick Guide to Go's Assembler<br />
<a href="https://golang.org/doc/asm">https://golang.org/doc/asm</a>
</li>

<li>AssemblyPolicy<br />
<a href="https://github.com/golang/go/wiki/AssemblyPolicy">https://github.com/golang/go/wiki/AssemblyPolicy</a>
</li>

<li>Geohash in Golang Assembly<br />
<a href="https://mmcloughlin.com/posts/geohash-assembly">https://mmcloughlin.com/posts/geohash-assembly</a>
</li>

<li>Command objdump<br />
<a href="https://golang.org/cmd/objdump/">https://golang.org/cmd/objdump/</a>
</li>

<li>Assembly<br />
<a href="https://goroutines.com/asm">https://goroutines.com/asm</a>
</li>

<li>Go &amp; Assembly<br />
<a href="http://www.doxsey.net/blog/go-and-assembly">http://www.doxsey.net/blog/go-and-assembly</a>
</li>

<li>A Foray Into Go Assembly Programming<br />
<a href="https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming/">https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming/</a>
</li>

<li>Golang Capturing log.Println And fmt.Println Output<br />
<a href="https://medium.com/@hau12a1/golang-capturing-log-println-and-fmt-println-output-770209c791b4">https://medium.com/@hau12a1/golang-capturing-log-println-and-fmt-println-output-770209c791b4</a>
</li>

<li>Stránka projektu plotly<br />
<a href="https://plot.ly/">https://plot.ly/</a>
</li>

<li>Plotly JavaScript Open Source Graphing Library<br />
<a href="https://plot.ly/javascript/">https://plot.ly/javascript/</a>
</li>

<li>Domain coloring<br />
<a href="https://en.wikipedia.org/wiki/Domain_coloring">https://en.wikipedia.org/wiki/Domain_coloring</a>
</li>

<li>Michael Fogleman's projects<br />
<a href="https://www.michaelfogleman.com/projects/tagged/graphics/">https://www.michaelfogleman.com/projects/tagged/graphics/</a>
</li>

<li>Color Graphs of Complex Functions<br />
<a href="https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html">https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html</a>
</li>

<li>A Gallery of Complex Functions<br />
<a href="http://wismuth.com/complex/gallery.html">http://wismuth.com/complex/gallery.html</a>
</li>

<li>package glot<br />
<a href="https://godoc.org/github.com/Arafatk/glot">https://godoc.org/github.com/Arafatk/glot</a>
</li>

<li>Gnuplotting: Output terminals<br />
<a href="http://www.gnuplotting.org/output-terminals/">http://www.gnuplotting.org/output-terminals/</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1">https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://blog.gopheracademy.com/advent-2018/introducing-glot/">https://blog.gopheracademy.com/advent-2018/introducing-glot/</a>
</li>

<li>Glot is a plotting library for Golang built on top of gnuplot<br />
<a href="https://github.com/Arafatk/glot">https://github.com/Arafatk/glot</a>
</li>

<li>Example plots (gonum/plot)<br />
<a href="https://github.com/gonum/plot/wiki/Example-plots">https://github.com/gonum/plot/wiki/Example-plots</a>
</li>

<li>A repository for plotting and visualizing data (gonum/plot)<br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>golang library to make https://chartjs.org/ plots<br />
<a href="https://github.com/brentp/go-chartjs">https://github.com/brentp/go-chartjs</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>The Gonum Numerical Computing Package<br />
<a href="https://www.gonum.org/post/introtogonum/">https://www.gonum.org/post/introtogonum/</a>
</li>

<li>Gomacro na GitHubu<br />
<a href="https://github.com/cosmos72/gomacro">https://github.com/cosmos72/gomacro</a>
</li>

<li>gophernotes - Use Go in Jupyter notebooks and nteract<br />
<a href="https://github.com/gopherdata/gophernotes">https://github.com/gopherdata/gophernotes</a>
</li>

<li>gonum<br />
<a href="https://github.com/gonum">https://github.com/gonum</a>
</li>

<li>go-gota/gota -  DataFrames and data wrangling in Go (Golang)<br />
<a href="https://porter.io/github.com/go-gota/gota">https://porter.io/github.com/go-gota/gota</a>
</li>

<li>A repository for plotting and visualizing data <br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>Gonum Numerical Packages<br />
<a href="https://www.gonum.org/">https://www.gonum.org/</a>
</li>

<li>Stránky projektu MinIO<br />
<a href="https://min.io/">https://min.io/</a>
</li>

<li>MinIO Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-quickstart-guide.html">https://docs.min.io/docs/minio-quickstart-guide.html</a>
</li>

<li>MinIO Go Client API Reference<br />
<a href="https://docs.min.io/docs/golang-client-api-reference">https://docs.min.io/docs/golang-client-api-reference</a>
</li>

<li>MinIO Python Client API Reference<br />
<a href="https://docs.min.io/docs/python-client-api-reference.html">https://docs.min.io/docs/python-client-api-reference.html</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>MinIO Client Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a>
</li>

<li>Analýza kvality zdrojových kódů Minia<br />
<a href="https://goreportcard.com/report/github.com/minio/minio">https://goreportcard.com/report/github.com/minio/minio</a>
</li>

<li>This is MinIO<br />
<a href="https://www.youtube.com/watch?v=vF0lQh0XOCs">https://www.youtube.com/watch?v=vF0lQh0XOCs</a>
</li>

<li>Running MinIO Standalone<br />
<a href="https://www.youtube.com/watch?v=dIQsPCHvHoM">https://www.youtube.com/watch?v=dIQsPCHvHoM</a>
</li>

<li>"Amazon S3 Compatible Storage in Kubernetes" - Rob Girard, Principal Tech Marketing Engineer, Minio<br />
<a href="https://www.youtube.com/watch?v=wlpn8K0jJ4U">https://www.youtube.com/watch?v=wlpn8K0jJ4U</a>
</li>

<li>Ginkgo<br />
<a href="http://onsi.github.io/ginkgo/">http://onsi.github.io/ginkgo/</a>
</li>

<li>Gomega<br />
<a href="https://onsi.github.io/gomega/">https://onsi.github.io/gomega/</a>
</li>

<li>Ginkgo's Preferred Matcher Library na GitHubu<br />
<a href="https://github.com/onsi/gomega/">https://github.com/onsi/gomega/</a>
</li>

<li>Provided Matchers<br />
<a href="http://onsi.github.io/gomega/#provided-matchers">http://onsi.github.io/gomega/#provided-matchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku goexpect<br />
<a href="https://godoc.org/github.com/google/goexpect">https://godoc.org/github.com/google/goexpect</a>
</li>

<li>Balíček goexpect<br />
<a href="https://github.com/google/goexpect">https://github.com/google/goexpect</a>
</li>

<li>Balíček go-expect<br />
<a href="https://github.com/Netflix/go-expect">https://github.com/Netflix/go-expect</a>
</li>

<li>Balíček gexpect<br />
<a href="https://github.com/ThomasRooney/gexpect">https://github.com/ThomasRooney/gexpect</a>
</li>

<li>Expect (originál naprogramovaný v&nbsp;TCL)<br />
<a href="https://core.tcl-lang.org/expect/index">https://core.tcl-lang.org/expect/index</a>
</li>

<li>Expect (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Expect">https://en.wikipedia.org/wiki/Expect</a>
</li>

<li>Pexpect<br />
<a href="https://pexpect.readthedocs.io/en/stable/">https://pexpect.readthedocs.io/en/stable/</a>
</li>

<li>Golang SSH Client: Multiple Commands, Crypto &amp; Goexpect Examples<br />
<a href="http://networkbit.ch/golang-ssh-client/">http://networkbit.ch/golang-ssh-client/</a>
</li>

<li>goblin na GitHubu<br />
<a href="https://github.com/franela/goblin">https://github.com/franela/goblin</a>
</li>

<li>Mocha framework<br />
<a href="https://mochajs.org/">https://mochajs.org/</a>
</li>

<li>frisby na GitHubu<br />
<a href="https://github.com/verdverm/frisby">https://github.com/verdverm/frisby</a>
</li>

<li>package frisby<br />
<a href="https://godoc.org/github.com/verdverm/frisby">https://godoc.org/github.com/verdverm/frisby</a>
</li>

<li>Frisby alternatives and similar packages (generováno)<br />
<a href="https://go.libhunt.com/frisby-alternatives">https://go.libhunt.com/frisby-alternatives</a>
</li>

<li>Cucumber for golang<br />
<a href="https://github.com/DATA-DOG/godog">https://github.com/DATA-DOG/godog</a>
</li>

<li>How to Use Godog for Behavior-driven Development in Go<br />
<a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go</a>
</li>

<li>Comparative Analysis Of GoLang Testing Frameworks<br />
<a href="https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks">https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks</a>
</li>

<li>A Quick Guide to Testing in Golang<br />
<a href="https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/">https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/</a>
</li>

<li>Tom's Obvious, Minimal Language.<br />
<a href="https://github.com/toml-lang/toml">https://github.com/toml-lang/toml</a>
</li>

<li>xml.org<br />
<a href="http://www.xml.org/">http://www.xml.org/</a>
</li>

<li>Soubory .properties<br />
<a href="https://en.wikipedia.org/wiki/.properties">https://en.wikipedia.org/wiki/.properties</a>
</li>

<li>Soubory INI<br />
<a href="https://en.wikipedia.org/wiki/INI_file">https://en.wikipedia.org/wiki/INI_file</a>
</li>

<li>JSON to YAML<br />
<a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a>
</li>

<li>Data Format Converter<br />
<a href="https://toolkit.site/format.html">https://toolkit.site/format.html</a>
</li>

<li>Viper na GitHubu<br />
<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>
</li>

<li>GoDotEnv na GitHubu<br />
<a href="https://github.com/joho/godotenv">https://github.com/joho/godotenv</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

