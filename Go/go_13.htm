<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Vývoj síťových aplikací v programovacím jazyku Go (práce s JSONem a rastrovými obrázky)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Vývoj síťových aplikací v programovacím jazyku Go (práce s JSONem a rastrovými obrázky)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Při tvorbě webových služeb se v naprosté většině případů nevyhneme použití formátu JSON. Z tohoto důvodu si ukážeme, jak se s JSONem pracuje v programovacím jazyku Go. V závěru článku si vysvětlíme problematiku generování rastrových obrázků ve &bdquo;webových&ldquo; formátech.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Zpracování JSON formátu v&nbsp;programovacím jazyce Go</a></p>
<p><a href="#k02">*** 2. Převod celočíselných hodnot do JSONu</a></p>
<p><a href="#k03">*** 3. Chování systému při pokusu o převod hodnot, které nemají podporu v&nbsp;JSONu</a></p>
<p><a href="#k04">*** 4. Převod polí a řezů do JSONu</a></p>
<p><a href="#k05">*** 5. Struktury (záznamy) a jejich přímý převod do JSONu</a></p>
<p><a href="#k06">*** 6. Jedno z&nbsp;nejčastějších použití: mapy struktur (záznamů)</a></p>
<p><a href="#k07">*** 7. Složitější (vnořené) datové struktury, změna názvů klíčů ve výsledném JSONu</a></p>
<p><a href="#k08">*** 8. Export speciálních hodnot do JSONu</a></p>
<p><a href="#k09">*** 9. Import dat ve formátu JSON</a></p>
<p><a href="#k10">*** 10. Import jednoduché struktury (záznamu) se známým obsahem</a></p>
<p><a href="#k11">*** 11. Import polí z&nbsp;JSONu</a></p>
<p><a href="#k12">*** 12. Import map obsahujících struktury (záznamy)</a></p>
<p><a href="#k13">*** 13. Specifikace klíčů zapsaných v&nbsp;souborech JSON</a></p>
<p><a href="#k14">*** 14. Načtení předem neznámé struktury z&nbsp;JSONu</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. Práce s&nbsp;rastrovými obrázky</a></p>
<p><a href="#k17">*** 17. Export rastrového obrazu do PNG</a></p>
<p><a href="#k18">*** 18. Export rastrového obrazu do formátu JPEG</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Zpracování JSON formátu v&nbsp;programovacím jazyce Go</h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Převod celočíselných hodnot do JSONu</h2>

<p>Formát JSON umožňuje uložení a tím pádem i přenos jediné (nijak nepojmenované) hodnoty. Podporovány jsou přitom hodnoty, které můžeme zařadit do šesti kategorií (viz též <a href="http://json.org/value.gif">příslušná část syntaxe</a> formátu JSON):</p>


<p><div class="rs-tip-major">Poznámka: složitější strukturu lze získat snadno &ndash; atributy objektů (prvky asociativních polí) i prvky polí mohou obsahovat libovolné hodnoty, takže jsou plně podporovány rekurzivní struktury (pole objektů, pole polí atd.).</div></p>

<p>Pro převod libovolného typu (přesněji řečeno hodnoty libovolného typu) do JSONu se používá funkce nazvaná <strong>Marshal</strong>, kterou nalezneme v&nbsp;balíčku <strong>encoding/json</strong>:</p>

<pre>
func Marshal(v interface{}) ([]byte, error)
</pre>

<p>Povšimněte si, že tato funkce skutečně akceptuje hodnotu libovolného typu, protože prázdné rozhraní implementuje (automaticky!) každý datový typ. Návratovou hodnotou je sekvence bajtů (nikoli řetězec!) a popř.&nbsp;i struktura reprezentující chybový stav, pokud k&nbsp;chybě skutečně došlo. V&nbsp;opačném případě se ve druhé návratové hodnotě vrací <strong>nil</strong>, jak jsme ostatně zvyklí ze všech podobně koncipovaných funkcí.</p>

<p><div class="rs-tip-major">Poznámka: to, že funkci <strong>Marshal</strong> můžeme zavolat a předat jí libovolnou hodnotu ovšem v&nbsp;žádném případě neznamená, že převod bude skutečně proveden. Některé typy hodnot totiž nemají v&nbsp;JSONu svoji obdobu (je to například funkce nebo ukazatel). Podrobnosti budou vysvětleny v&nbsp;navazujících kapitolách.</div></p>

<p><div class="rs-tip-major">Poznámka<sup>2</sup>: jméno této metody odpovídá prováděné operaci, takzvanému <i>marshallingu</i>. Opačná operace, tj.&nbsp;převod dat z&nbsp;JSONu do datových struktur Go, se nazývá <i>unmarshalling</i>.</div></p>

<p>V&nbsp;dnešním prvním demonstračním příkladu, jehož zdrojový kód naleznete na adrese <a href="https://github.com/tisnik/go-fedora/blob/master/article_13/01_json_marshal_basic_signed_types.go">https://github.com/tisnik/go-fedora/blob/master/article_13/01_json_marshal_basic_signed_types.go</a> je ukázán způsob konverze celých čísel se znaménkem do formátu JSON. Připomeňme si, že v&nbsp;Go existuje několik celočíselných typů se znaménkem, přičemž některé typy jsou pouze jmennými aliasy:</p>

<table>
<tr><th>Označení</th><th>Rozsah hodnot</th><th>Stručný popis</th></tr>
<tr><td>int8 </td><td>-128 až 127</td><td>osmibitové celé číslo se znaménkem</td></tr>
<tr><td>int16</td><td>-32768 až 32767</td><td>16bitové celé číslo se znaménkem</td></tr>
<tr><td>int32</td><td>-2147483648 až 2147483647</td><td>32bitové celé číslo se znaménkem</td></tr>
<tr><td>int64</td><td>-9223372036854775808 až 9223372036854775807</td><td>64bitové celé číslo se znaménkem</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>int</td><td>různý</td><td>odpovídá buď typu int32 nebo int64</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>rune</td><td>-2147483648 až 2147483647</td><td>alias pro typ int32, používá se pro znaky</td></tr>
</table>

<p>Převod hodnot všech skupin celočíselných hodnot se znaménkem může být proveden následovně:</p>

<pre>
package main
&nbsp;
import (
        "encoding/json"
        "fmt"
)
&nbsp;
func <strong>main</strong>() {
        var a int8 = -10
        var b int16 = -1000
        var c int32 = -10000
        var d int32 = -1000000
&nbsp;
        var r1 rune = 'a'
        var r2 rune = '\x40'
        var r3 rune = '\n'
        var r4 rune = '\u03BB'
&nbsp;
        a_json, _ := json.Marshal(a)
        fmt.Println(string(a_json))
&nbsp;
        b_json, _ := json.Marshal(b)
        fmt.Println(string(b_json))
&nbsp;
        c_json, _ := json.Marshal(c)
        fmt.Println(string(c_json))
&nbsp;
        d_json, _ := json.Marshal(d)
        fmt.Println(string(d_json))
&nbsp;
        r1_json, _ := json.Marshal(r1)
        fmt.Println(string(r1_json))
&nbsp;
        r2_json, _ := json.Marshal(r2)
        fmt.Println(string(r2_json))
&nbsp;
        r3_json, _ := json.Marshal(r3)
        fmt.Println(string(r3_json))
&nbsp;
        r4_json, _ := json.Marshal(r4)
        fmt.Println(string(r4_json))
}
</pre>

<p><div class="rs-tip-major">Povšimněte si, že ignorujeme případný chybový stav, což si můžeme dovolit v&nbsp;těchto jednoduchých příkladech, ale v&nbsp;praxi je samozřejmě chyby nutné kontrolovat.</div></p>

<p>Po spuštění příkladu by se mělo zobrazit osm řádků, z&nbsp;nichž každý reprezentuje validní JSON:</p>

<pre>
-10
-1000
-10000
-1000000
97
64
10
955
</pre>

<p>Druhý demonstrační příklad, který najdete na adrese <a href="https://github.com/tisnik/go-fedora/blob/master/article_13/02_json_marshal_basic_unsigned_types.go">https://github.com/tisnik/go-fedora/blob/master/article_13/02_json_marshal_basic_unsigned_types.go</a>, provádí tytéž operace, ovšem nad celočíselnými hodnotami bez znaménka:</p>

<table>
<tr><th>Označení</th><th>Rozsah hodnot</th><th>Stručný popis</th></tr>
<tr><td>uint8 </td><td>0 až 255</td><td>osmibitové celé číslo bez znaménka</td></tr>
<tr><td>uint16</td><td>0 až 65535</td><td>16bitové celé číslo bez znaménka</td></tr>
<tr><td>uint32</td><td>0 až 4294967295</td><td>32bitové celé číslo bez znaménka</td></tr>
<tr><td>uint64</td><td>0 až 18446744073709551615</td><td>64bitové celé číslo bez znaménka</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>uint</td><td>různý</td><td>odpovídá buď typu uint32 nebo uint64</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>byte</td><td>0 až 255</td><td>alias pro typ uint8</td></tr>
</table>

<p>Zdrojový kód demonstračního příkladu:</p>

<pre>
package main
&nbsp;
import (
        "encoding/json"
        "fmt"
)
&nbsp;
func <strong>main</strong>() {
        var b8 byte = 0x42
&nbsp;
        var a uint8 = 10
        var b uint16 = 1000
        var c uint32 = 10000
        var d uint32 = 1000000
&nbsp;
        b8_json, _ := json.Marshal(b8)
        fmt.Println(string(b8_json))
&nbsp;
        a_json, _ := json.Marshal(a)
        fmt.Println(string(a_json))
&nbsp;
        b_json, _ := json.Marshal(b)
        fmt.Println(string(b_json))
&nbsp;
        c_json, _ := json.Marshal(c)
        fmt.Println(string(c_json))
&nbsp;
        d_json, _ := json.Marshal(d)
        fmt.Println(string(d_json))
}
</pre>

<p>Po spuštění tohoto příkladu získáme pět řádků &ndash; pět korektních JSONů:</p>

<pre>
66
10
1000
10000
1000000
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Chování systému při pokusu o převod hodnot, které nemají podporu v&nbsp;JSONu</h2>

<p>Hodnoty některých datových typů programovacího jazyka Go ovšem nemají v&nbsp;JSONu přímý ekvivalent a proto nejsou převoditelné. Týká se to například i datových typů <strong>complex64</strong> a <strong>complex128</strong>, kterými jsou v&nbsp;jazyku Go reprezentována komplexní čísla (dvojice hodnot typu <strong>float32</strong> popř.&nbsp;<strong>float64</strong>). Při pokusu o převod</p>

https://github.com/tisnik/go-fedora/blob/master/article_13/03_json_marshal_basic_complex_types.go

<pre>
package main
&nbsp;
import (
        "encoding/json"
        "fmt"
)
&nbsp;
func <strong>main</strong>() {
        var a complex64 = -1.5 + 0i
        var b complex64 = 1.5 + 1000i
        var c complex64 = 1e30 + 1e30i
        var d complex64 = 1i
&nbsp;
        a_json, _ := json.Marshal(a)
        fmt.Println(string(a_json))
&nbsp;
        b_json, _ := json.Marshal(b)
        fmt.Println(string(b_json))
&nbsp;
        c_json, _ := json.Marshal(c)
        fmt.Println(string(c_json))
&nbsp;
        d_json, _ := json.Marshal(d)
        fmt.Println(string(d_json))
}
</pre>

<p></p>

https://github.com/tisnik/go-fedora/blob/master/article_13/03B_json_marshal_basic_complex_types_err.go

<pre>
package main
&nbsp;
import (
        "encoding/json"
        "fmt"
)
&nbsp;
func <strong>main</strong>() {
        var a complex64 = -1.5 + 0i
        var b complex64 = 1.5 + 1000i
        var c complex64 = 1e30 + 1e30i
        var d complex64 = 1i
&nbsp;
        a_json, a_err := json.Marshal(a)
        fmt.Println(string(a_json))
        fmt.Println(a_err)
&nbsp;
        b_json, b_err := json.Marshal(b)
        fmt.Println(string(b_json))
        fmt.Println(b_err)
&nbsp;
        c_json, c_err := json.Marshal(c)
        fmt.Println(string(c_json))
        fmt.Println(c_err)
&nbsp;
        d_json, d_err := json.Marshal(d)
        fmt.Println(string(d_json))
        fmt.Println(d_err)
}
</pre>

<pre>
&nbsp;
json: unsupported type: complex64
&nbsp;
json: unsupported type: complex64
&nbsp;
json: unsupported type: complex64
&nbsp;
json: unsupported type: complex64
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Převod polí a řezů do JSONu</h2>

<p></p>

https://github.com/tisnik/go-fedora/blob/master/article_13/04_json_marshal_arrays.go

<pre>
package main
&nbsp;
import (
        "encoding/json"
        "fmt"
)
&nbsp;
func <strong>main</strong>() {
        var a1 [10]byte
        var a2 [10]int32
        a3 := [10]int32{1, 10, 2, 9, 3, 8, 4, 7, 5, 6}
        a4 := []string{"www", "root", "cz"}
        a5 := []interface{}{1, "root", 3.1415, true, []int{1, 2, 3, 4}}
&nbsp;
        a1_json, _ := json.Marshal(a1)
        fmt.Println(string(a1_json))
&nbsp;
        a2_json, _ := json.Marshal(a2)
        fmt.Println(string(a2_json))
&nbsp;
        a3_json, _ := json.Marshal(a3)
        fmt.Println(string(a3_json))
&nbsp;
        a4_json, _ := json.Marshal(a4)
        fmt.Println(string(a4_json))
&nbsp;
        a5_json, _ := json.Marshal(a5)
        fmt.Println(string(a5_json))
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Struktury (záznamy) a jejich přímý převod do JSONu</h2>

https://github.com/tisnik/go-fedora/blob/master/article_13/05_json_marshal_struct.go

<pre>
package main
&nbsp;
import (
        "encoding/json"
        "fmt"
)
&nbsp;
type <strong>User1</strong> struct {
        id      uint32
        name    string
        surname string
}
&nbsp;
type <strong>User2</strong> struct {
        Id      uint32
        Name    string
        Surname string
}
&nbsp;
func <strong>main</strong>() {
        user1 := User1{
                1,
                "Pepek",
                "Vyskoč"}
&nbsp;
        user2 := User2{
                1,
                "Pepek",
                "Vyskoč"}
&nbsp;
        user1_json, _ := json.Marshal(user1)
        fmt.Println(string(user1_json))
&nbsp;
        user2_json, _ := json.Marshal(user2)
        fmt.Println(string(user2_json))
}
</pre>

<p></p>

<pre>
package main
&nbsp;
import (
        "encoding/json"
        "fmt"
)
&nbsp;
type <strong>User</strong> struct {
        Id      uint32
        Name    string
        Surname string
}
&nbsp;
func <strong>main</strong>() {
        var users = [3]User{
                User{
                        Id:      1,
                        Name:    "Pepek",
                        Surname: "Vyskoč"},
                User{
                        Id:      2,
                        Name:    "Pepek",
                        Surname: "Vyskoč"},
                User{
                        Id:      3,
                        Name:    "Josef",
                        Surname: "Vyskočil"},
        }
&nbsp;
        users_json, _ := json.Marshal(users)
        fmt.Println(string(users_json))
}
</pre>

<pre>
package main
&nbsp;
import (
        "encoding/json"
        "fmt"
)
&nbsp;
type <strong>User</strong> struct {
        id      uint32
        name    string
        surname string
}
&nbsp;
func <strong>main</strong>() {
        var users = [3]User{
                User{
                        id:      1,
                        name:    "Pepek",
                        surname: "Vyskoč"},
                User{
                        id:      2,
                        name:    "Pepek",
                        surname: "Vyskoč"},
                User{
                        id:      3,
                        name:    "Josef",
                        surname: "Vyskočil"},
        }
&nbsp;
        users_json, _ := json.Marshal(users)
        fmt.Println(string(users_json))
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Jedno z&nbsp;nejčastějších použití: mapy struktur (záznamů)</h2>

<p></p>

<pre>
package main
&nbsp;
import (
        "encoding/json"
        "fmt"
)
&nbsp;
type <strong>User</strong> struct {
        Id      uint32
        Name    string
        Surname string
}
&nbsp;
func <strong>main</strong>() {
        m1 := make(map[string]User)
&nbsp;
        m1["user-id-1"] = User{
                Id:      1,
                Name:    "Pepek",
                Surname: "Vyskoč"}
&nbsp;
        m1["user-id-2"] = User{
                Id:      2,
                Name:    "Josef",
                Surname: "Vyskočil"}
&nbsp;
        m1_json, _ := json.Marshal(m1)
        fmt.Println(string(m1_json))
}
</pre>

<pre>
package main
&nbsp;
import (
        "encoding/json"
        "fmt"
)
&nbsp;
type <strong>Key</strong> struct {
        Id   uint32
        Role string
}
&nbsp;
type <strong>User</strong> struct {
        Id      uint32
        Name    string
        Surname string
}
&nbsp;
func <strong>main</strong>() {
        m1 := make(map[Key]User)
&nbsp;
        m1[Key{1, "admin"}] = User{
                Id:      1,
                Name:    "Pepek",
                Surname: "Vyskoč"}
&nbsp;
        m1[Key{2, "user"}] = User{
                Id:      2,
                Name:    "Josef",
                Surname: "Vyskočil"}
&nbsp;
        m1_json, _ := json.Marshal(m1)
        fmt.Println(string(m1_json))
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Složitější (vnořené) datové struktury, změna názvů klíčů ve výsledném JSONu</h2>

<p></p>

<pre>
package main
&nbsp;
import (
        "encoding/json"
        "fmt"
)
&nbsp;
type <strong>Identifiers</strong> struct {
        UID     uint32
        GID     uint32
}
&nbsp;
type <strong>User</strong> struct {
        Name    string
        Surname string
        Sign    []byte
        Enabled bool
        Ids     Identifiers
}
&nbsp;
func <strong>main</strong>() {
        mapOfUsers := make(map[string]User)
&nbsp;
        mapOfUsers["user-id-1"] = User{
                Ids:     Identifiers{1, 1},
                Name:    "Pepek",
                Surname: "Vyskoč",
                Enabled: true,
                Sign:    []byte{0,0,0,0}}
&nbsp;
        mapOfUsers["user-id-2"] = User{
                Ids:     Identifiers{2, 1},
                Name:    "Josef",
                Surname: "Vyskočil",
                Enabled: false,
                Sign:    []byte{42, 10, 0, 255}}
&nbsp;
        mapOfUsers["user-id-3"] = User{
                Ids:     Identifiers{3, 1},
                Name:    "Varel",
                Surname: "Frištenský"}
&nbsp;
        mapOfUsers_json, _ := json.Marshal(mapOfUsers)
        fmt.Println(string(mapOfUsers_json))
}
</pre>

<pre>
package main

import (
        "encoding/json"
        "fmt"
)

type <strong>Identifiers</strong> struct {
        UID uint32 `json:"user-id"`
        GID uint32 `json:"group-id"`
}

type <strong>User</strong> struct {
        Name    string `json:"user-name"`
        Surname string `json:"user-surname"`
        Sign    []byte
        Enabled bool `json:"user-login-enabled"`
        Ids     Identifiers
}

func <strong>main</strong>() {
        mapOfUsers := make(map[string]User)

        mapOfUsers["user-id-1"] = User{
                Ids:     Identifiers{1, 1},
                Name:    "Pepek",
                Surname: "Vyskoč",
                Enabled: true,
                Sign:    []byte{0, 0, 0, 0}}

        mapOfUsers["user-id-2"] = User{
                Ids:     Identifiers{2, 1},
                Name:    "Josef",
                Surname: "Vyskočil",
                Enabled: false,
                Sign:    []byte{42, 10, 0, 255}}

        mapOfUsers["user-id-3"] = User{
                Ids:     Identifiers{3, 1},
                Name:    "Varel",
                Surname: "Frištenský"}

        mapOfUsers_json, _ := json.Marshal(mapOfUsers)
        fmt.Println(string(mapOfUsers_json))
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Export speciálních hodnot do JSONu</h2>

<p></p>

<pre>
package main
&nbsp;
import (
        "encoding/json"
        "fmt"
)
&nbsp;
func <strong>main</strong>() {
        v1 := ""
        v2 := false
        v3 := true
        var v4 *int
&nbsp;
        var slice1 []int
        slice2 := []int{}
&nbsp;
        var map1 map[string]string
        map2 := make(map[string]string)
        map3 := map[string]string{}
&nbsp;
        // https://speakerdeck.com/campoy/understanding-nil
        var iface interface{} = nil
&nbsp;
        v1_json, _ := json.Marshal(v1)
        fmt.Println(string(v1_json))
&nbsp;
        v2_json, _ := json.Marshal(v2)
        fmt.Println(string(v2_json))
&nbsp;
        v3_json, _ := json.Marshal(v3)
        fmt.Println(string(v3_json))
&nbsp;
        v4_json, _ := json.Marshal(v4)
        fmt.Println(string(v4_json))
&nbsp;
        slice1_json, _ := json.Marshal(slice1)
        fmt.Println(string(slice1_json))
&nbsp;
        slice2_json, _ := json.Marshal(slice2)
        fmt.Println(string(slice2_json))
&nbsp;
        map1_json, _ := json.Marshal(map1)
        fmt.Println(string(map1_json))
&nbsp;
        map2_json, _ := json.Marshal(map2)
        fmt.Println(string(map2_json))
&nbsp;
        map3_json, _ := json.Marshal(map3)
        fmt.Println(string(map3_json))
&nbsp;
        iface_json, _ := json.Marshal(iface)
        fmt.Println(string(iface_json))
&nbsp;
        var f = func() {}
        f_json, _ := json.Marshal(f)
        fmt.Println(string(f_json))
}
</pre>

<p></p>

<table>
<tr><th>Hodnota</th><th>Zápis</th><th>Výsledek v&nbsp;JSONu</th></tr>
<tr><td></td><td></td><td>""</td></tr>
<tr><td></td><td></td><td>false</td></tr>
<tr><td></td><td></td><td>true</td></tr>
<tr><td></td><td></td><td>null</td></tr>
<tr><td></td><td></td><td>null</td></tr>
<tr><td></td><td></td><td>[]</td></tr>
<tr><td></td><td></td><td>null</td></tr>
<tr><td></td><td></td><td>{}</td></tr>
<tr><td></td><td></td><td>{}</td></tr>
<tr><td></td><td></td><td>null</td></tr>
<tr><td></td><td></td><td>&times;</td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Import dat ve formátu JSON</h2>

<p></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Import jednoduché struktury (záznamu) se známým obsahem</h2>

<p></p>

<pre>
package main

import (
        "encoding/json"
        "fmt"
)

type <strong>User</strong> struct {
        Id      uint32
        Name    string
        Surname string
}

func <strong>main</strong>() {
        input_json := `{
    "Id":1,
    "Name":"Pepek",
    "Surname":"Vyskoč"
}`
        fmt.Println("Input:")
        fmt.Println(input_json)

        bytes := []byte(input_json)
        var user User
        json.Unmarshal(bytes, &amp;user)

        fmt.Println("\nOutput:")
        fmt.Println(user)

        fmt.Println("\nFields:")
        fmt.Printf("ID:      %d\n", user.Id)
        fmt.Printf("Name:    %s\n", user.Name)
        fmt.Printf("Surname: %s\n", user.Surname)
}
</pre>

<pre>
package main

import (
        "encoding/json"
        "fmt"
        "io/ioutil"
        "log"
)

type <strong>User</strong> struct {
        Id      uint32
        Name    string
        Surname string
}

func <strong>main</strong>() {
        input_json_as_bytes, err := ioutil.ReadFile("user.json")
        if err != nil {
                log.Fatal(err)
        }
        fmt.Println("Input (bytes):")
        fmt.Println(input_json_as_bytes)

        fmt.Println("\nInput (string):")
        fmt.Println(string(input_json_as_bytes))

        var user User
        json.Unmarshal(input_json_as_bytes, &user)

        fmt.Println("\nOutput:")
        fmt.Println(user)

        fmt.Println("\nFields:")
        fmt.Printf("ID:      %d\n", user.Id)
        fmt.Printf("Name:    %s\n", user.Name)
        fmt.Printf("Surname: %s\n", user.Surname)
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Import polí z&nbsp;JSONu</h2>

<p></p>

<pre>
package main

import (
        "encoding/json"
        "fmt"
        "io/ioutil"
        "log"
)

func <strong>main</strong>() {
        input_json_as_bytes, err := ioutil.ReadFile("numbers.json")
        if err != nil {
                log.Fatal(err)
        }
        fmt.Println("Input (bytes):")
        fmt.Println(input_json_as_bytes)

        fmt.Println("\nInput (string):")
        fmt.Println(string(input_json_as_bytes))

        var numbers []int
        json.Unmarshal(input_json_as_bytes, &numbers)

        fmt.Println("\nOutput:")
        fmt.Println(numbers)

        fmt.Println("\nItems:")
        for i, item := range numbers {
                fmt.Printf("%d\t%d\n", i, item)
        }
}
</pre>

<pre>
package main

import (
        "encoding/json"
        "fmt"
        "io/ioutil"
        "log"
)

type <strong>User</strong> struct {
        Id      uint32
        Name    string
        Surname string
}

func <strong>main</strong>() {
        input_json_as_bytes, err := ioutil.ReadFile("users.json")
        if err != nil {
                log.Fatal(err)
        }
        fmt.Println("Input (bytes):")
        fmt.Println(input_json_as_bytes)

        fmt.Println("\nInput (string):")
        fmt.Println(string(input_json_as_bytes))

        var users []User
        json.Unmarshal(input_json_as_bytes, &users)

        fmt.Println("\nOutput:")
        fmt.Println(users)

        fmt.Println("\nUsers:")
        for i, user := range users {
                fmt.Printf("%d\t%d\t%s\t%s\n", i, user.Id, user.Name, user.Surname)
        }
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Import map obsahujících struktury (záznamy)</h2>

<p></p>

<pre>
package main

import (
        "encoding/json"
        "fmt"
        "io/ioutil"
        "log"
)

type <strong>User</strong> struct {
        Id      uint32
        Name    string
        Surname string
}

func <strong>main</strong>() {
        input_json_as_bytes, err := ioutil.ReadFile("users_map.json")
        if err != nil {
                log.Fatal(err)
        }
        fmt.Println("Input (bytes):")
        fmt.Println(input_json_as_bytes)

        fmt.Println("\nInput (string):")
        fmt.Println(string(input_json_as_bytes))

        m1 := map[string]User{}
        json.Unmarshal(input_json_as_bytes, &m1)

        fmt.Println("\nOutput:")
        fmt.Println(m1)

        fmt.Println("\nUsers:")
        for key, user := range m1 {
                fmt.Printf("%s\t%d\t%s\t%s\n", key, user.Id, user.Name, user.Surname)
        }
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Specifikace klíčů zapsaných v&nbsp;souborech JSON</h2>

<p></p>

<pre>
package main

import (
        "encoding/json"
        "fmt"
        "io/ioutil"
        "log"
)

type <strong>User</strong> struct {
        Id      uint32 `json:"user-id"`
        Name    string `json:"user-name"`
        Surname string
}

func <strong>main</strong>() {
        input_json_as_bytes, err := ioutil.ReadFile("users_map_different_keys.json")
        if err != nil {
                log.Fatal(err)
        }
        fmt.Println("Input (bytes):")
        fmt.Println(input_json_as_bytes)

        fmt.Println("\nInput (string):")
        fmt.Println(string(input_json_as_bytes))

        m1 := map[string]User{}
        json.Unmarshal(input_json_as_bytes, &m1)

        fmt.Println("\nOutput:")
        fmt.Println(m1)

        fmt.Println("\nUsers:")
        for key, user := range m1 {
                fmt.Printf("%s\t%d\t%s\t%s\n", key, user.Id, user.Name, user.Surname)
        }
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Načtení předem neznámé struktury z&nbsp;JSONu</h2>

<p></p>

<pre>
package main

import (
        "encoding/json"
        "fmt"
        "io/ioutil"
        "log"
)

func <strong>main</strong>() {
        input_json_as_bytes, err := ioutil.ReadFile("users_map_different_keys.json")
        if err != nil {
                log.Fatal(err)
        }
        fmt.Println("Input (bytes):")
        fmt.Println(input_json_as_bytes)

        fmt.Println("\nInput (string):")
        fmt.Println(string(input_json_as_bytes))

        m1 := map[string]interface{}{}
        json.Unmarshal(input_json_as_bytes, &m1)

        fmt.Println("\nOutput:")
        fmt.Println(m1)

        fmt.Println("\nUsers:")
        for key, user := range m1 {
                fmt.Printf("%s\t%s\n", key, user)
        }
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Práce s&nbsp;rastrovými obrázky</h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Export rastrového obrazu do PNG</h2>

<p></p>

<pre>
package main
&nbsp;
import (
        "image"
        "image/color"
        "image/png"
        "os"
)
&nbsp;
const width = 256
const height = 256
&nbsp;
func <strong>main</strong>() {
        img := image.NewRGBA(image.Rect(0, 0, width, height))
        for x := 0; x &lt; width; x++ {
                for y := 0; y &lt; height; y++ {
                        var red uint8 = uint8(x)
                        var green uint8 = uint8((x + y) &gt;&gt; 1)
                        var blue uint8 = uint8(y)
                        c := color.RGBA{red, green, blue, 255}
                        img.SetRGBA(x, y, c)
                }
        }
&nbsp;
        outfile, err := os.Create("test.png")
        if err != nil {
                panic(err)
        }
        defer outfile.Close()
        png.Encode(outfile, img)
}
</pre>

*** image ***
<p><i>Obrázek 1: </i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Export rastrového obrazu do formátu JPEG</h2>

<p></p>

<pre>
package main
&nbsp;
import (
        "image"
        "image/color"
        "image/jpeg"
        "os"
)
&nbsp;
const width = 256
const height = 256
&nbsp;
func <strong>main</strong>() {
        img := image.NewRGBA(image.Rect(0, 0, width, height))
        for x := 0; x &lt; width; x++ {
                for y := 0; y &lt; height; y++ {
                        var red uint8 = uint8(x)
                        var green uint8 = uint8((x - y))
                        var blue uint8 = uint8(y)
                        c := color.RGBA{red, green, blue, 255}
                        img.SetRGBA(x, y, c)
                }
        }
&nbsp;
        outfile, err := os.Create("test.jpeg")
        if err != nil {
                panic(err)
        }
        defer outfile.Close()
        jpeg.Encode(outfile, img, nil)
}
</pre>

<pre>
package main
&nbsp;
import (
        "image"
        "image/color"
        "image/jpeg"
        "os"
)
&nbsp;
const width = 256
const height = 256
&nbsp;
func <strong>main</strong>() {
        img := image.NewRGBA(image.Rect(0, 0, width, height))
        for x := 0; x &lt; width; x++ {
                for y := 0; y &lt; height; y++ {
                        var red uint8 = uint8(x)
                        var green uint8 = uint8((x - y))
                        var blue uint8 = uint8(y)
                        c := color.RGBA{red, green, blue, 255}
                        img.SetRGBA(x, y, c)
                }
        }
&nbsp;
        outfile, err := os.Create("test2.jpeg")
        if err != nil {
                panic(err)
        }
        defer outfile.Close()
        jpeg.Encode(outfile, img, &amp;jpeg.Options{Quality: 1})
}
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně jeden megabajt), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_json_marshal_basic_signed_types.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/01_json_marshal_basic_signed_types.go">https://github.com/tisnik/go-fedora/blob/master/article_13/01_json_marshal_basic_signed_types.go</a></td></tr>
<tr><td> 2</td><td>02_json_marshal_basic_unsigned_types.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/02_json_marshal_basic_unsigned_types.go">https://github.com/tisnik/go-fedora/blob/master/article_13/02_json_marshal_basic_unsigned_types.go</a></td></tr>
<tr><td> 3</td><td>03_json_marshal_basic_complex_types.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/03_json_marshal_basic_complex_types.go">https://github.com/tisnik/go-fedora/blob/master/article_13/03_json_marshal_basic_complex_types.go</a></td></tr>
<tr><td> 4</td><td>04_json_marshal_arrays.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/04_json_marshal_arrays.go">https://github.com/tisnik/go-fedora/blob/master/article_13/04_json_marshal_arrays.go</a></td></tr>
<tr><td> 5</td><td>05_json_marshal_struct.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/05_json_marshal_struct.go">https://github.com/tisnik/go-fedora/blob/master/article_13/05_json_marshal_struct.go</a></td></tr>
<tr><td> 6</td><td>06_json_mashal_array_of_struct.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/06_json_mashal_array_of_struct.go">https://github.com/tisnik/go-fedora/blob/master/article_13/06_json_mashal_array_of_struct.go</a></td></tr>
<tr><td> 7</td><td>07_json_marshal_map_of_structs.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/07_json_marshal_map_of_structs.go">https://github.com/tisnik/go-fedora/blob/master/article_13/07_json_marshal_map_of_structs.go</a></td></tr>
<tr><td> 8</td><td>08_json_marshal_map_of_structs.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/08_json_marshal_map_of_structs.go">https://github.com/tisnik/go-fedora/blob/master/article_13/08_json_marshal_map_of_structs.go</a></td></tr>
<tr><td> 9</td><td>09_json_marshal_complex_map.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/09_json_marshal_complex_map.go">https://github.com/tisnik/go-fedora/blob/master/article_13/09_json_marshal_complex_map.go</a></td></tr>
<tr><td>10</td><td>10_json_different_keys.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/10_json_different_keys.go">https://github.com/tisnik/go-fedora/blob/master/article_13/10_json_different_keys.go</a></td></tr>
<tr><td>11</td><td>11_json_marshal_special_values.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/11_json_marshal_special_values.go">https://github.com/tisnik/go-fedora/blob/master/article_13/11_json_marshal_special_values.go</a></td></tr>
<tr><td>12</td><td>12_json_unmarshal_struct.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/12_json_unmarshal_struct.go">https://github.com/tisnik/go-fedora/blob/master/article_13/12_json_unmarshal_struct.go</a></td></tr>
<tr><td>13</td><td>13_json_unmarshal_struct.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/13_json_unmarshal_struct.go">https://github.com/tisnik/go-fedora/blob/master/article_13/13_json_unmarshal_struct.go</a></td></tr>
<tr><td>14</td><td>14_json_unmarshal_array.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/14_json_unmarshal_array.go">https://github.com/tisnik/go-fedora/blob/master/article_13/14_json_unmarshal_array.go</a></td></tr>
<tr><td>15</td><td>15_json_unmarshal_array_of_struct.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/15_json_unmarshal_array_of_struct.go">https://github.com/tisnik/go-fedora/blob/master/article_13/15_json_unmarshal_array_of_struct.go</a></td></tr>
<tr><td>16</td><td>16_json_unmarshal_map_of_struct.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/16_json_unmarshal_map_of_struct.go">https://github.com/tisnik/go-fedora/blob/master/article_13/16_json_unmarshal_map_of_struct.go</a></td></tr>
<tr><td>17</td><td>17_json_unmarshal_map_of_struct_different_keys.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/17_json_unmarshal_map_of_struct_different_keys.go">https://github.com/tisnik/go-fedora/blob/master/article_13/17_json_unmarshal_map_of_struct_different_keys.go</a></td></tr>
<tr><td>18</td><td>18_json_unmarshal_unknown_struct.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/18_json_unmarshal_unknown_struct.go">https://github.com/tisnik/go-fedora/blob/master/article_13/18_json_unmarshal_unknown_struct.go</a></td></tr>
<tr><td>19</td><td>19_png_output.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/19_png_output.go">https://github.com/tisnik/go-fedora/blob/master/article_13/19_png_output.go</a></td></tr>
<tr><td>20</td><td>20_jpeg_output.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/20_jpeg_output.go">https://github.com/tisnik/go-fedora/blob/master/article_13/20_jpeg_output.go</a></td></tr>
<tr><td>21</td><td>21_jpeg_output_low_quality.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_13/21_jpeg_output_low_quality.go">https://github.com/tisnik/go-fedora/blob/master/article_13/21_jpeg_output_low_quality.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

