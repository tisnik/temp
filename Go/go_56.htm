<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Go a assembler (3.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Go a assembler (3.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o programovacím jazyce Go se již potřetí budeme zabývat použitím assembleru v aplikacích, které jsou z větší části psané právě v Go. Ukážeme si využití programových smyček, ale i moderních instrukcí použitelných pro urychlení vybraných algoritmů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Go a assembler (3.část)</a></p>
<p><a href="#k02">2. Malá rozcvička: interní reprezentace řezů (slices)</a></p>
<p><a href="#k03">3. Předávání řezů v&nbsp;zásobníkovém rámci do volaných funkcí</a></p>
<p><a href="#k04">4. Vyplnění obrázku konstantní barvou</a></p>
<p><a href="#k05">5. Benchmark pro funkci vyplňující rastrový obrázek</a></p>
<p><a href="#k06">6. Naivní implementace vyplňování v&nbsp;assembleru</a></p>
<p><a href="#k07">7. Výsledky benchmarků</a></p>
<p><a href="#k08">8. Reorganizace vnitřní smyčky naprogramované v&nbsp;assembleru</a></p>
<p><a href="#k09">9. Výsledky benchmarků</a></p>
<p><a href="#k10">10. Vyplňování po čtyřbajtových slovech</a></p>
<p><a href="#k11">11. Výsledky benchmarků</a></p>
<p><a href="#k12">12. Použití &bdquo;řetězcových&ldquo; operací typu <strong>REP STOS</strong></a></p>
<p><a href="#k13">13. Opět výsledky benchmarků</a></p>
<p><a href="#k14">14. Plyn až na podlahu: instrukce <strong>MOVDQU</strong> a <strong>VMOVNTDQ</strong></a></p>
<p><a href="#k15">15. Použití knihovny <strong>go-memset</strong></a></p>
<p><a href="#k16">16. Zázrak se ovšem nekoná neboli opět benchmarky</a></p>
<p><a href="#k17">17. Malá odbočka na závěr &ndash; změna barvy pixelů vysokoúrovňovým kódem</a></p>
<p><a href="#k18">18. Poslední výsledky benchmarků a shrnutí na závěr</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Go a assembler (3.část)</h2>

<p>Na předchozí články, v&nbsp;nichž jsme si popsali některé vlastnosti poněkud
specifického assembleru dodávaného společně se základními nástroji Go, dnes
navážeme. Ukážeme si totiž, jak lze urychlit některé základní manipulace
s&nbsp;rastrovými obrázky. Z&nbsp;dále popsaných demonstračních příkladů bude
patrné, že použití assembleru skutečně může vést k&nbsp;mnohdy velmi výraznému
urychlení některých operací, pochopitelně ovšem za cenu zkomplikování a
zpomalení vývoje. Je tomu tak z&nbsp;toho důvodu, že překladač programovacího
jazyka Go nedokáže (alespoň v&nbsp;jeho současné verzi) aplikovat některé
optimalizace a současně samotný jazyk Go v&nbsp;mnoha případech nenabízí
vhodnou sémantiku pro popis některých operací (resp.&nbsp;přesněji řečeno to
někdy možné je, ovšem za předpokladu použití balíčku <i>unsafe</i> a podobných
spíše nízkoúrovňových a potenciálně nebezpečných postupů).</p>

<p><div class="rs-tip-major">Poznámka: nutno poznamenat, že je dosti
nepravděpodobné, že by překladač jazyka Go v&nbsp;dohledné době prováděl
některé časově náročné optimalizace (ty jsou mnohdy založeny na trasování
spuštěného kódu). Jde to proti filozofii, které se Go drží, tj.&nbsp;snažit se,
aby se Go, což je překládaný jazyk, používalo stejně snadno a rychle, jako
jazyky interpretované.</div></p>

<p><div class="rs-tip-major">Poznámka<sup>2</sup>: prozatím prosím nečekejte od
stále ještě úvodního článku pokročilé triky. K&nbsp;těm se dostaneme
příště.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Malá rozcvička: interní reprezentace řezů (slices)</h2>

<p>Nejdříve si povězme, jakým způsobem se v&nbsp;programovacím jazyce Go
pracuje s&nbsp;takzvanými <i>řezy</i> (<i>slices</i>). S&nbsp;řezy jsme se již
pochopitelně seznámili, protože se jedná o významný prvek jazyka Go, bez něhož
by nebylo možné elegantně pracovat s&nbsp;kolekcemi s&nbsp;měnitelnou kapacitou
a počtem uložených prvků.</p>

<p>Interně se jedná o referenci na automaticky vytvořené pole nebo na pole,
které je explicitně &bdquo;nasalámováno&ldquo; operací řezu [od:do]. Každý řez
je v&nbsp;operační paměti uložen ve formě trojice hodnot (jde o záznam &ndash;
struct či record):</p>

<ol>
<li>Ukazatele (reference) na zvolený prvek pole s&nbsp;daty, ke kterým přes řez přistupujeme.</li>
<li>Délky řezu, tj.&nbsp;počtu prvků.</li>
<li>Kapacity řezu (do jaké míry může řez narůstat v&nbsp;důsledku přidávání dalších prvků).</li>
</ol>

<p>Tato interní struktura řezů s&nbsp;sebou přináší několik zajímavých
důsledků. Je totiž možné, aby existovalo větší množství řezů ukazujících na
obecně různé prvky jediného pole. Pokud nyní změníme prvek v&nbsp;jednom řezu,
znamená to, že se vlastně modifikuje obsah původního pole a i ostatní řezy nový
prvek uvidí. Co je však užitečnější &ndash; s&nbsp;řezy jako s&nbsp;datovým
typem se velmi snadno pracuje; řezy mohou být předávány do funkcí, vráceny
z&nbsp;funkcí atd.</p>

<p>Podívejme se ovšem na řezy z&nbsp;pohledu programátora, který by řezy
používal v&nbsp;assembleru. Řez je i při tomto pohledu stále tvořen trojicí
hodnot &ndash; ukazatele na první pohled, kapacity a aktuálně využité kapacity
řezu (tedy jeho délky). Tyto hodnoty jsou do volané funkce předány jako
trojice, protože se řez předává hodnotou, ostatně podobně, jako další datové
typy jazyka Go. V&nbsp;případě, že se používá 64bitová platforma (tedy
x86-64/AMD64 či AArch64), má ukazatel šířku 64 bitů, kapacita je uložena
v&nbsp;32 bitech a délka taktéž v&nbsp;32 bitech.</p>

<p>Způsob předání zmíněných tří hodnot si otestujeme na následujícím velmi
jednoduchém demonstračním příkladu, v&nbsp;němž je implementována dvojice
funkcí, z&nbsp;nichž jedna vrací kapacitu řezu a druhá počet skutečně
obsazených prvků. Zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
func <strong>GetLen</strong>(b []byte) int {
        return len(b)
}
&nbsp;
func <strong>GetCap</strong>(b []byte) int {
        return cap(b)
}
&nbsp;
func <strong>main</strong>() {
        var x []byte = []byte{1, 2, 3}
        println(GetLen(x))
        println(GetCap(x))
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Předávání řezů v&nbsp;zásobníkovém rámci do volaných funkcí</h2>

<p>Zajímat nás nyní bude způsob volání těchto funkcí i princip předávání tří
hodnot popisujících řez. Demonstrační příklad tedy přeložíme, ovšem takovým
způsobem, aby nedošlo k&nbsp;inliningu volaných funkcí:</p>

<pre>
$ <strong>go build -gcflags '-l' slices.go</strong>
</pre>

<p>Nyní se již můžeme podívat na sekvenci instrukcí, do nichž se přeložily
zdrojové kódy funkcí <strong>GetLen</strong> a <strong>GetCap</strong>. Pro
získání sekvence instrukcí v&nbsp;lidsky čitelné podobě použijeme známý a již
popsaný nástroj nazvaný <strong>objdump</strong>:</p>

<pre>
$ <strong>go tool objdump -S -s GetLen ./slices </strong>
&nbsp;
TEXT main.GetLen(SB) /home/ptisnovs/src/go-root/article_56/slices.go
        return len(b)
  0x452330              488b442410              MOVQ 0x10(SP), AX
  0x452335              4889442420              MOVQ AX, 0x20(SP)
  0x45233a              c3                      RET
</pre>

<p>a:</p>

<pre>
$ <strong>go tool objdump -S -s GetCap ./slices </strong>
TEXT main.GetCap(SB) /home/ptisnovs/src/go-root/article_56/slices.go
        return cap(b)
  0x452340              488b442418              MOVQ 0x18(SP), AX
  0x452345              4889442420              MOVQ AX, 0x20(SP)
  0x45234a              c3                      RET
</pre>

<p>Z&nbsp;disassemblovaného kódu obou funkcí lze vydedukovat způsob předávání
struktury popisující řez:</p>

<ol>

<li>Ukazatel na první prvek v&nbsp;řezu má šířku 64 bitů a je předán na
zásobníkovém rámci na offsetu 8 (osm bajtů zabírá návratová adresa).</li>

<li>Aktuálně zapsaný počet prvků řezu má šířku 32 bitů a je předán na
zásobníkovém rámci na offsetu 16 (8+8).</li>

<li>Využitelná kapacita řezu má šířku taktéž 32 bitů a je předán na
zásobníkovém rámci na offsetu 24 (8+8+4+4 align).</li>

</ol>

<p><div class="rs-tip-major">Poznámka: znovu zopakujme, že výše uvedené
informace platí pro 64bitovou platformu x86-64. Na jiných platformách bude
předávání vypadat odlišně (například se nepoužije zásobníkový rámec) nebo bude
ukazatel pouze 32bitový.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vyplnění obrázku konstantní barvou</h2>

<p>Nyní, když již víme, jak se pracuje s&nbsp;řezy, se můžeme podívat na další
demonstrační příklad. Ten slouží k&nbsp;vytvoření plnobarevného rastrového
obrázku o rozlišení 256&times;256 pixelů, který je následně vyplněn bílou
neprůhlednou barvou a uložen do externího souboru ve formátu <a
href="https://www.root.cz/clanky/png-is-not-gif/">PNG</a>. Připomeňme si, že u
plnobarevných obrázků (RGBA) je barva tvořena čtveřicí hodnot red, green, blue
a alpha, přičemž u alfa kanálu (alpha) značí 0 plnou průhlednost zatímco 255
úplnou neprůhlednost (ovšem v&nbsp;jiných jazycích a knihovnách je tomu přesně
naopak).</p>

<p>Rastrový obrázek se vytvoří konstruktorem:</p>

<pre>
destinationImage := image.NewRGBA(image.Rect(0, 0, 256, 256))
</pre>

<p>Ve výchozím stavu má obrázek všechny pixely černé a současně průhledné.
Budeme ho tedy muset vyplnit. Využijeme přitom toho faktu, že hodnoty všech
pixelů jsou uloženy v&nbsp;kontinuálním řezu typu <strong>[]byte</strong>,
tj.&nbsp;k&nbsp;pixelům a jejich barvám je možné přistupovat na dosti nízké
úrovni (což je ostatně pro mnoho algoritmů jen dobře). Vyplnění celého obrázku
tedy můžeme realizovat následující funkcí:</p>

<pre>
func <strong>fillPixels</strong>(pixels []uint8) {
        for i := 0; i &lt; len(pixels); i++ {
                pixels[i] = 255
        }
}
</pre>

<p>U této funkce se na chvíli zastavme a zjistěme, jestli je skutečně legální
takto k&nbsp;pixelům přistupovat. Struktura popisující celobarevný obrázek
totiž vypadá následovně:</p>

<pre>
<i>// RGBA64 is an in-memory image whose At method returns color.RGBA64 values.</i>
type RGBA64 struct {
        <i>// Pix holds the image's pixels, in R, G, B, A order and big-endian format. The pixel at</i>
        <i>// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*8].</i>
        Pix []uint8
        <i>// Stride is the Pix stride (in bytes) between vertically adjacent pixels.</i>
        Stride int
        <i>// Rect is the image's bounds.</i>
        Rect Rectangle
}
</pre>

<p>Pokud znáte nějaké další (nízkoúrovňové) knihovny pro práci
s&nbsp;rastrovými obrázky, například původní SDL verze 1, možná budete
předpokládat, že existence atributu <strong>Stride</strong> znamená, že
jednotlivé obrazové řádky nemusí být uloženy ihned za sebou. Jinými slovy
&ndash; mezi posledním pixelem na jednom řádku a prvním pixelem na následujícím
řádku může být nevyužité místo. Ve skutečnosti tomu však v&nbsp;tomto případě
není, o čemž se snadno přesvědčíme pohledem do zdrojového kódu samotného
balíčku <strong>image</strong>:</p>

<pre>
<i>// NewRGBA returns a new RGBA image with the given bounds.</i>
func NewRGBA(r Rectangle) *RGBA {
        w, h := r.Dx(), r.Dy()
        buf := make([]uint8, 4*w*h)
        return &amp;RGBA{buf, 4 * w, r}
}
</pre>

<p>Úplný zdrojový kód dnešního druhého demonstračního příkladu vypadá
takto:</p>

<pre>
package <strong>main</strong>
&nbsp;  
import (
        "image"
        "image/png"
        "log"
        "os"
)
&nbsp;  
const DestinationImageFileName = "empty.png"
&nbsp;  
func <strong>saveImage</strong>(filename string, img image.Image) error {
        outfile, err := os.Create(filename)
        if err != nil {
                return err
        }
        defer outfile.Close()
&nbsp;  
        png.Encode(outfile, img)
        return nil
}
&nbsp;  
func <strong>fillPixels</strong>(pixels []uint8) {
        for i := 0; i &lt; len(pixels); i++ {
                pixels[i] = 255
        }
}
&nbsp;  
func <strong>main</strong>() {
        destinationImage := image.NewRGBA(image.Rect(0, 0, 256, 256))
&nbsp;  
        fillPixels(destinationImage.Pix)
&nbsp;  
        err := saveImage(DestinationImageFileName, destinationImage)
        if err != nil {
                log.Fatal(err)
        }
}
</pre>

<p>Funkci pro vyplnění všech pixelů rastrového obrázku tedy máme
naprogramovanou a díky tomu, že je v&nbsp;ní použit (relativně) nízkoúrovňový
výstup je možné předpokládat, že bude přeložena poměrně rozumným způsobem.
Můžeme si to ostatně ověřit na optimalizované variantě:</p>

<pre>
TEXT main.fillPixels(SB) /home/ptisnovs/src/go-root/article_56/01_no_op_filter.go
        for i := 0; i &lt; len(pixels); i++ {
  0x4b87b0              488b442410              MOVQ 0x10(SP), AX
  0x4b87b5              488b4c2408              MOVQ 0x8(SP), CX
  0x4b87ba              31d2                    XORL DX, DX
  0x4b87bc              eb07                    JMP 0x4b87c5
                pixels[i] = 255
  0x4b87be              c60411ff                MOVB $0xff, 0(CX)(DX*1)
        for i := 0; i &lt; len(pixels); i++ {
  0x4b87c2              48ffc2                  INCQ DX
  0x4b87c5              4839c2                  CMPQ AX, DX
  0x4b87c8              7cf4                    JL 0x4b87be
  0x4b87ca              c3                      RET
</pre>

<p>Z&nbsp;předchozího kódu je patrné, že se pixely vyplňují po jednotlivých
bajtech, což pravděpodobně nebude nejrychlejší řešení.</p>

<p><div class="rs-tip-major">Poznámka: zajímavé je, že pokud bychom řez
vyplňovali nulami, použil by překladač velmi rychlou variantu, k&nbsp;níž se
dostaneme v&nbsp;dalším textu.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Benchmark pro funkci vyplňující rastrový obrázek</h2>

<p>O tom, jak rychlé či naopak pomalé je vyplňování obrázku realizované
v&nbsp;dnešním druhém demonstračním příkladu, se přesvědčíme prakticky, a to
konkrétně vytvořením vhodného <i>benchmarku</i>. Podporou benchmarků jsme se
prozatím v&nbsp;tomto seriálu nezabývali do větší hloubky, ovšem pro účely
dnešního článku postačuje vědět, že se jedná o součást standardního testovacího
frameworku programovacího jazyka Go a že v&nbsp;implementaci benchmarku (funkce
<strong>Run</strong>) typicky používáme smyčku prováděnou od 0 do b.N, přičemž
ono N je do benchmarku předáváno samotným testovacím frameworkem.</p>

<p>Náš benchmark bude relativně jednoduchý &ndash; postupně zkonstruuje obrázky
se zvětšujícím se rozlišením a bude měřit, jak dlouho trvá jejich vyplnění
konstantní barvou:</p>

<pre>
package <strong>main</strong>
&nbsp;  
import (
        "fmt"
        "image"
        "testing"
)
&nbsp;  
var sizes = []int{32, 128, 256, 512, 1024, 2048}
&nbsp;  
func <strong>BenchmarkFillPixels</strong>(b *testing.B) {
        for _, size := range sizes {
                sizeStr := fmt.Sprintf("%dx%d", size, size)
                b.Run(sizeStr, func(b *testing.B) {
                        destinationImage := image.NewRGBA(image.Rect(0, 0, size, size))
&nbsp;  
                        b.ResetTimer()
&nbsp;  
                        for i := 0; i &lt; b.N; i++ {
                                fillPixels(destinationImage.Pix)
                        }
                })
        }
}
</pre>

<p>Takto vytvořený benchmark se spustí příkazem:</p>

<pre>
20:20 $ <strong>go test -bench=.</strong>
</pre>

<p>Z&nbsp;výsledků benchmarku je patrné, jak dlouho trvá jedno vyplnění pro
obrázek zvolené velikosti i kolik vyplnění bylo za zvolený časový rámec
provedeno:</p>

<pre>
goos: linux
goarch: amd64
BenchmarkFillPixels/32x32-8               985530              1194 ns/op
BenchmarkFillPixels/128x128-8              57682             20843 ns/op
BenchmarkFillPixels/256x256-8              14215             83921 ns/op
BenchmarkFillPixels/512x512-8               3368            337089 ns/op
BenchmarkFillPixels/1024x1024-8              866           1369216 ns/op
BenchmarkFillPixels/2048x2048-8              218           5427221 ns/op
PASS
ok      _/home/ptisnovs/src/go-root/article_56/01_empty_image_go        9.810s
</pre>

<p>Pro zajímavost ještě spustíme benchmark pro kód, který nebyl
optimalizován:</p>

<pre>
20:22 $ <strong>go test -gcflags '-l' -bench=.</strong>
&nbsp;
goos: linux
goarch: amd64
BenchmarkFillPixels/32x32-8               493587              2390 ns/op
BenchmarkFillPixels/128x128-8              31555             38150 ns/op
BenchmarkFillPixels/256x256-8               7726            152297 ns/op
BenchmarkFillPixels/512x512-8               1915            609991 ns/op
BenchmarkFillPixels/1024x1024-8              482           2444177 ns/op
BenchmarkFillPixels/2048x2048-8              120           9837822 ns/op
PASS
ok      _/home/ptisnovs/src/go-root/article_56/01_empty_image_go        9.372s
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Naivní implementace vyplňování v&nbsp;assembleru</h2>

<p>Nyní si již můžeme ukázat použití assembleru. Nejdříve nepatrně upravíme
samotný zdrojový kód příkladu, v&nbsp;němž vynecháme tělo funkce
<strong>fillPixels</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;  
import (
        "image"
        "image/png"
        "log"
        "os"
)
&nbsp;  
const DestinationImageFileName = "empty.png"
&nbsp;  
func <strong>saveImage</strong>(filename string, img image.Image) error {
        outfile, err := os.Create(filename)
        if err != nil {
                return err
        }
        defer outfile.Close()
&nbsp;  
        png.Encode(outfile, img)
        return nil
}
&nbsp;  
func <strong>fillPixels</strong>(pixels []uint8)
&nbsp;  
func <strong>main</strong>() {
        destinationImage := image.NewRGBA(image.Rect(0, 0, 256, 256))
&nbsp;  
        fillPixels(destinationImage.Pix)
&nbsp;  
        err := saveImage(DestinationImageFileName, destinationImage)
        if err != nil {
                log.Fatal(err)
        }
}
</pre>

<p>Chybějící tělo funkce bude vytvořeno v&nbsp;assembleru. První varianta je
napsána dosti naivním způsobem a je odvozena z&nbsp;kódu, který by generoval
samotný překladač programovacího jazyka Go:</p>

<pre>
TEXT ·fillPixels(SB),7,$0
        MOVQ pix_data+0(FP), CX  <i>// adresa</i>
        MOVQ pix_len+8(FP), AX   <i>// delka</i>
        XORL DX, DX              <i>// pocitadlo</i>
        JMP  NEXT                <i>// reseni problemu len(pixels)==0</i>
&nbsp;
LOOP:
        MOVB $0xff, 0(CX)(DX*1)  <i>// zapis bajtu</i>
        INCQ DX                  <i>// zvyseni hodnoty pocitadla</i>
NEXT:   CMPQ DX, AX              <i>// porovnani s delkou rezu</i>
        JL LOOP                  <i>// pocitadlo mensi? ok, skok</i>
        RET
</pre>

<p>Povšimněte si, jak tato funkce pracuje: je v&nbsp;ní použito počitadlo
realizované registrem <strong>EDX</strong>, který se používá i pro adresování
pixelu. Dále zde můžeme vidět registr <strong>RCX</strong>, do něhož se uložila
adresa prvního prvku v&nbsp;řezu (rozlišení, který registr se použije, je
patrné ze suffixu instrukce). A konečně se do registru <strong>RAX</strong>
uložil počet prvků v&nbsp;řezu, což v&nbsp;našem případě konkrétně znamená
počet pixelů vynásobených čtyřmi. V&nbsp;programové smyčce se kontroluje, zda
již počitadlo (postupně zvyšované o jedničku) nedosáhlo počtu prvků
v&nbsp;řezu. Pokud tomu tak je, je funkce ukončena, jinak je proveden skok na
začátek smyčky (<strong>JL</strong> = Jump if Less than). Navíc je funkce
navržena takovým způsobem, že pracuje korektně i za předpokladu, že má obrázek
nulovou velikost a tedy že neobsahuje žádné pixely (skok doprostřed smyčky na
začátku).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Výsledky benchmarků</h2>

<p>Relativně krátká funkce naprogramovaná v&nbsp;assembleru s&nbsp;velkou
pravděpodobností nebude příliš rychlá, protože k&nbsp;pixelům stále
přistupujeme po jednotlivých bajtech (zápis instrukcí <strong>MOVB</strong>). O
tom, jak dobře či špatně jsme na tom v&nbsp;porovnání s&nbsp;původním
příkladem, se opět přesvědčíme benchmarkem:</p>

<pre>
20:23 $ <strong>go test -bench=.</strong>
&nbsp;
goos: linux
goarch: amd64
pkg: empty_image
BenchmarkFillPixels/32x32-8               422341              2420 ns/op
BenchmarkFillPixels/128x128-8              31546             38293 ns/op
BenchmarkFillPixels/256x256-8               7755            152968 ns/op
BenchmarkFillPixels/512x512-8               1930            608001 ns/op
BenchmarkFillPixels/1024x1024-8              483           2444272 ns/op
BenchmarkFillPixels/2048x2048-8              120           9858778 ns/op
PASS
ok      empty_image     8.292s
</pre>

<p><div class="rs-tip-major">Poznámka: dosažené počty operací resp.&nbsp;naopak
jejich rychlosti nás prozatím příliš neohromí, ale pokračujme dále.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Reorganizace vnitřní smyčky naprogramované v&nbsp;assembleru</h2>

<p>V&nbsp;případě, že budeme předpokládat, že vyplňovat se bude obrázek o
nenulové velikosti, je možné programovou smyčku vytvořenou v&nbsp;assembleru
přepsat a nepatrně ji tak urychlit. Použijeme zde dosti typickou kombinaci
instrukcí <strong>DEC+JNZ</strong>. Upravená varianta vypadá následovně:</p>

<pre>
TEXT ·fillPixels(SB),7,$0
        MOVQ pix_data+0(FP), CX  <i>// adresa</i>
        MOVQ pix_len+8(FP), AX   <i>// delka</i>
        XORL DX, DX              <i>// offset</i>
&nbsp;
LOOP:
        MOVB $0xff, 0(CX)(DX*1)  <i>// zapis bajtu</i>
        INCQ DX                  <i>// zvyseni hodnoty offsetu</i>
        DECQ AX                  <i>// zmenseni pocitadla</i>
        JNZ LOOP                 <i>// pocitadlo vetsi nez 0? ok, skok</i>
        RET
</pre>

<p><div class="rs-tip-major">Poznámka: stále se jedná o naivně pojaté řešení,
které je založeno na optimalizacích provedených na nejnižší úrovni bez
přemýšlení o tom, že s&nbsp;pixely lze pracovat i jinak.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Výsledky benchmarků</h2>

<p>Po spuštění benchmarků je patrné nepatrné urychlení, které ovšem bylo
vykoupeno potenciální nebezpečností implementované funkce:</p>

<pre>
20:24 $ <strong>go test -bench=.</strong>
&nbsp;
goos: linux
goarch: amd64
pkg: empty_image
BenchmarkFillPixels/32x32-8               498303              2380 ns/op
BenchmarkFillPixels/128x128-8              31570             38094 ns/op
BenchmarkFillPixels/256x256-8               7450            152076 ns/op
BenchmarkFillPixels/512x512-8               1927            610624 ns/op
BenchmarkFillPixels/1024x1024-8              478           2522056 ns/op
BenchmarkFillPixels/2048x2048-8              117           9990900 ns/op
PASS
ok      empty_image     9.467s
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vyplňování po čtyřbajtových slovech</h2>

<p>Další úprava celé programové smyčky zapsané v&nbsp;assembleru je již mnohem
významnější. Použijeme zde zápis celého pixelu nikoli po bajtech, ale po celých
čtyřbajtových slovech. Vzhledem k&nbsp;tomu, že každý pixel má ve formátu RGBA
šířku právě čtyř bajtů, je výpočet jednoduchý a nemusíme sledovat, kolik pixelů
bitmapa obsahuje (zda je počet lichý, sudý, dělitelný čtyřmi atd. atd.). Jedna
z&nbsp;možných variant smyčky ve formě, jak ji generují některé překladače
(nikoli překladač jazyka Go!) vypadá takto:</p>

<pre>
TEXT ·fillPixels(SB),7,$0
        MOVQ pix_data+0(FP), CX  <i>// adresa</i>
        MOVQ pix_len+8(FP), AX   <i>// delka</i>
        XORL DX, DX              <i>// offset</i>
        MOVD $0xffffffff, BX     <i>// zapisovana barva pixelu (RGBA)</i>
&nbsp;
LOOP:
        MOVD BX, 0(CX)(DX*1)     <i>// zapis bajtu</i>
        ADDQ $4, DX              <i>// zvyseni hodnoty offsetu</i>
        SUBQ $4, AX              <i>// zmenseni pocitadla</i>
        JNZ LOOP                 <i>// pocitadlo vetsi nez 0? ok, skok</i>
        RET
</pre>

<p>Povšimněte si zejména toho že se provede čtyřikrát méně operací. Počitadlo
by bylo možné hned na začátku vydělit čtyřmi (což uděláme v&nbsp;dalším
příkladu); taktéž by bylo možné smyčku nepatrně přeorganizovat a použít odlišný
přístup ke kontrole, zda se již došlo nakonec celé smyčky (poslední iterace),
ovšem výsledný čas běhu funkce zůstává přibližně stejný.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výsledky benchmarků</h2>

<p>Na výsledcích benchmarku je jasně patrný výkonnostní rozdíl mezi zápisem do
rastrového obrázku po čtyřech bajtech v&nbsp;porovnání se zápisem po
bajtech:</p>

<pre>
20:24 $ <strong>go test -bench=.</strong>
&nbsp;
goos: linux
goarch: amd64
pkg: empty_image
BenchmarkFillPixels/32x32-8              3501494               324 ns/op
BenchmarkFillPixels/128x128-8             218844              5479 ns/op
BenchmarkFillPixels/256x256-8              52108             23002 ns/op
BenchmarkFillPixels/512x512-8              12303             97159 ns/op
BenchmarkFillPixels/1024x1024-8             3022            390965 ns/op
BenchmarkFillPixels/2048x2048-8              662           1746510 ns/op
PASS
ok      empty_image     8.928s
</pre>

<p>Dosažené zrychlení (pochopitelně platné pouze pro počítač s&nbsp;i5, na
kterém testy běžely) je rovno:</p>

<pre>
9990900/1746510=5,72
</pre>

<p>Tento výsledek je zajímavý a možná neočekávaný, protože by se mělo jednat o
přibližně čtyřnásobné urychlení. Ukazuje se, že na 64bitové (i 32bitové)
platformě může být manipulace s&nbsp;jednotlivými bajty hodně pomalou
operací.</p>

<p><div class="rs-tip-major">Poznámka: toto je nutné mít na paměti i při dalším
zpracování polí či řezů bajtů. Jedná se totiž o zcela obvyklé operace, zejména
v&nbsp;případě webových serverů s&nbsp;REST API, u nichž se neustále pracuje
s&nbsp;řetězci, provádí se deserializace JSONů a další podobné
operace.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Použití &bdquo;řetězcových&ldquo; operací typu <strong>REP STOS</strong></h2>

<p>Na platformě x86 i x86-64 jsou již od samého začátku existence této řady
mikroprocesorů dostupné &bdquo;řetězcové&ldquo; operace typu
<strong>MOVS</strong>, <strong>CMPS</strong>, <strong>LODS</strong> a
<strong>STOS</strong>. Tyto instrukce provádí čtení či zápis do paměťového
místa současně se změnou offsetu; jejich typické použití je při kopiích polí,
vyplňování bloků paměti atd. Instrukce <strong>LODS</strong> a
<strong>STOS</strong> navíc pracují s&nbsp;různou šířkou dat &ndash; od bajtů
přes 16bitová slova až po slova 64bitová (pochopitelně na nových
procesorech):</p>

<table>
<tr><th>Instrukce</th><th>Význam v&nbsp;64bitovém režimu</th></tr>
<tr><td>STOSB</td><td>ulož AL na adresu v&nbsp;registru RDI nebo EDI, zvyš/sniž adresu o 1</td></tr>
<tr><td>STOSW</td><td>ulož AX na adresu v&nbsp;registru RDI nebo EDI, zvyš/sniž adresu o 2</td></tr>
<tr><td>STOSD</td><td>ulož EAX na adresu v&nbsp;registru RDI nebo EDI, zvyš/sniž adresu o 4</td></tr>
<tr><td>STOSQ</td><td>ulož RAX na adresu v&nbsp;registru RDI nebo EDI, zvyš/sniž adresu o 8</td></tr>
</table>

<p>Navíc se před tyto instrukce může vložit prefixová instrukce
<strong>REP</strong>, která znamená &bdquo;opakuj CX-krát&ldquo;
resp.&nbsp;&bdquo;opakuj ECX-krát&ldquo;. </p>

<p>Naši smyčku tedy můžeme přepsat takovým způsobem, že se použije:</p>

<pre>
REP STOSD
</pre>

<p>Ovšem v&nbsp;assembleru programovacího jazyka Go se používá jiný způsob
zápisu, kdy prefix figuruje jako samostatná instrukce a navíc se namísto STOSD
použije STOSL (L=long). Nesmíme zapomenout na nastavení směru zápisu, což
zajišťuje instrukce CLD (pokud ji nepoužijete, bude se zapisovat opačným
směrem, což povede k&nbsp;pádu programu):</p>

<pre>
TEXT ·fillPixels(SB),7,$0
        MOVQ pix_data+0(FP), DI  <i>// adresa</i>
        MOVQ pix_len+8(FP), CX   <i>// delka</i>
        SHRQ $2, CX              <i>// delime ctyrmi - protoze se zapisuji ctyri bajty soucasne</i>
        MOVD $0xffffffff, AX     <i>// zapisovana barva pixelu (RGBA)</i>
&nbsp;
        CLD                      <i>// smer zapisu</i>
        REP                      <i>// opakovani CX-krat</i>
        STOSL                    <i>// zapis ctyrbajtoveho slova</i>
        RET
</pre>

<p><div class="rs-tip-major">Poznámka: více informací o instrukcích typu
<strong>STOS</strong> naleznete například na stránce <a
href="https://www.felixcloutier.com/x86/stos:stosb:stosw:stosd:stosq">https://www.felixcloutier.com/x86/stos:stosb:stosw:stosd:stosq</a>.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Opět výsledky benchmarků</h2>

<p>Na výsledcích benchmarku je nyní patrné, že se prozatím jedná o nejrychlejší
variantu smyčky pro vyplnění rastrového obrázku:</p>

<pre>
20:24 $ <strong>go test -bench=.</strong>
&nbsp;
goos: linux
goarch: amd64
pkg: empty_image
BenchmarkFillPixels/32x32-8             22048845                47.9 ns/op
BenchmarkFillPixels/128x128-8            1239043               954 ns/op
BenchmarkFillPixels/256x256-8             263758              4494 ns/op
BenchmarkFillPixels/512x512-8              58672             20276 ns/op
BenchmarkFillPixels/1024x1024-8            14119             85268 ns/op
BenchmarkFillPixels/2048x2048-8             1090           1081754 ns/op
PASS
ok      empty_image     9.272s
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Plyn až na podlahu: instrukce <strong>MOVDQU</strong> a <strong>VMOVNTDQ</strong></h2>

<p>Prozatím jsme pracovali &bdquo;pouze&ldquo; se čtyřmi bajty současně, ovšem
moderní 64bitové mikroprocesory nabízí i další možnosti, které v&nbsp;co
největší míře využívají 64bitovou sběrnici. Jedná se o instrukce
<strong>MOVDQU</strong> popř.&nbsp;<strong>VMOVNTDQ</strong> (ta existuje ve
více variantách). Podrobnější informace o těchto instrukcích lze nalézt
například na stránce <a
href="https://www.felixcloutier.com/x86/movdqu:vmovdqu8:vmovdqu16:vmovdqu32:vmovdqu64">https://www.felixcloutier.com/x86/movdqu:vmovdqu8:vmovdqu16:vmovdqu32:vmovdqu64</a>
popř.&nbsp;na <a
href="https://www.felixcloutier.com/x86/movntdq">https://www.felixcloutier.com/x86/movntdq</a>
(další varianta).</p>

<p><div class="rs-tip-major">Poznámka: instrukce začínající písmenem
&bdquo;V&ldquo; pracují s&nbsp;&bdquo;vektorovými&ldquo; registry,
tj.&nbsp;jedná se o nějakou formu SIMD operace. Naopak &bdquo;U&ldquo; na konci
znamená &bdquo;unaligned&ldquo;, tj.&nbsp;bude možné data přenášet
z&nbsp;jakékoli adresy (za což obecně zaplatíme delším časem běhu).</div></p>

<p>Použití těchto instrukcí by mělo vést ke zdaleka nejrychlejšímu kódu, ovšem
samotná implementace smyčky již bude mnohem složitější, neboť bude nutné
zajistit, co se stane v&nbsp;případě, kdy počet zapisovaných dat nebude roven
osmi, kdy nebudou data zarovnána atd. Ostatně se můžeme podívat, jak je tato
problematika řešena v&nbsp;samotném jazyku Go při vyplňování polí nulami (ovšem
jen nulami) &ndash; <a
href="https://golang.org/src/runtime/memclr_amd64.s">https://golang.org/src/runtime/memclr_amd64.s</a>.</p>

<p><div class="rs-tip-major">Poznámka: ve výše uvedeném &ndash; ručně
optimalizovaném &ndash; kódu si povšimněte dosti masivního rozbalení smyčky,
protože právě operace podmíněného skoku je obecně dosti pomalá, protože obecně
porušuje tok instrukcí v&nbsp;instrukční pipeline.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Použití knihovny <strong>go-memset</strong></h2>

<p>Namísto zápisu optimalizované smyčky využijeme existující a řádně otestovaný
kód, jenž lze nalézt na adrese <a
href="https://github.com/tmthrgd/go-memset/blob/master/memset_amd64.s">https://github.com/tmthrgd/go-memset/blob/master/memset_amd64.s</a>.
Tento kód je součástí minibalíčku nazvaného <strong>go-memset</strong>, který
použijeme v&nbsp;dalším demonstračním příkladu.</p>

<p>Balíček nejdříve nainstalujeme, a to klasicky:</p>

<pre>
$ <strong>go get github.com/tmthrgd/go-memset</strong>
</pre>

<p>A aplikujeme ho:</p>

<pre>
func <strong>fillPixels</strong>(pixels []uint8) {
        memset.Memset(pixels, 0xff)
}
</pre>

<p>O případné optimalizace, rozbalení smyčky atd. by se měl postarat kód ve
funkci <strong>Memset</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;  
import (
        memset "github.com/tmthrgd/go-memset"
        "image"
        "image/png"
        "log"
        "os"
)
&nbsp;  
const DestinationImageFileName = "empty.png"
&nbsp;  
func <strong>saveImage</strong>(filename string, img image.Image) error {
        outfile, err := os.Create(filename)
        if err != nil {
                return err
        }
        defer outfile.Close()
&nbsp;  
        png.Encode(outfile, img)
        return nil
}
&nbsp;  
func <strong>fillPixels</strong>(pixels []uint8) {
        memset.Memset(pixels, 0xff)
}
&nbsp;  
func <strong>main</strong>() {
        destinationImage := image.NewRGBA(image.Rect(0, 0, 256, 256))
&nbsp;  
        fillPixels(destinationImage.Pix)
&nbsp;  
        err := saveImage(DestinationImageFileName, destinationImage)
        if err != nil {
                log.Fatal(err)
        }
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Zázrak se ovšem nekoná neboli opět benchmarky</h2>

<p>Na výsledku benchmarků je patrné, že se (kupodivu) příliš velké urychlení
oproti <strong>REP STOSD</strong> nekoná, což je poněkud překvapivé:</p>

<pre>
$ <strong>go test -bench=.</strong>
&nbsp;
goos: linux
goarch: amd64
pkg: empty_image
BenchmarkFillPixels/32x32-8             26100108                42.2 ns/op
BenchmarkFillPixels/128x128-8            1221976               986 ns/op
BenchmarkFillPixels/256x256-8             207972              5618 ns/op
BenchmarkFillPixels/512x512-8              41854             28681 ns/op
BenchmarkFillPixels/1024x1024-8            10000            115203 ns/op
BenchmarkFillPixels/2048x2048-8             1100           1077157 ns/op
PASS
ok      empty_image     8.542s
</pre>

<p><div class="rs-tip-major">Poznámka: bylo by vhodné a poučné tyto benchmarky
spustit i na serverových mikroprocesorech, jak od AMD, tak i od společnosti
Intel.</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Malá odbočka na závěr &ndash; změna barvy pixelů vysokoúrovňovým kódem</h2>

<p>Na závěr se ještě podívejme na alternativní způsob vybarvení celého
rastrového obrázku. Ten je založen na použití datové struktury
<strong>color.RGBA</strong>, která se může předat do metody
<strong>Image.SetRGBA</strong>. Jedná se o způsob, který sice nevyžaduje
nízkoúrovňový přístup k&nbsp;obsahu rastrového obrázku, ovšem dá se
předpokládat, že bude (mnohem) pomalejší. Ve funkci nyní předpočítáme barvu
pixelu (jedinkrát) a posléze ji použijeme ve vnořené programové smyčce:</p>

<pre>
func <strong>fillPixels</strong>(img *image.RGBA) {
        clr := color.RGBA{255, 255, 255, 255}
        bounds := img.Bounds()
        width, height := bounds.Max.X, bounds.Max.Y
        for y := 0; y &lt; height; y++ {
                for x := 0; x &lt; width; x++ {
                        img.SetRGBA(x, y, clr)
                }
        }
}
</pre>

<p>Takto upravený demonstrační příklad naleznete na adrese <a
href="https://github.com/tisnik/go-root/blob/master/article_56/07_empty_image_high_level/empty_image.go">https://github.com/tisnik/go-root/blob/master/article_56/07_empty_image_high_level/empty_image.go</a>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "image"
        "image/color"
        "image/png"
        "log"
        "os"
)
&nbsp;
const DestinationImageFileName = "empty.png"
&nbsp;
func <strong>saveImage</strong>(filename string, img image.Image) error {
        outfile, err := os.Create(filename)
        if err != nil {
                return err
        }
        defer outfile.Close()

        png.Encode(outfile, img)
        return nil
}
&nbsp;
func <strong>fillPixels</strong>(img *image.RGBA) {
        clr := color.RGBA{255, 255, 255, 255}
        bounds := img.Bounds()
        width, height := bounds.Max.X, bounds.Max.Y
        for y := 0; y &lt; height; y++ {
                for x := 0; x &lt; width; x++ {
                        img.SetRGBA(x, y, clr)
                }
        }
}
&nbsp;
func <strong>main</strong>() {
        destinationImage := image.NewRGBA(image.Rect(0, 0, 256, 256))
&nbsp;
        fillPixels(destinationImage)
&nbsp;
        err := saveImage(DestinationImageFileName, destinationImage)
        if err != nil {
                log.Fatal(err)
        }
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Poslední výsledky benchmarků a shrnutí na závěr</h2>

<p>Naposledy se podívejme na výsledky benchmarků, tentokrát pro poslední
demonstrační příklad popsaný <a href="#k17">v&nbsp;předchozí kapitole</a>.
Podle očekávání se jedná o nejpomalejší možný způsob:</p>

<pre>
21:19 $ <strong>go test -bench=.</strong>
&nbsp;
goos: linux
goarch: amd64
BenchmarkFillPixels/32x32-8               198350              5405 ns/op
BenchmarkFillPixels/128x128-8              14533             82587 ns/op
BenchmarkFillPixels/256x256-8               3627            330180 ns/op
BenchmarkFillPixels/512x512-8                910           1299179 ns/op
BenchmarkFillPixels/1024x1024-8              226           5240748 ns/op
BenchmarkFillPixels/2048x2048-8               52          20969468 ns/op
PASS
ok      _/home/ptisnovs/src/go-root/article_56/07_empty_image_high_level        8.557s
</pre>

<p>Výsledky přepsané do jediné tabulky, konkrétně pro rastrové obrázky o
rozlišení 2048&times;2048 pixelů:</p>

<table>
<tr><th>Metoda</th><th>Čas (ns)</th></tr>
<tr><td>Implementace v&nbsp;Go, optimalizováno</td><td>&ensp;5427221</td></tr>
<tr><td>Implementace v&nbsp;Go, neoptimalizováno</td><td>&ensp;9837822</td></tr>
<tr><td>Naivní implementace v&nbsp;assembleru</td><td>&ensp;9858778</td></tr>
<tr><td>Reorganizace vnitřní smyčky, přístup po bajtech</td><td>&ensp;9990900</td></tr>
<tr><td>Přístup po čtyřbajtových slovech</td><td>&ensp;1746510</td></tr>
<tr><td>Použití řetězcových operací</td><td>&ensp;1081754</td></tr>
<tr><td>Vektorové instrukce</td><td>&ensp;1077157</td></tr>
<tr><td>Vysokoúrovňový přístup</td><td>20969468</td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně šest až sedm megabajtů), můžete namísto toho použít odkazy na
jednotlivé demonstrační příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_empty_image_go/empty_image.go</td><td>implementace vyplnění obrázku v&nbsp;Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/01_empty_image_go/empty_image.go">https://github.com/tisnik/go-root/blob/master/article_56/01_empty_image_go/empty_image.go</a></td></tr>
<tr><td> 2</td><td>01_empty_image_go/empty_image_test.go</td><td>benchmark ke zdrojovému kódu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/01_empty_image_go/empty_image_test.go">https://github.com/tisnik/go-root/blob/master/article_56/01_empty_image_go/empty_image_test.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>02_empty_image_asm/empty_image.go</td><td>volání vyplnění obrázku v&nbsp;Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/02_empty_image_asm/empty_image.go">https://github.com/tisnik/go-root/blob/master/article_56/02_empty_image_asm/empty_image.go</a></td></tr>
<tr><td> 4</td><td>02_empty_image_asm/empty_image_test.go</td><td>benchmark ke zdrojovému kódu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/02_empty_image_asm/empty_image_test.go">https://github.com/tisnik/go-root/blob/master/article_56/02_empty_image_asm/empty_image_test.go</a></td></tr>
<tr><td> 5</td><td>02_empty_image_asm/fill_pixels_amd64.s</td><td>implementace vyplnění obrázku v&nbsp;assembleru (po bajtech)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/02_empty_image_asm/fill_pixels_amd64.s">https://github.com/tisnik/go-root/blob/master/article_56/02_empty_image_asm/fill_pixels_amd64.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>03_empty_image_asm/empty_image.go</td><td>implementace vyplnění obrázku v&nbsp;Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/03_empty_image_asm/empty_image.go">https://github.com/tisnik/go-root/blob/master/article_56/03_empty_image_asm/empty_image.go</a></td></tr>
<tr><td> 7</td><td>03_empty_image_asm/empty_image_test.go</td><td>benchmark ke zdrojovému kódu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/03_empty_image_asm/empty_image_test.go">https://github.com/tisnik/go-root/blob/master/article_56/03_empty_image_asm/empty_image_test.go</a></td></tr>
<tr><td> 8</td><td>03_empty_image_asm/fill_pixels_amd64.s</td><td>implementace vyplnění obrázku v&nbsp;assembleru (po bajtech)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/03_empty_image_asm/fill_pixels_amd64.s">https://github.com/tisnik/go-root/blob/master/article_56/03_empty_image_asm/fill_pixels_amd64.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>04_empty_image_asm/empty_image.go</td><td>implementace vyplnění obrázku v&nbsp;Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/04_empty_image_asm/empty_image.go">https://github.com/tisnik/go-root/blob/master/article_56/04_empty_image_asm/empty_image.go</a></td></tr>
<tr><td>10</td><td>04_empty_image_asm/empty_image_test.go</td><td>benchmark ke zdrojovému kódu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/04_empty_image_asm/empty_image_test.go">https://github.com/tisnik/go-root/blob/master/article_56/04_empty_image_asm/empty_image_test.go</a></td></tr>
<tr><td>11</td><td>04_empty_image_asm/fill_pixels_amd64.s</td><td>implementace vyplnění obrázku v&nbsp;assembleru (po 4 bajtech)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/04_empty_image_asm/fill_pixels_amd64.s">https://github.com/tisnik/go-root/blob/master/article_56/04_empty_image_asm/fill_pixels_amd64.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td>05_empty_image_asm/empty_image.go</td><td>implementace vyplnění obrázku v&nbsp;Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/05_empty_image_asm/empty_image.go">https://github.com/tisnik/go-root/blob/master/article_56/05_empty_image_asm/empty_image.go</a></td></tr>
<tr><td>13</td><td>05_empty_image_asm/empty_image_test.go</td><td>benchmark ke zdrojovému kódu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/05_empty_image_asm/empty_image_test.go">https://github.com/tisnik/go-root/blob/master/article_56/05_empty_image_asm/empty_image_test.go</a></td></tr>
<tr><td>14</td><td>05_empty_image_asm/fill_pixels_amd64.s</td><td>implementace vyplnění obrázku v&nbsp;assembleru (rep stosq)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/05_empty_image_asm/fill_pixels_amd64.s">https://github.com/tisnik/go-root/blob/master/article_56/05_empty_image_asm/fill_pixels_amd64.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>06_empty_image_go_memset/empty_image.go</td><td>implementace vyplnění obrázku přes knihovnu go-memset</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/06_empty_image_go_memset/empty_image.go">https://github.com/tisnik/go-root/blob/master/article_56/06_empty_image_go_memset/empty_image.go</a></td></tr>
<tr><td>16</td><td>06_empty_image_go_memset/empty_image_test.go</td><td>benchmark ke zdrojovému kódu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/06_empty_image_go_memset/empty_image_test.go">https://github.com/tisnik/go-root/blob/master/article_56/06_empty_image_go_memset/empty_image_test.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>slices.go</td><td>práce s&nbsp;řezy</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_56/slices.go">https://github.com/tisnik/go-root/blob/master/article_56/slices.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Golang Guide: A List of Top Golang Frameworks, IDEs &amp; Tools<br />
<a href="https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/">https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/</a>
</li>

<li>Repositář projektu Gift<br />
<a href="https://github.com/disintegration/gift">https://github.com/disintegration/gift</a>
</li>

<li>Dokumentace k&nbsp;projektu Gift<br />
<a href="https://godoc.org/github.com/disintegration/gift">https://godoc.org/github.com/disintegration/gift</a>
</li>

<li>Online x86 / x64 Assembler and Disassembler<br />
<a href="https://defuse.ca/online-x86-assembler.htm#disassembly2">https://defuse.ca/online-x86-assembler.htm#disassembly2</a>
</li>

<li>The Design of the Go Assembler<br />
<a href="https://talks.golang.org/2016/asm.slide#1">https://talks.golang.org/2016/asm.slide#1</a>
</li>

<li>A Quick Guide to Go's Assembler<br />
<a href="https://golang.org/doc/asm">https://golang.org/doc/asm</a>
</li>

<li>AssemblyPolicy<br />
<a href="https://github.com/golang/go/wiki/AssemblyPolicy">https://github.com/golang/go/wiki/AssemblyPolicy</a>
</li>

<li>Geohash in Golang Assembly<br />
<a href="https://mmcloughlin.com/posts/geohash-assembly">https://mmcloughlin.com/posts/geohash-assembly</a>
</li>

<li>Command objdump<br />
<a href="https://golang.org/cmd/objdump/">https://golang.org/cmd/objdump/</a>
</li>

<li>Assembly<br />
<a href="https://goroutines.com/asm">https://goroutines.com/asm</a>
</li>

<li>Go &amp; Assembly<br />
<a href="http://www.doxsey.net/blog/go-and-assembly">http://www.doxsey.net/blog/go-and-assembly</a>
</li>

<li>A Foray Into Go Assembly Programming<br />
<a href="https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming/">https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming/</a>
</li>

<li>Golang Capturing log.Println And fmt.Println Output<br />
<a href="https://medium.com/@hau12a1/golang-capturing-log-println-and-fmt-println-output-770209c791b4">https://medium.com/@hau12a1/golang-capturing-log-println-and-fmt-println-output-770209c791b4</a>
</li>

<li>Stránka projektu plotly<br />
<a href="https://plot.ly/">https://plot.ly/</a>
</li>

<li>Plotly JavaScript Open Source Graphing Library<br />
<a href="https://plot.ly/javascript/">https://plot.ly/javascript/</a>
</li>

<li>Domain coloring<br />
<a href="https://en.wikipedia.org/wiki/Domain_coloring">https://en.wikipedia.org/wiki/Domain_coloring</a>
</li>

<li>Michael Fogleman's projects<br />
<a href="https://www.michaelfogleman.com/projects/tagged/graphics/">https://www.michaelfogleman.com/projects/tagged/graphics/</a>
</li>

<li>Color Graphs of Complex Functions<br />
<a href="https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html">https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html</a>
</li>

<li>A Gallery of Complex Functions<br />
<a href="http://wismuth.com/complex/gallery.html">http://wismuth.com/complex/gallery.html</a>
</li>

<li>package glot<br />
<a href="https://godoc.org/github.com/Arafatk/glot">https://godoc.org/github.com/Arafatk/glot</a>
</li>

<li>Gnuplotting: Output terminals<br />
<a href="http://www.gnuplotting.org/output-terminals/">http://www.gnuplotting.org/output-terminals/</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1">https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://blog.gopheracademy.com/advent-2018/introducing-glot/">https://blog.gopheracademy.com/advent-2018/introducing-glot/</a>
</li>

<li>Glot is a plotting library for Golang built on top of gnuplot<br />
<a href="https://github.com/Arafatk/glot">https://github.com/Arafatk/glot</a>
</li>

<li>Example plots (gonum/plot)<br />
<a href="https://github.com/gonum/plot/wiki/Example-plots">https://github.com/gonum/plot/wiki/Example-plots</a>
</li>

<li>A repository for plotting and visualizing data (gonum/plot)<br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>golang library to make https://chartjs.org/ plots<br />
<a href="https://github.com/brentp/go-chartjs">https://github.com/brentp/go-chartjs</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>The Gonum Numerical Computing Package<br />
<a href="https://www.gonum.org/post/introtogonum/">https://www.gonum.org/post/introtogonum/</a>
</li>

<li>Gomacro na GitHubu<br />
<a href="https://github.com/cosmos72/gomacro">https://github.com/cosmos72/gomacro</a>
</li>

<li>gophernotes - Use Go in Jupyter notebooks and nteract<br />
<a href="https://github.com/gopherdata/gophernotes">https://github.com/gopherdata/gophernotes</a>
</li>

<li>gonum<br />
<a href="https://github.com/gonum">https://github.com/gonum</a>
</li>

<li>go-gota/gota -  DataFrames and data wrangling in Go (Golang)<br />
<a href="https://porter.io/github.com/go-gota/gota">https://porter.io/github.com/go-gota/gota</a>
</li>

<li>A repository for plotting and visualizing data <br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>Gonum Numerical Packages<br />
<a href="https://www.gonum.org/">https://www.gonum.org/</a>
</li>

<li>Stránky projektu MinIO<br />
<a href="https://min.io/">https://min.io/</a>
</li>

<li>MinIO Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-quickstart-guide.html">https://docs.min.io/docs/minio-quickstart-guide.html</a>
</li>

<li>MinIO Go Client API Reference<br />
<a href="https://docs.min.io/docs/golang-client-api-reference">https://docs.min.io/docs/golang-client-api-reference</a>
</li>

<li>MinIO Python Client API Reference<br />
<a href="https://docs.min.io/docs/python-client-api-reference.html">https://docs.min.io/docs/python-client-api-reference.html</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>MinIO Client Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a>
</li>

<li>Analýza kvality zdrojových kódů Minia<br />
<a href="https://goreportcard.com/report/github.com/minio/minio">https://goreportcard.com/report/github.com/minio/minio</a>
</li>

<li>This is MinIO<br />
<a href="https://www.youtube.com/watch?v=vF0lQh0XOCs">https://www.youtube.com/watch?v=vF0lQh0XOCs</a>
</li>

<li>Running MinIO Standalone<br />
<a href="https://www.youtube.com/watch?v=dIQsPCHvHoM">https://www.youtube.com/watch?v=dIQsPCHvHoM</a>
</li>

<li>"Amazon S3 Compatible Storage in Kubernetes" - Rob Girard, Principal Tech Marketing Engineer, Minio<br />
<a href="https://www.youtube.com/watch?v=wlpn8K0jJ4U">https://www.youtube.com/watch?v=wlpn8K0jJ4U</a>
</li>

<li>Ginkgo<br />
<a href="http://onsi.github.io/ginkgo/">http://onsi.github.io/ginkgo/</a>
</li>

<li>Gomega<br />
<a href="https://onsi.github.io/gomega/">https://onsi.github.io/gomega/</a>
</li>

<li>Ginkgo's Preferred Matcher Library na GitHubu<br />
<a href="https://github.com/onsi/gomega/">https://github.com/onsi/gomega/</a>
</li>

<li>Provided Matchers<br />
<a href="http://onsi.github.io/gomega/#provided-matchers">http://onsi.github.io/gomega/#provided-matchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku goexpect<br />
<a href="https://godoc.org/github.com/google/goexpect">https://godoc.org/github.com/google/goexpect</a>
</li>

<li>Balíček goexpect<br />
<a href="https://github.com/google/goexpect">https://github.com/google/goexpect</a>
</li>

<li>Balíček go-expect<br />
<a href="https://github.com/Netflix/go-expect">https://github.com/Netflix/go-expect</a>
</li>

<li>Balíček gexpect<br />
<a href="https://github.com/ThomasRooney/gexpect">https://github.com/ThomasRooney/gexpect</a>
</li>

<li>Expect (originál naprogramovaný v&nbsp;TCL)<br />
<a href="https://core.tcl-lang.org/expect/index">https://core.tcl-lang.org/expect/index</a>
</li>

<li>Expect (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Expect">https://en.wikipedia.org/wiki/Expect</a>
</li>

<li>Pexpect<br />
<a href="https://pexpect.readthedocs.io/en/stable/">https://pexpect.readthedocs.io/en/stable/</a>
</li>

<li>Golang SSH Client: Multiple Commands, Crypto &amp; Goexpect Examples<br />
<a href="http://networkbit.ch/golang-ssh-client/">http://networkbit.ch/golang-ssh-client/</a>
</li>

<li>goblin na GitHubu<br />
<a href="https://github.com/franela/goblin">https://github.com/franela/goblin</a>
</li>

<li>Mocha framework<br />
<a href="https://mochajs.org/">https://mochajs.org/</a>
</li>

<li>frisby na GitHubu<br />
<a href="https://github.com/verdverm/frisby">https://github.com/verdverm/frisby</a>
</li>

<li>package frisby<br />
<a href="https://godoc.org/github.com/verdverm/frisby">https://godoc.org/github.com/verdverm/frisby</a>
</li>

<li>Frisby alternatives and similar packages (generováno)<br />
<a href="https://go.libhunt.com/frisby-alternatives">https://go.libhunt.com/frisby-alternatives</a>
</li>

<li>Cucumber for golang<br />
<a href="https://github.com/DATA-DOG/godog">https://github.com/DATA-DOG/godog</a>
</li>

<li>How to Use Godog for Behavior-driven Development in Go<br />
<a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go</a>
</li>

<li>Comparative Analysis Of GoLang Testing Frameworks<br />
<a href="https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks">https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks</a>
</li>

<li>A Quick Guide to Testing in Golang<br />
<a href="https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/">https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/</a>
</li>

<li>Tom's Obvious, Minimal Language.<br />
<a href="https://github.com/toml-lang/toml">https://github.com/toml-lang/toml</a>
</li>

<li>xml.org<br />
<a href="http://www.xml.org/">http://www.xml.org/</a>
</li>

<li>Soubory .properties<br />
<a href="https://en.wikipedia.org/wiki/.properties">https://en.wikipedia.org/wiki/.properties</a>
</li>

<li>Soubory INI<br />
<a href="https://en.wikipedia.org/wiki/INI_file">https://en.wikipedia.org/wiki/INI_file</a>
</li>

<li>JSON to YAML<br />
<a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a>
</li>

<li>Data Format Converter<br />
<a href="https://toolkit.site/format.html">https://toolkit.site/format.html</a>
</li>

<li>Viper na GitHubu<br />
<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>
</li>

<li>GoDotEnv na GitHubu<br />
<a href="https://github.com/joho/godotenv">https://github.com/joho/godotenv</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

