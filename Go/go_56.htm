<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
package main

func GetLen(b []byte) int {
        return len(b)
}

func GetCap(b []byte) int {
        return cap(b)
}

func main() {
        var x []byte = []byte{1, 2, 3}
        println(GetLen(x))
        println(GetCap(x))
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
$ <strong>go build -gcflags '-l' slices.go</strong>
</pre>

<pre>
$ <strong>go tool objdump -S -s GetLen ./slices </strong>
&nbsp;
TEXT main.GetLen(SB) /home/ptisnovs/src/go-root/article_56/slices.go
        return len(b)
  0x452330              488b442410              MOVQ 0x10(SP), AX
  0x452335              4889442420              MOVQ AX, 0x20(SP)
  0x45233a              c3                      RET
</pre>

<pre>
$ <strong>go tool objdump -S -s GetCap ./slices </strong>
TEXT main.GetCap(SB) /home/ptisnovs/src/go-root/article_56/slices.go
        return cap(b)
  0x452340              488b442418              MOVQ 0x18(SP), AX
  0x452345              4889442420              MOVQ AX, 0x20(SP)
  0x45234a              c3                      RET
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
package main
  
import (
        "image"
        "image/png"
        "log"
        "os"
)

const DestinationImageFileName = "empty.png"

func saveImage(filename string, img image.Image) error {
        outfile, err := os.Create(filename)
        if err != nil {
                return err
        }
        defer outfile.Close()

        png.Encode(outfile, img)
        return nil
}

func fillPixels(pixels []uint8) {
        for i := 0; i < len(pixels); i++ {
                pixels[i] = 255
        }
}

func main() {
        destinationImage := image.NewRGBA(image.Rect(0, 0, 256, 256))

        fillPixels(destinationImage.Pix)

        err := saveImage(DestinationImageFileName, destinationImage)
        if err != nil {
                log.Fatal(err)
        }
}
</pre>

<pre>
TEXT main.fillPixels(SB) /home/ptisnovs/src/go-root/article_56/01_no_op_filter.go
        for i := 0; i < len(pixels); i++ {
  0x4b87b0              488b442410              MOVQ 0x10(SP), AX
  0x4b87b5              488b4c2408              MOVQ 0x8(SP), CX
  0x4b87ba              31d2                    XORL DX, DX
  0x4b87bc              eb07                    JMP 0x4b87c5
                pixels[i] = 255
  0x4b87be              c60411ff                MOVB $0xff, 0(CX)(DX*1)
        for i := 0; i < len(pixels); i++ {
  0x4b87c2              48ffc2                  INCQ DX
  0x4b87c5              4839c2                  CMPQ AX, DX
  0x4b87c8              7cf4                    JL 0x4b87be
  0x4b87ca              c3                      RET
</pre>

<pre>
package main
  
import (
        "fmt"
        "image"
        "testing"
)

var sizes = []int{32, 128, 256, 512, 1024, 2048}

func BenchmarkFillPixels(b *testing.B) {
        for _, size := range sizes {
                sizeStr := fmt.Sprintf("%dx%d", size, size)
                b.Run(sizeStr, func(b *testing.B) {
                        destinationImage := image.NewRGBA(image.Rect(0, 0, size, size))

                        b.ResetTimer()
                        fillPixels(destinationImage.Pix)

                        for i := 0; i < b.N; i++ {
                                fillPixels(destinationImage.Pix)
                        }
                })
        }
}
</pre>

<pre>
20:20 $ go test -bench=.
goos: linux
goarch: amd64
BenchmarkFillPixels/32x32-8               985530              1194 ns/op
BenchmarkFillPixels/128x128-8              57682             20843 ns/op
BenchmarkFillPixels/256x256-8              14215             83921 ns/op
BenchmarkFillPixels/512x512-8               3368            337089 ns/op
BenchmarkFillPixels/1024x1024-8              866           1369216 ns/op
BenchmarkFillPixels/2048x2048-8              218           5427221 ns/op
PASS
ok      _/home/ptisnovs/src/go-root/article_56/01_empty_image_go        9.810s
</pre>

<pre>
20:22 $ go test -gcflags '-l' -bench=.
goos: linux
goarch: amd64
BenchmarkFillPixels/32x32-8               493587              2390 ns/op
BenchmarkFillPixels/128x128-8              31555             38150 ns/op
BenchmarkFillPixels/256x256-8               7726            152297 ns/op
BenchmarkFillPixels/512x512-8               1915            609991 ns/op
BenchmarkFillPixels/1024x1024-8              482           2444177 ns/op
BenchmarkFillPixels/2048x2048-8              120           9837822 ns/op
PASS
ok      _/home/ptisnovs/src/go-root/article_56/01_empty_image_go        9.372s
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
package main
  
import (
        "image"
        "image/png"
        "log"
        "os"
)

const DestinationImageFileName = "empty.png"

func saveImage(filename string, img image.Image) error {
        outfile, err := os.Create(filename)
        if err != nil {
                return err
        }
        defer outfile.Close()

        png.Encode(outfile, img)
        return nil
}

func fillPixels(pixels []uint8)

func main() {
        destinationImage := image.NewRGBA(image.Rect(0, 0, 256, 256))

        fillPixels(destinationImage.Pix)

        err := saveImage(DestinationImageFileName, destinationImage)
        if err != nil {
                log.Fatal(err)
        }
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
TEXT ·fillPixels(SB),7,$0
        MOVQ pix_data+0(FP), CX  // adresa
        MOVQ pix_len+8(FP), AX   // delka
        XORL DX, DX              // pocitadlo
        JMP  NEXT                // reseni problemu len(pixels)==0

LOOP:
        MOVB $0xff, 0(CX)(DX*1)  // zapis bajtu
        INCQ DX                  // zvyseni hodnoty pocitadla
NEXT:   CMPQ DX, AX              // porovnani s delkou rezu
        JL LOOP                  // pocitadlo mensi? ok, skok
        RET
</pre>

<pre>
20:23 $ go test -bench=.
goos: linux
goarch: amd64
pkg: empty_image
BenchmarkFillPixels/32x32-8               422341              2420 ns/op
BenchmarkFillPixels/128x128-8              31546             38293 ns/op
BenchmarkFillPixels/256x256-8               7755            152968 ns/op
BenchmarkFillPixels/512x512-8               1930            608001 ns/op
BenchmarkFillPixels/1024x1024-8              483           2444272 ns/op
BenchmarkFillPixels/2048x2048-8              120           9858778 ns/op
PASS
ok      empty_image     8.292s
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
TEXT ·fillPixels(SB),7,$0
        MOVQ pix_data+0(FP), CX  // adresa
        MOVQ pix_len+8(FP), AX   // delka
        XORL DX, DX              // offset

LOOP:
        MOVB $0xff, 0(CX)(DX*1)  // zapis bajtu
        INCQ DX                  // zvyseni hodnoty offsetu
        DECQ AX                  // zmenseni pocitadla
        JNZ LOOP                 // pocitadlo vetsi nez 0? ok, skok
        RET
</pre>

<pre>
20:24 $ go test -bench=.
goos: linux
goarch: amd64
pkg: empty_image
BenchmarkFillPixels/32x32-8               498303              2380 ns/op
BenchmarkFillPixels/128x128-8              31570             38094 ns/op
BenchmarkFillPixels/256x256-8               7450            152076 ns/op
BenchmarkFillPixels/512x512-8               1927            610624 ns/op
BenchmarkFillPixels/1024x1024-8              478           2522056 ns/op
BenchmarkFillPixels/2048x2048-8              117           9990900 ns/op
PASS
ok      empty_image     9.467s
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
TEXT ·fillPixels(SB),7,$0
        MOVQ pix_data+0(FP), CX  // adresa
        MOVQ pix_len+8(FP), AX   // delka
        XORL DX, DX              // offset
        MOVD $0xffffffff, BX     // zapisovana barva pixelu (RGBA)

LOOP:
        MOVD BX, 0(CX)(DX*1)     // zapis bajtu
        ADDQ $4, DX              // zvyseni hodnoty offsetu
        SUBQ $4, AX              // zmenseni pocitadla
        JNZ LOOP                 // pocitadlo vetsi nez 0? ok, skok
        RET
</pre>

<pre>
20:24 $ go test -bench=.
goos: linux
goarch: amd64
pkg: empty_image
BenchmarkFillPixels/32x32-8              3501494               324 ns/op
BenchmarkFillPixels/128x128-8             218844              5479 ns/op
BenchmarkFillPixels/256x256-8              52108             23002 ns/op
BenchmarkFillPixels/512x512-8              12303             97159 ns/op
BenchmarkFillPixels/1024x1024-8             3022            390965 ns/op
BenchmarkFillPixels/2048x2048-8              662           1746510 ns/op
PASS
ok      empty_image     8.928s
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
TEXT ·fillPixels(SB),7,$0
        MOVQ pix_data+0(FP), DI  // adresa
        MOVQ pix_len+8(FP), CX   // delka
        SHRQ $2, CX              // delime ctyrmi
        MOVD $0xffffffff, AX     // zapisovana barva pixelu (RGBA)

        CLD                      // smer zapisu
        REP                      // opakovani CX-krat
        STOSL                    // zapis ctyrbajtoveho slova
        RET
</pre>

<pre>
20:24 $ go test -bench=.
goos: linux
goarch: amd64
pkg: empty_image
BenchmarkFillPixels/32x32-8             22048845                47.9 ns/op
BenchmarkFillPixels/128x128-8            1239043               954 ns/op
BenchmarkFillPixels/256x256-8             263758              4494 ns/op
BenchmarkFillPixels/512x512-8              58672             20276 ns/op
BenchmarkFillPixels/1024x1024-8            14119             85268 ns/op
BenchmarkFillPixels/2048x2048-8             1090           1081754 ns/op
PASS
ok      empty_image     9.272s
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Golang Guide: A List of Top Golang Frameworks, IDEs & Tools<br />
<a href="https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/">https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/</a>
</li>

<li>Repositář projektu Gift<br />
<a href="https://github.com/disintegration/gift">https://github.com/disintegration/gift</a>
</li>

<li>Dokumentace k&nbsp;projektu Gift<br />
<a href="https://godoc.org/github.com/disintegration/gift">https://godoc.org/github.com/disintegration/gift</a>
</li>

<li>Online x86 / x64 Assembler and Disassembler<br />
<a href="https://defuse.ca/online-x86-assembler.htm#disassembly2">https://defuse.ca/online-x86-assembler.htm#disassembly2</a>
</li>

<li>The Design of the Go Assembler<br />
<a href="https://talks.golang.org/2016/asm.slide#1">https://talks.golang.org/2016/asm.slide#1</a>
</li>

<li>A Quick Guide to Go's Assembler<br />
<a href="https://golang.org/doc/asm">https://golang.org/doc/asm</a>
</li>

<li>AssemblyPolicy<br />
<a href="https://github.com/golang/go/wiki/AssemblyPolicy">https://github.com/golang/go/wiki/AssemblyPolicy</a>
</li>

<li>Geohash in Golang Assembly<br />
<a href="https://mmcloughlin.com/posts/geohash-assembly">https://mmcloughlin.com/posts/geohash-assembly</a>
</li>

<li>Command objdump<br />
<a href="https://golang.org/cmd/objdump/">https://golang.org/cmd/objdump/</a>
</li>

<li>Assembly<br />
<a href="https://goroutines.com/asm">https://goroutines.com/asm</a>
</li>

<li>Go &amp; Assembly<br />
<a href="http://www.doxsey.net/blog/go-and-assembly">http://www.doxsey.net/blog/go-and-assembly</a>
</li>

<li>A Foray Into Go Assembly Programming<br />
<a href="https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming/">https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming/</a>
</li>

<li>Golang Capturing log.Println And fmt.Println Output<br />
<a href="https://medium.com/@hau12a1/golang-capturing-log-println-and-fmt-println-output-770209c791b4">https://medium.com/@hau12a1/golang-capturing-log-println-and-fmt-println-output-770209c791b4</a>
</li>

<li>Stránka projektu plotly<br />
<a href="https://plot.ly/">https://plot.ly/</a>
</li>

<li>Plotly JavaScript Open Source Graphing Library<br />
<a href="https://plot.ly/javascript/">https://plot.ly/javascript/</a>
</li>

<li>Domain coloring<br />
<a href="https://en.wikipedia.org/wiki/Domain_coloring">https://en.wikipedia.org/wiki/Domain_coloring</a>
</li>

<li>Michael Fogleman's projects<br />
<a href="https://www.michaelfogleman.com/projects/tagged/graphics/">https://www.michaelfogleman.com/projects/tagged/graphics/</a>
</li>

<li>Color Graphs of Complex Functions<br />
<a href="https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html">https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html</a>
</li>

<li>A Gallery of Complex Functions<br />
<a href="http://wismuth.com/complex/gallery.html">http://wismuth.com/complex/gallery.html</a>
</li>

<li>package glot<br />
<a href="https://godoc.org/github.com/Arafatk/glot">https://godoc.org/github.com/Arafatk/glot</a>
</li>

<li>Gnuplotting: Output terminals<br />
<a href="http://www.gnuplotting.org/output-terminals/">http://www.gnuplotting.org/output-terminals/</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1">https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://blog.gopheracademy.com/advent-2018/introducing-glot/">https://blog.gopheracademy.com/advent-2018/introducing-glot/</a>
</li>

<li>Glot is a plotting library for Golang built on top of gnuplot<br />
<a href="https://github.com/Arafatk/glot">https://github.com/Arafatk/glot</a>
</li>

<li>Example plots (gonum/plot)<br />
<a href="https://github.com/gonum/plot/wiki/Example-plots">https://github.com/gonum/plot/wiki/Example-plots</a>
</li>

<li>A repository for plotting and visualizing data (gonum/plot)<br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>golang library to make https://chartjs.org/ plots<br />
<a href="https://github.com/brentp/go-chartjs">https://github.com/brentp/go-chartjs</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>The Gonum Numerical Computing Package<br />
<a href="https://www.gonum.org/post/introtogonum/">https://www.gonum.org/post/introtogonum/</a>
</li>

<li>Gomacro na GitHubu<br />
<a href="https://github.com/cosmos72/gomacro">https://github.com/cosmos72/gomacro</a>
</li>

<li>gophernotes - Use Go in Jupyter notebooks and nteract<br />
<a href="https://github.com/gopherdata/gophernotes">https://github.com/gopherdata/gophernotes</a>
</li>

<li>gonum<br />
<a href="https://github.com/gonum">https://github.com/gonum</a>
</li>

<li>go-gota/gota -  DataFrames and data wrangling in Go (Golang)<br />
<a href="https://porter.io/github.com/go-gota/gota">https://porter.io/github.com/go-gota/gota</a>
</li>

<li>A repository for plotting and visualizing data <br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>Gonum Numerical Packages<br />
<a href="https://www.gonum.org/">https://www.gonum.org/</a>
</li>

<li>Stránky projektu MinIO<br />
<a href="https://min.io/">https://min.io/</a>
</li>

<li>MinIO Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-quickstart-guide.html">https://docs.min.io/docs/minio-quickstart-guide.html</a>
</li>

<li>MinIO Go Client API Reference<br />
<a href="https://docs.min.io/docs/golang-client-api-reference">https://docs.min.io/docs/golang-client-api-reference</a>
</li>

<li>MinIO Python Client API Reference<br />
<a href="https://docs.min.io/docs/python-client-api-reference.html">https://docs.min.io/docs/python-client-api-reference.html</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>MinIO Client Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a>
</li>

<li>Analýza kvality zdrojových kódů Minia<br />
<a href="https://goreportcard.com/report/github.com/minio/minio">https://goreportcard.com/report/github.com/minio/minio</a>
</li>

<li>This is MinIO<br />
<a href="https://www.youtube.com/watch?v=vF0lQh0XOCs">https://www.youtube.com/watch?v=vF0lQh0XOCs</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

