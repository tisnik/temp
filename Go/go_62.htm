<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Go a 2D grafika - moduly sdl a img</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Go a 2D grafika - moduly sdl a img</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Základní datové struktury používané v&nbsp;knihovně SDL a rozhraní go-sdl2</a></p>
<p><a href="#k02">2. Double buffering a další technologie zajišťující plynulé zobrazování grafiky</a></p>
<p><a href="#k03">3. Použití funkcí pro překreslení scény v&nbsp;jazyku C</a></p>
<p><a href="#k04">4. Překreslení vybrané části scény</a></p>
<p><a href="#k05">5. Převod předchozích demonstračních příkladů do jazyka Go</a></p>
<p><a href="#k06">6. Práce s&nbsp;rastrovými obrázky &ndash; základ pro tvorbu 2D her</a></p>
<p><a href="#k07">7. Vznik operace BitBLT (Blit)</a></p>
<p><a href="#k08">8. Použití operace BitBLT (Blit) v&nbsp;knihovně SDL2</a></p>
<p><a href="#k09">9. Přenos rastrových dat pomocí funkce <strong>SDL_BlitSurface</strong></a></p>
<p><a href="#k10">10. Posun obrázku, ořezání části rastrových dat, specifikace cílové oblasti</a></p>
<p><a href="#k11">11. Převod předchozích demonstračních příkladů do jazyka Go</a></p>
<p><a href="#k12">12. Změna měřítka obrázku v&nbsp;průběhu vykreslování</a></p>
<p><a href="#k13">13. Převod předchozích demonstračních příkladů do jazyka Go</a></p>
<p><a href="#k14">14. Načtení bitmap s&nbsp;alfa kanálem uložených ve formátu PNG</a></p>
<p><a href="#k15">15. Modifikace globální alfa složky, popř.&nbsp;barvových kanálů</a></p>
<p><a href="#k16">*** 16. Specifikace režimu míchání barev</a></p>
<p><a href="#k17">*** 17. Změna barev jednotlivých pixelů</a></p>
<p><a href="#k18">*** 18. Jedna z&nbsp;možných realizací funkce <strong>putpixel</strong></a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Základní datové struktury používané v&nbsp;knihovně SDL a rozhraní go-sdl2</h2>

<p>Ve druhém článku s&nbsp;popisem rozhraní mezi programovacím jazykem Go a
knihovnou SDL (<i>Simple DirectMedia Layer</i>) si ukážeme základní možnosti
používané při tvorbě 2D grafiky &ndash; her, multimediálních aplikací apod.
V&nbsp;knihovně Go, přesněji řečeno v&nbsp;její originální céčkové podobě, se
velmi intenzivně pracuje s&nbsp;několika datovými typy:</p>

<ol>
<li><strong>SDL_Point</strong> představuje bod v&nbsp;rovině rastrového obrázku</li>
<li><strong>SDL_Rect</strong> představuje obdélník v&nbsp;rovině rastrového obrázku</li>
<li><strong>SDL_Surface</strong> představuje plochu, do které lze kreslit</li>
<li><strong>SDL_Texture</strong> představuje texturu (speciální typ plochy umístěné v&nbsp;paměti grafického akcelerátoru)</li>
</ol>

<p>První datová struktura <strong>SDL_Point</strong> je interně velmi
jednoduchá:</p>

<table>
<tr><th>Atribut</th><th>Význam</th></tr>
<tr><td>x</td><td>x-ová souřadnice</td></tr>
<tr><td>y</td><td>y-ová souřadnice</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: tuto datovou strukturu v&nbsp;dnešních
demonstračních příkladech prozatím nepoužijeme.</div></p>

<p>Možná ještě důležitější je struktura <strong>SDL_Rect</strong>, která
obsahuje souřadnice rohu obdélníka a jeho rozměry (měřené v&nbsp;pixelech):</p>

<table>
<tr><th>Atribut</th><th>Význam</th></tr>
<tr><td>x</td><td>x-ová souřadnice levého horního rohu obdélníka</td></tr>
<tr><td>y</td><td>y-ová souřadnice levého horního rohu obdélníka</td></tr>
<tr><td>w</td><td>šířka obdélníka</td></tr>
<tr><td>h</td><td>výška obdélníka</td></tr>
</table>

<p>V&nbsp;demonstračních příkladech se prakticky vždy setkáme se strukturou
<strong>SDL_Surface</strong>:</p>

<table>
<tr><th>Atribut</th><th>Význam</th></tr>
<tr><td>flags</td><td>pro interní použití</td></tr>
<tr><td>format</td><td>formát uložení pixelů</td></tr>
<tr><td>w</td><td>šířka kreslicí plochy</td></tr>
<tr><td>h</td><td>výška kreslicí plochy</td></tr>
<tr><td>pitch</td><td>délka jednoho obrazového řádku (<i>scanline</i>) v&nbsp;bajtech</td></tr>
<tr><td>pixels</td><td>blok obsahující barvy všech pixelů</td></tr>
<tr><td>userdata</td><td>ukazatel nastavovaný uživatelem (může ukazovat na cokoli)</td></tr>
<tr><td>locked</td><td>použito interně při zamykání plochy</td></tr>
<tr><td>lock_data</td><td>použito interně při zamykání plochy</td></tr>
<tr><td>clip_rect</td><td>oblast ořezání pixelů z&nbsp;plochy</td></tr>
<tr><td>map</td><td>pro interní použití</td></tr>
<tr><td>refcount</td><td>počet referencí na plochu, může být nastavena a použita aplikací</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: struktura <strong>SDL_Texture</strong>
je použita pro uložení rastrových dat v&nbsp;paměti grafického akcelerátoru.
Jedná se o obdobu <strong>SDL_Surface</strong>, ovšem vnitřní atributy textury
většinou nejsou exportovány a nejsou tudíž (alespoň oficiálně) viditelné
z&nbsp;uživatelských programů. Texturami se budeme podrobněji zabývat příště,
protože jsou v&nbsp;praxi velmi užitečné.</div></p>

<p>V&nbsp;jazyce Go vypadají výše uvedené datové struktury nepatrně
odlišně:</p>

<pre>
type <strong>Point</strong> struct {
        X int32 // the x coordinate of the point
        Y int32 // the y coordinate of the point
}
</pre>

<pre>
type <strong>Rect</strong> struct {
        X int32 // the x location of the rectangle's upper left corner
        Y int32 // the y location of the rectangle's upper left corner
        W int32 // the width of the rectangle
        H int32 // the height of the rectangle
}
</pre>

<pre>
type <strong>Surface</strong> struct {
        flags    uint32         // (internal use)
        Format   *PixelFormat   // the format of the pixels stored in the surface (read-only) (https://wiki.libsdl.org/SDL_PixelFormat)
        W        int32          // the width in pixels (read-only)
        H        int32          // the height in pixels (read-only)
        Pitch    int32          // the length of a row of pixels in bytes (read-only)
        pixels   unsafe.Pointer // the pointer to the actual pixel data; use Pixels() for access
        UserData unsafe.Pointer // an arbitrary pointer you can set
        locked   int32          // used for surfaces that require locking (internal use)
        lockData unsafe.Pointer // used for surfaces that require locking (internal use)
        ClipRect Rect           // a Rect structure used to clip blits to the surface which can be set by SetClipRect() (read-only)
        _        unsafe.Pointer // map; info for fast blit mapping to other surfaces (internal use)
        RefCount int32          // reference count that can be incremented by the application
}
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Double buffering a další technologie zajišťující plynulé zobrazování grafiky</h2>

<p>Aby při vykreslování herní scény nedocházelo k&nbsp;nepříjemnému
poblikávání, využívá knihovna SDL několik technik, které ovšem v&nbsp;žádném
případě nejsou nijak nové &ndash; v&nbsp;oblasti počítačové grafiky a
multimédií se zcela běžně používají již po několik desetiletí. První
z&nbsp;těchto technik je takzvaný <i>double buffering</i> (pokud je ovšem pro
zadaný grafický režim podporován, což dnes v&nbsp;naprosté většině případů je)
popř.&nbsp;vykreslení (předkreslení) scény do takzvaného <i>offscreen
bufferu</i>, tj.&nbsp;do neviditelného bufferu umístěného buď v&nbsp;operační
paměti či v&nbsp;ideálním případě ve video paměti s&nbsp;následným blokovým
přenosem dat do zobrazované části video paměti (s&nbsp;případným čekáním na
vertikální zatemnění &ndash; viz další text).</p>

<img width="400" height="240" src="https://i.iinfo.cz/r/photos/opengl/opengl_13_3.gif" alt="Princip činnosti single-bufferingu a double-bufferingu">
<p><i>Obrázek 1: Princip činnosti single-bufferingu a
double-bufferingu.</i></p>

<p>Názvem <i>double buffering</i> se označuje známý a v&nbsp;počítačové grafice
již velmi dlouho využívaný postup, při němž se vykreslování grafického
uživatelského rozhraní aplikace popř.&nbsp;prostředí hry neprovádí přímo na
obrazovku, ale do pomocné bitmapy označované termínem <i>zadní buffer (back
buffer)</i>. Obrazovka, resp.&nbsp;přesněji řečeno bitmapa zobrazená na
obrazovce a tedy viditelná uživateli, je při použití double bufferingu
označována termínem <i>přední buffer (front buffer)</i>. Vykreslování je do
neviditelného zadního bufferu prováděno z&nbsp;toho důvodu, aby uživatel
neviděl nepříjemné poblikávání obrazu při mazání/kreslení pozadí a taktéž při
postupném přikreslování všech dalších grafických prvků, které mají být na
obrazovce viditelné.</p>

<p>Po dokončení vykreslení všech grafických objektů do zadního bufferu je však
nutné tento buffer učinit viditelným. To lze provést dvěma způsoby.
V&nbsp;případě, že je zadní buffer uložen v&nbsp;paměti grafické karty, je
většinou možné jednoduše prohodit role předního a zadního bufferu, a to velmi
jednoduchou operací nevyžadující žádné přenosy dat. Tento způsob se nazývá
<i>page flipping</i> a je samozřejmě podporován i v&nbsp;knihovně SDL, ovšem
v&nbsp;některých případech pouze při použití exkluzivního celoobrazovkového
režimu (prohození obsahu obou bufferů se typicky provádí ve chvíli takzvaného
vertikálního zatemnění &ndash; <i>vertical blank (VBLANK)</i> &ndash; tím se
mj.&nbsp;zabraňuje nepříjemnému jevu nazvanému <i>tearing</i>).</p>

<p><div class="rs-tip-major">Poznámka: synchronizace s&nbsp;vertikálním
zatemněním ve výsledku omezuje teoretický maximální počet zobrazených snímků za
sekundu. Většinou lze vypnout přes UI/CLI ovladače grafické karty.</div></p>

<p>Druhý způsob spočívá v&nbsp;blokovém přenosu obsahu celého zadního bufferu
do bufferu předního, a to operací typu <i>BitBlt (BLIT)</i>, s&nbsp;níž se
blíže seznámíme v&nbsp;dalším textu. Opět záleží na možnostech konkrétního
grafického subsystému i na způsobu uložení zadního bufferu, zda je tato operace
provedena přímo na grafickém akcelerátoru (což je samozřejmě mnohem rychlejší
řešení, navíc většinou zajišťuje, že nebude docházet k&nbsp;tearingu) či zda je
nutné přenášet obsah zadního bufferu do bufferu předního přes systémovou
sběrnici. V&nbsp;případě použití knihovny <i>SDL</i> není nutné se zabývat tím,
jaká konkrétní metoda se použije (to se řeší při inicializaci grafického
režimu, resp.&nbsp;nověji při otevírání okna), ale postačuje v&nbsp;programové
smyčce pouze používat funkce vypsané pod tímto odstavcem:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>SDL_UpdateWindowSurface</td><td>vykreslení plochy přiřazené k&nbsp;oknu na obrazovku</td></tr>
<tr><td>2</td><td>SDL_UpdateWindowSurfaceRects</td><td>kopie vybraných částí plochy přiřazení k&nbsp;oknu na obrazovku</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: druhá zmíněná funkce
<strong>SDL_UpdateWindowSurfaceRects</strong> umožňuje optimalizaci výkonu,
například ve chvíli, kdy se mění jen část obsahu obrazovky. Podrobnosti si
ukážeme v&nbsp;následujícím textu.</div></p>

<img src="https://i.iinfo.cz/images/224/kyrandia-2.png" class="image-243819" alt="kyrandia" height="200" width="320">
<p><i>Obrázek 2: Uživatelské rozhraní hry Kyrandia, ve kterém se typicky mění
pouze malý fragment obrazu (pohyb postavy, přemístění předmětu). Zde by se
mohla použít funkce <strong>SDL_UpdateWindowSurfaceRects</strong>.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Použití funkcí pro překreslení scény v&nbsp;jazyku C</h2>

<p>Podívejme se nyní na způsob použití výše zmíněných funkcí pojmenovaných
<strong>SDL_UpdateWindowSurface</strong> a
<strong>SDL_UpdateWindowSurfaceRects</strong>. Podobně jako minule, i dnes
začneme zdrojovým kódem napsaným z&nbsp;C, ze kterého bude odvozen kód
v&nbsp;Go.</p>

<p>První příklad již známe &ndash; pouze se v&nbsp;něm provedou tyto
operace:</p>

<ol>
<li>Inicializace SDL</li>
<li>Otevření okna a získání odkazu na primární kreslicí plochu</li>
<li>Vyplnění primární kreslicí plochy nazelenalou barvou</li>
<li>Zajištění překreslení obsahu <i>celého</i> okna funkcí <strong>SDL_UpdateWindowSurface</strong></li>
</ol>

<p><div class="rs-tip-major">Poznámka: mezi bodem 3 a 4 je schválně vloženo
čekání, aby bylo patrné, kdy ve skutečnosti k&nbsp;viditelné změně
dochází.</div></p>

*** image ***
<p><i>Obrázek 3: Obnovený obsah okna prvního demonstračního příkladu.</i></p>

<p>Úplný zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    SDL_Surface *primarySurface = NULL;
    SDL_Window  *window = NULL;
&nbsp;
    if (<u>SDL_Init</u>(SDL_INIT_VIDEO) &lt; 0) {
        puts("Error initializing SDL");
        puts(SDL_GetError());
        return 1;
    } 
&nbsp;
    window = <u>SDL_CreateWindow</u>("SDL2 example #1", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
&nbsp;
    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    primarySurface = <u>SDL_GetWindowSurface</u>(window);
&nbsp;
    if (!primarySurface) {
        puts("Error getting surface");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    <u>SDL_FillRect</u>(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
    <u>SDL_Delay</u>(1000);
&nbsp;
    <u>SDL_UpdateWindowSurface</u>(window);
&nbsp;
    <u>SDL_Delay</u>(5000);
&nbsp;
    <u>SDL_DestroyWindow</u>(window);
&nbsp;
    <u>SDL_Quit</u>();
    
    return 0;
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Překreslení vybrané části scény</h2>

<p>Můžeme si ovšem zvolit i odlišnou strategii a nechat překreslit pouze
určitou část scény. V&nbsp;tomto případě se namísto výše ukázané funkce
<strong>SDL_UpdateWindowSurface</strong> použije funkce nazvaná
<strong>SDL_UpdateWindowSurfaceRects</strong>, které se předají další dva
parametry &ndash; pole struktur typu <strong>Rect</strong> a počet těchto
struktur (protože v&nbsp;céčku pole neobsahují informaci o délce).
Nejjednodušší způsob použití s&nbsp;jediným obdélníkem:</p>

<pre>
SDL_Rect rects[1];
rects[0].x = WIDTH/4;
rects[0].y = HEIGHT/4;
rects[0].w = WIDTH/2;
rects[0].h = HEIGHT/2;
&nbsp;
<u>SDL_UpdateWindowSurfaceRects</u>(window, rects, 1);
</pre>

*** image ***
<p><i>Obrázek 4: Obnovená část obsahu okna druhého demonstračního příkladu. Pod
neobnovenou částí zůstala část obsahu terminálu.</i></p>

<p>Opět si pochopitelně ukážeme úplný zdrojový kód tohoto příkladu:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    SDL_Surface *primarySurface = NULL;
    SDL_Window  *window = NULL;
&nbsp;
    if (<u>SDL_Init</u>(SDL_INIT_VIDEO) &lt; 0) {
        puts("Error initializing SDL");
        puts(SDL_GetError());
        return 1;
    } 
&nbsp;
    window = <u>SDL_CreateWindow</u>("SDL2 example #2", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
&nbsp;
    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    primarySurface = <u>SDL_GetWindowSurface</u>(window);
&nbsp;
    if (!primarySurface) {
        puts("Error getting surface");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    <u>SDL_FillRect</u>(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
    <u>SDL_Delay</u>(1000);
&nbsp;
    {
        SDL_Rect rects[1];
        rects[0].x = WIDTH/4;
        rects[0].y = HEIGHT/4;
        rects[0].w = WIDTH/2;
        rects[0].h = HEIGHT/2;
&nbsp;
        sdl_updatewindowsurfacerects(window, rects, 1);
    }
&nbsp;
    <u>SDL_Delay</u>(5000);
&nbsp;
    <u>SDL_DestroyWindow</u>(window);
&nbsp;
    <u>SDL_Quit</u>();
&nbsp;   
    return 0;
}
</pre>

<p>Nic nám ovšem nebrání nechat překreslit oblast sestávající z&nbsp;většího
množství obdélníkových ploch, které se dokonce mohou překrývat:</p>

<pre>
#define BORDER 50
&nbsp;
SDL_Rect rects[2];
rects[0].x = BORDER;
rects[0].y = BORDER;
rects[0].w = WIDTH/2;
rects[0].h = HEIGHT/2;
&nbsp;
rects[1].x = WIDTH-WIDTH/2-BORDER;
rects[1].y = HEIGHT-HEIGHT/2-BORDER;
rects[1].w = WIDTH/2;
rects[1].h = HEIGHT/2;
&nbsp;
<u>SDL_UpdateWindowSurfaceRects</u>(window, rects, 2);
</pre>

*** image ***
<p><i>Obrázek 5: Obnovená část obsahu okna třetího demonstračního příkladu. Pod
neobnovenou částí zůstala část obsahu terminálu.</i></p>

<p>Opět si pro úplnost ukažme úplný výpis zdrojového kódu tohoto příkladu:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    SDL_Surface *primarySurface = NULL;
    SDL_Window  *window = NULL;
&nbsp;
    if (<u>SDL_Init</u>(SDL_INIT_VIDEO) &lt; 0) {
        puts("Error initializing SDL");
        puts(SDL_GetError());
        return 1;
    } 
&nbsp;
    window = <u>SDL_CreateWindow</u>("SDL2 example #3", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
&nbsp;
    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    primarySurface = <u>SDL_GetWindowSurface</u>(window);
&nbsp;
    if (!primarySurface) {
        puts("Error getting surface");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    <u>SDL_FillRect</u>(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
    <u>SDL_Delay</u>(1000);
&nbsp;
    {
#define BORDER 50
&nbsp;
        SDL_Rect rects[2];
        rects[0].x = BORDER;
        rects[0].y = BORDER;
        rects[0].w = WIDTH/2;
        rects[0].h = HEIGHT/2;
&nbsp;
        rects[1].x = WIDTH-WIDTH/2-BORDER;
        rects[1].y = HEIGHT-HEIGHT/2-BORDER;
        rects[1].w = WIDTH/2;
        rects[1].h = HEIGHT/2;
&nbsp;
        <u>SDL_UpdateWindowSurfaceRects</u>(window, rects, 2);
    }
&nbsp;
    <u>SDL_Delay</u>(5000);
&nbsp;
    <u>SDL_DestroyWindow</u>(window);
&nbsp;
    <u>SDL_Quit</u>();
&nbsp;   
    return 0;
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Převod předchozích demonstračních příkladů do jazyka Go</h2>

<p>Přepis předchozí trojice demonstračních příkladu do programovacího jazyka Go
je relativně snadný; výsledek bude (podobně jako minule) jednodušší, než
původní céčkový zdrojový kód. Pouze si musíme uvědomit, že se z&nbsp;některých
funkcí staly v&nbsp;Go metody a že můžeme s&nbsp;výhodou použít konstrukci
<strong>defer</strong>.</p>

<p>Přepis prvního příkladu &ndash; prázdné okno s&nbsp;vyplněnou plochou:</p>

<pre>
package <strong>main</strong>
&nbsp;
import "github.com/veandco/go-sdl2/sdl"
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("SDL2 example #1", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
        primarySurface.FillRect(nil, sdl.MapRGB(primarySurface.Format, 192, 255, 192))
        sdl.Delay(1000)
&nbsp;
        window.UpdateSurface()
        sdl.Delay(5000)
}
</pre>

<p>Přepis druhého příkladu &ndash; obnovení určité plochy okna:</p>

<pre>
package <strong>main</strong>
&nbsp;
import "github.com/veandco/go-sdl2/sdl"
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("SDL2 example #2", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
        primarySurface.FillRect(nil, sdl.MapRGB(primarySurface.Format, 192, 255, 192))
        sdl.Delay(1000)
&nbsp;
        var rects = []sdl.Rect{
                sdl.Rect{
                        X: width / 4,
                        Y: height / 4,
                        W: width / 2,
                        H: height / 2,
                },
        }
        window.UpdateSurfaceRects(rects)
        sdl.Delay(5000)
}
</pre>

<p>Přepis třetího příkladu &ndash; obnovení určité plochy okna:</p>

<pre>
package <strong>main</strong>
&nbsp;
import "github.com/veandco/go-sdl2/sdl"
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("SDL2 example #3", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
        primarySurface.FillRect(nil, sdl.MapRGB(primarySurface.Format, 192, 255, 192))
        sdl.Delay(1000)
&nbsp;
        const border = 50
&nbsp;
        var rects = []sdl.Rect{
                sdl.Rect{
                        X: border,
                        Y: border,
                        W: width / 2,
                        H: height / 2,
                },
                sdl.Rect{
                        X: width - width/2 - border,
                        Y: height - height/2 - border,
                        W: width / 2,
                        H: height / 2,
                },
        }
        window.UpdateSurfaceRects(rects)
        sdl.Delay(5000)
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Práce s&nbsp;rastrovými obrázky &ndash; základ pro tvorbu 2D her</h2>

<p>Většina historických i velká část soudobých počítačových her
s&nbsp;dvoudimenzionální (2D) grafikou je charakteristická tím, že objekty
v&nbsp;těchto hrách jsou reprezentovány s&nbsp;využitím rastrových obrázků
(bitmap) o různé velikosti, které se postupně vykreslují do vytvářené
dvoudimenzionální scény. Aby bylo přes některé části těchto rastrových obrázků
viditelné i pozadí, používají se tři metody pro zajištění úplné či částečné
průhlednosti. Buď je stanoveno, že určitá hodnota (tj.&nbsp;barva) pixelů má
být zcela průhledná (typicky se jedná o jasně fialovou barvu, která se
v&nbsp;typických scénách stejně nikde neobjevuje), dále je alternativně možné
jeden bit v&nbsp;hodnotě pixelu použít pro určení průhlednosti (typické pro
16bitovou hloubku, která se kupodivu stále u některých her používá), nebo se
může stanovit průhlednost pixelů doplněním bitmapy o takzvaný <i>alfa kanál
(alpha channel)</i>.</p>

*** image ***
<p><i>Obrázek 6: Některé starší herní konzole a domácí osmibitové mikropočítače
obsahovaly specializované čipy pro zobrazování malých pohyblivých bitmap
&ndash; spritů.</i></p>

<p>S&nbsp;využitím grafické operace <strong>BitBLT</strong> (<i>Bit Block
Transfer</i>) lze provádět, jak ostatně její název naznačuje, blokové přenosy
bitmap nebo jejich výřezů, popř.&nbsp;v&nbsp;rámci přenosu nad bitmapami
provádět různé další operace, například negaci barev zdrojové či cílové
bitmapy, provedení bitové operace AND, XOR atd. (posléze se přidalo i
zpracování alfa kanálu, o němž se zmíníme v&nbsp;dalších kapitolách). První
implementace operace <strong>BitBLT</strong> byla použita v&nbsp;roce 1975 ve
<i>Smalltalku-72</i> a od té doby ji najdeme prakticky v&nbsp;každé
implementaci tohoto programovacího jazyka, která obsahuje i knihovny pro práci
s&nbsp;grafikou (mj.&nbsp;se jedná i o <i>Squeak</i>). Pro <i>Smalltalk-74</i>
vytvořil Daniel Ingalls optimalizovanou variantu operace
<strong>BitBLT</strong> implementovanou v&nbsp;mikrokódu. Operace
<strong>BitBLT</strong> se tak stala součástí operačního systému a bylo ji
možné volat jak z&nbsp;assembleru, tak i z&nbsp;programů napsaných
v&nbsp;jazyce <i>BCPL</i> a samozřejmě i ze <i>Smalltalku</i> (právě tuto
implementaci můžeme považovat za vůbec první prakticky dostupnou grafickou
akceleraci). Posléze se díky své univerzalitě tato funkce rozšířila i do mnoha
dalších operačních systémů a grafických knihoven.</p>

*** image ***
<p><i>Obrázek 7: Rastrové obrázky (zde zvětšené), které tvoří základ jedné RPG.
Z&nbsp;jednoho velkého obrázku, který je typicky uložen v&nbsp;obrazové paměti,
lze operacemi typu Blit kopírovat jednotlivé části na obrazovku.</i></p>

<p>Vzhledem k&nbsp;tomu, že vykreslování rastrových obrázků do vytvářené 2D
scény je velmi často používaná operace, není příliš překvapující, že se
s&nbsp;touto operaci můžeme setkat v&nbsp;API mnoha grafických knihoven či
dokonce v&nbsp;API operačních systémů (asi nejznámějším příkladem <a
href="https://docs.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-bitblt">je
stejnojmenná funkce z&nbsp;WinAPI</a>, popř.&nbsp;funkce <a
href="https://docs.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-setdibitstodevice">SetDIBitsToDevice</a>
taktéž z&nbsp;WinAPI). Tyto operace se většinou nazývají <i>BitBlt</i>,
<i>BitBLT</i>, <i>Blit</i> či méně často <i>PIXT (Pixel Transfer)</i> a
<i>PIXBLT</i>. Kdy a na jakém systému se zkratka BitBlt objevila, se dozvíme <a
href="#k07">v&nbsp;navazující kapitole</a>.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vznik operace BitBLT (Blit)</h2>

<p>Jedním z&nbsp;velmi důležitých mezníků, který se odehrál ve vývoji osobních
počítačů, je vznik konceptu grafického uživatelského rozhraní na počítači
nazvaném <i>Xerox Alto</i>. Tento počítač používal pro zobrazování všech
informací na monitoru výhradně rastrovou grafiku, konkrétně se jednalo o
&bdquo;pouhé&ldquo; černobílé bitmapové obrázky (každý pixel byl reprezentován
jediným bitem, podobně jako později na počítačích <i>Apple Macintosh</i>, jehož
obrazová paměť byla tvořena jediným blokem v&nbsp;operační paměti). Při
programování grafických rutin pro tento počítač a začleňování vytvářených rutin
do operačního systému si autoři programového vybavení uvědomili, že poměrně
velkou část již implementovaných funkcí lze zobecnit do jediné operace, která
všechny tyto funkce může elegantně a jednotným způsobem nahradit.</p>

*** image ***
<p><i>Obrázek 8: Rozhraní slavné hry Warcraft II založené prakticky výhradně na
operaci BitBLT.</i></p>

<p>Těmito autory byli Daniel Ingalls (viz též předchozí kapitolu), Larry
Tesler, Bob Sproull a Diana Merry, kteří svoji zobecněnou rastrovou operaci
pojmenovali <strong>BitBLT</strong>, což je zkratka operace s&nbsp;plným jménem
<i>Bit Block Transfer</i>. První část zkráceného názvu, tj.&nbsp;slovo
<strong>Bit</strong> naznačuje, že se jedná o operaci prováděnou nad bitmapami
(původně, jak již víme z&nbsp;předchozího textu, vytvořených
z&nbsp;jednobitových pixelů, což je nejjednodušší možná podoba bitmapy). Druhá
polovina názvu, tj.&nbsp;zkratka <strong>BLT</strong>, byla odvozena ze jména
instrukce pro blokový přenos dat, jenž byla používaná v&nbsp;assembleru
počítače <i>DEC PDP-10</i>.</p>

*** image ***
<p><i>Obrázek 9: Část originálního kódu původní implementace operace BitBLT
naprogramované Danielem Ingallsem.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Použití operace BitBLT (Blit) v&nbsp;knihovně SDL</h2>

<p>I v&nbsp;knihovně <i>SDL</i> operaci typu <i>BitBLT/Blit</i> pochopitelně
nalezneme a dokonce se bude jednat o jednu z&nbsp;nejčastěji volaných operací
vůbec. Rastrové obrázky jsou zde totiž představovány objekty typu
<i>Surface</i> (viz též <a href="#k01">úvodní kapitolu</a>), přičemž minimálně
jeden takový objekt musí být vytvořen a používán v&nbsp;každé aplikaci, která
přes knihovnu <i>SDL</i> implementuje vykreslování. Tímto objektem je samotný
(většinou <i>zadní</i> či <i>offscreen</i>) buffer vytvořený
(resp.&nbsp;přesněji řečeno získaný) s&nbsp;využitím již minule popsané funkce
<strong>SDL_GetWindowSurface</strong>. Další bitmapy je možné načíst
s&nbsp;využitím funkce <strong>SDL_LoadBMP</strong>, popř.&nbsp;funkcí
z&nbsp;balíčku <i>gxf</i>, s&nbsp;níž se seznámíme v&nbsp;navazujících
demonstračních příkladech. Pro objekty typu <i>Surface</i> je deklarována
funkce nazvaná <strong>SDL_BlitSurface</strong>, které se předá cílová bitmapa
(objekt typu <i>Surface</i>) a taktéž souřadnice v&nbsp;cílové bitmapě, kde má
vykreslení zdrojové bitmapy začít. Pokud obsahuje zdrojová bitmapa pixely
s&nbsp;alfa kanálem, je informace o průhlednosti pixelů v&nbsp;průběhu operace
<i>BitBLT/Blit</i> automaticky použita (pokud není specifikováno jinak).</p>

<p>Ve skutečnosti existují celkem čtyři funkce, které slouží k&nbsp;blokovým
přenosům rastrových dat mezi jednotlivými plochami nebo jejich částmi. Tyto
funkce jsou vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>SDL_BlitSurface</td><td>blokový přenos rastrového obrázku beze změny velikosti (pixel na pixel)</td></tr>
<tr><td>2</td><td>SDL_BlitScaled</td><td>blokový přenos rastrového obrázku umožňující změny velikosti</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>SDL_LowerBlit</td><td>nízkoúrovňová operace volaná z&nbsp;<strong>SDL_BlitSurface</strong></td></tr>
<tr><td>4</td><td>SDL_LowerBlitScaled</td>nízkoúrovňová operace volaná z&nbsp;<strong>SDL_BlitScaled</strong><td></td></tr>
</table>

*** image ***
<p><i>Obrázek 10: Použití datových struktur <strong>srcRect</strong> a
<strong>destRect</strong> pro ořezání obrázku a specifikaci, kam přesně se má
obrázek vykreslit.</i></p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě operace, při níž se může
měnit velikost rastrového obrázku, je vyžadováno, aby zdrojová i cílová plocha
používala shodný formát uložení pixelů. Proto je důležité vytvářet
&bdquo;kompatibilní&ldquo; plochy s&nbsp;využitím funkce
<strong>SDL_ConvertSurface</strong> &ndash; tato operace se typicky provede
jedinkrát, zatímco <i>BitBLT</i> většinou mnohokrát.</div></p>

<p>V&nbsp;jazyku C vypadají hlavičky prvních dvou funkcí následovně:</p>

<pre>
int <strong>SDL_BlitSurface</strong>(SDL_Surface * src, const SDL_Rect * srcrect, SDL_Surface * dst, SDL_Rect * dstrect);
int <strong>SDL_BlitScaled</strong>(SDL_Surface * src, const SDL_Rect * srcrect, SDL_Surface * dst, SDL_Rect * dstrect);
</pre>

<p>V&nbsp;Go se namísto funkcí používají metody objektu (datové struktury) typu
<i>Surface</i> (povšimněte si, že interně se volají funkce z&nbsp;céčkového
rozhraní):</p>

<pre>
func (surface *Surface) <strong>Blit</strong>(srcRect *Rect, dst *Surface, dstRect *Rect) error {
        if C.SDL_BlitSurface(surface.cptr(), srcRect.cptr(), dst.cptr(), dstRect.cptr()) != 0 {
                return GetError()
        }
        return nil
}
&nbsp;
func (surface *Surface) <strong>BlitScaled</strong>(srcRect *Rect, dst *Surface, dstRect *Rect) error {
        if C.SDL_BlitScaled(surface.cptr(), srcRect.cptr(), dst.cptr(), dstRect.cptr()) != 0 {
                return GetError()
        }
        return nil
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Přenos rastrových dat pomocí funkce <strong>SDL_BlitSurface</strong></h2>

<p>Ve čtvrtém demonstračním příkladu je ukázáno použití funkce nazvané
<strong>SDL_BlitSurface</strong> pro přenos obrazových dat mezi plochou
představující načtený rastrový obrázek a primární plochou, která je zobrazena
v&nbsp;okně na obrazovce. Povšimněte si, že jsme obrázek po načtení převedli do
formátu kompatibilního s&nbsp;formátem používaným grafickou kartou:</p>

<pre>
tempImage = <u>SDL_LoadBMP</u>("test1.bmp");
&nbsp;
if (!tempImage) {
    puts("Error loading image");
    return 0;
}
&nbsp;
image = <u>SDL_ConvertSurface</u>(tempImage, primarySurface-&gt;format, 0);
</pre>

<p>Samotné vykreslení takového obrázku je již snadné a většinou i dostatečně
rychlé:</p>

<pre>
<u>SDL_BlitSurface</u>(image, NULL, primarySurface, NULL);
</pre>

*** image ***
<p><i>Obrázek 11: Rastrový obrázek zobrazený v&nbsp;okně aplikace. Povšimněte
si, že horní levý roh obrázku přesně lícuje s&nbsp;levým horním rohem
okna.</i></p>

<p>Úplný zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    SDL_Surface *primarySurface = NULL;
    SDL_Window  *window = NULL;
    SDL_Surface *image;
    SDL_Surface *tempImage;
&nbsp;
    if (<u>SDL_Init</u>(SDL_INIT_VIDEO) &lt; 0) {
        puts("Error initializing SDL");
        puts(SDL_GetError());
        return 1;
    } 
&nbsp;
    window = <u>SDL_CreateWindow</u>("SDL2 example #4", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
&nbsp;
    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    primarySurface = <u>SDL_GetWindowSurface</u>(window);
&nbsp;
    if (!primarySurface) {
        puts("Error getting surface");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    <u>SDL_FillRect</u>(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
&nbsp;
    tempImage = <u>SDL_LoadBMP</u>("test1.bmp");
&nbsp;
    if (!tempImage) {
        puts("Error loading image");
        return 0;
    }
&nbsp;
    image = <u>SDL_ConvertSurface</u>(tempImage, primarySurface-&gt;format, 0);
&nbsp;
    <u>SDL_FreeSurface</u>(tempImage);
    <u>SDL_BlitSurface</u>(image, NULL, primarySurface, NULL);
    <u>SDL_Delay</u>(1000);
&nbsp;
    <u>SDL_UpdateWindowSurface</u>(window);
&nbsp;
    SDL_Delay(5000);
&nbsp;
    <u>SDL_FreeSurface</u>(image);
    <u>SDL_DestroyWindow</u>(window);
    <u>SDL_Quit</u>();
&nbsp;
    return 0;
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Posun obrázku, ořezání části rastrových dat, specifikace cílové oblasti</h2>

<p>V&nbsp;předchozím demonstračním příkladu byl rastrový obrázek zobrazen
takovým způsobem, že jeho levý horní roh přesně lícoval s&nbsp;levým horním
rohem okna aplikace. V&nbsp;případě, že nám toto chování nevyhovuje (a to
určitě nebude vyhovovat, snad kromě obrázků pozadí nebo &bdquo;loading
screenů&ldquo;), je nutné změnit poslední parametr předávaný funkci
<strong>SDL_BlitSurface</strong>. V&nbsp;předchozím příkladu byl tento parametr
nastaven na NULL:</p>

<pre>
<u>SDL_BlitSurface</u>(image, NULL, primarySurface, NULL);
</pre>

<p>Ve skutečnosti je tímto parametrem ukazatel na strukturu typu
<strong>SDL_Rect</strong>. Význam mají pouze atributy <strong>x</strong> a
<strong>y</strong>, zatímco atributy <strong>w</strong> a <strong>h</strong>
jsou ignorovány. To znamená, že následující kód umístí levý horní roh obrázku
přesně do středu okna aplikace:</p>

<pre>
SDL_Rect dstRect;
<u>SDL_FreeSurface</u>(tempImage);
&nbsp;
dstRect.x = WIDTH/2;
dstRect.y = HEIGHT/2;
dstRect.w = 100;
dstRect.h = 100;
<u>SDL_BlitSurface</u>(image, NULL, primarySurface, &amp;dstRect);
</pre>

*** image ***
<p><i>Obrázek 12: Levý horní roh obrázku je umístěn do středu okna
aplikace.</i></p>

<p>Opět si pochopitelně ukážeme celý zdrojový kód příkladu:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    SDL_Surface *primarySurface = NULL;
    SDL_Window  *window = NULL;
    SDL_Surface *image;
    SDL_Surface *tempImage;
&nbsp;
    if (<u>SDL_Init</u>(SDL_INIT_VIDEO) &lt; 0) {
        puts("Error initializing SDL");
        puts(SDL_GetError());
        return 1;
    } 
&nbsp;
    window = <u>SDL_CreateWindow</u>("SDL2 example #5", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
&nbsp;
    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    primarySurface = <u>SDL_GetWindowSurface</u>(window);
&nbsp;
    if (!primarySurface) {
        puts("Error getting surface");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    <u>SDL_FillRect</u>(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
&nbsp;
    tempImage = <u>SDL_LoadBMP</u>("test1.bmp");
&nbsp;
    if (!tempImage) {
        puts("Error loading image");
        return 0;
    }
&nbsp;
    image = <u>SDL_ConvertSurface</u>(tempImage, primarySurface-&gt;format, 0);
&nbsp;
    <u>SDL_FreeSurface</u>(tempImage);
    {
        SDL_Rect dstRect;
        dstRect.x = WIDTH/2;
        dstRect.y = HEIGHT/2;
        dstRect.w = 100;
        dstRect.h = 100;
        <u>SDL_BlitSurface</u>(image, NULL, primarySurface, &amp;dstRect);
    }
    <u>SDL_Delay</u>(1000);
&nbsp;
    <u>SDL_UpdateWindowSurface</u>(window);
&nbsp;
    <u>SDL_Delay</u>(5000);
&nbsp;
    <u>SDL_FreeSurface</u>(image);
    <u>SDL_DestroyWindow</u>(window);
    <u>SDL_Quit</u>();
&nbsp;
    return 0;
}
</pre>

<p>Známe již tedy význam tří parametrů předávaných do funkce
<strong>SDL_BlitSurface</strong>. Zbývá nám pouze vysvětlit si parametr druhý,
což je opět ukazatel na datovou strukturu typu <strong>SDL_Rect</strong>.
Tentokrát ovšem tato datová struktura udává, jaká část zdrojového obrázku se má
přenést do cílové roviny. Můžeme zde specifikovat všechny atributy
<strong>x</strong>, <strong>y</strong>, <strong>w</strong> i
<strong>h</strong>, protože je podporováno ořezávání obrázku (přesněji řečeno
v&nbsp;rovině zdrojového obrázku můžeme vybrat libovolný obdélník, který se
přenese do cílové roviny):</p>

<pre>
SDL_Rect srcRect;
srcRect.x = image-&gt;w/4;
srcRect.y = 0;
srcRect.w = image-&gt;w/2;
srcRect.h = image-&gt;h/2;
&nbsp;
SDL_Rect dstRect;
dstRect.x = WIDTH/2;
dstRect.y = HEIGHT/2;
dstRect.w = 100;
dstRect.h = 100;
&nbsp;
<u>SDL_BlitSurface</u>(image, &amp;srcRect, primarySurface, &amp;dstRect);
</pre>

<p>Výsledek bude vypadat následovně:</p>

*** image ***
<p><i>Obrázek 13: Změna pozice obrázku s&nbsp;jeho ořezáním.</i></p>

<p>Úplný zdrojový kód dnešního v&nbsp;pořadí již šestého demonstračního
příkladu:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    SDL_Surface *primarySurface = NULL;
    SDL_Window  *window = NULL;
    SDL_Surface *image;
    SDL_Surface *tempImage;
&nbsp;
    if (<u>SDL_Init</u>(SDL_INIT_VIDEO) &lt; 0) {
        puts("Error initializing SDL");
        puts(SDL_GetError());
        return 1;
    } 
&nbsp;
    window = <u>SDL_CreateWindow</u>("SDL2 example #6", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
&nbsp;
    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    primarySurface = <u>SDL_GetWindowSurface</u>(window);
&nbsp;
    if (!primarySurface) {
        puts("Error getting surface");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    <u>SDL_FillRect</u>(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
&nbsp;
    tempImage = <u>SDL_LoadBMP</u>("test1.bmp");
&nbsp;
    if (!tempImage) {
        puts("Error loading image");
        return 0;
    }
&nbsp;
    image = <u>SDL_ConvertSurface</u>(tempImage, primarySurface-&gt;format, 0);
&nbsp;
    <u>SDL_FreeSurface</u>(tempImage);
    {
        SDL_Rect srcRect;
        srcRect.x = image-&gt;w/4;
        srcRect.y = 0;
        srcRect.w = image-&gt;w/2;
        srcRect.h = image-&gt;h/2;
&nbsp;
        SDL_Rect dstRect;
        dstRect.x = WIDTH/2;
        dstRect.y = HEIGHT/2;
        dstRect.w = 100;
        dstRect.h = 100;
        <u>SDL_BlitSurface</u>(image, &amp;srcRect, primarySurface, &amp;dstRect);
    }
    <u>SDL_Delay</u>(1000);
&nbsp;
    <u>SDL_UpdateWindowSurface</u>(window);
&nbsp;
    <u>SDL_Delay</u>(5000);
&nbsp;
    <u>SDL_FreeSurface</u>(image);
    <u>SDL_DestroyWindow</u>(window);
    SDL_Quit();
&nbsp;
    return 0;
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Převod předchozích demonstračních příkladů do jazyka Go</h2>

<p>Opět si ukažme, jak dopadne převod předchozích tří demonstračních příkladů
z&nbsp;programovacího jazyka C do jazyka Go.</p>

<p>Čtvrtý příklad &ndash; vykreslení obrázku do okna:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/veandco/go-sdl2/img"
        "github.com/veandco/go-sdl2/sdl"
)
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("SDL2 example #4", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
&nbsp;
        tempImage, err := img.Load("test1.bmp")
        if err != nil {
                panic(err)
        }
        defer tempImage.Free()
&nbsp;
        convertedImage, err := tempImage.Convert(primarySurface.Format, 0)
        if err != nil {
                panic(err)
        }
        defer convertedImage.Free()
&nbsp;
        primarySurface.FillRect(nil, sdl.MapRGB(primarySurface.Format, 192, 255, 192))
&nbsp;
        err = convertedImage.Blit(nil, primarySurface, nil)
        if err != nil {
                panic(err)
        }
&nbsp;
        window.UpdateSurface()
&nbsp;
        sdl.Delay(5000)
}
</pre>

<p>Pátý příklad &ndash; posun obrázku:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/veandco/go-sdl2/img"
        "github.com/veandco/go-sdl2/sdl"
)
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("SDL2 example #5", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
&nbsp;
        tempImage, err := img.Load("test1.bmp")
        if err != nil {
                panic(err)
        }
        defer tempImage.Free()
&nbsp;
        convertedImage, err := tempImage.Convert(primarySurface.Format, 0)
        if err != nil {
                panic(err)
        }
        defer convertedImage.Free()
&nbsp;
        primarySurface.FillRect(nil, sdl.MapRGB(primarySurface.Format, 192, 255, 192))
&nbsp;
        dstRect := sdl.Rect{
                X: width / 2,
                Y: height / 2,
                W: 100,
                H: 100,
        }
&nbsp;
        err = convertedImage.Blit(nil, primarySurface, &amp;dstRect)
        if err != nil {
                panic(err)
        }
&nbsp;
        window.UpdateSurface()
&nbsp;
        sdl.Delay(5000)
}
</pre>

<p>Šestý příklad &ndash; ořezání obrázku:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/veandco/go-sdl2/img"
        "github.com/veandco/go-sdl2/sdl"
)
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("SDL2 example #6", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
&nbsp;
        tempImage, err := img.Load("test1.bmp")
        if err != nil {
                panic(err)
        }
        defer tempImage.Free()
&nbsp;
        convertedImage, err := tempImage.Convert(primarySurface.Format, 0)
        if err != nil {
                panic(err)
        }
        defer convertedImage.Free()
&nbsp;
        primarySurface.FillRect(nil, sdl.MapRGB(primarySurface.Format, 192, 255, 192))
&nbsp;
        srcRect := sdl.Rect{
                X: convertedImage.W / 4,
                Y: 0,
                W: convertedImage.W / 2,
                H: convertedImage.H / 2,
        }
&nbsp;
        dstRect := sdl.Rect{
                X: width / 2,
                Y: height / 2,
                W: 100,
                H: 100,
        }
&nbsp;
        err = convertedImage.Blit(&amp;srcRect, primarySurface, &amp;dstRect)
        if err != nil {
                panic(err)
        }
&nbsp;
        window.UpdateSurface()
&nbsp;
        sdl.Delay(5000)
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Změna měřítka obrázku v&nbsp;průběhu vykreslování</h2>

<p>Výše zmíněnou funkci <strong>SDL_BlitSurface</strong> lze nahradit funkcí
<strong>SDL_BlitScaled</strong>. Tato funkce umožňuje změnu měřítka
vykreslovaného obrázku, tj.&nbsp;jeho zvětšení popř.&nbsp;zmenšení (ovšem ne
již například rotaci nebo zkosení). Zdrojový obrázek ovšem musí být uložen ve
formátu kompatibilním s&nbsp;cílovou plochou (do které se vykreslování
provádí). Pokud není specifikován ani zdrojový ani cílový obdélník, bude
obrázek zmenšen/zvětšen takovým způsobem, aby přesně odpovídal velikosti cílové
plochy:</p>

*** image ***
<p><i>Obrázek 14: Zdrojová bitmapa je roztažena přes celou šířku okna.</i></p>

<p>Pro načtení obrázku se opět používá standardní funkce
<strong>SDL_LoadBMP</strong>:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    SDL_Surface *primarySurface = NULL;
    SDL_Window  *window = NULL;
    SDL_Surface *image;
    SDL_Surface *tempImage;
&nbsp;
    if (<u>SDL_Init</u>(SDL_INIT_VIDEO) &lt; 0) {
        puts("Error initializing SDL");
        puts(SDL_GetError());
        return 1;
    } 
&nbsp;
    window = <u>SDL_CreateWindow</u>("SDL2 example #7", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
&nbsp;
    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    primarySurface = <u>SDL_GetWindowSurface</u>(window);
&nbsp;
    if (!primarySurface) {
        puts("Error getting surface");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    <u>SDL_FillRect</u>(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
&nbsp;
    tempImage = <u>SDL_LoadBMP</u>("test1.bmp");
&nbsp;
    if (!tempImage) {
        puts("Error loading image");
        return 0;
    }
&nbsp;
    image = <u>SDL_ConvertSurface</u>(tempImage, primarySurface-&gt;format, 0);
&nbsp;
    <u>SDL_FreeSurface</u>(tempImage);
    <u>SDL_BlitScaled</u>(image, NULL, primarySurface, NULL);
    <u>SDL_Delay</u>(1000);
&nbsp;
    <u>SDL_UpdateWindowSurface</u>(window);
&nbsp;
    <u>SDL_Delay</u>(5000);
&nbsp;
    <u>SDL_FreeSurface</u>(image);
    <u>SDL_DestroyWindow</u>(window);
    <u>SDL_Quit</u>();
&nbsp;
    return 0;
}
</pre>

<p>Případnou změnu měřítka obrázku lze specifikovat cílovým obdélníkem, který
nyní musí obsahovat všechny čtyři atributy:</p>

<pre>
SDL_Rect dstRect;
dstRect.x = WIDTH/3;
dstRect.y = HEIGHT/3;
dstRect.w = image-&gt;w/2;
dstRect.h = image-&gt;h/2;
&nbsp;
<u>SDL_BlitScaled</u>(image, NULL, primarySurface, &amp;dstRect);
</pre>

*** image ***
<p><i>Obrázek 15: Změna měřítka obrázku společně s&nbsp;jeho posunem.</i></p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    SDL_Surface *primarySurface = NULL;
    SDL_Window  *window = NULL;
    SDL_Surface *image;
    SDL_Surface *tempImage;
&nbsp;
    if (<u>SDL_Init</u>(SDL_INIT_VIDEO) &lt; 0) {
        puts("Error initializing SDL");
        puts(SDL_GetError());
        return 1;
    } 
&nbsp;
    window = <u>SDL_CreateWindow</u>("SDL2 example #8", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
&nbsp;
    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    primarySurface = <u>SDL_GetWindowSurface</u>(window);
&nbsp;
    if (!primarySurface) {
        puts("Error getting surface");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    <u>SDL_FillRect</u>(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
&nbsp;
    tempImage = <u>SDL_LoadBMP</u>("test1.bmp");
&nbsp;
    if (!tempImage) {
        puts("Error loading image");
        return 0;
    }
&nbsp;
    image = <u>SDL_ConvertSurface</u>(tempImage, primarySurface-&gt;format, 0);
&nbsp;
    <u>SDL_FreeSurface</u>(tempImage);
    {
        SDL_Rect dstRect;
        dstRect.x = WIDTH/3;
        dstRect.y = HEIGHT/3;
        dstRect.w = image-&gt;w/2;
        dstRect.h = image-&gt;h/2;
        <u>SDL_BlitScaled</u>(image, NULL, primarySurface, &amp;dstRect);
    }
    <u>SDL_Delay</u>(1000);
&nbsp;
    <u>SDL_UpdateWindowSurface</u>(window);
&nbsp;
    <u>SDL_Delay</u>(5000);
&nbsp;
    <u>SDL_FreeSurface</u>(image);
    <u>SDL_DestroyWindow</u>(window);
    <u>SDL_Quit</u>();
&nbsp;
    return 0;
}
</pre>

<p>Zkombinovat lze posun obrázku, jeho ořezání a současně i změnu měřítka
&ndash; všechny tyto transformace jsou popsány pomocí dvojice obdélníků;
zdrojového a cílového:</p>

<pre>
SDL_Rect srcRect;
srcRect.x = image-&gt;w/4;
srcRect.y = 0;
srcRect.w = image-&gt;w/2;
srcRect.h = image-&gt;h/2;
&nbsp;
SDL_Rect dstRect;
dstRect.x = WIDTH/3;
dstRect.y = HEIGHT/3;
dstRect.w = image-&gt;w/2;
dstRect.h = image-&gt;h/2;
&nbsp;
<u>SDL_BlitScaled</u>(image, &amp;srcRect, primarySurface, &amp;dstRect);
</pre>

*** image ***
<p><i>Obrázek 16: Posun obrázku, jeho ořezání a současně i změna měřítka.</i></p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    SDL_Surface *primarySurface = NULL;
    SDL_Window  *window = NULL;
    SDL_Surface *image;
    SDL_Surface *tempImage;
&nbsp;
    if (<u>SDL_Init</u>(SDL_INIT_VIDEO) &lt; 0) {
        puts("Error initializing SDL");
        puts(SDL_GetError());
        return 1;
    } 
&nbsp;
    window = <u>SDL_CreateWindow</u>("SDL2 example #9", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
&nbsp;
    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    primarySurface = <u>SDL_GetWindowSurface</u>(window);
&nbsp;
    if (!primarySurface) {
        puts("Error getting surface");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    <u>SDL_FillRect</u>(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
&nbsp;
    tempImage = <u>SDL_LoadBMP</u>("test1.bmp");
&nbsp;
    if (!tempImage) {
        puts("Error loading image");
        return 0;
    }
&nbsp;
    image = <u>SDL_ConvertSurface</u>(tempImage, primarySurface-&gt;format, 0);
&nbsp;
    <u>SDL_FreeSurface</u>(tempImage);
    {
        SDL_Rect srcRect;
        srcRect.x = image-&gt;w/4;
        srcRect.y = 0;
        srcRect.w = image-&gt;w/2;
        srcRect.h = image-&gt;h/2;
&nbsp;
        SDL_Rect dstRect;
        dstRect.x = WIDTH/3;
        dstRect.y = HEIGHT/3;
        dstRect.w = image-&gt;w/2;
        dstRect.h = image-&gt;h/2;
&nbsp;
        <u>SDL_BlitScaled</u>(image, &amp;srcRect, primarySurface, &amp;dstRect);
    }
    <u>SDL_Delay</u>(1000);
&nbsp;
    <u>SDL_UpdateWindowSurface</u>(window);
&nbsp;
    <u>SDL_Delay</u>(5000);
&nbsp;
    <u>SDL_FreeSurface</u>(image);
    <u>SDL_DestroyWindow</u>(window);
    <u>SDL_Quit</u>();
&nbsp;
    return 0;
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Převod předchozích demonstračních příkladů do jazyka Go</h2>

<p>Změna měřítka obrázku:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/veandco/go-sdl2/img"
        "github.com/veandco/go-sdl2/sdl"
)
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("SDL2 example #7", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
&nbsp;
        tempImage, err := img.Load("test1.bmp")
        if err != nil {
                panic(err)
        }
        defer tempImage.Free()
&nbsp;
        convertedImage, err := tempImage.Convert(primarySurface.Format, 0)
        if err != nil {
                panic(err)
        }
        defer convertedImage.Free()
&nbsp;
        primarySurface.FillRect(nil, sdl.MapRGB(primarySurface.Format, 192, 255, 192))
&nbsp;
        err = convertedImage.BlitScaled(nil, primarySurface, nil)
        if err != nil {
                panic(err)
        }
&nbsp;
        window.UpdateSurface()
&nbsp;
        sdl.Delay(5000)
}
</pre>

<p>Změna měřítka obrázku s&nbsp;jeho posunem:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/veandco/go-sdl2/img"
        "github.com/veandco/go-sdl2/sdl"
)
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("SDL2 example #8", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
&nbsp;
        tempImage, err := img.Load("test1.bmp")
        if err != nil {
                panic(err)
        }
        defer tempImage.Free()
&nbsp;
        convertedImage, err := tempImage.Convert(primarySurface.Format, 0)
        if err != nil {
                panic(err)
        }
        defer convertedImage.Free()
&nbsp;
        primarySurface.FillRect(nil, sdl.MapRGB(primarySurface.Format, 192, 255, 192))
&nbsp;
        dstRect := sdl.Rect{
                X: width / 3,
                Y: height / 3,
                W: convertedImage.W / 2,
                H: convertedImage.H / 2,
        }
&nbsp;
        err = convertedImage.BlitScaled(nil, primarySurface, &amp;dstRect)
        if err != nil {
                panic(err)
        }
&nbsp;
        window.UpdateSurface()
&nbsp;
        sdl.Delay(5000)
}
</pre>

<p>Změna měřítka obrázku s&nbsp;jeho ořezáním a taktéž posunem:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/veandco/go-sdl2/img"
        "github.com/veandco/go-sdl2/sdl"
)
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("SDL2 example #9", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
&nbsp;
        tempImage, err := img.Load("test1.bmp")
        if err != nil {
                panic(err)
        }
        defer tempImage.Free()
&nbsp;
        convertedImage, err := tempImage.Convert(primarySurface.Format, 0)
        if err != nil {
                panic(err)
        }
        defer convertedImage.Free()
&nbsp;
        primarySurface.FillRect(nil, sdl.MapRGB(primarySurface.Format, 192, 255, 192))
&nbsp;
        srcRect := sdl.Rect{
                X: convertedImage.W / 4,
                Y: 0,
                W: convertedImage.W / 2,
                H: convertedImage.H / 2,
        }
&nbsp;
        dstRect := sdl.Rect{
                X: width / 3,
                Y: height / 3,
                W: convertedImage.W / 2,
                H: convertedImage.H / 2,
        }
&nbsp;
        err = convertedImage.BlitScaled(&amp;srcRect, primarySurface, &amp;dstRect)
        if err != nil {
                panic(err)
        }
&nbsp;
        window.UpdateSurface()
&nbsp;
        sdl.Delay(5000)
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Načtení bitmap s&nbsp;alfa kanálem uložených ve formátu PNG</h2>

<p>Knihovna SDL ve své základní variantě umožňuje načítání rastrových obrázků
ve formátu BMP; žádné další formáty nejsou podporovány. Ovšem společně
s&nbsp;SDL lze použít i knihovnu <a
href="https://www.libsdl.org/projects/SDL_image/">SDL Image</a>, která dokáže
načítat mj.&nbsp;i obrázky ve formátu PNG, které mohou &ndash; což je mnohdy
velmi užitečné &ndash; podporovat i alfa kanál, tedy průhlednost přiřazenou
k&nbsp;jednotlivým pixelům. Použití této doplňkové knihovny je snadné (pouze
nesmíme zapomenout na slinkování):</p>

<pre>
image = IMG_Load("globe.png");
&nbsp;
if (!image) {
    puts("Error loading image");
    return 0;
}
</pre>

<p>Načtený obrázek tentokrát nebudeme převádět do &bdquo;kompatibilního&ldquo;
formátu, protože by se ztratila informace o alfa kanálu.</p>

<p>V&nbsp;závislosti na tom, jaký formát má zdrojová bitmapa a jaký je formát
framebufferu může dojít ke třem typům konverzí:</p>

<ul>
<li>Ve výsledné bitmapě bude plnohodnotný osmibitový alfa kanál (použito u 24bpp a 32bpp).</li>
<li>Ve výsledné bitmapě bude jeden bit rezervovaný pro uložení informace o průhlednosti (použito u 15bpp a 16bpp).</li>
<li>Ve výsledné bitmapě bude jeden index barvy rezervovaný pro uložení informace o průhlednosti (použito u 8bpp).</li>
</ul>

*** image ***
<p><i>Obrázek 17: Bitmapa s&nbsp;alfa kanálem zobrazená v&nbsp;okně aplikace.</i></p>

<p>Céčková varianta příkladu bude vypadat následovně:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
#include &lt;SDL2/SDL_image.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    SDL_Surface *primarySurface = NULL;
    SDL_Window  *window = NULL;
    SDL_Surface *image;
&nbsp;
    if (<u>SDL_Init</u>(SDL_INIT_VIDEO) &lt; 0) {
        puts("Error initializing SDL");
        puts(SDL_GetError());
        return 1;
    } 
&nbsp;
    window = <u>SDL_CreateWindow</u>("SDL2 example #10", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
&nbsp;
    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    primarySurface = <u>SDL_GetWindowSurface</u>(window);
&nbsp;
    if (!primarySurface) {
        puts("Error getting surface");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    <u>SDL_FillRect</u>(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
&nbsp;
    image = <u>IMG_Load</u>("globe.png");
&nbsp;
    if (!image) {
        puts("Error loading image");
        return 0;
    }
&nbsp;
    {
        SDL_Rect dstRect;
        dstRect.x = WIDTH/2 - image-&gt;w/2;
        dstRect.y = HEIGHT/2 - image-&gt;h/2;
        <u>SDL_BlitSurface</u>(image, NULL, primarySurface, &amp;dstRect);
    }
&nbsp;
    <u>SDL_UpdateWindowSurface</u>(window);
&nbsp;
    <u>SDL_Delay</u>(5000);
&nbsp;
    <u>SDL_FreeSurface</u>(image);
    <u>SDL_DestroyWindow</u>(window);
    <u>SDL_Quit</u>();
&nbsp;
    return 0;
}
</pre>

<p>Přepis do Go:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/veandco/go-sdl2/img"
        "github.com/veandco/go-sdl2/sdl"
)
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("SDL2 example #10", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
&nbsp;
        image, err := img.Load("globe.png")
        if err != nil {
                panic(err)
        }
        defer image.Free()
&nbsp;
        primarySurface.FillRect(nil, sdl.MapRGB(primarySurface.Format, 192, 255, 192))
&nbsp;
        dstRect := sdl.Rect{
                X: width/2 - image.W/2,
                Y: height/2 - image.H/2,
                W: 0,
                H: 0,
        }
&nbsp;
        err = image.Blit(nil, primarySurface, &amp;dstRect)
        if err != nil {
                panic(err)
        }
&nbsp;
        window.UpdateSurface()
&nbsp;
        sdl.Delay(5000)
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Modifikace globální alfa složky, popř.&nbsp;barvových kanálů</h2>

<p>Pomocí funkce <strong>SDL_SetSurfaceAlphaMod</strong> lze modifikovat
globální alfa složku přiřazenou k&nbsp;celému obrázku. Tato alfa složka
(v&nbsp;rozsahu 0..255) je vynásobena s&nbsp;alfa složkami jednotlivých pixelů.
Výsledek může vypadat například takto:</p>

*** image ***
<p><i>Obrázek 18: Vliv změny globální alfa složky obrázku.</i></p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
#include &lt;SDL2/SDL_image.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    SDL_Surface *primarySurface = NULL;
    SDL_Window  *window = NULL;
    SDL_Surface *image;
&nbsp;
    if (<u>SDL_Init</u>(SDL_INIT_VIDEO) &lt; 0) {
        puts("Error initializing SDL");
        puts(SDL_GetError());
        return 1;
    } 
&nbsp;
    window = <u>SDL_CreateWindow</u>("SDL2 example #11", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
&nbsp;
    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    primarySurface = <u>SDL_GetWindowSurface</u>(window);
&nbsp;
    if (!primarySurface) {
        puts("Error getting surface");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    <u>SDL_FillRect</u>(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
&nbsp;
    image = IMG_Load("globe.png");
&nbsp;
    if (!image) {
        puts("Error loading image");
        return 0;
    }
&nbsp;
    {
        SDL_Rect dstRect;
        int x, y;
        for (y=0; y&lt;4; y++) {
            for (x=0; x&lt;4; x++) {
                <u>SDL_SetSurfaceAlphaMod</u>(image, y*64+x*16);
                dstRect.x = 10 + x*100;
                dstRect.y = 10 + y*100;
                <u>SDL_BlitSurface</u>(image, NULL, primarySurface, &amp;dstRect);
            }
        }
    }
&nbsp;
    <u>SDL_UpdateWindowSurface</u>(window);
&nbsp;
    <u>SDL_Delay</u>(5000);
&nbsp;
    <u>SDL_FreeSurface</u>(image);
    <u>SDL_DestroyWindow</u>(window);
    <u>SDL_Quit</u>();
&nbsp;
    return 0;
}
</pre>

<p>Přepis do Go:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/veandco/go-sdl2/img"
        "github.com/veandco/go-sdl2/sdl"
)
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("SDL2 example #11", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
&nbsp;
        image, err := img.Load("globe.png")
        if err != nil {
                panic(err)
        }
        defer image.Free()
&nbsp;
        primarySurface.FillRect(nil, sdl.MapRGB(primarySurface.Format, 192, 255, 192))
&nbsp;
        dstRect := sdl.Rect{}
&nbsp;
        for y := 0; y &lt; 4; y++ {
                for x := 0; x &lt; 4; x++ {
                        image.SetAlphaMod(byte(y*64 + x*16))
                        dstRect.X = int32(10 + x*100)
                        dstRect.Y = int32(10 + y*100)
&nbsp;
                        err = image.Blit(nil, primarySurface, &amp;dstRect)
                        if err != nil {
                                panic(err)
                        }
                }
        }
&nbsp;
        window.UpdateSurface()
&nbsp;
        sdl.Delay(5000)
}
</pre>

<p>Podobně je možné funkcí <strong>SDL_SetSurfaceColorMod</strong> změnit
globální konstanty jednotlivých barvových kanálů. Tyto konstanty 0..255 se opět
budou při vykreslování násobit s&nbsp;barvami jednotlivých pixelů:</p>

*** image ***
<p><i>Obrázek 19: Modifikace konstant, kterými jsou násobeny barvové složky
pixelů při vykreslování obrázku.</i></p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;
#include &lt;SDL2/SDL_image.h&gt;
&nbsp;
#define WIDTH  640
#define HEIGHT 480
&nbsp;
int <strong>main</strong>(int argc, char** args) {
    SDL_Surface *primarySurface = NULL;
    SDL_Window  *window = NULL;
    SDL_Surface *image;
&nbsp;
    if (<u>SDL_Init</u>(SDL_INIT_VIDEO) &lt; 0) {
        puts("Error initializing SDL");
        puts(SDL_GetError());
        return 1;
    } 
&nbsp;
    window = <u>SDL_CreateWindow</u>("SDL2 example #12", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
&nbsp;
    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    primarySurface = <u>SDL_GetWindowSurface</u>(window);
&nbsp;
    if (!primarySurface) {
        puts("Error getting surface");
        puts(SDL_GetError());
        return 1;
    }
&nbsp;
    <u>SDL_FillRect</u>(primarySurface, NULL, SDL_MapRGB(primarySurface-&gt;format, 192, 255, 192));
&nbsp;
    image = IMG_Load("globe.png");
&nbsp;
    if (!image) {
        puts("Error loading image");
        return 0;
    }
&nbsp;
    {
        SDL_Rect dstRect;
        int x, y;
        for (y=0; y&lt;4; y++) {
            for (x=0; x&lt;4; x++) {
                <u>SDL_SetSurfaceColorMod</u>(image, x*64, 255, y*64);
                dstRect.x = 10 + x*100;
                dstRect.y = 10 + y*100;
                <u>SDL_BlitSurface</u>(image, NULL, primarySurface, &amp;dstRect);
            }
        }
    }
&nbsp;
    <u>SDL_UpdateWindowSurface</u>(window);
&nbsp;
    <u>SDL_Delay</u>(5000);
&nbsp;
    <u>SDL_FreeSurface</u>(image);
    <u>SDL_DestroyWindow</u>(window);
    <u>SDL_Quit</u>();
&nbsp;
    return 0;
}
</pre>

<p>Přepis do Go:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/veandco/go-sdl2/img"
        "github.com/veandco/go-sdl2/sdl"
)
&nbsp;
const (
        width  = 640
        height = 480
)
&nbsp;
func <strong>main</strong>() {
        if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
                panic(err)
        }
        defer sdl.Quit()
&nbsp;
        window, err := sdl.CreateWindow("SDL2 example #12", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
                width, height, sdl.WINDOW_SHOWN)
        if err != nil {
                panic(err)
        }
        defer window.Destroy()
&nbsp;
        primarySurface, err := window.GetSurface()
        if err != nil {
                panic(err)
        }
&nbsp;
        image, err := img.Load("globe.png")
        if err != nil {
                panic(err)
        }
        defer image.Free()
&nbsp;
        primarySurface.FillRect(nil, sdl.MapRGB(primarySurface.Format, 192, 255, 192))
&nbsp;
        dstRect := sdl.Rect{}
&nbsp;
        for y := 0; y &lt; 4; y++ {
                for x := 0; x &lt; 4; x++ {
                        image.SetColorMod(byte(x*64), 255, byte(y*64))
                        dstRect.X = int32(10 + x*100)
                        dstRect.Y = int32(10 + y*100)
&nbsp;
                        err = image.Blit(nil, primarySurface, &amp;dstRect)
                        if err != nil {
                                panic(err)
                        }
                }
        }
&nbsp;
        window.UpdateSurface()
&nbsp;
        sdl.Delay(5000)
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Specifikace režimu míchání barev</h2>

<p>Operace <i>BitBLT (blit)</i>, jejímž popisem jsme se zabývali výše, je
většinou používána &bdquo;pouze&ldquo; pro kopii obsahu jedné bitmapy do
bitmapy druhé. Ve skutečnosti jsou však možnosti této operace větší, a to
z&nbsp;toho důvodu, že při přesunu jednotlivých pixelů je možné provádět
takzvané &bdquo;rastrové operace&ldquo;, které jsou někdy zkráceně nazývány
<i>Raster Op</i>, <i>Raster Ops</i> či dokonce jen <i>ROPS</i>.
V&nbsp;minulosti byly tyto operace implementovány logickými funkcemi, ovšem
v&nbsp;knihovně <i>SDL</i> se setkáme spíše s&nbsp;funkcemi využívajícími alfa
kanál či barvové složky jednotlivých pixelů. K&nbsp;dispozici je několik režimů
&ndash; BLENDMODE_NONE, BLENDMODE_BLEND, BLENDMODE_ADD A BLENDMODE_MOD.
Společně se změnou globální alfa složky mají tento vliv:</p>

*** image ***
<p><i>Obrázek 20: Vliv nastaveného režimu míchání barev.</i></p>

<p>Příklad použití:</p>

<pre>
</pre>

<p>Přepis do Go:</p>

<pre>
package main

import (
	"github.com/veandco/go-sdl2/img"
	"github.com/veandco/go-sdl2/sdl"
)

const (
	width  = 640
	height = 480
)

func main() {
	if err := sdl.Init(sdl.INIT_VIDEO); err != nil {
		panic(err)
	}
	defer sdl.Quit()

	window, err := sdl.CreateWindow("SDL2 example #13", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
		width, height, sdl.WINDOW_SHOWN)
	if err != nil {
		panic(err)
	}
	defer window.Destroy()

	primarySurface, err := window.GetSurface()
	if err != nil {
		panic(err)
	}

	image, err := img.Load("globe.png")
	if err != nil {
		panic(err)
	}
	defer image.Free()

	primarySurface.FillRect(nil, sdl.MapRGB(primarySurface.Format, 192, 255, 192))

	dstRect := sdl.Rect{}
	dstRect.Y = 10

	for y := 0; y < 4; y++ {
		image.SetAlphaMod(byte(y * 64))

		image.SetBlendMode(sdl.BLENDMODE_NONE)
		dstRect.X = 10
		image.Blit(nil, primarySurface, &dstRect)

		image.SetBlendMode(sdl.BLENDMODE_BLEND)
		dstRect.X += 100
		image.Blit(nil, primarySurface, &dstRect)

		image.SetBlendMode(sdl.BLENDMODE_ADD)
		dstRect.X += 100
		image.Blit(nil, primarySurface, &dstRect)

		image.SetBlendMode(sdl.BLENDMODE_MOD)
		dstRect.X += 100
		image.Blit(nil, primarySurface, &dstRect)

		dstRect.Y += 100
	}

	window.UpdateSurface()

	sdl.Delay(5000)
}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Změna barev jednotlivých pixelů</h2>

<p>V&nbsp;této kapitole si ve stručnosti řekneme, jakým způsobem je možné měnit
barvy jednotlivých pixelů libovolné plochy (<i>surface</i>). Je ovšem nutné
poznamenat, že se jedná o poměrně zdlouhavou operaci, takže v&nbsp;mnoha hrách
nebo dalších graficky náročných multimediálních aplikacích se setkáme spíše
s&nbsp;použitím <i>spritů</i> a nikoli se snahou o změnu jednotlivých pixelů.
Nicméně v&nbsp;některých případech může být tato funkce užitečná. Při přístupu
k&nbsp;pixelům se používá přímo ukazatel na pole pixelů pro zadanou plochu.
V&nbsp;našem případě budeme přistupovat přímo k&nbsp;zadnímu bufferu (což je
taktéž <i>surface</i>). Poté je již možné měnit hodnotu jednotlivých pixelů
uložených v&nbsp;poli (o pole se jedná z&nbsp;pohledu uživatele, interně může
být situace složitější). Ovšem situace pochopitelně není zcela triviální,
protože přístup k&nbsp;jednotlivým pixelům je dosti nízkoúrovňová operace a
vyžaduje znalost interního uložení rastrových dat v&nbsp;ploše. Zejména musíme
znát:</p>

<ol>
<li>Počet bajtů alokovaných pro každý pixel v&nbsp;paměti (ať již operační či video paměti)</li>
<li>Jakým způsobem jsou uloženy barvové složky pixelů</li>
<li>Zde se mezi koncem jednoho obrazového řádku a začátkem dalšího řádku nenachází rezervovaná oblast</li>
</ol>

<p><div class="rs-tip-major">Poznámka: sice se může zdát, že musíme znát mnoho
informací, ovšem oproti minulosti, kdy byly buffery realizovány roztodivnými
způsoby (obrazová paměť ZX Spectra, režim sudá-lichá u grafické karty CGA,
pixel roviny u Amigy) je organizace pixelů v&nbsp;knihovně SDL a na moderních
grafických kartách prakticky triviální.</div></p>




<p></p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;

#define WIDTH  640
#define HEIGHT 480

int main(int argc, char** args) {
    SDL_Surface *primarySurface = NULL;
    SDL_Window  *window = NULL;

    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        puts("Error initializing SDL");
        puts(SDL_GetError());
        return 1;
    } 

    window = SDL_CreateWindow("SDL2 example #14", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);

    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    }

    primarySurface = SDL_GetWindowSurface(window);
    printf("Must lock: %d\n", SDL_MUSTLOCK(primarySurface));

    if (!primarySurface) {
        puts("Error getting surface");
        puts(SDL_GetError());
        return 1;
    }

    {
        int y;

        SDL_LockSurface(primarySurface);
        for (y=0; y<primarySurface->h; y++) {
            int scanLine = primarySurface->pitch;
            Uint8 *ptr = primarySurface->pixels + y*scanLine;
            SDL_memset(ptr, y, scanLine);
        }
        SDL_UnlockSurface(primarySurface);
    }
    SDL_Delay(1000);

    SDL_UpdateWindowSurface(window);

    SDL_Delay(5000);

    SDL_DestroyWindow(window);

    SDL_Quit();
    
    return 0;
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Jedna z&nbsp;možných realizací funkce <strong>putpixel</strong></h2>

<p></p>

<pre>
</pre>

<pre>
#include &lt;stdio.h&gt;
#include &lt;SDL2/SDL.h&gt;

#define WIDTH  640
#define HEIGHT 480

void putpixel(SDL_Surface *surface, int x, int y, unsigned char r, unsigned char g, unsigned char b)
{
    if (x>=0 &amp;&amp; x< surface->w &amp;&amp; y>=0 &amp;&amp; y < surface->h) {
        if (surface->format->BitsPerPixel == 24) {
            Uint8 *pixel = (Uint8 *)surface->pixels;
            pixel += x*3;
            pixel += y*surface->pitch;
            *pixel++ = b;
            *pixel++ = g;
            *pixel   = r;
        }
        if (surface->format->BitsPerPixel == 32) {
            Uint8 *pixel = (Uint8 *)surface->pixels;
            pixel += x*4;
            pixel += y*surface->pitch;
            *pixel++ = b;
            *pixel++ = g;
            *pixel   = r;
        }
    }
}

int main(int argc, char** args) {
    SDL_Surface *primarySurface = NULL;
    SDL_Window  *window = NULL;

    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        puts("Error initializing SDL");
        puts(SDL_GetError());
        return 1;
    } 

    window = SDL_CreateWindow("SDL2 example #15", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);

    if (!window) {
        puts("Error creating window");
        puts(SDL_GetError());
        return 1;
    }

    primarySurface = SDL_GetWindowSurface(window);
    printf("Must lock: %d\n", SDL_MUSTLOCK(primarySurface));

    if (!primarySurface) {
        puts("Error getting surface");
        puts(SDL_GetError());
        return 1;
    }

    {
        int x, y;
        unsigned char  r, g, b;

        SDL_LockSurface(primarySurface);
        for (y=0; y<primarySurface->h; y++) {
            for (x=0; x<primarySurface->w; x++) {
                r = 255 * x / primarySurface->w;
                g = 128;
                b = 255 * y / primarySurface->h;
                putpixel(primarySurface, x, y, r, g, b);
            }
        }
        SDL_UnlockSurface(primarySurface);
    }
    SDL_UpdateWindowSurface(window);

    SDL_Delay(5000);

    SDL_DestroyWindow(window);

    SDL_Quit();
    
    return 0;
}
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>test01.c</td><td>použití funkcí pro překreslení scény <strong>SDL_UpdateWindowSurface</strong>v&nbsp;jazyku c</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/c/test01.c">https://github.com/tisnik/go-root/blob/master/article_62/c/test01.c</a></td></tr>
<tr><td> 2</td><td>test01.go</td><td>stejný algoritmus přepsaný do jazyka Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/go/test01.go">https://github.com/tisnik/go-root/blob/master/article_62/go/test01.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>test02.c</td><td>překreslení vybrané části scény (jeden obdélník)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/c/test02.c">https://github.com/tisnik/go-root/blob/master/article_62/c/test02.c</a></td></tr>
<tr><td> 4</td><td>test02.go</td><td>stejný algoritmus přepsaný do jazyka Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/go/test02.go">https://github.com/tisnik/go-root/blob/master/article_62/go/test02.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>test03.c</td><td>překreslení vybrané části scény (dva překrývající se obdélníky)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/c/test03.c">https://github.com/tisnik/go-root/blob/master/article_62/c/test03.c</a></td></tr>
<tr><td> 6</td><td>test03.go</td><td>stejný algoritmus přepsaný do jazyka Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/go/test03.go">https://github.com/tisnik/go-root/blob/master/article_62/go/test03.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>test04.c</td><td>přenos rastrových dat pomocí funkce <strong>SDL_BlitSurface</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/c/test04.c">https://github.com/tisnik/go-root/blob/master/article_62/c/test04.c</a></td></tr>
<tr><td> 8</td><td>test04.go</td><td>stejný algoritmus přepsaný do jazyka Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/go/test04.go">https://github.com/tisnik/go-root/blob/master/article_62/go/test04.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>test05.c</td><td>umístění levého horního rohu obrázku do středu okna aplikace</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/c/test05.c">https://github.com/tisnik/go-root/blob/master/article_62/c/test05.c</a></td></tr>
<tr><td>10</td><td>test05.go</td><td>stejný algoritmus přepsaný do jazyka Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/go/test05.go">https://github.com/tisnik/go-root/blob/master/article_62/go/test05.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>test06.c</td><td>ořezání obrázku před jeho vykreslením do okna aplikace</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/c/test06.c">https://github.com/tisnik/go-root/blob/master/article_62/c/test06.c</a></td></tr>
<tr><td>12</td><td>test06.go</td><td>stejný algoritmus přepsaný do jazyka Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/go/test06.go">https://github.com/tisnik/go-root/blob/master/article_62/go/test06.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>test07.c</td><td>vykreslení obrázku se změnou jeho měřítka</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/c/test07.c">https://github.com/tisnik/go-root/blob/master/article_62/c/test07.c</a></td></tr>
<tr><td>14</td><td>test07.go</td><td>stejný algoritmus přepsaný do jazyka Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/go/test07.go">https://github.com/tisnik/go-root/blob/master/article_62/go/test07.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>test08.c</td><td>vykreslení obrázku se změnou jeho měřítka a posunem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/c/test08.c">https://github.com/tisnik/go-root/blob/master/article_62/c/test08.c</a></td></tr>
<tr><td>16</td><td>test08.go</td><td>stejný algoritmus přepsaný do jazyka Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/go/test08.go">https://github.com/tisnik/go-root/blob/master/article_62/go/test08.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>test09.c</td><td>vykreslení obrázku se změnou jeho měřítka a ořezáním</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/c/test09.c">https://github.com/tisnik/go-root/blob/master/article_62/c/test09.c</a></td></tr>
<tr><td>18</td><td>test09.go</td><td>stejný algoritmus přepsaný do jazyka Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/go/test09.go">https://github.com/tisnik/go-root/blob/master/article_62/go/test09.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>test10.c</td><td>zobrazení obrázku s&nbsp;alfa kanálem</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/c/test10.c">https://github.com/tisnik/go-root/blob/master/article_62/c/test10.c</a></td></tr>
<tr><td>20</td><td>test10.go</td><td>stejný algoritmus přepsaný do jazyka Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/go/test10.go">https://github.com/tisnik/go-root/blob/master/article_62/go/test10.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>test11.c</td><td>modifikace globální alfa složky</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/c/test11.c">https://github.com/tisnik/go-root/blob/master/article_62/c/test11.c</a></td></tr>
<tr><td>22</td><td>test11.go</td><td>stejný algoritmus přepsaný do jazyka Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/go/test11.go">https://github.com/tisnik/go-root/blob/master/article_62/go/test11.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>test12.c</td><td>modifikace barvových kanálů</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/c/test12.c">https://github.com/tisnik/go-root/blob/master/article_62/c/test12.c</a></td></tr>
<tr><td>24</td><td>test12.go</td><td>stejný algoritmus přepsaný do jazyka Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/go/test12.go">https://github.com/tisnik/go-root/blob/master/article_62/go/test12.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>25</td><td>test13.c</td><td>specifikace režimu míchání barev</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/c/test13.c">https://github.com/tisnik/go-root/blob/master/article_62/c/test13.c</a></td></tr>
<tr><td>26</td><td>test13.go</td><td>stejný algoritmus přepsaný do jazyka Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/go/test13.go">https://github.com/tisnik/go-root/blob/master/article_62/go/test13.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>27</td><td>test14.c</td><td>přímá změna barev pixelů v&nbsp;kreslicí ploše</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/c/test14.c">https://github.com/tisnik/go-root/blob/master/article_62/c/test14.c</a></td></tr>
<tr><td>28</td><td>test14.go</td><td>stejný algoritmus přepsaný do jazyka Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/go/test14.go">https://github.com/tisnik/go-root/blob/master/article_62/go/test14.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>29</td><td>test15.c</td><td>implementace funkce <strong>putpixel</strong></ttest15.cd><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/c/test15.c">https://github.com/tisnik/go-root/blob/master/article_62/c/test15.c</a></td></tr>
<tr><td>30</td><td>test15.go</td><td>stejný algoritmus přepsaný do jazyka Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_62/go/test15.go">https://github.com/tisnik/go-root/blob/master/article_62/go/test15.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránky projektu SDL<br />
<a href="http://www.libsdl.org/">http://www.libsdl.org/</a>
</li>

<li>Simple DirectMedia Layer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer">https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer</a>
</li>

<li>SDL Language Bindings<br />
<a href="http://www.libsdl.org/languages.php">http://www.libsdl.org/languages.php</a>
</li>

<li>SDL version 1.2.15<br />
<a
href="http://www.libsdl.org/download-1.2.php">http://www.libsdl.org/download-1.2.php</a>
</li>

<li>SDL version 2.0.1<br />
<a href="http://www.libsdl.org/download-2.0.php">http://www.libsdl.org/download-2.0.php</a>
</li>

<li>Rozhraní go-sdl2<br />
<a href="https://github.com/veandco/go-sdl2">https://github.com/veandco/go-sdl2</a>
</li>

<li>Dokumentace k&nbsp;rozhraní go-sdl2<br />
<a href="https://godoc.org/github.com/veandco/go-sdl2">https://godoc.org/github.com/veandco/go-sdl2</a>
</li>

<li>Dokumentace k&nbsp;balíčku sdl<br />
<a href="https://godoc.org/github.com/veandco/go-sdl2/sdl">https://godoc.org/github.com/veandco/go-sdl2/sdl</a>
</li>

<li>Dokumentace k&nbsp;balíčku gfx<br />
<a href="https://godoc.org/github.com/veandco/go-sdl2/gfx">https://godoc.org/github.com/veandco/go-sdl2/gfx</a>
</li>
<li>Cross-platform games development (part 1)<br />
<a href="http://renatoc.wait4.org/2010/02/04/cross-platform-games-development-part-1/">http://renatoc.wait4.org/2010/02/04/cross-platform-games-development-part-1/</a>
</li>

<li>Cross-platform games development (part 2)<br />
<a href="http://renatoc.wait4.org/tag/sdljava/">http://renatoc.wait4.org/tag/sdljava/</a>
</li>

<li>Go Data Structures: Binary Search Tree<br />
<a href="https://flaviocopes.com/golang-data-structure-binary-search-tree/">https://flaviocopes.com/golang-data-structure-binary-search-tree/</a>
</li>

<li>Gobs of data<br />
<a href="https://blog.golang.org/gobs-of-data">https://blog.golang.org/gobs-of-data</a>
</li>

<li>Formát BSON<br />
<a href="http://bsonspec.org/">http://bsonspec.org/</a>
</li>

<li>Golang Guide: A List of Top Golang Frameworks, IDEs &amp; Tools<br />
<a href="https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/">https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/</a>
</li>

<li>Tvorba univerzálních projevů<br />
<a href="http://www.kyblsoft.cz/projevy">http://www.kyblsoft.cz/projevy</a>
</li>

<li>Repositář projektu Gift<br />
<a href="https://github.com/disintegration/gift">https://github.com/disintegration/gift</a>
</li>

<li>Dokumentace k&nbsp;projektu Gift<br />
<a href="https://godoc.org/github.com/disintegration/gift">https://godoc.org/github.com/disintegration/gift</a>
</li>

<li>Online x86 / x64 Assembler and Disassembler<br />
<a href="https://defuse.ca/online-x86-assembler.htm#disassembly2">https://defuse.ca/online-x86-assembler.htm#disassembly2</a>
</li>

<li>The Design of the Go Assembler<br />
<a href="https://talks.golang.org/2016/asm.slide#1">https://talks.golang.org/2016/asm.slide#1</a>
</li>

<li>A Quick Guide to Go's Assembler<br />
<a href="https://golang.org/doc/asm">https://golang.org/doc/asm</a>
</li>

<li>AssemblyPolicy<br />
<a href="https://github.com/golang/go/wiki/AssemblyPolicy">https://github.com/golang/go/wiki/AssemblyPolicy</a>
</li>

<li>Geohash in Golang Assembly<br />
<a href="https://mmcloughlin.com/posts/geohash-assembly">https://mmcloughlin.com/posts/geohash-assembly</a>
</li>

<li>Command objdump<br />
<a href="https://golang.org/cmd/objdump/">https://golang.org/cmd/objdump/</a>
</li>

<li>Assembly<br />
<a href="https://goroutines.com/asm">https://goroutines.com/asm</a>
</li>

<li>Go &amp; Assembly<br />
<a href="http://www.doxsey.net/blog/go-and-assembly">http://www.doxsey.net/blog/go-and-assembly</a>
</li>

<li>A Foray Into Go Assembly Programming<br />
<a href="https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming/">https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming/</a>
</li>

<li>Golang Capturing log.Println And fmt.Println Output<br />
<a href="https://medium.com/@hau12a1/golang-capturing-log-println-and-fmt-println-output-770209c791b4">https://medium.com/@hau12a1/golang-capturing-log-println-and-fmt-println-output-770209c791b4</a>
</li>

<li>Stránka projektu plotly<br />
<a href="https://plot.ly/">https://plot.ly/</a>
</li>

<li>Plotly JavaScript Open Source Graphing Library<br />
<a href="https://plot.ly/javascript/">https://plot.ly/javascript/</a>
</li>

<li>Domain coloring<br />
<a href="https://en.wikipedia.org/wiki/Domain_coloring">https://en.wikipedia.org/wiki/Domain_coloring</a>
</li>

<li>Michael Fogleman's projects<br />
<a href="https://www.michaelfogleman.com/projects/tagged/graphics/">https://www.michaelfogleman.com/projects/tagged/graphics/</a>
</li>

<li>Color Graphs of Complex Functions<br />
<a href="https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html">https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html</a>
</li>

<li>A Gallery of Complex Functions<br />
<a href="http://wismuth.com/complex/gallery.html">http://wismuth.com/complex/gallery.html</a>
</li>

<li>package glot<br />
<a href="https://godoc.org/github.com/Arafatk/glot">https://godoc.org/github.com/Arafatk/glot</a>
</li>

<li>Gnuplotting: Output terminals<br />
<a href="http://www.gnuplotting.org/output-terminals/">http://www.gnuplotting.org/output-terminals/</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1">https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://blog.gopheracademy.com/advent-2018/introducing-glot/">https://blog.gopheracademy.com/advent-2018/introducing-glot/</a>
</li>

<li>Glot is a plotting library for Golang built on top of gnuplot<br />
<a href="https://github.com/Arafatk/glot">https://github.com/Arafatk/glot</a>
</li>

<li>Example plots (gonum/plot)<br />
<a href="https://github.com/gonum/plot/wiki/Example-plots">https://github.com/gonum/plot/wiki/Example-plots</a>
</li>

<li>A repository for plotting and visualizing data (gonum/plot)<br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>golang library to make https://chartjs.org/ plots<br />
<a href="https://github.com/brentp/go-chartjs">https://github.com/brentp/go-chartjs</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>The Gonum Numerical Computing Package<br />
<a href="https://www.gonum.org/post/introtogonum/">https://www.gonum.org/post/introtogonum/</a>
</li>

<li>Gomacro na GitHubu<br />
<a href="https://github.com/cosmos72/gomacro">https://github.com/cosmos72/gomacro</a>
</li>

<li>gophernotes - Use Go in Jupyter notebooks and nteract<br />
<a href="https://github.com/gopherdata/gophernotes">https://github.com/gopherdata/gophernotes</a>
</li>

<li>gonum<br />
<a href="https://github.com/gonum">https://github.com/gonum</a>
</li>

<li>go-gota/gota -  DataFrames and data wrangling in Go (Golang)<br />
<a href="https://porter.io/github.com/go-gota/gota">https://porter.io/github.com/go-gota/gota</a>
</li>

<li>A repository for plotting and visualizing data <br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>Gonum Numerical Packages<br />
<a href="https://www.gonum.org/">https://www.gonum.org/</a>
</li>

<li>Stránky projektu MinIO<br />
<a href="https://min.io/">https://min.io/</a>
</li>

<li>MinIO Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-quickstart-guide.html">https://docs.min.io/docs/minio-quickstart-guide.html</a>
</li>

<li>MinIO Go Client API Reference<br />
<a href="https://docs.min.io/docs/golang-client-api-reference">https://docs.min.io/docs/golang-client-api-reference</a>
</li>

<li>MinIO Python Client API Reference<br />
<a href="https://docs.min.io/docs/python-client-api-reference.html">https://docs.min.io/docs/python-client-api-reference.html</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>MinIO Client Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a>
</li>

<li>Analýza kvality zdrojových kódů Minia<br />
<a href="https://goreportcard.com/report/github.com/minio/minio">https://goreportcard.com/report/github.com/minio/minio</a>
</li>

<li>This is MinIO<br />
<a href="https://www.youtube.com/watch?v=vF0lQh0XOCs">https://www.youtube.com/watch?v=vF0lQh0XOCs</a>
</li>

<li>Running MinIO Standalone<br />
<a href="https://www.youtube.com/watch?v=dIQsPCHvHoM">https://www.youtube.com/watch?v=dIQsPCHvHoM</a>
</li>

<li>"Amazon S3 Compatible Storage in Kubernetes" - Rob Girard, Principal Tech Marketing Engineer, Minio<br />
<a href="https://www.youtube.com/watch?v=wlpn8K0jJ4U">https://www.youtube.com/watch?v=wlpn8K0jJ4U</a>
</li>

<li>Ginkgo<br />
<a href="http://onsi.github.io/ginkgo/">http://onsi.github.io/ginkgo/</a>
</li>

<li>Gomega<br />
<a href="https://onsi.github.io/gomega/">https://onsi.github.io/gomega/</a>
</li>

<li>Ginkgo's Preferred Matcher Library na GitHubu<br />
<a href="https://github.com/onsi/gomega/">https://github.com/onsi/gomega/</a>
</li>

<li>Provided Matchers<br />
<a href="http://onsi.github.io/gomega/#provided-matchers">http://onsi.github.io/gomega/#provided-matchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku goexpect<br />
<a href="https://godoc.org/github.com/google/goexpect">https://godoc.org/github.com/google/goexpect</a>
</li>

<li>Balíček goexpect<br />
<a href="https://github.com/google/goexpect">https://github.com/google/goexpect</a>
</li>

<li>Balíček go-expect<br />
<a href="https://github.com/Netflix/go-expect">https://github.com/Netflix/go-expect</a>
</li>

<li>Balíček gexpect<br />
<a href="https://github.com/ThomasRooney/gexpect">https://github.com/ThomasRooney/gexpect</a>
</li>

<li>Expect (originál naprogramovaný v&nbsp;TCL)<br />
<a href="https://core.tcl-lang.org/expect/index">https://core.tcl-lang.org/expect/index</a>
</li>

<li>Expect (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Expect">https://en.wikipedia.org/wiki/Expect</a>
</li>

<li>Pexpect<br />
<a href="https://pexpect.readthedocs.io/en/stable/">https://pexpect.readthedocs.io/en/stable/</a>
</li>

<li>Golang SSH Client: Multiple Commands, Crypto &amp; Goexpect Examples<br />
<a href="http://networkbit.ch/golang-ssh-client/">http://networkbit.ch/golang-ssh-client/</a>
</li>

<li>goblin na GitHubu<br />
<a href="https://github.com/franela/goblin">https://github.com/franela/goblin</a>
</li>

<li>Mocha framework<br />
<a href="https://mochajs.org/">https://mochajs.org/</a>
</li>

<li>frisby na GitHubu<br />
<a href="https://github.com/verdverm/frisby">https://github.com/verdverm/frisby</a>
</li>

<li>package frisby<br />
<a href="https://godoc.org/github.com/verdverm/frisby">https://godoc.org/github.com/verdverm/frisby</a>
</li>

<li>Frisby alternatives and similar packages (generováno)<br />
<a href="https://go.libhunt.com/frisby-alternatives">https://go.libhunt.com/frisby-alternatives</a>
</li>

<li>Cucumber for golang<br />
<a href="https://github.com/DATA-DOG/godog">https://github.com/DATA-DOG/godog</a>
</li>

<li>How to Use Godog for Behavior-driven Development in Go<br />
<a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go</a>
</li>

<li>Comparative Analysis Of GoLang Testing Frameworks<br />
<a href="https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks">https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks</a>
</li>

<li>A Quick Guide to Testing in Golang<br />
<a href="https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/">https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/</a>
</li>

<li>Tom's Obvious, Minimal Language.<br />
<a href="https://github.com/toml-lang/toml">https://github.com/toml-lang/toml</a>
</li>

<li>xml.org<br />
<a href="http://www.xml.org/">http://www.xml.org/</a>
</li>

<li>Soubory .properties<br />
<a href="https://en.wikipedia.org/wiki/.properties">https://en.wikipedia.org/wiki/.properties</a>
</li>

<li>Soubory INI<br />
<a href="https://en.wikipedia.org/wiki/INI_file">https://en.wikipedia.org/wiki/INI_file</a>
</li>

<li>JSON to YAML<br />
<a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a>
</li>

<li>Data Format Converter<br />
<a href="https://toolkit.site/format.html">https://toolkit.site/format.html</a>
</li>

<li>Viper na GitHubu<br />
<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>
</li>

<li>GoDotEnv na GitHubu<br />
<a href="https://github.com/joho/godotenv">https://github.com/joho/godotenv</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

