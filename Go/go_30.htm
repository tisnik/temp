<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Trasování a profilování aplikací naprogramovaných v Go (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Trasování a profilování aplikací naprogramovaných v Go (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třicáté části seriálu o programovacím jazyku Go si nejprve ukážeme, jakým způsobem je možné získat aktuální metriky měřené profilerem u těch aplikací, které pracují v&nbsp;režimu serveru (síťové aplikace, démoni, webové servery). Dále se seznámíme se základními možnostmi nabízenými profilerem.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Trasování a profilování aplikací naprogramovaných v&nbsp;Go (dokončení)</a></p>
<p><a href="#k02">2. Jednoduchý HTTP server s&nbsp;dynamicky generovaným obsahem</a></p>
<p><a href="#k03">3. Přidání podpory pro poskytování trasovacích informací</a></p>
<p><a href="#k04">4. Nová podoba HTTP serveru</a></p>
<p><a href="#k05">5. Ukázka poskytovaných informací</a></p>
<p><a href="#k06">6. Složitější HTTP server s&nbsp;výpočty probíhajícími v&nbsp;gorutinách</a></p>
<p><a href="#k07">7. Trasování a balíček <strong>runtime/trace</strong></a></p>
<p><a href="#k08">8. Trasování při spuštění testů</a></p>
<p><a href="#k09">9. Výsledky běhu traceru</a></p>
<p><a href="#k10">10. Jednoduchý demonstrační příklad s&nbsp;přímou podporou trasování</a></p>
<p><a href="#k11">11. Kontext (context) a úlohy (task)</a></p>
<p><a href="#k12">12. Zobrazení úlohy na stránce s&nbsp;výsledky běhu traceru</a></p>
<p><a href="#k13">13. Rozdělení celé úlohy na regiony</a></p>
<p><a href="#k14">14. Zobrazení regionů na stránce s&nbsp;výsledky běhu traceru</a></p>
<p><a href="#k15">15. Hierarchie regionů a zápis logovacích zpráv do souboru s&nbsp;trasovacími informacemi</a></p>
<p><a href="#k16">16. Zobrazení regionů a logovacích informací na stránce s&nbsp;výsledky běhu traceru</a></p>
<p><a href="#k17">17. Úprava projektu pro vykreslení Mandelbrotovy množiny pro přímou podporu trasování</a></p>
<p><a href="#k18">18. Úplné trasovací informace společně s&nbsp;logováním do souboru generovaného tracerem</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Trasování a profilování aplikací naprogramovaných v&nbsp;Go (dokončení)</h2>

<p><a
href="https://www.root.cz/clanky/trasovani-a-profilovani-aplikaci-naprogramovanych-v-go/">V&nbsp;předchozí
části</a> <a href="https://www.root.cz/serialy/programovaci-jazyk-go/">seriálu
o programovacím jazyce Go</a> jsme si ukázali dva způsoby využití standardního
<i>profileru</i>, který je součástí standardních nástrojů dodávaných společně
s&nbsp;překladačem Go. Ještě si však musíme vysvětlit jednu důležitou oblast,
v&nbsp;níž se profiler používá. Jedná se o zajištění (v&nbsp;případě potřeby i
kontinuálního) profilingu síťových aplikací, webových aplikací a služeb
(démonů), protože jazyk Go je v&nbsp;této oblasti poměrně intenzivně používán.
Tomuto tématu se budeme věnovat <a href="#k01">v&nbsp;první části</a> dnešního
článku. <a href="#k07">V&nbsp;části druhé</a> se naproti tomu budeme zabývat
takzvaným <i>tracingem</i>, který je opět podporován v&nbsp;základní sadě
nástrojů jazyka Go.</p>

<p>V&nbsp;mnoha vyspělých virtuálních strojích navržených pro spouštění
aplikací (typicky přeložených do bajtkódu daného virtuálního stroje) většinou
nalezneme i podporu pro sledování běžící aplikace, zjišťování metrik, trasování
a někdy i profilování, a to i ve chvíli, kdy aplikace právě běží (a podobně
sledované aplikace mohou bez restartu běžet i několik měsíců). Jedná se o velmi
užitečnou vlastnost, protože u mnoha aplikací dochází k&nbsp;problematickému
chování nikoli v&nbsp;době jejich testování, ale až po nasazení do
předprodukčního nebo dokonce až produkčního prostředí. Virtuálním strojem,
který tuto podporu nabízí, je i JVM (<i>Java Virtual Machine</i>), kterému jsme
se poměrně podrobně věnovali v&nbsp;seriálu <a
href="https://www.root.cz/serialy/programovaci-jazyk-java-a-jvm/">Seriál
Programovací jazyk Java a JVM</a>. Nyní tedy na chvíli odbočíme a řekneme si,
jaké možnosti nám nabízí JVM.</p>

<p><div class="rs-tip-major">Poznámka: samozřejmě je možné tento doplňující
text <a href="#k02">přeskočit a přejít přímo k&nbsp;části věnované jazyku
Go</a>.</div></p>

<p>Virtuální stroj Javy administrátorům a devops týmům nabízí několik rozhraní
určených pro sledování aplikací, přičemž se tato rozhraní od sebe odlišují
zejména tím, do jaké míry jsou nízkoúrovňová (a tedy i obecnější) či naopak
vysokoúrovňová.</p>

<p>Na nejnižší úrovni leží rozhraní <i>JVM TI</i>, neboli celým názvem <i>Java
Virtual Machine Tools Interface</i>, které lze využít pro sledování činnosti
virtuálního stroje Javy i pro jeho částečné řízení. Toto rozhraní, které bylo
poprvé implementováno v&nbsp;<i>J2SE 5.0</i> může být využito k&nbsp;provádění
mnoha různých operací. Například je možné sledovat práci správce paměti (<i>GC
&ndash; garbage collector</i>), přistupovat k&nbsp;objektům uloženým na heapu,
zjišťovat volané metody, detekovat a sledovat překlad bajtkódu JVM do nativního
strojového kódu dané platformy, nastavovat a posléze i využívat breakpointy,
detekovat výjimky v&nbsp;javovských aplikacích (a to i ty výjimky, které jsou
zachycené v&nbsp;bloku <strong>catch</strong>) atd. <i>JVM TI</i> je využíváno
debuggery a profilery, které potřebují přistupovat k&nbsp;běžící JVM, ovšem
vlastnosti tohoto rozhraní lze využít i v&nbsp;dalších typech nástrojů,
například pro zjišťování pokrytí kódu testy, detekci přístupu k&nbsp;určitým
souborům apod.</p>

<p>Rozhraní <i>JVM TI</i> může být využíváno i takzvanými <i>agenty</i>, což
jsou nativní knihovny, které jsou v&nbsp;tom nejjednodušším případě načteny při
startu <i>JVM</i> a běží ve stejném procesu, jako samotná <i>JVM</i>. Agenti
mohou přes rozhraní <i>JVM TI</i> oboustranně komunikovat s&nbsp;virtuálním
strojem Javy. Komunikace směrem agent&rarr;JVM probíhá jednoduše voláním funkcí
nabízených rozhraním, zpětná komunikace JVM&rarr;agent je zabezpečena pomocí
takzvaných <i>callback</i> funkcí, které musí být nejdříve zaregistrovány pro
různé typy událostí, které mohou ve virtuálním stroji nastat (mezi událost může
například patřit spuštění správce paměti, vznik výjimky atd.). Vzhledem
k&nbsp;tomu, že <i>agenti</i> musí být překládáni do nativní knihovny, používá
se pro jejich implementaci většinou programovací jazyk C či C++
(popř.&nbsp;jakýkoli jiný jazyk podporující céčkovskou konvenci volání funkcí),
ovšem samotný agent je většinou poměrně kompaktní knihovna nabízející své
vlastní rozhraní externím procesům &ndash; takto lze například realizovat
debugger nebo jednoduchý monitorovací nástroj.</p>

<p>Nad rozhraním JVM TI je vytvořen komunikační kanál tvořený protokolem
<i>JDWP (Java Debug Wire Protocol)</i> a nad tímto protokolem bylo vytvořeno
plnohodnotné javovské rozhraní nazvané <i>JDI (Java Debug Interface)</i>.
<i>JVM TI</i>, <i>JDWP</i> (společně s&nbsp;poměrně jednoduchým rozhraním
k&nbsp;tomuto protokolu <i>JDWPI</i>) a <i>JDI</i> tvoří ucelenou třívrstvou
architekturu nazvanou <i>Java Platform Debugger Architecture</i> neboli
zkráceně <i>JPDA</i>. Jak již název této architektury naznačuje, lze ji použít
například pro implementaci různých ladicích nástrojů (debuggerů), ale i
nástrojů monitorovacích, nástrojů umožňujících &bdquo;hotswap&ldquo; tříd či
jejich metod do běžícího virtuálního stroje Javy apod.</p>

<p>Z&nbsp;tohoto důvodu jsou funkce nabízené jednou ze tří zmíněných
technologií velmi často využívány i integrovanými vývojovými prostředími (IDE).
Na provádění nízkoúrovňových operací je přitom používáno rozhraní <i>JVM TI</i>
a pro implementaci vysokoúrovňových funkcí pak <i>JDI</i>, popř.&nbsp;se
s&nbsp;virtuálním strojem Javy, v&nbsp;němž byla spuštěna vyvíjená aplikace,
komunikuje přímo s&nbsp;využitím protokolu <i>JDWP</i> (to je však většinou
zbytečně komplikované). Vzájemný vztah mezi rozhraním <i>JVM TI</i>, protokolem
<i>JDWP</i> a rozhraním <i>JDI</i> je zobrazen na následujícím schématu:</p>

<img src="http://i.iinfo.cz/images/426/jpda.png" class="image-124848" width="596" height="398" alt="&#160;" />
<p><i>Obrázek 1: Vzájemný vztah mezi (céčkovým) rozhraním JVM TI, protokolem
JDWP a javovským rozhraním JDI.</i></p>

<p>A nakonec nesmíme zapomenout ani na <i>JMX</i> umožňující, aby běžící
aplikace dávala k&nbsp;dispozici svoji konfiguraci, metriky atd. Ty je možné
číst a popřípadě i modifikovat nástroji, které s&nbsp;rozhraním dokážou
pracovat. Mezi tyto nástroje patří i standardní <i>JConsole</i>.</p>

<p><div class="rs-tip-major">Poznámka: osobně existenci a stabilitu těchto
rozhraní považuji za jednu z&nbsp;těch technologií, která JVM (a podobně
vyspělé VM) odlišuje od jednodušších řešení.</div></p>

<a href="https://www.root.cz/obrazek/352783/"><img src="https://i.iinfo.cz/images/284/amq1-8-prev.png" class="image-352783" alt="&#160;" width="324" height="270" /></a>
<p><i>Obrázek 2: Sledování a řízení Apache MQ přes standardní rozhraní JMX
z&nbsp;nástroje JConsole.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Jednoduchý HTTP server s&nbsp;dynamicky generovaným obsahem</h2>

<p>Proč se vlastně o virtuálním stroji jazyka Java a jeho možnostech vůbec
zmiňuji v&nbsp;článku, který by měl být primárně věnován programovacímu jazyku
Go? Jazyk Go má totiž s&nbsp;Javou částečný překryv oblasti použití (neboli
obsazuje stejné niky), takže je namístě otázka, zda nám runtime jazyka Go
nabízí podobnou funkcionalitu, jako celý virtuální stroj Javy; samozřejmě
s&nbsp;ohledem na to, že runtime Go je mnohem menší (přibližně jeden až dva
megabajty strojového kódu). Ve skutečnosti i v&nbsp;ekosystému Go nalezneme
podobně koncipovanou technologii, kterou lze zprovoznit následujícím
způsobem:</p>

<ol>

<li>Aplikace, kterou potřebujeme sledovat, spustí HTTP server. Buď se bude
jednat o server používaný pouze pro sledování aplikace, nebo se může jednat o
server, který kromě jiného nabízí ty služby, pro které je aplikace
naprogramována.</li>

<li>Naimportuje se balíček <strong></strong>, který zajistí, že HTTP server
bude dodávat mj.&nbsp;i ladicí informace, a to pochopitelně přes HTTP protokol
(dokonce s&nbsp;generováním interaktivních HTML stránek).</li>

<li>Po spuštění aplikace a inicializaci HTTP serveru je možné se k&nbsp;běžící
aplikaci připojit a &bdquo;živě&ldquo; sledovat její chování. Díky použití HTTP
je implementace případného klienta vlastně velmi jednoduchá.</li>

<li>Navíc je možné s&nbsp;využitím balíčku <a
href="https://golang.org/pkg/expvar/">expvar</a> dát k&nbsp;dispozici i další
metriky běžící aplikace. Tomuto tématu se budeme podrobněji věnovat
příště.</li>

</ol>

<p>Podívejme se nyní na jednoduchou aplikaci, která již obsahuje HTTP server a
jejíž činnost budeme chtít sledovat. Jedná se o značně primitivní webový
server, který po otevření cesty <strong>/</strong> vrátí webovou stránku
s&nbsp;odkazem na rastrový obrázek dostupným pod cestou
<strong>/image</strong>. Tento obrázek je taktéž generován HTTP serverem
&ndash; obsahuje pixely s&nbsp;náhodnou barvou (což je mimochodem fakt, který
příliš &bdquo;nepotěší&ldquo; algoritmus <a
href="https://en.wikipedia.org/wiki/DEFLATE">DEFLATE</a> použitý při exportu
rastrového obrázku <a href="https://www.root.cz/clanky/png-is-not-gif/">do
formátu PNG</a>). <a
href="https://github.com/tisnik/go-root/blob/master/article_30/01_image_server.go">Úplný
zdrojový kód</a> tohoto HTTP serveru vypadá následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "image"
        "image/color"
        "image/png"
        "math/rand"
        "net/http"
)
&nbsp;
func <strong>indexPageHandler</strong>(writer http.ResponseWriter, request *http.Request) {
        writer.Header().Set("Content-Type", "text/html")
        response := `
&lt;body&gt;
    &lt;h1&gt;Enterprise image renderer&lt;/h1&gt;
    &lt;img src="/image" width=256 height=256 /&gt;
&lt;/body&gt;`
        writer.Write([]byte(response))
}
&nbsp;
func <strong>calculateColor</strong>() color.RGBA {
        return color.RGBA{uint8(rand.Intn(255)),
                uint8(rand.Intn(255)),
                uint8(rand.Intn(255)), 255}
}
&nbsp;
func <strong>imageHandler</strong>(w http.ResponseWriter, r *http.Request) {
        const ImageWidth = 256
        const ImageHeight = 256
        outputimage := image.NewRGBA(image.Rectangle{image.Point{0, 0},
                image.Point{ImageWidth, ImageHeight}})
&nbsp;
        for y := 0; y &lt; ImageHeight; y++ {
                for x := 0; x &lt; ImageWidth; x++ {
                        c := calculateColor()
                        outputimage.Set(x, y, c)
                }
        }
        png.Encode(w, outputimage)
}
&nbsp;
func <strong>main</strong>() {
        http.HandleFunc("/", indexPageHandler)
        http.HandleFunc("/image", imageHandler)
        http.ListenAndServe(":8080", nil)
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Přidání podpory pro poskytování trasovacích informací</h2>

<p>Úprava našeho HTTP serveru takovým způsobem, aby poskytoval i metriky
s&nbsp;informacemi o běhu aplikace, je vlastně velmi primitivní. Pouze je
zapotřebí naimportovat balíček <strong>net/http/pprof</strong>; to je vše,
protože zbytek je zařízen funkcí <strong>init()</strong> zavolanou po importu.
Vzhledem k&nbsp;tomu, že tento balíček nebudeme explicitně používat (volat jeho
funkce), je nutné před jeho jméno vložit podtržítko, protože v&nbsp;opačném
případě by překladač Go zcela správně vypsal chybové hlášení, že se snažíme
importovat balíček, který není použit:</p>

<pre>
import (
        "image"
        "image/png"
        "net/http"
        <strong>_ "net/http/pprof"</strong>
)
</pre>

<img src="https://i.iinfo.cz/images/403/go30-1.png" class="image-363613" alt="&#160;" width="491" height="364" />
<p><i>Obrázek 3: Stránka s&nbsp;obrázkem generovaná HTTP serverem
implementovaným v&nbsp;předchozím příkladu.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Nová podoba HTTP serveru</h2>

<p>Zdrojový kód nové podoby HTTP serveru, který nyní bude poskytovat i
profilovací informace, naleznete na adrese <a
href="https://github.com/tisnik/go-root/blob/master/article_30/02_image_server_with_pprof.go">https://github.com/tisnik/go-root/blob/master/article_30/02_image_server_with_pprof.go</a>.
Oproti předchozímu zdrojovému kódu skutečně došlo jen k&nbsp;minimální změně
&ndash; importu balíčku <strong>net/http/pprof</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "image"
        "image/color"
        "image/png"
        "math/rand"
        "net/http"
        <strong>_ "net/http/pprof"</strong>
)
&nbsp;
func <strong>indexPageHandler</strong>(writer http.ResponseWriter, request *http.Request) {
        writer.Header().Set("Content-Type", "text/html")
        response := `
&lt;body&gt;
    &lt;h1&gt;Enterprise image renderer&lt;/h1&gt;
    &lt;img src="/image" width=256 height=256 /&gt;
&lt;/body&gt;`
        writer.Write([]byte(response))
}
&nbsp;
func <strong>calculateColor</strong>() color.RGBA {
        return color.RGBA{uint8(rand.Intn(255)),
                uint8(rand.Intn(255)),
                uint8(rand.Intn(255)), 255}
}
&nbsp;
func <strong>imageHandler</strong>(w http.ResponseWriter, r *http.Request) {
        const ImageWidth = 256
        const ImageHeight = 256
        outputimage := image.NewRGBA(image.Rectangle{image.Point{0, 0},
                image.Point{ImageWidth, ImageHeight}})
&nbsp;
        for y := 0; y &lt; ImageHeight; y++ {
                for x := 0; x &lt; ImageWidth; x++ {
                        c := calculateColor()
                        outputimage.Set(x, y, c)
                }
        }
        png.Encode(w, outputimage)
}
&nbsp;
func <strong>main</strong>() {
        http.HandleFunc("/", indexPageHandler)
        http.HandleFunc("/image", imageHandler)
        http.ListenAndServe(":8080", nil)
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Ukázka poskytovaných informací</h2>

<p>Pokud nyní HTTP server spustíme, bude stále poskytovat původní služby pod
adresami / a /image:</p>

<img src="https://i.iinfo.cz/images/403/go30-2.png" class="image-363614" alt="&#160;" width="491" height="362" />
<p><i>Obrázek 4: Původní funkce HTTP serveru zůstane zachována.</i></p>

<p>Ovšem kromě toho se automaticky vytvoří i další cesty, které jsou
v&nbsp;době běhu aplikace přístupné. Úvodní stránka s&nbsp;profilovacími
informacemi je dostupná na adrese /debug/pprof:</p>

<a href="https://www.root.cz/obrazek/363615/"><img src="https://i.iinfo.cz/images/403/go30-3-prev.png" class="image-363615" alt="&#160;" width="370" height="179" /></a>
<p><i>Obrázek 5: Úvodní stránka s&nbsp;profilovacími informacemi.</i></p>

<p>Tato stránka je vytvořena takovým způsobem, že pro její zobrazení bude
dostačovat i prohlížeč typu <strong>lynx</strong> či
<strong>links</strong>:</p>

<a href="https://www.root.cz/obrazek/363616/"><img src="https://i.iinfo.cz/images/403/go30-4-prev.png" class="image-363616" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 6: Úvodní stránka s&nbsp;profilovacími informacemi, nyní
zobrazená v&nbsp;Lynxu.</i></p>

<p>Mnoho informací je dostupných v&nbsp;čisté textové podobě, například
zásobníkové rámce jednotlivých gorutin. Ty si můžeme prohlédnout přímo ve
webovém prohlížeči nebo si je stáhnout nástroji <strong>wget</strong> a
<strong>curl</strong>:</p>

<pre>
$ <strong>curl http://localhost:8080/debug/pprof/goroutine?debug=2</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: parametr <strong>debug</strong> je zde
nutné uvést.</div></p>

<p>S&nbsp;výsledkem (zde zkráceným):</p>

<pre>
goroutine 18 [running]:
runtime/pprof.writeGoroutineStacks(0x838840, 0xc00013e380, 0x40d6bf, 0xc000081980)
        /opt/go/src/runtime/pprof/pprof.go:678 +0xa7
        ...
        ...
        ...
goroutine 1 [IO wait]:
internal/poll.runtime_pollWait(0x7fe139ec7f00, 0x72, 0x0)
        /opt/go/src/runtime/netpoll.go:173 +0x66
internal/poll.(*pollDesc).wait(0xc000126098, 0x72, 0xc00005c000, 0x0, 0x0)
        /opt/go/src/internal/poll/fd_poll_runtime.go:85 +0x9a
internal/poll.(*pollDesc).waitRead(0xc000126098, 0xffffffffffffff00, 0x0, 0x0)
        /opt/go/src/internal/poll/fd_poll_runtime.go:90 +0x3d
internal/poll.(*FD).Accept(0xc000126080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
        /opt/go/src/internal/poll/fd_unix.go:384 +0x1a0
net.(*netFD).accept(0xc000126080, 0x40d6bf, 0xc000436000, 0xa0)
        /opt/go/src/net/fd_unix.go:238 +0x42
net.(*TCPListener).accept(0xc00012a008, 0xc000095db8, 0x71af28ce, 0x29e846d03867962b)
        /opt/go/src/net/tcpsock_posix.go:139 +0x2e
net.(*TCPListener).AcceptTCP(0xc00012a008, 0xc000095de0, 0x49e5f6, 0x5d0660f6)
        /opt/go/src/net/tcpsock.go:247 +0x47
net/http.tcpKeepAliveListener.Accept(0xc00012a008, 0xc000095e30, 0x18, 0xc000000300, 0x68fb65)
        /opt/go/src/net/http/server.go:3232 +0x2f
net/http.(*Server).Serve(0xc0001281a0, 0x83bcc0, 0xc00012a008, 0x0, 0x0)
        /opt/go/src/net/http/server.go:2826 +0x22f
net/http.(*Server).ListenAndServe(0xc0001281a0, 0xc0001281a0, 0x7f03f0)
        /opt/go/src/net/http/server.go:2764 +0xb6
net/http.ListenAndServe(0x7d42ff, 0x5, 0x0, 0x0, 0xc000095f88, 0xc000076058)
        /opt/go/src/net/http/server.go:3004 +0x74
main.main()
        <strong>/home/tester/go-root/article_30/02_image_server_with_pprof.go:46 +0x8c</strong>
</pre>

<p>Informace o paměťovém subsystému jazyka Go v&nbsp;textové (čitelné) podobě
získáme opět nástrojem <strong>curl</strong> nebo přímo ve webovém
prohlížeči:</p>

<pre>
$ <strong>curl http://localhost:8080/debug/pprof/alloc?debug=1</strong>
</pre>

<p>S&nbsp;výsledkem (zde taktéž zkráceným):</p>

<pre>
# runtime.MemStats
# Alloc = 1568912
# TotalAlloc = 7938176
# Sys = 72022264
# Lookups = 0
# Mallocs = 136375
# Frees = 134637
# HeapAlloc = 1568912
# HeapSys = 66617344
# HeapIdle = 64028672
# HeapInuse = 2588672
# HeapReleased = 0
# HeapObjects = 1738
# Stack = 491520 / 491520
# MSpan = 24776 / 49152
# MCache = 6912 / 16384
# BuckHashSys = 1444585
# GCSys = 2371584
# OtherSys = 1031695
# NextGC = 4194304
# LastGC = 1560699375977620410
# PauseNs = [294592 92207 81090 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
# PauseEnd = [1560699131094663288 1560699252313448267 1560699375977620410 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
# NumGC = 3
# NumForcedGC = 0
# GCCPUFraction = 2.9504534000959272e-06
# DebugGC = false
</pre>

<p>V&nbsp;případě, že neuvedete parametr <strong>debug</strong>, bude
vyžadovaná informace poskytnuta v&nbsp;binárním formátu určeném pro další
zpracování nástrojem <strong>pprof</strong> nebo <strong>trace</strong>. Opět
si ukažme způsob použití. Tentokrát namísto <strong>curl</strong> použijeme
<strong>wget</strong> a uložíme výsledek do souboru nazvaného
&bdquo;goroutines.pprof&ldquo;:</p>

<pre>
$ <strong>wget -O goroutines.pprof http://localhost:8080/debug/pprof/goroutine</strong>
</pre>

<p>Po provedení příkazu by měl být vytvořen binární soubor
<strong>goroutines.pprof</strong>, jenž si můžeme prohlédnout takto:</p>

<pre>
$ <strong>go tool pprof -text goroutines.pprof</strong>
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
File: 02_image_server_with_pprof
Type: goroutine
Time: Jun 16, 2019 at 5:39pm (CEST)
Showing nodes accounting for 3, 100% of 3 total
      flat  flat%   sum%        cum   cum%
         1 33.33% 33.33%          1 33.33%  runtime.gopark
         1 33.33% 66.67%          1 33.33%  runtime/pprof.writeRuntimeProfile
         1 33.33%   100%          1 33.33%  syscall.Syscall
         0     0%   100%          1 33.33%  internal/poll.(*FD).Accept
         0     0%   100%          1 33.33%  internal/poll.(*FD).Read
...
...
...
</pre>

<p>Informace o alokacích paměti:</p>

<pre>
$ <strong>wget -O allocs.pprof http://localhost:8080/debug/pprof/allocs</strong>
</pre>

<p>Analýza informací uložených do binárního souboru
<strong>allocs.pprof</strong>:</p>

<pre>
$ <strong>go tool pprof -text allocs.pprof</strong>
&nbsp;
File: 02_image_server_with_pprof
Type: alloc_space
Time: Jun 16, 2019 at 5:45pm (CEST)
Showing nodes accounting for 17945.43kB, 100% of 17945.43kB total
      flat  flat%   sum%        cum   cum%
 7220.69kB 40.24% 40.24% 10338.57kB 57.61%  compress/flate.NewWriter
 3552.82kB 19.80% 60.03%  3552.82kB 19.80%  runtime/pprof.writeGoroutineStacks
 3525.88kB 19.65% 79.68%  3525.88kB 19.65%  runtime/pprof.StartCPUProfile
 1951.87kB 10.88% 90.56%  3117.88kB 17.37%  compress/flate.(*compressor).init
 1166.01kB  6.50% 97.06%  1166.01kB  6.50%  compress/flate.newDeflateFast (inline)
  528.17kB  2.94%   100%   528.17kB  2.94%  bufio.NewWriterSize (inline)
         0     0%   100%  1805.17kB 10.06%  compress/flate.NewWriterDict
         0     0%   100%  8533.40kB 47.55%  compress/gzip.(*Writer).Write
         0     0%   100%  1805.17kB 10.06%  compress/zlib.(*Writer).Write
         0     0%   100%  1805.17kB 10.06%  compress/zlib.(*Writer).writeHeader
         0     0%   100%  2333.34kB 13.00%  image/png.(*Encoder).Encode
         0     0%   100%  2333.34kB 13.00%  image/png.(*encoder).writeIDATs
         0     0%   100%  1805.17kB 10.06%  image/png.(*encoder).writeImage
         0     0%   100%  2333.34kB 13.00%  image/png.Encode
         0     0%   100%  2333.34kB 13.00%  main.imageHandler
...
...
...
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Složitější HTTP server s&nbsp;výpočty probíhajícími v&nbsp;gorutinách</h2>

<p>Nic nám pochopitelně nebrání vytvořit složitější HTTP server, který bude
namísto obrázku s&nbsp;náhodnými barvami pixelů počítat Mandelbrotovu množinu,
a to nám již známým způsobem &ndash; takovým rozdělením výpočtu, že každý
obrazový řádek bude vypočten v&nbsp;samostatné gorutině. Pro jednoduchost je
celý HTTP server implementován jediným souborem:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "image"
        "image/png"
        "net/http"
        _ "net/http/pprof"
)
&nbsp;
func <strong>indexPageHandler</strong>(writer http.ResponseWriter, request *http.Request) {
        writer.Header().Set("Content-Type", "text/html")
        response := `
&lt;body&gt;
    &lt;h1&gt;Enterprise image renderer&lt;/h1&gt;
    &lt;img src="/image" width=256 height=256 /&gt;
&lt;/body&gt;`
        writer.Write([]byte(response))
}
&nbsp;
func <strong>iterCount</strong>(cx float64, cy float64, maxiter uint) uint {
        var zx float64 = 0.0
        var zy float64 = 0.0
        var i uint = 0
        for i &lt; maxiter {
                zx2 := zx * zx
                zy2 := zy * zy
                if zx2+zy2 &gt; 4.0 {
                        break
                }
                zy = 2.0*zx*zy + cy
                zx = zx2 - zy2 + cx
                i++
        }
        return i
}
&nbsp;
func <strong>calcMandelbrot</strong>(width uint, height uint, maxiter uint, palette [][3]byte, image []byte, cy float64, done chan bool) {
        var cx float64 = -2.0
        for x := uint(0); x &lt; width; x++ {
                i := iterCount(cx, cy, maxiter)
                color := palette[i]
                image[3*x] = color[0]
                image[3*x+1] = color[1]
                image[3*x+2] = color[2]
                cx += 3.0 / float64(width)
        }
        done &lt;- true
}
&nbsp;
func <strong>writeImage</strong>(width uint, height uint, pixels []byte) *image.NRGBA {
        img := image.NewNRGBA(image.Rect(0, 0, int(width), int(height)))
        pixel := 0
&nbsp;
        for y := 0; y &lt; int(height); y++ {
                offset := img.PixOffset(0, y)
                for x := uint(0); x &lt; width; x++ {
                        img.Pix[offset] = pixels[pixel]
                        img.Pix[offset+1] = pixels[pixel+1]
                        img.Pix[offset+2] = pixels[pixel+2]
                        img.Pix[offset+3] = 0xff
                        pixel += 3
                        offset += 4
                }
        }
        return img
}
&nbsp;
func <strong>calculateFractal</strong>(width int, height int, maxiter int) []byte {
        done := make(chan bool, height)
&nbsp;
        pixels := make([]byte, width*height*3)
        offset := 0
        delta := width * 3
&nbsp;
        var cy float64 = -1.5
        for y := 0; y &lt; height; y++ {
                go calcMandelbrot(uint(width), uint(height), uint(maxiter), mandmap[:], pixels[offset:offset+delta], cy, done)
                offset += delta
                cy += 3.0 / float64(height)
        }
        for i := 0; i &lt; height; i++ {
                &lt;-done
        }
&nbsp;
        return pixels
}
&nbsp;
func <strong>imageHandler</strong>(w http.ResponseWriter, r *http.Request) {
        const ImageWidth = 256
        const ImageHeight = 256
&nbsp;
        pixels := calculateFractal(ImageWidth, ImageHeight, 255)
        outputimage := writeImage(ImageWidth, ImageHeight, pixels)
        png.Encode(w, outputimage)
}
&nbsp;
func <strong>main</strong>() {
        http.HandleFunc("/", indexPageHandler)
        http.HandleFunc("/image", imageHandler)
        http.ListenAndServe(":8080", nil)
}
&nbsp;
<i>/* taken from Fractint */</i>
&nbsp;
var mandmap = [...][3]byte{
        {255, 255, 255}, {224, 224, 224}, {216, 216, 216}, {208, 208, 208},
        {200, 200, 200}, {192, 192, 192}, {184, 184, 184}, {176, 176, 176},
        {168, 168, 168}, {160, 160, 160}, {152, 152, 152}, {144, 144, 144},
        ...
        ...
        ...
        {240, 240, 140}, {244, 244, 152}, {244, 244, 168}, {244, 244, 180},
        {244, 244, 196}, {248, 248, 208}, {248, 248, 224}, {248, 248, 236},
        {252, 252, 252}, {248, 248, 248}, {240, 240, 240}, {232, 232, 232}}
</pre>

<img src="https://i.iinfo.cz/images/403/go30-5.png" class="image-363617" alt="&#160;" width="491" height="380" />
<p><i>Obrázek 7: Nový HTTP server v&nbsp;akci.</i></p>

<p>Pokud v&nbsp;programu uděláme chybu a gorutiny pro výpočet se nebudou
ukončovat, zjistíme to relativně snadno:</p>

<pre>
$ <strong>curl http://localhost:8080/debug/pprof/goroutine?debug=1</strong>
&nbsp;
goroutine profile: total 133
127 @ 0x42f4ab 0x42f553 0x4069dd 0x4067b5 0x71348e 0x45c8a1
#       0x71348d        main.calcMandelbrot+0x3d        /home/tester/go-root/article_30/t.go:38

2 @ 0x42f4ab 0x42f553 0x4069dd 0x4067b5 0x7135cb 0x45c8a1
#       0x7135ca        main.calcMandelbrot+0x17a       /home/tester/go-root/article_30/t.go:48
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Trasování a balíček <strong>runtime/trace</strong></h2>

<p>Ve druhé části dnešního článku se seznámíme s&nbsp;některými vlastnostmi
<i>traceru</i>, který je, jak již víme, součástí základní sady nástrojů
dodávaných společně s&nbsp;programovacím jazykem Go. Podobně jako
v&nbsp;případě profileru je i tracer možné spouštět společně s&nbsp;testy
(<strong>go test ...</strong>), ve skutečnosti ovšem můžeme trasování zapnout i
explicitně a použít ho v&nbsp;aplikaci spouštěné přímo, tj.&nbsp;bez testů.
Samotný <i>tracer</i> dokáže zaznamenat, a to až (teoreticky)
s&nbsp;nanosekundovou přesností, vznik událostí typu vytvoření gorutiny,
zavolání systémové funkce (<i>syscall</i>), práce správce paměti (<i>garbage
collector</i>), změna velikosti haldy (<i>heapu</i>) atd., tj.&nbsp;informace,
které jsou potenciálně důležité při sledování stavu a zdraví aplikace.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Trasování při spuštění testů</h2>

<p>Vzhledem k&nbsp;tomu, že je tracer možné spustit společně s&nbsp;testy,
použijeme stejný demonstrační příklad, s&nbsp;nímž jsme se seznámili minule.
V&nbsp;tomto příkladu se intenzivně pracuje s&nbsp;řezem (<i>slice</i>)
s&nbsp;využitím funkce <strong>append()</strong>:</p>

<pre>
package <strong>slices2</strong>
&nbsp;
import "fmt"
&nbsp;
func <strong>Slices</strong>() {
        var a [0]int
        s := a[:]
&nbsp;
        for i := 1; i &lt;= 1000000; i++ {
                s = append(s, i)
        }
&nbsp;
        fmt.Printf("Length: %d\n", len(s))
}
</pre>

<p>Přímé spuštění funkce <strong>Slices</strong> zařídí hlavní balíček
s&nbsp;funkcí <strong>main()</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import "slices2/slices2"
&nbsp;
func <strong>main</strong>() {
        slices2.Slices()
}
</pre>

<p>Spuštění stejné funkce, ovšem tentokrát z&nbsp;testů:</p>

<pre>
package <strong>slices</strong>2_test
&nbsp;
import (
        "slices2/slices2"
        "testing"
)
&nbsp;
func <strong>TestSlices</strong>(t *testing.T) {
        slices2.Slices()
}
</pre>

<p>Tracer se nyní spustí společně s&nbsp;testy takto:</p>

<pre>
$ <strong>go test -trace slices2.trace slices_test.go</strong>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Výsledky běhu traceru</h2>

<p>Binární soubor, který je výsledkem běhu traceru, je možné zpracovat několika
různými způsoby. Nejjednodušší je použít nástroj <strong>trace</strong> a
nechat si zobrazit výsledek ve webovém prohlížeči:</p>

<pre>
$ <strong>go tool trace slices2.trace</strong>
</pre>

<p>Po zadání tohoto příkazu se spustí webový server (web je ostatně primárním
GUI nástrojem celého ekosystému postaveného okolo jazyka Go) a
v&nbsp;prohlížeči by se měla otevřít tato stránka:</p>

<img src="https://i.iinfo.cz/images/403/go30-6.png" class="image-363618" alt="&#160;" width="354" height="212" />
<p><i>Obrázek 8: Úvodní stránka s&nbsp;trasovacími informacemi.</i></p>

<p>Z&nbsp;této stránky jsou dostupné i další důležité informace:</p>

<a href="https://www.root.cz/obrazek/363619/"><img src="https://i.iinfo.cz/images/403/go30-7-prev.png" class="image-363619" alt="&#160;" width="370" height="121" /></a>
<p><i>Obrázek 9: Informace o gorutinách.</i></p>

<a href="https://www.root.cz/obrazek/363620/"><img src="https://i.iinfo.cz/images/403/go30-8-prev.png" class="image-363620" alt="&#160;" width="206" height="270" /></a>
<p><i>Obrázek 10: Plánovač.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Jednoduchý demonstrační příklad s&nbsp;přímou podporou trasování</h2>

<p>Tracer lze ovšem spustit i přímo z&nbsp;aplikace. Použijeme přitom podobný
postup, jaký jsme využili minule při tvorbě souborů s&nbsp;metrikami běžící
aplikace: explicitně otevřeme soubor používaný tracerem a zahájíme sledování
aplikace:</p>

<pre>
f, err := os.Create("trace1.trace")
if err != nil {
        log.Fatalf("failed to create trace output file: %v", err)
}
defer func() {
        if err := f.Close(); err != nil {
                log.Fatalf("failed to close trace file: %v", err)
        }
}()
&nbsp;
if err := trace.Start(f); err != nil {
        log.Fatalf("failed to start trace: %v", err)
}
defer trace.Stop()
</pre>

<p>Úplný příklad, který trasovací informace tímto způsobem získává, vypadá
následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "os"
        "runtime/trace"
)
&nbsp;
func <strong>perform_login</strong>() {
        log.Println("login")
}
&nbsp;
func <strong>perform_logout</strong>() {
        log.Println("logout")
}
&nbsp;
func <strong>transaction</strong>(typ string) {
        log.Printf("transaction '%s'\n", typ)
}
&nbsp;
func <strong>main</strong>() {
        f, err := os.Create("trace1.trace")
        if err != nil {
                log.Fatalf("failed to create trace output file: %v", err)
        }
        defer func() {
                if err := f.Close(); err != nil {
                        log.Fatalf("failed to close trace file: %v", err)
                }
        }()
&nbsp;
        if err := trace.Start(f); err != nil {
                log.Fatalf("failed to start trace: %v", err)
        }
        defer trace.Stop()
&nbsp;
        perform_login()
        transaction("A")
        transaction("B")
        perform_logout()
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Kontext (context) a úlohy (task)</h2>

<p>Pro trasování složitějších aplikací se mnohdy setkáme s&nbsp;tím, že se
vytváří takzvané úlohy (<i>task</i>), které nám umožňují část aplikace
(většinou funkčně ucelenou úlohu) explicitně pojmenovat. Tato úloha se objeví
na stránce <strong>User-defined tasks</strong>. Samotné vytvoření úlohy
vyžaduje takzvaný <i>kontext</i>, přičemž výchozí kontext získáme takto:</p>

<pre>
ctx := context.Background()
</pre>

<p>Z&nbsp;kontextu pak již vytvoříme novou úlohu a ihned ji pojmenujeme:</p>

<pre>
ctx, task := trace.NewTask(ctx, "transactionTask")
</pre>

<p>Ukončení úlohy zajistí funkce:</p>

<pre>
task.End()
</pre>

<p>Podívejme se nyní na příklad, v&nbsp;němž se celá logická úloha (přihlášení,
provedení transakcí, odhlášení) skutečně sdružuje do úlohy pojmenované
<strong>transactionTask</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "context"
        "log"
        "os"
        "runtime/trace"
)
&nbsp;
func <strong>perform_login</strong>() {
        log.Println("login")
}
&nbsp;
func <strong>perform_logout</strong>() {
        log.Println("logout")
}
&nbsp;
func <strong>transaction</strong>(typ string) {
        log.Printf("transaction '%s'\n", typ)
}
&nbsp;
func <strong>main</strong>() {
        f, err := os.Create("trace2.trace")
        if err != nil {
                log.Fatalf("failed to create trace output file: %v", err)
        }
        defer func() {
                if err := f.Close(); err != nil {
                        log.Fatalf("failed to close trace file: %v", err)
                }
        }()
&nbsp;
        if err := trace.Start(f); err != nil {
                log.Fatalf("failed to start trace: %v", err)
        }
        defer trace.Stop()
&nbsp;
        ctx := context.Background()
        ctx, task := trace.NewTask(ctx, "transactionTask")
&nbsp;
        perform_login()
        transaction("A")
        transaction("B")
        perform_logout()
&nbsp;
        task.End()
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zobrazení úlohy na stránce s&nbsp;výsledky běhu traceru</h2>

<p>Nově vytvořenou úlohu ihned uvidíme na stránce <strong>User-defined
tasks</strong>:</p>

<a href="https://www.root.cz/obrazek/363621/"><img src="https://i.iinfo.cz/images/403/go30-9-prev.png" class="image-363621" alt="&#160;" width="370" height="122" /></a>
<p><i>Obrázek 11: Uživatelsky definovaná úloha.</i></p>

<p>Samozřejmě jsou k&nbsp;dispozici i podrobnosti:</p>

<a href="https://www.root.cz/obrazek/363622/"><img src="https://i.iinfo.cz/images/403/go30-10-prev.png" class="image-363622" alt="&#160;" width="370" height="103" /></a>
<p><i>Obrázek 12: Podrobnější informace o úloze.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Rozdělení celé úlohy na regiony</h2>

<p>Jednotlivé úlohy je možné rozdělit na menší části, které se jmenují
<i>regiony</i>. I tyto regiony budou viditelné na stránce zobrazující výsledek
sledování provedeného tracerem. Příkladem může být region pro první část úlohy
&ndash; samotné přihlášení:</p>

<pre>
region1 := trace.StartRegion(ctx, "login")
perform_login()
region1.End()
</pre>

<p>Podobným způsobem je možné vytvořit i další regiony, jak je to ostatně
ukázáno v&nbsp;dalším demonstračním příkladu:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "context"
        "log"
        "os"
        "runtime/trace"
)
&nbsp;
func <strong>perform</strong>_login() {
        log.Println("login")
}
&nbsp;
func <strong>perform</strong>_logout() {
        log.Println("logout")
}
&nbsp;
func <strong>transaction</strong>(typ string) {
        log.Printf("transaction '%s'\n", typ)
}
&nbsp;
func <strong>main</strong>() {
        f, err := os.Create("trace3.trace")
        if err != nil {
                log.Fatalf("failed to create trace output file: %v", err)
        }
        defer func() {
                if err := f.Close(); err != nil {
                        log.Fatalf("failed to close trace file: %v", err)
                }
        }()
&nbsp;
        if err := trace.Start(f); err != nil {
                log.Fatalf("failed to start trace: %v", err)
        }
        defer trace.Stop()
&nbsp;
        ctx := context.Background()
        ctx, task := trace.NewTask(ctx, "transactionTask")
&nbsp;
        region1 := trace.StartRegion(ctx, "login")
        perform_login()
        region1.End()
&nbsp;
        region2 := trace.StartRegion(ctx, "transactions")
        transaction("A")
        transaction("B")
        region2.End()
&nbsp;
        region3 := trace.StartRegion(ctx, "logout")
        perform_logout()
        region3.End()
&nbsp;
        task.End()
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Zobrazení regionů na stránce s&nbsp;výsledky běhu traceru</h2>

<p>Na dalším obrázku je patrné, jakým způsobem se na stránce
<strong>User-defined regions</strong> zobrazí všechny tři regiony vytvořené
v&nbsp;úloze <strong>transactionTask</strong>:</p>

<a href="https://www.root.cz/obrazek/363623/"><img src="https://i.iinfo.cz/images/403/go30-11-prev.png" class="image-363623" alt="&#160;" width="370" height="133" /></a>
<p><i>Obrázek 13: Podrobnější informace o regionech. Povšimněte si, že časové
údaje jsou uvedeny v&nbsp;mikrosekundách (i když samotná přesnost měření je
nižší).</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Hierarchie regionů a zápis logovacích zpráv do souboru s&nbsp;trasovacími informacemi</h2>

<p>Nic nám ovšem nebrání, aby byly regiony uspořádány hierarchicky. To nám
umožní ještě lépe sledovat chování aplikace, zejména v&nbsp;případě, že se
jedná o složitější program. Je zde ovšem jeden problém &ndash; pokud budeme
regiony vytvářet ve funkcích, je nutné těmto funkcím předávat i kontext, což je
poměrně nepříjemné (je to velký zásah do aplikace). Navíc je v&nbsp;další
variantě aplikace ukázáno, že do souboru s&nbsp;trasovacími informacemi je
možné zapisovat i logovací informace funkcí <strong>trace.Log()</strong> a
<strong>trace.Logf()</strong> (<i>format</i>):</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "context"
        "log"
        "os"
        "runtime/trace"
)
&nbsp;
func <strong>perform</strong>_login() {
        log.Println("login")
}
&nbsp;
func <strong>perform</strong>_logout() {
        log.Println("logout")
}
&nbsp;
func <strong>transaction</strong>(ctx context.Context, typ string) {
        region := trace.StartRegion(ctx, "transaction")
        trace.Logf(ctx, "transaction", "type %s", typ)
        log.Printf("transaction '%s'\n", typ)
        region.End()
}
&nbsp;
func <strong>main</strong>() {
        f, err := os.Create("trace4.trace")
        if err != nil {
                log.Fatalf("failed to create trace output file: %v", err)
        }
        defer func() {
                if err := f.Close(); err != nil {
                        log.Fatalf("failed to close trace file: %v", err)
                }
        }()
&nbsp;
        if err := trace.Start(f); err != nil {
                log.Fatalf("failed to start trace: %v", err)
        }
        defer trace.Stop()
&nbsp;
        ctx := context.Background()
        ctx, task := trace.NewTask(ctx, "transactionTask")
&nbsp;
        region1 := trace.StartRegion(ctx, "login")
        perform_login()
        region1.End()
&nbsp;
        region2 := trace.StartRegion(ctx, "transactions")
        transaction(ctx, "A")
        transaction(ctx, "B")
        region2.End()
&nbsp;
        region3 := trace.StartRegion(ctx, "logout")
        perform_logout()
        region3.End()
&nbsp;
        task.End()
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Zobrazení regionů a logovacích informací na stránce s&nbsp;výsledky běhu traceru</h2>

<p>Podrobnější informace o regionech se nyní zobrazí i na webové stránce
s&nbsp;výsledky práce traceru. Můžeme se o tom pochopitelně velmi snadno
přesvědčit:</p>

<a href="https://www.root.cz/obrazek/363624/"><img src="https://i.iinfo.cz/images/403/go30-12-prev.png" class="image-363624" alt="&#160;" width="370" height="148" /></a>
<p><i>Obrázek 14: Podrobnější trasovací informace s&nbsp;časy, strávenými
v&nbsp;jednotlivých regionech.</i></p>

<a href="https://www.root.cz/obrazek/363625/"><img src="https://i.iinfo.cz/images/403/go30-13-prev.png" class="image-363625" alt="&#160;" width="370" height="121" /></a>
<p><i>Obrázek 15: Další informace o chování programu v&nbsp;jednotlivých
regionech. Povšimněte si, že do regionu <strong>transaction</strong> aplikace
vstoupila dvakrát, což plně odpovídá zdrojovému kódu:</i></p>

<pre>
region2 := trace.StartRegion(ctx, "transactions")
transaction(ctx, "A")
transaction(ctx, "B")
region2.End()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Úprava projektu pro vykreslení Mandelbrotovy množiny pro přímou podporu trasování</h2>

<p>Podobně jako předchozí jednoduché příklady můžeme upravit i aplikaci pro
vykreslení Mandelbrotovy množiny, s&nbsp;níž jsme se seznámili minule. <a
href="https://github.com/tisnik/go-root/blob/master/article_30/mandelbrot3">V&nbsp;celkově
již třetí variantě</a> pouze explicitně otevřeme soubor s&nbsp;trasovacími
informacemi a povolíme trasování:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "mandelbrot3/renderer"
        "os"
        "runtime/trace"
        "strconv"
)
&nbsp;
func <strong>main</strong>() {
        f, err := os.Create("mandelbrot3.trace")
        if err != nil {
                log.Fatalf("failed to create trace output file: %v", err)
        }
        defer func() {
                if err := f.Close(); err != nil {
                        log.Fatalf("failed to close trace file: %v", err)
                }
        }()
&nbsp;
        if err := trace.Start(f); err != nil {
                log.Fatalf("failed to start trace: %v", err)
        }
        defer trace.Stop()
&nbsp;
        if len(os.Args) &lt; 4 {
                println("usage: ./mandelbrot width height maxiter")
                os.Exit(1)
        }
&nbsp;
        width, err := strconv.Atoi(os.Args[1])
        if err != nil {
                fmt.Printf("Improper width parameter: '%s'\n", os.Args[1])
                os.Exit(1)
        }
&nbsp;
        height, err := strconv.Atoi(os.Args[2])
        if err != nil {
                fmt.Printf("Improper height parameter: '%s'\n", os.Args[2])
                os.Exit(1)
        }
&nbsp;
        maxiter, err := strconv.Atoi(os.Args[3])
        if err != nil {
                fmt.Printf("Improper maxiter parameter: '%s'\n", os.Args[3])
                os.Exit(1)
        }
&nbsp;
        renderer.Start(width, height, maxiter)
}
</pre>

<p><a
href="https://github.com/tisnik/go-root/blob/master/article_30/mandelbrot4">Čtvrtá
varianta</a> je komplikovanější, protože je v&nbsp;ní specifikováno několik
regionů a tudíž se musí do samotného rendereru přenášet i kontext:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "context"
        "fmt"
        "log"
        "mandelbrot4/renderer"
        "os"
        "runtime/trace"
        "strconv"
)
&nbsp;
func <strong>main</strong>() {
        f, err := os.Create("mandelbrot4.trace")
        if err != nil {
                log.Fatalf("failed to create trace output file: %v", err)
        }
        defer func() {
                if err := f.Close(); err != nil {
                        log.Fatalf("failed to close trace file: %v", err)
                }
        }()
&nbsp;
        if err := trace.Start(f); err != nil {
                log.Fatalf("failed to start trace: %v", err)
        }
        defer trace.Stop()
&nbsp;
        if len(os.Args) &lt; 4 {
                println("usage: ./mandelbrot width height maxiter")
                os.Exit(1)
        }
&nbsp;
        width, err := strconv.Atoi(os.Args[1])
        if err != nil {
                fmt.Printf("Improper width parameter: '%s'\n", os.Args[1])
                os.Exit(1)
        }
&nbsp;
        height, err := strconv.Atoi(os.Args[2])
        if err != nil {
                fmt.Printf("Improper height parameter: '%s'\n", os.Args[2])
                os.Exit(1)
        }
&nbsp;
        maxiter, err := strconv.Atoi(os.Args[3])
        if err != nil {
                fmt.Printf("Improper maxiter parameter: '%s'\n", os.Args[3])
                os.Exit(1)
        }
&nbsp;
        ctx := context.Background()
        ctx, task := trace.NewTask(ctx, "renderFractal")
        defer task.End()
        renderer.Start(ctx, width, height, maxiter)
}
</pre>

<pre>
package <strong>renderer</strong>
&nbsp;
import (
        "context"
        "image"
        "image/png"
        "log"
        "os"
        "runtime/trace"
)
&nbsp;
func <strong>writeImage</strong>(width uint, height uint, pixels []byte) {
        img := image.NewNRGBA(image.Rect(0, 0, int(width), int(height)))
        pixel := 0
&nbsp;
        for y := 0; y &lt; int(height); y++ {
                offset := img.PixOffset(0, y)
                for x := uint(0); x &lt; width; x++ {
                        img.Pix[offset] = pixels[pixel]
                        img.Pix[offset+1] = pixels[pixel+1]
                        img.Pix[offset+2] = pixels[pixel+2]
                        img.Pix[offset+3] = 0xff
                        pixel += 3
                        offset += 4
                }
        }
&nbsp;
        outputFile, err := os.Create("mandelbrot.png")
        if err != nil {
                log.Fatal(err)
        }
        defer outputFile.Close()
&nbsp;
        png.Encode(outputFile, img)
}
&nbsp;
func <strong>iterCount</strong>(cx float64, cy float64, maxiter uint) uint {
        var zx float64 = 0.0
        var zy float64 = 0.0
        var i uint = 0
        for i &lt; maxiter {
                zx2 := zx * zx
                zy2 := zy * zy
                if zx2+zy2 &gt; 4.0 {
                        break
                }
                zy = 2.0*zx*zy + cy
                zx = zx2 - zy2 + cx
                i++
        }
        return i
}
&nbsp;
func <strong>calcMandelbrot</strong>(width uint, height uint, maxiter uint, palette [][3]byte, image []byte, cy float64, done chan bool) {
        var cx float64 = -2.0
        for x := uint(0); x &lt; width; x++ {
                i := iterCount(cx, cy, maxiter)
                color := palette[i]
                image[3*x] = color[0]
                image[3*x+1] = color[1]
                image[3*x+2] = color[2]
                cx += 3.0 / float64(width)
        }
        done &lt;- true
}
&nbsp;
func <strong>Start</strong>(ctx context.Context, width int, height int, maxiter int) {
        trace.Logf(ctx, "settings", "width %i", width)
        trace.Logf(ctx, "settings", "height %i", height)
        trace.Logf(ctx, "settings", "maxiter %i", maxiter)
&nbsp;
        done := make(chan bool, height)
&nbsp;
        pixels := make([]byte, width*height*3)
        offset := 0
        delta := width * 3
&nbsp;
        var cy float64 = -1.5
&nbsp;
        region := trace.StartRegion(ctx, "startGoroutines")
        for y := 0; y &lt; height; y++ {
                trace.Logf(ctx, "y (scanline)", "%i", y)
                go calcMandelbrot(uint(width), uint(height), uint(maxiter), mandmap[:], pixels[offset:offset+delta], cy, done)
                offset += delta
                cy += 3.0 / float64(height)
        }
        region.End()
&nbsp;
        region2 := trace.StartRegion(ctx, "waitForGoroutines")
        for i := 0; i &lt; height; i++ {
                &lt;-done
        }
        region2.End()
&nbsp;
        region3 := trace.StartRegion(ctx, "writeImage")
        writeImage(uint(width), uint(height), pixels)
        region3.End()
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Úplné trasovací informace společně s&nbsp;logováním do souboru generovaného tracerem</h2>

<p>A nakonec <a
href="https://github.com/tisnik/go-root/blob/master/article_30/mandelbrot5">v&nbsp;páté
variantě</a> použijeme úplné trasování. V&nbsp;tomto případě jsou
nejzajímavější informace o časech strávených v&nbsp;jednotlivých regionech,
protože máme definován jak region volaný pro každou obrazovou řádku (zde
konkrétně volaný 256&times;), tak i region tvořený funkcí pro získání počtu
iterací pro každý pixel (zde konkrétně volaný 256&times;256=65536&times;):</p>

<a href="https://www.root.cz/obrazek/363626/"><img src="https://i.iinfo.cz/images/403/go30-14-prev.png" class="image-363626" alt="&#160;" width="345" height="270" /></a>
<p><i>Obrázek 16: Povšimněte si, kolikrát je každý region volaný. Můžeme zde
zjistit i čas výpočtu pro každý obrazový řádek či dokonce pro každý pixel
v&nbsp;rastrovém obrázku.</i></p>

<p>Příklad byl upraven následujícím způsobem:</p>

<pre>
package <strong>renderer</strong>
&nbsp;
import (
        "context"
        "image"
        "image/png"
        "log"
        "os"
        "runtime/trace"
)
&nbsp;
func <strong>writeImage</strong>(width uint, height uint, pixels []byte) {
        img := image.NewNRGBA(image.Rect(0, 0, int(width), int(height)))
        pixel := 0
&nbsp;
        for y := 0; y &lt; int(height); y++ {
                offset := img.PixOffset(0, y)
                for x := uint(0); x &lt; width; x++ {
                        img.Pix[offset] = pixels[pixel]
                        img.Pix[offset+1] = pixels[pixel+1]
                        img.Pix[offset+2] = pixels[pixel+2]
                        img.Pix[offset+3] = 0xff
                        pixel += 3
                        offset += 4
                }
        }
&nbsp;
        outputFile, err := os.Create("mandelbrot.png")
        if err != nil {
                log.Fatal(err)
        }
        defer outputFile.Close()
&nbsp;
        png.Encode(outputFile, img)
}
&nbsp;
func <strong>iterCount</strong>(cx float64, cy float64, maxiter uint) uint {
        var zx float64 = 0.0
        var zy float64 = 0.0
        var i uint = 0
        for i &lt; maxiter {
                zx2 := zx * zx
                zy2 := zy * zy
                if zx2+zy2 &gt; 4.0 {
                        break
                }
                zy = 2.0*zx*zy + cy
                zx = zx2 - zy2 + cx
                i++
        }
        return i
}
&nbsp;
func <strong>calcMandelbrot</strong>(ctx context.Context, width uint, height uint, maxiter uint, palette [][3]byte, image []byte, cy float64, done chan bool) {
        var cx float64 = -2.0
        for x := uint(0); x &lt; width; x++ {
                region := trace.StartRegion(ctx, "iterCount")
                i := iterCount(cx, cy, maxiter)
                region.End()
                color := palette[i]
                image[3*x] = color[0]
                image[3*x+1] = color[1]
                image[3*x+2] = color[2]
                cx += 3.0 / float64(width)
        }
        done &lt;- true
}
&nbsp;
func <strong>Start</strong>(ctx context.Context, width int, height int, maxiter int) {
        trace.Logf(ctx, "settings", "width %i", width)
        trace.Logf(ctx, "settings", "height %i", height)
        trace.Logf(ctx, "settings", "maxiter %i", maxiter)
&nbsp;
        done := make(chan bool, height)
&nbsp;
        pixels := make([]byte, width*height*3)
        offset := 0
        delta := width * 3
&nbsp;
        var cy float64 = -1.5
&nbsp;
        region := trace.StartRegion(ctx, "startGoroutines")
        for y := 0; y &lt; height; y++ {
                trace.Logf(ctx, "y (scanline)", "%i", y)
                go calcMandelbrot(ctx, uint(width), uint(height), uint(maxiter), mandmap[:], pixels[offset:offset+delta], cy, done)
                offset += delta
                cy += 3.0 / float64(height)
        }
        region.End()
&nbsp;
        region2 := trace.StartRegion(ctx, "waitForGoroutines")
        for i := 0; i &lt; height; i++ {
                &lt;-done
        }
        region2.End()
&nbsp;
        region3 := trace.StartRegion(ctx, "writeImage")
        writeImage(uint(width), uint(height), pixels)
        region3.End()
}
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně dva megabajty), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Popis projektu</th><th>Cesta</th></tr>
<tr><td>1</td><td>01_image_server.go</td><td>jednoduchý HTTP server generující HTML stránku i rastrový obrázek</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_30/01_image_server.go">https://github.com/tisnik/go-root/blob/master/article_30/01_image_server.go</a></td></tr>
<tr><td>2</td><td>02_image_server_with_pprof.go</td><td>jednoduchý HTTP server, který kromě vlastní služby poskytuje i informace pro profiling</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_30/02_image_server_with_pprof.go">https://github.com/tisnik/go-root/blob/master/article_30/02_image_server_with_pprof.go</a></td></tr>
<tr><td>3</td><td>03_image_server_fractal.go</td><td>HTTP server generující stránku obsahující obrázek s&nbsp;Mandelbrotovou množinou</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_30/03_image_server_fractal.go">https://github.com/tisnik/go-root/blob/master/article_30/03_image_server_fractal.go</a></td></tr>
<tr><td>4</td><td>04_basic_tracing.go</td><td>ukázka základních možností trasování</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_30/04_basic_tracing.go">https://github.com/tisnik/go-root/blob/master/article_30/04_basic_tracing.go</a></td></tr>
<tr><td>5</td><td>05_context.go</td><td>kontext a jeho význam při trasování</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_30/05_context.go">https://github.com/tisnik/go-root/blob/master/article_30/05_context.go</a></td></tr>
<tr><td>6</td><td>06_context_regions.go</td><td>regiony použité pro logické rozdělení runtime aplikace</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_30/06_context_regions.go">https://github.com/tisnik/go-root/blob/master/article_30/06_context_regions.go</a></td></tr>
<tr><td>7</td><td>07_region_hierarchy.go</td><td>hierarchie regionů, vložení zprávy do souboru s&nbsp;trasovacími informacemi atd.</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_30/07_region_hierarchy.go">https://github.com/tisnik/go-root/blob/master/article_30/07_region_hierarchy.go</a></td></tr>
</table>

<p>Dnes jsme si taktéž ukázali několik projektů (s&nbsp;adresářovou strukturou
atd.). Tyto projekty jsou vypsány ve druhé tabulce:</p>

<table>
<tr><th>#</th><th>Projekt</th><th>Popis projektu</th><th>Cesta</th></tr>
<tr><td>1</td><td>mandelbrot3</td><td>základní profilovací informace v&nbsp;nástroji pro vykreslení Mandelbrotovy množiny</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_30/mandelbrot3">https://github.com/tisnik/go-root/blob/master/article_30/mandelbrot3</a></td></tr>
<tr><td>2</td><td>mandelbrot4</td><td>podrobnější profilovací informace v&nbsp;nástroji pro vykreslení Mandelbrotovy množiny</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_30/mandelbrot4">https://github.com/tisnik/go-root/blob/master/article_30/mandelbrot4</a></td></tr>
<tr><td>3</td><td>mandelbrot5</td><td>nejpodrobnější profilovací informace v&nbsp;nástroji pro vykreslení Mandelbrotovy množiny</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_30/mandelbrot5">https://github.com/tisnik/go-root/blob/master/article_30/mandelbrot5</a></td></tr>
<tr><td>4</td><td>slices2</td><td>profilovací informace v&nbsp;aplikaci pro práci s&nbsp;řezy (slices)</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_30/slices2">https://github.com/tisnik/go-root/blob/master/article_30/slices2</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

