<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Knihovny s implementací generických datových typů pro programovací jazyk Go</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Knihovny s implementací generických datových typů pro programovací jazyk Go</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Knihovny s&nbsp;implementací generických datových typů pro programovací jazyk Go</a></p>
<p><a href="#k02">2. Externí knihovna GoDS (Go Data Structures) v&nbsp;původní podobě</a></p>
<p><a href="#k03">3. Ukázka využití původní knihovny GoDS</a></p>
<p><a href="#k04">4. Rozšíření s&nbsp;podporou generických datových typů &ndash; Go18DS</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. Konstrukce seznamů, přidání prvků do seznamů</a></p>
<p><a href="#k07">*** 7. Typově bezpečné kontejnery</a></p>
<p><a href="#k08">*** 8. Vymazání seznamu, test na existenci prvku, přečtení prvku ze seznamu</a></p>
<p><a href="#k09">*** 9. Vymazání prvku či prvků ze seznamu</a></p>
<p><a href="#k10">*** 10. Operace <strong>Swap</strong> a <strong>Sort</strong></a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Knihovny s&nbsp;implementací generických datových typů pro programovací jazyk Go</h2>

<p>Pravděpodobně doposud nejvýznamnější novou vlastností <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">programovacího jazyka
Go</a> je zavedení podpory pro generické datové typy v&nbsp;Go 1.18, což je
vlastnost, kterou jsme se explicitně zabývali v&nbsp;článcích [<a
href="https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-18-genericke-datove-typy/">1</a>],
[<a
href="https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-8-genericke-datove-typy-dokonceni/">2</a>]
a nepřímo též v&nbsp;[<a
href="https://www.root.cz/clanky/genericke-datove-typy-v-jazyce-go/">3</a>].
Právě existence generických datových typů umožnila vznik nových knihoven
popř.&nbsp;úpravu již existujících knihoven, v&nbsp;nichž jsou implementovány
různé datové typy popř.&nbsp;algoritmy pro práci s&nbsp;těmito datovými typy.
Právě díky generickým datovým typům je možné obejít poněkud nešikovnou
manipulaci s&nbsp;prázdnými rozhraními (<strong>interface{}</strong>), což je
sice užitečný koncept, který ovšem zcela obchází striktní typový systém jazyka
Go a nutí programátory k&nbsp;tomu, že aby datovými typy zabývali nikoli
v&nbsp;čase překladu (<i>compile time</i>), ale až v&nbsp;čase běhu (<i>runtime
time</i>).</p>

<p>Jedná se například o následující knihovny:</p>

<ol>

<li>Genfuncs<br />
<a href="https://github.com/nwillc/genfuncs">https://github.com/nwillc/genfuncs</a>
</li>

<li>Go18DS<br />
<a href="https://github.com/daichi-m/go18ds">https://github.com/daichi-m/go18ds</a>
</li>

<li>TreeMap v2<br />
<a href="https://github.com/igrmk/treemap">https://github.com/igrmk/treemap</a>
</li>

<li>Fp-go<br />
<a href="https://github.com/repeale/fp-go">https://github.com/repeale/fp-go</a>
</li>

</ol>

<p>V&nbsp;dnešním článku i v&nbsp;navazujících článcích si jednotlivé výše
zmíněné knihovny postupně popíšeme.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Externí knihovna GoDS (Go Data Structures) v&nbsp;původní podobě</h2>

<p>Kontejnery (kolekce) nabízené samotným jazykem Go popř.&nbsp;jeho standardní
knihovnou nám v&nbsp;praxi většinou nebudou postačovat, takže bude nutné
sáhnout po externí knihovně. Těch existuje větší množství, ovšem pravděpodobně
nejúplnější sadu kontejnerů nalezneme v&nbsp;knihovně pojmenované <i>GoDS</i>
neboli plným jménem <i>Go Data Structures</i>. Tato knihovna vznikla
v&nbsp;době, kdy jazyk Go nepodporoval generické datové typy, s&nbsp;čímž
souvisí i určité problémy s&nbsp;jejím používáním.</p>

<p>Tato knihovna, jenž je dostupná na adrese <a
href="https://github.com/emirpasic/gods">https://github.com/emirpasic/gods</a>,
přidává do programovacího jazyka Go implementaci mnoha užitečných datových
struktur &ndash; většinou <i>kontejnerů</i>. Jedná se tedy o takové struktury,
jejichž úkolem je uchovat prvky určitých typů a dostupných pod určitým klíčem
(celočíselným či obecným):</p>

<table>
<tr><th>Kontejner</th><th>Překlad</th></tr>
<tr><td>List</td><td>seznam</td></tr>
<tr><td>Set</td><td>množina</td></tr>
<tr><td>Stack</td><td>zásobník</td></tr>
<tr><td>Queue</td><td>fronta</td></tr>
<tr><td>Tree</td><td>strom</td></tr>
<tr><td>Map</td><td>mapa</td></tr>
</table>

<p>Ovšem vzhledem k&nbsp;tomu, že neexistuje taková implementace těchto
datových struktur v&nbsp;podobě, v&nbsp;níž by všechny algoritmy byly
realizovány s&nbsp;optimální složitostí, je každá výše zmíněná datová struktura
realizována (implementována) hned několikrát, přičemž u každé implementace jsou
některé operace optimální a jiné nikoli. Liší se i paměťová náročnost:</p>

<table>
<tr><th>Rozhraní</th><th>Implementace</th></tr>
<tr><td>List</td><td>ArrayList SinglyLinkedList DoublyLinkedList</td></tr>
<tr><td>Set</td><td>HashSet TreeSet LinkedHashSet</td></tr>
<tr><td>Stack</td><td>LinkedListStack ArrayStack</td></tr>
<tr><td>Queue</td><td>LinkedListQueue ArrayQueue CircularBuffer PriorityQueue</td></tr>
<tr><td>Tree</td><td>RedBlackTree AVLTree BTree BinaryHeap</td></tr>
<tr><td>Map</td><td>HashMap TreeMap LinkedHashMap HashBidiMap TreeBidiMap</td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. Ukázka využití původní knihovny GoDS</h2>

<p>Podívejme se nyní na způsob využití původní knihovny GoDS. Konkrétně se
jedná o implementaci jednoduché RPN (<i>Reverse Polish Notation</i>)
kalkulačky. Pro realizaci zásobníku je přitom využit kontejner nazvaný
<strong>arraystack</strong>, což je implementace zásobníku realizovaná nad
polem (které se v&nbsp;případě potřeby realokuje, což ovšem při použití
v&nbsp;jednoduché kalkulačce v&nbsp;naprosté většině případů nebude nutné).
Povšimněte si triku u příkazu <strong>import</strong>, v&nbsp;níž se na
<strong>arraystack</strong> budeme odkazovat přes obecnější alias
<strong>stack</strong>:</p>

<pre>
package main
&nbsp;
import (
        "fmt"
        stack "github.com/emirpasic/gods/stacks/arraystack"
        "strconv"
        "strings"
)
&nbsp;
func <strong>printStack</strong>(s *stack.Stack) {
        it := s.Iterator()
        for it.Next() {
                value := it.Value()
                fmt.Printf("%3d ", value)
        }
        println()
}
&nbsp;
func <strong>main</strong>() {
        expression := "1 2 + 2 3 * 8 + *"
        terms := strings.Split(expression, " ")
        stack := stack.New()
&nbsp;
        for _, term := range terms {
                switch term {
                case "+":
                        operand1, _ := stack.Pop()
                        operand2, _ := stack.Pop()
                        stack.Push(operand1.(int) + operand2.(int))
                        print("+ :\t")
                        printStack(stack)
                case "-":
                        operand1, _ := stack.Pop()
                        operand2, _ := stack.Pop()
                        stack.Push(operand2.(int) - operand1.(int))
                        print("- :\t")
                        printStack(stack)
                case "*":
                        operand1, _ := stack.Pop()
                        operand2, _ := stack.Pop()
                        stack.Push(operand1.(int) * operand2.(int))
                        print("* :\t")
                        printStack(stack)
                case "/":
                        operand1, _ := stack.Pop()
                        operand2, _ := stack.Pop()
                        stack.Push(operand2.(int) / operand1.(int))
                        print("/ :\t")
                        printStack(stack)
                default:
                        number, err := strconv.Atoi(term)
                        if err == nil {
                                stack.Push(number)
                        }
                        fmt.Printf("%-2d:\t", number)
                        printStack(stack)
                }
        }
        print("Result: ")
        printStack(stack)
}
</pre>

<p>Při spuštění tohoto příkladu se bude postupně vypisovat obsah zásobníku
operandů:</p>

<pre>
1 :       1 
2 :       2   1 
+ :       3 
2 :       2   3 
3 :       3   2   3 
* :       6   3 
8 :       8   6   3 
+ :      14   3 
* :      42 
Result:  42 
</pre>

<p>Program je sice relativně dobře čitelný, ovšem nepříjemný je zejména fakt,
že je nutné explicitně kontrolovat typy prvků vyzvedávaných ze zásobníku
operací <strong>Pop</strong> resp.&nbsp;<strong>Peek</strong>. Původní knihovna
GoDS totiž nepodporuje generické datové typy a proto jsou všechny prvky typu
&bdquo;prázdné rozhraní&ldquo; neboli <strong>interface{}</strong>:</p>

<p>Rozhraní pro všechny implementace seznamů:</p>

<pre>
type <strong>List</strong> interface {
        Get(index int) (interface{}, bool)
        Remove(index int)
        Add(values ...interface{})
        Contains(values ...interface{}) bool
        Sort(comparator utils.Comparator)
        Swap(index1, index2 int)
        Insert(index int, values ...interface{})
        Set(index int, value interface{})
&nbsp;
        containers.Container
        Empty() bool
        Size() int
        Clear()
        Values() []interface{}
        String() string
}
</pre>

<p>Rozhraní pro všechny implementace množin:</p>

<pre>
type <strong>Set</strong> interface {
        Add(elements ...interface{})
        Remove(elements ...interface{})
        Contains(elements ...interface{}) bool
        Intersection(another *Set) *Set
        Union(another *Set) *Set
        Difference(another *Set) *Set
&nbsp;
        containers.Container
        Empty() bool
        Size() int
        Clear()
        Values() []interface{}
        String() string
}
</pre>

<p>Rozhraní pro obě implementace zásobníků:</p>

<pre>
type <strong>Stack</strong> interface {
        Push(value interface{})
        Pop() (value interface{}, ok bool)
        Peek() (value interface{}, ok bool)
&nbsp;
        containers.Container
        Empty() bool
        Size() int
        Clear()
        Values() []interface{}
        String() string
        containers.Container
}
</pre>

<p>Rozhraní pro všechny implementace map:</p>

<pre>
type <strong>Map</strong> interface {
        Put(key interface{}, value interface{})
        Get(key interface{}) (value interface{}, found bool)
        Remove(key interface{})
        Keys() []interface{}
&nbsp;
        containers.Container
        Empty() bool
        Size() int
        Clear()
        Values() []interface{}
        String() string
        containers.Container
}
</pre>

<p>Rozhraní pro všechny implementace stromů:</p>

<pre>
type <strong>Tree</strong> interface {
        containers.Container
        Empty() bool
        Size() int
        Clear()
        Values() []interface{}
        String() string
        containers.Container
}
</pre>

<p>Rozhraní pro všechny implementace front:</p>

<pre>
type <strong>Queue</strong> interface {
        Enqueue(value interface{})
        Dequeue() (value interface{}, ok bool)
        Peek() (value interface{}, ok bool)
&nbsp;
        containers.Container
        Empty() bool
        Size() int
        Clear()
        Values() []interface{}
        String() string
        containers.Container
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Rozšíření s&nbsp;podporou generických datových typů &ndash; Go18DS</h2>

<p>Na základě výše zmíněné knihovny <i>GoDS</i> byla vytvořena knihovna nazvaná
<i>Go18DS</i>, tedy &bdquo;generické datové struktury pro Go 1.18 a
novější&ldquo;. Pro její instalaci postačuje vytvoření souboru
<strong>go.mod</strong> a přidání jednoho řádku do tohoto souboru:</p>

<pre>
module x
&nbsp;
go 1.18
&nbsp;
require github.com/daichi-m/go18ds v1.12.1 // indirect
</pre>

<p>V&nbsp;souboru <strong>go.sum</strong> se po překladu vytvoří tyto informace
o závislostech:</p>

<pre>
github.com/daichi-m/go18ds v1.12.1 h1:Pjc3IApmN4qtDiovGP9MvMpIzgZle3SHUcNaA5j46bg=
github.com/daichi-m/go18ds v1.12.1/go.mod h1:wc2dURUr8aMxxC4Mn5ObJGVM7uIKU8JagY4nhtonXq8=
</pre>

<p>A poté se nainstalují následující balíčky (tedy z&nbsp;pohledu programátorů
jmenné prostory):</p>

<pre>
github.com/daichi-m/go18ds/containers
github.com/daichi-m/go18ds/examples/arraylist
github.com/daichi-m/go18ds/examples/arraystack
github.com/daichi-m/go18ds/examples/avltree
github.com/daichi-m/go18ds/examples/binaryheap
github.com/daichi-m/go18ds/examples/btree
github.com/daichi-m/go18ds/examples/customcomparator
github.com/daichi-m/go18ds/examples/doublylinkedlist
github.com/daichi-m/go18ds/examples/enumerablewithindex
github.com/daichi-m/go18ds/examples/enumerablewithkey
github.com/daichi-m/go18ds/examples/godsort
github.com/daichi-m/go18ds/examples/hashbidimap
github.com/daichi-m/go18ds/examples/hashmap
github.com/daichi-m/go18ds/examples/hashset
github.com/daichi-m/go18ds/examples/iteratorwithindex
github.com/daichi-m/go18ds/examples/iteratorwithkey
github.com/daichi-m/go18ds/examples/linkedhashmap
github.com/daichi-m/go18ds/examples/linkedhashset
github.com/daichi-m/go18ds/examples/linkedliststack
github.com/daichi-m/go18ds/examples/redblacktree
github.com/daichi-m/go18ds/examples/redblacktreeextended
github.com/daichi-m/go18ds/examples/serialization
github.com/daichi-m/go18ds/examples/singlylinkedlist
github.com/daichi-m/go18ds/examples/treebidimap
github.com/daichi-m/go18ds/examples/treemap
github.com/daichi-m/go18ds/examples/treeset
github.com/daichi-m/go18ds/lists
github.com/daichi-m/go18ds/lists/arraylist
github.com/daichi-m/go18ds/lists/doublylinkedlist
github.com/daichi-m/go18ds/lists/singlylinkedlist
github.com/daichi-m/go18ds/maps
github.com/daichi-m/go18ds/maps/hashbidimap
github.com/daichi-m/go18ds/maps/hashmap
github.com/daichi-m/go18ds/maps/linkedhashmap
github.com/daichi-m/go18ds/maps/treebidimap
github.com/daichi-m/go18ds/maps/treemap
github.com/daichi-m/go18ds/sets
github.com/daichi-m/go18ds/sets/hashset
github.com/daichi-m/go18ds/sets/linkedhashset
github.com/daichi-m/go18ds/sets/treeset
github.com/daichi-m/go18ds/stacks
github.com/daichi-m/go18ds/stacks/arraystack
github.com/daichi-m/go18ds/stacks/linkedliststack
github.com/daichi-m/go18ds/trees
github.com/daichi-m/go18ds/trees/avltree
github.com/daichi-m/go18ds/trees/binaryheap
github.com/daichi-m/go18ds/trees/btree
github.com/daichi-m/go18ds/trees/redblacktree
github.com/daichi-m/go18ds/utils
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
type <strong>Container[T any]</strong> interface {
    Empty() bool
    Size() int
    Clear()
    Values() []T
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Datová struktura <strong>arraylist</strong>, jednosměrně a obousměrně vázané seznamy</h2>

<p>Seznamy popsané rozhraním nazvaným <strong>List</strong> existují
v&nbsp;knihovně Go18DS ve třech implementacích:</p>

<ol>
<li><strong>ArrayList</strong>: seznam postavený nad polem, které se může realokovat</li>
<li><strong>SinglyLinkedList</strong>: lineárně jednosměrně vázaný seznam</li>
<li><strong>DoublyLinkedList</strong>: obousměrně vázaný seznam</li>
</ol>

<p>U všech seznamů máme k&nbsp;dispozici iterátor
(<strong>List.Iterator</strong>), který se používá takto:</p>

<pre>
iterator := list.Iterator()
for iterator.Next() {
        index, value := iterator.Index(), iterator.Value()
        fmt.Printf("item #%d == %s\n", index, value)
}
</pre>

<p><div class="rs-tip-major">Poznámka: samozřejmě pokud nepotřebujeme znát
index (pořadí) prvku, můžeme vynechat volání
<strong>iterator.Index()</strong>.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Konstrukce seznamů, přidání prvků do seznamů</h2>

<pre>
package main

import (
        "fmt"

        "github.com/daichi-m/go18ds/lists/arraylist"
)

func main() {
        l := arraylist.New[string]("a", "b", "c")
        fmt.Println(l)
}
</pre>

<pre>
package main

import (
        "fmt"

        "github.com/daichi-m/go18ds/lists/arraylist"
)

func main() {
        l := arraylist.New[string]("a", "b", "c")
        fmt.Println(l)

        l.Add("a")
        fmt.Println(l)

        l.Add("b", "c")
        fmt.Println(l)
}
</pre>


<p><a name="k07"></a></p>
<h2 id="k07">7. Typově bezpečné kontejnery</h2>

<pre>
package main

import (
        "fmt"

        "github.com/daichi-m/go18ds/lists/arraylist"
)

func main() {
        l := arraylist.New[string](1, 2, 3)
        fmt.Println(l)
}
</pre>


<pre>
package main

import (
        "fmt"

        "github.com/daichi-m/go18ds/lists/arraylist"
)

func main() {
        l := arraylist.New[string]("a", "b", "c")
        fmt.Println(l)

        l.Add(1)
        fmt.Println(l)

        l.Add(2, 3)
        fmt.Println(l)
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vymazání seznamu, test na existenci prvku, přečtení prvku ze seznamu</h2>

<pre>
package main

import (
        "fmt"

        "github.com/daichi-m/go18ds/lists/arraylist"
)

func main() {
        l := arraylist.New[string]()
        fmt.Println(l)

        l.Add("a")
        fmt.Println(l)

        l.Add("b", "c")
        fmt.Println(l)

        l.Clear()
        fmt.Println(l)
}
</pre>

<pre>
package main

import (
        "fmt"

        "github.com/daichi-m/go18ds/lists/arraylist"
)

func testContains(l *arraylist.List[string]) {
        fmt.Println("List:", l)
        for _, c := range []string{"a", "b", "c", "x"} {
                fmt.Printf("Contains '%s': %t\n", c, l.Contains(c))
        }
        fmt.Println()
}

func main() {
        l := arraylist.New[string]()
        testContains(l)

        l.Add("a")
        testContains(l)

        l.Add("b", "c")
        testContains(l)

        l.Clear()
        testContains(l)
}
</pre>

<pre>
package main

import (
        "fmt"

        "github.com/daichi-m/go18ds/lists/arraylist"
)

func testGet(l *arraylist.List[string]) {
        fmt.Println("List:", l)

        for i := -1; i < l.Size()+1; i++ {
                value, found := l.Get(i)
                if found {
                        fmt.Printf("Item %d = '%s'\n", i, value)
                } else {
                        fmt.Printf("Item %d not found\n", i)
                }
        }
        fmt.Println()
}

func main() {
        l := arraylist.New[string]()
        testGet(l)

        l.Add("a")
        testGet(l)

        l.Add("b", "c")
        testGet(l)

        l.Clear()
        testGet(l)
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vymazání prvku či prvků ze seznamu</h2>

<pre>
package main

import (
        "fmt"

        "github.com/daichi-m/go18ds/lists/arraylist"
)

func main() {
        l := arraylist.New[string]()
        fmt.Println(l)

        l.Add("a")
        fmt.Println(l)

        l.Add("b", "c")
        fmt.Println(l)

        for i := 0; i < 5; i++ {
                l.Remove(0)
                fmt.Println(l)
        }
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Operace <strong>Swap</strong> a <strong>Sort</strong></h2>

<pre>
package main

import (
        "fmt"

        "github.com/daichi-m/go18ds/lists/arraylist"
)

func main() {
        l := arraylist.New[string]("foo", "bar", "baz")
        fmt.Println(l)
        fmt.Println()

        l.Swap(0, 1)
        fmt.Println(l)
        fmt.Println()

        l.Swap(1, 2)
        fmt.Println(l)
        fmt.Println()

        l.Swap(2, 3)
        fmt.Println(l)
        fmt.Println()
}
</pre>

<pre>
package main

import (
        "fmt"

        "github.com/daichi-m/go18ds/lists/arraylist"
        "github.com/daichi-m/go18ds/utils"
)

func main() {
        l := arraylist.New[string]("zoo", "aleph", "foo", "bar", "baz")
        fmt.Println(l)
        fmt.Println()

        l.Sort(utils.StringComparator)
        fmt.Println(l)
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Jednosměrně a obousměrně vázané seznamy, iterátor nad seznamy</h2>

<pre>
</pre>

<pre>
</pre>

<pre>
package main

import (
        "fmt"

        "github.com/daichi-m/go18ds/lists/singlylinkedlist"
)

func main() {
        l := singlylinkedlist.New[string]("zoo", "aleph", "foo", "bar", "baz")

        it := l.Iterator()
        for it.Next() {
                value := it.Value()
                fmt.Printf("%3s \t %T\n", value, value)
        }

}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zásobník</h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. Základní operace nad zásobníky</h2>

<pre>
package main

import (
        "fmt"

        "github.com/daichi-m/go18ds/stacks/arraystack"
)

func main() {
        stack := arraystack.New[string]()
        fmt.Println(stack)

        stack.Push("foo")
        fmt.Println(stack)

        stack.Push("bar")
        fmt.Println(stack)

        stack.Push("baz")
        fmt.Println(stack)
}
</pre>

<pre>
package main

import (
        "fmt"

        "github.com/daichi-m/go18ds/stacks/arraystack"
)

func main() {
        stack := arraystack.New[string]()
        stack.Push("foo")
        stack.Push("bar")
        stack.Push("baz")

        for {
                value, exists := stack.Pop()
                if exists {
                        fmt.Println(value)
                } else {
                        break
                }
        }
}
</pre>

<pre>
package main

import (
        "fmt"

        "github.com/daichi-m/go18ds/stacks/arraystack"
)

func main() {
        stack := arraystack.New[string]()
        stack.Push("foo")
        stack.Push("bar")
        stack.Push("baz")

        for i := 0; i < 10; i++ {
                value, exists := stack.Peek()
                fmt.Println(i, value, exists)
                stack.Pop()
        }
}
</pre>

<pre>
package main

import (
        "fmt"

        "github.com/daichi-m/go18ds/stacks/arraystack"
)

func main() {
        stack := arraystack.New[string]()
        stack.Push("foo")
        stack.Push("bar")
        stack.Push("baz")

        for {
                value, exists := stack.Pop()
                if exists {
                        fmt.Println(value, stack.Size(), stack.Empty())
                } else {
                        break
                }
        }
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly
uloženy do nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý,
dnes má přibližně stovku kilobajtů), můžete namísto toho použít odkazy
na jednotlivé demonstrační příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>arraylist01.go       </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/arraylist01.go">https://github.com/tisnik/go-root/blob/master/article_92/arraylist01.go</a></td></tr>
<tr><td> 2</td><td>arraylist02.go       </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/arraylist02.go">https://github.com/tisnik/go-root/blob/master/article_92/arraylist02.go</a></td></tr>
<tr><td> 3</td><td>arraylist03.go       </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/arraylist03.go">https://github.com/tisnik/go-root/blob/master/article_92/arraylist03.go</a></td></tr>
<tr><td> 4</td><td>arraylist04.go       </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/arraylist04.go">https://github.com/tisnik/go-root/blob/master/article_92/arraylist04.go</a></td></tr>
<tr><td> 5</td><td>arraylist05.go       </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/arraylist05.go">https://github.com/tisnik/go-root/blob/master/article_92/arraylist05.go</a></td></tr>
<tr><td> 6</td><td>arraylist06.go       </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/arraylist06.go">https://github.com/tisnik/go-root/blob/master/article_92/arraylist06.go</a></td></tr>
<tr><td> 7</td><td>arraylist07.go       </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/arraylist07.go">https://github.com/tisnik/go-root/blob/master/article_92/arraylist07.go</a></td></tr>
<tr><td> 8</td><td>arraylist08.go       </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/arraylist08.go">https://github.com/tisnik/go-root/blob/master/article_92/arraylist08.go</a></td></tr>
<tr><td> 9</td><td>arraylist09.go       </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/arraylist09.go">https://github.com/tisnik/go-root/blob/master/article_92/arraylist09.go</a></td></tr>
<tr><td>10</td><td>arraylist10.go       </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/arraylist10.go">https://github.com/tisnik/go-root/blob/master/article_92/arraylist10.go</a></td></tr>
<tr><td>11</td><td>arraylist11.go       </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/arraylist11.go">https://github.com/tisnik/go-root/blob/master/article_92/arraylist11.go</a></td></tr>
<tr><td>12</td><td>singlylinkedlist01.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist01.go">https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist01.go</a></td></tr>
<tr><td>13</td><td>singlylinkedlist02.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist02.go">https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist02.go</a></td></tr>
<tr><td>14</td><td>singlylinkedlist03.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist03.go">https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist03.go</a></td></tr>
<tr><td>15</td><td>singlylinkedlist04.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist04.go">https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist04.go</a></td></tr>
<tr><td>16</td><td>singlylinkedlist05.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist05.go">https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist05.go</a></td></tr>
<tr><td>17</td><td>singlylinkedlist06.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist06.go">https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist06.go</a></td></tr>
<tr><td>18</td><td>singlylinkedlist07.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist07.go">https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist07.go</a></td></tr>
<tr><td>19</td><td>singlylinkedlist08.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist08.go">https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist08.go</a></td></tr>
<tr><td>20</td><td>singlylinkedlist09.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist09.go">https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist09.go</a></td></tr>
<tr><td>21</td><td>singlylinkedlist10.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist10.go">https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist10.go</a></td></tr>
<tr><td>22</td><td>singlylinkedlist11.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist11.go">https://github.com/tisnik/go-root/blob/master/article_92/singlylinkedlist11.go</a></td></tr>
<tr><td>23</td><td>doublylinkedlist01.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist01.go">https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist01.go</a></td></tr>
<tr><td>24</td><td>doublylinkedlist02.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist02.go">https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist02.go</a></td></tr>
<tr><td>25</td><td>doublylinkedlist03.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist03.go">https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist03.go</a></td></tr>
<tr><td>26</td><td>doublylinkedlist04.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist04.go">https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist04.go</a></td></tr>
<tr><td>27</td><td>doublylinkedlist05.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist05.go">https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist05.go</a></td></tr>
<tr><td>28</td><td>doublylinkedlist06.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist06.go">https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist06.go</a></td></tr>
<tr><td>29</td><td>doublylinkedlist07.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist07.go">https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist07.go</a></td></tr>
<tr><td>30</td><td>doublylinkedlist08.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist08.go">https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist08.go</a></td></tr>
<tr><td>31</td><td>doublylinkedlist09.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist09.go">https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist09.go</a></td></tr>
<tr><td>32</td><td>doublylinkedlist10.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist10.go">https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist10.go</a></td></tr>
<tr><td>33</td><td>doublylinkedlist11.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist11.go">https://github.com/tisnik/go-root/blob/master/article_92/doublylinkedlist11.go</a></td></tr>
<tr><td>34</td><td>arraystack01.go      </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/arraystack01.go">https://github.com/tisnik/go-root/blob/master/article_92/arraystack01.go</a></td></tr>
<tr><td>35</td><td>arraystack02.go      </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/arraystack02.go">https://github.com/tisnik/go-root/blob/master/article_92/arraystack02.go</a></td></tr>
<tr><td>36</td><td>arraystack03.go      </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/arraystack03.go">https://github.com/tisnik/go-root/blob/master/article_92/arraystack03.go</a></td></tr>
<tr><td>37</td><td>arraystack04.go      </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/arraystack04.go">https://github.com/tisnik/go-root/blob/master/article_92/arraystack04.go</a></td></tr>
<tr><td>38</td><td>linkedliststack01.go </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/linkedliststack01.go">https://github.com/tisnik/go-root/blob/master/article_92/linkedliststack01.go</a></td></tr>
<tr><td>39</td><td>linkedliststack02.go </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/linkedliststack02.go">https://github.com/tisnik/go-root/blob/master/article_92/linkedliststack02.go</a></td></tr>
<tr><td>40</td><td>linkedliststack03.go </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/linkedliststack03.go">https://github.com/tisnik/go-root/blob/master/article_92/linkedliststack03.go</a></td></tr>
<tr><td>41</td><td>linkedliststack04.go </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/linkedliststack04.go">https://github.com/tisnik/go-root/blob/master/article_92/linkedliststack04.go</a></td></tr>
<tr><td>42</td><td>stack_rpn.go         </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/stack_rpn.go">https://github.com/tisnik/go-root/blob/master/article_92/stack_rpn.go</a></td></tr>
<tr><td>43</td><td>stack_rpn_B.go       </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/stack_rpn_B.go">https://github.com/tisnik/go-root/blob/master/article_92/stack_rpn_B.go</a></td></tr>
<tr><td>44</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_92/">https://github.com/tisnik/go-root/blob/master/article_92/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Genfuncs &ndash; implements various functions utilizing Go's Generics to help avoid writing boilerplate code<br />
<a href="https://github.com/nwillc/genfuncs">https://github.com/nwillc/genfuncs</a>
</li>

<li>Go18DS (Go 1.18+ Data Structures)<br />
<a href="https://github.com/daichi-m/go18ds">https://github.com/daichi-m/go18ds</a>
</li>

<li>TreeMap v2<br />
<a href="https://github.com/igrmk/treemap">https://github.com/igrmk/treemap</a>
</li>

<li>Fp-go is a collection of Functional Programming helpers powered by Golang 1.18+ generics<br />
<a href="https://github.com/repeale/fp-go">https://github.com/repeale/fp-go</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://go.dev/ref/spec">https://go.dev/ref/spec</a>
</li>

<li>Generics in Go<br />
<a href="https://bitfieldconsulting.com/golang/generics">https://bitfieldconsulting.com/golang/generics</a>
</li>

<li>Tutorial: Getting started with generics<br />
<a href="https://go.dev/doc/tutorial/generics">https://go.dev/doc/tutorial/generics</a>
</li>

<li>Type parameters in Go<br />
<a href="https://bitfieldconsulting.com/golang/type-parameters">https://bitfieldconsulting.com/golang/type-parameters</a>
</li>

<li>Go Data Structures: Binary Search Tree<br />
<a href="https://flaviocopes.com/golang-data-structure-binary-search-tree/">https://flaviocopes.com/golang-data-structure-binary-search-tree/</a>
</li>

<li>Gobs of data<br />
<a href="https://blog.golang.org/gobs-of-data">https://blog.golang.org/gobs-of-data</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Go 1.18 Release Notes<br />
<a href="https://golang.org/doc/go1.18">https://golang.org/doc/go1.18</a>
</li>

<li>Go 1.17 Release Notes<br />
<a href="https://golang.org/doc/go1.17">https://golang.org/doc/go1.17</a>
</li>

<li>Go 1.16 Release Notes<br />
<a href="https://golang.org/doc/go1.16">https://golang.org/doc/go1.16</a>
</li>

<li>Go 1.15 Release Notes<br />
<a href="https://golang.org/doc/go1.15">https://golang.org/doc/go1.15</a>
</li>

<li>Go 1.14 Release Notes<br />
<a href="https://golang.org/doc/go1.14">https://golang.org/doc/go1.14</a>
</li>

<li>Go 1.13 Release Notes<br />
<a href="https://golang.org/doc/go1.13">https://golang.org/doc/go1.13</a>
</li>

<li>Go 1.12 Release Notes<br />
<a href="https://golang.org/doc/go1.12">https://golang.org/doc/go1.12</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>A Proposal for Adding Generics to Go<br />
<a href="https://go.dev/blog/generics-proposal">https://go.dev/blog/generics-proposal</a>
</li>

<li>Proposal: Go should have generics<br />
<a href="https://github.com/golang/proposal/blob/master/design/15292-generics.md">https://github.com/golang/proposal/blob/master/design/15292-generics.md</a>
</li>

<li>Know Go: Generics (Kniha)<br />
<a href="https://bitfieldconsulting.com/books/generics">https://bitfieldconsulting.com/books/generics</a>
</li>

<li>Go 1.18 Generics based slice package<br />
<a href="https://golangexample.com/go-1-18-generics-based-slice-package/">https://golangexample.com/go-1-18-generics-based-slice-package/</a>
</li>

<li>The missing slice package<br />
<a href="https://github.com/ssoroka/slice">https://github.com/ssoroka/slice</a>
</li>

<li>Dlouho očekávaná novinka v Go 1.18 – generické datové typy<br />
<a href="https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-18-genericke-datove-typy/">https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-18-genericke-datove-typy/</a>
</li>

<li>Dlouho očekávaná novinka v Go 1.18 – generické datové typy (dokončení)<br />
<a href="https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-8-genericke-datove-typy-dokonceni/">https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-8-genericke-datove-typy-dokonceni/</a>
</li>

<li>Generické datové typy v jazyce Go?<br />
<a href="https://www.root.cz/clanky/genericke-datove-typy-v-jazyce-go/">https://www.root.cz/clanky/genericke-datove-typy-v-jazyce-go/</a>
</li>

<li>GoDS (Go Data Structures)<br />
<a href="https://github.com/emirpasic/gods">https://github.com/emirpasic/gods</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

