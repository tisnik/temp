<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Odkazy na relevantní články na Rootu</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p>S&nbsp;užitečným, populárním a dnes velmi často nasazovaným nástrojem <i>Apache Kafka</i> jsme se již na stránkách Rootu několikrát setkali, a to například v&nbsp;článcích <a href="https://www.root.cz/clanky/pouziti-nastroje-apache-kafka-v-aplikacich-zalozenych-na-mikrosluzbach/">Použití nástroje Apache Kafka v aplikacích založených na mikroslužbách </a>, <a href="https://www.root.cz/clanky/apache-kafka-distribuovana-streamovaci-platforma/">Apache Kafka: distribuovaná streamovací platforma</a> a taktéž v&nbsp;trojici článků <a href="https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw/">Pokročilý streaming založený na Apache Kafce, jazyku Clojure a knihovně Jackdaw</a>, <a href="https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw-2-cast/">Pokročilý streaming založený na Apache Kafce, jazyku Clojure a knihovně Jackdaw (2. část)</a> a <a href="https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-projektu-apache-kafka-jazyku-clojure-a-knihovne-jackdaw-streamy-a-kolony/">Pokročilý streaming založený na projektu Apache Kafka, jazyku Clojure a knihovně Jackdaw (streamy a kolony)</a>. Pro tuto asi nejznámější <i>streamovací platformu</i> existují knihovny realizující rozhraní pro různé programovací jazyky a jejich ekosystémy. Tato rozhraní jsou vypsána v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Jazyk/platforma</th></tr>
<tr><td> 1</td><td><a href="https://github.com/edenhill/librdkafka">C/C++</a></td></tr>
<tr><td> 2</td><td><a href="https://github.com/confluentinc/confluent-kafka-python">Python</a></td></tr>
<tr><td> 3</td><td><a href="https://github.com/Shopify/sarama">Go/Golang</a> <a href="https://github.com/confluentinc/confluent-kafka-go">Go/Golang</a></td></tr>
<tr><td> 4</td><td><a href="https://github.com/klarna/brod">Erlang</a></td></tr>
<tr><td> 5</td><td><a href="https://github.com/confluentinc/confluent-kafka-dotnet">.NET</a></td></tr>
<tr><td> 6</td><td><a href="https://github.com/zendesk/ruby-kafka">Ruby</a></td></tr>
<tr><td> 7</td><td><a href="https://github.com/Blizzard/node-rdkafka">Node.js</a></td></tr>
<tr><td> 8</td><td><a href="https://github.com/TrackingSoft/Kafka">Perl</a></td></tr>
<tr><td> 9</td><td><a href="https://github.com/EVODelavega/phpkafka">PHP</a></td></tr>
<tr><td>10</td><td><a href="https://github.com/spicavigo/kafka-rust">Rust</a></td></tr>
<tr><td>11</td><td><a href="https://github.com/wurstmeister/storm-kafka-0.8-plus">Storm</a></td></tr>
<tr><td>12</td><td><a href="https://github.com/elodina/scala-kafka">Scala (DSL jazyk)</a></td></tr>
<tr><td>13</td><td><a href="https://github.com/pingles/clj-kafka">Clojure</a></td></tr>
<tr><td>14</td><td><a href="https://github.com/gerritjvv/kafka-fast">Clojure</a></td></tr>
<tr><td>15</td><td><a href="https://github.com/kellanburket/franz">Swift</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td><a href="https://github.com/edenhill/kafkacat">CLI (stdin/stdout)</a></td></tr>
</table>

<p>Dnes si ukážeme, jak lze použít základní funkce Apache Kafky <a href="https://www.root.cz/serialy/programovaci-jazyk-go/">v&nbsp;programovacím jazyku Go</a>. Demonstrační příklady budou využívat dvě knihovny, a to konkrétně <strong>confluent-kafka-go</strong> a <strong>Sarama</strong>. Důležitým tématem je však i testování aplikací, které jsou založeny na Kafce; zejména se to týká jednotkových testů. Tomuto tématu je věnována druhá polovina článku, která tak nepřímo navazuje na dvojici článků <a href="https://www.root.cz/clanky/jazyk-go-prakticky-jednotkove-testy-kodu-ktery-pristupuje-k-sql-databazim/">Jazyk Go prakticky: jednotkové testy kódu, který přistupuje k SQL databázím</a> a <a href="https://www.root.cz/clanky/jazyk-go-prakticky-jednotkove-testy-kodu-ktery-pristupuje-k-sql-databazim-dokonceni/">Jazyk Go prakticky: jednotkové testy kódu, který přistupuje k SQL databázím (dokončení)</a>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
<i>// Ukázka použití rozhraní pro systém Apache Kafka představovaného knihovnou</i>
<i>// confluent-kafka-go: implementace producenta zpráv.</i>
&nbsp;
package main
&nbsp;
import (
        "fmt"
        "gopkg.in/confluentinc/confluent-kafka-go.v1/kafka"
)
&nbsp;
const (
        server = "localhost"
)
&nbsp;
func main() {
        topic := "upload"
&nbsp;
        <i>// konstrukce producenta</i>
        producer, err := kafka.NewProducer(&amp;kafka.ConfigMap{
                "bootstrap.servers": server,
        })
        defer producer.Close()
&nbsp;
        <i>// kontrola chyby při připojování ke Kafce</i>
        if err != nil {
                panic(err)
        }
&nbsp;
        <i>// funkce volaná pro každou událost, která při práci s Kafkou může nastat</i>
        go func() {
                for event := range producer.Events() {
                        switch ev := event.(type) {
                        case *kafka.Message:
                                if ev.TopicPartition.Error != nil {
                                        fmt.Printf("Delivery failed: %v\n", ev.TopicPartition)
                                } else {
                                        fmt.Printf("Delivered message to %v\n", ev.TopicPartition)
                                }
                        }
                }
        }()
&nbsp;
        <i>// vytváření a produkce zpráv posílaných do zvoleného tématu</i>
        for i := 0; i &lt; 100; i++ {
                text := fmt.Sprintf("Message #%d", i)
                producer.Produce(&amp;kafka.Message{
                        TopicPartition: kafka.TopicPartition{Topic: &amp;topic, Partition: kafka.PartitionAny},
                        Value:          []byte(text),
                }, nil)
        }
        producer.Flush(15 * 1000)
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
<i>// Ukázka použití rozhraní pro systém Apache Kafka představovaného knihovnou</i>
<i>// confluent-kafka-go: implementace konzumenta zpráv.</i>
&nbsp;
package main
&nbsp;
import (
        "fmt"
        "gopkg.in/confluentinc/confluent-kafka-go.v1/kafka"
)
&nbsp;
const (
        server   = "localhost:9092"
        topic    = "upload"
        group_id = "group1"
)
&nbsp;
func main() {
        <i>// konstrukce konzumenta</i>
        consumer, err := kafka.NewConsumer(&amp;kafka.ConfigMap{
                "bootstrap.servers": server,
                "group.id":          group_id,
                "auto.offset.reset": "earliest",
        })
        defer consumer.Close()
&nbsp;
        <i>// kontrola chyby při připojování ke Kafce</i>
        if err != nil {
                panic(err)
        }
&nbsp;
        <i>// přihlášení konzumenta do zvoleného tématu (či témat)</i>
        consumer.SubscribeTopics([]string{topic}, nil)
&nbsp;
        <i>// postupné čtení zpráv, které byly do zvoleného tématu publikovány</i>
        for {
                message, err := consumer.ReadMessage(-1)
                if err == nil {
                        fmt.Printf("Message on %s: %s %s\n", message.TopicPartition, string(message.Key), string(message.Value))
                } else {
                        fmt.Printf("Consumer error: %v (%v)\n", err, message)
                }
        }
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
<i>// Ukázka použití rozhraní pro systém Apache Kafka představovaného knihovnou</i>
<i>// Sarama: implementace producenta zpráv.</i>
&nbsp;
package main
&nbsp;
import (
        "log"
&nbsp;
        "github.com/Shopify/sarama"
)
&nbsp;
const (
        <i>// KafkaConnectionString obsahuje jméno počítače a port, na kterém běží Kafka broker</i>
        KafkaConnectionString = "localhost:9092"
&nbsp;
        <i>// KafkaTopic obsahuje jméno tématu</i>
        KafkaTopic = "test-topic"
)
&nbsp;
func main() {
        <i>// konstrukce konzumenta</i>
        producer, err := sarama.NewSyncProducer([]string{KafkaConnectionString}, nil)
&nbsp;
        <i>// kontrola chyby při připojování ke Kafce</i>
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        log.Printf("Connected to %s", KafkaConnectionString)
&nbsp;
        <i>// zajištění uzavření připojení ke Kafce</i>
        defer func() {
                if err := producer.Close(); err != nil {
                        log.Fatal(err)
                }
        }()
&nbsp;
        <i>// poslání (produkce) zprávy</i>
        msg := &amp;sarama.ProducerMessage{Topic: KafkaTopic, Value: sarama.StringEncoder("testing 123")}
        partition, offset, err := producer.SendMessage(msg)
        if err != nil {
                log.Printf("FAILED to send message: %s\n", err)
        } else {
                log.Printf("&gt; message sent to partition %d at offset %d\n", partition, offset)
        }
&nbsp;
        log.Print("Done")
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
<i>// Ukázka použití rozhraní pro systém Apache Kafka představovaného knihovnou</i>
<i>// Sarama: implementace konzumenta zpráv.</i>
&nbsp;
package main
&nbsp;
import (
        "log"
&nbsp;
        "github.com/Shopify/sarama"
)
&nbsp;
const (
        <i>// KafkaConnectionString obsahuje jméno počítače a port, na kterém běží Kafka broker</i>
        KafkaConnectionString = "localhost:9092"
&nbsp;
        <i>// KafkaTopic obsahuje jméno tématu</i>
        KafkaTopic = "test-topic"
)
&nbsp;
func main() {
        <i>// konstrukce konzumenta</i>
        consumer, err := sarama.NewConsumer([]string{KafkaConnectionString}, nil)
&nbsp;
        <i>// kontrola chyby při připojování ke Kafce</i>
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        log.Printf("Connected to %s", KafkaConnectionString)
&nbsp;
        <i>// zajištění uzavření připojení ke Kafce</i>
        defer func() {
                if err := consumer.Close(); err != nil {
                        log.Fatal(err)
                }
        }()
&nbsp;
        <i>// přihlášení ke zvolenému tématu</i>
        partitionConsumer, err := consumer.ConsumePartition(KafkaTopic, 0, sarama.OffsetNewest)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        <i>// zajištění ukončení přihlášení ke zvolenému tématu</i>
        defer func() {
                if err := partitionConsumer.Close(); err != nil {
                        log.Fatal(err)
                }
        }()
&nbsp;
        <i>// postupné čtení zpráv, které byly do zvoleného tématu publikovány</i>
        consumed := 0
        for {
                msg := &lt;-partitionConsumer.Messages()
                <i>// vypíšeme pouze offset zprávy, její klíč a tělo (value, payload)</i>
                log.Printf("Consumed message offset %d: %s:%s", msg.Offset, msg.Key, msg.Value)
                consumed++
        }
&nbsp;
        <i>// výpis počtu zpracovaných zpráv (ovšem sem se stejně nedostaneme :-)</i>
        log.Printf("Consumed: %d", consumed)
        log.Print("Done")
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
<i>// Ukázka použití rozhraní pro systém Apache Kafka představovaného knihovnou</i>
<i>// Sarama: výpis informací o tématech.</i>
&nbsp;
package main
&nbsp;
import (
        "log"
&nbsp;
        "github.com/Shopify/sarama"
)
&nbsp;
const (
        <i>// KafkaConnectionString obsahuje jméno počítače a port, na kterém běží Kafka broker</i>
        KafkaConnectionString = "localhost:9092"
&nbsp;
        <i>// KafkaTopic obsahuje jméno tématu</i>
        KafkaTopic = "test-topic"
)
&nbsp;
func main() {
        <i>// konstrukce rozhraní k brokerovi</i>
        broker := sarama.NewBroker(KafkaConnectionString)
&nbsp;
        <i>// kontrola chyby při připojování k brokerovi</i>
        err := broker.Open(nil)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        log.Printf("Connected to %s", KafkaConnectionString)
&nbsp;
        request := sarama.MetadataRequest{Topics: []string{KafkaTopic}}
        response, err := broker.GetMetadata(&amp;request)
        if err != nil {
                _ = broker.Close()
                log.Fatal(err)
        }
&nbsp;
        if len(response.Topics) == 1 {
                log.Print("There is one topic active in the cluster.")
        } else {
                log.Print("There are", len(response.Topics), "topics active in the cluster.")
        }
&nbsp;
        if err = broker.Close(); err != nil {
                log.Fatal(err)
        }
&nbsp;
        log.Print("Done")
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
package main

<i>// BrokerConfiguration represents configuration of Kafka brokers and topics</i>
type BrokerConfiguration struct {
        Address string `mapstructure:"address" toml:"address"`
        Topic   string `mapstructure:"topic"   toml:"topic"`
}

<i>// Producer represents any producer</i>
type Producer interface {
        New(brokerConfiguration BrokerConfiguration) (Producer, error)
        ProduceMessage(message Message) (int32, int64, error)
        Close() error
}
</pre>

<pre>
package main

import (
        "encoding/json"

        "github.com/Shopify/sarama"
        "github.com/rs/zerolog/log"
)

<i>// KafkaProducer is an implementation of Producer interface</i>
type KafkaProducer struct {
        Configuration BrokerConfiguration
        Producer      sarama.SyncProducer
}

<i>// NewKafkaProducer constructs new implementation of Producer interface</i>
func NewKafkaProducer(brokerConfiguration BrokerConfiguration) (*KafkaProducer, error) {
        producer, err := sarama.NewSyncProducer([]string{brokerConfiguration.Address}, nil)
        if err != nil {
                log.Error().Err(err).Msg("unable to create a new Kafka producer")
                return nil, err
        }

        return &amp;KafkaProducer{
                Configuration: brokerConfiguration,
                Producer:      producer,
        }, nil
}

<i>// ProduceMessage produces message to selected topic. That function returns</i>
<i>// partition ID and offset of new message or an error value in case of any</i>
<i>// problem on broker side.</i>
func (producer *KafkaProducer) ProduceMessage(message Message) (partitionID int32, offset int64, err error) {
        jsonBytes, err := json.Marshal(message)

        if err != nil {
                log.Error().Err(err).Msg("Couldn't turn notification message into valid JSON")
                return -1, -1, err
        }

        <i>// construct message to be produced using the provided payload (message body)</i>
        producerMsg := &amp;sarama.ProducerMessage{
                Topic: producer.Configuration.Topic,
                Value: sarama.ByteEncoder(jsonBytes),
        }

        <i>// try to produce message</i>
        partitionID, offset, err = producer.Producer.SendMessage(producerMsg)
        if err != nil {
                log.Error().Err(err).Msg("failed to produce message to Kafka")
        } else {
                log.Info().Msgf("message sent to partition %d at offset %d\n", partitionID, offset)
        }
        return
}

<i>// Close allow the Sarama producer to be gracefully closed</i>
func (producer *KafkaProducer) Close() error {
        if err := producer.Producer.Close(); err != nil {
                log.Error().Err(err).Msg("unable to close Kafka producer")
                return err
        }

        return nil
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
package main

import (
        "os"

        "github.com/rs/zerolog"
        "github.com/rs/zerolog/log"
)

type Message struct {
        ID      int    `json:"id"`
        Name    string `json:"name"`
        Surname string `json:"surname"`
}

func main() {
        log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
        log.Info().Msg("Started")

        brokerConfiguration := BrokerConfiguration{
                Address: "localhost:9092",
                Topic:   "test-topic2",
        }

        producer, err := NewKafkaProducer(brokerConfiguration)
        if err != nil {
                log.Error().Err(err).Msg("Can not connect to Kafka")
                return
        }

        log.Info().Str("address", brokerConfiguration.Address).Msg("Connected to Kafka")

        defer producer.Close()

        message := Message{
                ID:      42,
                Name:    "Václav",
                Surname: "Trachta",
        }

        _, _, err = producer.ProduceMessage(message)
        if err != nil {
                log.Error().Err(err).Msg("Unable to produce message")
                return
        }

        log.Info().Msg("Finished")
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td>1</td><td>confluent_kafka_producer.go</td><td>Producent zpráv založený na knihovně confluent-kafka-go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_75/confluent_kafka_producer.go">https://github.com/tisnik/go-root/blob/master/article_75/confluent_kafka_producer.go</a></td></tr>
<tr><td>2</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_75/">https://github.com/tisnik/go-root/blob/master/article_75/</a></td></tr>
<tr><td>3</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_75/">https://github.com/tisnik/go-root/blob/master/article_75/</a></td></tr>
<tr><td>4</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_75/">https://github.com/tisnik/go-root/blob/master/article_75/</a></td></tr>
<tr><td>5</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_75/">https://github.com/tisnik/go-root/blob/master/article_75/</a></td></tr>
<tr><td>6</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_75/">https://github.com/tisnik/go-root/blob/master/article_75/</a></td></tr>
<tr><td>7</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_75/">https://github.com/tisnik/go-root/blob/master/article_75/</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na relevantní články na Rootu</h2>

<p>V&nbsp;dnešním článku jsme se zabývali dvojicí témat &ndash; využitím systému Apache Kafka v&nbsp;programovacím jazyku Go a taktéž tvorbou jednotkových testů pro ty jednotky aplikace, které přímo s&nbsp;Apache Kafkou komunikují, tedy většinou s&nbsp;producenty a konzumenty zpráv. Jak Apache Kafkou, tak i problematikou tvorby jednotkových testů pro &bdquo;okrajové&ldquo; části aplikací, jsme se již na stránkách Roota zabývali v&nbsp;těchto článcích:</p>

<ol>

<li>Použití nástroje Apache Kafka v&nbsp;aplikacích založených na mikroslužbách<br />
<a href="https://www.root.cz/clanky/pouziti-nastroje-apache-kafka-v-aplikacich-zalozenych-na-mikrosluzbach/">https://www.root.cz/clanky/pouziti-nastroje-apache-kafka-v-aplikacich-zalozenych-na-mikrosluzbach/</a>
</li>

<li>Apache Kafka: distribuovaná streamovací platforma<br />
<a href="https://www.root.cz/clanky/apache-kafka-distribuovana-streamovaci-platforma/">https://www.root.cz/clanky/apache-kafka-distribuovana-streamovaci-platforma/</a>
</li>

<li>Pokročilý streaming založený na Apache Kafce, jazyku Clojure a knihovně Jackdaw<br />
<a href="https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw/">https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw/</a>
</li>

<li>Pokročilý streaming založený na Apache Kafce, jazyku Clojure a knihovně Jackdaw (2. část)<br />
<a href="https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw-2-cast/">https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw-2-cast/</a>
</li>

<li>Pokročilý streaming založený na projektu Apache Kafka, jazyku Clojure a knihovně Jackdaw (streamy a kolony)<br />
<a href="https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-projektu-apache-kafka-jazyku-clojure-a-knihovne-jackdaw-streamy-a-kolony/">https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-projektu-apache-kafka-jazyku-clojure-a-knihovne-jackdaw-streamy-a-kolony/</a>
</li>

<li>Jazyk Go prakticky: jednotkové testy kódu, který přistupuje k SQL databázím<br />
<a href="https://www.root.cz/clanky/jazyk-go-prakticky-jednotkove-testy-kodu-ktery-pristupuje-k-sql-databazim/">https://www.root.cz/clanky/jazyk-go-prakticky-jednotkove-testy-kodu-ktery-pristupuje-k-sql-databazim/</a>
</li>

<li>Jazyk Go prakticky: jednotkové testy kódu, který přistupuje k SQL databázím (dokončení)<br />
<a href="https://www.root.cz/clanky/jazyk-go-prakticky-jednotkove-testy-kodu-ktery-pristupuje-k-sql-databazim-dokonceni/">https://www.root.cz/clanky/jazyk-go-prakticky-jednotkove-testy-kodu-ktery-pristupuje-k-sql-databazim-dokonceni/</a>
</li>

<li>Knihovny určené pro tvorbu testů v programovacím jazyce Go<br />
<a href="https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/">https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/</a>
</li>

<li>Testování aplikací naprogramovaných v jazyce Go<br />
<a href="https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/">https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/</a>
</li>

<li>Pomůcky při tvorbě jednotkových testů v jazyce Go<br />
<a href="https://www.root.cz/clanky/pomucky-pri-tvorbe-jednotkovych-testu-v-jazyce-go/">https://www.root.cz/clanky/pomucky-pri-tvorbe-jednotkovych-testu-v-jazyce-go/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Real-Time Payments with Clojure and Apache Kafka (podcast)<br />
<a href="https://www.evidentsystems.com/news/confluent-podcast-about-apache-kafka/">https://www.evidentsystems.com/news/confluent-podcast-about-apache-kafka/</a>
</li>

<li>sarama: an MIT-licensed Go client library for Apache Kafka version 0.8 (and later)<br />
<a href="https://github.com/Shopify/sarama">https://github.com/Shopify/sarama</a>
</li>

<li>Kafka.clj<br />
<a href="https://github.com/helins-io/kafka.clj">https://github.com/helins-io/kafka.clj</a>
</li>

<li>Microservices: The Rise Of Kafka<br />
<a href="https://movio.co/blog/microservices-rise-kafka/">https://movio.co/blog/microservices-rise-kafka/</a>
</li>

<li>Building a Microservices Ecosystem with Kafka Streams and KSQL<br />
<a href="https://www.confluent.io/blog/building-a-microservices-ecosystem-with-kafka-streams-and-ksql/">https://www.confluent.io/blog/building-a-microservices-ecosystem-with-kafka-streams-and-ksql/</a>
</li>

<li>An introduction to Apache Kafka and microservices communication<br />
<a href="https://medium.com/@ulymarins/an-introduction-to-apache-kafka-and-microservices-communication-bf0a0966d63">https://medium.com/@ulymarins/an-introduction-to-apache-kafka-and-microservices-communication-bf0a0966d63</a>
</li>

<li>kappa-architecture.com<br />
<a href="http://milinda.pathirage.org/kappa-architecture.com/">http://milinda.pathirage.org/kappa-architecture.com/</a>
</li>

<li>Questioning the Lambda Architecture<br />
<a href="https://www.oreilly.com/ideas/questioning-the-lambda-architecture">https://www.oreilly.com/ideas/questioning-the-lambda-architecture</a>
</li>

<li>Lambda architecture<br />
<a href="https://en.wikipedia.org/wiki/Lambda_architecture">https://en.wikipedia.org/wiki/Lambda_architecture</a>
</li>

<li>Kafka &ndash; ecosystem (Wiki)<br />
<a href="https://cwiki.apache.org/confluence/display/KAFKA/Ecosystem">https://cwiki.apache.org/confluence/display/KAFKA/Ecosystem</a>
</li>

<li>The Kafka Ecosystem - Kafka Core, Kafka Streams, Kafka Connect, Kafka REST Proxy, and the Schema Registry<br />
<a href="http://cloudurable.com/blog/kafka-ecosystem/index.html">http://cloudurable.com/blog/kafka-ecosystem/index.html</a>
</li>

<li>A Kafka Operator for Kubernetes<br />
<a href="https://github.com/krallistic/kafka-operator">https://github.com/krallistic/kafka-operator</a>
</li>

<li>Kafka Streams<br />
<a href="https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Streams">https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Streams</a>
</li>

<li>Kafka Streams<br />
<a href="http://kafka.apache.org/documentation/streams/">http://kafka.apache.org/documentation/streams/</a>
</li>

<li>Kafka Streams (FAQ)<br />
<a href="https://cwiki.apache.org/confluence/display/KAFKA/FAQ#FAQ-Streams">https://cwiki.apache.org/confluence/display/KAFKA/FAQ#FAQ-Streams</a>
</li>

<li>Event stream processing<br />
<a href="https://en.wikipedia.org/wiki/Event_stream_processing">https://en.wikipedia.org/wiki/Event_stream_processing</a>
</li>

<li>Part 1: Apache Kafka for beginners - What is Apache Kafka?<br />
<a href="https://www.cloudkarafka.com/blog/2016-11-30-part1-kafka-for-beginners-what-is-apache-kafka.html">https://www.cloudkarafka.com/blog/2016-11-30-part1-kafka-for-beginners-what-is-apache-kafka.html</a>
</li>

<li>What are some alternatives to Apache Kafka?<br />
<a href="https://www.quora.com/What-are-some-alternatives-to-Apache-Kafka">https://www.quora.com/What-are-some-alternatives-to-Apache-Kafka</a>
</li>

<li>What is the best alternative to Kafka?<br />
<a href="https://www.slant.co/options/961/alternatives/~kafka-alternatives">https://www.slant.co/options/961/alternatives/~kafka-alternatives</a>
</li>

<li>A super quick comparison between Kafka and Message Queues<br />
<a href="https://hackernoon.com/a-super-quick-comparison-between-kafka-and-message-queues-e69742d855a8?gi=e965191e72d0">https://hackernoon.com/a-super-quick-comparison-between-kafka-and-message-queues-e69742d855a8?gi=e965191e72d0</a>
</li>

<li>Kafka Queuing: Kafka as a Messaging System<br />
<a href="https://dzone.com/articles/kafka-queuing-kafka-as-a-messaging-system">https://dzone.com/articles/kafka-queuing-kafka-as-a-messaging-system</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

