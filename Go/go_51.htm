<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba grafů v jazyce Go (2.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba grafů v jazyce Go (2.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhém článku o tvorbě grafů v programovacím jazyce Go se zaměříme především na způsob vykreslování grafů na straně (webového) klienta. V tomto případě se Go použije pro přípravu a přenos hodnot, které se mají vykreslit. O samotnou tvorbu grafů se stará příslušná JS knihovna, například plotly.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba grafů v&nbsp;jazyce Go (2.část)</a></p>
<p><a href="#k02">2. Použití balíčků poskytovaných knihovnou <i>plot</i></a></p>
<p><a href="#k03">3. Složitější příklad založený na knihovně <i>plot</i></a></p>
<p><a href="#k04">4. Tvorba interaktivních grafů pro webové stránky</a></p>
<p><a href="#k05">5. Postup vykreslení grafu na straně klienta ve webové stránce</a></p>
<p><a href="#k06">6. Stažení všech potřebných knihoven</a></p>
<p><a href="#k07">7. První graf na webové stránce vykreslený z&nbsp;hodnot, které jsou přímo součástí skriptu</a></p>
<p><a href="#k08">8. Samostatný soubor s&nbsp;hodnotami, které se mají vykreslit do grafu</a></p>
<p><a href="#k09">9. Získání hodnot, které se mají vykreslit, ze serveru</a></p>
<p><a href="#k10">10. Generování hodnot pro vykreslení přímo serverem</a></p>
<p><a href="#k11">11. Výpočet hodnot na straně serveru</a></p>
<p><a href="#k12">12. Graf s&nbsp;průběhy několika funkcí, nastavení stylu vykreslování grafu</a></p>
<p><a href="#k13">13. Výpočet hodnot, které se mají vykreslit, na základě zadaných parametrů</a></p>
<p><a href="#k14">14. Sloupcový graf</a></p>
<p><a href="#k15">15. Koláčový graf</a></p>
<p><a href="#k16">16. Úpravy vzhledu koláčového grafu</a></p>
<p><a href="#k17">17. Knihovna Chart.js</a></p>
<p><a href="#k18">18. Jednoduchý příklad používající knihovnu Chart.js</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba grafů v&nbsp;jazyce Go (2.část)</h2>

<p>V&nbsp;dnešní části <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">seriálu o
programovacím jazyku Go</a> si ukážeme některé další způsoby vykreslování grafů
s&nbsp;naměřenými hodnotami či s&nbsp;průběhy funkcí. Navážeme tak na <a
href="https://www.root.cz/clanky/tvorba-grafu-v-jazyce-go/">část předchozí</a>,
ve které jsme si popsali možnosti nabízené knihovnami <i>glot</i> a <i>plot</i>
(z&nbsp;balíčku <i>Gonum</i>). Tyto knihovny slouží pro vytvoření grafů na
straně serveru (či pracovního stroje uživatele), ovšem mnohdy je zapotřebí
grafy vykreslit na klientovi, tj.&nbsp;v&nbsp;typickém případě ve webovém
prohlížeči. Pro tento účel lze využít kombinaci několika technologií &ndash;
HTTP serveru naprogramovaného v&nbsp;Go, vybrané knihovny pro vykreslování
grafů na straně klienta (<i>plotly</i>, <i>chart.js</i> atd.) a většinou
relativně jednoduchého skriptu, který načte hodnoty, jež se mají zobrazit a
provede (resp.&nbsp;zahájí) jejich vykreslení.</p>

<p>Nejdříve se ovšem na chvíli vraťme ke knihovně <i>plot</i> z&nbsp;projektu
<i>Gonum</i>. Tato knihovna se ve skutečnosti skládá ze čtyř balíčků, které
jsou vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Balíček</th><th>Stručný popis balíčku</th></tr>
<tr><td>1</td><td><a href="https://godoc.org/gonum.org/v1/plot">plot</a></td><td>základní balíček se základními strukturami a jejich metodami</td></tr>
<tr><td>2</td><td><a href="https://godoc.org/gonum.org/v1/plot/plotter">plotter</a></td><td>konkrétní implementace rozhraní <i>Plotter</i></td></tr>
<tr><td>3</td><td><a href="https://godoc.org/gonum.org/v1/plot/plotutil">plotutil</a></td><td>pomocné funkce pro vytvoření různých průběhů v&nbsp;grafu atd.</td></tr>
<tr><td>4</td><td><a href="https://godoc.org/gonum.org/v1/plot/vg">vg</a></td><td>rozhraní pro vykreslování 2D grafiky (vektorové)</td></tr>
</table>

<p>Většinou je nutné použít všechny tři balíčky, protože v&nbsp;balíčku
<strong>plotter</strong> najdeme konkrétní implementace rozhraní <i>Plotter</i>
a v&nbsp;<strong>plotutil</strong> pak jednotlivé typy průběhů, které se mohou
v&nbsp;grafu objevit. Sice by bylo možné tyto části implementovat přímo
v&nbsp;aplikaci (což je někdy nutné), ovšem pro běžné grafy je to zbytečná
práce navíc.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Použití balíčků poskytovaných knihovnou <i>plot</i></h2>

<p>Minule jsme si taktéž ukázali čtveřici příkladů určených pro tvorbu
jednoduchých grafů s&nbsp;využitím možností nabízených knihovnou <i>plot</i>.
Na těchto příkladech je patrné, že je většinou nutné použít všechny čtyři
balíčky zmíněné <a href="#k01">v&nbsp;úvodní kapitole</a>, což je ukázáno na
příkladu, s&nbsp;nímž jsme se již setkali:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "gonum.org/v1/plot"
        "gonum.org/v1/plot/plotter"
        "gonum.org/v1/plot/plotutil"
        "gonum.org/v1/plot/vg"
)
&nbsp;
const resX = 20.0 / 3.0 * vg.Inch
const resY = 5.0 * vg.Inch
&nbsp;
func <strong>main</strong>() {
        p, err := plot.New()
        if err != nil {
                panic(err)
        }
&nbsp;
        input := [...]int32{1, 2, 4, 8, 9, 8, 4, 2, 1}
&nbsp;
        points := make(plotter.XYs, len(input))
        for i := range points {
                points[i].X = float64(i)
                points[i].Y = float64(input[i])
        }
&nbsp;
        p.Title.Text = "Plot #5"
        p.X.Label.Text = "X"
        p.Y.Label.Text = "Y"
&nbsp;
        err = plotutil.AddLinePoints(p, "Measured data", points)
        if err != nil {
                panic(err)
        }
&nbsp;
        err = p.Save(resX, resY, "plot05.png")
        if err != nil {
                panic(err)
        }
}
</pre>

<a href="https://www.root.cz/obrazek/401356/"><img src="https://i.iinfo.cz/images/472/plotly-1-prev.png" class="image-401356" alt="&#160;" width="360" height="270" /></a>
<p><i>Obrázek 1: Výsledek běhu předchozího demonstračního příkladu.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Složitější příklad založený na knihovně <i>plot</i></h2>

<p>Uveďme si ještě poněkud složitější příklad, který je inspirovaný kódem
uvedeným přímo na <a
href="https://github.com/gonum/plot/wiki/Example-plots">stránce projektu
Plot</a>. V&nbsp;tomto příkladu jsou vykresleny průběhy tří funkcí, pokaždé
s&nbsp;jiným stylem vykreslování a popisem jednotlivých os:</p>

<pre>
s, err := plotter.NewScatter(series1)
l, err := plotter.NewLine(series2)
lpLine, lpPoints, err := plotter.NewLinePoints(series3)
</pre>

<p>Dále je v&nbsp;příkladu ukázán způsob definice stylů vykreslování, například
zde pro poslední průběh:</p>

<pre>
lpLine.Color = color.RGBA{G: 255, A: 255}
lpPoints.Shape = draw.PyramidGlyph{}
</pre>

<p>Změna barvy jednotlivých průběhů je snadná:</p>

<pre>
s.GlyphStyle.Color = color.RGBA{R: 255, B: 128, A: 255}
l.LineStyle.Color = color.RGBA{B: 255, A: 255}
lpPoints.Color = color.RGBA{R: 255, A: 255}
</pre>

<p>Úplný zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "image/color"
        "math"
&nbsp;
        "gonum.org/v1/plot"
        "gonum.org/v1/plot/plotter"
        "gonum.org/v1/plot/vg"
        "gonum.org/v1/plot/vg/draw"
)
&nbsp;
const points = 50
&nbsp;
const resX = 20.0 / 3.0 * vg.Inch
const resY = 5.0 * vg.Inch
&nbsp;
func <strong>fillInSeries</strong>(offset float64) plotter.XYs {
        series := make(plotter.XYs, points)
        function1 := func(t float64, offset float64) float64 {
                // limita
                if t == 0.0 {
                        return 1.0
                }
                return math.Sin(t-offset) / t
        }
&nbsp;
        for i := range series {
                t := float64(i)*5.0*math.Pi/points + 0.4
                series[i].X = t
                series[i].Y = function1(t, offset)
        }
        return series
}
&nbsp;
func <strong>main</strong>() {
        series1 := fillInSeries(0)
        series2 := fillInSeries(math.Pi / 2.0)
        series3 := fillInSeries(-math.Pi / 2.0)
&nbsp;
        p, err := plot.New()
        if err != nil {
                panic(err)
        }
        p.Title.Text = "Points Example"
        p.X.Label.Text = "X"
        p.Y.Label.Text = "Y"
&nbsp;
        p.Add(plotter.NewGrid())
&nbsp;
        s, err := plotter.NewScatter(series1)
        if err != nil {
                panic(err)
        }
        s.GlyphStyle.Color = color.RGBA{R: 255, B: 128, A: 255}
&nbsp;
        l, err := plotter.NewLine(series2)
        if err != nil {
                panic(err)
        }
        l.LineStyle.Width = vg.Points(1)
        l.LineStyle.Dashes = []vg.Length{vg.Points(5), vg.Points(5)}
        l.LineStyle.Color = color.RGBA{B: 255, A: 255}
&nbsp;
        lpLine, lpPoints, err := plotter.NewLinePoints(series3)
        if err != nil {
                panic(err)
        }
        lpLine.Color = color.RGBA{G: 255, A: 255}
        lpPoints.Shape = draw.PyramidGlyph{}
        lpPoints.Color = color.RGBA{R: 255, A: 255}
&nbsp;
        p.Add(s, l, lpLine, lpPoints)
        p.Legend.Add("scatter", s)
        p.Legend.Add("line", l)
        p.Legend.Add("line points", lpLine, lpPoints)
&nbsp;
        err = p.Save(resX, resY, "plot06.png")
        if err != nil {
                panic(err)
        }
}
</pre>

<a href="https://www.root.cz/obrazek/401533/"><img src="https://i.iinfo.cz/images/487/plot06-1-prev.png" class="image-401533" alt="&#160;" width="360" height="270" /></a>
<p><i>Obrázek 2: Výsledek běhu příkladu popsaného v&nbsp;této kapitole.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Tvorba interaktivních grafů pro webové stránky</h2>

<p>Knihovny <i>glot</i> a <i>Gonum plot</i>, s&nbsp;nimiž jsme se seznámili
v&nbsp;předchozím textu, jsou primárně určeny pro vykreslování grafů do
rastrových obrázků popř.&nbsp;do souborů, které mohou obsahovat vektorové
kresby (SVG, PostScript, PDF). Jedná se tedy o knihovny, které jsou primárně
určeny pro použití buď na pracovních stanicích uživatelů nebo na serverech
&ndash; server v&nbsp;tomto případě připravuje již hotové grafy, které jsou na
základě požadavku přeneseny ke klientovi a tam zobrazeny. V&nbsp;mnoha
případech, zejména při implementaci různých &bdquo;dashboardů&ldquo; (viz
například známý projekt <i>Grafana</i>, který se často kombinuje
s&nbsp;nástrojem <i>Prometheus</i>), je však výhodnější přenést i samotné
vykreslení grafu na klienta. Server v&nbsp;tomto případě slouží pro výpočet (či
jakékoli jiné získání) dat, která se mají v&nbsp;grafu vykreslit. A právě tímto
způsobem, který do ekosystému, jenž je v&nbsp;současnosti okolo programovacího
jazyka Go vytvořen, zapadá mnohem líp, se budeme zabývat v&nbsp;navazujících
kapitolách.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě, že se chystáte zobrazit
pouze jediný graf (například nějaký sloupcový graf s&nbsp;výsledky benchmarků,
koláčový graf atd.), nemusí být využití JavaScriptové knihovny z&nbsp;pohledu
klienta vždy rychlejší, protože samotný kód knihovny může být velmi rozsáhlý
(dále použitá knihovna <i>plotly</i> má v&nbsp;minifikované verzi cca 3MB),
takže například graf přenesený <a
href="https://www.root.cz/clanky/vektorovy-graficky-format-svg/">v&nbsp;SVG</a>
(tedy ve vektorové podobě) může být na klientovi vykreslen rychleji. Ovšem
ztrácíme tím možnou interaktivitu &ndash; u dalších příkladů si totiž po jejich
spuštění a zobrazení ve webovém prohlížeči můžete graf různě zvětšovat, po
najetí myší na průběh se zobrazí hodnota v&nbsp;daném místě grafu
(popř.&nbsp;hodnoty všech průběhů pro danou hodnotu nezávislé proměnné), graf
je možné uložit přímo na straně klienta v&nbsp;různých formátech atd.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Postup vykreslení grafu na straně klienta ve webové stránce</h2>

<p>Celý postup vykreslení grafu na straně klienta do plochy webové stránky je
ve skutečnosti poměrně jednoduchý a přímočarý:</p>

<ol>

<li>Server pošle klientovi kostru HTML stránky (což může být základ pro
<i>SPA</i> neboli pro <i>Single Page Application</i>).</li>

<li>Klient si na základě obsahu této stránky vyžádá další potřebné informace,
typicky zdrojový (minifikovaný) kód knihovny sloužící pro vykreslení grafů
s&nbsp;využitím JavaScriptu a možností HTML 5 (<i>canvas</i>).</li>

<li>Další kód umístěný na HTML stránce či v&nbsp;JavaScriptových zdrojových
kódech vede k&nbsp;požadavku klienta na poslání dat, která se mají zobrazit
v&nbsp;grafu.</li>

<li>Server požadovaná data nějakým způsobem získá (například je vypočítá, načte
metriky uložené v&nbsp;databázi atd.) a pošle je ve vhodném formátu zpět
klientovi. Může například použít formát JSON, který sice není pro tyto účely
příliš úsporný, ovšem pro data určená pro jednodušší grafy to nemusí být
kritické.</li>

</ol>

<p><div class="rs-tip-major">Poznámka: v&nbsp;současnosti existuje takřka
nepřeberné množství JavaScriptových knihoven, které tvorbu grafů na straně
klienta (tedy webového prohlížeče) umožňují. Některé z&nbsp;těchto knihoven
nabízí pouze minimální možnosti úpravy grafů &ndash; takové knihovny mají tu
výhodu, že jsou relativně malé. Příkladem může být původní verze knihovny <a
href="http://www.flotcharts.org/">Flot</a> popř.&nbsp;knihovna <i>graph.js</i>,
kterou si taktéž ukážeme. Jednou z&nbsp;nejznámějších a možná i
nejuniverzálnějších knihoven tohoto typu je knihovna nazvaná <i>plotly</i>, jíž
lze získat z&nbsp;adresy <a
href="https://cdn.plot.ly/plotly-latest.min.js">https://cdn.plot.ly/plotly-latest.min.js</a>
a jejíž vybrané možnosti si ukážeme v&nbsp;navazujících kapitolách.</div></p>

<p>Prakticky všechny dále uvedené demonstrační příklady se skládají ze tří
částí:</p>

<ol>

<li>Implementace HTTP serveru, který je naprogramován v&nbsp;jazyce Go, protože
právě Go se pro tyto účely velmi dobře hodí. Některé příklady jsou
implementovány jako HTTP server, který klientovi poskytuje pouze statická data,
další příklady mají přímo v&nbsp;serveru implementován i výpočet dat pro
graf.</li>

<li>HTML stránku s&nbsp;plochou, do které se bude vykreslovat graf. Na této
stránce se načítá kód knihovny <i>plotly</i> (tu klientovi poskytuje HTTP
server), v&nbsp;některých případech i kód knihovny <i>jQuery</i> a taktéž
krátký kód napsaný v&nbsp;JavaScriptu, jenž je popsán v&nbsp;následujícím
bodu.</li>

<li>Třetí částí příkladu je již výše zmíněný kód naprogramovaný
v&nbsp;JavaScriptu, který provede inicializaci <i>plotly</i>, vyžádá si data
pro vykreslení a následně zažádá <i>plotly</i> o vykreslení grafu.</li>

</ol>



<p><a name="k06"></a></p>
<h2 id="k06">6. Stažení všech potřebných knihoven</h2>

<p>Ještě před spuštěním dále popsaných demonstračních příkladů postavených nad
knihovnou <i>plotly</i> je nutné získat minifikovanou verzi této knihovny.
Některé příklady navíc používají i známou sadu pomocných funkcí <i>jQuery</i>.
Následující program nazvaný <a
href="https://github.com/tisnik/go-root/blob/master/article_51/setup.go">setup.go</a>,
který je naprogramovaný v&nbsp;jazyce Go, zajistí jak stažení potřebných
knihoven, tak i jejich rozkopírování na potřebná místa (ve skutečnosti se
neprovádí fyzická kopie, pouze vytvoření <i>hard linku</i>):</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "io"
        "net/http"
        "os"
)
&nbsp;
func <strong>downloadFile</strong>(url string, filename string) (int64, error) {
        resp, err := http.Get(url)
        if err != nil {
                return 0, err
        }
        defer resp.Body.Close()
&nbsp;
        out, err := os.Create(filename)
        if err != nil {
                return 0, err
        }
        defer out.Close()
&nbsp;
        downloaded, err := io.Copy(out, resp.Body)
        return downloaded, err
}
&nbsp;
func <strong>performDownload</strong>(url string, filename string) {
        downloaded, err := downloadFile(url, filename)
        if err != nil {
                fmt.Printf("Download from URL %s failed: %v\n", url, err)
                return
        }
        fmt.Printf("Downloaded %d bytes from URL %s into file %s\n", downloaded, url, filename)
}
&nbsp;
func <strong>createLinkInDirectory</strong>(filename string, directory string) {
        target := directory + filename
        err := os.Link(filename, target)
        if err != nil {
                fmt.Printf("Unable to create hard link from %s to %s: %v\n", filename, target, err)
        }
}
&nbsp;
func <strong>main</strong>() {
        performDownload("https://code.jquery.com/jquery-3.4.1.min.js", "jquery.min.js")
        performDownload("https://cdn.plot.ly/plotly-latest.min.js", "plotly-latest.min.js")
        for example := 1; example &lt;= 10; example++ {
                directory := fmt.Sprintf("plotly%02d/", example)
                createLinkInDirectory("jquery.min.js", directory)
                createLinkInDirectory("plotly-latest.min.js", directory)
        }

}
</pre>

<p><div class="rs-tip-major">Poznámka: pochopitelně je možné tento program
nahradit nějakým skriptem naprogramovaným v&nbsp;shellu, ovšem výše uvedený
program je kompatibilní i s&nbsp;těmi neunixovými operačními systémy, jejichž
souborové systémy podporují tvoru linků.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. První graf na webové stránce vykreslený z&nbsp;hodnot, které jsou přímo součástí skriptu</h2>

<p>První aplikace, jejíž serverová část je vyvinutá v&nbsp;programovacím jazyku
Go, je velmi jednoduchá, protože se jedná o pouhou kostru, na níž budeme
později stavět komplikovanější příklady. Nejdříve si ukažme <a
href="https://github.com/tisnik/go-root/blob/master/article_51/plotly01.go">implementaci
HTTP serveru</a>. Ta je prozatím velmi stručná, protože jediným úkolem tohoto
HTTP serveru je dodávat statická data uložená v&nbsp;podadresáři
&bdquo;plotly01&ldquo;, v&nbsp;němž se nachází HTML stránka i všechny
JavaScriptové soubory (knihovna <i>plotly</i> popř.&nbsp;link na ni a námi
vytvořený skript):</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "net/http"
)
&nbsp;
func <strong>startHttpServer</strong>(address string) {
        log.Printf("Starting server on address %s", address)
        http.Handle("/", http.FileServer(http.Dir("plotly01/")))
        http.ListenAndServe(address, nil)
}
&nbsp;
func <strong>main</strong>() {
        startHttpServer(":8080")
}
</pre>

<p>V&nbsp;podadresáři nazvaném &bdquo;plotly01&ldquo; je mj.&nbsp;umístěn i <a
href="https://github.com/tisnik/go-root/blob/master/article_51/plotly01/plot.htm">soubor
obsahující HTML stránku</a>, do jejíž plochy se má graf vykreslit.  Povšimněte
si, že do prohlížeče budeme načítat i skript s&nbsp;implementací knihovny
<i>plotly</i> a taktéž náš skript pojmenovaný &bdquo;plot.js&ldquo;:</p>

<pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Plot #1&lt;/title&gt;
        &lt;meta name="Generator" content="golang"&gt;
        &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
        &lt;script src="plotly-latest.min.js" language="javascript"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Plot #1&lt;/h1&gt;
        &lt;div id="graphElement" style="width:800px;height:600px;"&gt;&lt;/div&gt;
        &lt;script src="plot.js" language="javascript"&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Poslední součástí tohoto demonstračního příkladu je již výše zmíněný skript
<a
href="https://github.com/tisnik/go-root/blob/master/article_51/plotly01/plot.js">uložený
do souboru &bdquo;plot.js&ldquo;</a>. V&nbsp;tomto skriptu se přímo
s&nbsp;využitím možností nabízených knihovnou <i>plotly</i> vykreslí jednoduchý
graf, který vznikne vynesením a propojením pěti bodů do kartézské souřadné
soustavy. Hodnoty, které mají být vykresleny, jsou v&nbsp;tomto případě přímo
součástí skriptu &ndash; jedná se o strukturu nazvanou
<strong>data</strong>:</p>

<pre>
var graphElement = document.getElementById('graphElement');
var data = {
    x: [1, 2, 3, 4, 5],
    y: [1, 2, 4, 8, 16]
}
var opts = {
    margin: { t: 0}
}
Plotly.plot(graphElement, [data], opts)
</pre>

<p>Za zmínku stojí fakt, že do funkce <strong>Plotly.plot</strong> se ve druhém
parametru může předat více průběhů (sekvencí hodnot), které se mají zobrazit.
Z&nbsp;tohoto důvodu je námi vytvořená struktura <strong>data</strong>
(jediným) prvkem pole, které se do <strong>Plotly.plot</strong> předává.
V&nbsp;některých dalších příkladech této vlastnosti využijeme a do jediného
grafu vykreslíme několik různých průběhů, pochopitelně s&nbsp;odlišnými
hodnotami.</p>

<a href="https://www.root.cz/obrazek/401357/"><img src="https://i.iinfo.cz/images/472/plotly-2-prev.png" class="image-401357" alt="&#160;" width="323" height="270" /></a>
<p><i>Obrázek 3: Graf vykreslený knihovnou <strong>plotly</strong> přímo na
plochu WWW stránky.</i></p>

<a href="https://www.root.cz/obrazek/401358/"><img src="https://i.iinfo.cz/images/472/plotly-3-prev.png" class="image-401358" alt="&#160;" width="323" height="270" /></a>
<p><i>Obrázek 4: Jednou z&nbsp;vlastností knihovny <strong>plotly</strong> je i
podpora pro změnu měřítka, zobrazení výřezu z&nbsp;grafu atd. Zde je zobrazen
stejný průběh, jako na druhém obrázku, pouze s&nbsp;jiným měřítkem.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Samostatný soubor s&nbsp;hodnotami, které se mají vykreslit do grafu</h2>

<p>Předchozí demonstrační příklad dokázal vykreslit graf z&nbsp;hodnot, které
byly uloženy přímo ve zdrojovém kódu skriptu, konkrétně ve skriptu
&bdquo;plot.js&ldquo;. To je pochopitelně příliš jednoúčelové řešení. Ve druhém
demonstračním příkladu z&nbsp;tohoto důvodu provedeme určité zobecnění, protože
hodnoty budou uloženy ve zvláštním souboru, a to konkrétně ve formátu <a
href="https://www.json.org">JSON</a>:</p>

<pre>
{
    "x": [1, 2, 3, 4, 5],
    "y": [1, 2, 4, 8, 16]
}
</pre>

<p>Samotná <a
href="https://github.com/tisnik/go-root/blob/master/article_51/plotly02.go">implementace
serverové části</a> (tj.&nbsp;část projektu naprogramovaná v&nbsp;Go) se
prozatím nebude odlišovat od předchozího HTTP serveru. Jedinou změnou je, že
tentokrát bude server vracet statická data (obsahy souborů) uložená
v&nbsp;podadresáři &bdquo;plotly02&ldquo; a nikoli v&nbsp;podadresáři
&bdquo;plotly01&ldquo;:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "net/http"
)
&nbsp;
func <strong>startHttpServer</strong>(address string) {
        log.Printf("Starting server on address %s", address)
        http.Handle("/", http.FileServer(http.Dir("plotly02/")))
        http.ListenAndServe(address, nil)
}
&nbsp;
func <strong>main</strong>() {
        startHttpServer(":8080")
}
</pre>

<p><div class="rs-tip-major">Poznámka: HTTP server implementovaný v&nbsp;Go
vrací pro statické soubory korektní hlavičky.</div></p>

<p>Ani <a
href="https://github.com/tisnik/go-root/blob/master/article_51/plotly02/plot.htm">HTML
stránka tvořící kostru aplikace</a> na straně klienta se příliš nezměnila.
Pouze v&nbsp;hlavičce načítáme druhou JavaScriptovou knihovnu <i>jQuery</i> a
ihned poté námi vytvořený skript &bdquo;plot.js&ldquo; (ten se tedy nyní
nenačítá až na konci stránky, protože přímo s&nbsp;využitím možností
<i>jQuery</i> můžeme velmi snadno specifikovat, kdy se má část skriptu
spustit):</p>

<pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Plot #2&lt;/title&gt;
        &lt;meta name="Generator" content="golang"&gt;
        &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
        &lt;script src="plotly-latest.min.js" language="javascript"&gt;&lt;/script&gt;
        &lt;script src="jquery.min.js" language="javascript"&gt;&lt;/script&gt;
        &lt;script src="plot.js" language="javascript"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Plot #2&lt;/h1&gt;
        &lt;div id="graphElement" style="width:800px;height:600px;"&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p><a
href="https://github.com/tisnik/go-root/blob/master/article_51/plotly02/plot.js">Samotný
skript &bdquo;plot.js&ldquo;</a> je však oproti prvnímu příkladu zcela odlišný.
Nejdříve se pokusíme načíst obsah souboru &bdquo;data.json&ldquo;. Ten je
uložený na serveru, který obsah dodá s&nbsp;využitím <i>AJAXu</i> (funkci
<strong>XMLHttpRequest</strong> ovšem nevoláme přímo, ale využijeme zde opět
možnosti jQuery). Po přijetí obsahu a jeho <i>unmarshallingu</i> získáme
datovou strukturu, která je předána do anonymní funkce v&nbsp;parametru
nazvaném <strong>data</strong>. Vzhledem k&nbsp;tomu, že obsah i formát této
struktury přímo odpovídá požadavkům knihovny <i>plotly</i>, můžeme provést
vykreslení grafu pouhými deseti řádky kódu:</p>

<pre>
$(document).ready(function() {
    $.getJSON("data.json",
        function (data) {
            var graphElement = $('#graphElement')[0];
            var opts = {
                margin: { t: 0}
            };
            Plotly.plot(graphElement, [data], opts);
        });
});
</pre>

<p><div class="rs-tip-major">Poznámka: jedním z&nbsp;důvodů, proč je
v&nbsp;současnosti nutné použít HTTP server i pro takto jednoduché demonstrační
příklady, je fakt, že moderní webové prohlížeče (pokud je nenastavíte do jiného
režimu) odmítnou načítat JSON z&nbsp;lokálního souboru. Viz též <a
href="https://stackoverflow.com/questions/3595515/xmlhttprequest-error-origin-null-is-not-allowed-by-access-control-allow-origin">problematika</a>
okolo <a
href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a>
(obecně je však toto chování prohlížečů bezpečnější, než tomu bylo
v&nbsp;minulosti).</div></p>

<a href="https://www.root.cz/obrazek/401359/"><img src="https://i.iinfo.cz/images/472/plotly-4-prev.png" class="image-401359" alt="&#160;" width="323" height="270" /></a>
<p><i>Obrázek 5: Předchozí příklad po vykreslení grafu do webové stránky na straně klienta.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Získání hodnot, které se mají vykreslit, ze serveru</h2>

<p>Předchozí dva demonstrační příklady byly samozřejmě pro většinu použití
příliš umělé, protože vyžadovaly, aby hodnoty byly dopředu připraveny ve formě
statických dat, ke kterým má server přístup. Mnohdy však potřebujeme vykreslit
dynamicky vytvářené a/nebo počítané hodnoty čtené ze strany serveru a posílané
klientovi. Naši implementaci HTTP serveru tedy upravíme takovým způsobem, aby
po přístupu na vybraný <i>endpoint</i> vracel generovaná data,
resp.&nbsp;přesněji řečeno sadu x-ových a y-ových souřadnic bodů. V&nbsp;první
variantě se bude jednat o <i>endpoint</i> &bdquo;/data&ldquo;, který bude
obsluhován callback funkcí (či možná přesněji řečeno <i>handlerem</i>) nazvanou
<strong>dataHandler</strong>. Registrace handleru vypadá následovně:</p>

<pre>
http.HandleFunc("/data", dataHandler)
</pre>

<p>Implementace handleru je prozatím opět velmi jednoduchá &ndash; nastavíme
hlavičku HTTP odpovědi, kód HTTP odpovědi (zde konkrétně 200 OK) a v&nbsp;těle
odpovědi pošleme data ve formátu JSON:</p>

<pre>
func <strong>dataHandler</strong>(writer http.ResponseWriter, request *http.Request) {
        writer.Header().Set("Content-Type", "application/json")
        writer.WriteHeader(http.StatusOK)
        fmt.Fprintf(writer, `
{
    "x": [1, 2, 3, 4, 5],
    "y": [1, 2, 4, 8, 16]
}
        `)
}
</pre>

<p><a
href="https://github.com/tisnik/go-root/blob/master/article_51/plotly03.go">Úplný
zdrojový kód serveru</a> tedy může vypadat následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "log"
        "net/http"
)
&nbsp;
func <strong>dataHandler</strong>(writer http.ResponseWriter, request *http.Request) {
        writer.Header().Set("Content-Type", "application/json")
        writer.WriteHeader(http.StatusOK)
        fmt.Fprintf(writer, `
{
    "x": [1, 2, 3, 4, 5],
    "y": [1, 2, 4, 8, 16]
}
        `)
}
&nbsp;
func <strong>startHttpServer</strong>(address string) {
        log.Printf("Starting server on address %s", address)
        http.Handle("/", http.FileServer(http.Dir("plotly03/")))
        http.HandleFunc("/data", dataHandler)
        http.ListenAndServe(address, nil)
}
&nbsp;
func <strong>main</strong>() {
        startHttpServer(":8080")
}
</pre>

<p>Statická HTML stránka (taktéž posílaná serverem) se prakticky nezmění:</p>

<pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Plot #3&lt;/title&gt;
        &lt;meta name="Generator" content="golang"&gt;
        &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
        &lt;script src="plotly-latest.min.js" language="javascript"&gt;&lt;/script&gt;
        &lt;script src="jquery.min.js" language="javascript"&gt;&lt;/script&gt;
        &lt;script src="plot.js" language="javascript"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Plot #3&lt;/h1&gt;
        &lt;div id="graphElement" style="width:800px;height:600px;"&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Podobný zůstane i skript, který zahájí vykreslování, nesmíme jen zapomenout
uvést korektní adresu <i>endpointu</i>. Zde není k&nbsp;dalším změnám žádný
důvod, protože skript neví a ani nemusí vědět, že hodnoty nejsou získány ze
statického souboru, ale jsou generovány přímo serverem:</p>

<pre>
$(document).ready(function() {
    $.getJSON("/data",
        function (data) {
            var graphElement = $('#graphElement')[0];
            var opts = {
                margin: { t: 0}
            };
            Plotly.plot(graphElement, [data], opts);
        });
});
</pre>

<a href="https://www.root.cz/obrazek/401360/"><img src="https://i.iinfo.cz/images/472/plotly-5-prev.png" class="image-401360" alt="&#160;" width="323" height="270" /></a>
<p><i>Obrázek 6: Výsledek spuštění třetího demonstračního příkladu
používajícího knihovnu <strong>plotly</strong>.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Generování hodnot pro vykreslení přímo serverem</h2>

<p>Nic nám v&nbsp;této chvíli nebrání upravit zdrojový kód serveru takovým
způsobem, aby hodnoty, které se mají vykreslit, přímo generoval. Pro tuto
funkcionalitu je nutné provést několik úprav, zejména si připravit datovou
strukturu, jejíž obsah bude serializován (používá se též termín
<i>marshalling</i>, i když má poněkud odlišný význam) do formátu JSON, který
bude poslán klientovi:</p>

<pre>
type <strong>Points</strong> struct {
        X []int `json:"x"`
        Y []int `json:"y"`
}
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že musíme uvést i
příslušné jméno atributu v&nbsp;JSONu, protože prvky struktury musí být
v&nbsp;jazyce Go psány velkými písmeny (jinak budou při serializaci
ignorovány).</div></p>

<p>Pochopitelně se změní i obslužná rutina endpointu &bdquo;/data&ldquo;, a to
následujícím způsobem:</p>

<pre>
func <strong>dataHandler</strong>(writer http.ResponseWriter, request *http.Request) {
        var points Points
        points.X = []int{1, 2, 3, 4, 5}
        points.Y = []int{1, 2, 4, 8, 16}
&nbsp;
        writer.Header().Set("Content-Type", "application/json")
        writer.WriteHeader(http.StatusOK)
        json.NewEncoder(writer).Encode(points)
}
</pre>

<p>Úplný zdrojový kód takto upraveného HTTP serveru vypadá následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/json"
        "log"
        "net/http"
)
&nbsp;
type Points struct {
        X []int `json:"x"`
        Y []int `json:"y"`
}
&nbsp;
func <strong>dataHandler</strong>(writer http.ResponseWriter, request *http.Request) {
        var points Points
        points.X = []int{1, 2, 3, 4, 5}
        points.Y = []int{1, 2, 4, 8, 16}
&nbsp;
        writer.Header().Set("Content-Type", "application/json")
        writer.WriteHeader(http.StatusOK)
        json.NewEncoder(writer).Encode(points)
}
&nbsp;
func <strong>startHttpServer</strong>(address string) {
        log.Printf("Starting server on address %s", address)
        http.Handle("/", http.FileServer(http.Dir("plotly04/")))
        http.HandleFunc("/data", dataHandler)
        http.ListenAndServe(address, nil)
}
&nbsp;
func <strong>main</strong>() {
        startHttpServer(":8080")
}
</pre>

<p>Samotný skript spouštěný na straně klienta získá přes AJAX hodnoty, které se
mají vykreslit a použije tyto hodnoty při volání funkce
<strong>Plotly.plot</strong>:</p>

<pre>
$(document).ready(function() {
    $.getJSON("/data",
        function (data) {
            var graphElement = $('#graphElement')[0];
            var opts = {
                margin: { t: 0}
            };
            Plotly.plot(graphElement, [data], opts);
        });
});
</pre>

<a href="https://www.root.cz/obrazek/401361/"><img src="https://i.iinfo.cz/images/472/plotly-6-prev.png" class="image-401361" alt="&#160;" width="323" height="270" /></a>
<p><i>Obrázek 7: Výsledek tohoto příkladu je totožný s&nbsp;oběma příklady
předchozími.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výpočet hodnot na straně serveru</h2>

<p>Samotný HTTP server naprogramovaný v&nbsp;Go může sloužit i pro výpočet
hodnot, které se mají následně vykreslit v&nbsp;grafu. Tento přístup je ukázán
v&nbsp;dalším příkladu, který je postaven na příkladu předchozím (například se
používá totožná datová struktura <strong>Point</strong>). Rozdílná je však
implementace handleru, který poskytuje hodnoty pro vykreslení:</p>

<pre>
func <strong>dataHandler</strong>(writer http.ResponseWriter, request *http.Request) {
        points := makePoints(npoints)
&nbsp;
        writer.Header().Set("Content-Type", "application/json")
        writer.WriteHeader(http.StatusOK)
        json.NewEncoder(writer).Encode(points)
}
</pre>

<p>Vidíme, že se zde již nenaplňují dva řezy s&nbsp;hodnotami konstantami, ale
volá se jiná funkce, která tyto řezy inicializuje a naplní vhodnými daty.
Konkrétně se jedná o výpočet funkce <i>sinc</i>:</p>

<pre>
func <strong>makePoints</strong>(npoints uint) Points {
        var points Points
        points.X = make([]float64, npoints)
        points.Y = make([]float64, npoints)
        for i := uint(0); i &lt; npoints; i++ {
                t := float64(i) * periods * 2.0 * math.Pi / float64(npoints)
                points.X[i] = t
                // limita
                if t == 0.0 {
                        points.Y[i] = 1.0
                } else {
                        points.Y[i] = math.Sin(t) / t
                }
        }
        return points
}
</pre>

<p>Opět si pochopitelně ukážeme úplný zdrojový kód tohoto příkladu
(resp.&nbsp;jeho serverovou část):</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/json"
        "log"
        "math"
        "net/http"
)
&nbsp;
type <strong>Points</strong> struct {
        X []float64 `json:"x"`
        Y []float64 `json:"y"`
}
&nbsp;
const npoints = 100
const periods = 3
&nbsp;
func <strong>makePoints</strong>(npoints uint) Points {
        var points Points
        points.X = make([]float64, npoints)
        points.Y = make([]float64, npoints)
        for i := uint(0); i &lt; npoints; i++ {
                t := float64(i) * periods * 2.0 * math.Pi / float64(npoints)
                points.X[i] = t
                // limita
                if t == 0.0 {
                        points.Y[i] = 1.0
                } else {
                        points.Y[i] = math.Sin(t) / t
                }
        }
        return points
}
&nbsp;
func <strong>dataHandler</strong>(writer http.ResponseWriter, request *http.Request) {
        points := makePoints(npoints)
&nbsp;
        writer.Header().Set("Content-Type", "application/json")
        writer.WriteHeader(http.StatusOK)
        json.NewEncoder(writer).Encode(points)
}
&nbsp;
func <strong>startHttpServer</strong>(address string) {
        log.Printf("Starting server on address %s", address)
        http.Handle("/", http.FileServer(http.Dir("plotly05/")))
        http.HandleFunc("/data", dataHandler)
        http.ListenAndServe(address, nil)
}
&nbsp;
func <strong>main</strong>() {
        startHttpServer(":8080")
}
</pre>

<p><div class="rs-tip-major">Poznámka: část, která je spuštěna na klientovi, je
prakticky totožná s&nbsp;předchozími příklady a proto ji zde již nebudeme
uvádět.</div></p>

<a href="https://www.root.cz/obrazek/401362/"><img src="https://i.iinfo.cz/images/472/plotly-7-prev.png" class="image-401362" alt="&#160;" width="323" height="270" /></a>
<p><i>Obrázek 8: Graf se zobrazením hodnot, které byly vypočteny na straně
serveru.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Graf s&nbsp;průběhy několika funkcí, nastavení stylu vykreslování grafu</h2>

<p>V&nbsp;dalším demonstračním příkladu si ukážeme, jakým způsobem je možné do
jednoho grafu vykreslit několik funkcí. Podobně jako v&nbsp;předchozích
příkladech si nejprve ukážeme implementaci HTTP serveru. Ten nyní obsahuje
upravený výpočet funkce <i>sinc</i>, která je volitelně vykreslena se zvoleným
offsetem (ovšem pouze u úhlu, nikoli ve jmenovateli):</p>

<pre>
func <strong>makePoints</strong>(npoints uint, offset float64) Points {
        var points Points
        points.X = make([]float64, npoints)
        points.Y = make([]float64, npoints)
        for i := uint(0); i &lt; npoints; i++ {
                t := float64(i) * periods * 2.0 * math.Pi / float64(npoints)
                points.X[i] = t
                // limita
                if t == 0.0 {
                        points.Y[i] = 1.0
                } else {
                        points.Y[i] = math.Sin(t+offset) / t
                }
        }
        return points
}
</pre>

<p>Vytvořena je trojice handlerů, přičemž každý bude dodávat odlišné hodnoty.
Tyto handlery jsou zaregistrovány pro tři odlišné <i>endpointy</i>:</p>

<pre>
func <strong>series1Handler</strong>(writer http.ResponseWriter, request *http.Request) {
        points := makePoints(npoints, 0)
        writePoints(writer, points)
}
&nbsp;
func <strong>series2Handler</strong>(writer http.ResponseWriter, request *http.Request) {
        points := makePoints(npoints, npoints/2.0)
        writePoints(writer, points)
}
&nbsp;
func <strong>series3Handler</strong>(writer http.ResponseWriter, request *http.Request) {
        points := makePoints(npoints, -npoints/2.0)
        writePoints(writer, points)
}
</pre>

<p>Pro jistotu bude celá implementace serveru znovu vypsána:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/json"
        "log"
        "math"
        "net/http"
)
&nbsp;
type <strong>Points</strong> struct {
        X []float64 `json:"x"`
        Y []float64 `json:"y"`
}
&nbsp;
const npoints = 100
const periods = 2
&nbsp;
func <strong>makePoints</strong>(npoints uint, offset float64) Points {
        var points Points
        points.X = make([]float64, npoints)
        points.Y = make([]float64, npoints)
        for i := uint(0); i &lt; npoints; i++ {
                t := float64(i) * periods * 2.0 * math.Pi / float64(npoints)
                points.X[i] = t
                // limita
                if t == 0.0 {
                        points.Y[i] = 1.0
                } else {
                        points.Y[i] = math.Sin(t+offset) / t
                }
        }
        return points
}
&nbsp;
func <strong>writePoints</strong>(writer http.ResponseWriter, points Points) {
&nbsp;
        writer.Header().Set("Content-Type", "application/json")
        writer.WriteHeader(http.StatusOK)
        json.NewEncoder(writer).Encode(points)
}
&nbsp;
func <strong>series1Handler</strong>(writer http.ResponseWriter, request *http.Request) {
        points := makePoints(npoints, 0)
        writePoints(writer, points)
}
&nbsp;
func <strong>series2Handler</strong>(writer http.ResponseWriter, request *http.Request) {
        points := makePoints(npoints, npoints/2.0)
        writePoints(writer, points)
}
&nbsp;
func <strong>series3Handler</strong>(writer http.ResponseWriter, request *http.Request) {
        points := makePoints(npoints, -npoints/2.0)
        writePoints(writer, points)
}
&nbsp;
func <strong>startHttpServer</strong>(address string) {
        log.Printf("Starting server on address %s", address)
        http.Handle("/", http.FileServer(http.Dir("plotly06/")))
        http.HandleFunc("/series1", series1Handler)
        http.HandleFunc("/series2", series2Handler)
        http.HandleFunc("/series3", series3Handler)
        http.ListenAndServe(address, nil)
}
&nbsp;
func <strong>main</strong>() {
        startHttpServer(":8080")
}
</pre>

<p>Změní se i skript spouštěný na straně klienta, protože je nutné načíst
všechny tři série hodnot. Pro jednoduchost je provádí synchronní čtení dat
(s&nbsp;čekáním na dokončení přenosu), což nemusí být ve všech aplikacích
ideální řešení. Samotné vykreslení obstará jediné volání funkce
<strong>Plotly.plot</strong>:</p>

<pre>
$(document).ready(function() {
    $.ajaxSetup({
        async: false
    });
&nbsp;
    var series1, series2, series3;
&nbsp;
    $.getJSON("/series1",
        function (data) {
            series1 = data;
            console.log(series1);
        });
    $.getJSON("/series2",
        function (data) {
            series2 = data;
            console.log(series2);
        });
    $.getJSON("/series3",
        function (data) {
            series3 = data;
            console.log(series3);
        });
    var graphElement = $('#graphElement')[0];
    var opts = {
        margin: { t: 0}
    };
    Plotly.plot(graphElement, [series1, series2, series3], opts);
});
</pre>

<a href="https://www.root.cz/obrazek/401363/"><img src="https://i.iinfo.cz/images/472/plotly-8-prev.png" class="image-401363" alt="&#160;" width="323" height="270" /></a>
<p><i>Obrázek 9: Graf se třemi průběhy.</i></p>

<a href="https://www.root.cz/obrazek/401364/"><img src="https://i.iinfo.cz/images/472/plotly-9-prev.png" class="image-401364" alt="&#160;" width="323" height="270" /></a>
<p><i>Obrázek 10: Zobrazení podrobnějších informací z&nbsp;vybrané oblasti
grafu.</i></p>

<a href="https://www.root.cz/obrazek/401365/"><img src="https://i.iinfo.cz/images/472/plotly-10-prev.png" class="image-401365" alt="&#160;" width="323" height="270" /></a>
<p><i>Obrázek 11: Zobrazení podrobnějších informací z&nbsp;vybrané oblasti
grafu.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Výpočet hodnot, které se mají vykreslit, na základě zadaných parametrů</h2>

<p>V&nbsp;dalším příkladu je již ukázáno praktičtější použití technik,
s&nbsp;nimiž jsme se seznámili v&nbsp;rámci předchozích kapitol. Zde HTTP
server slouží nejenom k&nbsp;poskytování potřebných hodnot pro graf, ale i pro
jejich výpočet (jako v&nbsp;předchozím příkladu), přičemž parametry pro výpočet
jsou získány z&nbsp;parametrů předaných v&nbsp;požadavku (<i>request</i>):</p>

<pre>
offsetStr := request.URL.Query().Get("offset")
offset, err := strconv.ParseFloat(offsetStr, 64)
if err != nil {
        writer.WriteHeader(http.StatusBadRequest)
        return
}
points := makePoints(npoints, offset)
writePoints(writer, points)
</pre>

<p>Úplný kód serveru:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/json"
        "log"
        "math"
        "net/http"
        "strconv"
)
&nbsp;
type <strong>Points</strong> struct {
        X []float64 `json:"x"`
        Y []float64 `json:"y"`
}
&nbsp;
const npoints = 100
const periods = 2
&nbsp;
func <strong>makePoints</strong>(npoints uint, offset float64) Points {
        var points Points
        points.X = make([]float64, npoints)
        points.Y = make([]float64, npoints)
        for i := uint(0); i &lt; npoints; i++ {
                t := float64(i) * periods * 2.0 * math.Pi / float64(npoints)
                points.X[i] = t
                // limita
                if t == 0.0 {
                        points.Y[i] = 1.0
                } else {
                        points.Y[i] = math.Sin(t+offset) / t
                }
        }
        return points
}
&nbsp;
func <strong>writePoints</strong>(writer http.ResponseWriter, points Points) {
        writer.Header().Set("Content-Type", "application/json")
        writer.WriteHeader(http.StatusOK)
        json.NewEncoder(writer).Encode(points)
}
&nbsp;
func <strong>seriesHandler</strong>(writer http.ResponseWriter, request *http.Request) {
        offsetStr := request.URL.Query().Get("offset")
        offset, err := strconv.ParseFloat(offsetStr, 64)
        if err != nil {
                writer.WriteHeader(http.StatusBadRequest)
                return
        }
        points := makePoints(npoints, offset)
        writePoints(writer, points)
}
&nbsp;
func <strong>startHttpServer</strong>(address string) {
        log.Printf("Starting server on address %s", address)
        http.Handle("/", http.FileServer(http.Dir("plotly07/")))
        http.HandleFunc("/series", seriesHandler)
        http.ListenAndServe(address, nil)
}
&nbsp;
func <strong>main</strong>() {
        startHttpServer(":8080")
}
</pre>

<p>Parametry ovlivňující průběh vykreslované funkce jsou vytvořeny na straně
klienta, zde (poněkud uměle) přímo ve funkci zavolané po inicializaci
stránky:</p>

<pre>
$(document).ready(function() {
    $.ajaxSetup({
        async: false
    });
&nbsp;
    var series1, series2, series3;
&nbsp;
    $.getJSON(<strong>"/series?offset=0"</strong>,
        function (data) {
            series1 = data;
            series1.mode = 'lines'
        });
    $.getJSON(<strong>"/series?offset=-3.14"</strong>,
        function (data) {
            series2 = data;
            series2.mode = 'markers'
        });
    $.getJSON(<strong>"/series?offset=0.25"</strong>,
        function (data) {
            series3 = data;
            series3.mode = 'lines+markers'
        });
    var graphElement = $('#graphElement')[0];
    var opts = {
        margin: { t: 0}
    };
    Plotly.plot(graphElement, [series1, series2, series3], opts);
});
</pre>

<p><div class="rs-tip-major">Poznámka: samozřejmě je možné v&nbsp;případě
potřeby tyto parametry nastavovat na webové stránce přes formulářové prvky
atd.</div></p>

<a href="https://www.root.cz/obrazek/401366/"><img src="https://i.iinfo.cz/images/472/plotly-11-prev.png" class="image-401366" alt="&#160;" width="323" height="270" /></a>
<p><i>Obrázek 12: Průběhy tří funkcí vykreslené příkladem.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Sloupcový graf</h2>

<p>Dalším často používaným typem grafu je sloupcový graf. Ten lze vykreslit
jednoduše &ndash; postačuje u vybrané sekvence hodnot nastavit atribut
<strong>type</strong> na hodnotu (řetězec) &bdquo;bar&ldquo; tak, jak je to
ukázáno v&nbsp;následujícím skriptu:</p>

<pre>
$(document).ready(function() {
    $.ajaxSetup({
        async: false
    });
&nbsp;
    var series1, series2;
&nbsp;
    $.getJSON("/series?offset=-3.14",
        function (data) {
            series1 = data;
            series1.type = 'scatter';
        });
    $.getJSON("/series?offset=0",
        function (data) {
            series2 = data;
            <strong>series2.type = 'bar'</strong>;
        });
    var graphElement = $('#graphElement')[0];
    var opts = {
        margin: { t: 0}
    };
    Plotly.plot(graphElement, [series1, series2], opts);
});
</pre>

<p><div class="rs-tip-major">Poznámka: ostatní součásti příkladu (HTTP server
atd.) jsou totožné s&nbsp;příkladem předchozím.</div></p>

<a href="https://www.root.cz/obrazek/401367/"><img src="https://i.iinfo.cz/images/472/plotly-12-prev.png" class="image-401367" alt="&#160;" width="323" height="270" /></a>
<p><i>Obrázek 13: Kombinace sloupcového grafu a grafu s&nbsp;lomenou
čarou.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Koláčový graf</h2>

<p>Třetím typem grafu, který zná prakticky každý, je koláčový graf. Na straně
klienta, konkrétně v&nbsp;skriptu <strong>plot.js</strong>, je vytvoření
koláčového grafu snadné, ostatně se postačuje podívat na zdrojový kód:</p>

<pre>
$(document).ready(function() {
    $.getJSON("/values",
        function (data) {
            var graphElement = $('#graphElement')[0];
            var pie = {};
            pie.values = data;
            pie.labels = ['Go', 'Rust', 'C', 'Java'];
            pie.type = 'pie';
            var opts = {
                margin: { t: 0}
            };
            Plotly.plot(graphElement, [pie], opts);
        });
});
</pre>

<p>Výše uvedený skript očekává, že ze serveru získá čtveřici hodnot, které
ovlivňují relativní velikost kruhových výseků na koláčovém grafu. Tyto hodnoty
jsou poskytovány HTTP serverem, zde konkrétně v&nbsp;handleru pojmenovaném
<strong>valuesHandler</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/json"
        "log"
        "net/http"
)
&nbsp;
func <strong>valuesHandler</strong>(writer http.ResponseWriter, request *http.Request) {
        values := []float64{20, 30, 40, 50}
        writer.Header().Set("Content-Type", "application/json")
        writer.WriteHeader(http.StatusOK)
        json.NewEncoder(writer).Encode(values)
}
&nbsp;
func <strong>startHttpServer</strong>(address string) {
        log.Printf("Starting server on address %s", address)
        http.Handle("/", http.FileServer(http.Dir("plotly09/")))
        http.HandleFunc("/values", valuesHandler)
        http.ListenAndServe(address, nil)
}
&nbsp;
func <strong>main</strong>() {
        startHttpServer(":8080")
}
</pre>

<a href="https://www.root.cz/obrazek/401368/"><img src="https://i.iinfo.cz/images/472/plotly-13-prev.png" class="image-401368" alt="&#160;" width="323" height="270" /></a>
<p><i>Obrázek 14: Koláčový graf.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Úpravy vzhledu koláčového grafu</h2>

<p>Tato kapitola bude velmi stručná, protože si v&nbsp;ní pouze ukážeme, jak
lze změnit vzhled koláčového grafu, konkrétně změnit kruhové výseče na části
prstence. Vzhled grafu se řídí atributem <strong>hole</strong> udávajícím poměr
vnitřního a vnějšího poloměru prstence:</p>

<pre>
$(document).ready(function() {
    $.getJSON("/values",
        function (data) {
            var graphElement = $('#graphElement')[0];
            var pie = {};
            pie.values = data;
            pie.labels = ['Go', 'Rust', 'C', 'Java'];
            pie.type = 'pie';
            <strong>pie.hole = 0.4;</strong>
            var opts = {
                margin: { t: 0}
            };
            Plotly.plot(graphElement, [pie], opts);
        });
});
</pre>

<a href="https://www.root.cz/obrazek/401369/"><img src="https://i.iinfo.cz/images/472/plotly-14-prev.png" class="image-401369" alt="&#160;" width="323" height="270" /></a>
<p><i>Obrázek 15: Koláčový graf s&nbsp;modifikovaným vzhledem.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Knihovna Chart.js</h2>

<p>Druhou knihovnou určenou pro vykreslení grafů na straně klienta, s&nbsp;níž
se dnes alespoň ve stručnosti seznámíme, je knihovna nazvaná <a
href="https://www.chartjs.org/">Chart.js</a>. Kromě klasických grafů (bodový
graf, graf s&nbsp;lomenou čarou, sloupcový graf, koláčový graf) je možné
vytvořit i animované grafy, což je však téma svým rozsahem určené pro
samostatný článek. Dnes si ukážeme jednoduchý příklad, který se opět bude
skládat z&nbsp;HTTP serveru a klientské části. Nejdříve si ukažme HTTP server.
V&nbsp;něm se (opět) počítají hodnoty, které se mají vykreslit, ve funkci
<strong>makePoints</strong>:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "encoding/json"
        "log"
        "math"
        "net/http"
)
&nbsp;
type <strong>Points</strong> struct {
        X []float64 `json:"x"`
        Y []float64 `json:"y"`
}
&nbsp;
const npoints = 40
const periods = 3
&nbsp;
func <strong>makePoints</strong>(npoints uint) Points {
        var points Points
        points.X = make([]float64, npoints)
        points.Y = make([]float64, npoints)
        for i := uint(0); i &lt; npoints; i++ {
                t := float64(i) * periods * 2.0 * math.Pi / float64(npoints)
                points.X[i] = t
                // limita
                if t == 0.0 {
                        points.Y[i] = 1.0
                } else {
                        points.Y[i] = math.Sin(t) / t
                }
        }
        return points
}
&nbsp;
func <strong>valuesHandler</strong>(writer http.ResponseWriter, request *http.Request) {
        points := makePoints(npoints)

        writer.Header().Set("Content-Type", "application/json")
        writer.WriteHeader(http.StatusOK)
        json.NewEncoder(writer).Encode(points)
}
&nbsp;
func <strong>startHttpServer</strong>(address string) {
        log.Printf("Starting server on address %s", address)
        http.Handle("/", http.FileServer(http.Dir("chart-js/")))
        http.HandleFunc("/values", valuesHandler)
        http.ListenAndServe(address, nil)
}
&nbsp;
func <strong>main</strong>() {
        startHttpServer(":8080")
}
</pre>

<p><div class="rs-tip-major">Poznámka: hodnoty jsou opět, jako
v&nbsp;předchozích příkladech, přenášeny ve struktuře <strong>Points</strong>
s&nbsp;dvojicí atributů <strong>X</strong> a <strong>Y</strong>:</div></p>

<pre>
type <strong>Points</strong> struct {
        X []float64 `json:"x"`
        Y []float64 `json:"y"`
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Jednoduchý příklad používající knihovnu Chart.js</h2>

<p>Následuje statická HTML stránka poskytovaná HTTP serverem. V&nbsp;ní je
vytvořen element typu <i>canvas</i>:</p>

<pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Plot #11 - chart.js&lt;/title&gt;
        &lt;meta name="Generator" content="golang"&gt;
        &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
        &lt;script src="Chart.min.js" language="javascript"&gt;&lt;/script&gt;
        &lt;script src="jquery.min.js" language="javascript"&gt;&lt;/script&gt;
        &lt;script src="plot.js" language="javascript"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Plot #11 - chart.js&lt;/h1&gt;
        &lt;canvas id="graphElement" width="600px" height="600px"&gt;&lt;/canvas&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>O samotné vykreslení se postará skript <strong>plot.js</strong> s&nbsp;tímto
obsahem:</p>

<pre>
$(document).ready(function() {
    $.getJSON("/values",
        function (data) {
            var graphElement = $('#graphElement')[0];
            var context = graphElement.getContext('2d');
            var myChart = new Chart(context, {
                type: 'bar',
                data: {
                    labels: data.x,
                    datasets: [{
                        label: '# of Votes',
                        data: data.y,
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    },
                    maintainAspectRatio: false,
                }
            });
        });
});
</pre>

<a href="https://www.root.cz/obrazek/401534/"><img src="https://i.iinfo.cz/images/148/charjs-1-prev.png" class="image-401534" alt="&#160;" width="370" height="178" /></a>
<p><i>Obrázek 16: Graf vykreslený knihovnou Chart.js.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně pět až šest megabajtů), můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>plot01.go</td><td>prázdný graf obsahující pouze legendu a osy</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/plot01.go">https://github.com/tisnik/go-root/blob/master/article_50/plot01.go</a></td></tr>
<tr><td> 2</td><td>plot02.go</td><td>graf s&nbsp;naměřenými hodnotami vykreslený knihovnou <strong>plot</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/plot02.go">https://github.com/tisnik/go-root/blob/master/article_50/plot02.go</a></td></tr>
<tr><td> 3</td><td>plot03.go</td><td>změna popisků na osách</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/plot03.go">https://github.com/tisnik/go-root/blob/master/article_50/plot03.go</a></td></tr>
<tr><td> 4</td><td>plot04.go</td><td>zobrazení průběhů dvou funkcí v&nbsp;jediném grafu</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_50/plot04.go">https://github.com/tisnik/go-root/blob/master/article_50/plot04.go</a></td></tr>
<tr><td> 5</td><td>plot05.go</td><td>další ukázka možností knihovny <i>plot</i> z&nbsp;projektu <i>Gonum</i></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_51/plot05.go">https://github.com/tisnik/go-root/blob/master/article_51/plot05.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>setup.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_51/setup.go">https://github.com/tisnik/go-root/blob/master/article_51/setup.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>plotly01.go</td><td>server prvního příkladu používajícího knihovnu Plotly</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_51/plotly01.go">https://github.com/tisnik/go-root/blob/master/article_51/plotly01.go</a></td></tr>
<tr><td> 8</td><td>plotly02.go</td><td>server druhého příkladu používajícího knihovnu Plotly</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_51/plotly02.go">https://github.com/tisnik/go-root/blob/master/article_51/plotly02.go</a></td></tr>
<tr><td> 9</td><td>plotly03.go</td><td>server třetího příkladu používajícího knihovnu Plotly</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_51/plotly03.go">https://github.com/tisnik/go-root/blob/master/article_51/plotly03.go</a></td></tr>
<tr><td>10</td><td>plotly04.go</td><td>server čtvrtého příkladu používajícího knihovnu Plotly</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_51/plotly04.go">https://github.com/tisnik/go-root/blob/master/article_51/plotly04.go</a></td></tr>
<tr><td>11</td><td>plotly05.go</td><td>server pátého příkladu používajícího knihovnu Plotly</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_51/plotly05.go">https://github.com/tisnik/go-root/blob/master/article_51/plotly05.go</a></td></tr>
<tr><td>12</td><td>plotly06.go</td><td>server šestého příkladu používajícího knihovnu Plotly</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_51/plotly06.go">https://github.com/tisnik/go-root/blob/master/article_51/plotly06.go</a></td></tr>
<tr><td>13</td><td>plotly07.go</td><td>server sedmého příkladu používajícího knihovnu Plotly</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_51/plotly07.go">https://github.com/tisnik/go-root/blob/master/article_51/plotly07.go</a></td></tr>
<tr><td>14</td><td>plotly08.go</td><td>server osmého příkladu používajícího knihovnu Plotly</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_51/plotly08.go">https://github.com/tisnik/go-root/blob/master/article_51/plotly08.go</a></td></tr>
<tr><td>15</td><td>plotly09.go</td><td>server devátého příkladu používajícího knihovnu Plotly</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_51/plotly09.go">https://github.com/tisnik/go-root/blob/master/article_51/plotly09.go</a></td></tr>
<tr><td>16</td><td>plotly10.go</td><td>server desátého příkladu používajícího knihovnu Plotly</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_51/plotly10.go">https://github.com/tisnik/go-root/blob/master/article_51/plotly10.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>chart_js.go</td><td>server příkladu používajícího knihovnu Chart.js</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_51/chart_js.go">https://github.com/tisnik/go-root/blob/master/article_51/chart_js.go</a></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: první čtyři příklady jsou uvedeny jen
pro úplnost, protože jsme se jejich podrobnějším popisem zabývali
v&nbsp;předchozí části seriálu o programovacím jazyce Go.</div></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránka projektu plotly<br />
<a href="https://plot.ly/">https://plot.ly/</a>
</li>

<li>Plotly JavaScript Open Source Graphing Library<br />
<a href="https://plot.ly/javascript/">https://plot.ly/javascript/</a>
</li>

<li>Domain coloring<br />
<a href="https://en.wikipedia.org/wiki/Domain_coloring">https://en.wikipedia.org/wiki/Domain_coloring</a>
</li>

<li>Michael Fogleman's projects<br />
<a href="https://www.michaelfogleman.com/projects/tagged/graphics/">https://www.michaelfogleman.com/projects/tagged/graphics/</a>
</li>

<li>Color Graphs of Complex Functions<br />
<a href="https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html">https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html</a>
</li>

<li>A Gallery of Complex Functions<br />
<a href="http://wismuth.com/complex/gallery.html">http://wismuth.com/complex/gallery.html</a>
</li>

<li>package glot<br />
<a href="https://godoc.org/github.com/Arafatk/glot">https://godoc.org/github.com/Arafatk/glot</a>
</li>

<li>Gnuplotting: Output terminals<br />
<a href="http://www.gnuplotting.org/output-terminals/">http://www.gnuplotting.org/output-terminals/</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1">https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://blog.gopheracademy.com/advent-2018/introducing-glot/">https://blog.gopheracademy.com/advent-2018/introducing-glot/</a>
</li>

<li>Glot is a plotting library for Golang built on top of gnuplot<br />
<a href="https://github.com/Arafatk/glot">https://github.com/Arafatk/glot</a>
</li>

<li>Example plots (gonum/plot)<br />
<a href="https://github.com/gonum/plot/wiki/Example-plots">https://github.com/gonum/plot/wiki/Example-plots</a>
</li>

<li>A repository for plotting and visualizing data (gonum/plot)<br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>golang library to make https://chartjs.org/ plots<br />
<a href="https://github.com/brentp/go-chartjs">https://github.com/brentp/go-chartjs</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>The Gonum Numerical Computing Package<br />
<a href="https://www.gonum.org/post/introtogonum/">https://www.gonum.org/post/introtogonum/</a>
</li>

<li>Gomacro na GitHubu<br />
<a href="https://github.com/cosmos72/gomacro">https://github.com/cosmos72/gomacro</a>
</li>

<li>gophernotes - Use Go in Jupyter notebooks and nteract<br />
<a href="https://github.com/gopherdata/gophernotes">https://github.com/gopherdata/gophernotes</a>
</li>

<li>gonum<br />
<a href="https://github.com/gonum">https://github.com/gonum</a>
</li>

<li>go-gota/gota -  DataFrames and data wrangling in Go (Golang)<br />
<a href="https://porter.io/github.com/go-gota/gota">https://porter.io/github.com/go-gota/gota</a>
</li>

<li>A repository for plotting and visualizing data <br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>Gonum Numerical Packages<br />
<a href="https://www.gonum.org/">https://www.gonum.org/</a>
</li>

<li>Stránky projektu MinIO<br />
<a href="https://min.io/">https://min.io/</a>
</li>

<li>MinIO Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-quickstart-guide.html">https://docs.min.io/docs/minio-quickstart-guide.html</a>
</li>

<li>MinIO Go Client API Reference<br />
<a href="https://docs.min.io/docs/golang-client-api-reference">https://docs.min.io/docs/golang-client-api-reference</a>
</li>

<li>MinIO Python Client API Reference<br />
<a href="https://docs.min.io/docs/python-client-api-reference.html">https://docs.min.io/docs/python-client-api-reference.html</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>MinIO Client Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a>
</li>

<li>Analýza kvality zdrojových kódů Minia<br />
<a href="https://goreportcard.com/report/github.com/minio/minio">https://goreportcard.com/report/github.com/minio/minio</a>
</li>

<li>This is MinIO<br />
<a href="https://www.youtube.com/watch?v=vF0lQh0XOCs">https://www.youtube.com/watch?v=vF0lQh0XOCs</a>
</li>

<li>Running MinIO Standalone<br />
<a href="https://www.youtube.com/watch?v=dIQsPCHvHoM">https://www.youtube.com/watch?v=dIQsPCHvHoM</a>
</li>

<li>"Amazon S3 Compatible Storage in Kubernetes" - Rob Girard, Principal Tech Marketing Engineer, Minio<br />
<a href="https://www.youtube.com/watch?v=wlpn8K0jJ4U">https://www.youtube.com/watch?v=wlpn8K0jJ4U</a>
</li>

<li>Ginkgo<br />
<a href="http://onsi.github.io/ginkgo/">http://onsi.github.io/ginkgo/</a>
</li>

<li>Gomega<br />
<a href="https://onsi.github.io/gomega/">https://onsi.github.io/gomega/</a>
</li>

<li>Ginkgo's Preferred Matcher Library na GitHubu<br />
<a href="https://github.com/onsi/gomega/">https://github.com/onsi/gomega/</a>
</li>

<li>Provided Matchers<br />
<a href="http://onsi.github.io/gomega/#provided-matchers">http://onsi.github.io/gomega/#provided-matchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku goexpect<br />
<a href="https://godoc.org/github.com/google/goexpect">https://godoc.org/github.com/google/goexpect</a>
</li>

<li>Balíček goexpect<br />
<a href="https://github.com/google/goexpect">https://github.com/google/goexpect</a>
</li>

<li>Balíček go-expect<br />
<a href="https://github.com/Netflix/go-expect">https://github.com/Netflix/go-expect</a>
</li>

<li>Balíček gexpect<br />
<a href="https://github.com/ThomasRooney/gexpect">https://github.com/ThomasRooney/gexpect</a>
</li>

<li>Expect (originál naprogramovaný v&nbsp;TCL)<br />
<a href="https://core.tcl-lang.org/expect/index">https://core.tcl-lang.org/expect/index</a>
</li>

<li>Expect (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Expect">https://en.wikipedia.org/wiki/Expect</a>
</li>

<li>Pexpect<br />
<a href="https://pexpect.readthedocs.io/en/stable/">https://pexpect.readthedocs.io/en/stable/</a>
</li>

<li>Golang SSH Client: Multiple Commands, Crypto &amp; Goexpect Examples<br />
<a href="http://networkbit.ch/golang-ssh-client/">http://networkbit.ch/golang-ssh-client/</a>
</li>

<li>goblin na GitHubu<br />
<a href="https://github.com/franela/goblin">https://github.com/franela/goblin</a>
</li>

<li>Mocha framework<br />
<a href="https://mochajs.org/">https://mochajs.org/</a>
</li>

<li>frisby na GitHubu<br />
<a href="https://github.com/verdverm/frisby">https://github.com/verdverm/frisby</a>
</li>

<li>package frisby<br />
<a href="https://godoc.org/github.com/verdverm/frisby">https://godoc.org/github.com/verdverm/frisby</a>
</li>

<li>Frisby alternatives and similar packages (generováno)<br />
<a href="https://go.libhunt.com/frisby-alternatives">https://go.libhunt.com/frisby-alternatives</a>
</li>

<li>Cucumber for golang<br />
<a href="https://github.com/DATA-DOG/godog">https://github.com/DATA-DOG/godog</a>
</li>

<li>How to Use Godog for Behavior-driven Development in Go<br />
<a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go</a>
</li>

<li>Comparative Analysis Of GoLang Testing Frameworks<br />
<a href="https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks">https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks</a>
</li>

<li>A Quick Guide to Testing in Golang<br />
<a href="https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/">https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/</a>
</li>

<li>Tom's Obvious, Minimal Language.<br />
<a href="https://github.com/toml-lang/toml">https://github.com/toml-lang/toml</a>
</li>

<li>xml.org<br />
<a href="http://www.xml.org/">http://www.xml.org/</a>
</li>

<li>Soubory .properties<br />
<a href="https://en.wikipedia.org/wiki/.properties">https://en.wikipedia.org/wiki/.properties</a>
</li>

<li>Soubory INI<br />
<a href="https://en.wikipedia.org/wiki/INI_file">https://en.wikipedia.org/wiki/INI_file</a>
</li>

<li>JSON to YAML<br />
<a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a>
</li>

<li>Data Format Converter<br />
<a href="https://toolkit.site/format.html">https://toolkit.site/format.html</a>
</li>

<li>Viper na GitHubu<br />
<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>
</li>

<li>GoDotEnv na GitHubu<br />
<a href="https://github.com/joho/godotenv">https://github.com/joho/godotenv</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

