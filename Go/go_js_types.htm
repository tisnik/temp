<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">2. Typový systém programovacího jazyka JavaScript</a></p>
<p><a href="#k03">3. Typový systém programovacího jazyky Go</a></p>
<p><a href="#k04">4. Zavolání funkce naprogramované v&nbsp;Go z&nbsp;JavaScriptu</a></p>
<p><a href="#k05">5. První demonstrační příklad: zavolání Go funkce bez předání argumentů</a></p>
<p><a href="#k06">6. Typ argumentů funkce volané z&nbsp;JavaScriptu</a></p>
<p><a href="#k07">7. Druhý demonstrační příklad: výpis všech argumentů předaných funkci volané z&nbsp;JavaScriptu</a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Typový systém programovacího jazyka JavaScript</h2>

<p>Nejprve se, prozatím ve stručnosti, podívejme na typový systém
programovacího jazyka Go. Najdeme v&nbsp;něm sedm primitivních datových typů a
dále typ <strong>Object</strong>:</p>

<table>
<tr><th>#</th><th>Datový typ</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>Boolean</td><td>datový typ se dvěma možnými hodnotami <strong>true</strong> a <strong>false</strong></td></tr>
<tr><td>2</td><td>String</td><td>sekvence znaků (jediný znak je taktéž považován za řetězec)</td></tr>
<tr><td>3</td><td>Number</td><td>reprezentuje hodnoty typu <i>double</i> podle IEEE 754; řada celých čísel je tedy omezena mezní hodnotou 2<sup>53</sup>-1 (vlastně šířkou mantisy, i když skutečnost je nepatrně složitější, dtto pro zápornou mezní hodnotu)</td></tr>
<tr><td>4</td><td>Bigint</td><td>speciální typ celočíselných numerických hodnot používaných v&nbsp;případě, že se ukládají hodnoty větší než 2<sup>53</sup>-1</td> (totéž platí i pro zápornou mezní hodnotu).</tr>
<tr><td>5</td><td>Null</td><td>typ s&nbsp;jedinou hodnotou <strong>null</strong></td></tr>
<tr><td>6</td><td>Undefined</td><td>specialita JavaScriptu (a bolehlav), představuje ještě nepřiřazenou hodnotu (pozor: rozdílné od Null)</td></tr>
<tr><td>7</td><td>Symbol</td><td>unikátní identifikátor</td></tr>
<tr><td>8</td><td>Object</td><td>objekty (je to na první pohled zvláštní, ale sem spadají například i funkce)</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: pole a slovníky (asociativní pole)
v&nbsp;této hierarchii spadají do poslední skupiny &ndash; jedná se tedy o
objekty.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Typový systém programovacího jazyky Go</h2>

<p>Typový systém programovacího jazyka Go se od JavaScriptu poměrně značně
odlišuje, což je ostatně patrné již při pohledu na počet dostupných
standardních typů a například na striktní rozdělení celočíselných datových typů
od numerických typů s&nbsp;plovoucí řádovou čárkou (<i>floating point</i>).
Celou hierarchii typového systému programovacího jazyka Go, která obsahuje
všechny v&nbsp;současnosti podporované datové typy i jejich základní vztahy, si
můžeme vizualizovat následujícím způsobem:</p>

<ul>
    <li>Jednoduché datové typy
        <ul>
            <li>Ordinální
                <ul>
                    <li>Pravdivostní typ (<i>boolean</i>)</li>
                    <li>Celočíselné typy (<i>integer</i>)</li>
                    <li>Kód znaku v&nbsp;Unicode (<i>rune</i>) jako speciální případ celočíselného typu</li>
                </ul>
                </li>
                <li>Neordinální
                <ul>
                    <li>Hodnoty s&nbsp;plovoucí řádovou čárkou (<i>float</i>)</li>
                    <li>Komplexní čísla (<i>complex</i>)</li>
                </ul>
            </li>
        </ul>
    </li>
    <li>Složené datové typy
        <ul>
            <li>Řetězce</a> (<i>string</i>)</li>
            <li>Pole</a> (<i>array</i>)</li>
            <li>Řezy</a> (<i>slice</i>)</li>
            <li>Mapy (<i>map</i>)</li>
            <li>Záznamy (<i>struct</i>)</li>
        </ul>
    </li>
    <li>Zvláštní datové typy
        <ul>
            <li>Ukazatel (<i>pointer</i>)</li>
            <li>Funkce (<i>function</i>) &ndash; ano, to je taktéž plnohodnotný datový typ</li>
            <li>Rozhraní (<i>interface</i>)</li>
            <li>Kanál (<i>channel</i>)</li>
        </ul>
    </li>
</ul>

<p><div class="rs-tip-major">Poznámka: k&nbsp;tomu musíme připočítat podporu
pro generické datové typy, které jsme si popsali v&nbsp;článku <a
href="https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-18-genericke-datove-typy/">Dlouho
očekávaná novinka v Go 1.18 – generické datové typy </a> a kterými se
v&nbsp;dnešním článku již nebudeme zabývat.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Zavolání funkce naprogramované v&nbsp;Go z&nbsp;JavaScriptu</h2>

<p>Již <a
href="https://www.root.cz/clanky/gopherjs-transprekladac-z-jazyka-go-do-javascriptu/">v&nbsp;předchozím
článku</a> jsme si ukázali, jakým způsobem je možné z&nbsp;JavaScriptu zavolat
funkci naprogramovanou v&nbsp;jazyce Go (s&nbsp;jejím následným transpřekladem
do JavaScriptu či do WebAssembly). Takové funkci se předává argument
<strong>this</strong> (lze tedy realizovat volání metody) a dále řez
libovolných JavaScriptových hodnot, přesněji řečeno hodnot, které jsou obaleny
do typu <strong>syscall/js.Value</strong> (což si vysvětlíme v&nbsp;navazující
textu). Taková funkce navíc může vracet libovolnou hodnotu, protože jméno
<strong>any</strong> je typ odpovídající prázdnému rozhraní
(<strong>interface{}</strong>):</p>

<pre>
<i>// funkce, která se bude z JavaScriptu tak, jakoby</i>
<i>// se jednalo o nativní JavaScriptovou funkci</i>
func MojeFunkce(this js.Value, args []js.Value) any {
&nbsp;
        <i>// je nutné vrátit nějakou hodnotu</i>
        return nil
}
</pre>

<p>Tuto funkci je nutné zaregistrovat tak, aby byla viditelná
z&nbsp;JavaScriptového virtuálního stroje. Přitom lze specifikovat jméno funkce
z&nbsp;pohledu JavaScriptu (může být odlišné od jména funkce v&nbsp;Go):</p>

<pre>
js.Global().Set("jmenoFukce", js.FuncOf(PrintHello))
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. První demonstrační příklad: zavolání Go funkce bez předání argumentů</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázáno, jak lze
z&nbsp;JavaScriptu zavolat funkci naprogramovanou v&nbsp;Go a následně
transpřeloženou do JavaScriptu nebo do WebAssembly. Této funkci prozatím
nepředáváme žádné argumenty a funkce nevrací žádnou &bdquo;rozumnou&ldquo;
hodnotu, takže se jedná o ten nejjednodušší možný případ:</p>

<pre>
<i>// Technologie WebAssembly</i>
<i>//</i>
<i>// - rozhraní mezi jazyky Go a JavaScript</i>
&nbsp;
<strong>package</strong> main
&nbsp;
import (
        "fmt"
        "syscall/js"
)
&nbsp;
<i>// funkce, která se bude volat z HTML stránky, jakoby</i>
<i>// se jednalo o JavaScriptovou funkci</i>
<strong>func</strong> PrintHello(this js.Value, args []js.Value) any {
        fmt.Println("function PrintHello called")
&nbsp;
        <i>// je nutné vrátit nějakou hodnotu</i>
        <strong>return</strong> nil
}
&nbsp;
<strong>func</strong> main() {
        fmt.Println("started")
&nbsp;
        c := make(chan bool)
&nbsp;
        <i>// export funkce PrintHello tak, aby byla volatelná</i>
        <i>// z JavaScriptu</i>
        js.Global().Set("printHello", js.FuncOf(PrintHello))
&nbsp;
        <i>// realizace nekonečného čekání</i>
        &lt;-c
&nbsp;
        fmt.Println("finished")
}
</pre>

<p>Tato funkce je do virtuálního stroje JavaScriptu zaregistrována pod jménem
&bdquo;printHello&ldquo; a pod tímto jménem je i zavolána:</p>

<pre>
&lt;!doctype html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Function call: without arguments&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1 id="header"&gt;Function call: without arguments&lt;/h2&gt;
        &lt;script src="func_call_no_arguments.js" type="text/javascript"&gt;&lt;/script&gt;
        &lt;script type="text/javascript"&gt;
            printHello();
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Výsledek je zobrazen v&nbsp;konzoli webového prohlížeče:</p>

*** image ***
<p><i>Obrázek 1: Funkce naprogramovaná v&nbsp;Go je skutečně zavolána z&nbsp;JavaScriptu.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Typ argumentů funkce volané z&nbsp;JavaScriptu</h2>

<p>Podívejme se ještě jednou na hlavičku funkce <strong>PrintHello()</strong>,
kterou je možné (po registraci) volat i z&nbsp;JavaScriptu:</p>

<pre>
<strong>func</strong> PrintHello(this js.Value, args []js.Value) any {
&nbsp;
        <i>// je nutné vrátit nějakou hodnotu</i>
        <strong>return</strong> nil
}
</pre>

<p>Této funkci se předává jeden parametr <strong>this</strong> a dále řez (tedy
dopředu neznámý počet prvků). V&nbsp;obou případech je ovšem použit totožný typ
<strong>js.Value</strong> deklarovaný v&nbsp;balíčku
<strong>syscall/js</strong>. S&nbsp;vlastnostmi tohoto typu se podrobněji
seznámíme v&nbsp;navazujícím textu, už nyní je ale vhodné si vypsat všechny
jeho viditelné metody (interní strukturu nemáme k&nbsp;dispozici):</p>

<pre>
func (v Value) <strong>Bool</strong>() bool
func (v Value) <strong>Call</strong>(m string, args ...any) Value
func (v Value) <strong>Delete</strong>(p string)
func (v Value) <strong>Equal</strong>(w Value) bool
func (v Value) <strong>Float</strong>() float64
func (v Value) <strong>Get</strong>(p string) Value
func (v Value) <strong>Index</strong>(i int) Value
func (v Value) <strong>InstanceOf</strong>(t Value) bool
func (v Value) <strong>Int</strong>() int
func (v Value) <strong>Invoke</strong>(args ...any) Value
func (v Value) <strong>IsNaN</strong>() bool
func (v Value) <strong>IsNull</strong>() bool
func (v Value) <strong>IsUndefined</strong>() bool
func (v Value) <strong>Length</strong>() int
func (v Value) <strong>New</strong>(args ...any) Value
func (v Value) <strong>Set</strong>(p string, x any)
func (v Value) <strong>SetIndex</strong>(i int, x any)
func (v Value) <strong>String</strong>() string
func (v Value) <strong>Truthy</strong>() bool
func (v Value) <strong>Type</strong>() Type
</pre>

<p>V&nbsp;balíčku <strong>syscall/js</strong> je deklarována je i čtveřice
funkcí, které dovolují hodnotu typu <strong>js.Value</strong> vytvořit či
nějakým způsobem získat:</p>

<pre>
func <strong>Global</strong>() Value
func <strong>Null</strong>() Value
func <strong>Undefined</strong>() Value
func <strong>ValueOf</strong>(x any) Value
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Druhý demonstrační příklad: výpis všech argumentů předaných funkci volané z&nbsp;JavaScriptu</h2>

<p>Ukažme si nyní, jakým postupem se zobrazí počet a hodnoty všech argumentů,
které jsou předány funkci naprogramované v&nbsp;jazyce Go, jež je volána
z&nbsp;JavaScriptu. Je to ve skutečnosti snadné. Počet argumentů se zjistí
standardní funkcí <strong>len()</strong>, protože všechny argumenty jsou
předány v&nbsp;jediném řezu. A hodnoty argumentů můžeme zobrazit funkcí
<strong>fmt.Printf</strong> v&nbsp;případě, že použijeme formátovací znak
<strong>%v</strong>. Ten způsobí, že se hodnoty (interně libovolného typu)
převedenou na řetězec a ten se následně zobrazí.</p>

<p>V&nbsp;Go tedy můžeme napsat funkci <strong>PrintArguments</strong>, která
provede výše uvedené operace:</p>

<pre>
<i>// Technologie WebAssembly</i>
<i>//</i>
<i>// - rozhraní mezi jazyky Go a JavaScript</i>
&nbsp;
<strong>package</strong> main
&nbsp;
<strong>import</strong> (
        "fmt"
        "syscall/js"
)
&nbsp;
<i>// funkce, která se bude volat z HTML stránky, jakoby</i>
<i>// se jednalo o JavaScriptovou funkci</i>
func <strong>PrintArguments</strong>(this js.Value, args []js.Value) any {
        fmt.Println("function PrintArguments called")
        fmt.Printf("# of parameters: %d\n", len(args))
&nbsp;
        for i, arg := range args {
                fmt.Printf("parameter # %d: %v\n", i, arg)
        }
&nbsp;
        <i>// je nutné vrátit nějakou hodnotu</i>
        return nil
}
&nbsp;
<strong>func</strong> main() {
        fmt.Println("started")
&nbsp;
        c := make(chan bool)
&nbsp;
        <i>// export funkce PrintArguments tak, aby byla volatelná</i>
        <i>// z JavaScriptu</i>
        js.Global().Set("printArguments", js.FuncOf(PrintArguments))
&nbsp;
        <i>// realizace nekonečného čekání</i>
        &lt;-c
&nbsp;
        fmt.Println("finished")
}
</pre>

<p>Tuto funkci několikrát zavoláme z&nbsp;JavaScriptového kódu napsaného přímo
v&nbsp;HTML stránce. Povšimněte si, že předáváme různý počet argumentů
s&nbsp;různými typy:</p>

<pre>
&lt;!doctype html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Function call: with arguments&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1 id="header"&gt;Function call: with arguments&lt;/h2&gt;
        &lt;script src="func_call_with_arguments.js" type="text/javascript"&gt;&lt;/script&gt;
        &lt;script type="text/javascript"&gt;
            <strong>printArguments();</strong>
            console.log();
&nbsp;
            <strong>printArguments(1);</strong>
            console.log();
&nbsp;
            <strong>printArguments(1, 2);</strong>
            console.log();
&nbsp;
            <strong>printArguments("foo", "bar", "baz");</strong>
            console.log();
&nbsp;
            <strong>printArguments(true, false);</strong>
            console.log();
&nbsp;
            <strong>printArguments(null);</strong>
            console.log();
&nbsp;
            <strong>printArguments(undefined);</strong>
            console.log();
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Výsledek bude opět viditelný v&nbsp;konzoli webového prohlížeče:</p>

*** image ***
<p><i>Obrázek 2: Naše testovací funkce byla několikrát zavolána s&nbsp;různým
počtem i hodnotami argumentů.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
// Technologie WebAssembly
//
// - rozhraní mezi jazyky Go a JavaScript
// - metoda PrintArguments vytiskne typy svých argumentů

package main

import (
	"fmt"
	"syscall/js"
)

// funkce, která se bude volat z HTML stránky, jakoby
// se jednalo o JavaScriptovou funkci
func PrintArguments(this js.Value, args []js.Value) any {
	fmt.Println("function PrintArguments called")
	fmt.Printf("# of parameters: %d\n", len(args))

	for i, arg := range args {
		fmt.Printf("parameter # %d with type %T: %v\n", i, arg, arg)
	}

	// je nutné vrátit nějakou hodnotu
	return nil
}

func main() {
	fmt.Println("started")

	c := make(chan bool)

	// export funkce PrintArguments tak, aby byla volatelná
	// z JavaScriptu
	js.Global().Set("printArguments", js.FuncOf(PrintArguments))

	// realizace nekonečného čekání
	<-c

	fmt.Println("finished")
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>




<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>

</pre>


<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;jazyce Go, které jsou určené pro
transpřeklad do JavaScriptu s&nbsp;využitím nástroje <strong>GopherJS</strong>,
byly uloženy do Git repositáře, jenž je dostupný na adrese <a
href="https://github.com/RedHatOfficial/GoCourse">https://github.com/RedHatOfficial/GoCourse</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/</a></td></tr>
</table>

func_call_no_arguments.go
func_call_no_arguments.html
func_call_with_arguments.go
func_call_with_arguments.html
func_call_argument_types_1.go
func_call_argument_types_1.html
func_call_argument_types_2.go
func_call_argument_types_2.html
func_call_two_ints.go
func_call_two_ints.html
func_call_two_floats.go
func_call_two_floats.html
func_call_return_int_1.go
func_call_return_int_1.html
func_call_return_int_2.go
func_call_return_int_2.html
hello_world_2.go

<p>Pro úplnost si uveďme i odkazy na ukázkové příklady použité <a
href="https://www.root.cz/clanky/gopherjs-transprekladac-z-jazyka-go-do-javascriptu/">minule</a>:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>1</td><td>hello_world.go</td><td>zdrojový kód prvního demonstračního příkladu: výpis zprávy na konzoli webového prohlížeče</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/hello_world.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/hello_world.go</a></td></tr>
<tr><td>1</td><td>hello_world.html</td><td>HTML stránka s&nbsp;kódem pro načtení prvního demonstračního příkladu do webového prohlížeče</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/hello_world.html">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/hello_world.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>2</td><td>dom_manipulation.go</td><td>zdrojový kód druhého demonstračního příkladu: manipulace s&nbsp;DOMem webové stránky</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_manipulation.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_manipulation.go</a></td></tr>
<tr><td>2</td><td>dom_manipulation.html</td><td>HTML stránka s&nbsp;kódem pro načtení druhého demonstračního příkladu do webového prohlížeče</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_manipulation.html">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_manipulation.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>dom_add_element.go</td><td>zdrojový kód třetího demonstračního příkladu: přidání elementů do DOMu webové stránky</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_add_element.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_add_element.go</a></td></tr>
<tr><td>3</td><td>dom_add_element.html</td><td>HTML stránka s&nbsp;kódem pro načtení třetího demonstračního příkladu do webového prohlížeče</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_add_element.html">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/dom_add_element.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>draw_into_canvas.go</td><td>zdrojový kód čtvrtého demonstračního příkladu: kreslení do canvasu</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/draw_into_canvas.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/draw_into_canvas.go</a></td></tr>
<tr><td>4</td><td>draw_into_canvas.html</td><td>HTML stránka s&nbsp;kódem pro načtení čtvrtého demonstračního příkladu do webového prohlížeče</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/draw_into_canvas.html">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/draw_into_canvas.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>js_interop_1.go</td><td>zdrojový kód pátého demonstračního příkladu: komunikace s&nbsp;JavaScriptem</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_1.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_1.go</a></td></tr>
<tr><td>5</td><td>js_interop_1.html</td><td>HTML stránka s&nbsp;kódem pro načtení pátého demonstračního příkladu do webového prohlížeče</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_1.html">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_1.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>6</td><td>js_interop_2.go</td><td>zdrojový kód šestého demonstračního příkladu: komunikace s&nbsp;JavaScriptem</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_2.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_2.go</a></td></tr>
<tr><td>6</td><td>js_interop_2.html</td><td>HTML stránka s&nbsp;kódem pro načtení šestého demonstračního příkladu do webového prohlížeče</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_2.html">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/js_interop_2.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td>http_server.go</td><td>implementace HTTP serveru, který dokáže webovému prohlížeči předávat obsah požadovaných souborů</td><td><a href="https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/http_server.go">https://github.com/RedHatOfficial/GoCourse/blob/master/lesson12/http_server.go</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>go2js<br />
<a href="https://github.com/tredoe/go2js">https://github.com/tredoe/go2js</a>
</li>

<li>GitHub repositář projektu GopherJS<br />
<a href="https://github.com/gopherjs/gopherjs">https://github.com/gopherjs/gopherjs</a>
</li>

<li>How to use GopherJS to turn Go code into a JavaScript library<br />
<a href="https://medium.com/@kentquirk/how-to-use-gopherjs-to-turn-go-code-into-a-javascript-library-1e947703db7a">https://medium.com/@kentquirk/how-to-use-gopherjs-to-turn-go-code-into-a-javascript-library-1e947703db7a</a>
</li>

<li>Source to source compiler<br />
<a href="https://en.wikipedia.org/wiki/Source-to-source_compiler">https://en.wikipedia.org/wiki/Source-to-source_compiler</a>
</li>

<li>Binary recompiler<br />
<a href="https://en.wikipedia.org/wiki/Binary_recompiler">https://en.wikipedia.org/wiki/Binary_recompiler</a>
</li>

<li>py2many na GitHubu<br />
<a href="https://github.com/py2many/py2many">https://github.com/py2many/py2many</a>
</li>

<li>py2many na PyPi<br />
<a href="https://pypi.org/project/py2many/">https://pypi.org/project/py2many/</a>
</li>

<li>Awesome Transpilers<br />
<a href="https://github.com/milahu/awesome-transpilers">https://github.com/milahu/awesome-transpilers</a>
</li>

<li>WebAssembly<br />
<a href="https://webassembly.org/">https://webassembly.org/</a>
</li>

<li>WebAssembly na Wiki Golangu<br />
<a href="https://github.com/golang/go/wiki/WebAssembly">https://github.com/golang/go/wiki/WebAssembly</a>
</li>

<li>The future of WebAssembly - A look at upcoming features and proposals<br />
<a href="https://blog.scottlogic.com/2018/07/20/wasm-future.html">https://blog.scottlogic.com/2018/07/20/wasm-future.html</a>
</li>

<li>Writing WebAssembly By Hand<br />
<a href="https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html">https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html</a>
</li>

<li>WebAssembly Specification<br />
<a href="https://webassembly.github.io/spec/core/index.html">https://webassembly.github.io/spec/core/index.html</a>
</li>

<li>Index of Instructions<br />
<a href="https://webassembly.github.io/spec/core/appendix/index-instructions.html">https://webassembly.github.io/spec/core/appendix/index-instructions.html</a>
</li>

<li>The WebAssembly Binary Toolkit<br />
<a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>
</li>

<li>Will WebAssembly replace JavaScript? Or Will WASM Make JavaScript More Valuable in Future?<br />
<a href="https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e">https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e</a>
</li>

<li>Roadmap (pro WebAssemly)<br />
<a href="https://webassembly.org/roadmap/">https://webassembly.org/roadmap/</a>
</li>

<li>Transcrypt<br />
<a href="https://transcrypt.org/">https://transcrypt.org/</a>
</li>

<li>JavaScript Data Types<br />
<a href="https://www.geeksforgeeks.org/javascript-data-types/">https://www.geeksforgeeks.org/javascript-data-types/</a>
</li>

<li>Standardní balíček <strong>syscall/js</strong><br />
<a href="https://pkg.go.dev/syscall/js">https://pkg.go.dev/syscall/js</a>
</li>

<li>Data types<br />
<a href="https://javascript.info/types">https://javascript.info/types</a>
</li>

<li>Datové typy (napsáno poněkud zjednodušeně)<br />
<a href="https://naucme.it/chapter/qa-04">https://naucme.it/chapter/qa-04</a>
</li>

<li>Primitive (JavaScript)<br />
<a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive">https://developer.mozilla.org/en-US/docs/Glossary/Primitive</a>
</li>

<li>JavaScript type: String<br />
<a href="https://developer.mozilla.org/en-US/docs/Glossary/String">https://developer.mozilla.org/en-US/docs/Glossary/String</a>
</li>

<li>JavaScript type: Number<br />
<a href="https://developer.mozilla.org/en-US/docs/Glossary/Number">https://developer.mozilla.org/en-US/docs/Glossary/Number</a>
</li>

<li>JavaScript type: Boolean<br />
<a href="https://developer.mozilla.org/en-US/docs/Glossary/Boolean">https://developer.mozilla.org/en-US/docs/Glossary/Boolean</a>
</li>

<li>JavaScript type: Undefined<br />
<a href="https://developer.mozilla.org/en-US/docs/Glossary/Undefined">https://developer.mozilla.org/en-US/docs/Glossary/Undefined</a>
</li>

<li>JavaScript type: Null<br />
<a href="https://developer.mozilla.org/en-US/docs/Glossary/Null">https://developer.mozilla.org/en-US/docs/Glossary/Null</a>
</li>

<li>JavaScript type: Symbol<br />
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol</a>
</li>

<li>JavaScript type: BigInt<br />
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

