<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Typový systém programovacího jazyka JavaScript</a></p>
<p><a href="#k03">*** 3. Typový systém programovacího jazyky Go</a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Typový systém programovacího jazyka JavaScript</h2>

<p></p>

<table>
<tr><th>#</th><th>Datový typ</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>Boolean</td><td>datový typ se dvěma možnými hodnotami <strong>true</strong> a <strong>false</strong></td></tr>
<tr><td>2</td><td>String</td><td>sekvence znaků (jediný znak je taktéž považován za řetězec)</td></tr>
<tr><td>3</td><td>Number</td><td>reprezentuje hodnoty typu <i>double</i> podle IEEE 754; pro celá čísla jsme omezeni hranicí 2<sup>53</sup>-1 (vlastně šířkou mantisy, i když skutečnost je nepatrně složitější)</td></tr>
<tr><td>4</td><td>Bigint</td><td>speciální typ numerických hodnot větších než 2<sup>53</sup>-1</td></tr>
<tr><td>5</td><td>Null</td><td>typ s&nbsp;jedinou hodnotou <strong>null</strong></td></tr>
<tr><td>6</td><td>Undefined</td><td>specialita JavaScriptu (a bolehlav), představuje ještě nepřiřazenou hodnotu (rozdílné od Null)</td></tr>
<tr><td>7</td><td>Symbol</td><td>unikátní identifikátor</td></tr>
<tr><td>8</td><td>Object</td><td>(je to na první pohled zvláštní, ale sem spadají například i funkce)</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: </div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Typový systém programovacího jazyky Go</h2>

<p>Typový systém jazyka Go se od JavaScriptu poměrně značně odlišuje, což je
ostatně patrné již při pohledu na počet dostupných standardních typů. Celou
hierarchii typového systému programovacího jazyka Go, která obsahuje všechny
v&nbsp;současnosti podporované datové typy i jejich základní vztahy, si můžeme
vizualizovat následujícím způsobem:</p>

<ul>
    <li>Jednoduché datové typy
        <ul>
            <li>Ordinální
                <ul>
                    <li>Pravdivostní typ (<i>boolean</i>)</li>
                    <li>Celočíselné typy (<i>integer</i>)</li>
                    <li>Znak (<i>rune</i>) jako speciální případ celočíselného typu</li>
                </ul>
                </li>
                <li>Neordinální
                <ul>
                    <li>Hodnoty s&nbsp;plovoucí řádovou čárkou (<i>float</i>)</li>
                    <li>Komplexní čísla (<i>complex</i>)</li>
                </ul>
            </li>
        </ul>
    </li>
    <li>Složené datové typy
        <ul>
            <li>Řetězce</a> (<i>string</i>)</li>
            <li>Pole</a> (<i>array</i>)</li>
            <li>Řezy</a> (<i>slice</i>)</li>
            <li>Mapy (<i>map</i>)</li>
            <li>Záznamy (<i>struct</i>)</li>
        </ul>
    </li>
    <li>Zvláštní datové typy
        <ul>
            <li>Ukazatel (<i>pointer</i>)</li>
            <li>Funkce (<i>function</i>) &ndash; ano, to je taktéž plnohodnotný datový typ</li>
            <li>Rozhraní (<i>interface</i>)</li>
            <li>Kanál (<i>channel</i>)</li>
        </ul>
    </li>
</ul>

<p><div class="rs-tip-major">Poznámka: k&nbsp;tomu musíme připočítat podporu
pro generické datové typy, které jsme si popsali v&nbsp;článku <a
href="https://www.root.cz/clanky/dlouho-ocekavana-novinka-v-go-1-18-genericke-datove-typy/">Dlouho
očekávaná novinka v Go 1.18 – generické datové typy </a>.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
<i>// Technologie WebAssembly</i>
<i>//</i>
<i>// - rozhraní mezi jazyky Go a JavaScript</i>
&nbsp;
package main
&nbsp;
import (
	"fmt"
	"syscall/js"
)

<i>// funkce, která se bude volat z HTML stránky, jakoby</i>
<i>// se jednalo o JavaScriptovou funkci</i>
func PrintHello(this js.Value, args []js.Value) any {
	fmt.Println("function PrintHello called")

	// je nutné vrátit nějakou hodnotu
	return nil
}

func main() {
	fmt.Println("started")

	c := make(chan bool)

	// export funkce PrintHello tak, aby byla volatelná
	// z JavaScriptu
	js.Global().Set("printHello", js.FuncOf(PrintHello))

	// realizace nekonečného čekání
	<-c

	fmt.Println("finished")
}
</pre>

<pre>
&lt;!doctype html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Function call: without arguments&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1 id="header"&gt;Function call: without arguments&lt;/h2&gt;
        &lt;script src="func_call_no_arguments.js" type="text/javascript"&gt;&lt;/script&gt;
        &lt;script type="text/javascript"&gt;
            printHello();
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
// Technologie WebAssembly
//
// - rozhraní mezi jazyky Go a JavaScript

package main

import (
	"fmt"
	"syscall/js"
)

// funkce, která se bude volat z HTML stránky, jakoby
// se jednalo o JavaScriptovou funkci
func PrintArguments(this js.Value, args []js.Value) any {
	fmt.Println("function PrintArguments called")
	fmt.Printf("# of parameters: %d\n", len(args))

	for i, arg := range args {
		fmt.Printf("parameter # %d: %v\n", i, arg)
	}

	// je nutné vrátit nějakou hodnotu
	return nil
}

func main() {
	fmt.Println("started")

	c := make(chan bool)

	// export funkce PrintArguments tak, aby byla volatelná
	// z JavaScriptu
	js.Global().Set("printArguments", js.FuncOf(PrintArguments))

	// realizace nekonečného čekání
	<-c

	fmt.Println("finished")
}
</pre>

<pre>
&lt;!doctype html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Function call: with arguments&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1 id="header"&gt;Function call: with arguments&lt;/h2&gt;
        &lt;script src="func_call_with_arguments.js" type="text/javascript"&gt;&lt;/script&gt;
        &lt;script type="text/javascript"&gt;
            printArguments();
            console.log();
&nbsp;
            printArguments(1);
            console.log();
&nbsp;
            printArguments(1, 2);
            console.log();
&nbsp;
            printArguments("foo", "bar", "baz");
            console.log();
&nbsp;
            printArguments(true, false);
            console.log();
&nbsp;
            printArguments(null);
            console.log();
&nbsp;
            printArguments(undefined);
            console.log();
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>

func Global() Value
func Null() Value
func Undefined() Value
func ValueOf(x any) Value
func (v Value) Bool() bool
func (v Value) Call(m string, args ...any) Value
func (v Value) Delete(p string)
func (v Value) Equal(w Value) bool
func (v Value) Float() float64
func (v Value) Get(p string) Value
func (v Value) Index(i int) Value
func (v Value) InstanceOf(t Value) bool
func (v Value) Int() int
func (v Value) Invoke(args ...any) Value
func (v Value) IsNaN() bool
func (v Value) IsNull() bool
func (v Value) IsUndefined() bool
func (v Value) Length() int
func (v Value) New(args ...any) Value
func (v Value) Set(p string, x any)
func (v Value) SetIndex(i int, x any)
func (v Value) String() string
func (v Value) Truthy() bool
func (v Value) Type() Type



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;jazyce Go, které jsou určené pro
transpřeklad do JavaScriptu s&nbsp;využitím nástroje <strong>GopherJS</strong>,
byly uloženy do Git repositáře, jenž je dostupný na adrese <a
href="https://github.com/RedHatOfficial/GoCourse">https://github.com/RedHatOfficial/GoCourse</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>


</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

