<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p></p>

<pre>
package main
&nbsp;
import "C"
import "fmt"
&nbsp;
//export hello
func hello() {
        fmt.Println("Hello, world!")
}
&nbsp;
func main() {}
</pre>

<pre>
/* Code generated by cmd/cgo; DO NOT EDIT. */
&nbsp;
/* package command-line-arguments */
&nbsp;
&nbsp;
#line 1 "cgo-builtin-export-prolog"
&nbsp;
#include &lt;stddef.h&gt; /* for ptrdiff_t below */
&nbsp;
#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H
&nbsp;
#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif
&nbsp;
#endif
&nbsp;
/* Start of preamble from import "C" comments.  */
&nbsp;
&nbsp;
&nbsp;
&nbsp;
/* End of preamble from import "C" comments.  */
&nbsp;
&nbsp;
/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"
&nbsp;
#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H
&nbsp;
typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
&nbsp;
/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];
&nbsp;
#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;
&nbsp;
#endif
&nbsp;
/* End of boilerplate cgo prologue.  */
&nbsp;
#ifdef __cplusplus
extern "C" {
#endif
&nbsp;
extern void hello();

#ifdef __cplusplus
}
#endif
</pre>

<pre>
$ <strong>ldd so1.so</strong>
</pre>

<pre>
linux-vdso.so.1 (0x00007fffb178c000)
libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f6aec0ed000)
libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f6aebefb000)
/lib64/ld-linux-x86-64.so.2 (0x00007f6aec2cc000)
</pre>

<pre>
$ <strong>nm so1.so | grep hello</strong>
</pre>

<pre>
00000000000c6480 T _cgoexp_c12381a1b464_hello
00000000000fc9c0 d _cgoexp_c12381a1b464_hello.stkobj
00000000000c64f0 T hello
</pre>

<pre>
#include <stdio.h>
#include <stdlib.h>
#include <dlfcn.h>
 &nbsp;
#include "so1.h"
&nbsp;
int main()
{
    void *library;
    void (*hello)();
&nbsp;
    /* pokus o otevreni a nacteni sdilene knihovny */
    library = dlopen("./so1.so", RTLD_LAZY);
    if (library != NULL) {
        printf("dynamic library loaded: %p\n", library);
    } else {
        puts("unable to load dynamic library");
        return 1;
    }
&nbsp;
    hello = dlsym(library, "hello");
&nbsp;
    /* pro preklad s --pedantic
    *(void **) (&amp;hello) = dlsym(library, "hello");
    */
&nbsp;
    if (hello != NULL) {
        printf("address for 'hello' retrieved: %p\n", (void*)hello);
        puts("Calling 'hello'...");
        hello();
        puts("...called");
    } else {
        puts("unable to retrieve address for 'hello'");
    }
&nbsp;
&nbsp;
    /* pokus o uzavreni sdilene knihovny */
    if (library != NULL) {
        int err = dlclose(library);
        if (err != 0) {
            puts("unable to close dynamic library");
            return 1;
        } else {
            puts("dynamic library closed");
        }
    }
&nbsp;
    return EXIT_SUCCESS;
}
</pre>

<pre>
dynamic library loaded: 0x5582f4b592c0
address for 'hello' retrieved: 0x7f0f01a6b4f0
Calling 'hello'...
Hello, world!
...called
dynamic library closed
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<p></p>

<pre>
import ctypes
&nbsp;
so1 = ctypes.CDLL("so1.so")
&nbsp;
so1.hello()
</pre>

<pre>
import ctypes
&nbsp;
so1 = ctypes.CDLL("./so1.so")
&nbsp;
so1.hello()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p></p>

<pre>
package main
&nbsp;
import "C"
import "fmt"
&nbsp;
//export hello
func hello() {
        fmt.Println("Hello, world!")
}
&nbsp;
func main() {
        hello()
}
</pre>

<pre>
import ctypes
&nbsp;
so2 = ctypes.CDLL("so2.so")
&nbsp;
so2.hello()
</pre>

<pre>
import ctypes
&nbsp;
so2 = ctypes.CDLL("./so2.so")
&nbsp;
so2.hello()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p></p>

<pre>
package main
&nbsp;
import "C"
&nbsp;
//export add
func add(x, y int) int {
        return x + y
}
&nbsp;
func main() {}
</pre>

<pre>
/* Code generated by cmd/cgo; DO NOT EDIT. */
&nbsp;
/* package command-line-arguments */
&nbsp;
&nbsp;
#line 1 "cgo-builtin-export-prolog"
&nbsp;
#include &lt;stddef.h&gt; /* for ptrdiff_t below */
&nbsp;
#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H
&nbsp;
#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif
&nbsp;
#endif
&nbsp;
/* Start of preamble from import "C" comments.  */
&nbsp;
&nbsp;
&nbsp;
&nbsp;
/* End of preamble from import "C" comments.  */
&nbsp;
&nbsp;
/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"
&nbsp;
#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H
&nbsp;
typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
&nbsp;
/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];
&nbsp;
#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;
&nbsp;
#endif
&nbsp;
/* End of boilerplate cgo prologue.  */
&nbsp;
#ifdef __cplusplus
extern "C" {
#endif
&nbsp;
extern GoInt add(GoInt x, GoInt y);
&nbsp;
#ifdef __cplusplus
}
#endif
</pre>

<pre>
extern <strong>GoInt</strong> add(<strong>GoInt</strong> x, <strong>GoInt</strong> y);
</pre>

<pre>
import ctypes
&nbsp;
so3 = ctypes.CDLL("./so3.so")
&nbsp;
a = 1
b = 2
&nbsp;
c = so3.add(a, b)
print(c)
</pre>

<pre>
import ctypes
&nbsp;
so3 = ctypes.CDLL("./so3.so")
&nbsp;
a = 1.2
b = 3.4
&nbsp;
c = so3.add(a, b)
print(c)
</pre>

<pre>
import ctypes
&nbsp;
so3 = ctypes.CDLL("./so3.so")
&nbsp;
a = 1
b = 10000000000000000
&nbsp;
c = so3.add(a, b)
print(c)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>

<pre>
package main
&nbsp;
import "C"
&nbsp;
import "fmt"
&nbsp;
//export add
func add(x, y int64) int64 {
        result := x + y
        fmt.Printf("Called add(%d, %d) with result %d\n", x, y, result)
        return result
}
&nbsp;
func main() {}
</pre>

<pre>
/* Code generated by cmd/cgo; DO NOT EDIT. */
&nbsp;
/* package command-line-arguments */
&nbsp;
&nbsp;
#line 1 "cgo-builtin-export-prolog"
&nbsp;
#include &lt;stddef.h&gt; /* for ptrdiff_t below */
&nbsp;
#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H
&nbsp;
#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif
&nbsp;
#endif
&nbsp;
/* Start of preamble from import "C" comments.  */
&nbsp;
&nbsp;
&nbsp;
&nbsp;
/* End of preamble from import "C" comments.  */
&nbsp;
&nbsp;
/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"
&nbsp;
#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H
&nbsp;
typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
&nbsp;
/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];
&nbsp;
#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;
&nbsp;
#endif
&nbsp;
/* End of boilerplate cgo prologue.  */
&nbsp;
#ifdef __cplusplus
extern "C" {
#endif
&nbsp;
extern GoInt64 add(GoInt64 x, GoInt64 y);
&nbsp;
#ifdef __cplusplus
}
#endif
</pre>

<pre>
import ctypes
&nbsp;
so4 = ctypes.CDLL("./so4.so")
&nbsp;
a = 1
b = 2
&nbsp;
c = so4.add(a, b)
print(c)
</pre>

<pre>
import ctypes
&nbsp;
so4 = ctypes.CDLL("./so4.so")
&nbsp;
a = 2**31-1
b = 1
&nbsp;
c = so4.add(a, b)
print(c)
</pre>

<pre>
import ctypes
&nbsp;
so4 = ctypes.CDLL("./so4.so")
&nbsp;
a = 2**31-1
b = 1
&nbsp;
so4.add.restype = ctypes.c_int64
&nbsp;
c = so4.add(a, b)
print(c)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>so1.go</td><td>definice funkce <strong>hello</strong> v&nbsp;jazyce Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/so1.go">https://github.com/tisnik/go-root/blob/master/article_85/so1.go</a></td></tr>
<tr><td> 2</td><td>so1.h</td><td>vygenerovaný hlavičkový soubor</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/so1.h">https://github.com/tisnik/go-root/blob/master/article_85/so1.h</a></td></tr>
<tr><td> 3</td><td>use_so1.c  </td><td>volání funkce <strong>hello</strong> z&nbsp;céčka</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/use_so1.c">https://github.com/tisnik/go-root/blob/master/article_85/use_so1.c</a></td></tr>
<tr><td> 4</td><td>use_so1A.py</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/use_so1A.py">https://github.com/tisnik/go-root/blob/master/article_85/use_so1A.py</a></td></tr>
<tr><td> 5</td><td>use_so1B.py</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/use_so1B.py">https://github.com/tisnik/go-root/blob/master/article_85/use_so1B.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>so2.go</td><td>zavolání funkce <strong>hello</strong> z&nbsp;funkce <strong>main</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/so2.go">https://github.com/tisnik/go-root/blob/master/article_85/so2.go</a></td></tr>
<tr><td> 7</td><td>so2.h</td><td>vygenerovaný hlavičkový soubor</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/so2.h">https://github.com/tisnik/go-root/blob/master/article_85/so2.h</a></td></tr>
<tr><td> 8</td><td>use_so2A.py</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/use_so2A.py">https://github.com/tisnik/go-root/blob/master/article_85/use_so2A.py</a></td></tr>
<tr><td> 9</td><td>use_so2B.py</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/use_so2B.py">https://github.com/tisnik/go-root/blob/master/article_85/use_so2B.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>so3.go</td><td>definice funkce <strong>add</strong> v&nbsp;jazyce Go</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/so3.go">https://github.com/tisnik/go-root/blob/master/article_85/so3.go</a></td></tr>
<tr><td>11</td><td>so3.h</td><td>vygenerovaný hlavičkový soubor</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/so3.h">https://github.com/tisnik/go-root/blob/master/article_85/so3.h</a></td></tr>
<tr><td>12</td><td>use_so3A.py</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/use_so3A.py">https://github.com/tisnik/go-root/blob/master/article_85/use_so3A.py</a></td></tr>
<tr><td>13</td><td>use_so3B.py</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/use_so3B.py">https://github.com/tisnik/go-root/blob/master/article_85/use_so3B.py</a></td></tr>
<tr><td>14</td><td>use_so3C.py</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/use_so3C.py">https://github.com/tisnik/go-root/blob/master/article_85/use_so3C.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>so4.go     </td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/so4.go">https://github.com/tisnik/go-root/blob/master/article_85/so4.go</a></td></tr>
<tr><td>16</td><td>so4.h</td><td>vygenerovaný hlavičkový soubor</td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/so4.h">https://github.com/tisnik/go-root/blob/master/article_85/so4.h</a></td></tr>
<tr><td>17</td><td>use_so4A.py</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/use_so4A.py">https://github.com/tisnik/go-root/blob/master/article_85/use_so4A.py</a></td></tr>
<tr><td>18</td><td>use_so4B.py</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/use_so4B.py">https://github.com/tisnik/go-root/blob/master/article_85/use_so4B.py</a></td></tr>
<tr><td>19</td><td>use_so4C.py</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/use_so4C.py">https://github.com/tisnik/go-root/blob/master/article_85/use_so4C.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>20</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_85/">https://github.com/tisnik/go-root/blob/master/article_85/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Programovací jazyk Rust: použití FFI pro volání funkcí z nativních knihoven<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven/">https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven/</a>
</li>

<li>Programovací jazyk Rust: použití FFI pro volání funkcí z nativních knihoven (2. část)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven-2-cast/">https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven-2-cast/</a>
</li>

<li>Programovací jazyk Rust: použití FFI při předávání struktur<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pri-predavani-struktur/">https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pri-predavani-struktur/</a>
</li>

<li>ctypes — A foreign function library for Python<br />
<a href="https://docs.python.org/3/library/ctypes.html">https://docs.python.org/3/library/ctypes.html</a>
</li>

<li>GNU C Library: Integers<br />
<a href="https://www.gnu.org/softwa­re/libc/manual/html_node/In­tegers.html">https://www.gnu.org/softwa­re/libc/manual/html_node/In­tegers.html</a>
</li>

<li>Position-independent code<br />
<a href="https://cs.wikipedia.org/wiki/Position-independent_code">https://cs.wikipedia.org/wiki/Position-independent_code</a>
</li>

<li>Creating a shared and static library with the gnu compiler [gcc]<br />
<a href="http://www.adp-gmbh.ch/cpp/gcc/create_lib.html">http://www.adp-gmbh.ch/cpp/gcc/create_lib.html</a>
</li>

<li>FFI: Foreign Function Interface<br />
<a href="https://doc.rust-lang.org/book/ffi.html">https://doc.rust-lang.org/book/ffi.html</a>
</li>

<li>Primitive Type pointer<br />
<a href="https://doc.rust-lang.org/std/primitive.pointer.html">https://doc.rust-lang.org/std/primitive.pointer.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

