<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Základní nástroje, které využijeme: <strong>netstat</strong>, <strong>nc</strong> a <strong>lsof</strong></a></p>
<p><a href="#k03">*** 3. Komunikace přes TCP sockety (<i>stream</i>)</a></p>
<p><a href="#k04">*** 4. Komunikace přes UDP sockety (<i>datagram</i>)</a></p>
<p><a href="#k05">*** 5. Použití Unix socketů (<i>stream</i> i <i>datagram</i>)</a></p>
<p><a href="#k06">*** 6. Realizace jednoduchého klienta komunikujícího přes TCP sockety v&nbsp;jazyku Go</a></p>
<p><a href="#k07">*** 7. Základní kostra serveru komunikujícího přes TCP sockety v&nbsp;jazyku Go</a></p>
<p><a href="#k08">*** 8. Vylepšení klienta i serveru &ndash; uzavírání prostředků a reakce na případné chyby</a></p>
<p><a href="#k09">*** 9. Simulace zpomalené reakce serveru</a></p>
<p><a href="#k10">*** 10. Server akceptující větší množství klientů realizovaný pomocí gorutin</a></p>
<p><a href="#k11">*** 11. Klient komunikující přes Unix sockety naprogramovaný v&nbsp;Go</a></p>
<p><a href="#k12">*** 12. Server komunikující přes Unix sockety naprogramovaný v&nbsp;Go</a></p>
<p><a href="#k13">*** 13. Praktická část článku</a></p>
<p><a href="#k14">*** 14. Komunikace s&nbsp;HAProxy přes Unix sockety</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
package main
&nbsp;
import (
        "fmt"
        "net"
)
&nbsp;
func <strong>main</strong>() {
        conn, err := net.Dial("tcp", "localhost:1234")
        if err != nil {
                println("Connection refused!")
        } else {
                var b [1]byte
                n, err := conn.Read(b[:])
                if err != nil {
                        println("No response!")
                } else {
                        if n == 1 {
                                fmt.Printf("Received %d byte: %v\n", n, b)
                        } else {
                                fmt.Printf("Received %d bytes: %v\n", n, b)
                        }
                }
        }
}
</pre>

<p>O realizovaném připojení si můžeme zjistit i další informace, například
lokální i vzdálenou adresu s&nbsp;využitím metod
<strong>Conn.LocalAddr()</strong> a <strong>Conn.RemoteAddr()</strong>. Tyto
adresy převedeme do tisknutelného tvaru metodou <strong>String()</strong>. <a
href="https://github.com/tisnik/go-root/blob/master/article_11/01B_simple_client_headers.go">Upravený
klient</a> může vypadat následovně:</p>

<pre>
package main
&nbsp;
import (
        "fmt"
        "net"
)
&nbsp;
func <strong>main</strong>() {
        conn, err := net.Dial("tcp", "localhost:1234")
        if err != nil {
                println("Connection refused!")
        } else {
                fmt.Printf("Connection established\n")
                fmt.Printf("Remote Address: %s \n", conn.RemoteAddr().String())
                fmt.Printf("Local Address:  %s \n", conn.LocalAddr().String())
&nbsp;
                var b [1]byte
                n, err := conn.Read(b[:])
                if err != nil {
                        println("No response!")
                } else {
                        if n == 1 {
                                fmt.Printf("Received %d byte: %v\n", n, b)
                        } else {
                                fmt.Printf("Received %d bytes: %v\n", n, b)
                        }
                }
        }
}
</pre>

<p>Příklad výsledku po připojení klienta k&nbsp;serveru popsanému <a
href="#k03">v&nbsp;další kapitole</a>:</p>

<pre>
Connection established
Remote Address: 127.0.0.1:1234
Local Address:  127.0.0.1:38082
Received 1 byte: [0]
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že server má pevně zadaný
port 1234, zatímco port otevřený na straně klienta je zvolen
systémem.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů naprogramovaných
v&nbsp;jazyku Go byly uloženy do Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář, můžete namísto toho
použít odkazy na jednotlivé demonstrační příklady, které naleznete
v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>simple_tcp_client</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A7/simple_tcp_client/">https://github.com/tisnik/go-root/blob/master/article_A7/simple_tcp_client/</a></td></tr>
<tr><td> 2</td><td>simple_tcp_server</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A7/simple_tcp_server/">https://github.com/tisnik/go-root/blob/master/article_A7/simple_tcp_server/</a></td></tr>
<tr><td> 3</td><td>slow_tcp_server</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A7/slow_tcp_server/">https://github.com/tisnik/go-root/blob/master/article_A7/slow_tcp_server/</a></td></tr>
<tr><td> 4</td><td>multi_connection_tcp_server</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A7/multi_connection_tcp_server/">https://github.com/tisnik/go-root/blob/master/article_A7/multi_connection_tcp_server/</a></td></tr>
<tr><td> 5</td><td>simple_unix_socket_client</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A7/simple_unix_socket_client/">https://github.com/tisnik/go-root/blob/master/article_A7/simple_unix_socket_client/</a></td></tr>
<tr><td> 6</td><td>simple_unix_socket_server</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A7/simple_unix_socket_server/">https://github.com/tisnik/go-root/blob/master/article_A7/simple_unix_socket_server/</a></td></tr>
<tr><td> 7</td><td>haproxy_controller</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A7/haproxy_controller/">https://github.com/tisnik/go-root/blob/master/article_A7/haproxy_controller/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>What Are Unix Sockets and How Do They Work?<br />
<a href="https://www.howtogeek.com/devops/what-are-unix-sockets-and-how-do-they-work/">https://www.howtogeek.com/devops/what-are-unix-sockets-and-how-do-they-work/</a>
</li>

<li>Unix domain socket<br />
<a href="https://en.wikipedia.org/wiki/Unix_domain_socket">https://en.wikipedia.org/wiki/Unix_domain_socket</a>
</li>

<li>Interprocess Communication With Unix Sockets<br />
<a href="https://www.baeldung.com/linux/communicate-with-unix-sockets">https://www.baeldung.com/linux/communicate-with-unix-sockets</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>OSI model<br />
<a href="https://en.wikipedia.org/wiki/OSI_model">https://en.wikipedia.org/wiki/OSI_model</a>
</li>

<li>Datagram<br />
<a href="https://cs.wikipedia.org/wiki/Datagram">https://cs.wikipedia.org/wiki/Datagram</a>
</li>

<li>Softwarová rozhraní systémů UNIX pro přístup k síťovým službám<br />
<a href="https://www.cs.vsb.cz/grygarek/PS/sockets.html">https://www.cs.vsb.cz/grygarek/PS/sockets.html</a>
</li>

https://docs.haproxy.org/2.4/management.html#9.3

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

