<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Základní nástroje, které využijeme: <strong>netstat</strong>, <strong>nc</strong> a <strong>lsof</strong></a></p>
<p><a href="#k03">*** 3. Komunikace přes TCP sokety (<i>stream</i>)</a></p>
<p><a href="#k04">*** 4. Komunikace přes UDP sokety (<i>datagram</i>)</a></p>
<p><a href="#k05">*** 5. Použití Unixových soketů (<i>stream</i> i <i>datagram</i>)</a></p>
<p><a href="#k06">*** 6. Realizace jednoduchého klienta komunikujícího přes TCP sokety v&nbsp;jazyku Go</a></p>
<p><a href="#k07">*** 7. Základní kostra serveru komunikujícího přes TCP sokety v&nbsp;jazyku Go</a></p>
<p><a href="#k08">*** 8. Vylepšení klienta i serveru &ndash; uzavírání prostředků a reakce na případné chyby</a></p>
<p><a href="#k09">*** 9. Simulace zpomalené reakce serveru</a></p>
<p><a href="#k10">*** 10. Server akceptující větší množství klientů realizovaný pomocí gorutin</a></p>
<p><a href="#k11">*** 11. Klient komunikující přes Unix sokety naprogramovaný v&nbsp;Go</a></p>
<p><a href="#k12">*** 12. Server komunikující přes Unix sokety naprogramovaný v&nbsp;Go</a></p>
<p><a href="#k13">*** 13. Praktická část článku</a></p>
<p><a href="#k14">*** 14. Komunikace s&nbsp;HAProxy přes Unix sokety</a></p>
<p><a href="#k15">*** 15. Konfigurace HAProxy</a></p>
<p><a href="#k16">*** 16. Realizace programu, který řídí HAProxy</a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>




<p><a name="k03"></a></p>
<h2 id="k03">3. Komunikace přes TCP sokety (<i>stream</i>)</h2>

<p>Síťové aplikace se vytváří na různých úrovních abstrakce &ndash; buď se pouze otevřou připojení (například s&nbsp;využitím Unixových soketů) a následný komunikační protokol je naprogramován přímo vývojářem, nebo se naopak využije nějaký již existující protokol na vyšší síťové vrstvě (HTTP atd.). Nejprve si ukážeme komunikaci mezi jednoduchým klientem a serverem na nižší úrovni, kdy náš komunikační protokol (na aplikační úrovni) bude spočívat v&nbsp;přenosu jediného bajtu přes TCP popř.&nbsp;přes UDP. Později namísto TCP/UDP použijeme Unixové sokety.</p>

<p><div class="rs-tip-major">Poznámka: na nižších síťových vrstvách (TCP, IP, Ethernet) bude samozřejmě komunikace složitější, od toho ovšem budeme do jisté míry odstíněni standardními knihovnami (balíčky) programovacího jazyka Go.</div></p>

$ nc -l -v localhost 1234
Listening on localhost 1234
Connection received on localhost 57246

$ nc -v localhost 1234
Connection to localhost 1234 port [tcp/*] succeeded!
aaa
bbb
cc
ddd

$ netstat -tunp | grep :1234
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
tcp        0      0 127.0.0.1:1234          127.0.0.1:35636         ESTABLISHED 231176/nc
tcp        0      0 127.0.0.1:35636         127.0.0.1:1234          ESTABLISHED 232495/nc



<p><a name="k04"></a></p>
<h2 id="k04">4. Komunikace přes UDP sokety (<i>datagram</i>)</h2>

$ nc -l -u -v localhost 1234
Bound on localhost 1234
Connection received on localhost 36201

$ nc -u -v localhost 1234
Connection to localhost 1234 port [udp/*] succeeded!

$ netstat -tunp | grep :1234
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
udp        0      0 127.0.0.1:45470         127.0.0.1:1234          ESTABLISHED 233385/nc
udp        0      0 127.0.0.1:1234          127.0.0.1:45470         ESTABLISHED 233118/nc



<p><a name="k05"></a></p>
<h2 id="k05">5. Použití Unixových soketů (<i>stream</i> i <i>datagram</i>)</h2>

$ nc -l -U -v /tmp/test.socket
Bound on /tmp/test.socket
Listening on /tmp/test.socket
Connection received on /tmp/test.socket

$ nc -U -v /tmp/test.socket

$ lsof /tmp/test.socket
COMMAND    PID     USER   FD   TYPE             DEVICE SIZE/OFF       NODE NAME
nc      235825 ptisnovs    3u  unix 0x0000000000000000      0t0 1288302629 /tmp/test.socket type=STREAM

$ lsof /tmp/test.socket
COMMAND    PID     USER   FD   TYPE             DEVICE SIZE/OFF       NODE NAME
nc      235825 ptisnovs    3u  unix 0x0000000000000000      0t0 1288302629 /tmp/test.socket type=STREAM
nc      235825 ptisnovs    4u  unix 0x0000000000000000      0t0 1288302630 /tmp/test.socket type=STREAM


$ nc -l -u -U -v /tmp/test.socket
Bound on /tmp/test.socket

$ nc -u -U -v /tmp/test.socket
Bound on /tmp/nc.XXXXRAlNkA

$ lsof /tmp/test.socket
COMMAND    PID     USER   FD   TYPE             DEVICE SIZE/OFF       NODE NAME
nc      238174 ptisnovs    3u  unix 0x0000000000000000      0t0 1288403891 /tmp/test.socket type=DGRAM

$ lsof /tmp/nc.XXXXRAlNkA
COMMAND    PID     USER   FD   TYPE             DEVICE SIZE/OFF       NODE NAME
nc      238687 ptisnovs    4u  unix 0x0000000000000000      0t0 1288437146 /tmp/nc.XXXXRAlNkA type=DGRAM



<p><a name="k06"></a></p>
<h2 id="k06">6. Realizace jednoduchého klienta komunikujícího přes TCP sokety v&nbsp;jazyku Go</h2>

<p>Samotná implementace klienta bude poměrně přímočará a bude se skládat

<ol>

<li>Navázání připojení s&nbsp;využitím konstruktoru <strong>net.Dial(protokol,
adresa)</strong>, který je popsán na adrese <a
href="https://golang.org/pkg/net/#Dial">https://golang.org/pkg/net/#Dial</a>.
Použitý protokol je specifikován řetězcem; konkrétně se může jednat o konstanty
&bdquo;tcp&ldquo;, &bdquo;tcp4&ldquo;, &bdquo;tcp6&ldquo;, &bdquo;udp&ldquo;,
&bdquo;udp4&ldquo;, &bdquo;udp6&ldquo;, &bdquo;ip&ldquo;, &bdquo;ip4&ldquo;,
&bdquo;ip6&ldquo;, &bdquo;unix&ldquo;, &bdquo;unixgram&ldquo;
popř.&nbsp;&bdquo;unixpacket&ldquo;. V&nbsp;příkladu zvolíme &bdquo;tcp&ldquo;,
který bude funkční v&nbsp;sítích s&nbsp;IPv4 i IPv6 (nebo pochopitelně
v&nbsp;kombinovaných sítích).</li>

<li>Přečtení <i>n</i> bajtů metodou <strong>Read(b []byte) (n int, err
error)</strong> (konkrétní příjemce se liší podle toho, jaké připojení jsme
deklarovali v&nbsp;konstruktoru, ovšem tato metoda bude vždy podporována).
Povšimněte si, že této metodě je nutné předat řez (<i>slice</i>) a nikoli pole
bajtů (to je nekompatibilní datový typ). Z&nbsp;tohoto důvodu v&nbsp;našem
příkladu použijeme trik <strong>pole[:]</strong>, kterým se vytvoří řez
ukazující na celé pole (přesněji řez bude ukazovat na první prvek pole a jeho
délka bude odpovídat délce pole).</li>

<li>Přečtené pole bajtů se následně vytiskne, přičemž server implementovaný
v&nbsp;rámci další kapitoly je naprogramován takovým způsobem, aby posílal jen
jediný bajt.</li>

</ol>

<p>Úplný zdrojový kód tohoto příkladu naleznete na adrese <a
href="https://github.com/tisnik/go-fedora/blob/master/article_11/01_simple_client.go">https://github.com/tisnik/go-fedora/blob/master/article_11/01_simple_client.go</a>:</p>

z&nbsp;těchto kroků:</p>
<pre>
package main
&nbsp;
import (
        "fmt"
        "net"
)
&nbsp;
func <strong>main</strong>() {
        conn, err := net.Dial("tcp", "localhost:1234")
        if err != nil {
                println("Connection refused!")
        } else {
                var b [1]byte
                n, err := conn.Read(b[:])
                if err != nil {
                        println("No response!")
                } else {
                        if n == 1 {
                                fmt.Printf("Received %d byte: %v\n", n, b)
                        } else {
                                fmt.Printf("Received %d bytes: %v\n", n, b)
                        }
                }
        }
}
</pre>

<p>O realizovaném připojení si můžeme zjistit i další informace, například lokální i vzdálenou adresu s&nbsp;využitím metod <strong>Conn.LocalAddr()</strong> a <strong>Conn.RemoteAddr()</strong>. Tyto adresy převedeme do tisknutelného tvaru metodou <strong>String()</strong>. <a href="https://github.com/tisnik/go-root/blob/master/article_11/01B_simple_client_headers.go">Upravený klient</a> (stále však nepřipravený pro reálný provoz) může vypadat následovně:</p>

<pre>
package main
&nbsp;
import (
        "fmt"
        "net"
)
&nbsp;
func <strong>main</strong>() {
        conn, err := net.Dial("tcp", "localhost:1234")
        if err != nil {
                println("Connection refused!")
        } else {
                fmt.Printf("Connection established\n")
                fmt.Printf("Remote Address: %s \n", conn.RemoteAddr().String())
                fmt.Printf("Local Address:  %s \n", conn.LocalAddr().String())
&nbsp;
                var b [1]byte
                n, err := conn.Read(b[:])
                if err != nil {
                        println("No response!")
                } else {
                        if n == 1 {
                                fmt.Printf("Received %d byte: %v\n", n, b)
                        } else {
                                fmt.Printf("Received %d bytes: %v\n", n, b)
                        }
                }
        }
}
</pre>

<p>Příklad výsledku po připojení klienta k&nbsp;serveru popsanému <a
href="#k03">v&nbsp;další kapitole</a>:</p>

<pre>
Connection established
Remote Address: 127.0.0.1:1234
Local Address:  127.0.0.1:38082
Received 1 byte: [0]
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že server má pevně zadaný
port 1234, zatímco port otevřený na straně klienta je zvolen
systémem.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Základní kostra serveru komunikujícího přes TCP sokety v&nbsp;jazyku Go</h2>

<p>Nyní si ukažme implementaci serveru, na který se budou připojovat výše
popsaní klienti. Implementace serveru je nepatrně složitější, než implementace
klienta, a to z&nbsp;toho důvodu, že server musí obsloužit větší množství
klientů. V&nbsp;tom nejjednodušším případě použijeme
&bdquo;neforkujícího&ldquo; klienta, který bude implementován následujícím
způsobem:</p>

<ol>

<li>Použijeme konstruktor <strong>net.Listen()</strong>, v&nbsp;němž opět
specifikujeme protokol (viz <a href="#k02">předchozí kapitolu</a>) a síťové
rozhraní s&nbsp;portem 1234.</li>

<li>S&nbsp;využitím příkazu <strong>defer</strong> zajistíme, že se při
ukončení funkce <strong>main</strong> automaticky uzavře i otevřený port.</li>

<li>Dále v&nbsp;nekonečné smyčce budeme čekat na připojení v&nbsp;metodě
<strong>Accept</strong>. Jakmile se nějaký klient pokusí o připojení, vrátí
tato metoda strukturu implementující mj.&nbsp;metody <strong>Read</strong> a
<strong>Write</strong>. A právě s&nbsp;využitím metody <strong>Write</strong>
pošleme klientovi jediný bajt obsahující hodnotu počitadla dotazů.</li>

<li>Spojení se automaticky ukončí díky použití příkazu <strong>defer
l.Close()</strong></li>

</ol>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Konfigurace HAProxy</h2>

<pre>
global
    log stdout format raw local0
    stats socket /tmp/haproxy.sock mode 600 level admin
    stats timeout 2m

defaults
    log global
    mode tcp
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

frontend db
    # receives traffic from clients
    bind :80
    default_backend http

backend http
    # relays the client messages to servers
    server myserver localhost:8080
</pre>

<pre>
    stats socket /tmp/haproxy.sock mode 600 level admin
</pre>

<pre>
global
    log stdout format raw local0
    stats socket /tmp/haproxy_user.sock mode 600 level admin
    stats timeout 2m

defaults
    log global
    mode tcp
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

frontend db
    # receives traffic from clients
    bind :8000
    default_backend http

backend http
    # relays the client messages to servers
    server myserver localhost:8080
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

$ sudo haproxy -f haproxy.cfg
Proxy db started.
Proxy http started.
[WARNING] 096/181552 (561729) : Server http/myserver is going DOWN for maintenance. 0 active and 0 backup servers left. 0 sessions active, 0 requeued, 0 remaining in queue.
Server http/myserver is going DOWN for maintenance. 0 active and 0 backup servers left. 0 sessions active, 0 requeued, 0 remaining in queue.
[ALERT] 096/181552 (561729) : backend 'http' has no server available!
backend http has no server available!
[WARNING] 096/181554 (561729) : Server http/myserver is UP/READY (leaving forced maintenance).
Server http/myserver is UP/READY (leaving forced maintenance).


<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů naprogramovaných
v&nbsp;jazyku Go byly uloženy do Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář, můžete namísto toho
použít odkazy na jednotlivé demonstrační příklady, které naleznete
v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>simple_tcp_client</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A7/simple_tcp_client/">https://github.com/tisnik/go-root/blob/master/article_A7/simple_tcp_client/</a></td></tr>
<tr><td> 2</td><td>simple_tcp_server</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A7/simple_tcp_server/">https://github.com/tisnik/go-root/blob/master/article_A7/simple_tcp_server/</a></td></tr>
<tr><td> 3</td><td>slow_tcp_server</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A7/slow_tcp_server/">https://github.com/tisnik/go-root/blob/master/article_A7/slow_tcp_server/</a></td></tr>
<tr><td> 4</td><td>multi_connection_tcp_server</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A7/multi_connection_tcp_server/">https://github.com/tisnik/go-root/blob/master/article_A7/multi_connection_tcp_server/</a></td></tr>
<tr><td> 5</td><td>simple_unix_socket_client</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A7/simple_unix_socket_client/">https://github.com/tisnik/go-root/blob/master/article_A7/simple_unix_socket_client/</a></td></tr>
<tr><td> 6</td><td>simple_unix_socket_server</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A7/simple_unix_socket_server/">https://github.com/tisnik/go-root/blob/master/article_A7/simple_unix_socket_server/</a></td></tr>
<tr><td> 7</td><td>haproxy_controller</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_A7/haproxy_controller/">https://github.com/tisnik/go-root/blob/master/article_A7/haproxy_controller/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>What Are Unix Sockets and How Do They Work?<br />
<a href="https://www.howtogeek.com/devops/what-are-unix-sockets-and-how-do-they-work/">https://www.howtogeek.com/devops/what-are-unix-sockets-and-how-do-they-work/</a>
</li>

<li>Unix domain socket<br />
<a href="https://en.wikipedia.org/wiki/Unix_domain_socket">https://en.wikipedia.org/wiki/Unix_domain_socket</a>
</li>

<li>Interprocess Communication With Unix Sockets<br />
<a href="https://www.baeldung.com/linux/communicate-with-unix-sockets">https://www.baeldung.com/linux/communicate-with-unix-sockets</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>OSI model<br />
<a href="https://en.wikipedia.org/wiki/OSI_model">https://en.wikipedia.org/wiki/OSI_model</a>
</li>

<li>Datagram<br />
<a href="https://cs.wikipedia.org/wiki/Datagram">https://cs.wikipedia.org/wiki/Datagram</a>
</li>

<li>Softwarová rozhraní systémů UNIX pro přístup k síťovým službám<br />
<a href="https://www.cs.vsb.cz/grygarek/PS/sockets.html">https://www.cs.vsb.cz/grygarek/PS/sockets.html</a>
</li>

<li>HAProxy: Management Guide version 2.4.22-1<br />
<a href="https://docs.haproxy.org/2.4/management.html#9.3">https://docs.haproxy.org/2.4/management.html#9.3</a>
</li>

<li>Síťový socket<br />
<a href="https://cs.wikipedia.org/wiki/S%C3%AD%C5%A5ov%C3%BD_socket">https://cs.wikipedia.org/wiki/S%C3%AD%C5%A5ov%C3%BD_socket</a>
</li>

<li>Unix domain socket<br />
<a href="https://cs.wikipedia.org/wiki/Unix_domain_socket">https://cs.wikipedia.org/wiki/Unix_domain_socket</a>
</li>

<li>unix domain sockets vs. internet sockets<br />
<a href="https://lists.freebsd.org/pipermail/freebsd-performance/2005-February/001143.html">https://lists.freebsd.org/pipermail/freebsd-performance/2005-February/001143.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

