<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Deklarace vlastních uživatelských typů</a></p>
<p><a href="#k03">*** 3. Silná typová kontrola</a></p>
<p><a href="#k04">*** 4. Záznamy (struktury)</a></p>
<p><a href="#k05">*** 5. Inicializace záznamů, pole záznamů</a></p>
<p><a href="#k06">*** 6. Mapy</a></p>
<p><a href="#k07">*** 7. Mapy a struktury</a></p>
<p><a href="#k08">*** 8. Čtení hodnot z&nbsp;map</a></p>
<p><a href="#k09">*** 9. Ukazatele</a></p>
<p><a href="#k10">*** 10. Ukazatel na strukturu</a></p>
<p><a href="#k11">*** 11. Funkce jakožto plnohodnotný datový typ</a></p>
<p><a href="#k12">*** 12. Rozhraní</a></p>
<p><a href="#k13">*** 13. Kanály</a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p></p>

<ul>
    <li>Jednoduché datové typy
        <ul>
            <li>Ordinální
                <ul>
                    <li><a href="https://www.root.cz/clanky/datove-typy-v-programovacim-jazyku-go/#k06">Pravdivostní typ</a> (<i>boolean</i>)</li>
                    <li><a href="https://www.root.cz/clanky/datove-typy-v-programovacim-jazyku-go/#k02">Celočíselné typy</a> (<i>integer</i>)</li>
                </ul>
                </li>
                <li>Neordinální
                <ul>
                    <li><a href="https://www.root.cz/clanky/datove-typy-v-programovacim-jazyku-go/#k05">Hodnoty s&nbsp;plovoucí řádovou čárkou</a> (<i>float</i>)</li>
                    <li><a href="https://www.root.cz/clanky/datove-typy-v-programovacim-jazyku-go/https://www.root.cz/clanky/datove-typy-v-programovacim-jazyku-go/#k05">Komplexní čísla</a> (<i>complex</i>)</li>
                </ul>
            </li>
        </ul>
    </li>
    <li>Složené datové typy
        <ul>
            <li><a href="https://www.root.cz/clanky/datove-typy-v-programovacim-jazyku-go/#k07">Řetězce</a> (<i>string</i>)</li>
            <li><a href="https://www.root.cz/clanky/datove-typy-v-programovacim-jazyku-go/#k10">Pole</a> (<i>array</i>)</li>
            <li><a href="https://www.root.cz/clanky/datove-typy-v-programovacim-jazyku-go/#k12">Řezy</a> (<i>slice</i>)</li>
            <li><a href="#k04">Záznamy</a> (<i>struct</i>)</li>
            <li><a href="#k06">Mapy</a> (<i>map</i>)</li>
        </ul>
    </li>
    <li>Zvláštní datové typy
        <ul>
            <li><a href="#k09">Ukazatel</a> (<i>pointer</i>)</li>
            <li><a href="#k11">Funkce</a> (<i>function</i>)</li>
            <li><a href="#k12">Rozhraní</a> (<i>interface</i>)</li>
            <li><a href="#k13">Kanál</a> (<i>channel</i>)</li>
        </ul>
    </li>
</ul>



<p><a name="k02"></a></p>
<h2 id="k02">2. Deklarace vlastních uživatelských typů</h2>

<p>Nejprve si ukážeme, jakým způsobem je možné v&nbsp;programovacím jazyku Go deklarovat vlastní uživatelské typy. Víme již, že Go je staticky a silně typovaným jazykem, takže možnost vytvářet vlastní datové typy je velmi užitečná a jak uvidíme v&nbsp;dalších příkladech, umožňují uživatelsky definované datové typy tvorbu bezpečnějších aplikací.</p>

<p>Nový datový typ se vytváří pomocí klíčového slova <strong>type</strong>, za nímž se uvede jméno (identifikátor) nového typu a posléze i jeho vlastní definice. Pokud například budeme chtít vytvořit nový datový typ pojmenovaný <strong>Name</strong>, který bude odvozený od klasického řetězce (<strong>string</strong>), můžeme to provést následujícím způsobem:</p>

<pre>
type Name string
</pre>

<p>Proměnnou nazvanou <strong>n</strong>, která má být typu <strong>Name</strong> můžeme vytvořit nám jíž známým způsobem s&nbsp;použitím klíčového slova <strong>var</strong>. Ihned poté je možné této proměnné přiřadit hodnotu (která musí být řetězcem):</p>

<pre>
var n Name
n = "Jan"
</pre>

<p>Podívejme se nyní na nepatrně složitější příklad s&nbsp;definicí třech uživatelských typů pojmenovaných <strong>Id</strong>, <strong>Name</strong> a <strong>Surname</strong>:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
<strong>type Id uint32</strong>
<strong>type Name string</strong>
<strong>type Surname string</strong>
&nbsp;
&nbsp;
func main() {
        var i Id
        i = 0
        fmt.Println(i)
&nbsp;
        var n Name
        var s Surname
&nbsp;
        n = "Jan"
        s = "Novák"
&nbsp;
        fmt.Println(n)
        fmt.Println(s)
}
</pre>

<p>V&nbsp;dalším demonstračním příkladu je ukázáno, jak se vytváří funkce, jejíž parametry mají být určitého konkrétního typu. S&nbsp;tvorbou funkcí jsme se již (i když jen povrchně) seznámili <a href="">v&nbsp;úvodním článku</a> o programovacím jazyce Go:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type Id uint32
type Name string
type Surname string
&nbsp;
&nbsp;
func register_user(<strong>id Id, name Name, surname Surname</strong>) {
        fmt.Printf("Registering: %d %s %s", id, name, surname)
}
&nbsp;
func main() {
        var i Id = 1
        var n Name = "Jan"
        var s Surname = "Novák"
&nbsp;
        register_user(i, n, s)
}
</pre>

<p><div class="rs-tip-major">Poznámka: typ parametrů se uvádí stejně jako typ proměnných až za vlastní identifikátor (tedy naopak, než v&nbsp;céčku o od něj odvozených jazyků). Způsob zápisu použitý v&nbsp;Go je jednodušší: čte/dekóduje se stejně nezávisle na tom, o jak složitou definici typu se jedná.</div></p>

<p>Zkusme si nyní nepatrně složitější příklad, v&nbsp;němž vytvoříme nový datový typ <strong>Mesic</strong> a následně vytvoříme proměnnou typu &bdquo;pole dvanácti měsíců&ldquo;:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type Mesic string
&nbsp;
func main() {
        var mesice [12]Mesic
&nbsp;
        fmt.Println(mesice)
&nbsp;
        mesice[0] = "Leden"
        mesice[1] = "Únor"
        mesice[2] = "Březen"
        mesice[3] = "Duben"
        mesice[4] = "Květen"
        mesice[5] = "Červen"
        mesice[6] = "Červenec"
        mesice[7] = "Srpen"
        mesice[8] = "Září"
        mesice[9] = "Říjen"
        mesice[10] = "Listopad"
        mesice[11] = "Prosinec"
&nbsp;
        fmt.Println(mesice)
}
</pre>

<p>Povšimněte si, že funkce <strong>fmp.Println</strong> dokáže bez problémů vytisknout i hodnotu celého pole:</p>

<pre>
</pre>

<p>Pole samozřejmě můžeme deklarovat a ihned (v&nbsp;jediném příkazu) i inicializovat, což je ukázáno v&nbsp;následujícím příkladu:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type Mesic string
&nbsp;
func main() {
        mesice := [12]Mesic {
                "Leden",
                "Únor",
                "Březen",
                "Duben",
                "Květen",
                "Červen",
                "Červenec",
                "Srpen",
                "Září",
                "Říjen",
                "Listopad",
                "Prosinec"}
&nbsp;
        fmt.Println(mesice)
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Silná typová kontrola</h2>

<p>Důležitost a současně i užitečnost uživatelských datových typů spočívá v&nbsp;tom, že programovací jazyk Go provádí <i>při překladu</i> velmi důkladnou typovou kontrolu. Nedovolí například provést přiřazení hodnoty z&nbsp;proměnné (či výrazu) odlišného typu, i když bráno do důsledků se může interně jednat o totožně reprezentovaná data. Podívejme se ostatně na následující příklad, který nebude možné přeložit, a to z&nbsp;toho důvodu, že se do proměnných typu <strong>Name</strong> a <strong>Surname</strong> snažíme přiřadit hodnotu z&nbsp;proměnné typu <strong>string</strong>. Z&nbsp;pohledu překladače se jedná o rozdílné typy, i když interní způsob uložení <strong>Name</strong> a <strong>Surname</strong> je pochopitelně totožný s&nbsp;řetězcem. Takto silné typové kontroly sice mohou vypadat pedanticky, ovšem filozofií Go je používat vždy explicitní zápis (včetně případného přetypování):</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type Id uint32
type Name string
type Surname string
&nbsp;
func main() {
        var i Id
        i = 0
        fmt.Println(i)
&nbsp;
        var str = "common string"
&nbsp;
        var n Name = str
        var s Surname = str
&nbsp;
        n = "Jan"
        s = "Novák"
&nbsp;
        fmt.Println(n)
        fmt.Println(s)
}
</pre>

<p>Skutečná užitečnost typového systému programovacího jazyka Go se ukáže v&nbsp;následujícím příkladu. V&nbsp;něm máme opět deklarovanou funkci <strong>register_user</strong>, která akceptuje tři parametry s&nbsp;těmito typy <strong>Id</strong>, <strong>Name</strong> a <strong>Surname</strong>. Při volání této funkce však omylem prohodíme jméno a příjmení. Pokud by funkce byla deklarovaná tak, že oba dva parametry by byly typu <strong>string</strong>, překladač by na omyl nemohl přijít. Taktéž pokud by typová kontrola byla prováděna méně pedantským způsobem, například zjištěním, že <strong>Name</strong> i <strong>Surname</strong> jsou odvozeny od řetězce, takže se mezi nimi může provést konverze, překladač by na omyl nemusel upozornit. Ovšem Go používá výše zmíněnou silnou kontrolu, takže chyba bude korektně nahlášena:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type Id uint32
type Name string
type Surname string
&nbsp;
func register_user(id Id, name Name, surname Surname) {
        fmt.Printf("Registering: %d %s %s", id, name, surname)
}
&nbsp;
func main() {
        var i Id = 1
        var n Name = "Jan"
        var s Surname = "Novák"
&nbsp;
        register_user(<strong>i, s, n</strong>)
}
</pre>

<p>Výsledek pokusu o překlad:</p>

<p>V&nbsp;dalším příkladu se uživatelské datové typy nepoužívají; příklad si uvádíme jen proto, abychom si připomněli, že pole se při přiřazování kopírují:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        mesice := [12]string{
                "Leden",
                "Únor",
                "Březen",
                "Duben",
                "Květen",
                "Červen",
                "Červenec",
                "Srpen",
                "Září",
                "Říjen",
                "Listopad",
                "Prosinec"}
&nbsp;
        var mesice2 [12]string = mesice
&nbsp;
        fmt.Println(mesice)
        fmt.Println(mesice2)
}
</pre>

<p>Následující demonstrační příklad je sice velmi podobný příkladu předchozímu, ovšem zde se snažíme o přiřazení polí odlišného datového typu: první je totiž pole typu &bdquo;dvanáct měsíců&ldquo;, druhé pole je typu &bdquo;dvanáct řetězců&ldquo;, což jsou z&nbsp;pohledu překladače opět zcela odlišné a nekompatibilní datové typy:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type Mesic string
&nbsp;
func main() {
        mesice := [12]Mesic{
                "Leden",
                "Únor",
                "Březen",
                "Duben",
                "Květen",
                "Červen",
                "Červenec",
                "Srpen",
                "Září",
                "Říjen",
                "Listopad",
                "Prosinec"}
&nbsp;
        var mesice2 [12]string = mesice
&nbsp;
        fmt.Println(mesice)
        fmt.Println(mesice2)
}
</pre>

<p>Výsledek pokusu o překlad:</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Záznamy (struktury)</h2>

<p>V&nbsp;programovacím jazyku Go je možné deklarovat i složené (a obecně nehomogenní) datové struktury záznamy (<i>record</i>), které jsou ovšem v&nbsp;programovacích jazycích odvozených od céčka známé spíše pod jménem struktury (<i>struct</i>). Záznam se skládá z&nbsp;většího množství pojmenovaných položek, přičemž každá položka má přesně definovaný typ a současně i pozici v&nbsp;záznamu (pozice je důležitá ve chvíli, kdy se hodnota typu záznam vytváří). Nový datový typ záznam se vytváří opět s&nbsp;využitím klíčového slova <strong>type</strong>; celá definice může vypadat následovně:</p>

<pre>
type User <strong>struct</strong> {
        id      uint32
        name    string
        surname string
}
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se mezi definicemi jmen a typů nemusí zapisovat žádné oddělovače. V&nbsp;céčkovských jazycích je na tomto místě nutné použít čárky, programovací jazyk Go tyto (pro něj nadbytečné) syntaktické prvky nevyžaduje.</div></p>

<p>Pro přístup k&nbsp;položkám záznamu se používá standardní tečková notace:</p>

<pre>
var user1 User
&nbsp;
user1.id = 1
user1.name = "Pepek"
user1.surname = "Vyskoč"
</pre>

<p>Záznamy (resp.&nbsp;přesněji řečeno jejich obsah) je možné vytisknout pomocí nám již známé funkce <strong>fmt.Println</strong>:</p>

<pre>
fmt.Println(user1)
</pre>

<p>Podívejme se nyní na úplný demonstrační příklad, v&nbsp;němž napřed definujeme nový datový typ záznam pojmenovaný <strong>User</strong> a následně vytvoříme lokální proměnnou tohoto typu:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type User <strong>struct</strong> {
        id      uint32
        name    string
        surname string
}
&nbsp;
func main() {
        var user1 User
&nbsp;
        fmt.Println(user1)
&nbsp;
        user1.id = 1
        user1.name = "Pepek"
        user1.surname = "Vyskoč"
&nbsp;
        fmt.Println(user1)
}
</pre>

<p>Po spuštění příkladu by se nejdříve měl vypsat čistě inicializovaný záznam (viz poznámka v&nbsp;další kapitole) a posléze záznam s&nbsp;položkami nastavenými uživatelem:</p>

<pre>
{0  }
{1 Pepek Vyskoč}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Inicializace záznamů, pole záznamů</h2>

<p>V&nbsp;navazujícím příkladu je ukázáno, jak lze jediným příkazem deklarovat proměnnou typu záznam a současně i naplnit položky záznamu:</p>

<pre>
user1 := User{
        1,
        "Pepek",
        "Vyskoč"}
</pre>

<p>Zde se již používá odlišný způsob zápisu, v&nbsp;němž je nutné oddělit jednotlivé hodnoty čárkou. Uzavírací složená závorka se zapisuje ihned za poslední položku.</p>

<p><div class="rs-tip-major">Poznámka: hodnoty položek záznamu jsou od ostatních příkazů ve stejném bloku odsazeny o jeden tabelátor.</div></p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type User struct {
        id      uint32
        name    string
        surname string
}
&nbsp;
func main() {
        user1 := User{
                1,
                "Pepek",
                "Vyskoč"}
&nbsp;
        fmt.Println(user1)
&nbsp;
        user1.id = 2
        user1.name = "Josef"
        user1.surname = "Vyskočil"
&nbsp;
        fmt.Println(user1)
}
</pre>

<p>Programovací jazyk Go ve skutečnosti umožňuje ještě jeden způsob deklarace a inicializace záznamu, v&nbsp;němž jsou jednotlivé položky uvedeny <i>explicitně</i>. Tento způsob inicializace je jednoznačnější a navíc bezpečnější ve chvíli, kdy se změní datový typ <strong>User</strong> (například se do něj přidá další položka):</p>

<pre>
user1 := User{
        id:      1,
        name:    "Pepek",
        surname: "Vyskoč"}
</pre>

<p>Opět si ukažme celý příklad:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type User struct {
        id      uint32
        name    string
        surname string
}
&nbsp;
func main() {
        user1 := User{
                id:      1,
                name:    "Pepek",
                surname: "Vyskoč"}
&nbsp;
        fmt.Println(user1)
&nbsp;
        user1.id = 2
        user1.name = "Josef"
        user1.surname = "Vyskočil"
&nbsp;
        fmt.Println(user1)
}
</pre>

<p>Zajímavé je, že záznamy stejného typu (v&nbsp;našem případě záznamy typu <strong>User</strong>) je možné porovnávat operátorem ==. Interně se porovnání provede s&nbsp;jednotlivými položkami, nikoli například tak, že by se pouze zjistily a porovnaly adresy obou porovnávaných záznamů:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type User struct {
        id      uint32
        name    string
        surname string
}
&nbsp;
func main() {
        user1 := User{
                id:      1,
                name:    "Pepek",
                surname: "Vyskoč"}
&nbsp;
        var user2 User
        user2.id = 1
        user2.name = "Pepek"
        user2.surname = "Vyskoč"
&nbsp;
        user3 := User{
                id:      1,
                name:    "Josef",
                surname: "Vyskočil"}
&nbsp;
        fmt.Println(user1 == user2)
        fmt.Println(user1 == user3)
}
</pre>

<p>Po spuštění tohoto příkladu získáme výsledek porovnání <strong>user1 == user2</strong> a <strong>user1 == user3</strong>:</p>

<pre>
</pre>

<p>Podívejme se ještě na způsob vytvoření pole záznamů, což je v&nbsp;praxi poměrně často používaná datová struktura tvořící základ pro <i>řez záznamů</i>. Pole, které může obsahovat tři záznamy typu <strong>User</strong> se vytvoří snadno:</p>

<pre>
var users [3]User
</pre>

<p>Současně se automaticky provede inicializace pole. Již minule jsme se totiž zmínili o tom, že každá datová struktura je po své alokaci v&nbsp;paměti i inicializována (typicky na nulovou hodnotu v&nbsp;případě číselných typů, přes prázdné řetězce až po hodnotu <strong>nil</strong> u některých strukturovaných typů). V&nbsp;případě záznamu se toto pravidlo vztahuje na všechny jeho položky a v&nbsp;případě pole na všechny prvky pole:</p>

<pre>
var users [3]User
fmt.Println(users)
</pre>

<p>Vypíše se:</p>

<pre>
</pre>

<p>Úplný příklad s&nbsp;polem tří záznamů by mohl vypadat následovně:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type User struct {
        id      uint32
        name    string
        surname string
}
&nbsp;
func main() {
        var users [3]User
        fmt.Println(users)
&nbsp;
        user1 := User{
                id:      1,
                name:    "Pepek",
                surname: "Vyskoč"}
&nbsp;
        var user2 User
        user2.id = 1
        user2.name = "Pepek"
        user2.surname = "Vyskoč"
&nbsp;
        user3 := User{
                id:      1,
                name:    "Josef",
                surname: "Vyskočil"}
&nbsp;
        users[0] = user1
        users[1] = user2
        users[2] = user3
        fmt.Println(users)
}
</pre>

<p>V&nbsp;praxi se taktéž někdy setkáme s&nbsp;tím, že se pole záznamů deklaruje a současně i inicializuje v&nbsp;jediném příkazu. Zápis je již nepatrně složitější a je v&nbsp;něm nutné dodržet formátovací pravidla programovacího jazyka Go, zejména použití čárek za jednotlivými prvky inicializovaného pole. Povšimněte si, že každý prvek pole je zapsán formou <i>konstruktoru</i> záznamu:</p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type User struct {
        id      uint32
        name    string
        surname string
}
&nbsp;
func main() {
        var users = [3]User{
                User{
                        id:      1,
                        name:    "Pepek",
                        surname: "Vyskoč"},
                User{
                        id:      2,
                        name:    "Pepek",
                        surname: "Vyskoč"},
                User{
                        id:      3,
                        name:    "Josef",
                        surname: "Vyskočil"},
        }
        fmt.Println(users)
&nbsp;
        var users2 = []User{
                User{
                        id:      1,
                        name:    "Pepek",
                        surname: "Vyskoč"},
                User{
                        id:      2,
                        name:    "Pepek",
                        surname: "Vyskoč"},
                User{
                        id:      3,
                        name:    "Josef",
                        surname: "Vyskočil"},
        }
        fmt.Println(users2)
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Mapy</h2>

<p>V&nbsp;programovacím jazyku Go patří mezi standardní typy i mapy (<i>maps</i>), které se v&nbsp;některých jiných jazycích nazývají asociativní pole či pouze hashe. Tyto strukturované datové typy slouží pro ukládání dvojic klíč-hodnota, přičemž typ klíčů i typ hodnot musí být známý již v&nbsp;době překladu (uplatňují se zde všechna pravidla pro silný typový systém jazyka Go). Ukažme si nyní způsob deklarace proměnné pojmenované <strong>m1</strong>, která je typu mapa celé číslo:řetězec:</p>

<pre>
var m1 map[int]string
</pre>

<p></p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        var m1 map[int]string
        fmt.Println(m1)
&nbsp;
        m1[0] = "nula"
}
</pre>

<pre>
map[]
panic: assignment to entry in nil map

goroutine 1 [running]:
main.main()
        /home/tester/go-root/article_03/15_uninitialized_map.go:16 +0x76
exit status 2
</pre>

https://golang.org/pkg/builtin/#make

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        var m1 map[int]string = make(map[int]string)
        fmt.Println(m1)
&nbsp;
        m1[0] = "nula"
        m1[1] = "jedna"
        m1[2] = "dva"
        m1[3] = "tri"
        m1[4] = "ctyri"
        m1[5] = "pet"
        m1[6] = "sest"
&nbsp;
        fmt.Println(m1)
}
</pre>


<p><a name="k07"></a></p>
<h2 id="k07">7. Mapy a struktury</h2>

<p></p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type User struct {
        id      uint32
        name    string
        surname string
}
&nbsp;
func main() {
        m1 := make(map[string]User)
        fmt.Println(m1)
&nbsp;
        m1["prvni"] = User{
                id:      1,
                name:    "Pepek",
                surname: "Vyskoč"}
&nbsp;
        m1["druhy"] = User{
                id:      2,
                name:    "Josef",
                surname: "Vyskočil"}
&nbsp;
        fmt.Println(m1)
}
</pre>


<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type Key struct {
        id   uint32
        role string
}
&nbsp;
type User struct {
        id      uint32
        name    string
        surname string
}
&nbsp;
func main() {
        m1 := make(map[Key]User)
        fmt.Println(m1)
&nbsp;
        m1[Key{1, "admin"}] = User{
                id:      1,
                name:    "Pepek",
                surname: "Vyskoč"}
&nbsp;
        m1[Key{2, "user"}] = User{
                id:      2,
                name:    "Josef",
                surname: "Vyskočil"}
&nbsp;
        fmt.Println(m1)
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Čtení hodnot z&nbsp;map</h2>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        m1 := make(map[string]int)
        fmt.Println(m1)
&nbsp;
        m1["nula"] = 0
        m1["jedna"] = 1
        m1["dva"] = 2
        m1["tri"] = 3
        m1["ctyri"] = 4
        m1["pet"] = 5
        m1["sest"] = 6
&nbsp;
        fmt.Println(m1)
&nbsp;
        value, exist := m1["dva"]
&nbsp;
        if exist {
                fmt.Println("Found:", value)
        } else {
                fmt.Println("Not found")
        }
&nbsp;
        value, exist = m1["sto"]
&nbsp;
        if exist {
                fmt.Println("Found:", value)
        } else {
                fmt.Println("Not found")
        }
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Ukazatele</h2>

<p></p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func main() {
        var i int = 42
&nbsp;
        fmt.Println(i)
&nbsp;
        var p_i *int
        p_i = &amp;i
&nbsp;
        fmt.Println(p_i)
        fmt.Println(*p_i)
&nbsp;
        *p_i++
&nbsp;
        fmt.Println(i)
        fmt.Println(*p_i)
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Ukazatel na strukturu</h2>

<p></p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type User struct {
        id      uint32
        name    string
        surname string
}
&nbsp;
func main() {
        var u User
&nbsp;
        u.id = 1
        u.name = "Pepek"
        u.surname = "Vyskoč"
&nbsp;
        fmt.Println(u)
&nbsp;
        var p_u *User
        p_u = &amp;u
&nbsp;
        fmt.Println(p_u)
        fmt.Println(*p_u)
&nbsp;
        (*p_u).id = 10000
        fmt.Println(*p_u)
&nbsp;
        p_u.id = 20000
        fmt.Println(*p_u)
}
</pre>

Selectors
https://golang.org/ref/spec#Selectors


<p><a name="k11"></a></p>
<h2 id="k11">11. Funkce jakožto plnohodnotný datový typ</h2>

<p></p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func funkce1() {
        fmt.Println("funkce1")
}
&nbsp;
func funkce2() {
        fmt.Println("funkce2")
}
&nbsp;
func main() {
        var a func()
        fmt.Println(a)
&nbsp;
        a = funkce1
        fmt.Println(a)
        a()
&nbsp;
        a = funkce2
        fmt.Println(a)
        a()
}
</pre>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
func funkce1(x int, y int) int {
        return x + y
}
&nbsp;
func funkce2(x int, y int) int {
        return x * y
}
&nbsp;
func main() {
        var a func(int, int) int
        fmt.Println(a)
&nbsp;
        a = funkce1
        fmt.Println(a)
        fmt.Println(a(10, 20))
&nbsp;
        a = funkce2
        fmt.Println(a)
        fmt.Println(a(10, 20))
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Rozhraní</h2>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Kanály</h2>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>

<pre>
package main
&nbsp;
import "fmt"
&nbsp;
type no_param_function func() int
type two_int_param_function func(int, int) int
&nbsp;
func funkce1() int {
        return 42
}
&nbsp;
func funkce2() int {
        return -1
}
&nbsp;
func funkce3(x int, y int) int {
        return x + y
}
&nbsp;
func funkce4(x int, y int) int {
        return x * y
}
&nbsp;
func main() {
        var a no_param_function
        var b two_int_param_function
&nbsp;
        fmt.Println(a)
        fmt.Println(b)
&nbsp;
        a = funkce1
        fmt.Println(a)
        fmt.Println(a())
&nbsp;
        a = funkce2
        fmt.Println(a)
        fmt.Println(a())
&nbsp;
        b = funkce3
        fmt.Println(b)
        fmt.Println(b(10, 20))
&nbsp;
        b = funkce4
        fmt.Println(b)
        fmt.Println(b(10, 20))
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
doslova několik kilobajtů), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_user_types.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/01_user_types.go">https://github.com/tisnik/go-fedora/blob/master/article_03/01_user_types.go</a></td></tr>
<tr><td> 2</td><td>02_type_func_params.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/02_type_func_params.go">https://github.com/tisnik/go-fedora/blob/master/article_03/02_type_func_params.go</a></td></tr>
<tr><td> 3</td><td>03_typed_array.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/03_typed_array.go">https://github.com/tisnik/go-fedora/blob/master/article_03/03_typed_array.go</a></td></tr>
<tr><td> 4</td><td>04_typed_array_B.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/04_typed_array_B.go">https://github.com/tisnik/go-fedora/blob/master/article_03/04_typed_array_B.go</a></td></tr>
<tr><td> 5</td><td>05_user_type_checks.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/05_user_type_checks.go">https://github.com/tisnik/go-fedora/blob/master/article_03/05_user_type_checks.go</a></td></tr>
<tr><td> 6</td><td>06_type_check_func.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/06_type_check_func.go">https://github.com/tisnik/go-fedora/blob/master/article_03/06_type_check_func.go</a></td></tr>
<tr><td> 7</td><td>07_typed_array_check.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/07_typed_array_check.go">https://github.com/tisnik/go-fedora/blob/master/article_03/07_typed_array_check.go</a></td></tr>
<tr><td> 8</td><td>08_typed_array_check.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/08_typed_array_check.go">https://github.com/tisnik/go-fedora/blob/master/article_03/08_typed_array_check.go</a></td></tr>
<tr><td> 9</td><td>09_struct.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/09_struct.go">https://github.com/tisnik/go-fedora/blob/master/article_03/09_struct.go</a></td></tr>
<tr><td>10</td><td>10_struct_init.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/10_struct_init.go">https://github.com/tisnik/go-fedora/blob/master/article_03/10_struct_init.go</a></td></tr>
<tr><td>11</td><td>11_better_struct_init.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/11_better_struct_init.go">https://github.com/tisnik/go-fedora/blob/master/article_03/11_better_struct_init.go</a></td></tr>
<tr><td>12</td><td>12_struct_comparison.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/12_struct_comparison.go">https://github.com/tisnik/go-fedora/blob/master/article_03/12_struct_comparison.go</a></td></tr>
<tr><td>13</td><td>13_array_of_structs.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/13_array_of_structs.go">https://github.com/tisnik/go-fedora/blob/master/article_03/13_array_of_structs.go</a></td></tr>
<tr><td>14</td><td>14_array_of_structs.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/14_array_of_structs.go">https://github.com/tisnik/go-fedora/blob/master/article_03/14_array_of_structs.go</a></td></tr>
<tr><td>15</td><td>15_uninitialized_map.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/15_uninitialized_map.go">https://github.com/tisnik/go-fedora/blob/master/article_03/15_uninitialized_map.go</a></td></tr>
<tr><td>16</td><td>16_initialized_map.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/16_initialized_map.go">https://github.com/tisnik/go-fedora/blob/master/article_03/16_initialized_map.go</a></td></tr>
<tr><td>17</td><td>17_initialized_map.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/17_initialized_map.go">https://github.com/tisnik/go-fedora/blob/master/article_03/17_initialized_map.go</a></td></tr>
<tr><td>18</td><td>18_map_and_struct.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/18_map_and_struct.go">https://github.com/tisnik/go-fedora/blob/master/article_03/18_map_and_struct.go</a></td></tr>
<tr><td>19</td><td>19_map_and_struct_B.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/19_map_and_struct_B.go">https://github.com/tisnik/go-fedora/blob/master/article_03/19_map_and_struct_B.go</a></td></tr>
<tr><td>20</td><td>20_reading_from_maps.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/20_reading_from_maps.go">https://github.com/tisnik/go-fedora/blob/master/article_03/20_reading_from_maps.go</a></td></tr>
<tr><td>21</td><td>21_basic_pointers.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/21_basic_pointers.go">https://github.com/tisnik/go-fedora/blob/master/article_03/21_basic_pointers.go</a></td></tr>
<tr><td>22</td><td>22_pointer_to_struct.go</td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/22_pointer_to_struct.go">https://github.com/tisnik/go-fedora/blob/master/article_03/22_pointer_to_struct.go</a></td></tr>
<tr><td>23</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/">https://github.com/tisnik/go-fedora/blob/master/article_03/</a></td></tr>
<tr><td>24</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/">https://github.com/tisnik/go-fedora/blob/master/article_03/</a></td></tr>
<tr><td>25</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/">https://github.com/tisnik/go-fedora/blob/master/article_03/</a></td></tr>
<tr><td>26</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/">https://github.com/tisnik/go-fedora/blob/master/article_03/</a></td></tr>
<tr><td>27</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/">https://github.com/tisnik/go-fedora/blob/master/article_03/</a></td></tr>
<tr><td>28</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/">https://github.com/tisnik/go-fedora/blob/master/article_03/</a></td></tr>
<tr><td>29</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/">https://github.com/tisnik/go-fedora/blob/master/article_03/</a></td></tr>
<tr><td>30</td><td></td><td></td><td><a href="https://github.com/tisnik/go-fedora/blob/master/article_03/article_03/">https://github.com/tisnik/go-fedora/blob/master/article_03/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go <br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

<!--
2018-08-0x: 0 hod
2018-08-0x: 0 hod
2018-08-0x: 0 hod
2018-08-0x: 0 hod
2018-08-0x: 0 hod
publikace:  0 hod
-----------------
            0 hod
-->
