<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Multimediální knihovna Pyglet: práce se vstupními zařízeními</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Multimediální knihovna Pyglet: práce se vstupními zařízeními</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Nedílnou součástí prakticky všech multimediálních aplikací a samozřejmě také her je čtení stavu vstupních zařízení, tj.&nbsp;především klávesnice, myši, joysticků či dotykové obrazovky. I tuto oblast je možné pokrýt funkcemi z&nbsp;knihovny Pyglet. V&nbsp;dnešním článku se zaměříme na popis práce s&nbsp;klávesnicí, což není zdaleka tak triviální, jak by se mohlo na první pohled zdát.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Multimediální knihovna Pyglet: práce se vstupními zařízeními</a></p>
<p><a href="#k02">2. Událost <strong>on_key_press</strong></a></p>
<p><a href="#k03">3. Událost <strong>on_key_release</strong></a></p>
<p><a href="#k04">4. První demonstrační příklad: zachycení události stisku a puštění klávesy</a></p>
<p><a href="#k05">5. Modifikátory (Shift, Control, Alt atd.)</a></p>
<p><a href="#k06">*** 6. Druhý demonstrační příklad: test modifikátorů bez rozlišení, zda se nachází na levé či pravé straně klávesnice</a></p>
<p><a href="#k07">*** 7. Třetí demonstrační příklad: vizuální zobrazení stisku kláves Shift a Control</a></p>
<p><a href="#k08">*** 8. Pole se stavy všech kláves</a></p>
<p><a href="#k09">*** 9. Čtvrtý demonstrační příklad: využití pole se stavy všech kláves</a></p>
<p><a href="#k10">*** 10. Událost <strong>on_text</strong> aneb detekce napsaných (Unicode) znaků</a></p>
<p><a href="#k11">*** 11. Pátý demonstrační příklad: použití události typu <strong>on_text</strong></a></p>
<p><a href="#k12">*** 12. Problematika pohybu v&nbsp;textu a její řešení: událost typu <strong>on_text_motion</strong></a></p>
<p><a href="#k13">*** 13. Šestý demonstrační příklad: využití události <strong>on_text_motion</strong></a></p>
<p><a href="#k14">*** 14. Sedmý demonstrační příklad: událost <strong>on_text_motion</strong> a pohyb spritu ve scéně</a></p>
<p><a href="#k15">15. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Multimediální knihovna Pyglet: práce se vstupními zařízeními</h2>

<p></p>

<p>Čtení aktuálního stavu vstupních zařízení se většinou provádí přes takzvané <i>callback</i> funkce</p>


<p><a name="k02"></a></p>
<h2 id="k02">2. Událost <strong>on_key_press</strong></h2>

<p>Základní callback funkcí, která se používá při práci s&nbsp;klávesnicí, je funkce nazvaná <strong>on_key_press</strong>. Tato funkce musí být přes anotaci <strong>@jméno_proměnné_reprezentující_okno.event</strong> navázána na vybrané okno. Jinými slovy to znamená, že je možné pro každé okno používat odlišnou callback funkci (na druhou stranu mají typicky hry jen jediné okno zobrazené v&nbsp;režimu <i>fullscreen</i>, což celou situaci zjednodušuje). Tato callback funkce se zavolá ve chvíli, kdy je stisknuta nějaká klávesa. Funkci se předávají dva parametry &ndash; konstanta reprezentující stisknutou klávesu (kód klávesy) a další konstanta, která je složena z&nbsp;příznakových bitů přiřazených každému modifikátoru (což typicky bývají klávesy <strong>Shift</strong>, <strong>Control</strong>, <strong>Alt</strong> atd.). Nejjednodušší podoba této funkce tedy může vypadat následovně:</p>

<pre>
<strong>@window.event</strong>
def on_key_press(symbol, modifiers):
    pass
</pre>

<p>Důležité upozornění: na PC a navíc jen u některých kláves odpovídá hodnota parametru <strong>symbol</strong> ASCII kódu stisknuté klávesy, ovšem není dobré se na toto chování spoléhat. Namísto toho je nutné pro porovnání používat konstanty <strong>pyglet.window.key.JMÉNO_KLÁVESY</strong>. Taktéž se může stát, že symbol obsahuje zdánlivě zcela nesmyslnou (vysokou) hodnotu. To nastává ve chvíli, kdy je stisknuta nějaká multimediální klávesa, klávesa <strong>Fn</strong> na některých noteboocích, klávesa s&nbsp;akcentovaným znakem u národních klávesnic atd.</p>

<p>K&nbsp;symbolům kláves lze přistupovat například takto:</p>

<table>
<tr><th>Konstanta</th><th>Klávesa</th></tr>
<tr><td>pyglet.window.key.A</td><td>klávesa A</td></tr>
<tr><td>pyglet.window.key._1</td><td>klávesa 1 (nutno použít podtržítko, neboť 1 není identifikátor)</td></tr>
<tr><td>pyglet.window.key.NUM_1</td><td>klávesa 1 na numerickém bloku</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>pyglet.window.key.SPACE</td><td>mezerník</td></tr>
<tr><td>pyglet.window.key.ENTER</td><td>Enter/Return na hlavním bloku</td></tr>
<tr><td>pyglet.window.key.RETURN</td><td>dtto</td></tr>
<tr><td>pyglet.window.key.NUM_ENTER</td><td>Enter/Return na numerickém bloku</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>pyglet.window.key.UP</td><td>kurzorová šipka</td></tr>
<tr><td>pyglet.window.key.DOWN</td><td>kurzorová šipka</td></tr>
<tr><td>pyglet.window.key.LEFT</td><td>kurzorová šipka</td></tr>
<tr><td>pyglet.window.key.RIGHT</td><td>kurzorová šipka</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>pyglet.window.key.HOME</td><td>další klávesy pro pohyb kurzoru</td></tr>
<tr><td>pyglet.window.key.END</td><td>další klávesy pro pohyb kurzoru</td></tr>
<tr><td>pyglet.window.key.PAGEUP</td><td>další klávesy pro pohyb kurzoru</td></tr>
<tr><td>pyglet.window.key.PAGEDOWN</td><td>další klávesy pro pohyb kurzoru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>pyglet.window.key.F1</td><td>klávesa F1</td></tr>
</table>

<p>Poznámka: rozlišení mezi znakem &bdquo;A&ldquo; a &bdquo;a&ldquo; je nutné řešit programově testem stisknutých modifikátorů (zde konkrétně <strong>Shift</strong>), protože se do callback funkcí stále bude předávat jen symbol <strong>pyglet.window.key.A</strong> (žádný symbol <strong>pyglet.window.key.a</strong> ani neexistuje).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Událost <strong>on_key_release</strong></h2>

<p>Opakem callback funkce <strong>on_key_press</strong> je funkce <strong>on_key_release</strong>, které se při jejím zavolání předají stejné parametry, tedy kód puštěné klávesy a případné modifikátory:</p>

<pre>
<strong>@window.event</strong>
def on_key_release(symbol, modifiers):
    pass
</pre>

<p>Tuto funkci je nutné použít pro zjištění, zda a kdy je klávesa puštěna, a to z&nbsp;toho důvodu, že dvojice callback funkcí <strong>on_key_press</strong> + <strong>on_key_release</strong> neberou do úvahy automatické opakování stisknutých kláves. To jinými slovy znamená, že když dojde ke stisku klávesy, jejím podržení (řekněme deset sekund) a puštění, zavolá se funkce <strong>on_key_press</strong> jen jedenkrát (při stisku, tedy ihned na začátku) a <strong>on_key_release</strong> taktéž jedenkrát (po puštění).</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. První demonstrační příklad: zachycení události stisku a puštění klávesy</h2>

<p>Použití callback funkcí <strong>on_key_press</strong> a <strong>on_key_release</strong> si ukážeme v&nbsp;dnešním prvním demonstračním příkladu, v&nbsp;němž je nejdříve vytvořeno okno a následně textové návěští použité pro výpis zpráv:</p>

<pre>
def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def create_label():
    return pyglet.text.Label("Event:",
                             font_size=18,
                             x=window.width//4,
                             y=window.height//2,
                             anchor_x='left',
                             anchor_y='center')


window = create_window(640, 480)
label = create_label()
</pre>

<p>Následně jsou obě callback funkce zaregistrovány:</p>

<pre>
@window.event
def on_key_press(symbol, modifiers):
    display_key_event(symbol, modifiers, "pressed")


@window.event
def on_key_release(symbol, modifiers):
    display_key_event(symbol, modifiers, "released")
</pre>

<p>Při každém stisku klávesy či jejím puštění se do okna (přes textové návěští) vypíše symbol stisknuté/puštěné klávesy.</p>

<pre>
def display_key_event(symbol, modifiers, action):
    text = format("Event: key with code %d %s" % (symbol, action))
    label.text = text
    print(symbol)
    on_draw()
</pre>

<p>Úplný zdrojový kód prvního demonstračního příkladu vypadá takto:</p>

<pre>
#!/usr/bin/env python

import pyglet


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def create_label():
    return pyglet.text.Label("Event:",
                             font_size=18,
                             x=window.width//4,
                             y=window.height//2,
                             anchor_x='left',
                             anchor_y='center')


window = create_window(640, 480)
label = create_label()


def display_key_event(symbol, modifiers, action):
    text = format("Event: key with code %d %s" % (symbol, action))
    label.text = text
    print(symbol)
    on_draw()


@window.event
def on_draw():
    window.clear()
    label.draw()


@window.event
def on_key_press(symbol, modifiers):
    display_key_event(symbol, modifiers, "pressed")


@window.event
def on_key_release(symbol, modifiers):
    display_key_event(symbol, modifiers, "released")


pyglet.app.run()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Modifikátory (Shift, Control, Alt atd.)</h2>

<p>V&nbsp;předchozích kapitolách jsme se zmínili o druhém parametru předávaném do funkcí <strong>on_key_press</strong> a <strong>on_key_release</strong>. Tento parametr je reprezentován celým číslem, jehož jednotlivé bity určují, které modifikátory jsou stisknuty současně s&nbsp;danou klávesou. Rozpoznány mohou být následující modifikátory (ovšem pochopitelně zdaleka ne všechny příslušné klávesy naleznete na jedné klávesnici):</p>

<table>
<tr><th>Modifikátor</th><th>Poznámka</th></tr>
<tr><td>MOD_SHIFT</td><td>&nbsp;</td></tr>
<tr><td>MOD_CTRL</td><td>&nbsp;</td></tr>
<tr><td>MOD_ALT</td><td>není na Mac OS X</td></tr>
<tr><td>MOD_WINDOWS</td><td>není na Mac OS X</td></tr>
<tr><td>MOD_COMMAND</td><td>pouze na Mac OS X</td></tr>
<tr><td>MOD_OPTION</td><td>pouze na Mac OS X</td></tr>
<tr><td>MOD_CAPSLOCK</td><td>&nbsp;</td></tr>
<tr><td>MOD_NUMLOCK</td><td>&nbsp;</td></tr>
<tr><td>MOD_SCROLLLOCK</td><td>&nbsp;</td></tr>
<tr><td>MOD_ACCEL</td><td>může nahradit buď MOD_CTRL nebo MOD_COMMAND</td></tr>
</table>

<p>Na většině klávesnic nalezneme klávesy <strong>Shift</strong>, <strong>Ctrl/Control</strong> a <strong>Alt</strong>, takže test na stisk těchto kláves (společně s&nbsp;další klávesou) může vypadat například takto:</p>

<pre>
<strong>@window.event</strong>
def on_key_press(symbol, modifiers):
    if modifiers &amp; pyglet.window.key.MOD_SHIFT:
        foo()
    if modifiers &amp; pyglet.window.key.MOD_CTRL:
        bar()
    if modifiers &amp; pyglet.window.key.MOD_ALT:
        baz()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Druhý demonstrační příklad: test modifikátorů bez rozlišení, zda se nachází na levé či pravé straně klávesnice</h2>

<p></p>

<pre>
#!/usr/bin/env python

import pyglet


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def create_label1():
    return pyglet.text.Label("Event:",
                             font_size=18,
                             x=window.width//4,
                             y=window.height//2,
                             anchor_x='left',
                             anchor_y='center')


def create_label2():
    return pyglet.text.Label("Modifiers:",
                             font_size=16,
                             x=window.width//4,
                             y=window.height//2 - 32,
                             anchor_x='left',
                             anchor_y='center')


window = create_window(640, 480)
label1 = create_label1()
label2 = create_label2()


def display_key_event(symbol, modifiers, action):
    text = format("Event: key with code %d %s" % (symbol, action))
    label1.text = text
    text = "Modifiers: "

    if modifiers &amp; pyglet.window.key.MOD_SHIFT:
        text = text + "Shift "
    if modifiers &amp; pyglet.window.key.MOD_CTRL:
        text = text + "Ctrl "
    if modifiers &amp; pyglet.window.key.MOD_ALT:
        text = text + "Alt "

    label2.text = text

    on_draw()
    print(symbol, modifiers)


@window.event
def on_draw():
    window.clear()
    label1.draw()
    label2.draw()


@window.event
def on_key_press(symbol, modifiers):
    display_key_event(symbol, modifiers, "pressed")


@window.event
def on_key_release(symbol, modifiers):
    display_key_event(symbol, modifiers, "released")


pyglet.app.run()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Třetí demonstrační příklad: vizuální zobrazení stisku kláves Shift a Control</h2>

<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def create_gray_label(text, x, y, anchor_x, anchor_y):
    return pyglet.text.Label(text,
                             font_size=36,
                             x=x,
                             y=y,
                             anchor_x=anchor_x,
                             anchor_y=anchor_y,
                             color=GRAY)


def create_label_left_control():
    return create_gray_label('Ctrl', 10, 10, 'left', 'bottom')


def create_label_right_control():
    return create_gray_label('Ctrl', window.width-10, 10, 'right', 'bottom')


def create_label_left_shift():
    return create_gray_label('Shift', 10, 60, 'left', 'bottom')


def create_label_right_shift():
    return create_gray_label('Shift', window.width-10, 60, 'right', 'bottom')


window = create_window(640, 480)
label_left_control = create_label_left_control()
label_right_control = create_label_right_control()
label_left_shift = create_label_left_shift()
label_right_shift = create_label_right_shift()


def display_key_event(symbol, modifiers, new_color):
    if symbol == pyglet.window.key.LCTRL:
        label_left_control.color = new_color
    elif symbol == pyglet.window.key.RCTRL:
        label_right_control.color = new_color
    elif symbol == pyglet.window.key.LSHIFT:
        label_left_shift.color = new_color
    elif symbol == pyglet.window.key.RSHIFT:
        label_right_shift.color = new_color
    on_draw()


@window.event
def on_draw():
    window.clear()
    label_left_control.draw()
    label_right_control.draw()
    label_left_shift.draw()
    label_right_shift.draw()


@window.event
def on_key_press(symbol, modifiers):
    display_key_event(symbol, modifiers, RED)


@window.event
def on_key_release(symbol, modifiers):
    display_key_event(symbol, modifiers, GRAY)


pyglet.app.run()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Pole se stavy všech kláves</h2>

<pre>
window = create_window(640, 480)
keys = pyglet.window.key.KeyStateHandler()
window.push_handlers(keys)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Čtvrtý demonstrační příklad: využití pole se stavy všech kláves</h2>

<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def create_gray_label(text, x, y, anchor_x, anchor_y):
    return pyglet.text.Label(text,
                             font_size=36,
                             x=x,
                             y=y,
                             anchor_x=anchor_x,
                             anchor_y=anchor_y,
                             color=GRAY)


def create_label_left_control():
    return create_gray_label('Ctrl', 10, 10, 'left', 'bottom')


def create_label_right_control():
    return create_gray_label('Ctrl', window.width-10, 10, 'right', 'bottom')


window = create_window(640, 480)
keys = pyglet.window.key.KeyStateHandler()
window.push_handlers(keys)

label_left_control = create_label_left_control()
label_right_control = create_label_right_control()


@window.event
def on_draw():
    window.clear()

    if keys[pyglet.window.key.LCTRL]:
        label_left_control.color = RED
    else:
        label_left_control.color = GRAY

    if keys[pyglet.window.key.RCTRL]:
        label_right_control.color = RED
    else:
        label_right_control.color = GRAY

    label_left_control.draw()
    label_right_control.draw()


pyglet.app.run()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Událost <strong>on_text</strong> aneb detekce napsaných (Unicode) znaků</h2>

<pre>
<strong>@window.event</strong>
def on_text(text):
    pass
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Pátý demonstrační příklad: použití události typu <strong>on_text</strong></h2>

<pre>
#!/usr/bin/env python

import pyglet


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def create_label():
    return pyglet.text.Label("Event:",
                             font_size=18,
                             x=10,
                             y=window.height//2,
                             anchor_x='left',
                             anchor_y='center')


window = create_window(640, 480)
label = create_label()


@window.event
def on_draw():
    window.clear()
    label.draw()


@window.event
def on_text(text):
    text = format("Event: following text has been entered: '%s'" % text)
    label.text = text
    print(text)
    on_draw()


pyglet.app.run()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Problematika pohybu v&nbsp;textu a její řešení: událost typu <strong>on_text_motion</strong></h2>

<pre>
<strong>@window.event</strong>
def on_text_motion(motion):
    pass
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Šestý demonstrační příklad: využití události <strong>on_text_motion</strong></h2>

<pre>
#!/usr/bin/env python

import pyglet


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def create_label():
    return pyglet.text.Label("Motion:",
                             font_size=18,
                             x=10,
                             y=window.height//2,
                             anchor_x='left',
                             anchor_y='center')


window = create_window(640, 480)
label = create_label()


@window.event
def on_draw():
    window.clear()
    label.draw()


@window.event
def on_text_motion(motion):
    global x
    if motion == pyglet.window.key.MOTION_LEFT:
        label.text = "Motion: left"
    elif motion == pyglet.window.key.MOTION_RIGHT:
        label.text = "Motion: right"
    print(motion)
    on_draw()


pyglet.app.run()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Sedmý demonstrační příklad: událost <strong>on_text_motion</strong> a pohyb spritu ve scéně</h2>

<pre>
#!/usr/bin/env python

import pyglet


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def make_sprite(filename, window):
    image_stream = open("gnome-globe.png", "rb")
    image = pyglet.image.load('gnome-globe.png', file=image_stream)

    sprite = pyglet.sprite.Sprite(image)
    # vycentrovani spritu
    sprite.x = window.width / 2 - image.width / 2
    sprite.y = window.height / 2 - image.height / 2
    sprite.step = 5
    return sprite


window = create_window(640, 480)
sprite = make_sprite("gnome-globe.png", window)


@window.event
def on_draw():
    window.clear()
    sprite.draw()


@window.event
def on_text_motion(motion):
    global sprite
    if motion == pyglet.window.key.MOTION_LEFT:
        sprite.x -= sprite.step
    elif motion == pyglet.window.key.MOTION_RIGHT:
        sprite.x += sprite.step
    elif motion == pyglet.window.key.MOTION_UP:
        sprite.y += sprite.step
    elif motion == pyglet.window.key.MOTION_DOWN:
        sprite.y -= sprite.step
    on_draw()


pyglet.app.run()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popsané demonstrační příklady byly uloženy do Git repositáře dostupného na adrese <a href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>. Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti klonovat celý repositář. Pro jejich spuštění je samozřejmě nutné mít nainstalovanou jak knihovnu Pyglet, tak i podpůrné grafické knihovny OpenGL a GLU (což se většinou provede automaticky v&nbsp;rámci instalace balíčku s&nbsp;Pygletem, viz též <a href="https://mojefedora.cz/multimedialni-knihovna-pyglet/">úvodní díl tohoto seriálu</a>):</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>69_on_keypress.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/69_on_keypress.py">https://github.com/tisnik/presentations/blob/master/pyglet/69_on_keypress.py</a></td></tr>
<tr><td>70_keyboard_modifiers.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/70_keyboard_modifiers.py">https://github.com/tisnik/presentations/blob/master/pyglet/70_keyboard_modifiers.py</a></td></tr>
<tr><td>71_shift_ctrl_alt.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/71_shift_ctrl_alt.py">https://github.com/tisnik/presentations/blob/master/pyglet/71_shift_ctrl_alt.py</a></td></tr>
<tr><td>72_key_state.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/72_key_state.py">https://github.com/tisnik/presentations/blob/master/pyglet/72_key_state.py</a></td></tr>
<tr><td>73_on_text.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/73_on_text.py">https://github.com/tisnik/presentations/blob/master/pyglet/73_on_text.py</a></td></tr>
<tr><td>74_on_text_motion.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/74_on_text_motion.py">https://github.com/tisnik/presentations/blob/master/pyglet/74_on_text_motion.py</a></td></tr>
<tr><td>75_text_motion_cursor.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/75_text_motion_cursor.py">https://github.com/tisnik/presentations/blob/master/pyglet/75_text_motion_cursor.py</a></td></tr>
</table>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>Class pyglet.graphics.vertexdomain.VertexList<br />
<a href="https://pythonhosted.org/pyglet/api/pyglet.graphics.vertexdomain.VertexList-class.html">https://pythonhosted.org/pyglet/api/pyglet.graphics.vertexdomain.VertexList-class.html</a>
</li>

<li>Class pyglet.graphics.vertexdomain.VertexDomain<br />
<a href="https://pythonhosted.org/pyglet/api/pyglet.graphics.vertexdomain.VertexDomain-class.html">https://pythonhosted.org/pyglet/api/pyglet.graphics.vertexdomain.VertexDomain-class.html</a>
</li>

<li>Pyglet: Module Hierarchy<br />
<a href="https://pythonhosted.org/pyglet/api/module-tree.html">https://pythonhosted.org/pyglet/api/module-tree.html</a>
</li>

<li>Learning Modern OpenGL<br />
<a href="https://www.codeproject.com/articles/771225/learning-modern-opengl">https://www.codeproject.com/articles/771225/learning-modern-opengl</a>
</li>

<li>OpenGL Utility Library<br />
<a href="https://en.wikipedia.org/wiki/OpenGL_Utility_Library">https://en.wikipedia.org/wiki/OpenGL_Utility_Library</a>
</li>

<li>GLU Specification<br />
<a href="https://www.opengl.org/registry/doc/glu1.3.pdf">https://www.opengl.org/registry/doc/glu1.3.pdf</a>
</li>

<li>The Perlin noise math FAQ<br />
<a href="https://mzucker.github.io/html/perlin-noise-math-faq.html">https://mzucker.github.io/html/perlin-noise-math-faq.html</a>
</li>

<li>Perlin noise<br />
<a href="https://en.wikipedia.org/wiki/Perlin_noise">https://en.wikipedia.org/wiki/Perlin_noise</a>
</li>

<li>Perlin Noise Generator (Python recipe)<br />
<a href="http://code.activestate.com/recipes/578470-perlin-noise-generator/">http://code.activestate.com/recipes/578470-perlin-noise-generator/</a>
</li>

<li>Simplex noise demystified<br />
<a href="http://www.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf">http://www.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf</a>
</li>

<li>glTexEnv - příkaz OpenGL<br />
<a href="https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glTexEnv.xml">https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glTexEnv.xml</a>
</li>

<li>glGetTexEnv - příkaz OpenGL<br />
<a href="https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glGetTexEnv.xml">https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glGetTexEnv.xml</a>
</li>

<li>Pyglet Home Page<br />
<a href="https://bitbucket.org/pyglet/pyglet/wiki/Home">https://bitbucket.org/pyglet/pyglet/wiki/Home</a>
</li>

<li>Pyglet: dokumentace k verzi 1.2<br />
<a href="https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/">https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/</a>
</li>

<li>Dokumentace k verzi 1.2 ve formátu PDF<br />
<a href="https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/">https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/</a>
</li>

<li>PyOpenGL<br />
<a href="http://pyopengl.sourceforge.net/">http://pyopengl.sourceforge.net/</a>
</li>

<li>The #! magic, details about the shebang/hash-bang mechanism on various Unix flavours<br />
<a href="https://www.in-ulm.de/~mascheck/various/shebang/">https://www.in-ulm.de/~mascheck/various/shebang/</a>
</li>

<li>Shebang (Unix)<br />
<a href="https://en.wikipedia.org/wiki/Shebang_%28Unix%29">https://en.wikipedia.org/wiki/Shebang_%28Unix%29</a>
</li>

<li>Domovská stránka systému LÖVE<br />
<a href="http://love2d.org/">http://love2d.org/</a>
</li>

<li>Simple DirectMedia Layer (home page)<br />
<a href="http://www.libsdl.org/">http://www.libsdl.org/</a>
</li>

<li>Simple DirectMedia Layer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer">https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer</a>
</li>

<li>Seriál Grafická knihovna OpenGL<br />
<a href="https://www.root.cz/serialy/graficka-knihovna-opengl/">https://www.root.cz/serialy/graficka-knihovna-opengl/</a>
</li>

<li>Pyglet event loop<br />
<a href="http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html">http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html</a>
</li>

<li>Decorators I: Introduction to Python Decorators<br />
<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">http://www.artima.com/weblogs/viewpost.jsp?thread=240808</a>
</li>

<li>3D Programming in Python - Part 1 <br />
<a href="https://greendalecs.wordpress.com/2012/04/21/3d-programming-in-python-part-1/">https://greendalecs.wordpress.com/2012/04/21/3d-programming-in-python-part-1/</a>
</li>

<li>A very basic Pyglet tutorial<br />
<a href="http://www.natan.termitnjak.net/tutorials/pyglet_basic.html">http://www.natan.termitnjak.net/tutorials/pyglet_basic.html</a>
</li>

<li>Alpha blending<br />
<a href="https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending">https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

