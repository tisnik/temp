<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhém článku o Small Basicu si ukážeme práci s vestavěnými objekty, zejména s grafickým oknem. Taktéž si popíšeme želví grafiku a systém událostí (a reakcí na ně).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Vestavěné objekty Small Basicu: práce s&nbsp;grafikou, časovačem, reakce na události</a></p>
<p><a href="#k02">2. Příklad volání metod objektů a změn jejich atributů</a></p>
<p><a href="#k03">3. Základní operace s&nbsp;řetězci realizovaná přes objekt <strong>Text</strong></a></p>
<p><a href="#k04">*** 4. Želví grafika ve Small Basicu</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Vestavěné objekty Small Basicu: práce s&nbsp;grafikou, časovačem, reakce na události</h2>

<p>Již v&nbsp;předchozím článku jsme se zmínili o předpřipravených objektech a
jejich metodách popř.&nbsp;i o atributech. Tímto způsobem jsou řešeny například
vstupně-výstupní operace, práce s&nbsp;grafickým oknem, práce s&nbsp;želví
grafikou, ale v&nbsp;neposlední řadě i operace s&nbsp;řetězci a poli.</p>

<img src="https://i.iinfo.cz/images/7/small-basic-2-1.png" class="image-490656" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="119" height="742" />i
<p><i>Obrázek 1: V&nbsp;levé části uživatelského rozhraní Small Basicu se
zobrazuje seznam všech dostupných objektů.</i></p>

<p>Tímto poměrně elegantním způsobem bylo možné snížit počet rezervovaných slov
na šestnáct (viz též předchozí článek) a vyhnout se tak problémům, které
v&nbsp;klasických BASICech způsobovaly desítky a někdy i stovky rezervovaných
slov (ty mnohdy ani nemohly být součástí jména proměnné).</p>

<img src="https://i.iinfo.cz/images/7/small-basic-2-2.png" class="image-490657" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="496" height="677" />
<p><i>Obrázek 2: Seznam metod vybraného objektu.</i></p>

<p>A právě způsobem práce s&nbsp;objekty, které ve <i>Small Basicu</i>
existují, se budeme zabývat v&nbsp;dnešním článku. Důležité je přitom již na
začátku upozornit na to, že počet objektů je neměnný &ndash; objekty nelze
přidávat a už vůbec ne definovat objekty nové (například na základě nějaké
deklarace třídy atd.). Z&nbsp;tohoto pohledu se můžeme na existující objekty
dívat i jako na jmenné prostory (<i>namespace</i>) s&nbsp;uloženým stavem. Toto
chování sice poněkud omezuje možnosti využití SmallBasicu ve velkých
projektech, výhodou je však jednoduchost a snadnost naučení tohoto jazyka.</p>

<img src="https://i.iinfo.cz/images/7/small-basic-2-3.png" class="image-490658" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="433" height="536" />
<p><i>Obrázek 3: Seznam atributů vybraného objektu.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Příklad volání metod objektů a změn jejich atributů</h2>

<p>Nejjednodušší operací s&nbsp;objekty je zavolání některé jejich metody.
Například objekt nazvaný <strong>TextWindow</strong> obsahuje metodu
<strong>WriteLine</strong>, která slouží pro výpis zprávy do textového okna
&ndash; tím se mění (mutuje) i vlastní objekt, resp.&nbsp;přesněji řečeno jeho
vnitřní stav. Volání je ze syntaktického hlediska realizováno dnes již
standardní &bdquo;tečkovou notací&ldquo;, která je v&nbsp;IDE <i>Small
Basicu</i> podporována technologií IntelliSense (automatické nabídky dostupných
metod a atributů):</p>

<pre>
<i>' Program typu "Hello, world!" naprogramovaný ve Small Basicu</i>
&nbsp;
TextWindow.WriteLine("Hello, world!")
</pre>

<p>Měnit atributy objektu je stejně snadné &ndash; atributům přiřadíme novou
hodnotu. V&nbsp;následujícím demonstračním příkladu je změněna barva pozadí i
barva popředí textového okna:</p>

<pre>
<i>' Program typu "Hello, world!" naprogramovaný ve Small Basicu</i>
<i>' doplněný o změnu vlastností textového okna</i>
&nbsp;
TextWindow.BackgroundColor = "darkblue"
TextWindow.ForegroundColor = "yellow"
TextWindow.WriteLine("Hello, world!")
</pre>

<p>Výsledek, který získáme po spuštění tohoto příkladu, by měl vypadat
takto:</p>

<img src="https://i.iinfo.cz/images/7/small-basic-2-4.png" class="image-490659" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="313" height="87" />
<p><i>Obrázek 4: Změna barvy pozadí i textu v&nbsp;textovém oknu.</i></p>

<p><div class="rs-tip-major">Poznámka: některé atributy a metody již není možné
použít, i když z&nbsp;nějakého důvodu figurují v&nbsp;nápovědě:</div></p>

<a href="https://www.root.cz/obrazek/490660/"><img src="https://i.iinfo.cz/images/7/small-basic-2-5-prev.png" class="image-490660" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="370" height="92" /></a>
<p><i>Obrázek 5: I v&nbsp;tak malém a relativně moderním jazyku, jakým je Small
Basic, už nalezneme nepodporované metody a atributy.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Základní operace s&nbsp;řetězci realizovaná přes objekt <strong>Text</strong></h2>

<p>Prakticky veškerou práci s&nbsp;řetězci obstarávají statické metody dostupné
v&nbsp;objektu se všeříkajícím jménem <strong>Text</strong>. Nalezneme zde
především podporu spojování řetězců, převodu řetězce na velká či naopak malá
písmena, získání podřetězce atd. Viz též následující demonstrační příklad:</p>

<pre>
<i>' Základní operace s řetězci realizovaná přes objekt Text</i>
&nbsp;
message = "Hello, world"
TextWindow.WriteLine(message)
&nbsp;
message = Text.Append(message, "!")
TextWindow.WriteLine(message)
&nbsp;
TextWindow.WriteLine(Text.ConvertToUpperCase(message))
&nbsp;
TextWindow.WriteLine(Text.GetSubText(<u>message, 8, 5</u>))
</pre>

<p><div class="rs-tip-major">Poznámka: podtržená část zdrojového kódu ukazuje
na zajímavou vlastnost <i>Small Basicu</i> &ndash; znaky řetězce začínají
indexem 1 a nikoli 0! Převod některých algoritmů do <i>Small Basicu</i> tedy
nebude zcela přímočarý; na druhou stranu je indexování od jedničky pro
začátečníky přirozenější.</div></p>

<img src="https://i.iinfo.cz/images/7/small-basic-2-6.png" class="image-490661" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL&lt;/a&gt;" width="490" height="759" />
<p><i>Obrázek 6: Vybrané metody objektu <strong>Text</strong>.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Želví grafika ve Small Basicu</h2>

<p>Jednou z&nbsp;nejznámějších a pro výuku algoritmizace taktéž
nejužitečnějších vlastností mnoha &bdquo;začátečnických&ldquo; programovacích
jazyků je takzvaná <strong>želví grafika</strong>, anglicky <strong>turtle
graphics</strong>.</p>

<img src="http://i.iinfo.cz/images/402/lang-01-a-5.png" width="400" height="400" alt="&nbsp;" />
<p><i>Obrázek 7: Obrazec vzniklý pomocí želví grafiky.</i></p>

<p>Základem želví grafiky je virtuální želva (<i>turtle</i>), která se na
základě poměrně malé množiny příkazů dodávaných napsaným programem (skriptem)
či přímo pomocí interaktivního zápisu příkazů, pohybuje po obrazovce a přitom
za sebou vykresluje stopu složenou z&nbsp;úseček. Tato virtuální želva se tedy
chová podobně jako reálná želva, která se pohybuje po hladké pískové pláži a
zanechává za sebou stopu.</p>

<img src="http://i.iinfo.cz/images/402/lang-01-a-6.png" width="400" height="389" alt="&nbsp;" />
<p><i>Obrázek 8: Další ukázka použití želví grafiky.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

