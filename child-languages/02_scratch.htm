<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Nekonečné programové smyčky</a></p>
<p><a href="#k03">*** 3. Počítané programové smyčky</a></p>
<p><a href="#k04">*** 4. Programové smyčky s&nbsp;podmínkou vyhodnocovanou před každou iterací</a></p>
<p><a href="#k05">*** 5. Podmínky typu <strong>když-tak</strong> (neúplný podmíněný příkaz) a <strong>když-tak-jinak</strong> (úplný podmíněný příkaz)</a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Nekonečné programové smyčky</h2>

<p>Programy tvořené ve <i>Scratchi</i> se samozřejmě neskládají z&nbsp;pouhé
řady (či spíše sloupce) bloků, které by se spouštěly sekvenčně &ndash; tímto
způsobem by bylo možné vytvořit jen ty nejjednodušší algoritmy, které
neobsahují opakující se části kódu. Vzhledem k&nbsp;tomu, že původní
<i>Scratch</i> bez nainstalovaných rozšíření neumožňuje přímou implementaci
skoků ani tvorbu podprogramů, díky nimž by bylo možné využít rekurze, je nutné
pro opakující se části kódu použít některý z&nbsp;podporovaných typů programové
smyčky.</p>

*** image ***
<p><i>Obrázek 2: </i></p>

<p>Ty jsou ve <i>Scratchi</i> reprezentovány &ndash; jak zajisté uhodnete
&ndash; taktéž pomocí příkazových bloků, ovšem tyto bloky jsou poněkud
zvláštní, protože v&nbsp;sobě mohou obsahovat další (pod)bloky. Kvůli tomu mají
bloky reprezentující programové smyčky odlišný tvar a navíc jsou elastické, aby
do nich bylo možné vložit další bloky (což jsme ostatně viděli i v&nbsp;závěru
předchozího článku). Samozřejmě je umožněno, aby programové smyčky byly vnořeny
a v&nbsp;reálných programech se s&nbsp;vnořenými programovými smyčkami i velmi
často můžeme setkat.</p>

*** image ***
<p><i>Obrázek 3: </i></p>

<p>Nejjednodušším typem programové smyčky podporované <i>Scratchem</i> je
nekonečná smyčka. S&nbsp;tímto typem smyčky se můžeme setkat například při
popisu chování nějakého objektu ve hře, protože takový objekt má většinou
neustále opakovat nějakou činnost, například se posunovat po naprogramované
trase. Využití nekonečné smyčky je ukázáno na obrázku, na němž je zobrazen
program pro řízení pohybu spritu po ploše, přičemž se sprite po nárazu do
&bdquo;ohrady&ldquo; nakreslené červenou barvou otočí zpět směrem do středu
ohrady.</p>

*** image ***
<p><i>Obrázek 4: </i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Počítané programové smyčky</h2>

<p>Druhým ve <i>Scratchi</i> podporovaným typem programových smyček jsou smyčky
s&nbsp;pevně zadaným počtem opakování. Zatímco v&nbsp;mnoha jiných
(mainstreamových) programovacích jazycích se tento typ smyček implementuje
s&nbsp;využitím řídicí proměnné (počitadla), ve <i>Scratchi</i> se, ostatně
podobně jako například v&nbsp;příbuzném <i>Logu</i>, pouze určí celkový počet
opakování programové smyčky.</p>

*** image ***
<p><i>Obrázek 5: </i></p>

<p>Na dalším obrázku můžete vidět program využívající počítanou smyčku
k&nbsp;tomu, aby nakreslil červenou čtvercovou &bdquo;ohradu&ldquo; (opět se
tedy vracíme k&nbsp;závěrečným kapitolám úvodního článku). Na tomto programu si
povšimněte jednoho poměrně důležitého detailu &ndash; zatímco blok pro
nekonečnou smyčku neměl na své spodní části umístěn výčnělek sloužící pro
přichycení dalšího bloku (což je ostatně u nekonečné smyčky logické), u smyčky
počítané tento prvek již existuje. To mj.&nbsp;znamená, že na tuto smyčku mohou
navazovat další příkazové bloky.</p>

*** image ***
<p><i>Obrázek 6: </i></p>

<p>Na následujících snímcích je ukázáno, jakým způsobem je možné využít dvojici
vnořených počítaných programových smyček pro vykreslení relativně složitého
obrazce &ndash; květu složeného ze sekvence kružnic. Vnitřní programová smyčka
slouží pro vykreslení jedné kružnice, přesněji řečeno mnohoúhelníku, který se
již kružnici podobá. Vnější smyčka mění počáteční natočení spritu tak, aby byla
pootočená i každá další kružnice. Kromě toho ve vnější smyčce dochází i ke
změně barvy kreslicího pera.</p>

*** image ***
<p><i>Obrázek 7: </i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Programové smyčky s&nbsp;podmínkou vyhodnocovanou před každou iterací</h2>

<p>Kromě nekonečných programových smyček a programových smyček s&nbsp;pevně zadaným počtem opakování lze ve <i>Scratchi</i> využít i další typ programové smyčky. Jedná se o smyčky s&nbsp;podmínkou vyhodnocovanou před každou iterací. V&nbsp;mnoha běžných programovacích jazycích se můžeme setkat se smyčkami typu <strong>while</strong> a <strong>do-while</strong> (popř.&nbsp;taktéž s&nbsp;variantou <strong>repeat-until</strong>). Podobně je tomu i ve <i>Scratchi</i>, kde nalezneme tento blok:</p>

<p>U těchto programových smyček se podmínka vyhodnocuje před provedením každé iterace a v&nbsp;případě, že je tato podmínka splněna, provede se tělo smyčky, tj.&nbsp;příkazové bloky umístěné uvnitř bloku představujícího smyčku. V&nbsp;podmínce se mohou vyskytovat buď speciální typy bloků vracejících pravdivostní hodnotu nebo například relační výrazy, s&nbsp;nimiž se seznámíme v&nbsp;dalším textu.</p>

<p>Na následující dvojici obrázků je ukázáno, jak je možné pomocí tohoto typu programové smyčky vykreslit spirálu. Programová smyčka je prováděna tak dlouho, dokud se sprite vykreslující spirálu nedotkne okraje hrací plochy.  Ihned poté je běh programu ukončen, protože za programovou smyčkou již nenásledují žádné další příkazy (tj.&nbsp;žádné příkazové bloky).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Podmínky typu <strong>když-tak</strong> (neúplný podmíněný příkaz) a <strong>když-tak-jinak</strong> (úplný podmíněný příkaz)</h2>

<p>S&nbsp;programovými smyčkami s&nbsp;podmínkami vyhodnocovanými před každou iterací samozřejmě poměrně úzce souvisí i samotné příkazové bloky určené pro podmíněné provádění příkazů. Ve <i>Scratchi</i> jsou k&nbsp;dispozici dva typy příkazových bloků, pomocí nichž je možné vyjádřit větvení programu na základě vyhodnocení nějaké podmínky. První z&nbsp;těchto bloků je obdobou klasického příkazu <strong>když-tak</strong> (v&nbsp;anglické variantě <strong>if-then</strong>), tj.&nbsp;příkazové bloky umístěné uvnitř tohoto bloku jsou provedeny pouze za předpokladu, že je podmínka vyhodnocena jako pravdivá:</p>

*** image ***
<p><i>Obrázek</i></p>

<p>Příklad této podmínky jsme již mohli vidět na demonstračním příkladu zobrazeném na předchozím obrázku, další příklad použití je na obrázku následujícím, v&nbsp;němž je příkazový blok typu <strong>když-tak</strong> (<strong>if-then</strong>) použitý uvnitř nekonečné smyčky pro její podmíněné zastavení (u tohoto programu opět poněkud předbíháme, protože je v&nbsp;něm využita proměnná představovaná bloky oranžové barvy a taktéž funkce vracející náhodné číslo v&nbsp;rozmezí -10..10; funkce a výrazy jsou reprezentovány barvou zelenou).</p>

*** image ***
<p><i>Obrázek</i></p>

<p>Druhý podmínkový příkazový blok již umožňuje specifikovat obě větve
programu, tj.&nbsp;jak větev, která se má spustit při splnění podmínky, tak i
větev, jejíž obsah je spuštěn v&nbsp;případě, že podmínka splněna naopak není.
Jedná se tedy o obdobu strukturovaného příkazu <strong>když-tak-jinak</strong> (anglicky <strong>if-then-else</strong>):</p>


<p>Na dalším obrázku je zobrazen program využívající tento typ řídicího bloku. Jde
o relativně jednoduchý program simulující náhodný pohyb, přičemž změnou kroku
(poslední modrý blok) i změnou rozsahu generovaných náhodných čísel je možné
měnit náhodnost pohybu spritu po herní ploše. Na pozadí herní plochy je
nakreslen souřadný systém představovaný bitmapou, která je součástí instalace
<i>Scratche</i>. Na herní plochu se navíc vykresluje jak stopa spritu a samotný
sprite (myš), tak i aktuální hodnota pomocné proměnné nazvané
<strong>otocka</strong>. Ale to se již dostáváme k&nbsp;další kapitole a
k&nbsp;dalším vlastnostem <i>Scratche</i> &ndash; práci s&nbsp;proměnnými.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

