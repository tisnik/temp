<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Výuka základních technik používaných při programování ve Scratchi</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Výuka základních technik používaných při programování ve Scratchi</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Scratch je možné využít pro seznámení studentů s většinou základních technik používaných i v reálných programech. Jedná se o programové smyčky, rozhodovací konstrukce, koncept proměnných a taktéž koncept ucelených a znovupoužitelných bloků kódu. Dnes se s těmito prvky seznámíme.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Výuka základních technik používaných při programování ve Scratchi</a></p>
<p><a href="#k02">2. Nekonečné programové smyčky</a></p>
<p><a href="#k03">3. Počítané programové smyčky</a></p>
<p><a href="#k04">4. Programové smyčky s&nbsp;podmínkou vyhodnocovanou před každou iterací</a></p>
<p><a href="#k05">5. Kombinace různých typů programových smyček</a></p>
<p><a href="#k06">6. Podmínky typu <strong>když-tak</strong> (neúplný podmíněný příkaz)</a></p>
<p><a href="#k07">7. Podmínky typu <strong>když-tak-jinak</strong> (úplný podmíněný příkaz)</a></p>
<p><a href="#k08">8. Proměnné</a></p>
<p><a href="#k09">*** 9. Tvorba vlastních programových bloků</a></p>
<p><a href="#k10">10. Systém Scratch: shrnutí</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Výuka základních technik používaných při programování ve Scratchi</h2>

<p>S&nbsp;využitím Scratche je možné se nenásilným způsobem seznámit
s&nbsp;většinou základních technik, které jsou používány při tvorbě reálných
programů. Jedná se zejména o tvorbu programových smyček (nekonečných smyček,
počítaných smyček i smyček s&nbsp;podmínkou), dále o realizaci podmínek
(rozvětvení, rozhodovací konstrukce) typu <strong>když-tak</strong> a
<strong>když-tak-jinak</strong>, dále o koncept takzvaných proměnných a
v&nbsp;neposlední řadě i o koncept deklarace a následného zavolání ucelených
bloků kódu (<i>procedury</i>, <i>podprogramy</i>, nepřímo též <i>funkce</i>).
S&nbsp;využitím těchto čtyř technik lze realizovat i velmi složité aplikace. A
právě s&nbsp;těmito technikami se seznámíme v&nbsp;dnešním článku.</p>

*** image ***
<p><i>Obrázek 1: V&nbsp;navazujících kapitolách budeme používat české názvy
bloků, takže si nezapomeňte přepnout jazyk pro celé prostředí Scratche.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Nekonečné programové smyčky</h2>

<p>Programy tvořené ve <i>Scratchi</i> se samozřejmě ve většině případů
neskládají z&nbsp;pouhé řady (či spíše sloupce) bloků, které by se spouštěly
sekvenčně &ndash; tímto způsobem by totiž bylo možné vytvořit jen ty
nejjednodušší algoritmy, které neobsahují opakující se části kódu. Vzhledem
k&nbsp;tomu, že původní <i>Scratch</i> bez nainstalovaných rozšíření neumožňuje
přímou implementaci skoků ani tvorbu podprogramů, díky nimž by bylo možné
využít rekurze, je nutné pro opakující se části kódu použít některý
z&nbsp;podporovaných typů programové smyčky.</p>

*** image ***
<p><i>Obrázek 2: Bloky se smyčkami nalezneme v&nbsp;sekci
&bdquo;Ovládání&ldquo;.</i></p>

<p>Tyto programové smyčky jsou ve <i>Scratchi</i> reprezentovány &ndash; jak
zajisté uhodnete &ndash; taktéž s&nbsp;využitím příkazových bloků, ovšem tyto
bloky jsou poněkud zvláštní, protože v&nbsp;sobě mohou obsahovat další
(pod)bloky. Kvůli tomu mají bloky reprezentující programové smyčky odlišný tvar
a navíc jsou elastické (jejich velikost se může dynamicky měnit), aby do nich
bylo možné vložit další bloky (což jsme ostatně viděli i v&nbsp;závěru
předchozího článku). Samozřejmě je umožněno, aby programové smyčky byly vnořeny
a v&nbsp;reálných programech se s&nbsp;vnořenými programovými smyčkami i velmi
často můžeme setkat.</p>

*** image ***
<p><i>Obrázek 3: Blok určený pro implementaci nekonečné programové
smyčky.</i></p>

<p>Nejjednodušším typem programové smyčky podporované <i>Scratchem</i> je
nekonečná smyčka. S&nbsp;tímto typem smyčky se můžeme setkat například při
popisu chování nějakého objektu ve hře, protože takový objekt má většinou
neustále opakovat nějakou činnost, například se posunovat po předem určené
(naprogramované) trase. Využití nekonečné smyčky je ukázáno na následujícím
obrázku, na němž je zobrazen program pro řízení pohybu spritu po ploše: sprite
bude sledovat kurzor myši, resp.&nbsp;přesněji řečeno se za ním bude otáček a
pokusí se ho dohnat:</p>

*** image ***
<p><i>Obrázek 4: Program zajišťující, že sprite bude neustále dohánět kurzor
myši. Vše je realizováno v&nbsp;nekonečné smyčce.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Počítané programové smyčky</h2>

<p>Druhým ve <i>Scratchi</i> podporovaným typem programových smyček jsou smyčky
s&nbsp;pevně zadaným počtem opakování. Zatímco v&nbsp;mnoha jiných
(mainstreamových) programovacích jazycích se tento typ smyček většinou
implementuje s&nbsp;využitím řídicí proměnné (takzvaného počitadla &ndash;
<i>counter</i>), ve <i>Scratchi</i> se, ostatně podobně jako například
v&nbsp;příbuzném <i>Logu</i>, pouze určí celkový počet opakování programové
smyčky. K&nbsp;realizaci této smyčky slouží následující blok:</p>

*** image ***
<p><i>Obrázek 5: Blok představující počítanou programovou smyčku.</i></p>

<p>Na šestém obrázku můžete vidět program využívající počítanou smyčku
k&nbsp;tomu, aby nakreslil červenou čtvercovou &bdquo;ohradu&ldquo; (opět se
tedy vracíme k&nbsp;závěrečným kapitolám úvodního článku). Na tomto programu si
povšimněte jednoho poměrně důležitého detailu &ndash; zatímco blok pro
nekonečnou smyčku neměl na své spodní části umístěn výčnělek sloužící pro
přichycení dalšího bloku (což je ostatně u nekonečné smyčky logické), u smyčky
počítané tento prvek již existuje. To mj.&nbsp;znamená, že na tuto smyčku mohou
navazovat další příkazové bloky:</p>

*** image ***
<p><i>Obrázek 6: Programová smyčka s&nbsp;pevně zadaným počtem opakování je zde
použita pro vykreslení červené ohrady.</i></p>

<p>Na následujících dvou snímcích je ukázáno, jakým způsobem je možné využít
dvojici vnořených počítaných programových smyček pro vykreslení relativně
složitého obrazce &ndash; květu složeného ze sekvence kružnic. Vnitřní
programová smyčka slouží pro vykreslení jedné kružnice, přesněji řečeno
mnohoúhelníku, který se již kružnici podobá (vzhledem k&nbsp;omezenému
rozlišení displeje). Vnější počítaná programová smyčka mění počáteční natočení
spritu tak, aby byla pootočená i každá další kružnice. Kromě toho ve vnější
smyčce dochází i ke změně barvy kreslicího pera:</p>

*** image ***
<p><i>Obrázek 7: Program pro vykreslení květu, který se skládá
z&nbsp;různobarevných kružnic.</i></p>

*** image ***
<p><i>Obrázek 8: Výsledek běhu programu ukázaného na sedmém obrázku.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Programové smyčky s&nbsp;podmínkou vyhodnocovanou před každou iterací</h2>

<p>Kromě nekonečných programových smyček a programových smyček s&nbsp;pevně
zadaným počtem opakování lze ve <i>Scratchi</i> využít i další typ programové
smyčky. Jedná se o smyčky s&nbsp;podmínkou vyhodnocovanou před každou iterací
(tedy před každým dalším vstupem do smyčky v&nbsp;případě jejího opakování).
V&nbsp;mnoha běžných programovacích jazycích se můžeme setkat se smyčkami
nazvanými <strong>while</strong> a <strong>do-while</strong> (popř.&nbsp;taktéž
s&nbsp;variantou <strong>repeat-until</strong>). Podobně je tomu i ve
<i>Scratchi</i>, kde nalezneme tento blok:</p>

*** image ***
<p><i>Obrázek 9: Smyčka s&nbsp;podmínkou.</i></p>

<p>U těchto programových smyček se podmínka vyhodnocuje před provedením každé
iterace a v&nbsp;případě, že je tato podmínka splněna, provede se tělo smyčky,
tj.&nbsp;příkazové bloky umístěné uvnitř bloku představujícího smyčku.
V&nbsp;podmínce se mohou vyskytovat buď speciální typy bloků vracejících
pravdivostní hodnotu nebo například relační výrazy, s&nbsp;nimiž se seznámíme
v&nbsp;dalším textu.</p>

*** image ***
<p><i>Obrázek 10: Program pro vykreslení náhodné procházky na pracovní plochu
Scratche.</i></p>

<p>Na dvojici obrázků je ukázáno, jak je možné pomocí tohoto typu programové
smyčky vykreslit náhodný průchod spritu po ploše. Programová smyčka je
prováděna tak dlouho, dokud se sprite vykreslující náhodnou cestu (procházku)
nedotkne okraje hrací plochy. Ihned poté je běh programu ukončen, protože za
programovou smyčkou již nenásledují žádné další příkazy (tj.&nbsp;žádné
příkazové bloky).</p>

*** image ***
<p><i>Obrázek 11: Výsledný obrazec nakreslený na pracovní plochu Scratche
(povšimněte si, že samotná postavička &ndash; sprite &ndash; má pouze
desetinovou velikost).</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Kombinace různých typů programových smyček</h2>

<p>Pochopitelně je možné v&nbsp;jediném programu využít různé typy programových
smyček. Pokusme se například program <a href="#k04">z&nbsp;předchozí
kapitoly</a> upravit takovým způsobem, aby se na pracovní plochu Scratche
vykreslilo několik náhodných cest. Všechny cesty budou pro jednoduchost začínat
ve středu pracovní plochy:</p>

*** image ***
<p><i>Obrázek 12: Program upravený do takové podoby, aby vykreslil několik náhodných cest.</i></p>

*** image ***
<p><i>Obrázek 13: Výsledný obrazec nakreslený na pracovní plochu
Scratche.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Podmínky typu <strong>když-tak</strong> (neúplný podmíněný příkaz)</h2>

<p>S&nbsp;programovými smyčkami, konkrétně se smyčkami s&nbsp;podmínkami
vyhodnocovanými před každou iterací, samozřejmě poměrně úzce souvisí i samotné
příkazové bloky určené pro podmíněné provádění příkazů. Ve <i>Scratchi</i> jsou
k&nbsp;dispozici dva typy příkazových bloků, pomocí nichž je možné vyjádřit
větvení programu na základě vyhodnocení nějaké podmínky. První z&nbsp;těchto
bloků je obdobou klasického příkazu <strong>když-tak</strong> (v&nbsp;anglické
variantě <strong>if-then</strong>), tj.&nbsp;příkazové bloky umístěné uvnitř
tohoto bloku jsou provedeny pouze za předpokladu, že je podmínka vyhodnocena
jako pravdivá. Opět se tedy jedná o &bdquo;elastický&ldquo; blok, do kterého se
mohou vkládat další bloky:</p>

*** image ***
<p><i>Obrázek 14: Blok realizující podmínku typu <strong>když-tak</strong>.</i></p>

<p>Program pro realizaci náhodné procházky můžeme relativně snadno přepsat do
takové podoby, že se v&nbsp;něm použije nekonečná smyčka (a nikoli smyčka
s&nbsp;podmínkou). A uvnitř této smyčky se testuje, zda sprite již nedosáhl
okraje obrazovky. Pokud tomu tak je, je běh programu ihned ukončen. Pro
zastavení programu použijeme speciální blok <strong>Zastav</strong>:</p>

*** image ***
<p><i>Obrázek 15: Upravený program pro vykreslení náhodné procházky spritu po
pracovní ploše Scratche.</i></p>

<p>Upravená varianta &ndash; po nárazu na okraj se sprite přesune zpět do
středu pracovní plochy:</p>

*** image ***
<p><i>Obrázek 16: Neustálý průchod spritu po pracovní ploše. Po nárazu do
okraje se sprite přesune zpět do středu.</i></p>

*** image ***
<p><i>Obrázek 17: Výsledek běhu programu.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Podmínky typu <strong>když-tak-jinak</strong> (úplný podmíněný příkaz)</h2>

<p>Druhý podmínkový příkazový blok již umožňuje specifikovat obě větve
programu, tj.&nbsp;jak větev, která se má spustit při splnění podmínky, tak i
větev, jejíž obsah je spuštěn v&nbsp;případě, že podmínka splněna naopak není.
Jedná se tedy o obdobu strukturovaného příkazu <strong>když-tak-jinak</strong>
(anglicky <strong>if-then-else</strong>):</p>

*** image ***
<p><i>Obrázek 18: Blok, který realizuje strukturovaný příkaz
<strong>když-tak-jinak</strong>.</i></p>

<p>Na dalším obrázku je zobrazen program využívající tento typ řídicího bloku.
Jde o relativně jednoduše získanou variantu programu simulujícího náhodný
pohyb, přičemž změnou kroku (poslední modrý blok) i změnou rozsahu generovaných
náhodných čísel je možné měnit náhodnost pohybu spritu po herní ploše. Na
pozadí herní plochy je nakreslen souřadný systém představovaný bitmapou, která
je součástí instalace <i>Scratche</i>. Na herní plochu se navíc vykresluje jak
stopa spritu, tak i samotný sprite:</p>

*** image ***
<p><i>Obrázek 19: Program pro náhodnou procházku upravený do podoby, kdy se
v&nbsp;něm používá strukturovaný příkaz
<strong>když-tak-jinak</strong>.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Proměnné</h2>

<p>Již v&nbsp;předchozích kapitolách jsme zmínili o možnosti použití takzvaných
<i>proměnných</i>. Ty mají ve <i>Scratchi</i> podobný význam, jako
v&nbsp;běžných programovacích jazycích, což znamená, že proměnná slouží jako
pojmenované úložiště informace; například se může jednat o ukazatel skóre ve
hře atd. Ovšem způsob použití proměnných ve Scratchi se v&nbsp;několika
ohledech od běžných programovacích jazyků odlišuje. Základní příkazové bloky
pro práci s&nbsp;proměnnými se nachází v&nbsp;sekci <strong>Proměnné</strong>
(což jsou oranžové bloky):</p>

*** image ***
<p><i>Obrázek 20: Bloky a příkazy pro práci s&nbsp;proměnnými.</i></p>

<p>Zajímavý je fakt, že tato sekce při inicializaci <i>Scratche</i> obsahuje
mj.&nbsp;i dvojici příkazů (nikoli příkazových bloků) <strong>Vytvoř
proměnnou</strong> a <strong>Vytvoř seznam</strong>. Pokud se příkaz
<strong>Vytvoř proměnnou</strong> vybere a spustí, zeptá se <i>Scratch</i>
v&nbsp;samostatném dialogu na název proměnné i na oblast její viditelnosti
&ndash; zda se má jednat o proměnnou viditelnou pouze pro jeden sprite nebo
naopak pro všechny sprity, které jsou v&nbsp;projektu použity. Na rozdíl od
běžných programovacích jazyků je zde tedy oblast viditelnosti proměnných
omezena nikoli pouze na programové bloky, ale na sprity (což je zajímavý
koncept).</p>

*** image ***
<p><i>Obrázek 21: Dialog sloužící pro vytvoření (deklaraci) nové proměnné.
Určit se musí jméno proměnné a taktéž oblast její viditelnosti.</i></p>

<p>Ihned poté, co je proměnná vytvořena, je v&nbsp;sekci
<strong>Proměnné</strong> možné využít zbylou pětici příkazových bloků
sloužících pro nastavení nové hodnoty do proměnné, pro změnu hodnoty proměnné
(vhodné například pro implementaci počítaných programových smyček) a taktéž
bloky sloužící pro zobrazení či naopak skrytí proměnné na pracovní ploše.
Systém <i>Scratch</i> totiž umožňuje, aby se jméno proměnné a její aktuální
hodnota zobrazovala přímo na pracovní ploše i v&nbsp;době běhu programu &ndash;
jedná se vlastně o jednoduše použitelnou podobu sledování proměnných při
trasování programu v&nbsp;debuggeru.</p>

*** image ***
<p><i>Obrázek 22: Zobrazení proměnné přímo na pracovní ploše Scratche.</i></p>

<p>Navíc se při dvoukliku na obsah proměnné na pracovní ploše mění způsob
jejího zobrazení. Lze si vybírat ze tří formátů: jméno proměnné + hodnota,
pouze hodnota proměnné (lze například použít jako měřič skóre v&nbsp;nějaké
hře) a konečně jméno proměnné + hodnota + posuvník, kterým je možné hodnotu
proměnné interaktivně měnit:</p>

*** image ***
<p><i>Obrázek 23: Změna způsobu zobrazení proměnné přímo na pracovní ploše
Scratche.</i></p>

<p>Ještě jsme si však nepopsali pátý příkazový blok vytvořený ihned po přidání
nové proměnné do programu. Tento blok, který se jmenuje stejně, jako proměnná
(tedy v&nbsp;našem případě <strong>x</strong>), je možné využít
v&nbsp;programových smyčkách, podmínkách či v&nbsp;dalších blocích všude tam,
kde je očekávána nějaká hodnota.</p>

*** image ***
<p><i>Obrázek 24: Blok reprezentující samotnou proměnnou.</i></p>

<p>Podívejme se nyní na program, v&nbsp;němž je využita proměnná nazvaná
<strong>krok</strong> pro vykreslení složitějšího obrazce, který se spirálovitě
zmenšuje. Proměnná <strong>krok</strong> je zde použita jako počitadlo a
současně i hodnota, o kterou se bude sprite po ploše posouvat:</p>

*** image ***
<p><i>Obrázek 25: Program určený pro vykreslení spirálovitě se zmenšujícího
obrazce.</i></p>

*** image ***
<p><i>Obrázek 26: Výsledek běhu programu z&nbsp;obrázku číslo 25.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Tvorba vlastních programových bloků</h2>

<p>Reálné projekty, ale i programy psané ve Scratchi postupně rostou a stávají
se stále složitějšími. Proto se při programování snažíme o takzvanou
<i>dekompozici</i> celého programu na jednodušší části, které je možné vytvořit
nezávisle na podobě celkového programu. Jedná se tedy o jednu z&nbsp;aplikací
poučky &bdquo;rozděl a panuj&ldquo; (v&nbsp;IT je ovšem chápána
v&nbsp;pozitivním slova smyslu). Moderní verze Scratche umožňují rozdělit celý
program do většího množství bloků, které lze použít vícekrát.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Systém Scratch: shrnutí</h2>

<p>Projekt <i>Scratch</i>, jehož popisem jsme se až doposud zabývali, se po
relativně krátké době po svém představení veřejnosti stal velmi populární a to
nejenom mezi učiteli základních škol (v&nbsp;USA a dalších zemích), ale i na
středních školách a na školách vysokých (především na fakultách netechnického
zaměření).</p>

<p>Důvodů k&nbsp;této popularitě bylo a je několik, největším však zůstává
možnost vytvoření i poměrně složitého programu bez toho, aby byl uživatel nucen
zdlouhavě studovat syntaxi a sémantiku jazyka, učit se ovládat vývojové
prostředí nebo prostředí interpretru a navíc ještě reagovat na různá kryptická
chybová hlášení (ze syntaxe většiny běžných programovacích jazyků vyplývá, že
například chybějící uzavírací závorka nebo klíčové slovo ukončující nějaký
blok, vede ke vzniku chybového hlášení na jiném místě v&nbsp;programu, než kde
se skutečně chyba nachází).</p>

<p>Další předností <i>Scratche</i> je jeho orientace na tvorbu multimediálních
programů a taktéž možnost snadno vytvořit a prezentovat výsledný projekt na
Internetu bez nutnosti mnohdy složité instalace programovacího jazyka a jeho
vývojového prostředí.</p>

<p>A nakonec &ndash; Scratch lze efektivně využít například i pro tvorbu
interaktivních prezentací.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

