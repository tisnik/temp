<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyky určené pro výuku programování</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyky určené pro výuku programování</a></p>
<p><a href="#k02">2. Kouzlo vizuálního programování</a></p>
<p><a href="#k03">3. Projekt Scratch &ndash; &bdquo;programovatelné puzzle&ldquo;</a></p>
<p><a href="#k04">4. První kroky ve Scratchi</a></p>
<p><a href="#k05">5. Pohyb objektů po pracovní ploše</a></p>
<p><a href="#k06">6. Instalace doplňujících bloků</a></p>
<p><a href="#k07">7. Kreslení na pracovní plochu</a></p>
<p><a href="#k08">8. Jednoduchý program tvořený sekvencí příkazů</a></p>
<p><a href="#k09">*** 9. Blok zajišťující opakování příkazů</a></p>
<p><a href="#k10">*** 10. Obsah navazujícího článku</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyky určené pro výuku programování</h2>

<p>V&nbsp;tomto seriálu si popíšeme některé známé i méně známé programovací
jazyky a jejich dialekty, které byly navrženy pro výuku programování,
algoritmizace, programovacích technik a v&nbsp;některých případech též návrhu
datových struktur. Některé z&nbsp;dále popsaných programovacích jazyků jsou
určeny pro předškolní děti, popř.&nbsp;pro děti na prvním stupni základních
škol. I přes zdánlivou jednoduchost jsou však některé z&nbsp;těchto
programovacích jazyků překvapivě efektivní i pro tvorbu složitějších aplikací,
samozřejmě v&nbsp;závislosti na tom, jaké knihovny daný programovací jazyk či
jeho implementace obsahuje (například tvorba jednodušší hry v&nbsp;dále
zmíněném systému <i>Scratch</i> je i pro začínajícího programátora otázkou
několika desítek minut).</p>

<img src="http://i.iinfo.cz/images/351/lang08-1.png" width="448" height="236" alt="&#160;" />
<p><i>Obrázek 1: Základní informace o jedné dnes již historické variantě
Scratche, kterou bylo nutné nainstalovat (na rozdíl od moderní verze
provozovatelné přímo ve webovém prohlížeči). V&nbsp;tomto dialogu ovšem chybí
důležitá informace o tom, že vedoucím skupiny Lifelong Kindergarten je Mitchel
Resnick (podle příjmení se možná jedná o potomka českých emigrantů).  Použitá
licence umožňuje jak šíření programu v&nbsp;binární formě i ve formě zdrojových
kódů, tak i tvorbu odvozených projektů. Příkladem může být například projekt
BYOB, neboli &bdquo;Build Your Own Blocks&ldquo;, který ze Scratche přímo
vycházel.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Kouzlo vizuálního programování</h2>

<p>Většina &bdquo;klasických&ldquo; programovacích jazyků, v&nbsp;nichž se
algoritmy zapisují formou zdrojového textu, se hned z&nbsp;několika důvodů
příliš nehodí pro děti předškolního věku nebo pro děti na prvním stupni ZŠ.
Jedním z&nbsp;těchto důvodů je nutnost zápisu algoritmů s&nbsp;využitím více či
méně strukturovaného textu, jehož syntaxe je hlídána buď interpretrem či
překladačem. Jedná se o nejdéle používaný způsob programování, jehož počátky
můžeme hledat v&nbsp;hluboké počítačové minulosti, protože první překladač
pracující se strojovým textem byl vytvořen již v&nbsp;rozmezí let 1951 až 1952
<i>Grace Hopperovou</i> v&nbsp;rámci projektu <i>A-0 (Arithmetic Language
version 0)</i>, který byl později následován známým <i>FORTRANem</i> navrženým
<i>Johnem W. Backusem</i> a jeho vývojovým týmem. Ovšem v&nbsp;průběhu oněch
přibližně šedesáti let se znovu a znovu objevovaly pokusy o vizuální návrh
algoritmů, tj.&nbsp;o tvorbu programů nikoli zápisem strukturovaného zdrojového
textu, ale návrhem algoritmů pomocí diagramů.</p>

<p><div class="rs-tip-major">Poznámka: proč je to tak důležité? Lidský mozek
dokáže velmi dobře a rychle rozpoznávat &bdquo;vzory&ldquo; (<i>patterns</i>),
takže se použití nějakého vhodného &bdquo;2D zápisu&ldquo; přímo nabízí. Dalším
důvodem je fakt, že se programování změní na interaktivní manipulaci
s&nbsp;vizuálními objekty, což sice není ani zdaleka nejrychlejší způsob, ale
může být nejméně komplikovaný a navíc je (někdy) relativně snadné zajistit
korektnost takové reprezentace.</div></p>

<img src="http://i.iinfo.cz/images/351/lang08-2.png" width="210" height="153" alt="&#160;" />
<p><i>Obrázek 2: Bloky, z&nbsp;nichž se programy skládají, jsou na základě své
funkce rozděleny do několika kategorií. Povšimněte si, že již původní prostředí
Scratche bylo téměř kompletně počeštěno; jedna z&nbsp;mála částí ponechaná
v&nbsp;angličtině je nápověda k&nbsp;jednotlivým příkazům (i když i tato část
se pravděpodobně brzy přeloží).</i></p>

<p>Známé jsou například pokusy o &bdquo;překlad&ldquo; klasických vývojových
diagramů, využití kopenogramů (což je resp.&nbsp;byla tuzemská specialita) atd.
V&nbsp;současnosti někteří analytici a vývojáři využívají <i>UML</i> (což je
ovšem jen pomůcka) či <i>BPMN</i> (návrh business procesů, ovšem s&nbsp;vhodně
zvolenými bloky se vlastně jedná o plnohodnotný jazyk). V&nbsp;oblasti software
určeného pro výuku programování se využívá podobný princip, jako v&nbsp;případě
vývojových diagramů &ndash; možnost zápisu algoritmů s&nbsp;využitím bloků
představujících jednotlivé příkazy či volané funkce, které jsou doplněny o
základní strukturované příkazy určené pro tvorbu rozhodovacích podmínek a
programových smyček.</p>

<a href="http://i.iinfo.cz/images/351/lang08-3.png"><img src="http://i.iinfo.cz/images/351/lang08-3-prev.png" width="349" height="270" alt="&#160;" /></a>
<p><i>Obrázek 3: Uživatelské prostředí projektu Scratch v&nbsp;jeho původní
variantě, kterou bylo nutné instalovat. Celé prostředí je poměrně přehledné (a
také relativně neměnné, takže se nikdy nestane, že by zmizela nějaká ikona nebo
nástrojový pruh); získání základní orientace v&nbsp;tomto prostředí většinou
trvá jen několik minut.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Projekt Scratch &ndash; &bdquo;programovatelné puzzle&ldquo;</h2>

<p>Na výše uvedeném principu, tj.&nbsp;na vylepšených vývojových diagramech, je
postaven i projekt <i>Scratch</i>, v&nbsp;němž jsou uživatelům nabídnuty
základní stavební <i>bloky</i>, z&nbsp;nichž se program skládá, přičemž je
ponecháno pouze na uživateli, jakým způsobem tyto bloky využije ve svých
programech. Díky způsobu skládání bloků pod sebe (podobně jako u puzzle),
popř.&nbsp;do sebe je zajištěno, že program bude po syntaktické stránce vždy
v&nbsp;pořádku, což je důležité, protože odpadá pro děti nudná oprava překlepů,
hledání chybějících středníků, hlídání párovosti závorek i další činnosti
spojené s&nbsp;prací s&nbsp;běžnými programovacími jazyky.</p>

*** image ***
<p><i>Obrázek 4: Takto vypadá prostředí moderní varianty Scratche, kterou je
možné spustit přímo ve webovém prohlížeči. To znamená, že odpadá nutnost
instalace a nutnost řešení z&nbsp;toho plynoucích problémů (například ve
školních učebnách).</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. První kroky ve Scratchi</h2>

<p>Prostředí Scratche je dostupné na adrese <a
href="https://scratch.mit.edu/">https://scratch.mit.edu/</a>. První pokusy se
Scratchem je přitom možné provádět i bez nutnosti přihlášení. Postačuje pouze
ve webovém prohlížeči otevřít výše uvedenou stránku a vybrat odkaz
<strong>Start Creating</strong> (není se tedy zapotřebí ani registrovat ani se
přihlašovat):</p>

*** image ***
<p><i>Obrázek 5: Úvodní stránka projektu Scratch.</i></p>

<p><div class="rs-tip-major">Poznámka: po stisku tlačítka <strong>Start
Creating</strong> se zobrazí pracovní prostředí Scratch. Mezi první operaci,
kterou lze udělat, je volba jazyka. V&nbsp;menu <strong>Settings</strong> se
nachází volba <strong>Language</strong>, která obsahuje seznam podporovaných
jazyků.</div></p>

*** image ***
<p><i>Obrázek 6: Volba jazyka v&nbsp;prostředí Scratche.</i></p>

<p>Pojďme si nyní ve stručnosti říci, jakým způsobem se vlastně programy ve
<i>Scratchi</i> tvoří. Je to ve skutečnosti velmi jednoduché a po krátkém
zaučení i intuitivní &ndash; v&nbsp;levé části okna se postupně vybírají
příkazové bloky, které se přetahují do prostřední části okna, kde se
z&nbsp;těchto bloků může tvořit program či programy. Běžný příkazový blok je
vizuálně představován obdélníkem s&nbsp;několika výčnělky připomínajícími
puzzle. Programové smyčky a podmínky jsou vyobrazeny jako složitější tvary
umožňující vkládání dalších bloků <i>dovnitř</i> svého těla. Pomocí těchto
výčnělků se bloky spojují dohromady tak, aby tvořily sekvenci či dokonce
strukturovaný program. V&nbsp;případě, že je zapotřebí sekvenci příkazů změnit,
je možné bloky od sebe rozdělit, popř.&nbsp;vybraný blok smazat (přes menu
zobrazené po stisku pravého tlačítka myši), zkopírovat (opět přes pravé
tlačítko myši) či přesunout. Společně spojené bloky tvoří program, který je
možné spustit doubleclickem.</p>

*** image ***
<p><i>Obrázek 7: Jednotlivé bloky jsou rozděleny do kategorií (skupin). Zde
jsou zobrazeny standardní skupiny bloků, přičemž další skupiny lze přidat
později (což si taktéž ukážeme)</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Pohyb objektů po pracovní ploše</h2>

<p>Vizuální tvorba programů pomocí skládání příkazových bloků tvoří pouze jednu
část přitažlivosti <i>Scratche</i> při výuce programování. Druhou částí je
takzvaná pracovní plocha s&nbsp;volitelným pozadím, po níž se mohou
v&nbsp;závislosti na volaných příkazech pohybovat takzvané <i>sprity</i>, které
navíc mohou při svém pohybu za sebou kreslit křivku (tj.&nbsp;stopu pohybu).</p>

*** image ***
<p><i>Obrázek 8: Na této pracovní ploše se již na začátku nachází postavička &ndash; sprite.</i></p>

<p>Pod pojmem <i>sprite</i> je ve <i>Scratchi</i> myšlen rastrový obrázek, jenž
může představovat například postavu či jiný pohyblivý nebo i statický předmět
ve hře, zatímco pozadí umístěné na pracovní plochu (taktéž se jedná o rastrový
obrázek) je většinou neměnné a může představovat pozadí hry, místnost, ve které
se odehrává nějaký dialog atd. <i>Scratch</i> díky možnosti prakticky
neomezeného pohybu <i>spritů</i> po pracovní ploše s&nbsp;volitelným kreslením
cesty (stopy pohybu), kterou <i>sprity</i> vykonaly, umně integruje jak
možnosti programovacích jazyků typu <i>Karel</i> či <i>Baltazar</i>
(<i>sprity</i> umístěné a pohybující se po pomyslné šachovnici) a taktéž
programovacího jazyka <i>Logo</i> s&nbsp;neodmyslitelnou želvou, která se může
pohybovat libovolným směrem po ploše.</p>

*** image ***
<p><i>Obrázek 9: Na pozadí pracovní plochy je možné vložit vybraný obrázek.</i></p>

<p>Pohyb <i>spritů</i> lze zajistit pomocí příkazových bloků určených pro posun
<i>spritu</i> o zadaný počet kroků, otočení <i>spritu</i> libovolným směrem,
přesun <i>spritu</i> na zvolené absolutní či relativní souřadnice atd. Všechny
tyto bloky jsou umístěny v&nbsp;první skupině nazvané příznačně
<strong>Pohyb</strong>. Základní vlastnosti <i>spritu</i> se ovšem nemusí měnit
pouze běžícím programem, ale i interaktivně. K&nbsp;tomu slouží jak pracovní
plocha, na níž je možné <i>sprite</i> pomocí myši přesunout na libovolné místo,
tak i oblast zobrazená nad vlastním skriptem (programem). V&nbsp;této oblasti
lze pomocí trojice ikon měnit velikost i natočení vybraného (přesněji řečeno
právě aktivního) <i>spritu</i> a kromě toho se zde zobrazuje i způsob
vykreslení stopy. <i>Sprity</i> mohou při svém pohybu po pracovní ploše
reagovat na různé události, například na náraz do jiného <i>spritu</i>, přesun
nad oblast s&nbsp;určenou barvou, náraz do stěny ohraničující pracovní plochu
atd. Vybraný <i>sprite</i> navíc může něco &bdquo;říct&ldquo; nebo si něco
&bdquo;pomyslet&ldquo;, což je vizuálně zobrazeno formou komiksového obrázku se
zvoleným textem (takto lze realizovat základní vstupně/výstupní operace).</p>

*** image ***
<p><i>Obrázek 10: Pro první krůčky ve Scratchi je vhodné jako obrázek pozadí
použít tuto mřížku.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instalace doplňujících bloků</h2>

<p>Na sedmém obrázku jsme si ukázali standardní skupiny bloků, z&nbsp;nichž je
možné ve Scratchi tvořit programy. Ovšem ve skutečnosti samotný systém Scratche
uživatelům nabízí mnohem větší množství bloků. Další bloky (resp.&nbsp;přesně
řečeno jejich celé skupiny) lze doinstalovat po kliknutí na ikonu, která se
nachází pod všemi nabízenými skupinami bloků. Tato ikona vypadá následovně:</p>

*** image ***
<p><i>Obrázek 11: Ikona zobrazená pod seznamem skupin bloků, která slouží
k&nbsp;instalaci doplňujících bloků.</i></p>

<p>Po výběru výše zobrazené ikony se otevře nabídka skupin přídavných bloků,
která v&nbsp;aktuální verzi Scratche vypadá takto:</p>

*** image ***
<p><i>Obrázek 12: Na této stránce je možné si vybrat sadu dalších bloků, které
se mohou ve Scratchi použít. Pro naše účely použijeme sadu bloků
<strong>Pen</strong>.</i></p>

<p>Pro tvorbu programů popsaných v&nbsp;navazujících kapitolách budeme
potřebovat skupinu bloků nazvanou <strong>Pen</strong>
resp.&nbsp;v&nbsp;počeštěné verzi <strong>Pero</strong>.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Kreslení na pracovní plochu</h2>

<p>S&nbsp;pohybem <i>spritů</i> po pracovní ploše poměrně úzce souvisí i funkce
pro kreslení stopy, kterou za sebou <i>sprite</i> při svém pohybu zanechává.
Podobně jako v&nbsp;programovacím jazyku <i>Logo</i> se i ve <i>Scratchi</i>
pro kreslení stopy využívá takzvané kreslicí pero (<i>pen</i>), které lze
spustit na papír &ndash; pracovní plochu &ndash; nebo ho zvednout (v&nbsp;tomto
případě se samozřejmě stopa nekreslí a sprite se může pohybovat, aniž by změnil
již nakreslený obrázek). Aby byly tyto příkazy dostupné, je nutné do Scratche
přidat rozšíření <i>Pen</i> zmíněné <a href="#k06">v&nbsp;předchozí
kapitole</a>.</p>

*** image ***
<p><i>Obrázek 13: Příkazové bloky sloužící pro nastavení vlastností kreslicího
pera.</i></p>

<p>Kromě toho je možné buď interaktivně nebo i programově měnit barvu kreslení
a šířku stopy, přičemž barva kreslení se buď zadává číselným kódem (jedním
číslem, nikoli pomocí RGB ani HSB/HLS/CMYK...) nebo výběrem barvy
z&nbsp;nabízené barvové palety. Nastavení barvy podle barvového kódu sice může
zpočátku být poněkud matoucí, ale není až tak velký problém si &ndash;
samozřejmě přímo ve <i>Scratchi</i> &ndash; s&nbsp;využitím dvojice
programových smyček nechat vykreslit a vytisknout celou barvovou paletu.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Jednoduchý program tvořený sekvencí příkazů</h2>

<p>Nyní se konečně podívejme na to, jak lze ve Scratchi vytvořit jednoduchý
program. Konkrétně se bude jednat o program, po jehož spuštění se nakreslí
barevný čtverec. Na plochu uprostřed obrazovky (to je plocha pro samotný
program) nejdříve přetáhneme dvojici bloků, které přemístí postavičku
doprostřed obrazovky a nastaví její rotaci na 90&deg;. Tyto dva bloky spojíme
(postačuje je přemístit dostatečně blízko k&nbsp;sobě):</p>

*** image ***
<p><i>Obrázek 14: Dvojice bloků, která zaručí, že se čtverec vždy vytvoří na
stejném místě.</i></p>

<p>Dále na plochu přetáhneme další čtyři bloky, které provedou čtyři operace:</p>

<ol>
<li>Smažou kreslicí plochu.</li>
<li>Povolí kreslení perem (postavička po přemístění za sebou zanechá úsečku).</li>
<li>Nastaví barvu pera na barvu vybranou z&nbsp;barvové palety.</li>
<li>Nastaví šířku pera na hodnotu 5 (1 znamená šířku jednoho pixelu).</li>
</ol>

*** image ***
<p><i>Obrázek 15: Smazání kreslicí plochy a nastavení stylu kreslení
s&nbsp;využitím čtyř bloků.</i></p>

<p>A konečně do programu přidáme bloky, které postavičku posunou o 100 kroků a
následně ji otočí o 90&deg;. Tím dojde k&nbsp;vykreslení jedné strany čtverce,
takže tyto bloky budeme čtyřikrát opakovat. Pro &bdquo;odladění&ldquo; programu
je do něj možné vložit bloky, které program na chvíli pozastaví. Například
následující sekvence bloků zajistí, že se postavička zastaví po nakreslení
každé strany čtverce:</p>

*** image ***
<p><i>Obrázek 16: Příkazy pro pohyb a otáčení postavičky, které postupně
vykreslí čtyři strany čtverce.</i></p>

<p>Celý program je poněkud delší, ale stále velmi dobře pochopitelný:</p>

*** image ***
<p><i>Obrázek 17: Úplný program, který po svém spuštění vykreslí čtverec.</i></p>

<p>Program se spustí snadno &ndash; dvojitým kliknutím na jeho první blok.
Výsledkem by měl být takto vypadající čtverec:</p>

*** image ***
<p><i>Obrázek 18: Výsledný čtverec vykreslený programem.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Blok zajišťující opakování příkazů</h2>

<p>Programy tvořené ve <i>Scratchi</i> se samozřejmě neskládají z&nbsp;pouhé
řady (či spíše sloupce) bloků, které by se vykonávaly sekvenčně za sebou
&ndash; tímto způsobem by bylo možné vytvořit jen ty nejjednodušší algoritmy,
které neobsahují opakující se části kódu. Pro opakující se části kódu (což je i
náš případ se čtyřmi stranami čtverce) je možné použít některý
z&nbsp;podporovaných typů programové smyčky. Ty jsou ve <i>Scratchi</i>
reprezentovány &ndash; jak zajisté uhodnete &ndash; taktéž pomocí příkazových
bloků, ovšem tyto bloky jsou poněkud zvláštní, protože v&nbsp;sobě mohou
obsahovat další (pod)bloky. Kvůli tomu mají bloky reprezentující programové
smyčky odlišný tvar a navíc jsou elastické, aby do nich bylo možné vložit další
bloky. Samozřejmě je umožněno, aby programové smyčky byly vnořeny a
v&nbsp;reálných programech se s&nbsp;vnořenými programovými smyčkami i velmi
často můžeme setkat:</p>

*** image ***
<p><i>Obrázek 19: Speciální blok, do něhož lze vložit další bloky, které se
budou opakovat.</i></p>

<p>Vykreslení čtverce můžeme přepsat do následujícího tvaru využívajícího
programovou smyčku:</p>

*** image ***
<p><i>Obrázek 20: Část programu pro vykreslení čtverce se skládá ze sady
4&times; se opakujících příkazů, takže ji lze zkrátit.</i></p>

<p></p>

*** image ***
<p><i>Obrázek 21: A takto vypadá program po úpravě do podoby s&nbsp;opakujícími
se bloky.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Obsah navazujícího článku</h2>

<p></p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

