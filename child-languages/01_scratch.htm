<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyky určené pro výuku programování</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Programovací jazyky určené pro výuku programování</a></p>
<p><a href="#k02">*** 2. Kouzlo vizuálního programování</a></p>
<p><a href="#k03">*** 3. Projekt Scratch &ndash; &bdquo;programovatelné puzzle&ldquo;</a></p>
<p><a href="#k04">*** 4. První kroky ve Scratchi</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyky určené pro výuku programování</h2>

<p>V&nbsp;tomto seriálu si popíšeme některé známé i méně známé programovací
jazyky a jejich dialekty, které byly navrženy pro výuku programování,
algoritmizace, programovacích technik a v&nbsp;některých případech též návrhu
datových struktur. Některé z&nbsp;dále popsaných programovacích jazyků jsou
určeny pro předškolní děti, popř.&nbsp;pro děti na prvním stupni základních
škol. I přes zdánlivou jednoduchost jsou však některé z&nbsp;těchto jazyků
překvapivě efektivní i pro tvorbu složitějších aplikací, samozřejmě
v&nbsp;závislosti na tom, jaké knihovny daný programovací jazyk či jeho
implementace obsahuje (například tvorba jednodušší hry v&nbsp;dále zmíněném
systému <i>Scratch</i> je i pro začínajícího programátora otázkou několika
desítek minut).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Kouzlo vizuálního programování</h2>

<p>Většina &bdquo;klasických&ldquo; programovacích jazyků, v&nbsp;nichž se
algoritmy zapisují formou zdrojového textu, se hned z&nbsp;několika důvodů
příliš nehodí pro děti předškolního věku nebo pro děti na prvním stupni ZŠ.
Jedním z&nbsp;těchto důvodů je nutnost zápisu algoritmů s&nbsp;využitím více či
méně strukturovaného textu, jehož syntaxe je hlídána buď interpretrem či
překladačem. Jedná se o nejdéle používaný způsob programování, jehož počátky
můžeme hledat v&nbsp;hluboké počítačové minulosti, protože první překladač
pracující se strojovým textem byl vytvořen již v&nbsp;rozmezí let 1951 až 1952
<i>Grace Hopperovou</i> v&nbsp;rámci projektu <i>A-0 (Arithmetic Language
version 0)</i>, který byl později následován známým <i>FORTRANem</i> navrženým
<i>Johnem W. Backusem</i> a jeho vývojovým týmem. Ovšem v&nbsp;průběhu oněch
přibližně šedesáti let se znovu a znovu objevovaly pokusy o vizuální návrh
algoritmů, tj.&nbsp;o tvorbu programů nikoli zápisem strukturovaného zdrojového
textu, ale návrhem algoritmů pomocí diagramů.</p>

<p><div class="rs-tip-major">Poznámka: proč je to tak důležité? Lidský mozek
dokáže velmi dobře a rychle rozpoznávat &bdquo;vzory&ldquo; (<i>patterns</i>),
takže se použití nějakého vhodného &bdquo;2D zápisu&ldquo; přímo nabízí. Dalším
důvodem je fakt, že se programování změní na interaktivní manipulaci
s&nbsp;vizuálními objekty, což sice není ani zdaleka nejrychlejší způsob, ale
může být nejméně komplikovaný a navíc je (někdy) relativně snadné zajistit
korektnost takové reprezentace.</div></p>

<p>Známé jsou například pokusy o &bdquo;překlad&ldquo; klasických vývojových
diagramů, využití kopenogramů (což je resp.&nbsp;byla tuzemská specialita) atd.
V&nbsp;současnosti někteří analytici a vývojáři využívají <i>UML</i> (což je
ovšem jen pomůcka) či <i>BPMN</i> (návrh business procesů, ovšem s&nbsp;vhodně
zvolenými bloky se vlastně jedná o plnohodnotný jazyk). V&nbsp;oblasti software
určeného pro výuku programování se využívá podobný princip, jako v&nbsp;případě
vývojových diagramů &ndash; možnost zápisu algoritmů s&nbsp;využitím bloků
představujících jednotlivé příkazy či volané funkce, které jsou doplněny o
základní strukturované příkazy určené pro tvorbu rozhodovacích podmínek a
programových smyček.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Projekt Scratch &ndash; &bdquo;programovatelné puzzle&ldquo;</h2>

<p>Na výše uvedeném principu, tj.&nbsp;na vylepšených vývojových diagramech, je
postaven i projekt <i>Scratch</i>, v&nbsp;němž jsou uživatelům nabídnuty
základní stavební <i>bloky</i>, z&nbsp;nichž se program skládá, přičemž je
ponecháno pouze na uživateli, jakým způsobem tyto bloky využije ve svých
programech. Díky způsobu skládání bloků pod sebe (podobně jako u puzzle),
popř.&nbsp;do sebe je zajištěno, že program bude po syntaktické stránce vždy
v&nbsp;pořádku, což je důležité, protože odpadá pro děti nudná oprava překlepů,
hledání chybějících středníků, hlídání párovosti závorek i další činnosti
spojené s&nbsp;prací s&nbsp;běžnými programovacími jazyky.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. První kroky ve Scratchi</h2>

<p>Pojďme si nyní ve stručnosti říci, jakým způsobem se vlastně programy ve
<i>Scratchi</i> tvoří. Je to ve skutečnosti velmi jednoduché a po krátkém
zaučení i intuitivní &ndash; v&nbsp;levé části okna se postupně vybírají
příkazové bloky, které se přetahují do prostřední části okna, kde se
z&nbsp;těchto bloků může tvořit program či programy. Běžný příkazový blok je
vizuálně představován obdélníkem s&nbsp;několika výčnělky připomínajícími
puzzle. Programové smyčky a podmínky jsou vyobrazeny jako složitější tvary
umožňující vkládání dalších bloků <i>dovnitř</i> svého těla. Pomocí těchto
výčnělků se bloky spojují dohromady tak, aby tvořily sekvenci či dokonce
strukturovaný program. V&nbsp;případě, že je zapotřebí sekvenci příkazů změnit,
je možné bloky od sebe rozdělit, popř.&nbsp;vybraný blok smazat (přes menu
zobrazené po stisku pravého tlačítka myši), zkopírovat (opět přes pravé
tlačítko myši) či přesunout. Společně spojené bloky tvoří program, který je
možné spustit doubleclickem. Na ploše <i>Skripty</i> je možné vytvořit i více
programů, každý je tvořený množinou spojených bloků.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p>Vizuální tvorba programů pomocí skládání příkazových bloků tvoří pouze jednu
část přitažlivosti <i>Scratche</i> při výuce programování. Druhou částí je
takzvaná pracovní plocha s&nbsp;volitelným pozadím, po níž se mohou
v&nbsp;závislosti na volaných příkazech pohybovat takzvané <i>sprity</i>, které
navíc mohou při svém pohybu za sebou kreslit křivku (tj.&nbsp;stopu pohybu).
Pod pojmem <i>sprite</i> je ve <i>Scratchi</i> myšlen rastrový obrázek, jenž
může představovat například postavu či jiný pohyblivý nebo i statický předmět
ve hře, zatímco pozadí umístěné na pracovní plochu (taktéž se jedná o rastrový
obrázek) je většinou neměnné a může představovat pozadí hry, místnost, ve které
se odehrává nějaký dialog atd. <i>Scratch</i> díky možnosti prakticky
neomezeného pohybu <i>spritů</i> po pracovní ploše s&nbsp;volitelným kreslením
cesty (stopy pohybu), kterou <i>sprity</i> vykonaly, umně integruje jak
možnosti programovacích jazyků typu <i>Karel</i> či <i>Baltazar</i>
(<i>sprity</i> umístěné a pohybující se po pomyslné šachovnici) a taktéž
programovacího jazyka <i>Logo</i> s&nbsp;neodmyslitelnou želvou, která se může
pohybovat libovolným směrem po ploše.</p>

<p>Pohyb <i>spritů</i> lze zajistit pomocí příkazových bloků určených pro posun
<i>spritu</i> o zadaný počet kroků, otočení <i>spritu</i> libovolným směrem,
přesun <i>spritu</i> na zvolené absolutní či relativní souřadnice atd. Všechny
tyto bloky jsou umístěny v&nbsp;první skupině nazvané příznačně
<strong>Pohyb</strong>. Základní vlastnosti <i>spritu</i> se ovšem nemusí měnit
pouze běžícím programem, ale i interaktivně. K&nbsp;tomu slouží jak pracovní
plocha, na níž je možné <i>sprite</i> pomocí myši přesunout na libovolné místo,
tak i oblast zobrazená nad vlastním skriptem (programem). V&nbsp;této oblasti
lze pomocí trojice ikon měnit velikost i natočení vybraného (přesněji řečeno
právě aktivního) <i>spritu</i> a kromě toho se zde zobrazuje i způsob
vykreslení stopy. <i>Sprity</i> mohou při svém pohybu po pracovní ploše
reagovat na různé události, například na náraz do jiného <i>spritu</i>, přesun
nad oblast s&nbsp;určenou barvou, náraz do stěny ohraničující pracovní plochu
atd. Vybraný <i>sprite</i> navíc může něco &bdquo;říct&ldquo; nebo si něco
&bdquo;pomyslet&ldquo;, což je vizuálně zobrazeno formou komiksového obrázku se
zvoleným textem (takto lze realizovat základní vstupně/výstupní operace).</p>


<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

