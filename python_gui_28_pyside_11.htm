<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba GUI v Pythonu s využitím frameworku PySide: widgety pro textový vstup</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba GUI v Pythonu s využitím frameworku PySide: widgety pro textový vstup</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V jedenáctém článku o frameworku PySide si popíšeme další často používané ovládací prvky. Zaměříme se na prvky pro vstup jednořádkového nebo víceřádkového textu. Jedná se o widgety QLineEdit a QTextEdit, přičemž druhý prvek lze použít i ve funkci HTML prohlížeče.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba GUI v&nbsp;Pythonu s&nbsp;využitím frameworku PySide: widgety pro textový vstup</a></p>
<p><a href="#k02">2. Jednořádkové vstupní textové pole</a></p>
<p><a href="#k03">3. První demonstrační příklad: zobrazení textového pole, čtení zapsaného textu</a></p>
<p><a href="#k04">4. Nastavení výchozího textu</a></p>
<p><a href="#k05">5. Omezení maximálního počtu zapsaných znaků</a></p>
<p><a href="#k06">6. Nastavení zarovnání textu</a></p>
<p><a href="#k07">7. Druhý demonstrační příklad: vylepšené textové pole</a></p>
<p><a href="#k08">8. Definice vstupní masky pro zápis specifických vstupních dat</a></p>
<p><a href="#k09">9. Třetí demonstrační příklad: vylepšené textové pole se vstupní maskou</a></p>
<p><a href="#k10">10. Použití validátorů pro textové pole</a></p>
<p><a href="#k11">11. Čtvrtý demonstrační příklad: validátor typu <strong>QIntValidator</strong></a></p>
<p><a href="#k12">12. Pátý demonstrační příklad: validátor typu <strong>QRegExpValidator</strong></a></p>
<p><a href="#k13">13. Ovládací prvek pro zápis i zobrazení víceřádkových dokumentů s&nbsp;formátováním</a></p>
<p><a href="#k14">14. Šestý demonstrační příklad: widget <strong>QTextEdit</strong> ve funkci víceřádkového textového pole</a></p>
<p><a href="#k15">15. Základní zpracování HTML</a></p>
<p><a href="#k16">16. Sedmý demonstrační příklad: widget <strong>QTextEdit</strong> ve funkci jednoduchého prohlížeče HTML stránek</a></p>
<p><a href="#k17">17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba GUI v&nbsp;Pythonu s&nbsp;využitím frameworku PySide: widgety pro textový vstup</h2>

<p>V&nbsp;dnešním pokračování seriálu o tvorbě aplikací s&nbsp;grafickým
uživatelským rozhraním v&nbsp;Pythonu se budeme zabývat popisem dalších
ovládacích prvků, které nalezneme v&nbsp;knihovně PySide. Zaměříme se přitom na
widgety sloužící pro vstup textu, ať již textu jednořádkového, víceřádkového či
dokonce tzv. rich textu, tj. textu, který je naformátován a který může
v&nbsp;případě potřeby obsahovat i další objekty. V&nbsp;knihovně PySide
nalezneme následující čtyři ovládací prvky, které jsou pro tyto účely
připravené:</p>

<table>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html#qlineedit">QLineEdit</a></td><td>vstup jednoho řádku textu</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPlainTextEdit.html#qplaintextedit">QPlainTextEdit</a></td><td>jednoduché vstupní víceřádkové textové pole</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html#qtextedit">QTextEdit</a></td><td>vstupní textové pole (umožňuje práci s tabulkami, obrázky atd.)</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTextBrowser.html#qtextbrowser">QTextBrowser</a></td><td>komponenta s&nbsp;textem, který může obsahovat hypertextové odkazy</td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Jednořádkové vstupní textové pole</h2>

<p>Prvním ovládacím prvkem, s&nbsp;nímž se v&nbsp;dnešním článku seznámíme, je
widget nazvaný jednoduše <strong>QLineEdit</strong>. Jak již jeho název
napovídá, je tento prvek určen pro vstup jednořádkového textu a vzhledem
k&nbsp;velmi časté potřebě zadat do aplikace jediný údaj (adresa, jméno
uživatele, jeho heslo, PIN, název vyhledávaného výrobku atd.) patří tento typ
widgetů mezi nejpoužívanější prvky grafického uživatelského rozhraní vůbec.
Ovšem aby nedošlo k&nbsp;omylu: <strong>QLineEdit</strong> je sice skutečně
možné použít pro pouhý vstup textu, ale jeho možnosti jsou ve skutečnosti
větší, protože je například umožněno specifikovat masku určující, jak má text
zadávaný uživatelem vypadat, takže je možné například připravit vstupní textové
pole určené pro zápis strukturovaného telefonního čísla, DIČ atd. Dále lze
k&nbsp;textovému poli přidat takzvaný <i>validátor</i>, což je objekt
kontrolující, zda uživatelem zapsaný text odpovídá nějakým kritériím, například
zda se jedná o celé číslo z&nbsp;určeného rozsahu, platné datum apod. Vše si
samozřejmě ukážeme v&nbsp;několika demonstračních příkladech.</p>

<img src="https://i.iinfo.cz/images/162/pyside11-1.png" class="image-319911" alt="&#160;" width="602" height="574" />
<p><i>Obrázek 1: Několik vstupních textových polí v&nbsp;dialogu pro vytvoření
nového projektu v&nbsp;IDE Eric.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad: zobrazení textového pole, čtení zapsaného textu</h2>

<p>Ukažme si nyní nejjednodušší formu jednořádkového vstupního textového pole.
To vytvoříme snadno konstruktorem <strong>QLineEdit</strong>, kterému předáme
jediný parametr &ndash; referenci na kontejner, ve kterém se bude textové pole
nacházet:</p>

<pre>
lineEdit = QtGui.QLineEdit(self)
</pre>

<img src="https://i.iinfo.cz/images/162/pyside11-2.png" class="image-319912" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 2: Textové pole se zobrazí zcela běžným způsobem a při práci
s&nbsp;textem je možné použít schránku (clipboard), selection buffer
atd.</i></p>

<p>Textové pole umístíme běžným způsobem do kontejneru s&nbsp;využitím správců
geometrie. Aby byl příklad trošku složitější, zkombinujeme možnosti dvou
správců geometrie: vertikálního a horizontálního:</p>

<pre>
<i># vytvoření prvního správce geometrie</i>
topLayout = QtGui.QVBoxLayout()
&nbsp;
<i># vytvoření druhého správce geometrie</i>
subLayout = QtGui.QHBoxLayout()
&nbsp;
<i># umístění widgetů do okna</i>
topLayout.addWidget(self.lineEdit)
topLayout.addLayout(subLayout)
&nbsp;
<i># tlačítka vložíme do druhého správce geometrie</i>
subLayout.addWidget(showTextButton)
subLayout.addWidget(quitButton)
&nbsp;
<i># nastavení správce geometrie a vložení všech komponent do okna</i>
self.setLayout(topLayout)
</pre>

<p>Text zadaný uživatelem do vstupního textového pole přečteme pomocí metody
<strong>text()</strong>:</p>

<pre>
text = self.lineEdit.text()
</pre>

<img src="https://i.iinfo.cz/images/162/pyside11-3.png" class="image-319913" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 3: Při práci s&nbsp;textovým polem je plně podporován Unicode, a
to jak při zápisu textu, tak i při jeho čtení Pythonovským programem.</i></p>

<p>Následuje výpis zdrojového kódu prvního demonstračního příkladu, v&nbsp;němž
je použito textové pole a po stisku tlačítka "Show text" se zobrazí dialog
s&nbsp;textem, který uživatel do pole zapsal:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        quitButton = self.prepareQuitButton()
        showTextButton = self.prepareShowTextButton()
        self.lineEdit = self.prepareLineEdit()
&nbsp;
        <i># vytvoření prvního správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vytvoření druhého správce geometrie</i>
        subLayout = QtGui.QHBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(self.lineEdit)
        topLayout.addLayout(subLayout)
&nbsp;
        <i># tlačítka vložíme do druhého správce geometrie</i>
        subLayout.addWidget(showTextButton)
        subLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareShowTextButton</strong>(self):
        <i># druhé tlačítko</i>
        showTextButton = QtGui.QPushButton('Show text', self)
        showTextButton.resize(showTextButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        showTextButton.clicked.connect(self.showTextDialog)
        return showTextButton
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareLineEdit</strong>(self):
        <i># jednořádkové vstupní textové pole</i>
        lineEdit = QtGui.QLineEdit(self)
        return lineEdit
&nbsp;
    def <strong>showTextDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        text = self.lineEdit.text()
        msgBox.setText(u'Text: {t}'.format(t=text))
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow + QListWidget")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Nastavení výchozího textu</h2>

<p>Pokud je zapotřebí, aby se v&nbsp;textovém poli už při zobrazení okna nebo
dialogu nacházel výchozí text, lze pro tento účel použít metodu nazvanou
příhodně <strong>setText</strong>, které se řetězec předá:</p>

<pre>
<i># jednořádkové vstupní textové pole</i>
lineEdit = QtGui.QLineEdit(self)
lineEdit.<strong>setText(u'příliš žluťoučký kůň')</strong>
</pre>

<p>Poznámka: prefix &bdquo;u&ldquo; je u řetězce uveden kvůli kompatibilitě
s&nbsp;Pythonem 2.x.</p>

<p>Alternativně je možné text předat již konstruktoru objektů typu
<strong>QLineEdit</strong>. Jedná se o první parametr, protože reference na
kontejner, do kterého se textové pole ukládá, se posune na druhou pozici:</p>

<pre>
<i># jednořádkové vstupní textové pole</i>
lineEdit = QtGui.<strong>QLineEdit(u'příliš žluťoučký kůň', self)</strong>
</pre>

<img src="https://i.iinfo.cz/images/162/pyside11-3.png" class="image-319913" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 4: Jednořádkové textové pole s&nbsp;výchozím textem.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Omezení maximálního počtu zapsaných znaků</h2>

<p>Poměrně často se setkáme s&nbsp;nutností omezit maximální počet znaků, které
se do textového pole mohou zadat. Výchozí maximální kapacita je totiž nastavena
na hodnotu 32767, což je pro naprostou většinu aplikací příliš mnoho. Omezení
maximálního počtu znaků je snadné &ndash; stačí zavolat metodu
<strong>setMaxLength</strong>, které se počet znaků předá:</p>

<pre>
<i># jednořádkové vstupní textové pole</i>
lineEdit = QtGui.QLineEdit(self)
lineEdit.setText(u'příliš žluťoučký kůň')
lineEdit.<strong>setMaxLength(20)</strong>
</pre>

<p>Poznámka: zadaná hodnota 20 skutečně odpovídá počtu znaků, nikoli bajtů.
Pozor je nutné dát především na to, že například výše použitý řetězec
&bdquo;příliš žluťoučký kůň&ldquo; má přesně dvacet znaků, ovšem například při
použití UTF-8 je jeho délka 30 bajtů. Na rozdíly narazíte například při použití
některých relačních databází, které počítají délku řetězců v&nbsp;bajtech.</p>

<p>Pokud se uživatel pokusí zapsat delší řetězec, nebude tato operace povolena.
Ani při snaze zkopírovat delší řetězec přes schránku se nezapíše více, než
nastavený maximální počet znaků. Totéž ovšem platí i pro text nastavený přes
metodu <strong>setText</strong>. Ostatně si vyzkoušejte sami, co se stane:</p>

<pre>
<i># jednořádkové vstupní textové pole</i>
lineEdit = QtGui.QLineEdit(self)
lineEdit.setText(u'tento řetězec je v každém případě delší než 20 znaků')
lineEdit.setMaxLength(20)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Nastavení zarovnání textu</h2>

<p>V&nbsp;některých případech může být výhodné, aby byl text
v&nbsp;jednořádkovém textovém poli zarovnaný doprava či na střed a nikoli
doleva. I toho je možné dosáhnout, a to velmi snadno. Podívejme se na
následující úryvek kódu, v&nbsp;němž je zarovnání nastaveno s&nbsp;využitím
metody nazvané <strong>setAlignment</strong>:</p>

<pre>
<i># jednořádkové vstupní textové pole</i>
lineEdit = QtGui.QLineEdit(self)
lineEdit.setText(u'příliš žluťoučký kůň')
lineEdit.setMaxLength(20)
lineEdit.<strong>setAlignment(QtCore.Qt.AlignRight)</strong>
</pre>

<img src="https://i.iinfo.cz/images/162/pyside11-4.png" class="image-319914" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 5: Jednořádkové textové pole s&nbsp;výchozím textem, který je
zarovnán doprava.</i></p>

<p>Pro nastavení zarovnání je možné použít tyto konstanty a jejich
kombinace:</p>

<table>
<tr><th>Konstanta</th><th>Význam</th></tr>
<tr><td>Qt.AlignLeft</td><td>zarovnání doleva (výchozí hodnota)</td></tr>
<tr><td>Qt.AlignRight</td><td>zarovnání doprava</td></tr>
<tr><td>Qt.AlignHCenter</td><td>vycentrování textu</td></tr>
<tr><td>Qt.AlignJustify</td><td>u tohoto widgetu odpovídá Qt.AlignLeft</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Qt.AlignTop</td><td>vertikální zarovnání nahoru</td></tr>
<tr><td>Qt.AlignBottom</td><td>vertikální zarovnání dolů</td></tr>
<tr><td>Qt.AlignVCenter</td><td>vertikální zarovnání na střed (výchozí hodnota)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Qt.AlignCenter</td><td>horizontální i vertikální zarovnání na střed</td></tr>
</table>



<p><a name="k07"></a></p>
<h2 id="k07">7. Druhý demonstrační příklad: vylepšené textové pole</h2>

<p>V&nbsp;dnešním druhém demonstračním příkladu je ukázáno několik modifikací
textového pole (všechny jsme si popsali v&nbsp;předchozích třech
kapitolách):</p>

<ol>

<li>Je specifikován výchozí text, který je v&nbsp;textovém poli implicitně
zobrazen.</li>

<li>Maximální počet znaků, které je možné zapsat, je omezen na 20.</li>

<li>Text je zarovnán doprava a nikoli doleva (horizontální zarovnání na střed
zůstalo nezměněno, většinou ani nemá příliš velký význam se ho pokoušet
změnit).</li>

</ol>

<img src="https://i.iinfo.cz/images/162/pyside11-5.png" class="image-319915" alt="&#160;" width="255" height="127" />
<p><i>Obrázek 6: Po přečtení textu z&nbsp;widgetu <strong>QLineEdit</strong>
získáme plnohodnotný text v&nbsp;Unicode.</i></p>

<p>Následuje výpis zdrojového kódu tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        quitButton = self.prepareQuitButton()
        showTextButton = self.prepareShowTextButton()
        self.lineEdit = self.prepareLineEdit()
&nbsp;
        <i># vytvoření prvního správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vytvoření druhého správce geometrie</i>
        subLayout = QtGui.QHBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(self.lineEdit)
        topLayout.addLayout(subLayout)
&nbsp;
        <i># tlačítka vložíme do druhého správce geometrie</i>
        subLayout.addWidget(showTextButton)
        subLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareShowTextButton</strong>(self):
        <i># druhé tlačítko</i>
        showTextButton = QtGui.QPushButton('Show text', self)
        showTextButton.resize(showTextButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        showTextButton.clicked.connect(self.showTextDialog)
        return showTextButton
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareLineEdit</strong>(self):
        <i># jednořádkové vstupní textové pole</i>
        lineEdit = QtGui.QLineEdit(self)
        lineEdit.setText(u'příliš žluťoučký kůň')
        lineEdit.setMaxLength(20)
        lineEdit.setAlignment(QtCore.Qt.AlignRight)
        return lineEdit
&nbsp;
    def <strong>showTextDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        text = self.lineEdit.text()
        msgBox.setText(u'Text: {t}'.format(t=text))
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow + QListWidget")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Definice vstupní masky pro zápis specifických vstupních dat</h2>

<p>Pro jednořádkové textové pole je možné specifikovat i takzvanou masku, která
určuje, jaké typy znaků a na jakých pozicích se mohou v&nbsp;poli objevit.
Ukažme si jednoduchý příklad. Pokud budeme chtít zajistit, aby uživatel do
textového pole mohl zadat pouze devítimístné telefonní číslo (a žádné další
znaky), může použít tuto masku:</p>

<pre>
<i># jednořádkové vstupní textové pole</i>
lineEdit = QtGui.QLineEdit(self)
lineEdit.setMaxLength(9)
lineEdit.<strong>setInputMask('999999999')</strong>
</pre>

<img src="https://i.iinfo.cz/images/162/pyside11-6.png" class="image-319916" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 7: Takto vypadá textové pole, v&nbsp;němž je zadaná pouze vstupní
maska, ale žádný text napsaný uživatelem.</i></p>

<p>Maska však může být i složitější. V&nbsp;případě, že číslice mají být
odděleny mezerou (nebo libovolným jiným znakem), lze to opět snadno
zařídit:</p>

<pre>
<i># jednořádkové vstupní textové pole</i>
lineEdit = QtGui.QLineEdit(self)
lineEdit.setMaxLength(11)
lineEdit.<strong>setInputMask('999 999 999')</strong>
</pre>

<img src="https://i.iinfo.cz/images/162/pyside11-7.png" class="image-319917" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 8: Zápis telefonního čísla. Mezery mezi trojicemi číslic jsou do
pole vloženy automaticky.</i></p>

<p>Při definici masky se používají následující zástupné znaky:</p>

<table>
<tr><th>Zástupný znak</th><th>Význam</th></tr>
<tr><td>A</td><td>znaky velké i malé abecedy</td></tr>
<tr><td>a</td><td>dtto, ovšem znak(y) nejsou na daném místě povinné</td></tr>
<tr><td>N</td><td>znaky velké i malé abecedy + číslice</td></tr>
<tr><td>n</td><td>dtto, ovšem znak(y) nejsou na daném místě povinné</td></tr>
<tr><td>X</td><td>libovolný znak (povinný)</td></tr>
<tr><td>x</td><td>libovolný znak (nepovinný)</td></tr>
<tr><td>9</td><td>číslice 0-9</td></tr>
<tr><td>0</td><td>nepovinná číslice 0-9</td></tr>
<tr><td>D</td><td>číslice 1-9 (bez nuly)</td></tr>
<tr><td>d</td><td>nepovinná číslice 1-9</td></tr>
<tr><td>#</td><td>číslice 0-9 popř. znak +, -</td></tr>
<tr><td>H</td><td>hexadecimální číslice 0-9, a-f, A-F</td></tr>
<tr><td>h</td><td>nepovinná hexadecimální číslice 0-9, a-f, A-F</td></tr>
<tr><td>B</td><td>binární číslice 0 nebo 1</td></tr>
<tr><td>b</td><td>nepovinná binární číslice 0 nebo 1</td></tr>
<tr><td>&gt;</td><td>další znaky budou převedeny na velká písmena</td></tr>
<tr><td>&lt;</td><td>další znaky budou převedeny na malá písmena</td></tr>
<tr><td>!</td><td>ruší platnost &gt; a &lt;</td></tr>
<tr><td>\</td><td></td></tr>
</table>

<img src="https://i.iinfo.cz/images/162/pyside11-8.png" class="image-319918" alt="&#160;" width="211" height="127" />
<p><i>Obrázek 9: Tuto podobu má telefonní číslo přečtení z&nbsp;widgetu.
Povšimněte si existencí mezer předepsaných maskou.</i></p>

<p>Dokonce je možné určit, jaké znaky se v&nbsp;textovém poli zobrazí na těch
místech, která mají být uživatelem vyplněna. Tento znak zapište za středník.
Pro jednoduchost použijeme podtržítko, ale můžete zkusit použít hvězdičku,
otazník atd.:</p>

<pre>
<i># jednořádkové vstupní textové pole</i>
lineEdit = QtGui.QLineEdit(self)
lineEdit.setMaxLength(11)
lineEdit.<strong>setInputMask('999 999 999;_')</strong>
</pre>

<p>Poznámka: podtržítka jsou sice ve vstupním textovém poli viditelná, ale ve
skutečnosti nejsou součástí textu vráceného metodou
<strong>text()</strong>.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Třetí demonstrační příklad: vylepšené textové pole se vstupní maskou</h2>

<p>Ve třetím demonstračním příkladu je ukázáno, jak lze použít textové pole se
vstupní maskou. Maskou specifikujeme, že textové pole bude akceptovat zápis
devítimístného telefonního čísla, v&nbsp;němž jsou vždy trojice číslic od sebe
odděleny mezerou. Podívejme se na zdrojový kód tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        quitButton = self.prepareQuitButton()
        showTextButton = self.prepareShowTextButton()
        self.lineEdit = self.prepareLineEdit()
&nbsp;
        <i># vytvoření prvního správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vytvoření druhého správce geometrie</i>
        subLayout = QtGui.QHBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(self.lineEdit)
        topLayout.addLayout(subLayout)
&nbsp;
        <i># tlačítka vložíme do druhého správce geometrie</i>
        subLayout.addWidget(showTextButton)
        subLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareShowTextButton</strong>(self):
        <i># druhé tlačítko</i>
        showTextButton = QtGui.QPushButton('Show text', self)
        showTextButton.resize(showTextButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        showTextButton.clicked.connect(self.showTextDialog)
        return showTextButton
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareLineEdit</strong>(self):
        <i># jednořádkové vstupní textové pole</i>
        lineEdit = QtGui.QLineEdit(self)
        lineEdit.setPlaceholderText(u'telefonní číslo')
        lineEdit.setMaxLength(11)
        lineEdit.setInputMask('999 999 999;_')
        return lineEdit
&nbsp;
    def <strong>showTextDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        text = self.lineEdit.text()
        msgBox.setText(u'Text: {t}'.format(t=text))
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow + QListWidget")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Použití validátorů pro textové pole</h2>

<p>Masky specifikované pro textová pole sice umožňují do určité míry zajistit,
že uživatel do pole zadá jen správné znaky, ovšem to v&nbsp;mnoha případech
nemusí být dostačující kontrola. Například vstupní pole pro zadání rodného
čísla by mělo tolerovat pouze takové vstupy, které jsou dělitelné jedenácti
(s&nbsp;několika zákonem stanovenými výjimkami). Takovéto složitější podmínky
již není možné zajistit pouze pomocí masky a je nutné využít složitější
techniku. Jedná se o takzvané <i>validátory</i>, které mohou být
k&nbsp;textovému poli přiřazeny metodou <strong>setValidator</strong>:</p>

<pre>
<i># jednořádkové vstupní textové pole</i>
lineEdit = QtGui.QLineEdit(self)
lineEdit.setValidator(........)
</pre>

<p>Validátor je objekt s&nbsp;několika metodami, především s&nbsp;metodami
<strong>validate</strong> a <strong>fixup</strong>. Metoda
<strong>validate</strong> je průběžně volána při editaci textového pole a může
na základě aktuálně zadaného vstupu vracet hodnotu <strong>Invalid</strong>
(vstup je zcela jistě špatný), <strong>Intermediate</strong> (vstup ještě není
dokončen, ale není zcela špatný &ndash; například se teprve zapisují první
číslice rodného čísla) a <strong>Acceptable</strong> (vstup je korektní).
Naproti tomu metoda <strong>fixup</strong> může na konci editace provést
v&nbsp;textu změny, typicky odmazání bílých znaků ze začátku a konce, vymazání
mezer mezi číslicemi atd.</p>

<p>Kromě programátorem deklarovaných validátorů existuje i několik připravených
validátorů. S&nbsp;nimi se setkáme v&nbsp;navazujících dvou kapitolách.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Čtvrtý demonstrační příklad: validátor typu <strong>QIntValidator</strong></h2>

<p>Podívejme se nyní na použití validátoru typu <strong>QIntValidator</strong>.
Jak již víme, je možné tento validátor použít ve chvíli, kdy potřebujeme omezit
údaje zadávané do textového pole na celá čísla v&nbsp;předem známém rozsahu.
Řešení ve chvíli, kdy například vyžadujeme zadání celého čísla od 1 do 15000,
je snadné:</p>

<pre>
<i># jednořádkové vstupní textové pole</i>
lineEdit = QtGui.QLineEdit(self)
lineEdit.setPlaceholderText(u'cena')
lineEdit.setMaxLength(11)
lineEdit.setValidator(QtGui.QIntValidator(1, 15000, self))
return lineEdit
</pre>

<img src="https://i.iinfo.cz/images/162/pyside11-9.png" class="image-319919" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 10: Pokud číslo začíná na 9, bude povoleno zadat maximálně čtyři
číslice.</i></p>

<img src="https://i.iinfo.cz/images/162/pyside11-10.png" class="image-319920" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 11: Pokud číslo začíná na 1, bude povoleno zadat i pět číslic,
ale jen do maximální hodnoty 15000.</i></p>

<p>Zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        quitButton = self.prepareQuitButton()
        showTextButton = self.prepareShowTextButton()
        self.lineEdit = self.prepareLineEdit()
&nbsp;
        <i># vytvoření prvního správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vytvoření druhého správce geometrie</i>
        subLayout = QtGui.QHBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(self.lineEdit)
        topLayout.addLayout(subLayout)
&nbsp;
        <i># tlačítka vložíme do druhého správce geometrie</i>
        subLayout.addWidget(showTextButton)
        subLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareShowTextButton</strong>(self):
        <i># druhé tlačítko</i>
        showTextButton = QtGui.QPushButton('Show text', self)
        showTextButton.resize(showTextButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        showTextButton.clicked.connect(self.showTextDialog)
        return showTextButton
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareLineEdit</strong>(self):
        <i># jednořádkové vstupní textové pole</i>
        lineEdit = QtGui.QLineEdit(self)
        lineEdit.setPlaceholderText(u'cena')
        lineEdit.setMaxLength(11)
        lineEdit.setValidator(QtGui.QIntValidator(1, 15000, self))
        return lineEdit
&nbsp;
    def <strong>showTextDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        text = self.lineEdit.text()
        msgBox.setText(u'Text: {t}'.format(t=text))
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow + QListWidget")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Pátý demonstrační příklad: validátor typu <strong>QRegExpValidator</strong></h2>

<p>Podobně jako validátor <strong>QIntValidator</strong> můžeme použít i další
validátor, který je přímo součástí frameworku PySide. Tento validátor se
jmenuje <strong>QRegExpValidator</strong> a již podle jeho názvu můžeme poznat,
že slouží k&nbsp;validaci textu zadaného uživatelem na základě regulárního
výrazu. Použití tohoto validátoru je snadné; ukažme si tedy jeho využití pro
validaci, zda zadaný text odpovídá výrazu regulárnímu [a-z]{6}[0-9]{2} (šest
znaků malé abecedy následované dvěma číslicemi &ndash; takto omezeny jsou
loginy do mnoha systémů, i když dnes tato omezení většinou postrádají původní
význam). Regulární výraz je reprezentován instancí objektu typu
<strong>QRegExp</strong>:</p>

<pre>
<i># jednořádkové vstupní textové pole</i>
lineEdit = QtGui.QLineEdit(self)
lineEdit.setPlaceholderText(u'login name')
lineEdit.setMaxLength(8)
regexp = QtCore.QRegExp("[a-z]{6}[0-9]{2}")
lineEdit.setValidator(QtGui.QRegExpValidator(regexp, self))
</pre>

<img src="https://i.iinfo.cz/images/162/pyside11-11.png" class="image-319921" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 12: Použití validátoru typu
<strong>QRegExpValidator</strong>.</i></p>

<p>Opět následuje výpis zdrojového kódu tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        quitButton = self.prepareQuitButton()
        showTextButton = self.prepareShowTextButton()
        self.lineEdit = self.prepareLineEdit()
&nbsp;
        <i># vytvoření prvního správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vytvoření druhého správce geometrie</i>
        subLayout = QtGui.QHBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(self.lineEdit)
        topLayout.addLayout(subLayout)
&nbsp;
        <i># tlačítka vložíme do druhého správce geometrie</i>
        subLayout.addWidget(showTextButton)
        subLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareShowTextButton</strong>(self):
        <i># druhé tlačítko</i>
        showTextButton = QtGui.QPushButton('Show text', self)
        showTextButton.resize(showTextButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        showTextButton.clicked.connect(self.showTextDialog)
        return showTextButton
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareLineEdit</strong>(self):
        <i># jednořádkové vstupní textové pole</i>
        lineEdit = QtGui.QLineEdit(self)
        lineEdit.setPlaceholderText(u'login name')
        lineEdit.setMaxLength(8)
        regexp = QtCore.QRegExp("[a-z]{6}[0-9]{2}")
        lineEdit.setValidator(QtGui.QRegExpValidator(regexp, self))
        return lineEdit
&nbsp;
    def <strong>showTextDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        text = self.lineEdit.text()
        msgBox.setText(u'Text: {t}'.format(t=text))
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow + QListWidget")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Ovládací prvek pro zápis i zobrazení víceřádkových dokumentů s&nbsp;formátováním</h2>

<p>Další widget, s&nbsp;nímž se dnes seznámíme, slouží pro zobrazení a vkládání
víceřádkového textu. Ve skutečnosti dokonce existují dva takové widgety; jeden
z&nbsp;nich se jmenuje <strong>QPlainTextEdit</strong> a druhý
<strong>QTextEdit</strong>. První z&nbsp;těchto ovládacích prvků dobře poslouží
v&nbsp;případě, že potřebujeme pracovat s&nbsp;plain textem (zdrojové kódy
atd.), druhý widget již umožňuje použití rich textu, tedy formátování znaků,
slov i celých odstavců. První widget se vytvoří snadno:</p>

<pre>
<i># víceřádkové vstupní textové pole</i>
textEdit = QtGui.QPlainTextEdit(self)
</pre>

<p>Podobného chování dosáhneme i u druhého typu widgetu:</p>

<pre>
<i># víceřádkové vstupní textové pole</i>
textEdit = QtGui.QTextEdit(self)
textEdit.setAcceptRichText(False)
</pre>

<img src="https://i.iinfo.cz/images/162/pyside11-12.png" class="image-319922" alt="&#160;" width="276" height="270" />
<p><i>Obrázek 13: Víceřádkový dokument (část zdrojového kódu) zobrazený bez
použití rich text formátu.</i></p>

<p>Pokud potřebujeme získat text zadaný uživatelem, postačuje u obou widgetu
zavolat metodu <strong>toPlainText</strong>, která text vrátí a to včetně znaků
pro konec řádku (\n):</p>

<pre>
text = self.textEdit.toPlainText()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Šestý demonstrační příklad: widget <strong>QTextEdit</strong> ve funkci víceřádkového textového pole</h2>

<p>V&nbsp;dnešním předposledním demonstračním příkladu je ukázáno použití
widgetu typu <strong>QTextEdit</strong> pro zobrazení víceřádkového textu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        quitButton = self.prepareQuitButton()
        showTextButton = self.prepareShowTextButton()
        self.textEdit = self.prepareTextEdit()
&nbsp;
        <i># vytvoření prvního správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vytvoření druhého správce geometrie</i>
        subLayout = QtGui.QHBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(self.textEdit)
        topLayout.addLayout(subLayout)
&nbsp;
        <i># tlačítka vložíme do druhého správce geometrie</i>
        subLayout.addWidget(showTextButton)
        subLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareShowTextButton</strong>(self):
        <i># druhé tlačítko</i>
        showTextButton = QtGui.QPushButton('Show text', self)
        showTextButton.resize(showTextButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        showTextButton.clicked.connect(self.showTextDialog)
        return showTextButton
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareTextEdit</strong>(self):
        <i># víceřádkové vstupní textové pole</i>
        textEdit = QtGui.QTextEdit(self)
        textEdit.setAcceptRichText(False)
        return textEdit
&nbsp;
    def <strong>showTextDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        text = self.textEdit.toPlainText()
        msgBox.setText(u'Text:\n----------------\n{t}\n----------------'.format(t=text))
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow + QListWidget")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Základní zpracování HTML</h2>

<p>Podívejme se nyní na způsob, jakým je možné ovládací prvek
<strong>QTextEdit</strong> použít ve funkci jednoduchého zobrazovače HTML
stránek (může se například jednat o dokumentaci k&nbsp;aplikaci atd.). Nejprve
prvek jednoduše vytvoříme:</p>

<pre>
textEdit = QtGui.QTextEdit(self)
</pre>

<p>Dále nastavíme dvě důležité vlastnosti &ndash; prvek bude podporovat rich
text formát a navíc nebude editovatelný (tj.&nbsp;bude <i>read only</i>).
Vlastnost <i>read only</i> je ovšem platná pro vstup od uživatele (ten nebude
povolen), zatímco programové změny obsahu textového pole povoleny jsou:</p>

<pre>
textEdit.setAcceptRichText(True)
textEdit.setReadOnly(True)
</pre>

<p>V&nbsp;posledním kroku se pokusíme do widgetu načíst obsah HTML stránky:</p>

<pre>
import io
&nbsp;
with io.open("test.html", encoding="utf-8") as fin:
    textEdit.setHtml(fin.read())
</pre>

<p>Poznámka: funkci <strong>io.open</strong> zde používám z&nbsp;toho důvodu,
aby bylo možné specifikovat kódování HTML stránky, a to i v&nbsp;Pythonu
2.x.</p>

<img src="https://i.iinfo.cz/images/162/pyside11-13.png" class="image-319923" alt="&#160;" width="642" height="507" />
<p><i>Obrázek 14: Na tomto screenshotu si povšimněte, že jsou správně
zpracovány i styly.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Sedmý demonstrační příklad: widget <strong>QTextEdit</strong> ve funkci jednoduchého prohlížeče HTML stránek</h2>

<p>V&nbsp;sedmém a současně i dnešním posledním příkladu si ukážeme, jakým
způsobem je možné vytvořit velmi jednoduchý prohlížeč HTML stránek. Tento
prohlížeč dokáže pracovat s&nbsp;většinou základních značek HTML, zpracuje CSS
(i když některé typy selektorů nejsou podporovány) a zobrazuje i tabulky a
obrázky. Ovšem například na odkazy budete klikat marně &ndash; aby fungovaly
tak, jak se očekává, bylo by nutné namísto widgetu <strong>QTextEdit</strong>
použít od něj odvozený widget <strong>QTextBrowser</strong>, s&nbsp;jehož
možnostmi se podrobněji seznámíme v&nbsp;navazujícím článku.</p>

<img src="https://i.iinfo.cz/images/162/pyside11-14.png" class="image-319924" alt="&#160;" width="642" height="507" />
<p><i>Obrázek 15: V&nbsp;dolní části tohoto screenshotu můžete vidět způsob
zobrazení tabulek.</i></p>

<p>Opět se podívejme na výpis zdrojového kódu dnešního posledního
demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import io
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        quitButton = self.prepareQuitButton()
        self.textEdit = self.prepareTextEdit()
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(self.textEdit)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareShowTextButton</strong>(self):
        <i># druhé tlačítko</i>
        showTextButton = QtGui.QPushButton('Show text', self)
        showTextButton.resize(showTextButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        showTextButton.clicked.connect(self.showTextDialog)
        return showTextButton
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareTextEdit</strong>(self):
        <i># jednořádkové vstupní textové pole</i>
        textEdit = QtGui.QTextEdit(self)
        textEdit.setAcceptRichText(True)
        textEdit.setReadOnly(True)
        with io.open("test.html", encoding="utf-8") as fin:
            textEdit.setHtml(fin.read())
        return textEdit
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        self.resize(640, 480)
        self.setWindowTitle("QMainWindow + QListWidget")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

<img src="https://i.iinfo.cz/images/162/pyside11-15.png" class="image-319925" alt="&#160;" width="642" height="507" />
<p><i>Obrázek 16: Widget <strong>QTextEdit</strong> dokáže zobrazit i obrázky
vložené do HTML pomocí značky &lt;img&gt;.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech sedmi dnes popsaných demonstračních příkladů byly opět,
podobně jako tomu bylo i v&nbsp;předchozích článcích, uloženy do Git repositáře
dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>93_line_edit.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/93_line_edit.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/93_line_edit.py</a></td></tr>
<tr><td>94_line_edit_set_properties.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/94_line_edit_set_properties.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/94_line_edit_set_properties.py</a></td></tr>
<tr><td>95_line_edit_input_mask.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/95_line_edit_input_mask.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/95_line_edit_input_mask.py</a></td></tr>
<tr><td>96_line_edit_int_validator.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/96_line_edit_int_validator.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/96_line_edit_int_validator.py</a></td></tr>
<tr><td>97_line_edit_regexp_validator.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/97_line_edit_regexp_validator.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/97_line_edit_regexp_validator.py</a></td></tr>
<tr><td>98_text_edit.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/98_text_edit.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/98_text_edit.py</a></td></tr>
<tr><td>99_text_edit_as_html_viewer.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/99_text_edit_as_html_viewer.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/99_text_edit_as_html_viewer.py</a></td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>QImage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html</a>
</li>

<li>QPixmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html</a>
</li>

<li>QBitmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html</a>
</li>

<li>QPaintDevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html</a>
</li>

<li>QPicture<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html</a>
</li>

<li>QPainter<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html</a>
</li>

<li>QPainterPath<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html</a>
</li>

<li>QGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html</a>
</li>

<li>QLinearGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html</a>
</li>

<li>QRadialGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html</a>
</li>

<li>Afinní zobrazení<br />
<a href="https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD">https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QLineEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html</a>
</li>

<li>QTextEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QIntValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html</a>
</li>

<li>QRegExpValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

