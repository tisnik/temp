<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Další užitečné ovládací prvky nabízené frameworkem PySide</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Další užitečné ovládací prvky nabízené frameworkem PySide</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V popisu widgetů nabízených frameworkem PySide dnes budeme pokračovat. V první části článku si popíšeme způsob použití splashscreenu, ve druhé části pak všechny ovládací prvky založené na obecném posuvníku. Jedná se o scrollbar, klasický posuvník a o otočný prvek (dial).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Další užitečné ovládací prvky poskytované frameworkem PySide</a></p>
<p><a href="#k02">2. Využití splashscreenu u aplikací s&nbsp;pomalejší inicializací</a></p>
<p><a href="#k03">3. První demonstrační příklad: zobrazení splashscreenu při spouštění aplikace</a></p>
<p><a href="#k04">4. Druhý demonstrační příklad: využití splashscreenu ještě před inicializací a zobrazením hlavního okna aplikace</a></p>
<p><a href="#k05">5. Třetí demonstrační příklad: automatické skrytí splashscreenu po zobrazení hlavního okna aplikace</a></p>
<p><a href="#k06">6. Scrollbar ve funkci samostatného ovládacího prvku</a></p>
<p><a href="#k07">7. Čtvrtý demonstrační příklad: zobrazení vertikálního scrollbaru</a></p>
<p><a href="#k08">8. Pátý demonstrační příklad: změna orientace scrollbaru z&nbsp;vertikálního na horizontální</a></p>
<p><a href="#k09">9. Události generované při práci se scrollbarem</a></p>
<p><a href="#k10">10. Šestý demonstrační příklad: nastavení výchozí hodnoty scrollbaru</a></p>
<p><a href="#k11">11. Sedmý demonstrační příklad: nastavení dalších parametrů scrollbaru</a></p>
<p><a href="#k12">12. Výběr celočíselné hodnoty s&nbsp;využitím ovládacího prvku <strong>QSlider</strong></a></p>
<p><a href="#k13">13. Osmý demonstrační příklad: horizontální posuvník v&nbsp;hlavním okně aplikace</a></p>
<p><a href="#k14">14. Devátý demonstrační příklad: zobrazení různých typů značek u horizontálních posuvníků</a></p>
<p><a href="#k15">15. Desátý demonstrační příklad: svislé (vertikální) posuvníky s&nbsp;různým typem značek</a></p>
<p><a href="#k16">16. Ovládací prvek <strong>QDial</strong> a způsob jeho použití</a></p>
<p><a href="#k17">17. Zobrazení widgetu <strong>QDial</strong> na ploše hlavního okna aplikace</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Další užitečné ovládací prvky poskytované frameworkem PySide</h2>

<p>Ve třináctém článku věnovaném tvorbě aplikací s&nbsp;grafickým uživatelským
rozhraním založeným na frameworku <i>PySide</i> si popíšeme některé další
užitečné ovládací prvky (widgety), které lze při tvorbě aplikací použít.
Nejprve se zmíníme o možnosti zobrazení tzv.&nbsp;<i>splashscreenu</i> při
spouštění aplikace a zejména ještě před inicializací a zobrazením hlavního
okna. Ve druhé části článku si popíšeme tři ovládací prvky, které jsou určeny
pro zadávání (celo)číselných údajů, ale nikoli přímým zápisem jednotlivých
cifer (k&nbsp;této činnosti by ostatně dostačovalo běžné vstupní textové pole),
ale interaktivně &ndash; s&nbsp;využitím <a href="#k06">scrollbaru</a>, <a
href="#12">posuvníku (slideru)</a> nebo <a href="#k16">prvku typu
<i>dial</i>,</a> který svým vzhledem i způsobem ovládání připomíná otočné
ovládací prvky používané například v&nbsp;audio zařízeních (ovládání hlasitosti
atd.).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Využití splashscreenu u aplikací s&nbsp;pomalejší inicializací</h2>

<p>U mnoha rozsáhlejších aplikací s&nbsp;grafickým uživatelským rozhraním se
setkáme s&nbsp;použitím tzv.&nbsp;<i>splashscreenu</i>. Jedná se o jednoduché
okno (typicky bez rámečku i bez dalších dekorací), které se zobrazí ihned po
spuštění aplikace, tj.&nbsp;tehdy, kdy ještě neproběhla úplná inicializace
aplikace a kdy například ještě ani není zobrazeno hlavní okno. Splashscreen
typicky obsahuje obrázek s&nbsp;logem aplikace, popř.&nbsp;se zde mohou
zobrazovat i další zprávy informující uživatele o postupné inicializaci
jednotlivých subsystémů aplikace (viz například sekvence spouštění GIMPu).</p>

<img src="https://i.iinfo.cz/images/615/pyside13-1.png" class="image-321003" alt="&#160;" height="102" width="199" />
<p><i>Obrázek 1: Logo projektu PySide, které použijeme pro splashscreen
v&nbsp;dále uvedených demonstračních příkladech.</i></p>

<p>Splashscreen si můžeme vytvořit velmi jednoduše, a to s&nbsp;využitím
objektu typu <strong>QSplashScreen</strong>. V&nbsp;nejjednodušším případě
předáme tomuto objektu instanci třídy <strong>QPixmap</strong> s&nbsp;obrázkem,
který se má ve splashscreenu zobrazit:</p>

<pre>
<i># splashscreen</i>
pixmap = QtGui.QPixmap("pixmaps/pysidelogo.png")
splash = QtGui.QSplashScreen(pixmap)
splash.show()
</pre>

<p>Následně můžeme vytvořit hlavní okno aplikace, provést inicializaci všech
widgetů, datových struktur atd.:</p>

<pre>
<i># vytvoření a zobrazení hlavního okna</i>
window = MainWindow()
</pre>

<p>Splashscreen se může automaticky zavřít po zobrazení hlavního okna. Tohoto
chování dosáhneme použitím metody <strong>QSplashScreen.finish()</strong>,
které předáme referenci na okno, po jehož zobrazení se splashscreen automaticky
zavře:</p>

<pre>
<i># zajistíme, aby se po zobrazení hlavního okna splashscreen automaticky skryl</i>
splash.finish(window)
&nbsp;
window.showMainWindow(app)
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad: zobrazení splashscreenu při spouštění aplikace</h2>

<p>V&nbsp;prvním demonstračním příkladu je ukázáno základní použití
splashscreenu. Komponenta představující splashscreen je inicializována a
zobrazena ještě před zobrazením hlavního okna. Ve splashscreenu je zobrazen
rastrový obrázek s&nbsp;logem frameworku <i>PySide</i>, který jsme již viděli
v&nbsp;předchozí kapitole. Ovšem vzhledem k&nbsp;tomu, že žádným způsobem
neřešíme skrytí splashscreenu po inicializaci hlavního okna, budou nakonec obě
komponenty na desktopu zobrazeny současně, což je ostatně patrné
z&nbsp;následujícího screenshotu:</p>

<img src="https://i.iinfo.cz/images/615/pyside13-2.png" class="image-321004" alt="&#160;" height="276" width="466" />
<p><i>Obrázek 2: Zobrazení splashscreenu společně s&nbsp;hlavním oknem
aplikace.</i></p>

<p>Zdrojový kód dnešního prvního demonstračního příkladu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># vytvoření widgetů vkládaných do okna</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># self.resize(450, 450)</i>
        self.setWindowTitle("QSplashScreen")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>showMainWindow(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
&nbsp;
    <i># splashscreen</i>
    pixmap = QtGui.QPixmap("pixmaps/pysidelogo.png")
    splash = QtGui.QSplashScreen(pixmap)
    splash.show()
&nbsp;
    <i># vytvoření a zobrazení hlavního okna</i>
    window = MainWindow()
    window.showMainWindow(app)
&nbsp;
    <i># vstup do smyčky událostí (event loop)</i>
    app.exec_()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Druhý demonstrační příklad: využití splashscreenu ještě před inicializací a zobrazením hlavního okna aplikace</h2>

<p>Ve druhém příkladu schválně pozdržíme zobrazení hlavního okna, aby bylo
patrné, že se splashscreen skutečně zobrazí prakticky okamžitě. Celá věc má ale
jeden háček &ndash; pokud zobrazení hlavního okna pozdržíme funkcí
<strong>time.sleep()</strong>, splashscreen se nezobrazí ihned podle našeho
očekávání. Je tomu tak z&nbsp;toho důvodu, že <strong>time.sleep()</strong> je
blokující operace, takže se ani nezavolá smyčka pro správu událostí. Řešení
spočívá v&nbsp;&bdquo;rozsekání&ldquo; intervalu, v&nbsp;němž hlavní vlákno
aplikace čeká v&nbsp;<strong>time.sleep()</strong>, na menší části, přičemž se
vždy v&nbsp;každém mezičase zavolá metoda
<strong>QApplication.processEvents()</strong>, která zpracování událostí
zajistí.</p>

<p>V&nbsp;dalším kódu je čekání &bdquo;rozsekáno&ldquo; po 100ms, takže se
splashscreen zobrazí skutečně prakticky okamžitě:</p>

<pre>
<i># uspání hlavního vlákna aplikace na zadaný počet sekund</i>
def <strong>sleep(app, seconds):</strong>
    print('sleeping')
&nbsp;
    for i in range(0, 10*seconds):
        print(i)
        app.processEvents()
        time.sleep(1/10.0)
&nbsp;
    print('waking up')
</pre>

<p>Opět se podívejme na zdrojový kód demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
<i># používáme jen pro import funkce sleep</i>
import time
&nbsp;
&nbsp;
<i># uspání hlavního vlákna aplikace na zadaný počet sekund</i>
def <strong>sleep(app, seconds):</strong>
    print('sleeping')
&nbsp;
    for i in range(0, 10*seconds):
        print(i)
        app.processEvents()
        time.sleep(1/10.0)
&nbsp;
    print('waking up')
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># vytvoření widgetů vkládaných do okna</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># self.resize(450, 450)</i>
        self.setWindowTitle("QSplashScreen")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>showMainWindow(self, app):</strong>
        sleep(app, 2)
        <i># zobrazení okna na obrazovce</i>
        self.show()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
&nbsp;
    <i># splashscreen</i>
    pixmap = QtGui.QPixmap("pixmaps/pysidelogo.png")
    splash = QtGui.QSplashScreen(pixmap)
    splash.show()
&nbsp;
    <i># vytvoření a zobrazení hlavního okna</i>
    window = MainWindow()
    window.showMainWindow(app)
&nbsp;
    <i># vstup do smyčky událostí (event loop)</i>
    app.exec_()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Třetí demonstrační příklad: automatické skrytí splashscreenu po zobrazení hlavního okna aplikace</h2>

<p>Ve třetím příkladu je zajištěno automatické skrytí splashscreenu ve chvíli,
kdy je již zobrazeno hlavní okno aplikace. Skrytí je provedeno asynchronně,
tj.&nbsp;nikoli explicitním voláním metody <strong>destroy</strong> či
<strong>hide</strong>, ale nepřímo specifikací, po zobrazení jakého widgetu či
kontejneru se má splashscreen skrýt:</p>

<pre>
app = QtGui.QApplication(sys.argv)
&nbsp;
<i># splashscreen</i>
pixmap = QtGui.QPixmap("pixmaps/pysidelogo.png")
splash = QtGui.QSplashScreen(pixmap)
splash.show()
&nbsp;
<i># vytvoření a zobrazení hlavního okna</i>
window = MainWindow()
window.showMainWindow(app)
&nbsp;
<i># zajistíme, aby se po zobrazení hlavního okna splashscreen automaticky skryl</i>
splash.finish(window)
&nbsp;
<i># vstup do smyčky událostí (event loop)</i>
app.exec_()
</pre>

<p>Poznámka: vyzkoušejte si, jak se projeví prohození řádku s&nbsp;voláním
<strong>splash.finish()</strong> s&nbsp;řádkem obsahujícím
<strong>window.showMainWindow()</strong>.</p>

<p>Opět následuje výpis zdrojového kódu demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
<i># používáme jen pro import funkce sleep</i>
import time
&nbsp;
&nbsp;
<i># uspání hlavního vlákna aplikace na zadaný počet sekund</i>
def <strong>sleep(app, seconds):</strong>
    print('sleeping')
&nbsp;
    for i in range(0, 10*seconds):
        print(i)
        app.processEvents()
        time.sleep(1/10.0)
&nbsp;
    print('waking up')
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># vytvoření widgetů vkládaných do okna</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># self.resize(450, 450)</i>
        self.setWindowTitle("QSplashScreen")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>showMainWindow(self, app):</strong>
        sleep(app, 2)
        <i># zobrazení okna na obrazovce</i>
        self.show()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
&nbsp;
    <i># splashscreen</i>
    pixmap = QtGui.QPixmap("pixmaps/pysidelogo.png")
    splash = QtGui.QSplashScreen(pixmap)
    splash.show()
&nbsp;
    <i># vytvoření a zobrazení hlavního okna</i>
    window = MainWindow()
    window.showMainWindow(app)
&nbsp;
    <i># zajistíme, aby se po zobrazení hlavního okna splashscreen automaticky skryl</i>
    splash.finish(window)
&nbsp;
    <i># vstup do smyčky událostí (event loop)</i>
    app.exec_()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Scrollbar ve funkci samostatného ovládacího prvku</h2>

<p>Ve frameworku <i>PySide</i> máme k&nbsp;dispozici hned několik ovládacích
prvků (widgetů) určených pro interaktivní zadávání celočíselných numerických
údajů. Tyto údaje mohou představovat různé veličiny, například podíly barvových
složek při míchání barev atd. Všechny tyto ovládací prvky jsou odvozeny od
třídy <strong>QAbstractSlider</strong>. V&nbsp;první řadě se jedná o samostatný
scrollbar, tj.&nbsp;scrollbar nenavázaný na žádnou další komponentu, dále pak o
posuvník (<i>slider</i>) a PySide programátorům dokonce nabízí i otočný prvek
(<i>dial</i>). Nejprve se věnujme klasickému scrollbaru. Ten je možné použít
pro mnoho operací, například pro posun dat v&nbsp;jiném widgetu (například při
zobrazení dokumentů), ovšem scrollbar může vystupovat i jako zcela samostatný
ovládací prvek.</p>

<p>Vytvoření scrollbaru je snadné. Pokud vyžadujeme vertikální scrollbar,
použije se konstruktor bez parametrů:</p>

<pre>
scrollbar = QtGui.QScrollBar()
</pre>

<p>Při požadavku na použití scrollbaru horizontálního se musí jeho orientace
určit explicitně:</p>

<pre>
scrollbar = QtGui.QScrollBar(QtCore.Qt.Horizontal)
</pre>

<p>Při práci se scrollbarem se může generovat několik typů událostí, přičemž
pravděpodobně nejčastěji budeme reagovat na událost vytvořenou ve chvíli, kdy
se změní pozice posuvné části scrollbaru (té se pro větší zmatení také říká
posuvník). Touto problematikou se budeme zabývat <a href="#k09">v&nbsp;deváté
kapitole</a>. Samozřejmě je možné programově nastavit mezní hodnoty posuvníku
(implicitně 0..99) i jeho aktuální pozici v&nbsp;rámci vybíraných hodnot.
Poslední užitečnou operací je stanovení výšky nebo délky posuvné oblasti, čehož
se využívá v&nbsp;těch případech, kdy velikost posuvné oblasti například
reprezentuje stránku dokumentu (pokud tedy uživatel pracuje se čtyřstránkovým
dokumentem, měla by být velikost posuvné oblasti zhruba čtvrtinová
v&nbsp;porovnání s&nbsp;celkovou délkou nebo výškou scrollbaru).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Čtvrtý demonstrační příklad: zobrazení vertikálního scrollbaru</h2>

<p>V&nbsp;dnešním čtvrtém demonstračním příkladu je ukázán způsob vytvoření
vertikálního scrollbaru. Tato orientace scrollbaru je výchozí, takže scrollbar
vlastně není zapotřebí žádným způsobem konfigurovat a metoda pro vytvoření
scrollbaru je tedy jen dvouřádková:</p>

<pre>
def <strong>prepareScrollbar(self):</strong>
    <i># vytvoření scrollbaru</i>
    scrollbar = QtGui.QScrollBar()
&nbsp;
    return scrollbar
</pre>

<p>Scrollbar umístíme do kontejneru naprosto stejným způsobem, jako jakýkoli
jiný widget:</p>

<pre>
<i># vytvoření widgetů vkládaných do okna</i>
scrollBar = self.prepareScrollbar()
quitButton = self.prepareQuitButton()
&nbsp;
<i># vytvoření správce geometrie</i>
layout = QtGui.QVBoxLayout()
&nbsp;
<i># umístění widgetů do okna</i>
layout.addWidget(scrollBar)
layout.addWidget(quitButton)
&nbsp;
<i># nastavení správce geometrie a vložení všech komponent do okna</i>
self.setLayout(layout)
&nbsp;
</pre>

<img src="https://i.iinfo.cz/images/615/pyside13-3.png" class="image-321005" alt="&#160;" height="477" width="452" />
<p><i>Obrázek 3: Screenshot čtvrtého demonstračního příkladu se zobrazeným
vertikálně orientovaným scrollbarem.</i></p>

<p>Podívejme se na zdrojový kód příkladu se scrollbarem:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># vytvoření widgetů vkládaných do okna</i>
        scrollBar = self.prepareScrollbar()
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(scrollBar)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareScrollbar(self):</strong>
        <i># vytvoření scrollbaru</i>
        scrollbar = QtGui.QScrollBar()
&nbsp;
        return scrollbar
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        self.resize(450, 450)
        self.setWindowTitle("QScrollBar")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Pátý demonstrační příklad: změna orientace scrollbaru z&nbsp;vertikálního na horizontální</h2>

<p>Pátý příklad se od <a href="#k07">příkladu předchozího</a> odlišuje pouze
tím, že je scrollbar orientován horizontálně, tj.&nbsp;vodorovně. Jediná změna
v&nbsp;programovém kódu spočívá v&nbsp;předání parametru do konstruktoru
widgetu <strong>QScrollBar</strong>:</p>

<pre>
def <strong>prepareScrollbar(self):</strong>
    <i># vytvoření scrollbaru</i>
    scrollbar = QtGui.QScrollBar(QtCore.Qt.Horizontal)
&nbsp;
    return scrollbar
</pre>

<img src="https://i.iinfo.cz/images/615/pyside13-4.png" class="image-321006" alt="&#160;" height="327" width="452" />
<p><i>Obrázek 4: Screenshot pátého demonstračního příkladu se zobrazeným
horizontálně orientovaným scrollbarem.</i></p>

<p>Opět si ukážeme úplný zdrojový kód tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># vytvoření widgetů vkládaných do okna</i>
        scrollBar = self.prepareScrollbar()
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(scrollBar)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareScrollbar(self):</strong>
        <i># vytvoření scrollbaru</i>
        scrollbar = QtGui.QScrollBar(QtCore.Qt.Horizontal)
&nbsp;
        return scrollbar
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        self.resize(450, 300)
        self.setWindowTitle("QScrollBar")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Události generované při práci se scrollbarem</h2>

<p>Při manipulaci se scrollbary samozřejmě mohou vzniknout události různého
typu. Popis těchto událostí nalezneme v&nbsp;dokumentaci ke třídě <a
href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractSlider.html">QAbstractSlider</a>:</p>

<table>
<tr><th>Událost</th><th>Parametry svázané s&nbsp;událostí</th></tr>
<tr><td>actionTriggered</td><td>action</td></tr>
<tr><td>rangeChanged   </td><td>min, max</td></tr>
<tr><td>sliderMoved    </td><td>position</td></tr>
<tr><td>sliderPressed  </td><td>&times;</td></tr>
<tr><td>sliderReleased </td><td>&times;</td></tr>
<tr><td>valueChanged   </td><td>value</td></tr>
</table>

<p>Nejčastěji je nutné reagovat na změnu pozice posuvníku scrollbaru,
k&nbsp;čemuž slouží událost reprezentovaná signálem
<strong>valueChanged</strong>. Propojení události s&nbsp;jejím handlerem je
snadné:</p>

<pre>
def <strong>prepareScrollbar(self):</strong>
    <i># vytvoření scrollbaru</i>
    scrollbar = QtGui.QScrollBar(QtCore.Qt.Horizontal)
    scrollbar.valueChanged.connect(self.onScrollBarValueChanged)
    scrollbar.setValue(50)
&nbsp;
    return scrollbar
</pre>

<p>Samotnému handleru je předána nová hodnota posuvníku, ovšem vzhledem
k&nbsp;tomu, že voláme metodu a nikoli obyčejnou funkci, nesmíme zapomenout ani
na parametr <strong>self</strong>:</p>

<pre>
def <strong>onScrollBarValueChanged(self, value):</strong>
    text = "Scrollbar value: {v}".format(v=value)
    self.label.setText(text)
</pre>

<img src="https://i.iinfo.cz/images/615/pyside13-5.png" class="image-321007" alt="&#160;" height="327" width="452" />
<p><i>Obrázek 5: Nastavení výchozí hodnoty scrollbaru.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Šestý demonstrační příklad: nastavení výchozí hodnoty scrollbaru</h2>

<p>V&nbsp;dnešním šestém demonstračním příkladu je ukázáno, jak lze
naprogramovat reakci na změnu pozice posuvníku scrollbaru. Vzhledem
k&nbsp;tomu, že v&nbsp;příkladu využíváme funkce
<strong>prepareScrollbar()</strong> a
<strong>onScrollBarValueChanged()</strong> popsané <a
href="#k09">v&nbsp;předchozí kapitole</a>, si zde můžeme bez dalších
podrobnějších komentářů přímo ukázat kód tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># vytvoření widgetů vkládaných do okna</i>
        self.label = QtGui.QLabel("")
        scrollBar = self.prepareScrollbar()
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.label)
        layout.addWidget(scrollBar)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareScrollbar(self):</strong>
        <i># vytvoření scrollbaru</i>
        scrollbar = QtGui.QScrollBar(QtCore.Qt.Horizontal)
        scrollbar.valueChanged.connect(self.onScrollBarValueChanged)
        scrollbar.setValue(50)
&nbsp;
        return scrollbar
&nbsp;
    def <strong>onScrollBarValueChanged(self, value):</strong>
        text = "Scrollbar value: {v}".format(v=value)
        self.label.setText(text)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        self.resize(450, 300)
        self.setWindowTitle("QScrollBar")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

<img src="https://i.iinfo.cz/images/615/pyside13-6.png" class="image-321008" alt="&#160;" height="327" width="452" />
<p><i>Obrázek 6: Scrollbar má nulovou hodnotu přesně uprostřed svého dráhy.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Sedmý demonstrační příklad: nastavení dalších parametrů scrollbaru</h2>

<p>V&nbsp;dnešním sedmém demonstračním příkladu je ukázáno, jakým způsobem se
nastavují další parametry scrollbaru. Jedná se samozřejmě především o
specifikaci nejmenší a největší hodnoty, které odpovídají mezní polohy
posuvníku (nezávisle na orientaci scrollbaru). Výchozí hodnoty jsou 0 a 100,
ale je možné nastavit prakticky libovolné celé číslo z&nbsp;32bitového rozsahu,
i když je nutné říci, že v&nbsp;případě použití větších rozdílů mezi minimální
a maximální hodnotou nebude ovládání pomocí klávesnice příliš praktické. Dále
je možné nastavit výchozí <i>krok</i> posuvníku při ovládání z&nbsp;klávesnice
a v&nbsp;neposlední řadě také krok odpovídající jedné stránce (použitelné ve
chvíli, kdy se scrollbar používá pro listování nějakým dokumentem). Toto
nastavení současně změní šířku posuvníku, což si sami můžete vyzkoušet změnou
parametru metody <strong>QScrollBar.setPageStep()</strong>:</p>

<pre>
def <strong>prepareScrollbar(self):</strong>
    <i># vytvoření scrollbaru</i>
    scrollbar = QtGui.QScrollBar(QtCore.Qt.Horizontal)
    scrollbar.valueChanged.connect(self.onScrollBarValueChanged)
&nbsp;
    scrollbar.setMinimum(-100)
    scrollbar.setMaximum(100)
    scrollbar.setSingleStep(1)
    scrollbar.setPageStep(10)
    scrollbar.setValue(1)
&nbsp;
    return scrollbar
</pre>

<p>Následuje výpis zdrojového kódu tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># vytvoření widgetů vkládaných do okna</i>
        self.label = QtGui.QLabel("")
        scrollBar = self.prepareScrollbar()
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.label)
        layout.addWidget(scrollBar)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareScrollbar(self):</strong>
        <i># vytvoření scrollbaru</i>
        scrollbar = QtGui.QScrollBar(QtCore.Qt.Horizontal)
        scrollbar.valueChanged.connect(self.onScrollBarValueChanged)
&nbsp;
        scrollbar.setMinimum(-100)
        scrollbar.setMaximum(100)
        scrollbar.setSingleStep(1)
        scrollbar.setPageStep(10)
        scrollbar.setValue(1)
&nbsp;
        return scrollbar
&nbsp;
    def <strong>onScrollBarValueChanged(self, value):</strong>
        text = "Scrollbar value: {v}".format(v=value)
        self.label.setText(text)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        self.resize(450, 300)
        self.setWindowTitle("QScrollBar")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Výběr celočíselné hodnoty s&nbsp;využitím ovládacího prvku <strong>QSlider</strong></h2>

<p>Scrollbar popsaný v&nbsp;předchozích kapitolách je primárně určen pro
orientaci uživatele v&nbsp;rozsáhlejších dokumentech
popř.&nbsp;v&nbsp;obrázcích atd. Sice ho je možné použít i pro přímé zadání
celočíselné hodnoty, což jsme si ostatně ukázali, ale pro tuto činnost je
výhodnější spíše použití posuvníku neboli widgetu typu <i>slider</i>. Předností
posuvníku je fakt, že je u něj možné zobrazit značky představující zvolenou
škálu hodnot a tak zrychlit změnu hodnot prováděnou uživatelem.</p>

<p>Posuvník se ve frameworku <i>PySide</i> vytváří prakticky stejným způsobem
jako scrollbar, tj.&nbsp;při jeho konstrukci specifikujeme orientaci posuvníku
(svislou či vodorovnou):</p>

<pre>
def <strong>prepareSlider(self):</strong>
    <i># vytvoření slideru</i>
    slider = QtGui.QSlider(QtCore.Qt.Horizontal)
    slider.valueChanged.connect(self.onSliderValueChanged)
</pre>

<p>Následně můžeme posuvník umístit do libovolného kontejneru, například do
hlavního okna aplikace:</p>

<pre>
<i># vytvoření widgetů vkládaných do okna</i>
self.label = QtGui.QLabel("")
slider = self.prepareSlider()
quitButton = self.prepareQuitButton()
&nbsp;
<i># vytvoření správce geometrie</i>
layout = QtGui.QVBoxLayout()
&nbsp;
<i># umístění widgetů do okna</i>
layout.addWidget(self.label)
layout.addWidget(slider)
layout.addWidget(quitButton)
&nbsp;
<i># nastavení správce geometrie a vložení všech komponent do okna</i>
self.setLayout(layout)
</pre>

<img src="https://i.iinfo.cz/images/615/pyside13-7.png" class="image-321009" alt="&#160;" height="327" width="452" />
<p><i>Obrázek 7: Horizontální posuvník v&nbsp;hlavním okně aplikace.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Osmý demonstrační příklad: horizontální posuvník v&nbsp;hlavním okně aplikace</h2>

<p>V&nbsp;dalším demonstračním příkladu je ukázán způsob umístění
horizontálního posuvníku do hlavního okna aplikace. Hlavní části kódu jsme si
již vysvětlili <a href="#k12">v&nbsp;předchozí kapitole</a>, takže se jen
podívejme na úplný zdrojový kód tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># vytvoření widgetů vkládaných do okna</i>
        self.label = QtGui.QLabel("")
        slider = self.prepareSlider()
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.label)
        layout.addWidget(slider)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareSlider(self):</strong>
        <i># vytvoření slideru</i>
        slider = QtGui.QSlider(QtCore.Qt.Horizontal)
        slider.valueChanged.connect(self.onSliderValueChanged)
&nbsp;
        return slider
&nbsp;
    def <strong>onSliderValueChanged(self, value):</strong>
        text = "Slider value: {v}".format(v=value)
        self.label.setText(text)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        self.resize(450, 300)
        self.setWindowTitle("QSlider")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Devátý demonstrační příklad: zobrazení různých typů značek u horizontálních posuvníků</h2>

<p>Posuvníky se od klasických scrollbarů odlišují především tím, že je u nich
možné zobrazit (osové) značky. Ty lze umístit na libovolnou stranu posuvníku,
popř.&nbsp;na obě strany. Pro nastavení stylů značek se používá metoda
<strong>QSlider.setTickPosition()</strong>, které se předá jedna
z&nbsp;konstant:</p>

<ul>
<li>QtGui.QSlider.NoTicks</li>
<li>QtGui.QSlider.TicksBothSides</li>
<li>QtGui.QSlider.TicksAbove</li>
<li>QtGui.QSlider.TicksBelow</li>
<li>QtGui.QSlider.TicksLeft</li>
<li>QtGui.QSlider.TicksRight</li>
</ul>

<p>Všechny kombinace můžete vidět na dalším screenshotu:</p>

<img src="https://i.iinfo.cz/images/615/pyside13-8.png" class="image-321010" alt="&#160;" height="477" width="452" />
<p><i>Obrázek 8: Horizontální posuvníky s&nbsp;různými kombinacemi
značek.</i></p>

<p>Opět se podívejme na zdrojový kód příkladu, po jehož spuštění se zobrazí
různé typy značek u posuvníků:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># vytvoření widgetů vkládaných do okna</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
&nbsp;
        tickPositions = (
            QtGui.QSlider.NoTicks,
            QtGui.QSlider.TicksBothSides,
            QtGui.QSlider.TicksAbove,
            QtGui.QSlider.TicksBelow,
            QtGui.QSlider.TicksLeft,
            QtGui.QSlider.TicksRight
        )
&nbsp;
        for tickPosition in tickPositions:
            layout.addWidget(QtGui.QLabel(str(tickPosition)))
            layout.addWidget(self.prepareSlider(tickPosition))
&nbsp;
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareSlider(self, tickPosition):</strong>
        <i># vytvoření slideru</i>
        slider = QtGui.QSlider(QtCore.Qt.Horizontal)
        slider.setTickInterval(4)
        slider.setValue(1)
        slider.setTickPosition(tickPosition)
&nbsp;
        return slider
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        self.resize(450, 450)
        self.setWindowTitle("QSlider")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Desátý demonstrační příklad: svislé (vertikální) posuvníky s&nbsp;různým typem značek</h2>

<p>Nepatrnou úpravou předchozího příkladu je možné zabezpečit zobrazení
vertikálních posuvníků s&nbsp;různými typy značek:</p>

<pre>
tickPositions = (
    QtGui.QSlider.NoTicks,
    QtGui.QSlider.TicksBothSides,
    QtGui.QSlider.TicksAbove,
    QtGui.QSlider.TicksBelow,
    QtGui.QSlider.TicksLeft,
    QtGui.QSlider.TicksRight
)
&nbsp;
for tickPosition in tickPositions:
    subLayout.addWidget(self.prepareSlider(tickPosition))
</pre>

<p>Metoda pro vytvoření posuvníku vypadá takto:</p>

<pre>
def <strong>prepareSlider(self, tickPosition):</strong>
    <i># vytvoření slideru</i>
    slider = QtGui.QSlider(QtCore.Qt.Vertical)
    slider.setTickInterval(4)
    slider.setValue(1)
    slider.setTickPosition(tickPosition)
&nbsp;
    return slider
</pre>

<img src="https://i.iinfo.cz/images/615/pyside13-9.png" class="image-321011" alt="&#160;" height="327" width="452" />
<p><i>Obrázek 9: Vertikální posuvníky s&nbsp;různými kombinacemi
značek.</i></p>

<p>Zdrojový kód dnešního desátého demonstračního příkladu vypadá takto:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># vytvoření widgetů vkládaných do okna</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření prvního správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vytvoření druhého správce geometrie</i>
        subLayout = QtGui.QHBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
&nbsp;
        tickPositions = (
            QtGui.QSlider.NoTicks,
            QtGui.QSlider.TicksBothSides,
            QtGui.QSlider.TicksAbove,
            QtGui.QSlider.TicksBelow,
            QtGui.QSlider.TicksLeft,
            QtGui.QSlider.TicksRight
        )
&nbsp;
        for tickPosition in tickPositions:
            subLayout.addWidget(self.prepareSlider(tickPosition))
&nbsp;
        topLayout.addLayout(subLayout)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareSlider(self, tickPosition):</strong>
        <i># vytvoření slideru</i>
        slider = QtGui.QSlider(QtCore.Qt.Vertical)
        slider.setTickInterval(4)
        slider.setValue(1)
        slider.setTickPosition(tickPosition)
&nbsp;
        return slider
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        self.resize(450, 300)
        self.setWindowTitle("QSlider")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Ovládací prvek <strong>QDial</strong> a způsob jeho použití</h2>

<p>Od třídy <strong>QAbstractSlider</strong> je odvozen i další ovládací prvek
nazvaný příhodně <strong>QDial</strong>. Skutečně se jedná o prvek, který se
podobá potenciometru či laditelnému kondenzátoru na rádiích (v&nbsp;dnešních
audio zařízeních ovšem i otočné prvky mívají díky použití inkrementálního
snímače digitální výstup). Vlastnosti <strong>QDialu</strong> se podobají
klasickému slideru, samozřejmě až na odlišný vzhled. I způsob vytvoření
popř.&nbsp;registrace handleru událostí je shodný:</p>

<pre>
def <strong>prepareDial(self):</strong>
    <i># vytvoření widget</i>
    dial = QtGui.QDial()
    dial.valueChanged.connect(self.onDialValueChanged)
&nbsp;
    return dial
</pre>

<img src="https://i.iinfo.cz/images/615/pyside13-10.png" class="image-321012" alt="&#160;" height="477" width="452" />
<p><i>Obrázek 10: Otočný ovládací prvek <strong>QDial</strong>.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Zobrazení widgetu <strong>QDial</strong> na ploše hlavního okna aplikace</h2>

<p>Podívejme se nyní na způsob použití otočného ovládacího prvku. Ze zdrojového
kódu je patrné, že se tento widget používá prakticky stejně, jako klasický
posuvník, samozřejmě až na vizuální rozdíly. Otočný prvek sice v&nbsp;okně
zabírá mnohem více místa, ovšem pro některé účely a pro některé typy aplikací
to nemusí být kritické (například u hudebních aplikací je použití otočného
prvku mnohem přirozenější):</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># vytvoření widgetů vkládaných do okna</i>
        self.label = QtGui.QLabel("")
        dial = self.prepareDial()
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.label)
        layout.addWidget(dial)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareDial(self):</strong>
        <i># vytvoření widget</i>
        dial = QtGui.QDial()
        dial.valueChanged.connect(self.onDialValueChanged)
&nbsp;
        return dial
&nbsp;
    def <strong>onDialValueChanged(self, value):</strong>
        text = "Dial value: {v}".format(v=value)
        self.label.setText(text)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        self.resize(450, 450)
        self.setWindowTitle("QDial")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech jedenácti dnes popsaných demonstračních příkladů byly
opět, podobně jako tomu bylo i v&nbsp;předchozích článcích, uloženy do Git
repositáře dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Adresa</th></tr>
<tr><td>1</td><td>107_splashscreen1.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/107_splashscreen1.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/107_splashscreen1.py</a></td></tr>
<tr><td>2</td><td>108_splashscreen2.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/108_splashscreen2.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/108_splashscreen2.py</a></td></tr>
<tr><td>3</td><td>109_splashscreen3.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/109_splashscreen3.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/109_splashscreen3.py</a></td></tr>
<tr><td>4</td><td>110_vertical_qscrollbar.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/110_vertical_qscrollbar.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/110_vertical_qscrollbar.py</a></td></tr>
<tr><td>5</td><td>111_horizontal_qscrollbar.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/111_horizontal_qscrollbar.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/111_horizontal_qscrollbar.py</a></td></tr>
<tr><td>6</td><td>112_scrollbar_value.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/112_scrollbar_value.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/112_scrollbar_value.py</a></td></tr>
<tr><td>7</td><td>113_scrollbar_steps.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/113_scrollbar_steps.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/113_scrollbar_steps.py</a></td></tr>
<tr><td>8</td><td>114_qslider.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/114_qslider.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/114_qslider.py</a></td></tr>
<tr><td>9</td><td>115_qslider_tick_position.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/115_qslider_tick_position.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/115_qslider_tick_position.py</a></td></tr>
<tr><td>10</td><td>116_vertical_qsliders.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/116_vertical_qsliders.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/116_vertical_qsliders.py</a></td></tr>
<tr><td>11</td><td>117_qdial.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/117_qdial.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/117_qdial.py</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>QAbstractSlider<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractSlider.html">https://pyside.github.io/docs/pyside/PySide/QtGui/AbstractSlider.html</a>
</li>

<li>QScrollBar<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QScrollBar.html">https://pyside.github.io/docs/pyside/PySide/QtGui/ScrollBar.html</a>
</li>

<li>QSlider<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QSlider.html">https://pyside.github.io/docs/pyside/PySide/QtGui/Slider.html</a>
</li>

<li>QDial<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QDial.html">https://pyside.github.io/docs/pyside/PySide/QtGui/Dial.html</a>
</li>

<li>QImage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html</a>
</li>

<li>QPixmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html</a>
</li>

<li>QBitmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html</a>
</li>

<li>QPaintDevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html</a>
</li>

<li>QPicture<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html</a>
</li>

<li>QPainter<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html</a>
</li>

<li>QPainterPath<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html</a>
</li>

<li>QGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html</a>
</li>

<li>QLinearGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html</a>
</li>

<li>QRadialGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html</a>
</li>

<li>QTableWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html</a>
</li>

<li>QTableWidgetItem<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html</a>
</li>

<li>QTreeWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html</a>
</li>

<li>QTreeWidgetItem <br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html</a>
</li>

<li>Afinní zobrazení<br />
<a href="https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD">https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QLineEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html</a>
</li>

<li>QTextEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QIntValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html</a>
</li>

<li>QRegExpValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

